<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/extra/iwnet/src/bearssl/hash/sha2big.c"><comment type="block">/*
 * Copyright (c) 2016 Thomas Pornin &lt;pornin@bolet.org&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining 
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CH</name><parameter_list>(<parameter><type><name>X</name></type></parameter>, <parameter><type><name>Y</name></type></parameter>, <parameter><type><name>Z</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>((((Y) ^ (Z)) &amp; (X)) ^ (Z))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAJ</name><parameter_list>(<parameter><type><name>X</name></type></parameter>, <parameter><type><name>Y</name></type></parameter>, <parameter><type><name>Z</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>(((Y) &amp; (Z)) | (((Y) | (Z)) &amp; (X)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROTR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>(((uint64_t)(x) &lt;&lt; (64 - (n))) | ((uint64_t)(x) &gt;&gt; (n)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BSG5_0</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>(ROTR(x, 28) ^ ROTR(x, 34) ^ ROTR(x, 39))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BSG5_1</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>(ROTR(x, 14) ^ ROTR(x, 18) ^ ROTR(x, 41))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSG5_0</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>(ROTR(x, 1) ^ ROTR(x, 8) ^ (uint64_t)((x) &gt;&gt; 7))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSG5_1</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>(ROTR(x, 19) ^ ROTR(x, 61) ^ (uint64_t)((x) &gt;&gt; 6))</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint64_t</name></type> <name><name>IV384</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{
	<expr><literal type="number">0xCBBB9D5DC1059ED8</literal></expr>, <expr><literal type="number">0x629A292A367CD507</literal></expr>,
	<expr><literal type="number">0x9159015A3070DD17</literal></expr>, <expr><literal type="number">0x152FECD8F70E5939</literal></expr>,
	<expr><literal type="number">0x67332667FFC00B31</literal></expr>, <expr><literal type="number">0x8EB44A8768581511</literal></expr>,
	<expr><literal type="number">0xDB0C2E0D64F98FA7</literal></expr>, <expr><literal type="number">0x47B5481DBEFA4FA4</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint64_t</name></type> <name><name>IV512</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{
	<expr><literal type="number">0x6A09E667F3BCC908</literal></expr>, <expr><literal type="number">0xBB67AE8584CAA73B</literal></expr>,
	<expr><literal type="number">0x3C6EF372FE94F82B</literal></expr>, <expr><literal type="number">0xA54FF53A5F1D36F1</literal></expr>,
	<expr><literal type="number">0x510E527FADE682D1</literal></expr>, <expr><literal type="number">0x9B05688C2B3E6C1F</literal></expr>,
	<expr><literal type="number">0x1F83D9ABFB41BD6B</literal></expr>, <expr><literal type="number">0x5BE0CD19137E2179</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint64_t</name></type> <name><name>K</name><index>[<expr><literal type="number">80</literal></expr>]</index></name> <init>= <expr><block>{
	<expr><literal type="number">0x428A2F98D728AE22</literal></expr>, <expr><literal type="number">0x7137449123EF65CD</literal></expr>,
	<expr><literal type="number">0xB5C0FBCFEC4D3B2F</literal></expr>, <expr><literal type="number">0xE9B5DBA58189DBBC</literal></expr>,
	<expr><literal type="number">0x3956C25BF348B538</literal></expr>, <expr><literal type="number">0x59F111F1B605D019</literal></expr>,
	<expr><literal type="number">0x923F82A4AF194F9B</literal></expr>, <expr><literal type="number">0xAB1C5ED5DA6D8118</literal></expr>,
	<expr><literal type="number">0xD807AA98A3030242</literal></expr>, <expr><literal type="number">0x12835B0145706FBE</literal></expr>,
	<expr><literal type="number">0x243185BE4EE4B28C</literal></expr>, <expr><literal type="number">0x550C7DC3D5FFB4E2</literal></expr>,
	<expr><literal type="number">0x72BE5D74F27B896F</literal></expr>, <expr><literal type="number">0x80DEB1FE3B1696B1</literal></expr>,
	<expr><literal type="number">0x9BDC06A725C71235</literal></expr>, <expr><literal type="number">0xC19BF174CF692694</literal></expr>,
	<expr><literal type="number">0xE49B69C19EF14AD2</literal></expr>, <expr><literal type="number">0xEFBE4786384F25E3</literal></expr>,
	<expr><literal type="number">0x0FC19DC68B8CD5B5</literal></expr>, <expr><literal type="number">0x240CA1CC77AC9C65</literal></expr>,
	<expr><literal type="number">0x2DE92C6F592B0275</literal></expr>, <expr><literal type="number">0x4A7484AA6EA6E483</literal></expr>,
	<expr><literal type="number">0x5CB0A9DCBD41FBD4</literal></expr>, <expr><literal type="number">0x76F988DA831153B5</literal></expr>,
	<expr><literal type="number">0x983E5152EE66DFAB</literal></expr>, <expr><literal type="number">0xA831C66D2DB43210</literal></expr>,
	<expr><literal type="number">0xB00327C898FB213F</literal></expr>, <expr><literal type="number">0xBF597FC7BEEF0EE4</literal></expr>,
	<expr><literal type="number">0xC6E00BF33DA88FC2</literal></expr>, <expr><literal type="number">0xD5A79147930AA725</literal></expr>,
	<expr><literal type="number">0x06CA6351E003826F</literal></expr>, <expr><literal type="number">0x142929670A0E6E70</literal></expr>,
	<expr><literal type="number">0x27B70A8546D22FFC</literal></expr>, <expr><literal type="number">0x2E1B21385C26C926</literal></expr>,
	<expr><literal type="number">0x4D2C6DFC5AC42AED</literal></expr>, <expr><literal type="number">0x53380D139D95B3DF</literal></expr>,
	<expr><literal type="number">0x650A73548BAF63DE</literal></expr>, <expr><literal type="number">0x766A0ABB3C77B2A8</literal></expr>,
	<expr><literal type="number">0x81C2C92E47EDAEE6</literal></expr>, <expr><literal type="number">0x92722C851482353B</literal></expr>,
	<expr><literal type="number">0xA2BFE8A14CF10364</literal></expr>, <expr><literal type="number">0xA81A664BBC423001</literal></expr>,
	<expr><literal type="number">0xC24B8B70D0F89791</literal></expr>, <expr><literal type="number">0xC76C51A30654BE30</literal></expr>,
	<expr><literal type="number">0xD192E819D6EF5218</literal></expr>, <expr><literal type="number">0xD69906245565A910</literal></expr>,
	<expr><literal type="number">0xF40E35855771202A</literal></expr>, <expr><literal type="number">0x106AA07032BBD1B8</literal></expr>,
	<expr><literal type="number">0x19A4C116B8D2D0C8</literal></expr>, <expr><literal type="number">0x1E376C085141AB53</literal></expr>,
	<expr><literal type="number">0x2748774CDF8EEB99</literal></expr>, <expr><literal type="number">0x34B0BCB5E19B48A8</literal></expr>,
	<expr><literal type="number">0x391C0CB3C5C95A63</literal></expr>, <expr><literal type="number">0x4ED8AA4AE3418ACB</literal></expr>,
	<expr><literal type="number">0x5B9CCA4F7763E373</literal></expr>, <expr><literal type="number">0x682E6FF3D6B2B8A3</literal></expr>,
	<expr><literal type="number">0x748F82EE5DEFB2FC</literal></expr>, <expr><literal type="number">0x78A5636F43172F60</literal></expr>,
	<expr><literal type="number">0x84C87814A1F0AB72</literal></expr>, <expr><literal type="number">0x8CC702081A6439EC</literal></expr>,
	<expr><literal type="number">0x90BEFFFA23631E28</literal></expr>, <expr><literal type="number">0xA4506CEBDE82BDE9</literal></expr>,
	<expr><literal type="number">0xBEF9A3F7B2C67915</literal></expr>, <expr><literal type="number">0xC67178F2E372532B</literal></expr>,
	<expr><literal type="number">0xCA273ECEEA26619C</literal></expr>, <expr><literal type="number">0xD186B8C721C0C207</literal></expr>,
	<expr><literal type="number">0xEADA7DD6CDE0EB1E</literal></expr>, <expr><literal type="number">0xF57D4F7FEE6ED178</literal></expr>,
	<expr><literal type="number">0x06F067AA72176FBA</literal></expr>, <expr><literal type="number">0x0A637DC5A2C898A6</literal></expr>,
	<expr><literal type="number">0x113F9804BEF90DAE</literal></expr>, <expr><literal type="number">0x1B710B35131C471B</literal></expr>,
	<expr><literal type="number">0x28DB77F523047D84</literal></expr>, <expr><literal type="number">0x32CAAB7B40C72493</literal></expr>,
	<expr><literal type="number">0x3C9EBE0A15C9BEBC</literal></expr>, <expr><literal type="number">0x431D67C49C100D4C</literal></expr>,
	<expr><literal type="number">0x4CC5D4BECB3E42B6</literal></expr>, <expr><literal type="number">0x597F299CFC657E2A</literal></expr>,
	<expr><literal type="number">0x5FCB6FAB3AD6FAEC</literal></expr>, <expr><literal type="number">0x6C44198C4A475817</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>sha2big_round</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHA2BIG_STEP</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>, <parameter><type><name>C</name></type></parameter>, <parameter><type><name>D</name></type></parameter>, <parameter><type><name>E</name></type></parameter>, <parameter><type><name>F</name></type></parameter>, <parameter><type><name>G</name></type></parameter>, <parameter><type><name>H</name></type></parameter>, <parameter><type><name>j</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>do { \
		uint64_t T1, T2; \
		T1 = H + BSG5_1(E) + CH(E, F, G) + K[j] + w[j]; \
		T2 = BSG5_0(A) + MAJ(A, B, C); \
		D += T1; \
		H = T1 + T2; \
	} while (0)</cpp:value></cpp:define>

	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>e</name></decl>, <decl><type ref="prev"/><name>f</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>w</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>br_range_dec64be</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">16</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">80</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>w</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>SSG5_1</name><argument_list>(<argument><expr><name><name>w</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>w</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">7</literal></expr>]</index></name>
			<operator>+</operator> <call><name>SSG5_0</name><argument_list>(<argument><expr><name><name>w</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">15</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>w</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">16</literal></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>val</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>val</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>val</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>val</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>f</name> <operator>=</operator> <name><name>val</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>val</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>val</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">80</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>SHA2BIG_STEP</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SHA2BIG_STEP</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SHA2BIG_STEP</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SHA2BIG_STEP</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SHA2BIG_STEP</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SHA2BIG_STEP</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SHA2BIG_STEP</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SHA2BIG_STEP</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name><name>val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name>a</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>val</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name>b</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>val</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>val</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <name>d</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>val</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+=</operator> <name>e</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>val</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+=</operator> <name>f</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>val</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+=</operator> <name>g</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>val</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+=</operator> <name>h</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>sha2big_update</name><parameter_list>(<parameter><decl><type><name>br_sha384_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>ptr</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>cc</name><operator>-&gt;</operator><name>count</name></name> <operator>&amp;</operator> <literal type="number">127</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>count</name></name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>len</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>size_t</name></type> <name>clen</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>clen</name> <operator>=</operator> <literal type="number">128</literal> <operator>-</operator> <name>ptr</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>clen</name> <operator>&gt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>clen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>ptr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>clen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>clen</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>clen</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>clen</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <literal type="number">128</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>sha2big_round</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>sha2big_out</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_sha384_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>val</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>ptr</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>cc</name><operator>-&gt;</operator><name>count</name></name> <operator>&amp;</operator> <literal type="number">127</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>val</name></name></expr></argument>, <argument><expr><sizeof>sizeof <name>val</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>buf</name><index>[<expr><name>ptr</name> <operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>&gt;</operator> <literal type="number">112</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">128</literal> <operator>-</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sha2big_round</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">112</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">112</literal> <operator>-</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><call><name>br_enc64be</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">112</literal></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>count</name></name> <operator>&gt;&gt;</operator> <literal type="number">61</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_enc64be</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">120</literal></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>count</name></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sha2big_round</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_range_enc64be</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* see bearssl.h */</comment>
<function><type><name>void</name></type>
<name>br_sha384_init</name><parameter_list>(<parameter><decl><type><name>br_sha384_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>vtable</name></name> <operator>=</operator> <operator>&amp;</operator><name>br_sha384_vtable</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>val</name></name></expr></argument>, <argument><expr><name>IV384</name></expr></argument>, <argument><expr><sizeof>sizeof <name>IV384</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* see bearssl.h */</comment>
<function><type><name>void</name></type>
<name>br_sha384_update</name><parameter_list>(<parameter><decl><type><name>br_sha384_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>sha2big_update</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* see bearssl.h */</comment>
<function><type><name>void</name></type>
<name>br_sha384_out</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_sha384_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>sha2big_out</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* see bearssl.h */</comment>
<function><type><name>uint64_t</name></type>
<name>br_sha384_state</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_sha384_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>br_range_enc64be</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>val</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>cc</name><operator>-&gt;</operator><name>count</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* see bearssl.h */</comment>
<function><type><name>void</name></type>
<name>br_sha384_set_state</name><parameter_list>(<parameter><decl><type><name>br_sha384_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>stb</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>br_range_dec64be</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>val</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>stb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* see bearssl.h */</comment>
<function><type><name>void</name></type>
<name>br_sha512_init</name><parameter_list>(<parameter><decl><type><name>br_sha512_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>vtable</name></name> <operator>=</operator> <operator>&amp;</operator><name>br_sha512_vtable</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>val</name></name></expr></argument>, <argument><expr><name>IV512</name></expr></argument>, <argument><expr><sizeof>sizeof <name>IV512</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* see bearssl.h */</comment>
<function><type><name>void</name></type>
<name>br_sha512_out</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_sha512_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>sha2big_out</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* see bearssl.h */</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_hash_class</name></type> <name>br_sha384_vtable</name> <init>= <expr><block>{
	<expr><sizeof>sizeof<argument_list>(<argument><expr><name>br_sha384_context</name></expr></argument>)</argument_list></sizeof></expr>,
	<expr><call><name>BR_HASHDESC_ID</name><argument_list>(<argument><expr><name>br_sha384_ID</name></expr></argument>)</argument_list></call>
		<operator>|</operator> <call><name>BR_HASHDESC_OUT</name><argument_list>(<argument><expr><literal type="number">48</literal></expr></argument>)</argument_list></call>
		<operator>|</operator> <call><name>BR_HASHDESC_STATE</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call>
		<operator>|</operator> <call><name>BR_HASHDESC_LBLEN</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call>
		<operator>|</operator> <name>BR_HASHDESC_MD_PADDING</name>
		<operator>|</operator> <name>BR_HASHDESC_MD_PADDING_BE</name>
		<operator>|</operator> <name>BR_HASHDESC_MD_PADDING_128</name></expr>,
	<expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>br_hash_class</name> <operator>*</operator><operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><operator>&amp;</operator><name>br_sha384_init</name></expr>,
	<expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>br_hash_class</name> <operator>*</operator><operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>size_t</name></expr></argument>)</argument_list></call><operator>)</operator>
		<operator>&amp;</operator><name>br_sha384_update</name></expr>,
	<expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>br_hash_class</name> <operator>*</operator><specifier>const</specifier> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><operator>&amp;</operator><name>br_sha384_out</name></expr>,
	<expr><operator>(</operator><call><call><name>uint64_t</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>br_hash_class</name> <operator>*</operator><specifier>const</specifier> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><operator>&amp;</operator><name>br_sha384_state</name></expr>,
	<expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>br_hash_class</name> <operator>*</operator><operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>)</argument_list></call><operator>)</operator>
		<operator>&amp;</operator><name>br_sha384_set_state</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* see bearssl.h */</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_hash_class</name></type> <name>br_sha512_vtable</name> <init>= <expr><block>{
	<expr><sizeof>sizeof<argument_list>(<argument><expr><name>br_sha512_context</name></expr></argument>)</argument_list></sizeof></expr>,
	<expr><call><name>BR_HASHDESC_ID</name><argument_list>(<argument><expr><name>br_sha512_ID</name></expr></argument>)</argument_list></call>
		<operator>|</operator> <call><name>BR_HASHDESC_OUT</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call>
		<operator>|</operator> <call><name>BR_HASHDESC_STATE</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call>
		<operator>|</operator> <call><name>BR_HASHDESC_LBLEN</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call>
		<operator>|</operator> <name>BR_HASHDESC_MD_PADDING</name>
		<operator>|</operator> <name>BR_HASHDESC_MD_PADDING_BE</name>
		<operator>|</operator> <name>BR_HASHDESC_MD_PADDING_128</name></expr>,
	<expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>br_hash_class</name> <operator>*</operator><operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><operator>&amp;</operator><name>br_sha512_init</name></expr>,
	<expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>br_hash_class</name> <operator>*</operator><operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>size_t</name></expr></argument>)</argument_list></call><operator>)</operator>
		<operator>&amp;</operator><name>br_sha512_update</name></expr>,
	<expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>br_hash_class</name> <operator>*</operator><specifier>const</specifier> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><operator>&amp;</operator><name>br_sha512_out</name></expr>,
	<expr><operator>(</operator><call><call><name>uint64_t</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>br_hash_class</name> <operator>*</operator><specifier>const</specifier> <operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><operator>&amp;</operator><name>br_sha512_state</name></expr>,
	<expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>br_hash_class</name> <operator>*</operator><operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>)</argument_list></call><operator>)</operator>
		<operator>&amp;</operator><name>br_sha512_set_state</name></expr>
}</block></expr></init></decl>;</decl_stmt>
</unit>
