<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/extra/iwnet/src/bearssl/hash/ghash_ctmul64.c"><comment type="block">/*
 * Copyright (c) 2016 Thomas Pornin &lt;pornin@bolet.org&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining 
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>

<comment type="block">/*
 * This is the 64-bit variant of br_ghash_ctmul32(), with 64-bit operands
 * and bit reversal of 64-bit words.
 */</comment>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type>
<name>bmul64</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>x0</name></decl>, <decl><type ref="prev"/><name>x1</name></decl>, <decl><type ref="prev"/><name>x2</name></decl>, <decl><type ref="prev"/><name>x3</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>y0</name></decl>, <decl><type ref="prev"/><name>y1</name></decl>, <decl><type ref="prev"/><name>y2</name></decl>, <decl><type ref="prev"/><name>y3</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>z0</name></decl>, <decl><type ref="prev"/><name>z1</name></decl>, <decl><type ref="prev"/><name>z2</name></decl>, <decl><type ref="prev"/><name>z3</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>x0</name> <operator>=</operator> <name>x</name> <operator>&amp;</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0x1111111111111111</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>x1</name> <operator>=</operator> <name>x</name> <operator>&amp;</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0x2222222222222222</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>x2</name> <operator>=</operator> <name>x</name> <operator>&amp;</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0x4444444444444444</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>x3</name> <operator>=</operator> <name>x</name> <operator>&amp;</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0x8888888888888888</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>y0</name> <operator>=</operator> <name>y</name> <operator>&amp;</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0x1111111111111111</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>y1</name> <operator>=</operator> <name>y</name> <operator>&amp;</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0x2222222222222222</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>y2</name> <operator>=</operator> <name>y</name> <operator>&amp;</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0x4444444444444444</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>y3</name> <operator>=</operator> <name>y</name> <operator>&amp;</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0x8888888888888888</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>z0</name> <operator>=</operator> <operator>(</operator><name>x0</name> <operator>*</operator> <name>y0</name><operator>)</operator> <operator>^</operator> <operator>(</operator><name>x1</name> <operator>*</operator> <name>y3</name><operator>)</operator> <operator>^</operator> <operator>(</operator><name>x2</name> <operator>*</operator> <name>y2</name><operator>)</operator> <operator>^</operator> <operator>(</operator><name>x3</name> <operator>*</operator> <name>y1</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>z1</name> <operator>=</operator> <operator>(</operator><name>x0</name> <operator>*</operator> <name>y1</name><operator>)</operator> <operator>^</operator> <operator>(</operator><name>x1</name> <operator>*</operator> <name>y0</name><operator>)</operator> <operator>^</operator> <operator>(</operator><name>x2</name> <operator>*</operator> <name>y3</name><operator>)</operator> <operator>^</operator> <operator>(</operator><name>x3</name> <operator>*</operator> <name>y2</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>z2</name> <operator>=</operator> <operator>(</operator><name>x0</name> <operator>*</operator> <name>y2</name><operator>)</operator> <operator>^</operator> <operator>(</operator><name>x1</name> <operator>*</operator> <name>y1</name><operator>)</operator> <operator>^</operator> <operator>(</operator><name>x2</name> <operator>*</operator> <name>y0</name><operator>)</operator> <operator>^</operator> <operator>(</operator><name>x3</name> <operator>*</operator> <name>y3</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>z3</name> <operator>=</operator> <operator>(</operator><name>x0</name> <operator>*</operator> <name>y3</name><operator>)</operator> <operator>^</operator> <operator>(</operator><name>x1</name> <operator>*</operator> <name>y2</name><operator>)</operator> <operator>^</operator> <operator>(</operator><name>x2</name> <operator>*</operator> <name>y1</name><operator>)</operator> <operator>^</operator> <operator>(</operator><name>x3</name> <operator>*</operator> <name>y0</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>z0</name> <operator>&amp;=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0x1111111111111111</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>z1</name> <operator>&amp;=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0x2222222222222222</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>z2</name> <operator>&amp;=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0x4444444444444444</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>z3</name> <operator>&amp;=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0x8888888888888888</literal></expr>;</expr_stmt>
	<return>return <expr><name>z0</name> <operator>|</operator> <name>z1</name> <operator>|</operator> <name>z2</name> <operator>|</operator> <name>z3</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type>
<name>rev64</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RMS</name><parameter_list>(<parameter><type><name>m</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>do { \
		x = ((x &amp; (uint64_t)(m)) &lt;&lt; (s)) \
			| ((x &gt;&gt; (s)) &amp; (uint64_t)(m)); \
	} while (0)</cpp:value></cpp:define>

	<expr_stmt><expr><call><name>RMS</name><argument_list>(<argument><expr><literal type="number">0x5555555555555555</literal></expr></argument>,  <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RMS</name><argument_list>(<argument><expr><literal type="number">0x3333333333333333</literal></expr></argument>,  <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RMS</name><argument_list>(<argument><expr><literal type="number">0x0F0F0F0F0F0F0F0F</literal></expr></argument>,  <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RMS</name><argument_list>(<argument><expr><literal type="number">0x00FF00FF00FF00FF</literal></expr></argument>,  <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RMS</name><argument_list>(<argument><expr><literal type="number">0x0000FFFF0000FFFF</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</return>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RMS</name></cpp:undef>
</block_content>}</block></function>

<comment type="block">/* see bearssl_ghash.h */</comment>
<function><type><name>void</name></type>
<name>br_ghash_ctmul64</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>hb</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>yb</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>y0</name></decl>, <decl><type ref="prev"/><name>y1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>h0</name></decl>, <decl><type ref="prev"/><name>h1</name></decl>, <decl><type ref="prev"/><name>h2</name></decl>, <decl><type ref="prev"/><name>h0r</name></decl>, <decl><type ref="prev"/><name>h1r</name></decl>, <decl><type ref="prev"/><name>h2r</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>yb</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>hb</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>y1</name> <operator>=</operator> <call><name>br_dec64be</name><argument_list>(<argument><expr><name>yb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>y0</name> <operator>=</operator> <call><name>br_dec64be</name><argument_list>(<argument><expr><name>yb</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>h1</name> <operator>=</operator> <call><name>br_dec64be</name><argument_list>(<argument><expr><name>hb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>h0</name> <operator>=</operator> <call><name>br_dec64be</name><argument_list>(<argument><expr><name>hb</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>h0r</name> <operator>=</operator> <call><name>rev64</name><argument_list>(<argument><expr><name>h0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>h1r</name> <operator>=</operator> <call><name>rev64</name><argument_list>(<argument><expr><name>h1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>h2</name> <operator>=</operator> <name>h0</name> <operator>^</operator> <name>h1</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>h2r</name> <operator>=</operator> <name>h0r</name> <operator>^</operator> <name>h1r</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint64_t</name></type> <name>y0r</name></decl>, <decl><type ref="prev"/><name>y1r</name></decl>, <decl><type ref="prev"/><name>y2</name></decl>, <decl><type ref="prev"/><name>y2r</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint64_t</name></type> <name>z0</name></decl>, <decl><type ref="prev"/><name>z1</name></decl>, <decl><type ref="prev"/><name>z2</name></decl>, <decl><type ref="prev"/><name>z0h</name></decl>, <decl><type ref="prev"/><name>z1h</name></decl>, <decl><type ref="prev"/><name>z2h</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint64_t</name></type> <name>v0</name></decl>, <decl><type ref="prev"/><name>v1</name></decl>, <decl><type ref="prev"/><name>v2</name></decl>, <decl><type ref="prev"/><name>v3</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>src</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tmp</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><sizeof>sizeof <name>tmp</name></sizeof><operator>)</operator> <operator>-</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>src</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name>y1</name> <operator>^=</operator> <call><name>br_dec64be</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>y0</name> <operator>^=</operator> <call><name>br_dec64be</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>y0r</name> <operator>=</operator> <call><name>rev64</name><argument_list>(<argument><expr><name>y0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>y1r</name> <operator>=</operator> <call><name>rev64</name><argument_list>(<argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>y2</name> <operator>=</operator> <name>y0</name> <operator>^</operator> <name>y1</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>y2r</name> <operator>=</operator> <name>y0r</name> <operator>^</operator> <name>y1r</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>z0</name> <operator>=</operator> <call><name>bmul64</name><argument_list>(<argument><expr><name>y0</name></expr></argument>, <argument><expr><name>h0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>z1</name> <operator>=</operator> <call><name>bmul64</name><argument_list>(<argument><expr><name>y1</name></expr></argument>, <argument><expr><name>h1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>z2</name> <operator>=</operator> <call><name>bmul64</name><argument_list>(<argument><expr><name>y2</name></expr></argument>, <argument><expr><name>h2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>z0h</name> <operator>=</operator> <call><name>bmul64</name><argument_list>(<argument><expr><name>y0r</name></expr></argument>, <argument><expr><name>h0r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>z1h</name> <operator>=</operator> <call><name>bmul64</name><argument_list>(<argument><expr><name>y1r</name></expr></argument>, <argument><expr><name>h1r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>z2h</name> <operator>=</operator> <call><name>bmul64</name><argument_list>(<argument><expr><name>y2r</name></expr></argument>, <argument><expr><name>h2r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>z2</name> <operator>^=</operator> <name>z0</name> <operator>^</operator> <name>z1</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>z2h</name> <operator>^=</operator> <name>z0h</name> <operator>^</operator> <name>z1h</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>z0h</name> <operator>=</operator> <call><name>rev64</name><argument_list>(<argument><expr><name>z0h</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>z1h</name> <operator>=</operator> <call><name>rev64</name><argument_list>(<argument><expr><name>z1h</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>z2h</name> <operator>=</operator> <call><name>rev64</name><argument_list>(<argument><expr><name>z2h</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

		<expr_stmt><expr><name>v0</name> <operator>=</operator> <name>z0</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>v1</name> <operator>=</operator> <name>z0h</name> <operator>^</operator> <name>z2</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>v2</name> <operator>=</operator> <name>z1</name> <operator>^</operator> <name>z2h</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>v3</name> <operator>=</operator> <name>z1h</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>v3</name> <operator>=</operator> <operator>(</operator><name>v3</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>v2</name> <operator>&gt;&gt;</operator> <literal type="number">63</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>v2</name> <operator>=</operator> <operator>(</operator><name>v2</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>v1</name> <operator>&gt;&gt;</operator> <literal type="number">63</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>v1</name> <operator>=</operator> <operator>(</operator><name>v1</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>v0</name> <operator>&gt;&gt;</operator> <literal type="number">63</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>v0</name> <operator>=</operator> <operator>(</operator><name>v0</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

		<expr_stmt><expr><name>v2</name> <operator>^=</operator> <name>v0</name> <operator>^</operator> <operator>(</operator><name>v0</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>v0</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>v0</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>v1</name> <operator>^=</operator> <operator>(</operator><name>v0</name> <operator>&lt;&lt;</operator> <literal type="number">63</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>v0</name> <operator>&lt;&lt;</operator> <literal type="number">62</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>v0</name> <operator>&lt;&lt;</operator> <literal type="number">57</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>v3</name> <operator>^=</operator> <name>v1</name> <operator>^</operator> <operator>(</operator><name>v1</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>v1</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>v1</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>v2</name> <operator>^=</operator> <operator>(</operator><name>v1</name> <operator>&lt;&lt;</operator> <literal type="number">63</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>v1</name> <operator>&lt;&lt;</operator> <literal type="number">62</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>v1</name> <operator>&lt;&lt;</operator> <literal type="number">57</literal><operator>)</operator></expr>;</expr_stmt>

		<expr_stmt><expr><name>y0</name> <operator>=</operator> <name>v2</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>y1</name> <operator>=</operator> <name>v3</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>br_enc64be</name><argument_list>(<argument><expr><name>yb</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_enc64be</name><argument_list>(<argument><expr><name>yb</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>y0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
