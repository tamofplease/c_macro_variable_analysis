<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/extra/iwnet/src/bearssl/aead/eax.c"><comment type="block">/*
 * Copyright (c) 2017 Thomas Pornin &lt;pornin@bolet.org&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining 
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Implementation Notes
 * ====================
 *
 * The combined CTR + CBC-MAC functions can only handle full blocks,
 * so some buffering is necessary. Moreover, EAX has a special padding
 * rule for CBC-MAC, which implies that we cannot compute the MAC over
 * the last received full block until we know whether we are at the
 * end of the data or not.
 *
 *  - 'ptr' contains a value from 1 to 16, which is the number of bytes
 *    accumulated in buf[] that still needs to be processed with the
 *    current OMAC computation. Beware that this can go to 16: a
 *    complete block cannot be processed until it is known whether it
 *    is the last block or not. However, it can never be 0, because
 *    OMAC^t works on an input that is at least one-block long.
 *
 *  - When processing the message itself, CTR encryption/decryption is
 *    also done at the same time. The first 'ptr' bytes of buf[] then
 *    contains the encrypted bytes, while the last '16 - ptr' bytes of
 *    buf[] are the remnants of the stream block, to be used against
 *    the next input bytes, when available.
 *
 *  - The current counter and running CBC-MAC values are kept in 'ctr'
 *    and 'cbcmac', respectively.
 *
 *  - The derived keys for padding are kept in L2 and L4 (double and
 *    quadruple of Enc_K(0^n), in GF(2^128), respectively).
 */</comment>

<comment type="block">/*
 * Start an OMAC computation; the first block is the big-endian
 * representation of the provided value ('val' must fit on one byte).
 * We make it a delayed block because it may also be the last one,
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>omac_start</name><parameter_list>(<parameter><decl><type><name>br_eax_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbcmac</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name><name>ctx</name><operator>-&gt;</operator><name>cbcmac</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Double a value in finite field GF(2^128), defined with modulus
 * X^128+X^7+X^2+X+1.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>double_gf128</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>cc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>cc</name> <operator>=</operator> <literal type="number">0x87</literal> <operator>&amp;</operator> <operator>-</operator><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">15</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name> <operator>--</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>unsigned</name></type> <name>z</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <name>cc</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>cc</name> <operator>=</operator> <name>z</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>z</name></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
 * Apply padding to the last block, currently in ctx-&gt;buf (with
 * ctx-&gt;ptr bytes), and finalize OMAC computation.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>do_pad</name><parameter_list>(<parameter><decl><type><name>br_eax_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pad</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>ptr</name></decl>, <decl><type ref="prev"/><name>u</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>pad</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>L2</name></name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>ptr</name> <operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>ptr</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>-</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pad</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>L4</name></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <sizeof>sizeof <name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></sizeof></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>u</name></expr>]</index></name> <operator>^=</operator> <name><name>pad</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>bctx</name></name><operator>)</operator><operator>-&gt;</operator><name>mac</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>bctx</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbcmac</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><sizeof>sizeof <name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Apply CBC-MAC on the provided data, with buffering management.
 *
 * Upon entry, two situations are acceptable:
 *
 *   ctx-&gt;ptr == 0: there is no data to process in ctx-&gt;buf
 *   ctx-&gt;ptr == 16: there is a full block of unprocessed data in ctx-&gt;buf
 *
 * Upon exit, ctx-&gt;ptr may be zero only if it was already zero on entry,
 * and len == 0. In all other situations, ctx-&gt;ptr will be non-zero on
 * exit (and may have value 16).
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>do_cbcmac_chunk</name><parameter_list>(<parameter><decl><type><name>br_eax_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>ptr</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>len</name> <operator>&amp;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">15</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>ptr</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>ptr</name></name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>bctx</name></name><operator>)</operator><operator>-&gt;</operator><name>mac</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>bctx</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbcmac</name></name></expr></argument>,
			<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><sizeof>sizeof <name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>bctx</name></name><operator>)</operator><operator>-&gt;</operator><name>mac</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>bctx</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbcmac</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>data</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* see bearssl_aead.h */</comment>
<function><type><name>void</name></type>
<name>br_eax_init</name><parameter_list>(<parameter><decl><type><name>br_eax_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>br_block_ctrcbc_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>bctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>iv</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>vtable</name></name> <operator>=</operator> <operator>&amp;</operator><name>br_eax_vtable</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>bctx</name></name> <operator>=</operator> <name>bctx</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Encrypt a whole-zero block to compute L2 and L4.
	 */</comment>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>tmp</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>iv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>iv</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>bctx</name><operator>)</operator><operator>-&gt;</operator><name>ctr</name></name><argument_list>(<argument><expr><name>bctx</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof <name>tmp</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>double_gf128</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>L2</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>double_gf128</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>L4</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>L2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* see bearssl_aead.h */</comment>
<function><type><name>void</name></type>
<name>br_eax_capture</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_eax_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>br_eax_state</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * We capture the three OMAC* states _after_ processing the
	 * initial block (assuming that nonce, message and AAD are
	 * all non-empty).
	 */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>st</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name><name>st</name><operator>-&gt;</operator><name>st</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>tmp</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tmp</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>bctx</name></name><operator>)</operator><operator>-&gt;</operator><name>mac</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>bctx</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>st</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof <name>tmp</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/* see bearssl_aead.h */</comment>
<function><type><name>void</name></type>
<name>br_eax_reset</name><parameter_list>(<parameter><decl><type><name>br_eax_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>nonce</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * Process nonce with OMAC^0.
	 */</comment>
	<expr_stmt><expr><call><name>omac_start</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>do_cbcmac_chunk</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>nonce</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>do_pad</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nonce</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbcmac</name></name></expr></argument>, <argument><expr><sizeof>sizeof <name><name>ctx</name><operator>-&gt;</operator><name>cbcmac</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Start OMAC^1 for the AAD ("header" in the EAX specification).
	 */</comment>
	<expr_stmt><expr><call><name>omac_start</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * We use ctx-&gt;head[0] as temporary flag to mark that we are
	 * using a "normal" reset().
	 */</comment>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>head</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* see bearssl_aead.h */</comment>
<function><type><name>void</name></type>
<name>br_eax_reset_pre_aad</name><parameter_list>(<parameter><decl><type><name>br_eax_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>br_eax_state</name> <modifier>*</modifier></type><name>st</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>nonce</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>omac_start</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbcmac</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>st</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof <name><name>ctx</name><operator>-&gt;</operator><name>cbcmac</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>do_cbcmac_chunk</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>nonce</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><call><name>do_pad</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nonce</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbcmac</name></name></expr></argument>, <argument><expr><sizeof>sizeof <name><name>ctx</name><operator>-&gt;</operator><name>cbcmac</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbcmac</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>st</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof <name><name>ctx</name><operator>-&gt;</operator><name>cbcmac</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctr</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>st</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof <name><name>ctx</name><operator>-&gt;</operator><name>ctr</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * We use ctx-&gt;head[0] as a flag to indicate that we use a
	 * a recorded state, with ctx-&gt;ctr containing the preprocessed
	 * first block for OMAC^2.
	 */</comment>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>head</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* see bearssl_aead.h */</comment>
<function><type><name>void</name></type>
<name>br_eax_reset_post_aad</name><parameter_list>(<parameter><decl><type><name>br_eax_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>br_eax_state</name> <modifier>*</modifier></type><name>st</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>nonce</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>omac_start</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbcmac</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>st</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof <name><name>ctx</name><operator>-&gt;</operator><name>cbcmac</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>do_cbcmac_chunk</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>nonce</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><call><name>do_pad</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nonce</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbcmac</name></name></expr></argument>, <argument><expr><sizeof>sizeof <name><name>ctx</name><operator>-&gt;</operator><name>cbcmac</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctr</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nonce</name></name></expr></argument>, <argument><expr><sizeof>sizeof <name><name>ctx</name><operator>-&gt;</operator><name>nonce</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>head</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>st</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof <name><name>ctx</name><operator>-&gt;</operator><name>head</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbcmac</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>st</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof <name><name>ctx</name><operator>-&gt;</operator><name>cbcmac</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* see bearssl_aead.h */</comment>
<function><type><name>void</name></type>
<name>br_eax_aad_inject</name><parameter_list>(<parameter><decl><type><name>br_eax_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>ptr</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>

	<comment type="block">/*
	 * If there is a partial block, first complete it.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>size_t</name></type> <name>clen</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>clen</name> <operator>=</operator> <literal type="number">16</literal> <operator>-</operator> <name>ptr</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <name>clen</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>ptr</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>ptr</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>clen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>data</name> <operator>+</operator> <name>clen</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>clen</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * We now have a full block in buf[], and this is not the last
	 * block.
	 */</comment>
	<expr_stmt><expr><call><name>do_cbcmac_chunk</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* see bearssl_aead.h */</comment>
<function><type><name>void</name></type>
<name>br_eax_flip</name><parameter_list>(<parameter><decl><type><name>br_eax_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>from_capture</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * ctx-&gt;head[0] may be non-zero if the context was reset with
	 * a pre-AAD captured state. In that case, ctx-&gt;ctr[] contains
	 * the state for OMAC^2 _after_ processing the first block.
	 */</comment>
	<expr_stmt><expr><name>from_capture</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>head</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Complete the OMAC computation on the AAD.
	 */</comment>
	<expr_stmt><expr><call><name>do_pad</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>head</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbcmac</name></name></expr></argument>, <argument><expr><sizeof>sizeof <name><name>ctx</name><operator>-&gt;</operator><name>cbcmac</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Start OMAC^2 for the encrypted data.
	 * If the context was initialized from a captured state, then
	 * the OMAC^2 value is in the ctr[] array.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>from_capture</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbcmac</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctr</name></name></expr></argument>, <argument><expr><sizeof>sizeof <name><name>ctx</name><operator>-&gt;</operator><name>cbcmac</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>omac_start</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/*
	 * Initial counter value for CTR is the processed nonce.
	 */</comment>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctr</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nonce</name></name></expr></argument>, <argument><expr><sizeof>sizeof <name><name>ctx</name><operator>-&gt;</operator><name>nonce</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* see bearssl_aead.h */</comment>
<function><type><name>void</name></type>
<name>br_eax_run</name><parameter_list>(<parameter><decl><type><name>br_eax_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>encrypt</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dbuf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>ptr</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Ensure that there is actual data to process.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>dbuf</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>

	<comment type="block">/*
	 * We may have ptr == 0 here if we initialized from a captured
	 * state. In that case, there is no partially consumed block
	 * or unprocessed data.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ptr</name> <operator>!=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/*
		 * We have a partially consumed block.
		 */</comment>
		<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>clen</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>clen</name> <operator>=</operator> <literal type="number">16</literal> <operator>-</operator> <name>ptr</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <name>clen</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>clen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>encrypt</name></expr>)</condition> <block>{<block_content>
			<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>clen</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>ptr</name> <operator>+</operator> <name>u</name></expr>]</index></name> <operator>^=</operator> <name><name>dbuf</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
			</block_content>}</block></for>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dbuf</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>ptr</name></expr></argument>, <argument><expr><name>clen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>clen</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<decl_stmt><decl><type><name>unsigned</name></type> <name>dx</name></decl>, <decl><type ref="prev"/><name>sx</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>sx</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>ptr</name> <operator>+</operator> <name>u</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>dx</name> <operator>=</operator> <name><name>dbuf</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>ptr</name> <operator>+</operator> <name>u</name></expr>]</index></name> <operator>=</operator> <name>dx</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>dbuf</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name>sx</name> <operator>^</operator> <name>dx</name></expr>;</expr_stmt>
			</block_content>}</block></for>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <name>clen</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <name>clen</name></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>dbuf</name> <operator>+=</operator> <name>clen</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>clen</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * We now have a complete encrypted block in buf[] that must still
	 * be processed with OMAC, and this is not the final buf.
	 * Exception: when ptr == 0, no block has been produced yet.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>bctx</name></name><operator>)</operator><operator>-&gt;</operator><name>mac</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>bctx</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbcmac</name></name></expr></argument>,
			<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><sizeof>sizeof <name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Do CTR encryption or decryption and CBC-MAC for all full blocks
	 * except the last.
	 */</comment>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>len</name> <operator>&amp;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">15</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>ptr</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>encrypt</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>bctx</name></name><operator>)</operator><operator>-&gt;</operator><name>encrypt</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>bctx</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctr</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbcmac</name></name></expr></argument>,
			<argument><expr><name>dbuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>bctx</name></name><operator>)</operator><operator>-&gt;</operator><name>decrypt</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>bctx</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctr</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbcmac</name></name></expr></argument>,
			<argument><expr><name>dbuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name>dbuf</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Compute next block of CTR stream, and use it to finish
	 * encrypting or decrypting the data.
	 */</comment>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>bctx</name></name><operator>)</operator><operator>-&gt;</operator><name>ctr</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>bctx</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctr</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><sizeof>sizeof <name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>encrypt</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>ptr</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>u</name></expr>]</index></name> <operator>^=</operator> <name><name>dbuf</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dbuf</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>ptr</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>unsigned</name></type> <name>dx</name></decl>, <decl><type ref="prev"/><name>sx</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>sx</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>dx</name> <operator>=</operator> <name><name>dbuf</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name>dx</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>dbuf</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name>sx</name> <operator>^</operator> <name>dx</name></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Complete tag computation. The final tag is written in ctx-&gt;cbcmac.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>do_final</name><parameter_list>(<parameter><decl><type><name>br_eax_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>do_pad</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Authentication tag is the XOR of the three OMAC outputs for
	 * the nonce, AAD and encrypted data.
	 */</comment>
	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbcmac</name><index>[<expr><name>u</name></expr>]</index></name> <operator>^=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>nonce</name><index>[<expr><name>u</name></expr>]</index></name> <operator>^</operator> <name><name>ctx</name><operator>-&gt;</operator><name>head</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/* see bearssl_aead.h */</comment>
<function><type><name>void</name></type>
<name>br_eax_get_tag</name><parameter_list>(<parameter><decl><type><name>br_eax_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>do_final</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbcmac</name></name></expr></argument>, <argument><expr><sizeof>sizeof <name><name>ctx</name><operator>-&gt;</operator><name>cbcmac</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* see bearssl_aead.h */</comment>
<function><type><name>void</name></type>
<name>br_eax_get_tag_trunc</name><parameter_list>(<parameter><decl><type><name>br_eax_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>do_final</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbcmac</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* see bearssl_aead.h */</comment>
<function><type><name>uint32_t</name></type>
<name>br_eax_check_tag_trunc</name><parameter_list>(<parameter><decl><type><name>br_eax_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>br_eax_get_tag</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>x</name> <operator>|=</operator> <name><name>tmp</name><index>[<expr><name>u</name></expr>]</index></name> <operator>^</operator> <operator>(</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>tag</name><operator>)</operator><index>[<expr><name>u</name></expr>]</index></expr>;</expr_stmt>
	</block_content>}</block></for>
	<return>return <expr><call><name>EQ0</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* see bearssl_aead.h */</comment>
<function><type><name>uint32_t</name></type>
<name>br_eax_check_tag</name><parameter_list>(<parameter><decl><type><name>br_eax_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>br_eax_check_tag_trunc</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* see bearssl_aead.h */</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_aead_class</name></type> <name>br_eax_vtable</name> <init>= <expr><block>{
	<expr><literal type="number">16</literal></expr>,
	<expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>br_aead_class</name> <operator>*</operator><operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>size_t</name></expr></argument>)</argument_list></call><operator>)</operator>
		<operator>&amp;</operator><name>br_eax_reset</name></expr>,
	<expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>br_aead_class</name> <operator>*</operator><operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>size_t</name></expr></argument>)</argument_list></call><operator>)</operator>
		<operator>&amp;</operator><name>br_eax_aad_inject</name></expr>,
	<expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>br_aead_class</name> <operator>*</operator><operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator>
		<operator>&amp;</operator><name>br_eax_flip</name></expr>,
	<expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>br_aead_class</name> <operator>*</operator><operator>*</operator></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>size_t</name></expr></argument>)</argument_list></call><operator>)</operator>
		<operator>&amp;</operator><name>br_eax_run</name></expr>,
	<expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>br_aead_class</name> <operator>*</operator><operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator>
		<operator>&amp;</operator><name>br_eax_get_tag</name></expr>,
	<expr><operator>(</operator><call><call><name>uint32_t</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>br_aead_class</name> <operator>*</operator><operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator>
		<operator>&amp;</operator><name>br_eax_check_tag</name></expr>,
	<expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>br_aead_class</name> <operator>*</operator><operator>*</operator></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>size_t</name></expr></argument>)</argument_list></call><operator>)</operator>
		<operator>&amp;</operator><name>br_eax_get_tag_trunc</name></expr>,
	<expr><operator>(</operator><call><call><name>uint32_t</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>br_aead_class</name> <operator>*</operator><operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>size_t</name></expr></argument>)</argument_list></call><operator>)</operator>
		<operator>&amp;</operator><name>br_eax_check_tag_trunc</name></expr>
}</block></expr></init></decl>;</decl_stmt>
</unit>
