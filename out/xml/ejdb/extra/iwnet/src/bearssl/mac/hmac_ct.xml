<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/extra/iwnet/src/bearssl/mac/hmac_ct.c"><comment type="block">/*
 * Copyright (c) 2016 Thomas Pornin &lt;pornin@bolet.org&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining 
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type>
<name>hash_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type><name>dig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name><name>dig</name><operator>-&gt;</operator><name>desc</name></name> <operator>&gt;&gt;</operator> <name>BR_HASHDESC_OUT_OFF</name><operator>)</operator>
		<operator>&amp;</operator> <name>BR_HASHDESC_OUT_MASK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type>
<name>block_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type><name>dig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>ls</name></decl>;</decl_stmt>
	
	<expr_stmt><expr><name>ls</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name><name>dig</name><operator>-&gt;</operator><name>desc</name></name> <operator>&gt;&gt;</operator> <name>BR_HASHDESC_LBLEN_OFF</name><operator>)</operator>
		<operator>&amp;</operator> <name>BR_HASHDESC_LBLEN_MASK</name></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>ls</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* see bearssl.h */</comment>
<function><type><name>size_t</name></type>
<name>br_hmac_outCT</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_hmac_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>min_len</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>max_len</name></decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * Method implemented here is inspired from the descriptions on:
	 *    https://www.imperialviolet.org/2013/02/04/luckythirteen.html
	 *
	 * Principle: we input bytes one by one. We use a MUX to push
	 * padding bytes instead of data bytes when appropriate. At each
	 * block limit, we get the current hash function state: this is
	 * a potential output, since we handle MD padding ourselves.
	 *
	 * be     1 for big-endian, 0 for little-endian
	 * po     minimal MD padding length
	 * bs     block size (always a power of 2)
	 * hlen   hash output size
	 */</comment>

	<decl_stmt><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type><name>dig</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>br_hash_compat_context</name></type> <name>hc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>be</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>po</name></decl>, <decl><type ref="prev"/><name>bs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>kr</name></decl>, <decl><type ref="prev"/><name>km</name></decl>, <decl><type ref="prev"/><name>kl</name></decl>, <decl><type ref="prev"/><name>kz</name></decl>, <decl><type ref="prev"/><name>u</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>count</name></decl>, <decl><type ref="prev"/><name>ncount</name></decl>, <decl><type ref="prev"/><name>bit_len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp1</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>tmp2</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>hlen</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Copy the current hash context.
	 */</comment>
	<expr_stmt><expr><name>hc</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>dig</name></name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Get function-specific information.
	 */</comment>
	<expr_stmt><expr><name>dig</name> <operator>=</operator> <name><name>hc</name><operator>.</operator><name>vtable</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>be</name> <operator>=</operator> <operator>(</operator><name><name>dig</name><operator>-&gt;</operator><name>desc</name></name> <operator>&amp;</operator> <name>BR_HASHDESC_MD_PADDING_BE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>po</name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>dig</name><operator>-&gt;</operator><name>desc</name></name> <operator>&amp;</operator> <name>BR_HASHDESC_MD_PADDING_128</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>po</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>bs</name> <operator>=</operator> <call><name>block_size</name><argument_list>(<argument><expr><name>dig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>hlen</name> <operator>=</operator> <call><name>hash_size</name><argument_list>(<argument><expr><name>dig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Get current input length and compute total bit length.
	 */</comment>
	<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name><name>dig</name><operator>-&gt;</operator><name>state</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hc</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>bit_len</name> <operator>=</operator> <operator>(</operator><name>count</name> <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>len</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * We can input the blocks that we are sure we will use.
	 * This offers better performance (no MUX for these blocks)
	 * and also ensures that the remaining lengths fit on 32 bits.
	 */</comment>
	<expr_stmt><expr><name>ncount</name> <operator>=</operator> <operator>(</operator><name>count</name> <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>min_len</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>bs</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ncount</name> <operator>&gt;</operator> <name>count</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>size_t</name></type> <name>zlen</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>zlen</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>ncount</name> <operator>-</operator> <name>count</name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>dig</name><operator>-&gt;</operator><name>update</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hc</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>zlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>data</name> <operator>+</operator> <name>zlen</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>zlen</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>max_len</name> <operator>-=</operator> <name>zlen</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>count</name> <operator>=</operator> <name>ncount</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * At that point:
	 * -- 'count' contains the number of bytes already processed
	 * (in total).
	 * -- We must input 'len' bytes. 'min_len' is unimportant: we
	 * used it to know how many full blocks we could process
	 * directly. Now only len and max_len matter.
	 *
	 * We compute kr, kl, kz and km.
	 *  kr   number of input bytes already in the current block
	 *  km   index of the first byte after the end of the last padding
	 *       block, if length is max_len
	 *  kz   index of the last byte of the actual last padding block
	 *  kl   index of the start of the encoded length
	 *
	 * km, kz and kl are counted from the current offset in the
	 * input data.
	 */</comment>
	<expr_stmt><expr><name>kr</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>count</name> <operator>&amp;</operator> <operator>(</operator><name>bs</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>kz</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>kr</name> <operator>+</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>len</name> <operator>+</operator> <name>po</name> <operator>+</operator> <name>bs</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>bs</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>kr</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>kl</name> <operator>=</operator> <name>kz</name> <operator>-</operator> <literal type="number">7</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>km</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>kr</name> <operator>+</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>max_len</name> <operator>+</operator> <name>po</name> <operator>+</operator> <name>bs</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>bs</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <name>kr</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * We must now process km bytes. For index u from 0 to km-1:
	 *   d is from data[] if u &lt; max_len, 0x00 otherwise
	 *   e is an encoded length byte or 0x00, depending on u
	 * The tests for d and e need not be constant-time, since
	 * they relate only to u and max_len, not to the actual length.
	 *
	 * Actual input length is then:
	 *   d      if u &lt; len
	 *   0x80   if u == len
	 *   0x00   if u &gt; len and u &lt; kl
	 *   e      if u &gt;= kl
	 *
	 * Hash state is obtained whenever we reach a full block. This
	 * is the result we want if and only if u == kz.
	 */</comment>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tmp2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>tmp2</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>km</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>uint32_t</name></type> <name>v</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint32_t</name></type> <name>d</name></decl>, <decl><type ref="prev"/><name>e</name></decl>, <decl><type ref="prev"/><name>x0</name></decl>, <decl><type ref="prev"/><name>x1</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

		<expr_stmt><expr><name>d</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>u</name> <operator>&lt;</operator> <name>max_len</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>data</name><operator>)</operator><index>[<expr><name>u</name></expr>]</index></expr> </then><else>: <expr><literal type="number">0x00</literal></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>kr</name> <operator>+</operator> <name>u</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>bs</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;=</operator> <operator>(</operator><name>bs</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>unsigned</name></type> <name>j</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>j</name> <operator>=</operator> <operator>(</operator><name>v</name> <operator>-</operator> <operator>(</operator><name>bs</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>be</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>bit_len</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">56</literal> <operator>-</operator> <name>j</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>bit_len</name> <operator>&gt;&gt;</operator> <name>j</name><operator>)</operator></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<expr_stmt><expr><name>e</name> <operator>&amp;=</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>MUX</name><argument_list>(<argument><expr><call><name>EQ</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>MUX</name><argument_list>(<argument><expr><call><name>LT</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>kl</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>MUX</name><argument_list>(<argument><expr><call><name>LE</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>x0</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>dig</name><operator>-&gt;</operator><name>update</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hc</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <operator>(</operator><name>bs</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>dig</name><operator>-&gt;</operator><name>state</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hc</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>CCOPY</name><argument_list>(<argument><expr><call><name>EQ</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>kz</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>hlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/*
	 * Inner hash output is in tmp2[]; we finish processing.
	 */</comment>
	<expr_stmt><expr><call><name><name>dig</name><operator>-&gt;</operator><name>init</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hc</name><operator>.</operator><name>vtable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>dig</name><operator>-&gt;</operator><name>set_state</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hc</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>kso</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>dig</name><operator>-&gt;</operator><name>update</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hc</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>hlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>dig</name><operator>-&gt;</operator><name>out</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hc</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>out_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>out_len</name></name></expr>;</return>
</block_content>}</block></function>
</unit>
