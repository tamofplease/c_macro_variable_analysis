<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/extra/iwnet/src/bearssl/ec/ecdsa_rta.c"><comment type="block">/*
 * Copyright (c) 2016 Thomas Pornin &lt;pornin@bolet.org&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining 
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Compute ASN.1 encoded length for the provided integer. The ASN.1
 * encoding is signed, so its leading bit must have value 0; it must
 * also be of minimal length (so leading bytes of value 0 must be
 * removed, except if that would contradict the rule about the sign
 * bit).
 */</comment>
<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>asn1_int_length</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>xlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<while>while <condition>(<expr><name>xlen</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>x</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>x</name> <operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>xlen</name> <operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<if_stmt><if>if <condition>(<expr><name>xlen</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>*</operator><name>x</name> <operator>&gt;=</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>xlen</name> <operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>xlen</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* see bearssl_ec.h */</comment>
<function><type><name>size_t</name></type>
<name>br_ecdsa_raw_to_asn1</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sig_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * Internal buffer is large enough to accommodate a signature
	 * such that r and s fit on 125 bytes each (signed encoding),
	 * meaning a curve order of up to 999 bits. This is the limit
	 * that ensures "simple" length encodings.
	 */</comment>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>hlen</name></decl>, <decl><type ref="prev"/><name>rlen</name></decl>, <decl><type ref="prev"/><name>slen</name></decl>, <decl><type ref="prev"/><name>zlen</name></decl>, <decl><type ref="prev"/><name>off</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">257</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>sig</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>sig_len</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Compute lengths for the two integers.
	 */</comment>
	<expr_stmt><expr><name>hlen</name> <operator>=</operator> <name>sig_len</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>rlen</name> <operator>=</operator> <call><name>asn1_int_length</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>hlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>slen</name> <operator>=</operator> <call><name>asn1_int_length</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>hlen</name></expr></argument>, <argument><expr><name>hlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rlen</name> <operator>&gt;</operator> <literal type="number">125</literal> <operator>||</operator> <name>slen</name> <operator>&gt;</operator> <literal type="number">125</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * SEQUENCE header.
	 */</comment>
	<expr_stmt><expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x30</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>zlen</name> <operator>=</operator> <name>rlen</name> <operator>+</operator> <name>slen</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>zlen</name> <operator>&gt;=</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x81</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tmp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>zlen</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>off</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>zlen</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>off</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/*
	 * First INTEGER (r).
	 */</comment>
	<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>off</name> <operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x02</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>off</name> <operator>++</operator></expr>]</index></name> <operator>=</operator> <name>rlen</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rlen</name> <operator>&gt;</operator> <name>hlen</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmp</name> <operator>+</operator> <name>off</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>hlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmp</name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>hlen</name> <operator>-</operator> <name>rlen</name></expr></argument>, <argument><expr><name>rlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name>off</name> <operator>+=</operator> <name>rlen</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Second INTEGER (s).
	 */</comment>
	<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>off</name> <operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x02</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>off</name> <operator>++</operator></expr>]</index></name> <operator>=</operator> <name>slen</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>slen</name> <operator>&gt;</operator> <name>hlen</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmp</name> <operator>+</operator> <name>off</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>hlen</name></expr></argument>, <argument><expr><name>hlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmp</name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>sig_len</name> <operator>-</operator> <name>slen</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name>off</name> <operator>+=</operator> <name>slen</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Return ASN.1 signature.
	 */</comment>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>sig</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>off</name></expr>;</return>
</block_content>}</block></function>
</unit>
