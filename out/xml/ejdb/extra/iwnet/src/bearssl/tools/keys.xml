<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/extra/iwnet/src/bearssl/tools/keys.c"><comment type="block">/*
 * Copyright (c) 2016 Thomas Pornin &lt;pornin@bolet.org&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"brssl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bearssl.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>private_key</name> <modifier>*</modifier></type>
<name>decode_key</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>br_skey_decoder_context</name></type> <name>dc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>private_key</name> <modifier>*</modifier></type><name>sk</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>br_skey_decoder_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_skey_decoder_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>br_skey_decoder_last_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>errname</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>errmsg</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR (decoding): err=%d\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>errname</name> <operator>=</operator> <call><name>find_error_name</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>errname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"  %s: %s\n"</literal></expr></argument>, <argument><expr><name>errname</name></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"  (unknown)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<switch>switch <condition>(<expr><call><name>br_skey_decoder_key_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>br_rsa_private_key</name> <modifier>*</modifier></type><name>rk</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>br_ec_private_key</name> <modifier>*</modifier></type><name>ek</name></decl>;</decl_stmt>

	<case>case <expr><name>BR_KEYTYPE_RSA</name></expr>:</case>
		<expr_stmt><expr><name>rk</name> <operator>=</operator> <call><name>br_skey_decoder_get_rsa</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>sk</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>sk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sk</name><operator>-&gt;</operator><name>key_type</name></name> <operator>=</operator> <name>BR_KEYTYPE_RSA</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>n_bitlen</name></name> <operator>=</operator> <name><name>rk</name><operator>-&gt;</operator><name>n_bitlen</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>p</name></name> <operator>=</operator> <call><name>xblobdup</name><argument_list>(<argument><expr><name><name>rk</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>rk</name><operator>-&gt;</operator><name>plen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>plen</name></name> <operator>=</operator> <name><name>rk</name><operator>-&gt;</operator><name>plen</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>q</name></name> <operator>=</operator> <call><name>xblobdup</name><argument_list>(<argument><expr><name><name>rk</name><operator>-&gt;</operator><name>q</name></name></expr></argument>, <argument><expr><name><name>rk</name><operator>-&gt;</operator><name>qlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>qlen</name></name> <operator>=</operator> <name><name>rk</name><operator>-&gt;</operator><name>qlen</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>dp</name></name> <operator>=</operator> <call><name>xblobdup</name><argument_list>(<argument><expr><name><name>rk</name><operator>-&gt;</operator><name>dp</name></name></expr></argument>, <argument><expr><name><name>rk</name><operator>-&gt;</operator><name>dplen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>dplen</name></name> <operator>=</operator> <name><name>rk</name><operator>-&gt;</operator><name>dplen</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>dq</name></name> <operator>=</operator> <call><name>xblobdup</name><argument_list>(<argument><expr><name><name>rk</name><operator>-&gt;</operator><name>dq</name></name></expr></argument>, <argument><expr><name><name>rk</name><operator>-&gt;</operator><name>dqlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>dqlen</name></name> <operator>=</operator> <name><name>rk</name><operator>-&gt;</operator><name>dqlen</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>iq</name></name> <operator>=</operator> <call><name>xblobdup</name><argument_list>(<argument><expr><name><name>rk</name><operator>-&gt;</operator><name>iq</name></name></expr></argument>, <argument><expr><name><name>rk</name><operator>-&gt;</operator><name>iqlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>iqlen</name></name> <operator>=</operator> <name><name>rk</name><operator>-&gt;</operator><name>iqlen</name></name></expr>;</expr_stmt>
		<break>break;</break>

	<case>case <expr><name>BR_KEYTYPE_EC</name></expr>:</case>
		<expr_stmt><expr><name>ek</name> <operator>=</operator> <call><name>br_skey_decoder_get_ec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>sk</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>sk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sk</name><operator>-&gt;</operator><name>key_type</name></name> <operator>=</operator> <name>BR_KEYTYPE_EC</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>curve</name></name> <operator>=</operator> <name><name>ek</name><operator>-&gt;</operator><name>curve</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>xblobdup</name><argument_list>(<argument><expr><name><name>ek</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>ek</name><operator>-&gt;</operator><name>xlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>xlen</name></name> <operator>=</operator> <name><name>ek</name><operator>-&gt;</operator><name>xlen</name></name></expr>;</expr_stmt>
		<break>break;</break>

	<default>default:</default>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Unknown key type: %d\n"</literal></expr></argument>,
			<argument><expr><call><name>br_skey_decoder_key_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>sk</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></switch>

	<return>return <expr><name>sk</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* see brssl.h */</comment>
<function><type><name>private_key</name> <modifier>*</modifier></type>
<name>read_private_key_data</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>private_key</name> <modifier>*</modifier></type><name>sk</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pem_object</name> <modifier>*</modifier></type><name>pos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>num</name></decl>, <decl><type ref="prev"/><name>u</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>pos</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>sk</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<goto>goto <name>deckey_exit</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>looks_like_DER</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>sk</name> <operator>=</operator> <call><name>decode_key</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>deckey_exit</name>;</goto>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>decode_pem</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<goto>goto <name>deckey_exit</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>pos</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>pos</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>eqstr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"RSA PRIVATE KEY"</literal></expr></argument>)</argument_list></call>
				<operator>||</operator> <call><name>eqstr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"EC PRIVATE KEY"</literal></expr></argument>)</argument_list></call>
				<operator>||</operator> <call><name>eqstr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"PRIVATE KEY"</literal></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>sk</name> <operator>=</operator> <call><name>decode_key</name><argument_list>(<argument><expr><name><name>pos</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>, <argument><expr><name><name>pos</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>data_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<goto>goto <name>deckey_exit</name>;</goto>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
		<goto>goto <name>deckey_exit</name>;</goto>
	</block_content>}</block></else></if_stmt>

<label><name>deckey_exit</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>pos</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>free_pem_object_contents</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pos</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>sk</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* see brssl.h */</comment>
<function><type><name>private_key</name> <modifier>*</modifier></type>
<name>read_private_key</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>read_file</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>private_key</name> <modifier>*</modifier></type><name>pk</name> <init>= <expr><call><name>read_private_key_data</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pk</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: no private key in buffer '%s'\n"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pk</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* see brssl.h */</comment>
<function><type><name>void</name></type>
<name>free_private_key</name><parameter_list>(<parameter><decl><type><name>private_key</name> <modifier>*</modifier></type><name>sk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>sk</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<switch>switch <condition>(<expr><name><name>sk</name><operator>-&gt;</operator><name>key_type</name></name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>BR_KEYTYPE_RSA</name></expr>:</case>
		<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>sk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>sk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>q</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>sk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>dp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>sk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>dq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>sk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>iq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>BR_KEYTYPE_EC</name></expr>:</case>
		<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>sk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></switch>
	<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>sk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * OID for hash functions in RSA signatures.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>HASH_OID_SHA1</name><index>[]</index></name> <init>= <expr><block>{
	<expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x2B</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x1A</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>HASH_OID_SHA224</name><index>[]</index></name> <init>= <expr><block>{
	<expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x04</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>HASH_OID_SHA256</name><index>[]</index></name> <init>= <expr><block>{
	<expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>HASH_OID_SHA384</name><index>[]</index></name> <init>= <expr><block>{
	<expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x02</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>HASH_OID_SHA512</name><index>[]</index></name> <init>= <expr><block>{
	<expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name><name>HASH_OID</name><index>[]</index></name> <init>= <expr><block>{
	<expr><name>HASH_OID_SHA1</name></expr>,
	<expr><name>HASH_OID_SHA224</name></expr>,
	<expr><name>HASH_OID_SHA256</name></expr>,
	<expr><name>HASH_OID_SHA384</name></expr>,
	<expr><name>HASH_OID_SHA512</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* see brssl.h */</comment>
<function><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>get_hash_oid</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>id</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>id</name> <operator>&lt;=</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name><name>HASH_OID</name><index>[<expr><name>id</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* see brssl.h */</comment>
<function><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type>
<name>get_hash_impl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>hash_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>hash_id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>&amp;</operator><name>br_md5sha1_vtable</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>hash_functions</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type><name>hc</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>hc</name> <operator>=</operator> <name><name>hash_functions</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>hclass</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>id</name> <operator>=</operator> <operator>(</operator><name><name>hc</name><operator>-&gt;</operator><name>desc</name></name> <operator>&gt;&gt;</operator> <name>BR_HASHDESC_ID_OFF</name><operator>)</operator> <operator>&amp;</operator> <name>BR_HASHDESC_ID_MASK</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <name>hash_id</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>hc</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
</unit>
