<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/extra/iwnet/src/bearssl/tools/names.c"><comment type="block">/*
 * Copyright (c) 2016 Thomas Pornin &lt;pornin@bolet.org&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining 
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"brssl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bearssl.h"</cpp:file></cpp:include>

<comment type="block">/* see brssl.h */</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>protocol_version</name></type> <name><name>protocol_versions</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{ <expr><literal type="string">"tls10"</literal></expr>, <expr><name>BR_TLS10</name></expr>, <expr><literal type="string">"TLS 1.0"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"tls11"</literal></expr>, <expr><name>BR_TLS11</name></expr>, <expr><literal type="string">"TLS 1.1"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"tls12"</literal></expr>, <expr><name>BR_TLS12</name></expr>, <expr><literal type="string">"TLS 1.2"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* see brssl.h */</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>hash_function</name></type> <name><name>hash_functions</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{ <expr><literal type="string">"md5"</literal></expr>,     <expr><operator>&amp;</operator><name>br_md5_vtable</name></expr>,     <expr><literal type="string">"MD5"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"sha1"</literal></expr>,    <expr><operator>&amp;</operator><name>br_sha1_vtable</name></expr>,    <expr><literal type="string">"SHA-1"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"sha224"</literal></expr>,  <expr><operator>&amp;</operator><name>br_sha224_vtable</name></expr>,  <expr><literal type="string">"SHA-224"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"sha256"</literal></expr>,  <expr><operator>&amp;</operator><name>br_sha256_vtable</name></expr>,  <expr><literal type="string">"SHA-256"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"sha384"</literal></expr>,  <expr><operator>&amp;</operator><name>br_sha384_vtable</name></expr>,  <expr><literal type="string">"SHA-384"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"sha512"</literal></expr>,  <expr><operator>&amp;</operator><name>br_sha512_vtable</name></expr>,  <expr><literal type="string">"SHA-512"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* see brssl.h */</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>cipher_suite</name></type> <name><name>cipher_suites</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{
		<expr><literal type="string">"ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256"</literal></expr>,
		<expr><name>BR_TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256</name></expr>,
		<expr><name>REQ_ECDHE_ECDSA</name> <operator>|</operator> <name>REQ_CHAPOL</name> <operator>|</operator> <name>REQ_SHA256</name> <operator>|</operator> <name>REQ_TLS12</name></expr>,
		<expr><literal type="string">"ECDHE with ECDSA, ChaCha20+Poly1305 encryption (TLS 1.2+)"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256"</literal></expr>,
		<expr><name>BR_TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256</name></expr>,
		<expr><name>REQ_ECDHE_RSA</name> <operator>|</operator> <name>REQ_CHAPOL</name> <operator>|</operator> <name>REQ_SHA256</name> <operator>|</operator> <name>REQ_TLS12</name></expr>,
		<expr><literal type="string">"ECDHE with RSA, ChaCha20+Poly1305 encryption (TLS 1.2+)"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"ECDHE_ECDSA_WITH_AES_128_GCM_SHA256"</literal></expr>,
		<expr><name>BR_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256</name></expr>,
		<expr><name>REQ_ECDHE_ECDSA</name> <operator>|</operator> <name>REQ_AESGCM</name> <operator>|</operator> <name>REQ_SHA256</name> <operator>|</operator> <name>REQ_TLS12</name></expr>,
		<expr><literal type="string">"ECDHE with ECDSA, AES-128/GCM encryption (TLS 1.2+)"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"ECDHE_RSA_WITH_AES_128_GCM_SHA256"</literal></expr>,
		<expr><name>BR_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256</name></expr>,
		<expr><name>REQ_ECDHE_RSA</name> <operator>|</operator> <name>REQ_AESGCM</name> <operator>|</operator> <name>REQ_SHA256</name> <operator>|</operator> <name>REQ_TLS12</name></expr>,
		<expr><literal type="string">"ECDHE with RSA, AES-128/GCM encryption (TLS 1.2+)"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"ECDHE_ECDSA_WITH_AES_256_GCM_SHA384"</literal></expr>,
		<expr><name>BR_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384</name></expr>,
		<expr><name>REQ_ECDHE_ECDSA</name> <operator>|</operator> <name>REQ_AESGCM</name> <operator>|</operator> <name>REQ_SHA384</name> <operator>|</operator> <name>REQ_TLS12</name></expr>,
		<expr><literal type="string">"ECDHE with ECDSA, AES-256/GCM encryption (TLS 1.2+)"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"ECDHE_RSA_WITH_AES_256_GCM_SHA384"</literal></expr>,
		<expr><name>BR_TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384</name></expr>,
		<expr><name>REQ_ECDHE_RSA</name> <operator>|</operator> <name>REQ_AESGCM</name> <operator>|</operator> <name>REQ_SHA384</name> <operator>|</operator> <name>REQ_TLS12</name></expr>,
		<expr><literal type="string">"ECDHE with RSA, AES-256/GCM encryption (TLS 1.2+)"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"ECDHE_ECDSA_WITH_AES_128_CCM"</literal></expr>,
		<expr><name>BR_TLS_ECDHE_ECDSA_WITH_AES_128_CCM</name></expr>,
		<expr><name>REQ_ECDHE_ECDSA</name> <operator>|</operator> <name>REQ_AESCCM</name> <operator>|</operator> <name>REQ_SHA256</name> <operator>|</operator> <name>REQ_TLS12</name></expr>,
		<expr><literal type="string">"ECDHE with ECDSA, AES-128/CCM encryption (TLS 1.2+)"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"ECDHE_ECDSA_WITH_AES_256_CCM"</literal></expr>,
		<expr><name>BR_TLS_ECDHE_ECDSA_WITH_AES_256_CCM</name></expr>,
		<expr><name>REQ_ECDHE_ECDSA</name> <operator>|</operator> <name>REQ_AESCCM</name> <operator>|</operator> <name>REQ_SHA256</name> <operator>|</operator> <name>REQ_TLS12</name></expr>,
		<expr><literal type="string">"ECDHE with ECDSA, AES-256/CCM encryption (TLS 1.2+)"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"ECDHE_ECDSA_WITH_AES_128_CCM_8"</literal></expr>,
		<expr><name>BR_TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8</name></expr>,
		<expr><name>REQ_ECDHE_ECDSA</name> <operator>|</operator> <name>REQ_AESCCM</name> <operator>|</operator> <name>REQ_SHA256</name> <operator>|</operator> <name>REQ_TLS12</name></expr>,
		<expr><literal type="string">"ECDHE with ECDSA, AES-128/CCM_8 encryption (TLS 1.2+)"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"ECDHE_ECDSA_WITH_AES_256_CCM_8"</literal></expr>,
		<expr><name>BR_TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8</name></expr>,
		<expr><name>REQ_ECDHE_ECDSA</name> <operator>|</operator> <name>REQ_AESCCM</name> <operator>|</operator> <name>REQ_SHA256</name> <operator>|</operator> <name>REQ_TLS12</name></expr>,
		<expr><literal type="string">"ECDHE with ECDSA, AES-256/CCM_8 encryption (TLS 1.2+)"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"ECDHE_ECDSA_WITH_AES_128_CBC_SHA256"</literal></expr>,
		<expr><name>BR_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256</name></expr>,
		<expr><name>REQ_ECDHE_ECDSA</name> <operator>|</operator> <name>REQ_AESCBC</name> <operator>|</operator> <name>REQ_SHA256</name> <operator>|</operator> <name>REQ_TLS12</name></expr>,
		<expr><literal type="string">"ECDHE with ECDSA, AES-128/CBC + SHA-256 (TLS 1.2+)"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"ECDHE_RSA_WITH_AES_128_CBC_SHA256"</literal></expr>,
		<expr><name>BR_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256</name></expr>,
		<expr><name>REQ_ECDHE_RSA</name> <operator>|</operator> <name>REQ_AESCBC</name> <operator>|</operator> <name>REQ_SHA256</name> <operator>|</operator> <name>REQ_TLS12</name></expr>,
		<expr><literal type="string">"ECDHE with RSA, AES-128/CBC + SHA-256 (TLS 1.2+)"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"ECDHE_ECDSA_WITH_AES_256_CBC_SHA384"</literal></expr>,
		<expr><name>BR_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384</name></expr>,
		<expr><name>REQ_ECDHE_ECDSA</name> <operator>|</operator> <name>REQ_AESCBC</name> <operator>|</operator> <name>REQ_SHA384</name> <operator>|</operator> <name>REQ_TLS12</name></expr>,
		<expr><literal type="string">"ECDHE with ECDSA, AES-256/CBC + SHA-384 (TLS 1.2+)"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"ECDHE_RSA_WITH_AES_256_CBC_SHA384"</literal></expr>,
		<expr><name>BR_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384</name></expr>,
		<expr><name>REQ_ECDHE_RSA</name> <operator>|</operator> <name>REQ_AESCBC</name> <operator>|</operator> <name>REQ_SHA384</name> <operator>|</operator> <name>REQ_TLS12</name></expr>,
		<expr><literal type="string">"ECDHE with RSA, AES-256/CBC + SHA-384 (TLS 1.2+)"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"ECDHE_ECDSA_WITH_AES_128_CBC_SHA"</literal></expr>,
		<expr><name>BR_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA</name></expr>,
		<expr><name>REQ_ECDHE_ECDSA</name> <operator>|</operator> <name>REQ_AESCBC</name> <operator>|</operator> <name>REQ_SHA1</name></expr>,
		<expr><literal type="string">"ECDHE with ECDSA, AES-128/CBC + SHA-1"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"ECDHE_RSA_WITH_AES_128_CBC_SHA"</literal></expr>,
		<expr><name>BR_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA</name></expr>,
		<expr><name>REQ_ECDHE_RSA</name> <operator>|</operator> <name>REQ_AESCBC</name> <operator>|</operator> <name>REQ_SHA1</name></expr>,
		<expr><literal type="string">"ECDHE with RSA, AES-128/CBC + SHA-1"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"ECDHE_ECDSA_WITH_AES_256_CBC_SHA"</literal></expr>,
		<expr><name>BR_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA</name></expr>,
		<expr><name>REQ_ECDHE_ECDSA</name> <operator>|</operator> <name>REQ_AESCBC</name> <operator>|</operator> <name>REQ_SHA1</name></expr>,
		<expr><literal type="string">"ECDHE with ECDSA, AES-256/CBC + SHA-1"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"ECDHE_RSA_WITH_AES_256_CBC_SHA"</literal></expr>,
		<expr><name>BR_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA</name></expr>,
		<expr><name>REQ_ECDHE_RSA</name> <operator>|</operator> <name>REQ_AESCBC</name> <operator>|</operator> <name>REQ_SHA1</name></expr>,
		<expr><literal type="string">"ECDHE with RSA, AES-256/CBC + SHA-1"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"ECDH_ECDSA_WITH_AES_128_GCM_SHA256"</literal></expr>,
		<expr><name>BR_TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256</name></expr>,
		<expr><name>REQ_ECDH</name> <operator>|</operator> <name>REQ_AESGCM</name> <operator>|</operator> <name>REQ_SHA256</name> <operator>|</operator> <name>REQ_TLS12</name></expr>,
		<expr><literal type="string">"ECDH key exchange (EC cert), AES-128/GCM (TLS 1.2+)"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"ECDH_RSA_WITH_AES_128_GCM_SHA256"</literal></expr>,
		<expr><name>BR_TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256</name></expr>,
		<expr><name>REQ_ECDH</name> <operator>|</operator> <name>REQ_AESGCM</name> <operator>|</operator> <name>REQ_SHA256</name> <operator>|</operator> <name>REQ_TLS12</name></expr>,
		<expr><literal type="string">"ECDH key exchange (RSA cert), AES-128/GCM (TLS 1.2+)"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"ECDH_ECDSA_WITH_AES_256_GCM_SHA384"</literal></expr>,
		<expr><name>BR_TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384</name></expr>,
		<expr><name>REQ_ECDH</name> <operator>|</operator> <name>REQ_AESGCM</name> <operator>|</operator> <name>REQ_SHA384</name> <operator>|</operator> <name>REQ_TLS12</name></expr>,
		<expr><literal type="string">"ECDH key exchange (EC cert), AES-256/GCM (TLS 1.2+)"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"ECDH_RSA_WITH_AES_256_GCM_SHA384"</literal></expr>,
		<expr><name>BR_TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384</name></expr>,
		<expr><name>REQ_ECDH</name> <operator>|</operator> <name>REQ_AESGCM</name> <operator>|</operator> <name>REQ_SHA384</name> <operator>|</operator> <name>REQ_TLS12</name></expr>,
		<expr><literal type="string">"ECDH key exchange (RSA cert), AES-256/GCM (TLS 1.2+)"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"ECDH_ECDSA_WITH_AES_128_CBC_SHA256"</literal></expr>,
		<expr><name>BR_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256</name></expr>,
		<expr><name>REQ_ECDH</name> <operator>|</operator> <name>REQ_AESCBC</name> <operator>|</operator> <name>REQ_SHA256</name> <operator>|</operator> <name>REQ_TLS12</name></expr>,
		<expr><literal type="string">"ECDH key exchange (EC cert), AES-128/CBC + HMAC/SHA-256 (TLS 1.2+)"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"ECDH_RSA_WITH_AES_128_CBC_SHA256"</literal></expr>,
		<expr><name>BR_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256</name></expr>,
		<expr><name>REQ_ECDH</name> <operator>|</operator> <name>REQ_AESCBC</name> <operator>|</operator> <name>REQ_SHA256</name> <operator>|</operator> <name>REQ_TLS12</name></expr>,
		<expr><literal type="string">"ECDH key exchange (RSA cert), AES-128/CBC + HMAC/SHA-256 (TLS 1.2+)"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"ECDH_ECDSA_WITH_AES_256_CBC_SHA384"</literal></expr>,
		<expr><name>BR_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384</name></expr>,
		<expr><name>REQ_ECDH</name> <operator>|</operator> <name>REQ_AESCBC</name> <operator>|</operator> <name>REQ_SHA384</name> <operator>|</operator> <name>REQ_TLS12</name></expr>,
		<expr><literal type="string">"ECDH key exchange (EC cert), AES-256/CBC + HMAC/SHA-384 (TLS 1.2+)"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"ECDH_RSA_WITH_AES_256_CBC_SHA384"</literal></expr>,
		<expr><name>BR_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384</name></expr>,
		<expr><name>REQ_ECDH</name> <operator>|</operator> <name>REQ_AESCBC</name> <operator>|</operator> <name>REQ_SHA384</name> <operator>|</operator> <name>REQ_TLS12</name></expr>,
		<expr><literal type="string">"ECDH key exchange (RSA cert), AES-256/CBC + HMAC/SHA-384 (TLS 1.2+)"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"ECDH_ECDSA_WITH_AES_128_CBC_SHA"</literal></expr>,
		<expr><name>BR_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA</name></expr>,
		<expr><name>REQ_ECDH</name> <operator>|</operator> <name>REQ_AESCBC</name> <operator>|</operator> <name>REQ_SHA1</name></expr>,
		<expr><literal type="string">"ECDH key exchange (EC cert), AES-128/CBC + HMAC/SHA-1"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"ECDH_RSA_WITH_AES_128_CBC_SHA"</literal></expr>,
		<expr><name>BR_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA</name></expr>,
		<expr><name>REQ_ECDH</name> <operator>|</operator> <name>REQ_AESCBC</name> <operator>|</operator> <name>REQ_SHA1</name></expr>,
		<expr><literal type="string">"ECDH key exchange (RSA cert), AES-128/CBC + HMAC/SHA-1"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"ECDH_ECDSA_WITH_AES_256_CBC_SHA"</literal></expr>,
		<expr><name>BR_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA</name></expr>,
		<expr><name>REQ_ECDH</name> <operator>|</operator> <name>REQ_AESCBC</name> <operator>|</operator> <name>REQ_SHA1</name></expr>,
		<expr><literal type="string">"ECDH key exchange (EC cert), AES-256/CBC + HMAC/SHA-1"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"ECDH_RSA_WITH_AES_256_CBC_SHA"</literal></expr>,
		<expr><name>BR_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA</name></expr>,
		<expr><name>REQ_ECDH</name> <operator>|</operator> <name>REQ_AESCBC</name> <operator>|</operator> <name>REQ_SHA1</name></expr>,
		<expr><literal type="string">"ECDH key exchange (RSA cert), AES-256/CBC + HMAC/SHA-1"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"RSA_WITH_AES_128_GCM_SHA256"</literal></expr>,
		<expr><name>BR_TLS_RSA_WITH_AES_128_GCM_SHA256</name></expr>,
		<expr><name>REQ_RSAKEYX</name> <operator>|</operator> <name>REQ_AESGCM</name> <operator>|</operator> <name>REQ_SHA256</name> <operator>|</operator> <name>REQ_TLS12</name></expr>,
		<expr><literal type="string">"RSA key exchange, AES-128/GCM encryption (TLS 1.2+)"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"RSA_WITH_AES_256_GCM_SHA384"</literal></expr>,
		<expr><name>BR_TLS_RSA_WITH_AES_256_GCM_SHA384</name></expr>,
		<expr><name>REQ_RSAKEYX</name> <operator>|</operator> <name>REQ_AESGCM</name> <operator>|</operator> <name>REQ_SHA384</name> <operator>|</operator> <name>REQ_TLS12</name></expr>,
		<expr><literal type="string">"RSA key exchange, AES-256/GCM encryption (TLS 1.2+)"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"RSA_WITH_AES_128_CCM"</literal></expr>,
		<expr><name>BR_TLS_RSA_WITH_AES_128_CCM</name></expr>,
		<expr><name>REQ_RSAKEYX</name> <operator>|</operator> <name>REQ_AESCCM</name> <operator>|</operator> <name>REQ_SHA256</name> <operator>|</operator> <name>REQ_TLS12</name></expr>,
		<expr><literal type="string">"RSA key exchange, AES-128/CCM encryption (TLS 1.2+)"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"RSA_WITH_AES_256_CCM"</literal></expr>,
		<expr><name>BR_TLS_RSA_WITH_AES_256_CCM</name></expr>,
		<expr><name>REQ_RSAKEYX</name> <operator>|</operator> <name>REQ_AESCCM</name> <operator>|</operator> <name>REQ_SHA256</name> <operator>|</operator> <name>REQ_TLS12</name></expr>,
		<expr><literal type="string">"RSA key exchange, AES-256/CCM encryption (TLS 1.2+)"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"RSA_WITH_AES_128_CCM_8"</literal></expr>,
		<expr><name>BR_TLS_RSA_WITH_AES_128_CCM_8</name></expr>,
		<expr><name>REQ_RSAKEYX</name> <operator>|</operator> <name>REQ_AESCCM</name> <operator>|</operator> <name>REQ_SHA256</name> <operator>|</operator> <name>REQ_TLS12</name></expr>,
		<expr><literal type="string">"RSA key exchange, AES-128/CCM_8 encryption (TLS 1.2+)"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"RSA_WITH_AES_256_CCM_8"</literal></expr>,
		<expr><name>BR_TLS_RSA_WITH_AES_256_CCM_8</name></expr>,
		<expr><name>REQ_RSAKEYX</name> <operator>|</operator> <name>REQ_AESCCM</name> <operator>|</operator> <name>REQ_SHA256</name> <operator>|</operator> <name>REQ_TLS12</name></expr>,
		<expr><literal type="string">"RSA key exchange, AES-256/CCM_8 encryption (TLS 1.2+)"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"RSA_WITH_AES_128_CBC_SHA256"</literal></expr>,
		<expr><name>BR_TLS_RSA_WITH_AES_128_CBC_SHA256</name></expr>,
		<expr><name>REQ_RSAKEYX</name> <operator>|</operator> <name>REQ_AESCBC</name> <operator>|</operator> <name>REQ_SHA256</name> <operator>|</operator> <name>REQ_TLS12</name></expr>,
		<expr><literal type="string">"RSA key exchange, AES-128/CBC + HMAC/SHA-256 (TLS 1.2+)"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"RSA_WITH_AES_256_CBC_SHA256"</literal></expr>,
		<expr><name>BR_TLS_RSA_WITH_AES_256_CBC_SHA256</name></expr>,
		<expr><name>REQ_RSAKEYX</name> <operator>|</operator> <name>REQ_AESCBC</name> <operator>|</operator> <name>REQ_SHA256</name> <operator>|</operator> <name>REQ_TLS12</name></expr>,
		<expr><literal type="string">"RSA key exchange, AES-256/CBC + HMAC/SHA-256 (TLS 1.2+)"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"RSA_WITH_AES_128_CBC_SHA"</literal></expr>,
		<expr><name>BR_TLS_RSA_WITH_AES_128_CBC_SHA</name></expr>,
		<expr><name>REQ_RSAKEYX</name> <operator>|</operator> <name>REQ_AESCBC</name> <operator>|</operator> <name>REQ_SHA1</name></expr>,
		<expr><literal type="string">"RSA key exchange, AES-128/CBC + HMAC/SHA-1"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"RSA_WITH_AES_256_CBC_SHA"</literal></expr>,
		<expr><name>BR_TLS_RSA_WITH_AES_256_CBC_SHA</name></expr>,
		<expr><name>REQ_RSAKEYX</name> <operator>|</operator> <name>REQ_AESCBC</name> <operator>|</operator> <name>REQ_SHA1</name></expr>,
		<expr><literal type="string">"RSA key exchange, AES-256/CBC + HMAC/SHA-1"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA"</literal></expr>,
		<expr><name>BR_TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA</name></expr>,
		<expr><name>REQ_ECDHE_ECDSA</name> <operator>|</operator> <name>REQ_3DESCBC</name> <operator>|</operator> <name>REQ_SHA1</name></expr>,
		<expr><literal type="string">"ECDHE with ECDSA, 3DES/CBC + SHA-1"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"ECDHE_RSA_WITH_3DES_EDE_CBC_SHA"</literal></expr>,
		<expr><name>BR_TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA</name></expr>,
		<expr><name>REQ_ECDHE_RSA</name> <operator>|</operator> <name>REQ_3DESCBC</name> <operator>|</operator> <name>REQ_SHA1</name></expr>,
		<expr><literal type="string">"ECDHE with RSA, 3DES/CBC + SHA-1"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA"</literal></expr>,
		<expr><name>BR_TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA</name></expr>,
		<expr><name>REQ_ECDH</name> <operator>|</operator> <name>REQ_3DESCBC</name> <operator>|</operator> <name>REQ_SHA1</name></expr>,
		<expr><literal type="string">"ECDH key exchange (EC cert), 3DES/CBC + HMAC/SHA-1"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"ECDH_RSA_WITH_3DES_EDE_CBC_SHA"</literal></expr>,
		<expr><name>BR_TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA</name></expr>,
		<expr><name>REQ_ECDH</name> <operator>|</operator> <name>REQ_3DESCBC</name> <operator>|</operator> <name>REQ_SHA1</name></expr>,
		<expr><literal type="string">"ECDH key exchange (RSA cert), 3DES/CBC + HMAC/SHA-1"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"RSA_WITH_3DES_EDE_CBC_SHA"</literal></expr>,
		<expr><name>BR_TLS_RSA_WITH_3DES_EDE_CBC_SHA</name></expr>,
		<expr><name>REQ_RSAKEYX</name> <operator>|</operator> <name>REQ_3DESCBC</name> <operator>|</operator> <name>REQ_SHA1</name></expr>,
		<expr><literal type="string">"RSA key exchange, 3DES/CBC + HMAC/SHA-1"</literal></expr>
	}</block></expr>,
	<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>sid</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name><name>curves</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{ <expr><name>BR_EC_sect163k1</name></expr>,
	  <expr><literal type="string">"sect163k1"</literal></expr>,
	  <expr><block>{ <expr><literal type="string">"sect163k1"</literal></expr>, <expr><literal type="string">"K-163"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr>,
	<expr><block>{ <expr><name>BR_EC_sect163r1</name></expr>,
	  <expr><literal type="string">"sect163r1"</literal></expr>,
	  <expr><block>{ <expr><literal type="string">"sect163r1"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr>,
	<expr><block>{ <expr><name>BR_EC_sect163r2</name></expr>,
	  <expr><literal type="string">"sect163r2"</literal></expr>,
	  <expr><block>{ <expr><literal type="string">"sect163r2"</literal></expr>, <expr><literal type="string">"B-163"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr>,
	<expr><block>{ <expr><name>BR_EC_sect193r1</name></expr>,
	  <expr><literal type="string">"sect193r1"</literal></expr>,
	  <expr><block>{ <expr><literal type="string">"sect193r1"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr>,
	<expr><block>{ <expr><name>BR_EC_sect193r2</name></expr>,
	  <expr><literal type="string">"sect193r2"</literal></expr>,
	  <expr><block>{ <expr><literal type="string">"sect193r2"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr>,
	<expr><block>{ <expr><name>BR_EC_sect233k1</name></expr>,
	  <expr><literal type="string">"sect233k1"</literal></expr>,
	  <expr><block>{ <expr><literal type="string">"sect233k1"</literal></expr>, <expr><literal type="string">"K-233"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr>,
	<expr><block>{ <expr><name>BR_EC_sect233r1</name></expr>,
	  <expr><literal type="string">"sect233r1"</literal></expr>,
	  <expr><block>{ <expr><literal type="string">"sect233r1"</literal></expr>, <expr><literal type="string">"B-233"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr>,
	<expr><block>{ <expr><name>BR_EC_sect239k1</name></expr>,
	  <expr><literal type="string">"sect239k1"</literal></expr>,
	  <expr><block>{ <expr><literal type="string">"sect239k1"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr>,
	<expr><block>{ <expr><name>BR_EC_sect283k1</name></expr>,
	  <expr><literal type="string">"sect283k1"</literal></expr>,
	  <expr><block>{ <expr><literal type="string">"sect283k1"</literal></expr>, <expr><literal type="string">"K-283"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr>,
	<expr><block>{ <expr><name>BR_EC_sect283r1</name></expr>,
	  <expr><literal type="string">"sect283r1"</literal></expr>,
	  <expr><block>{ <expr><literal type="string">"sect283r1"</literal></expr>, <expr><literal type="string">"B-283"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr>,
	<expr><block>{ <expr><name>BR_EC_sect409k1</name></expr>,
	  <expr><literal type="string">"sect409k1"</literal></expr>,
	  <expr><block>{ <expr><literal type="string">"sect409k1"</literal></expr>, <expr><literal type="string">"K-409"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr>,
	<expr><block>{ <expr><name>BR_EC_sect409r1</name></expr>,
	  <expr><literal type="string">"sect409r1"</literal></expr>,
	  <expr><block>{ <expr><literal type="string">"sect409r1"</literal></expr>, <expr><literal type="string">"B-409"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr>,
	<expr><block>{ <expr><name>BR_EC_sect571k1</name></expr>,
	  <expr><literal type="string">"sect571k1"</literal></expr>,
	  <expr><block>{ <expr><literal type="string">"sect571k1"</literal></expr>, <expr><literal type="string">"K-571"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr>,
	<expr><block>{ <expr><name>BR_EC_sect571r1</name></expr>,
	  <expr><literal type="string">"sect571r1"</literal></expr>,
	  <expr><block>{ <expr><literal type="string">"sect571r1"</literal></expr>, <expr><literal type="string">"B-571"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr>,
	<expr><block>{ <expr><name>BR_EC_secp160k1</name></expr>,
	  <expr><literal type="string">"secp160k1"</literal></expr>,
	  <expr><block>{ <expr><literal type="string">"secp160k1"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr>,
	<expr><block>{ <expr><name>BR_EC_secp160r1</name></expr>,
	  <expr><literal type="string">"secp160r1"</literal></expr>,
	  <expr><block>{ <expr><literal type="string">"secp160r1"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr>,
	<expr><block>{ <expr><name>BR_EC_secp160r2</name></expr>,
	  <expr><literal type="string">"secp160r2"</literal></expr>,
	  <expr><block>{ <expr><literal type="string">"secp160r2"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr>,
	<expr><block>{ <expr><name>BR_EC_secp192k1</name></expr>,
	  <expr><literal type="string">"secp192k1"</literal></expr>,
	  <expr><block>{ <expr><literal type="string">"secp192k1"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr>,
	<expr><block>{ <expr><name>BR_EC_secp192r1</name></expr>,
	  <expr><literal type="string">"secp192r1"</literal></expr>,
	  <expr><block>{ <expr><literal type="string">"secp192r1"</literal></expr>, <expr><literal type="string">"P-192"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr>,
	<expr><block>{ <expr><name>BR_EC_secp224k1</name></expr>,
	  <expr><literal type="string">"secp224k1"</literal></expr>,
	  <expr><block>{ <expr><literal type="string">"secp224k1"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr>,
	<expr><block>{ <expr><name>BR_EC_secp224r1</name></expr>,
	  <expr><literal type="string">"secp224r1"</literal></expr>,
	  <expr><block>{ <expr><literal type="string">"secp224r1"</literal></expr>, <expr><literal type="string">"P-224"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr>,
	<expr><block>{ <expr><name>BR_EC_secp256k1</name></expr>,
	  <expr><literal type="string">"secp256k1"</literal></expr>,
	  <expr><block>{ <expr><literal type="string">"secp256k1"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr>,
	<expr><block>{ <expr><name>BR_EC_secp256r1</name></expr>,
	  <expr><literal type="string">"secp256r1 (P-256)"</literal></expr>,
	  <expr><block>{ <expr><literal type="string">"secp256r1"</literal></expr>, <expr><literal type="string">"P-256"</literal></expr>, <expr><literal type="string">"prime256v1"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr>,
	<expr><block>{ <expr><name>BR_EC_secp384r1</name></expr>,
	  <expr><literal type="string">"secp384r1 (P-384)"</literal></expr>,
	  <expr><block>{ <expr><literal type="string">"secp384r1"</literal></expr>, <expr><literal type="string">"P-384"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr>,
	<expr><block>{ <expr><name>BR_EC_secp521r1</name></expr>,
	  <expr><literal type="string">"secp521r1 (P-521)"</literal></expr>,
	  <expr><block>{ <expr><literal type="string">"secp521r1"</literal></expr>, <expr><literal type="string">"P-521"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr>,
	<expr><block>{ <expr><name>BR_EC_brainpoolP256r1</name></expr>,
	  <expr><literal type="string">"brainpoolP256r1"</literal></expr>,
	  <expr><block>{ <expr><literal type="string">"brainpoolP256r1"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr>,
	<expr><block>{ <expr><name>BR_EC_brainpoolP384r1</name></expr>,
	  <expr><literal type="string">"brainpoolP384r1"</literal></expr>,
	  <expr><block>{ <expr><literal type="string">"brainpoolP384r1"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr>,
	<expr><block>{ <expr><name>BR_EC_brainpoolP512r1</name></expr>,
	  <expr><literal type="string">"brainpoolP512r1"</literal></expr>,
	  <expr><block>{ <expr><literal type="string">"brainpoolP512r1"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr>,
	<expr><block>{ <expr><name>BR_EC_curve25519</name></expr>,
	  <expr><literal type="string">"Curve25519"</literal></expr>,
	  <expr><block>{ <expr><literal type="string">"curve25519"</literal></expr>, <expr><literal type="string">"c25519"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr>,
	<expr><block>{ <expr><name>BR_EC_curve448</name></expr>,
	  <expr><literal type="string">"Curve448"</literal></expr>,
	  <expr><block>{ <expr><literal type="string">"curve448"</literal></expr>, <expr><literal type="string">"c448"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr>
}</block></expr></init></decl>;</struct>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>long_name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>short_name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>impl</name></decl>;</decl_stmt>
}</block> <decl><name><name>algo_names</name><index>[]</index></name> <init>= <expr><block>{
	<comment type="block">/* Block ciphers */</comment>
	<expr><block>{ <expr><literal type="string">"aes_big_cbcenc"</literal></expr>,    <expr><literal type="string">"big"</literal></expr>,         <expr><operator>&amp;</operator><name>br_aes_big_cbcenc_vtable</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"aes_big_cbcdec"</literal></expr>,    <expr><literal type="string">"big"</literal></expr>,         <expr><operator>&amp;</operator><name>br_aes_big_cbcdec_vtable</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"aes_big_ctr"</literal></expr>,       <expr><literal type="string">"big"</literal></expr>,         <expr><operator>&amp;</operator><name>br_aes_big_ctr_vtable</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"aes_big_ctrcbc"</literal></expr>,    <expr><literal type="string">"big"</literal></expr>,         <expr><operator>&amp;</operator><name>br_aes_big_ctrcbc_vtable</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"aes_small_cbcenc"</literal></expr>,  <expr><literal type="string">"small"</literal></expr>,       <expr><operator>&amp;</operator><name>br_aes_small_cbcenc_vtable</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"aes_small_cbcdec"</literal></expr>,  <expr><literal type="string">"small"</literal></expr>,       <expr><operator>&amp;</operator><name>br_aes_small_cbcdec_vtable</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"aes_small_ctr"</literal></expr>,     <expr><literal type="string">"small"</literal></expr>,       <expr><operator>&amp;</operator><name>br_aes_small_ctr_vtable</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"aes_small_ctrcbc"</literal></expr>,  <expr><literal type="string">"small"</literal></expr>,       <expr><operator>&amp;</operator><name>br_aes_small_ctrcbc_vtable</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"aes_ct_cbcenc"</literal></expr>,     <expr><literal type="string">"ct"</literal></expr>,          <expr><operator>&amp;</operator><name>br_aes_ct_cbcenc_vtable</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"aes_ct_cbcdec"</literal></expr>,     <expr><literal type="string">"ct"</literal></expr>,          <expr><operator>&amp;</operator><name>br_aes_ct_cbcdec_vtable</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"aes_ct_ctr"</literal></expr>,        <expr><literal type="string">"ct"</literal></expr>,          <expr><operator>&amp;</operator><name>br_aes_ct_ctr_vtable</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"aes_ct_ctrcbc"</literal></expr>,     <expr><literal type="string">"ct"</literal></expr>,          <expr><operator>&amp;</operator><name>br_aes_ct_ctrcbc_vtable</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"aes_ct64_cbcenc"</literal></expr>,   <expr><literal type="string">"ct64"</literal></expr>,        <expr><operator>&amp;</operator><name>br_aes_ct64_cbcenc_vtable</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"aes_ct64_cbcdec"</literal></expr>,   <expr><literal type="string">"ct64"</literal></expr>,        <expr><operator>&amp;</operator><name>br_aes_ct64_cbcdec_vtable</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"aes_ct64_ctr"</literal></expr>,      <expr><literal type="string">"ct64"</literal></expr>,        <expr><operator>&amp;</operator><name>br_aes_ct64_ctr_vtable</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"aes_ct64_ctrcbc"</literal></expr>,   <expr><literal type="string">"ct64"</literal></expr>,        <expr><operator>&amp;</operator><name>br_aes_ct64_ctrcbc_vtable</name></expr> }</block></expr>,

	<expr><block>{ <expr><literal type="string">"des_tab_cbcenc"</literal></expr>,    <expr><literal type="string">"tab"</literal></expr>,         <expr><operator>&amp;</operator><name>br_des_tab_cbcenc_vtable</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"des_tab_cbcdec"</literal></expr>,    <expr><literal type="string">"tab"</literal></expr>,         <expr><operator>&amp;</operator><name>br_des_tab_cbcdec_vtable</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"des_ct_cbcenc"</literal></expr>,     <expr><literal type="string">"ct"</literal></expr>,          <expr><operator>&amp;</operator><name>br_des_ct_cbcenc_vtable</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"des_ct_cbcdec"</literal></expr>,     <expr><literal type="string">"ct"</literal></expr>,          <expr><operator>&amp;</operator><name>br_des_ct_cbcdec_vtable</name></expr> }</block></expr>,

	<expr><block>{ <expr><literal type="string">"chacha20_ct"</literal></expr>,       <expr><literal type="string">"ct"</literal></expr>,          <expr><operator>&amp;</operator><name>br_chacha20_ct_run</name></expr> }</block></expr>,

	<expr><block>{ <expr><literal type="string">"ghash_ctmul"</literal></expr>,       <expr><literal type="string">"ctmul"</literal></expr>,       <expr><operator>&amp;</operator><name>br_ghash_ctmul</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"ghash_ctmul32"</literal></expr>,     <expr><literal type="string">"ctmul32"</literal></expr>,     <expr><operator>&amp;</operator><name>br_ghash_ctmul32</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"ghash_ctmul64"</literal></expr>,     <expr><literal type="string">"ctmul64"</literal></expr>,     <expr><operator>&amp;</operator><name>br_ghash_ctmul64</name></expr> }</block></expr>,

	<expr><block>{ <expr><literal type="string">"poly1305_ctmul"</literal></expr>,    <expr><literal type="string">"ctmul"</literal></expr>,       <expr><operator>&amp;</operator><name>br_poly1305_ctmul_run</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"poly1305_ctmul32"</literal></expr>,  <expr><literal type="string">"ctmul32"</literal></expr>,     <expr><operator>&amp;</operator><name>br_poly1305_ctmul32_run</name></expr> }</block></expr>,

	<expr><block>{ <expr><literal type="string">"ec_all_m15"</literal></expr>,        <expr><literal type="string">"all_m15"</literal></expr>,     <expr><operator>&amp;</operator><name>br_ec_all_m15</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"ec_all_m31"</literal></expr>,        <expr><literal type="string">"all_m31"</literal></expr>,     <expr><operator>&amp;</operator><name>br_ec_all_m31</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"ec_c25519_i15"</literal></expr>,     <expr><literal type="string">"c25519_i15"</literal></expr>,  <expr><operator>&amp;</operator><name>br_ec_c25519_i15</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"ec_c25519_i31"</literal></expr>,     <expr><literal type="string">"c25519_i31"</literal></expr>,  <expr><operator>&amp;</operator><name>br_ec_c25519_i31</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"ec_c25519_m15"</literal></expr>,     <expr><literal type="string">"c25519_m15"</literal></expr>,  <expr><operator>&amp;</operator><name>br_ec_c25519_m15</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"ec_c25519_m31"</literal></expr>,     <expr><literal type="string">"c25519_m31"</literal></expr>,  <expr><operator>&amp;</operator><name>br_ec_c25519_m31</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"ec_p256_m15"</literal></expr>,       <expr><literal type="string">"p256_m15"</literal></expr>,    <expr><operator>&amp;</operator><name>br_ec_p256_m15</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"ec_p256_m31"</literal></expr>,       <expr><literal type="string">"p256_m31"</literal></expr>,    <expr><operator>&amp;</operator><name>br_ec_p256_m31</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"ec_prime_i15"</literal></expr>,      <expr><literal type="string">"prime_i15"</literal></expr>,   <expr><operator>&amp;</operator><name>br_ec_prime_i15</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"ec_prime_i31"</literal></expr>,      <expr><literal type="string">"prime_i31"</literal></expr>,   <expr><operator>&amp;</operator><name>br_ec_prime_i31</name></expr> }</block></expr>,

	<expr><block>{ <expr><literal type="string">"ecdsa_i15_sign_asn1"</literal></expr>,  <expr><literal type="string">"i15_asn1"</literal></expr>,  <expr><operator>&amp;</operator><name>br_ecdsa_i15_sign_asn1</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"ecdsa_i15_sign_raw"</literal></expr>,   <expr><literal type="string">"i15_raw"</literal></expr>,   <expr><operator>&amp;</operator><name>br_ecdsa_i15_sign_raw</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"ecdsa_i31_sign_asn1"</literal></expr>,  <expr><literal type="string">"i31_asn1"</literal></expr>,  <expr><operator>&amp;</operator><name>br_ecdsa_i31_sign_asn1</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"ecdsa_i31_sign_raw"</literal></expr>,   <expr><literal type="string">"i31_raw"</literal></expr>,   <expr><operator>&amp;</operator><name>br_ecdsa_i31_sign_raw</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"ecdsa_i15_vrfy_asn1"</literal></expr>,  <expr><literal type="string">"i15_asn1"</literal></expr>,  <expr><operator>&amp;</operator><name>br_ecdsa_i15_vrfy_asn1</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"ecdsa_i15_vrfy_raw"</literal></expr>,   <expr><literal type="string">"i15_raw"</literal></expr>,   <expr><operator>&amp;</operator><name>br_ecdsa_i15_vrfy_raw</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"ecdsa_i31_vrfy_asn1"</literal></expr>,  <expr><literal type="string">"i31_asn1"</literal></expr>,  <expr><operator>&amp;</operator><name>br_ecdsa_i31_vrfy_asn1</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"ecdsa_i31_vrfy_raw"</literal></expr>,   <expr><literal type="string">"i31_raw"</literal></expr>,   <expr><operator>&amp;</operator><name>br_ecdsa_i31_vrfy_raw</name></expr> }</block></expr>,

	<expr><block>{ <expr><literal type="string">"rsa_i15_pkcs1_sign"</literal></expr>,   <expr><literal type="string">"i15"</literal></expr>,       <expr><operator>&amp;</operator><name>br_rsa_i15_pkcs1_sign</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"rsa_i31_pkcs1_sign"</literal></expr>,   <expr><literal type="string">"i31"</literal></expr>,       <expr><operator>&amp;</operator><name>br_rsa_i31_pkcs1_sign</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"rsa_i32_pkcs1_sign"</literal></expr>,   <expr><literal type="string">"i32"</literal></expr>,       <expr><operator>&amp;</operator><name>br_rsa_i32_pkcs1_sign</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"rsa_i15_pkcs1_vrfy"</literal></expr>,   <expr><literal type="string">"i15"</literal></expr>,       <expr><operator>&amp;</operator><name>br_rsa_i15_pkcs1_vrfy</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"rsa_i31_pkcs1_vrfy"</literal></expr>,   <expr><literal type="string">"i31"</literal></expr>,       <expr><operator>&amp;</operator><name>br_rsa_i31_pkcs1_vrfy</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"rsa_i32_pkcs1_vrfy"</literal></expr>,   <expr><literal type="string">"i32"</literal></expr>,       <expr><operator>&amp;</operator><name>br_rsa_i32_pkcs1_vrfy</name></expr> }</block></expr>,

	<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>
}</block></expr></init></decl>;</struct>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>long_name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>short_name</name></decl>;</decl_stmt>
	<function_decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>get</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
}</block> <decl><name><name>algo_names_dyn</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{ <expr><literal type="string">"aes_pwr8_cbcenc"</literal></expr>,      <expr><literal type="string">"pwr8"</literal></expr>,
		<expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><call>(<modifier>*</modifier>)<argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call><operator>)</operator><operator>&amp;</operator><name>br_aes_pwr8_cbcenc_get_vtable</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"aes_pwr8_cbcdec"</literal></expr>,      <expr><literal type="string">"pwr8"</literal></expr>,
		<expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><call>(<modifier>*</modifier>)<argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call><operator>)</operator><operator>&amp;</operator><name>br_aes_pwr8_cbcdec_get_vtable</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"aes_pwr8_ctr"</literal></expr>,         <expr><literal type="string">"pwr8"</literal></expr>,
		<expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><call>(<modifier>*</modifier>)<argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call><operator>)</operator><operator>&amp;</operator><name>br_aes_pwr8_ctr_get_vtable</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"aes_pwr8_ctrcbc"</literal></expr>,      <expr><literal type="string">"pwr8"</literal></expr>,
		<expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><call>(<modifier>*</modifier>)<argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call><operator>)</operator><operator>&amp;</operator><name>br_aes_pwr8_ctrcbc_get_vtable</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"aes_x86ni_cbcenc"</literal></expr>,     <expr><literal type="string">"x86ni"</literal></expr>,
		<expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><call>(<modifier>*</modifier>)<argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call><operator>)</operator><operator>&amp;</operator><name>br_aes_x86ni_cbcenc_get_vtable</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"aes_x86ni_cbcdec"</literal></expr>,     <expr><literal type="string">"x86ni"</literal></expr>,
		<expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><call>(<modifier>*</modifier>)<argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call><operator>)</operator><operator>&amp;</operator><name>br_aes_x86ni_cbcdec_get_vtable</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"aes_x86ni_ctr"</literal></expr>,        <expr><literal type="string">"x86ni"</literal></expr>,
		<expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><call>(<modifier>*</modifier>)<argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call><operator>)</operator><operator>&amp;</operator><name>br_aes_x86ni_ctr_get_vtable</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"aes_x86ni_ctrcbc"</literal></expr>,     <expr><literal type="string">"x86ni"</literal></expr>,
		<expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><call>(<modifier>*</modifier>)<argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call><operator>)</operator><operator>&amp;</operator><name>br_aes_x86ni_ctrcbc_get_vtable</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"chacha20_sse2"</literal></expr>,        <expr><literal type="string">"sse2"</literal></expr>,
		<expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><call>(<modifier>*</modifier>)<argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call><operator>)</operator><operator>&amp;</operator><name>br_chacha20_sse2_get</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"ghash_pclmul"</literal></expr>,         <expr><literal type="string">"pclmul"</literal></expr>,
		<expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><call>(<modifier>*</modifier>)<argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call><operator>)</operator><operator>&amp;</operator><name>br_ghash_pclmul_get</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"ghash_pwr8"</literal></expr>,           <expr><literal type="string">"pwr8"</literal></expr>,
		<expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><call>(<modifier>*</modifier>)<argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call><operator>)</operator><operator>&amp;</operator><name>br_ghash_pwr8_get</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"poly1305_ctmulq"</literal></expr>,      <expr><literal type="string">"ctmulq"</literal></expr>,
		<expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><call>(<modifier>*</modifier>)<argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call><operator>)</operator><operator>&amp;</operator><name>br_poly1305_ctmulq_get</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"rsa_i62_pkcs1_sign"</literal></expr>,   <expr><literal type="string">"i62"</literal></expr>,
		<expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><call>(<modifier>*</modifier>)<argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call><operator>)</operator><operator>&amp;</operator><name>br_rsa_i62_pkcs1_sign_get</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"rsa_i62_pkcs1_vrfy"</literal></expr>,   <expr><literal type="string">"i62"</literal></expr>,
		<expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><call>(<modifier>*</modifier>)<argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call><operator>)</operator><operator>&amp;</operator><name>br_rsa_i62_pkcs1_vrfy_get</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"ec_c25519_m62"</literal></expr>,        <expr><literal type="string">"m62"</literal></expr>,
		<expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><call>(<modifier>*</modifier>)<argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call><operator>)</operator><operator>&amp;</operator><name>br_ec_c25519_m62_get</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"ec_c25519_m64"</literal></expr>,        <expr><literal type="string">"m64"</literal></expr>,
		<expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><call>(<modifier>*</modifier>)<argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call><operator>)</operator><operator>&amp;</operator><name>br_ec_c25519_m64_get</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"ec_p256_m62"</literal></expr>,          <expr><literal type="string">"m62"</literal></expr>,
		<expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><call>(<modifier>*</modifier>)<argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call><operator>)</operator><operator>&amp;</operator><name>br_ec_p256_m62_get</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"ec_p256_m64"</literal></expr>,          <expr><literal type="string">"m64"</literal></expr>,
		<expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><call>(<modifier>*</modifier>)<argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call><operator>)</operator><operator>&amp;</operator><name>br_ec_p256_m64_get</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, }</block></expr>
}</block></expr></init></decl>;</struct>

<comment type="block">/* see brssl.h */</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>get_algo_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>impl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>long_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>algo_names</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>long_name</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>impl</name> <operator>==</operator> <name><name>algo_names</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>impl</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><ternary><condition><expr><name>long_name</name></expr>
				?</condition><then> <expr><name><name>algo_names</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>long_name</name></expr>
				</then><else>: <expr><name><name>algo_names</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>short_name</name></expr></else></ternary></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>algo_names_dyn</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>long_name</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>impl</name> <operator>==</operator> <name><name>algo_names_dyn</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
			<return>return <expr><ternary><condition><expr><name>long_name</name></expr>
				?</condition><then> <expr><name><name>algo_names_dyn</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>long_name</name></expr>
				</then><else>: <expr><name><name>algo_names_dyn</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>short_name</name></expr></else></ternary></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<return>return <expr><literal type="string">"UNKNOWN"</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* see brssl.h */</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>get_curve_name</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>curves</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>curves</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>==</operator> <name>id</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><name><name>curves</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* see brssl.h */</comment>
<function><type><name>int</name></type>
<name>get_curve_name_ext</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>get_curve_name</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"unknown (%d)"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>name</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* see brssl.h */</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>get_suite_name</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>suite</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>cipher_suites</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>cipher_suites</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>suite</name> <operator>==</operator> <name>suite</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><name><name>cipher_suites</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* see brssl.h */</comment>
<function><type><name>int</name></type>
<name>get_suite_name_ext</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>suite</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>get_suite_name</name><argument_list>(<argument><expr><name>suite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"unknown (0x%04X)"</literal></expr></argument>, <argument><expr><name>suite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>name</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* see brssl.h */</comment>
<function><type><name>int</name></type>
<name>uses_ecdhe</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>suite</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>cipher_suites</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>cipher_suites</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>suite</name> <operator>==</operator> <name>suite</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><operator>(</operator><name><name>cipher_suites</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>req</name>
				<operator>&amp;</operator> <operator>(</operator><name>REQ_ECDHE_RSA</name> <operator>|</operator> <name>REQ_ECDHE_ECDSA</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* see brssl.h */</comment>
<function><type><name>void</name></type>
<name>list_names</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Protocol versions:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>protocol_versions</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"   %-8s %s\n"</literal></expr></argument>,
			<argument><expr><name><name>protocol_versions</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>,
			<argument><expr><name><name>protocol_versions</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Hash functions:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>hash_functions</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"   %-8s %s\n"</literal></expr></argument>,
			<argument><expr><name><name>hash_functions</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>,
			<argument><expr><name><name>hash_functions</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Cipher suites:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>cipher_suites</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"   %s\n        %s\n"</literal></expr></argument>,
			<argument><expr><name><name>cipher_suites</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>,
			<argument><expr><name><name>cipher_suites</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/* see brssl.h */</comment>
<function><type><name>void</name></type>
<name>list_curves</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>curves</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>size_t</name></type> <name>v</name></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>curves</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name><name>sid</name><index>[<expr><name>v</name></expr>]</index></name></expr>;</condition> <incr><expr><name>v</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"   "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>v</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" ("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>curves</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name><name>sid</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>is_ign</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;=</operator> <literal type="number">32</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'_'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'.'</literal>
		<operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'/'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'+'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Get next non-ignored character, normalised:
 *    ASCII letters are converted to lowercase
 *    control characters, space, '-', '_', '.', '/', '+' and ':' are ignored
 * A terminating zero is returned as 0.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>next_char</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ps</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ps</name> <operator>==</operator> <name>limit</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>ps</name><operator>)</operator> <operator>++</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>c</name> <operator>+=</operator> <literal type="char">'a'</literal> <operator>-</operator> <literal type="char">'A'</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_ign</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>c</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
 * Partial string equality comparison, with normalisation.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>eqstr_chunk</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>s1_len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>s2_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lim1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>lim2</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>lim1</name> <operator>=</operator> <name>s1</name> <operator>+</operator> <name>s1_len</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>lim2</name> <operator>=</operator> <name>s2</name> <operator>+</operator> <name>s2_len</name></expr>;</expr_stmt>
	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>c1</name> <operator>=</operator> <call><name>next_char</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s1</name></expr></argument>, <argument><expr><name>lim1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>c2</name> <operator>=</operator> <call><name>next_char</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s2</name></expr></argument>, <argument><expr><name>lim2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>!=</operator> <name>c2</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/* see brssl.h */</comment>
<function><type><name>int</name></type>
<name>eqstr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>eqstr_chunk</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>hexval</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'F'</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>c</name> <operator>-</operator> <literal type="char">'A'</literal> <operator>+</operator> <literal type="number">10</literal></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'f'</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>c</name> <operator>-</operator> <literal type="char">'a'</literal> <operator>+</operator> <literal type="number">10</literal></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* see brssl.h */</comment>
<function><type><name>size_t</name></type>
<name>parse_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>radix</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>acc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>t</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'x'</literal> <operator>||</operator> <name><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'X'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>radix</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>radix</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name>acc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>size_t</name></type> <name>z</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>t</name> <operator>++</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>acc</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>hexval</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>d</name> <operator>&gt;=</operator> <name>radix</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: not a valid digit: '%c'\n"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>z</name> <operator>=</operator> <name>acc</name> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>radix</name> <operator>+</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>d</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>z</name> <operator>&lt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>d</name> <operator>||</operator> <operator>(</operator><name>z</name> <operator>/</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>radix</name><operator>)</operator> <operator>!=</operator> <name>acc</name>
			<operator>||</operator> <name>z</name> <operator>==</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: value too large: %s\n"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>acc</name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
 * Comma-separated list enumeration. This returns a pointer to the first
 * word in the string, skipping leading ignored characters. '*len' is
 * set to the word length (not counting trailing ignored characters).
 * '*str' is updated to point to immediately after the next comma, or to
 * the terminating zero, whichever comes first.
 *
 * Empty words are skipped. If there is no next non-empty word, then this
 * function returns NULL and sets *len to 0.
 */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>next_word</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>begin</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Find next non-ignored character which is not a comma.
	 */</comment>
	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
		<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>*</operator><name>str</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<return>return <expr><name>NULL</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_ign</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><operator>(</operator><operator>*</operator><name>str</name><operator>)</operator> <operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/*
	 * Find next comma or terminator.
	 */</comment>
	<expr_stmt><expr><name>begin</name> <operator>=</operator> <operator>*</operator><name>str</name></expr>;</expr_stmt>
	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
		<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>str</name><operator>)</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><operator>(</operator><operator>*</operator><name>str</name><operator>)</operator> <operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/*
	 * Remove trailing ignored characters.
	 */</comment>
	<expr_stmt><expr><name>u</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>str</name> <operator>-</operator> <name>begin</name><operator>)</operator></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>u</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>is_ign</name><argument_list>(<argument><expr><name><name>begin</name><index>[<expr><name>u</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>u</name> <operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>(</operator><operator>*</operator><name>str</name><operator>)</operator> <operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>
	<return>return <expr><name>begin</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* see brssl.h */</comment>
<function><type><name>unsigned</name></type>
<name>parse_version</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init><condition>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ref</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>ref</name> <operator>=</operator> <name><name>protocol_versions</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ref</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: unrecognised protocol"</literal>
				<literal type="string">" version name: '%s'\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>eqstr_chunk</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<return>return <expr><name><name>protocol_versions</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>version</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/* see brssl.h */</comment>
<function><type><name>unsigned</name></type>
<name>parse_hash_functions</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>r</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>next_word</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init><condition>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ref</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>ref</name> <operator>=</operator> <name><name>hash_functions</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>ref</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: unrecognised"</literal>
					<literal type="string">" hash function name: '"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"'\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><literal type="number">0</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>eqstr_chunk</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>id</name> <operator>=</operator> <operator>(</operator><name><name>hash_functions</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name><name>hclass</name><operator>-&gt;</operator><name>desc</name></name>
					<operator>&gt;&gt;</operator> <name>BR_HASHDESC_ID_OFF</name><operator>)</operator>
					<operator>&amp;</operator> <name>BR_HASHDESC_ID_MASK</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>r</name> <operator>|=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>id</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></for>
	<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: no hash function name provided\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* see brssl.h */</comment>
<function><type><name>cipher_suite</name> <modifier>*</modifier></type>
<name>parse_suites</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<macro><name>VECTOR</name><argument_list>(<argument>cipher_suite</argument>)</argument_list></macro> <expr_stmt><expr><name>suites</name> <operator>=</operator> <name>VEC_INIT</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>cipher_suite</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>

	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>next_word</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init><condition>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ref</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>ref</name> <operator>=</operator> <name><name>cipher_suites</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>ref</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: unrecognised"</literal>
					<literal type="string">" cipher suite '"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"'\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><literal type="number">0</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>eqstr_chunk</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>VEC_ADD</name><argument_list>(<argument><expr><name>suites</name></expr></argument>, <argument><expr><name><name>cipher_suites</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></for>
	<if_stmt><if>if <condition>(<expr><call><name>VEC_LEN</name><argument_list>(<argument><expr><name>suites</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: no cipher suite provided\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>VEC_TOARRAY</name><argument_list>(<argument><expr><name>suites</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <call><name>VEC_LEN</name><argument_list>(<argument><expr><name>suites</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>VEC_CLEAR</name><argument_list>(<argument><expr><name>suites</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* see brssl.h */</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>ec_curve_name</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>curve</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>curve</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>BR_EC_sect163k1</name></expr>:</case>        <return>return <expr><literal type="string">"sect163k1"</literal></expr>;</return>
	<case>case <expr><name>BR_EC_sect163r1</name></expr>:</case>        <return>return <expr><literal type="string">"sect163r1"</literal></expr>;</return>
	<case>case <expr><name>BR_EC_sect163r2</name></expr>:</case>        <return>return <expr><literal type="string">"sect163r2"</literal></expr>;</return>
	<case>case <expr><name>BR_EC_sect193r1</name></expr>:</case>        <return>return <expr><literal type="string">"sect193r1"</literal></expr>;</return>
	<case>case <expr><name>BR_EC_sect193r2</name></expr>:</case>        <return>return <expr><literal type="string">"sect193r2"</literal></expr>;</return>
	<case>case <expr><name>BR_EC_sect233k1</name></expr>:</case>        <return>return <expr><literal type="string">"sect233k1"</literal></expr>;</return>
	<case>case <expr><name>BR_EC_sect233r1</name></expr>:</case>        <return>return <expr><literal type="string">"sect233r1"</literal></expr>;</return>
	<case>case <expr><name>BR_EC_sect239k1</name></expr>:</case>        <return>return <expr><literal type="string">"sect239k1"</literal></expr>;</return>
	<case>case <expr><name>BR_EC_sect283k1</name></expr>:</case>        <return>return <expr><literal type="string">"sect283k1"</literal></expr>;</return>
	<case>case <expr><name>BR_EC_sect283r1</name></expr>:</case>        <return>return <expr><literal type="string">"sect283r1"</literal></expr>;</return>
	<case>case <expr><name>BR_EC_sect409k1</name></expr>:</case>        <return>return <expr><literal type="string">"sect409k1"</literal></expr>;</return>
	<case>case <expr><name>BR_EC_sect409r1</name></expr>:</case>        <return>return <expr><literal type="string">"sect409r1"</literal></expr>;</return>
	<case>case <expr><name>BR_EC_sect571k1</name></expr>:</case>        <return>return <expr><literal type="string">"sect571k1"</literal></expr>;</return>
	<case>case <expr><name>BR_EC_sect571r1</name></expr>:</case>        <return>return <expr><literal type="string">"sect571r1"</literal></expr>;</return>
	<case>case <expr><name>BR_EC_secp160k1</name></expr>:</case>        <return>return <expr><literal type="string">"secp160k1"</literal></expr>;</return>
	<case>case <expr><name>BR_EC_secp160r1</name></expr>:</case>        <return>return <expr><literal type="string">"secp160r1"</literal></expr>;</return>
	<case>case <expr><name>BR_EC_secp160r2</name></expr>:</case>        <return>return <expr><literal type="string">"secp160r2"</literal></expr>;</return>
	<case>case <expr><name>BR_EC_secp192k1</name></expr>:</case>        <return>return <expr><literal type="string">"secp192k1"</literal></expr>;</return>
	<case>case <expr><name>BR_EC_secp192r1</name></expr>:</case>        <return>return <expr><literal type="string">"secp192r1"</literal></expr>;</return>
	<case>case <expr><name>BR_EC_secp224k1</name></expr>:</case>        <return>return <expr><literal type="string">"secp224k1"</literal></expr>;</return>
	<case>case <expr><name>BR_EC_secp224r1</name></expr>:</case>        <return>return <expr><literal type="string">"secp224r1"</literal></expr>;</return>
	<case>case <expr><name>BR_EC_secp256k1</name></expr>:</case>        <return>return <expr><literal type="string">"secp256k1"</literal></expr>;</return>
	<case>case <expr><name>BR_EC_secp256r1</name></expr>:</case>        <return>return <expr><literal type="string">"secp256r1"</literal></expr>;</return>
	<case>case <expr><name>BR_EC_secp384r1</name></expr>:</case>        <return>return <expr><literal type="string">"secp384r1"</literal></expr>;</return>
	<case>case <expr><name>BR_EC_secp521r1</name></expr>:</case>        <return>return <expr><literal type="string">"secp521r1"</literal></expr>;</return>
	<case>case <expr><name>BR_EC_brainpoolP256r1</name></expr>:</case>  <return>return <expr><literal type="string">"brainpoolP256r1"</literal></expr>;</return>
	<case>case <expr><name>BR_EC_brainpoolP384r1</name></expr>:</case>  <return>return <expr><literal type="string">"brainpoolP384r1"</literal></expr>;</return>
	<case>case <expr><name>BR_EC_brainpoolP512r1</name></expr>:</case>  <return>return <expr><literal type="string">"brainpoolP512r1"</literal></expr>;</return>
	<default>default:</default>
		<return>return <expr><literal type="string">"unknown"</literal></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/* see brssl.h */</comment>
<function><type><name>int</name></type>
<name>get_curve_by_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>curves</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<for>for <control>(<init><expr><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>curves</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name><name>sid</name><index>[<expr><name>v</name></expr>]</index></name></expr>;</condition> <incr><expr><name>v</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>eqstr</name><argument_list>(<argument><expr><name><name>curves</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name><name>sid</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<return>return <expr><name><name>curves</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>id</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></for>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* see brssl.h */</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>hash_function_name</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>id</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>br_md5sha1_ID</name></expr>:</case>  <return>return <expr><literal type="string">"MD5+SHA-1"</literal></expr>;</return>
	<case>case <expr><name>br_md5_ID</name></expr>:</case>      <return>return <expr><literal type="string">"MD5"</literal></expr>;</return>
	<case>case <expr><name>br_sha1_ID</name></expr>:</case>     <return>return <expr><literal type="string">"SHA-1"</literal></expr>;</return>
	<case>case <expr><name>br_sha224_ID</name></expr>:</case>   <return>return <expr><literal type="string">"SHA-224"</literal></expr>;</return>
	<case>case <expr><name>br_sha256_ID</name></expr>:</case>   <return>return <expr><literal type="string">"SHA-256"</literal></expr>;</return>
	<case>case <expr><name>br_sha384_ID</name></expr>:</case>   <return>return <expr><literal type="string">"SHA-384"</literal></expr>;</return>
	<case>case <expr><name>br_sha512_ID</name></expr>:</case>   <return>return <expr><literal type="string">"SHA-512"</literal></expr>;</return>
	<default>default:</default>
		<return>return <expr><literal type="string">"unknown"</literal></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>
</unit>
