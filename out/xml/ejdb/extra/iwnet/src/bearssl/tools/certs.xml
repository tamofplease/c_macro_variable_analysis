<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/extra/iwnet/src/bearssl/tools/certs.c"><comment type="block">/*
 * Copyright (c) 2016 Thomas Pornin &lt;pornin@bolet.org&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"brssl.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dn_append</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>VEC_ADDMANY</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>bvector</name> <operator>*</operator><operator>)</operator><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>certificate_to_trust_anchor_inner</name><parameter_list>(<parameter><decl><type><name>br_x509_trust_anchor</name> <modifier>*</modifier></type><name>ta</name></decl></parameter>,
	<parameter><decl><type><name>br_x509_certificate</name> <modifier>*</modifier></type><name>xc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>br_x509_decoder_context</name></type> <name>dc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bvector</name></type> <name>vdn</name> <init>= <expr><name>VEC_INIT</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>br_x509_pkey</name> <modifier>*</modifier></type><name>pk</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>br_x509_decoder_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>, <argument><expr><name>dn_append</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vdn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_x509_decoder_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>, <argument><expr><name><name>xc</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>xc</name><operator>-&gt;</operator><name>data_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pk</name> <operator>=</operator> <call><name>br_x509_decoder_get_pkey</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>pk</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: CA decoding failed with error %d\n"</literal></expr></argument>,
			<argument><expr><call><name>br_x509_decoder_last_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>VEC_CLEAR</name><argument_list>(<argument><expr><name>vdn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>ta</name><operator>-&gt;</operator><name>dn</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>VEC_TOARRAY</name><argument_list>(<argument><expr><name>vdn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ta</name><operator>-&gt;</operator><name>dn</name><operator>.</operator><name>len</name></name> <operator>=</operator> <call><name>VEC_LEN</name><argument_list>(<argument><expr><name>vdn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>VEC_CLEAR</name><argument_list>(<argument><expr><name>vdn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ta</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>br_x509_decoder_isCA</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>ta</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>BR_X509_TA_CA</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<switch>switch <condition>(<expr><name><name>pk</name><operator>-&gt;</operator><name>key_type</name></name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>BR_KEYTYPE_RSA</name></expr>:</case>
		<expr_stmt><expr><name><name>ta</name><operator>-&gt;</operator><name>pkey</name><operator>.</operator><name>key_type</name></name> <operator>=</operator> <name>BR_KEYTYPE_RSA</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ta</name><operator>-&gt;</operator><name>pkey</name><operator>.</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name>xblobdup</name><argument_list>(<argument><expr><name><name>pk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>pk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>nlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ta</name><operator>-&gt;</operator><name>pkey</name><operator>.</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>nlen</name></name> <operator>=</operator> <name><name>pk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>nlen</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ta</name><operator>-&gt;</operator><name>pkey</name><operator>.</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>e</name></name> <operator>=</operator> <call><name>xblobdup</name><argument_list>(<argument><expr><name><name>pk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>e</name></name></expr></argument>, <argument><expr><name><name>pk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>elen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ta</name><operator>-&gt;</operator><name>pkey</name><operator>.</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>elen</name></name> <operator>=</operator> <name><name>pk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>elen</name></name></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>BR_KEYTYPE_EC</name></expr>:</case>
		<expr_stmt><expr><name><name>ta</name><operator>-&gt;</operator><name>pkey</name><operator>.</operator><name>key_type</name></name> <operator>=</operator> <name>BR_KEYTYPE_EC</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ta</name><operator>-&gt;</operator><name>pkey</name><operator>.</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>curve</name></name> <operator>=</operator> <name><name>pk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>curve</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ta</name><operator>-&gt;</operator><name>pkey</name><operator>.</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>q</name></name> <operator>=</operator> <call><name>xblobdup</name><argument_list>(<argument><expr><name><name>pk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>q</name></name></expr></argument>, <argument><expr><name><name>pk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>qlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ta</name><operator>-&gt;</operator><name>pkey</name><operator>.</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>qlen</name></name> <operator>=</operator> <name><name>pk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>qlen</name></name></expr>;</expr_stmt>
		<break>break;</break>
	<default>default:</default>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: unsupported public key type in CA\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>ta</name><operator>-&gt;</operator><name>dn</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></switch>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* see brssl.h */</comment>
<function><type><name>br_x509_trust_anchor</name> <modifier>*</modifier></type>
<name>certificate_to_trust_anchor</name><parameter_list>(<parameter><decl><type><name>br_x509_certificate</name> <modifier>*</modifier></type><name>xc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>br_x509_trust_anchor</name></type> <name>ta</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>certificate_to_trust_anchor_inner</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ta</name></expr></argument>, <argument><expr><name>xc</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<return>return <expr><call><name>xblobdup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ta</name></expr></argument>, <argument><expr><sizeof>sizeof <name>ta</name></sizeof></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* see brssl.h */</comment>
<function><type><name>void</name></type>
<name>free_ta_contents</name><parameter_list>(<parameter><decl><type><name>br_x509_trust_anchor</name> <modifier>*</modifier></type><name>ta</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>ta</name><operator>-&gt;</operator><name>dn</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<switch>switch <condition>(<expr><name><name>ta</name><operator>-&gt;</operator><name>pkey</name><operator>.</operator><name>key_type</name></name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>BR_KEYTYPE_RSA</name></expr>:</case>
		<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>ta</name><operator>-&gt;</operator><name>pkey</name><operator>.</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>ta</name><operator>-&gt;</operator><name>pkey</name><operator>.</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>e</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>BR_KEYTYPE_EC</name></expr>:</case>
		<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>ta</name><operator>-&gt;</operator><name>pkey</name><operator>.</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>q</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/* see brssl.h */</comment>
<function><type><name>size_t</name></type>
<name>read_trust_anchors</name><parameter_list>(<parameter><decl><type><name>anchor_list</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>br_x509_certificate</name> <modifier>*</modifier></type><name>xcs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>anchor_list</name></type> <name>tas</name> <init>= <expr><name>VEC_INIT</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>num</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>xcs</name> <operator>=</operator> <call><name>read_certificates</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>xcs</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>br_x509_trust_anchor</name></type> <name>ta</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>certificate_to_trust_anchor_inner</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>xcs</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>VEC_CLEAREXT</name><argument_list>(<argument><expr><name>tas</name></expr></argument>, <argument><expr><name>free_ta_contents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>free_certificates</name><argument_list>(<argument><expr><name>xcs</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>VEC_ADD</name><argument_list>(<argument><expr><name>tas</name></expr></argument>, <argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>VEC_ADDMANY</name><argument_list>(<argument><expr><operator>*</operator><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>VEC_ELT</name><argument_list>(<argument><expr><name>tas</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>VEC_CLEAR</name><argument_list>(<argument><expr><name>tas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free_certificates</name><argument_list>(<argument><expr><name>xcs</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>num</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>read_trust_anchors_data</name><parameter_list>(<parameter><decl><type><name>anchor_list</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>data_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>br_x509_certificate</name> <modifier>*</modifier></type><name>xcs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>anchor_list</name></type> <name>tas</name> <init>= <expr><name>VEC_INIT</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>num</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>xcs</name> <operator>=</operator> <call><name>read_certificates_data</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>data_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>xcs</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>br_x509_trust_anchor</name></type> <name>ta</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>certificate_to_trust_anchor_inner</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>xcs</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>VEC_CLEAREXT</name><argument_list>(<argument><expr><name>tas</name></expr></argument>, <argument><expr><name>free_ta_contents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>free_certificates</name><argument_list>(<argument><expr><name>xcs</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>VEC_ADD</name><argument_list>(<argument><expr><name>tas</name></expr></argument>, <argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>VEC_ADDMANY</name><argument_list>(<argument><expr><operator>*</operator><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>VEC_ELT</name><argument_list>(<argument><expr><name>tas</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>VEC_CLEAR</name><argument_list>(<argument><expr><name>tas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free_certificates</name><argument_list>(<argument><expr><name>xcs</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>num</name></expr>;</return>

</block_content>}</block></function>

<comment type="block">/* see brssl.h */</comment>
<function><type><name>int</name></type>
<name>get_cert_signer_algo</name><parameter_list>(<parameter><decl><type><name>br_x509_certificate</name> <modifier>*</modifier></type><name>xc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>br_x509_decoder_context</name></type> <name>dc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>br_x509_decoder_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_x509_decoder_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>, <argument><expr><name><name>xc</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>xc</name><operator>-&gt;</operator><name>data_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>br_x509_decoder_last_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
			<argument><expr><literal type="string">"ERROR: certificate decoding failed with error %d\n"</literal></expr></argument>,
			<argument><expr><operator>-</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><call><name>br_x509_decoder_get_signer_key_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>xwc_start_chain</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_x509_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>server_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>x509_noanchor_context</name> <modifier>*</modifier></type><name>xwc</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>xwc</name> <operator>=</operator> <operator>(</operator><name>x509_noanchor_context</name> <operator>*</operator><operator>)</operator><name>ctx</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name><name>xwc</name><operator>-&gt;</operator><name>inner</name></name><operator>)</operator><operator>-&gt;</operator><name>start_chain</name></name><argument_list>(<argument><expr><name><name>xwc</name><operator>-&gt;</operator><name>inner</name></name></expr></argument>, <argument><expr><name>server_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>xwc_start_cert</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_x509_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>x509_noanchor_context</name> <modifier>*</modifier></type><name>xwc</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>xwc</name> <operator>=</operator> <operator>(</operator><name>x509_noanchor_context</name> <operator>*</operator><operator>)</operator><name>ctx</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name><name>xwc</name><operator>-&gt;</operator><name>inner</name></name><operator>)</operator><operator>-&gt;</operator><name>start_cert</name></name><argument_list>(<argument><expr><name><name>xwc</name><operator>-&gt;</operator><name>inner</name></name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>xwc_append</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_x509_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>x509_noanchor_context</name> <modifier>*</modifier></type><name>xwc</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>xwc</name> <operator>=</operator> <operator>(</operator><name>x509_noanchor_context</name> <operator>*</operator><operator>)</operator><name>ctx</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name><name>xwc</name><operator>-&gt;</operator><name>inner</name></name><operator>)</operator><operator>-&gt;</operator><name>append</name></name><argument_list>(<argument><expr><name><name>xwc</name><operator>-&gt;</operator><name>inner</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>xwc_end_cert</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_x509_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>x509_noanchor_context</name> <modifier>*</modifier></type><name>xwc</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>xwc</name> <operator>=</operator> <operator>(</operator><name>x509_noanchor_context</name> <operator>*</operator><operator>)</operator><name>ctx</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name><name>xwc</name><operator>-&gt;</operator><name>inner</name></name><operator>)</operator><operator>-&gt;</operator><name>end_cert</name></name><argument_list>(<argument><expr><name><name>xwc</name><operator>-&gt;</operator><name>inner</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>xwc_end_chain</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_x509_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>x509_noanchor_context</name> <modifier>*</modifier></type><name>xwc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>r</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>xwc</name> <operator>=</operator> <operator>(</operator><name>x509_noanchor_context</name> <operator>*</operator><operator>)</operator><name>ctx</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name><name>xwc</name><operator>-&gt;</operator><name>inner</name></name><operator>)</operator><operator>-&gt;</operator><name>end_chain</name></name><argument_list>(<argument><expr><name><name>xwc</name><operator>-&gt;</operator><name>inner</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>BR_ERR_X509_NOT_TRUSTED</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>br_x509_pkey</name> <modifier>*</modifier></type>
<name>xwc_get_pkey</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_x509_class</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>usages</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>x509_noanchor_context</name> <modifier>*</modifier></type><name>xwc</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>xwc</name> <operator>=</operator> <operator>(</operator><name>x509_noanchor_context</name> <operator>*</operator><operator>)</operator><name>ctx</name></expr>;</expr_stmt>
	<return>return <expr><call><name><operator>(</operator><operator>*</operator><name><name>xwc</name><operator>-&gt;</operator><name>inner</name></name><operator>)</operator><operator>-&gt;</operator><name>get_pkey</name></name><argument_list>(<argument><expr><name><name>xwc</name><operator>-&gt;</operator><name>inner</name></name></expr></argument>, <argument><expr><name>usages</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* see brssl.h */</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_x509_class</name></type> <name>x509_noanchor_vtable</name> <init>= <expr><block>{
	<expr><sizeof>sizeof<argument_list>(<argument><expr><name>x509_noanchor_context</name></expr></argument>)</argument_list></sizeof></expr>,
	<expr><name>xwc_start_chain</name></expr>,
	<expr><name>xwc_start_cert</name></expr>,
	<expr><name>xwc_append</name></expr>,
	<expr><name>xwc_end_cert</name></expr>,
	<expr><name>xwc_end_chain</name></expr>,
	<expr><name>xwc_get_pkey</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* see brssl.h */</comment>
<function><type><name>void</name></type>
<name>x509_noanchor_init</name><parameter_list>(<parameter><decl><type><name>x509_noanchor_context</name> <modifier>*</modifier></type><name>xwc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>br_x509_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>inner</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>xwc</name><operator>-&gt;</operator><name>vtable</name></name> <operator>=</operator> <operator>&amp;</operator><name>x509_noanchor_vtable</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>xwc</name><operator>-&gt;</operator><name>inner</name></name> <operator>=</operator> <name>inner</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
