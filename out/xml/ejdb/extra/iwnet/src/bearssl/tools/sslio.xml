<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/extra/iwnet/src/bearssl/tools/sslio.c"><comment type="block">/*
 * Copyright (c) 2016 Thomas Pornin &lt;pornin@bolet.org&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining 
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winsock2.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ws2tcpip.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;poll.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOCKET</name></cpp:macro>           <cpp:value>int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INVALID_SOCKET</name></cpp:macro>   <cpp:value>(-1)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"brssl.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dump_blob</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s (len = %lu)"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>u</name> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n%08lX  "</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>u</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" %02x"</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Inspect the provided data in case it is a "command" to trigger a
 * special behaviour. If the command is recognised, then it is executed
 * and this function returns 1. Otherwise, this function returns 0.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>run_command</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * A single static slot for saving session parameters.
	 */</comment>
	<decl_stmt><decl><type><specifier>static</specifier> <name>br_ssl_session_parameters</name></type> <name>slot</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>slot_used</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>len</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">2</literal> <operator>||</operator> <name>len</name></expr></argument> &gt;</argument_list></name> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\r'</literal> <operator>||</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<switch>switch <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
	<case>case <expr><literal type="char">'Q'</literal></expr>:</case>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"closing...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>br_ssl_engine_close</name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	<case>case <expr><literal type="char">'R'</literal></expr>:</case>
		<if_stmt><if>if <condition>(<expr><call><name>br_ssl_engine_renegotiate</name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"renegotiating...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"not renegotiating.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	<case>case <expr><literal type="char">'F'</literal></expr>:</case>
		<comment type="block">/*
		 * Session forget is nominally client-only. But the
		 * session parameters are in the engine structure, which
		 * is the first field of the client context, so the cast
		 * still works properly. On the server, this forgetting
		 * has no effect.
		 */</comment>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"forgetting session...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>br_ssl_client_forget_session</name><argument_list>(<argument><expr><operator>(</operator><name>br_ssl_client_context</name> <operator>*</operator><operator>)</operator><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	<case>case <expr><literal type="char">'S'</literal></expr>:</case>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"saving session parameters...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>br_ssl_engine_get_session_parameters</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"  id = "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name><name>slot</name><operator>.</operator><name>session_id_len</name></name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%02X"</literal></expr></argument>, <argument><expr><name><name>slot</name><operator>.</operator><name>session_id</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>slot_used</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	<case>case <expr><literal type="char">'P'</literal></expr>:</case>
		<if_stmt><if>if <condition>(<expr><name>slot_used</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"restoring session parameters...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"  id = "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name><name>slot</name><operator>.</operator><name>session_id_len</name></name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%02X"</literal></expr></argument>, <argument><expr><name><name>slot</name><operator>.</operator><name>session_id</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>br_ssl_engine_set_session_parameters</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	<default>default:</default>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>ptr</name></decl>, <name>len</name>;</decl_stmt>
}</block></struct></type> <name>in_buffer</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>in_return_bytes</name><parameter_list>(<parameter><decl><type><name>in_buffer</name> <modifier>*</modifier></type><name>bb</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>bb</name><operator>-&gt;</operator><name>ptr</name></name> <operator>&lt;</operator> <name><name>bb</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>size_t</name></type> <name>clen</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>clen</name> <operator>=</operator> <name><name>bb</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name><name>bb</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>clen</name> <operator>&gt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>clen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>bb</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>bb</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>clen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>bb</name><operator>-&gt;</operator><name>ptr</name></name> <operator>+=</operator> <name>clen</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>bb</name><operator>-&gt;</operator><name>ptr</name></name> <operator>==</operator> <name><name>bb</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>bb</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>bb</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>clen</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * A buffered version of in_read(), using a buffer to return only
 * full lines when feasible.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>in_read_buffered</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>h_in</name></decl></parameter>, <parameter><decl><type><name>in_buffer</name> <modifier>*</modifier></type><name>bb</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>in_return_bytes</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>n</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>INPUT_RECORD</name></type> <name>inrec</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>DWORD</name></type> <name>v</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PeekConsoleInput</name><argument_list>(<argument><expr><name>h_in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>inrec</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: PeekConsoleInput()"</literal>
				<literal type="string">" failed with 0x%08lX\n"</literal></expr></argument>,
				<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ReadConsoleInput</name><argument_list>(<argument><expr><name>h_in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>inrec</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: ReadConsoleInput()"</literal>
				<literal type="string">" failed with 0x%08lX\n"</literal></expr></argument>,
				<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>inrec</name><operator>.</operator><name>EventType</name></name> <operator>==</operator> <name>KEY_EVENT</name>
			<operator>&amp;&amp;</operator> <name><name>inrec</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeyEvent</name><operator>.</operator><name>bKeyDown</name></name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>inrec</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeyEvent</name><operator>.</operator><name>uChar</name><operator>.</operator><name>AsciiChar</name></name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\t'</literal>
				<operator>||</operator> <operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="number">32</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="number">127</literal><operator>)</operator></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name><name>bb</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>bb</name><operator>-&gt;</operator><name>ptr</name></name> <operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>c</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>bb</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name><name>bb</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>bb</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <sizeof>sizeof <name><name>bb</name><operator>-&gt;</operator><name>buf</name></name></sizeof> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name><name>bb</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
					<return>return <expr><call><name>in_return_bytes</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>in_avail_buffered</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>h_in</name></decl></parameter>, <parameter><decl><type><name>in_buffer</name> <modifier>*</modifier></type><name>bb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>in_read_buffered</name><argument_list>(<argument><expr><name>h_in</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* see brssl.h */</comment>
<function><type><name>int</name></type>
<name>run_ssl_engine</name><parameter_list>(<parameter><decl><type><name>br_ssl_engine_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>hsdetails</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retcode</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>verbose</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>trace</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
	<decl_stmt><decl><type><name>WSAEVENT</name></type> <name>fd_event</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>can_send</name></decl>, <decl><type ref="prev"/><name>can_recv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HANDLE</name></type> <name>h_in</name></decl>, <decl><type ref="prev"/><name>h_out</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>in_buffer</name></type> <name>bb</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>hsdetails</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>retcode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>verbose</name> <operator>=</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>RUN_ENGINE_VERBOSE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>trace</name> <operator>=</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>RUN_ENGINE_TRACE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * Print algorithm details.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rngname</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Algorithms:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>br_prng_seeder_system</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rngname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"   RNG:           %s\n"</literal></expr></argument>, <argument><expr><name>rngname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>cc</name><operator>-&gt;</operator><name>iaes_cbcenc</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"   AES/CBC (enc): %s\n"</literal></expr></argument>,
				<argument><expr><call><name>get_algo_name</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>iaes_cbcenc</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>cc</name><operator>-&gt;</operator><name>iaes_cbcdec</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"   AES/CBC (dec): %s\n"</literal></expr></argument>,
				<argument><expr><call><name>get_algo_name</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>iaes_cbcdec</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>cc</name><operator>-&gt;</operator><name>iaes_ctr</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"   AES/CTR:       %s\n"</literal></expr></argument>,
				<argument><expr><call><name>get_algo_name</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>iaes_ctr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>cc</name><operator>-&gt;</operator><name>iaes_ctrcbc</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"   AES/CCM:       %s\n"</literal></expr></argument>,
				<argument><expr><call><name>get_algo_name</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>iaes_ctrcbc</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>cc</name><operator>-&gt;</operator><name>ides_cbcenc</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"   DES/CBC (enc): %s\n"</literal></expr></argument>,
				<argument><expr><call><name>get_algo_name</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>ides_cbcenc</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>cc</name><operator>-&gt;</operator><name>ides_cbcdec</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"   DES/CBC (dec): %s\n"</literal></expr></argument>,
				<argument><expr><call><name>get_algo_name</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>ides_cbcdec</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>cc</name><operator>-&gt;</operator><name>ighash</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"   GHASH (GCM):   %s\n"</literal></expr></argument>,
				<argument><expr><call><name>get_algo_name</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>ighash</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>cc</name><operator>-&gt;</operator><name>ichacha</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"   ChaCha20:      %s\n"</literal></expr></argument>,
				<argument><expr><call><name>get_algo_name</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>ichacha</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>cc</name><operator>-&gt;</operator><name>ipoly</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"   Poly1305:      %s\n"</literal></expr></argument>,
				<argument><expr><call><name>get_algo_name</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>ipoly</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>cc</name><operator>-&gt;</operator><name>iec</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"   EC:            %s\n"</literal></expr></argument>,
				<argument><expr><call><name>get_algo_name</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>iec</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>cc</name><operator>-&gt;</operator><name>iecdsa</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"   ECDSA:         %s\n"</literal></expr></argument>,
				<argument><expr><call><name>get_algo_name</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>iecdsa</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>cc</name><operator>-&gt;</operator><name>irsavrfy</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"   RSA (vrfy):    %s\n"</literal></expr></argument>,
				<argument><expr><call><name>get_algo_name</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>irsavrfy</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
	<expr_stmt><expr><name>fd_event</name> <operator>=</operator> <name>WSA_INVALID_EVENT</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>can_send</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>can_recv</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bb</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name><name>bb</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/*
	 * On Unix systems, we need to follow three descriptors:
	 * standard input (0), standard output (1), and the socket
	 * itself (for both read and write). This is done with a poll()
	 * call.
	 *
	 * On Windows systems, we use WSAEventSelect() to associate
	 * an event handle with the network activity, and we use
	 * WaitForMultipleObjectsEx() on that handle and the standard
	 * input handle, when appropriate. Standard output is assumed
	 * to be always writeable, and standard input to be the console;
	 * this does not work well (or at all) with redirections (to
	 * pipes or files) but it should be enough for a debug tool
	 * (TODO: make something that handles redirections as well).
	 */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
	<expr_stmt><expr><name>fd_event</name> <operator>=</operator> <call><name>WSACreateEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fd_event</name> <operator>==</operator> <name>WSA_INVALID_EVENT</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: WSACreateEvent() failed with %d\n"</literal></expr></argument>,
			<argument><expr><call><name>WSAGetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>retcode</name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt>
		<goto>goto <name>engine_exit</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>WSAEventSelect</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>fd_event</name></expr></argument>, <argument><expr><name>FD_READ</name> <operator>|</operator> <name>FD_WRITE</name> <operator>|</operator> <name>FD_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>h_in</name> <operator>=</operator> <call><name>GetStdHandle</name><argument_list>(<argument><expr><name>STD_INPUT_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>h_out</name> <operator>=</operator> <call><name>GetStdHandle</name><argument_list>(<argument><expr><name>STD_OUTPUT_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SetConsoleMode</name><argument_list>(<argument><expr><name>h_in</name></expr></argument>, <argument><expr><name>ENABLE_ECHO_INPUT</name>
		<operator>|</operator> <name>ENABLE_LINE_INPUT</name>
		<operator>|</operator> <name>ENABLE_PROCESSED_INPUT</name>
		<operator>|</operator> <name>ENABLE_PROCESSED_OUTPUT</name>
		<operator>|</operator> <name>ENABLE_WRAP_AT_EOL_OUTPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<comment type="block">/*
	 * Make sure that stdin and stdout are non-blocking.
	 */</comment>
	<expr_stmt><expr><call><name>fcntl</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><name>O_NONBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fcntl</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><name>O_NONBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/*
	 * Perform the loop.
	 */</comment>
	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>unsigned</name></type> <name>st</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>sendrec</name></decl>, <decl><type ref="prev"/><name>recvrec</name></decl>, <decl><type ref="prev"/><name>sendapp</name></decl>, <decl><type ref="prev"/><name>recvapp</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
		<decl_stmt><decl><type><name>HANDLE</name></type> <name><name>pfd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>DWORD</name></type> <name>wt</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name></type> <name><name>pfd</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>k_fd</name></decl>, <decl><type ref="prev"/><name>k_in</name></decl>, <decl><type ref="prev"/><name>k_out</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>sendrec_ok</name></decl>, <decl><type ref="prev"/><name>recvrec_ok</name></decl>, <decl><type ref="prev"/><name>sendapp_ok</name></decl>, <decl><type ref="prev"/><name>recvapp_ok</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * Get current engine state.
		 */</comment>
		<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>br_ssl_engine_current_state</name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>st</name> <operator>==</operator> <name>BR_SSL_CLOSED</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>br_ssl_engine_last_error</name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>BR_ERR_OK</name></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
						<argument><expr><literal type="string">"SSL closed normally\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>retcode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<goto>goto <name>engine_exit</name>;</goto>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: SSL error %d"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>retcode</name> <operator>=</operator> <name>err</name></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&gt;=</operator> <name>BR_ERR_SEND_FATAL_ALERT</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name>err</name> <operator>-=</operator> <name>BR_ERR_SEND_FATAL_ALERT</name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
						<argument><expr><literal type="string">" (sent alert %d)\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>err</name> <operator>&gt;=</operator> <name>BR_ERR_RECV_FATAL_ALERT</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name>err</name> <operator>-=</operator> <name>BR_ERR_RECV_FATAL_ALERT</name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
						<argument><expr><literal type="string">" (received alert %d)\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if> <else>else <block>{<block_content>
					<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ename</name></decl>;</decl_stmt>

					<expr_stmt><expr><name>ename</name> <operator>=</operator> <call><name>find_error_name</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name>ename</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
						<expr_stmt><expr><name>ename</name> <operator>=</operator> <literal type="string">"unknown"</literal></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
					<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" (%s)\n"</literal></expr></argument>, <argument><expr><name>ename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
				<goto>goto <name>engine_exit</name>;</goto>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * Compute descriptors that must be polled, depending
		 * on engine state.
		 */</comment>
		<expr_stmt><expr><name>sendrec</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>st</name> <operator>&amp;</operator> <name>BR_SSL_SENDREC</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>recvrec</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>st</name> <operator>&amp;</operator> <name>BR_SSL_RECVREC</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>sendapp</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>st</name> <operator>&amp;</operator> <name>BR_SSL_SENDAPP</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>recvapp</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>st</name> <operator>&amp;</operator> <name>BR_SSL_RECVAPP</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>verbose</name> <operator>&amp;&amp;</operator> <name>sendapp</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>hsdetails</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>char</name></type> <name><name>csn</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pname</name></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Handshake completed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"   version:               "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<switch>switch <condition>(<expr><name><name>cc</name><operator>-&gt;</operator><name>session</name><operator>.</operator><name>version</name></name></expr>)</condition> <block>{<block_content>
			<case>case <expr><name>BR_SSL30</name></expr>:</case>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"SSL 3.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>BR_TLS10</name></expr>:</case>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"TLS 1.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>BR_TLS11</name></expr>:</case>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"TLS 1.1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>BR_TLS12</name></expr>:</case>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"TLS 1.2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"unknown (0x%04X)"</literal></expr></argument>,
					<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>cc</name><operator>-&gt;</operator><name>session</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></switch>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>get_suite_name_ext</name><argument_list>(
				<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>session</name><operator>.</operator><name>cipher_suite</name></name></expr></argument>, <argument><expr><name>csn</name></expr></argument>, <argument><expr><sizeof>sizeof <name>csn</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"   cipher suite:          %s\n"</literal></expr></argument>, <argument><expr><name>csn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>uses_ecdhe</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>session</name><operator>.</operator><name>cipher_suite</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>get_curve_name_ext</name><argument_list>(
					<argument><expr><call><name>br_ssl_engine_get_ecdhe_curve</name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr></argument>,
					<argument><expr><name>csn</name></expr></argument>, <argument><expr><sizeof>sizeof <name>csn</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
					<argument><expr><literal type="string">"   ECDHE curve:           %s\n"</literal></expr></argument>, <argument><expr><name>csn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"   secure renegotiation:  %s\n"</literal></expr></argument>,
				<argument><expr><ternary><condition><expr><name><name>cc</name><operator>-&gt;</operator><name>reneg</name></name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">"no"</literal></expr> </then><else>: <expr><literal type="string">"yes"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>pname</name> <operator>=</operator> <call><name>br_ssl_engine_get_selected_protocol</name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>pname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
					<argument><expr><literal type="string">"   protocol name (ALPN):  %s\n"</literal></expr></argument>,
					<argument><expr><name>pname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>hsdetails</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>k_fd</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>k_in</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>k_out</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

		<expr_stmt><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
		<comment type="block">/*
		 * If we recorded that we can send or receive data, and we
		 * want to do exactly that, then we don't wait; we just do
		 * it.
		 */</comment>
		<expr_stmt><expr><name>recvapp_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>sendrec_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>recvrec_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>sendapp_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>sendrec</name> <operator>&amp;&amp;</operator> <name>can_send</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>sendrec_ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>recvrec</name> <operator>&amp;&amp;</operator> <name>can_recv</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>recvrec_ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>recvapp</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>recvapp_ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>sendapp</name> <operator>&amp;&amp;</operator> <call><name>in_avail_buffered</name><argument_list>(<argument><expr><name>h_in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>sendapp_ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<comment type="block">/*
			 * If we cannot do I/O right away, then we must
			 * wait for some event, and try again.
			 */</comment>
			<expr_stmt><expr><name><name>pfd</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>HANDLE</name><operator>)</operator><name>fd_event</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>k_fd</name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>u</name> <operator>++</operator></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>sendapp</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>pfd</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name>h_in</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>k_in</name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>u</name> <operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>wt</name> <operator>=</operator> <call><name>WaitForMultipleObjectsEx</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>pfd</name></expr></argument>,
				<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>wt</name> <operator>==</operator> <name>WAIT_FAILED</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR:"</literal>
					<literal type="string">" WaitForMultipleObjectsEx()"</literal>
					<literal type="string">" failed with 0x%08lX"</literal></expr></argument>,
					<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>retcode</name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt>
				<goto>goto <name>engine_exit</name>;</goto>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>wt</name> <operator>==</operator> <name>k_fd</name></expr>)</condition> <block>{<block_content>
				<decl_stmt><decl><type><name>WSANETWORKEVENTS</name></type> <name>e</name></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><call><name>WSAEnumNetworkEvents</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>fd_event</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR:"</literal>
						<literal type="string">" WSAEnumNetworkEvents()"</literal>
						<literal type="string">" failed with %d\n"</literal></expr></argument>,
						<argument><expr><call><name>WSAGetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>retcode</name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt>
					<goto>goto <name>engine_exit</name>;</goto>
				</block_content>}</block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>.</operator><name>lNetworkEvents</name></name> <operator>&amp;</operator> <operator>(</operator><name>FD_WRITE</name> <operator>|</operator> <name>FD_CLOSE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name>can_send</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>.</operator><name>lNetworkEvents</name></name> <operator>&amp;</operator> <operator>(</operator><name>FD_READ</name> <operator>|</operator> <name>FD_CLOSE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name>can_recv</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
			<continue>continue;</continue>
		</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<if_stmt><if>if <condition>(<expr><name>sendrec</name> <operator>||</operator> <name>recvrec</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>pfd</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>pfd</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>pfd</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>sendrec</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>pfd</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>|=</operator> <name>POLLOUT</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>recvrec</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>pfd</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>|=</operator> <name>POLLIN</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>k_fd</name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>u</name> <operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>sendapp</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>pfd</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>pfd</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>pfd</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>=</operator> <name>POLLIN</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>k_in</name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>u</name> <operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>recvapp</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>pfd</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>pfd</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>pfd</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>=</operator> <name>POLLOUT</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>k_out</name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>u</name> <operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>poll</name><argument_list>(<argument><expr><name>pfd</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition> <block>{<block_content>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"ERROR: poll()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>retcode</name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt>
			<goto>goto <name>engine_exit</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * We transform closures/errors into read+write accesses
		 * so as to force the read() or write() call that will
		 * detect the situation.
		 */</comment>
		<while>while <condition>(<expr><name>u</name> <operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>pfd</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>&amp;</operator> <operator>(</operator><name>POLLERR</name> <operator>|</operator> <name>POLLHUP</name><operator>)</operator></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>pfd</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>|=</operator> <name>POLLIN</name> <operator>|</operator> <name>POLLOUT</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></while>

		<expr_stmt><expr><name>recvapp_ok</name> <operator>=</operator> <name>recvapp</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pfd</name><index>[<expr><name>k_out</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>&amp;</operator> <name>POLLOUT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>sendrec_ok</name> <operator>=</operator> <name>sendrec</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pfd</name><index>[<expr><name>k_fd</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>&amp;</operator> <name>POLLOUT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>recvrec_ok</name> <operator>=</operator> <name>recvrec</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pfd</name><index>[<expr><name>k_fd</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>&amp;</operator> <name>POLLIN</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>sendapp_ok</name> <operator>=</operator> <name>sendapp</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pfd</name><index>[<expr><name>k_in</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>&amp;</operator> <name>POLLIN</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<comment type="block">/*
		 * We give preference to outgoing data, on stdout and on
		 * the socket.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>recvapp_ok</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
			<decl_stmt><decl><type><name>DWORD</name></type> <name>wlen</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			<decl_stmt><decl><type><name>ssize_t</name></type> <name>wlen</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

			<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>br_ssl_engine_recvapp_buf</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>WriteFile</name><argument_list>(<argument><expr><name>h_out</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wlen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"stdout closed...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>retcode</name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt>
				<goto>goto <name>engine_exit</name>;</goto>
			</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			<expr_stmt><expr><name>wlen</name> <operator>=</operator> <call><name>write</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>wlen</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"stdout closed...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>retcode</name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt>
				<goto>goto <name>engine_exit</name>;</goto>
			</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<expr_stmt><expr><call><name>br_ssl_engine_recvapp_ack</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>wlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>sendrec_ok</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>wlen</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>br_ssl_engine_sendrec_buf</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>wlen</name> <operator>=</operator> <call><name>send</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>wlen</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
				<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>WSAGetLastError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>EWOULDBLOCK</name>
					<operator>||</operator> <name>err</name> <operator>==</operator> <name>WSAEWOULDBLOCK</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>can_send</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
					<continue>continue;</continue>
				</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
				<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINTR</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>EWOULDBLOCK</name></expr>)</condition> <block>{<block_content>
					<continue>continue;</continue>
				</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
				<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"socket closed...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>retcode</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<goto>goto <name>engine_exit</name>;</goto>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>trace</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>dump_blob</name><argument_list>(<argument><expr><literal type="string">"Outgoing bytes"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>wlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>br_ssl_engine_sendrec_ack</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>wlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>recvrec_ok</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>rlen</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>br_ssl_engine_recvrec_buf</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>rlen</name> <operator>=</operator> <call><name>recv</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>rlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"socket closed...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>retcode</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<goto>goto <name>engine_exit</name>;</goto>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>rlen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
				<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>WSAGetLastError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>EWOULDBLOCK</name>
					<operator>||</operator> <name>err</name> <operator>==</operator> <name>WSAEWOULDBLOCK</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>can_recv</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
					<continue>continue;</continue>
				</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
				<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINTR</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>EWOULDBLOCK</name></expr>)</condition> <block>{<block_content>
					<continue>continue;</continue>
				</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
				<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"socket broke...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>retcode</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<goto>goto <name>engine_exit</name>;</goto>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>trace</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>dump_blob</name><argument_list>(<argument><expr><literal type="string">"Incoming bytes"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>rlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>br_ssl_engine_recvrec_ack</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>rlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>sendapp_ok</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
			<decl_stmt><decl><type><name>int</name></type> <name>rlen</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			<decl_stmt><decl><type><name>ssize_t</name></type> <name>rlen</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

			<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>br_ssl_engine_sendapp_buf</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
			<expr_stmt><expr><name>rlen</name> <operator>=</operator> <call><name>in_read_buffered</name><argument_list>(<argument><expr><name>h_in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			<expr_stmt><expr><name>rlen</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<if_stmt><if>if <condition>(<expr><name>rlen</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"stdin closed...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><call><name>br_ssl_engine_close</name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>run_command</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>rlen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>br_ssl_engine_sendapp_ack</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>rlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>br_ssl_engine_flush</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* We should never reach that point. */</comment>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: poll() misbehaves\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>retcode</name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt>
		<goto>goto <name>engine_exit</name>;</goto>
	</block_content>}</block></for>

	<comment type="block">/*
	 * Release allocated structures.
	 */</comment>
<label><name>engine_exit</name>:</label>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name>fd_event</name> <operator>!=</operator> <name>WSA_INVALID_EVENT</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>WSACloseEvent</name><argument_list>(<argument><expr><name>fd_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><name>retcode</name></expr>;</return>
</block_content>}</block></function>
</unit>
