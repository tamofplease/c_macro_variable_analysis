<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/extra/iwnet/src/bearssl/tools/twrch.c"><comment type="block">/*
 * Copyright (c) 2017 Thomas Pornin &lt;pornin@bolet.org&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining 
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"brssl.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>verbose</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>usage_twrch</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"usage: brssl twrch [ options ]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"options:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"   -trace          dump all packets on stderr\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"   -v              verbose error messages on stderr\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"   -server         act as an SSL server\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"   -client         act as an SSL client\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"   -sni name       use specified name for SNI\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"   -mono           use monodirectional buffering\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"   -buf length     set the I/O buffer length (in bytes)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"   -cache length   set the session cache storage length (in bytes)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"   -cert fname     read certificate chain from file 'fname'\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"   -key fname      read private key from file 'fname'\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"   -CA file        add trust anchors from 'file' (for peer auth)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"   -anon_ok        request but do not require a client certificate\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"   -nostaticecdh   prohibit full-static ECDH (client only)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"   -list           list supported names (protocols, algorithms...)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"   -vmin name      set minimum supported version (default: TLS-1.0)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"   -vmax name      set maximum supported version (default: TLS-1.2)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"   -cs names       set list of supported cipher suites (comma-separated)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"   -hf names       add support for some hash functions (comma-separated)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"   -minhello len   set minimum ClientHello length (in bytes)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"   -serverpref     enforce server's preferences for cipher suites\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"   -noreneg        prohibit renegotiations\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"   -alpn name      add protocol name to list of protocols (ALPN extension)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"   -strictalpn     fail on ALPN mismatch\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_alpn</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>alpn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>alpn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dump_blob</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s (len = %lu)"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>u</name> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n%08lX  "</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>u</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" %02x"</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Callback for reading bytes from standard input.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>stdin_read</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
		<decl_stmt><decl><type><name>DWORD</name></type> <name>rlen</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<decl_stmt><decl><type><name>ssize_t</name></type> <name>rlen</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<decl_stmt><decl><type><name>int</name></type> <name>eof</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
		<expr_stmt><expr><name>eof</name> <operator>=</operator> <operator>!</operator><call><name>ReadFile</name><argument_list>(<argument><expr><call><name>GetStdHandle</name><argument_list>(<argument><expr><name>STD_INPUT_HANDLE</name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rlen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>rlen</name> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><name>rlen</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>rlen</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>rlen</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition> <block>{<block_content>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>eof</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>eof</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<if_stmt><if>if <condition>(<expr><name>eof</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>ctx</name></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"recv: EOF\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>ctx</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>dump_blob</name><argument_list>(<argument><expr><literal type="string">"recv"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>rlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>rlen</name></expr>;</return>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
 * Callback for writing bytes on standard output.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>stdout_write</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
		<decl_stmt><decl><type><name>DWORD</name></type> <name>wlen</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<decl_stmt><decl><type><name>ssize_t</name></type> <name>wlen</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<decl_stmt><decl><type><name>int</name></type> <name>eof</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
		<expr_stmt><expr><name>eof</name> <operator>=</operator> <operator>!</operator><call><name>WriteFile</name><argument_list>(<argument><expr><call><name>GetStdHandle</name><argument_list>(<argument><expr><name>STD_OUTPUT_HANDLE</name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wlen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><name>wlen</name> <operator>=</operator> <call><name>write</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>wlen</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>wlen</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition> <block>{<block_content>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>eof</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>eof</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<if_stmt><if>if <condition>(<expr><name>eof</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>ctx</name></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"send: EOF\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>ctx</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>dump_blob</name><argument_list>(<argument><expr><literal type="string">"send"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>wlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>wlen</name></expr>;</return>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_error</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>comment</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>find_error_name</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERR %d: %s\n   %s\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&gt;=</operator> <name>BR_ERR_RECV_FATAL_ALERT</name>
		<operator>&amp;&amp;</operator> <name>err</name> <operator>&lt;</operator> <name>BR_ERR_RECV_FATAL_ALERT</name> <operator>+</operator> <literal type="number">256</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERR %d: received fatal alert %d\n"</literal></expr></argument>,
			<argument><expr><name>err</name></expr></argument>, <argument><expr><name>err</name> <operator>-</operator> <name>BR_ERR_RECV_FATAL_ALERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&gt;=</operator> <name>BR_ERR_SEND_FATAL_ALERT</name>
		<operator>&amp;&amp;</operator> <name>err</name> <operator>&lt;</operator> <name>BR_ERR_SEND_FATAL_ALERT</name> <operator>+</operator> <literal type="number">256</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERR %d: sent fatal alert %d\n"</literal></expr></argument>,
			<argument><expr><name>err</name></expr></argument>, <argument><expr><name>err</name> <operator>-</operator> <name>BR_ERR_SEND_FATAL_ALERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERR %d: UNKNOWN\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* see brssl.h */</comment>
<function><type><name>int</name></type>
<name>do_twrch</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retcode</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>trace</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>is_client</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>is_server</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sni</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>bidi</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>vmin</name></decl>, <decl><type ref="prev"/><name>vmax</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>cipher_suite</name> <modifier>*</modifier></type><name>suites</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>num_suites</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>suite_ids</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>hfuns</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>br_x509_certificate</name> <modifier>*</modifier></type><name>chain</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>chain_len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>cert_signer_algo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>private_key</name> <modifier>*</modifier></type><name>sk</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nostaticecdh</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>anchor_list</name></type> <name>anchors</name> <init>= <expr><name>VEC_INIT</name></expr></init></decl>;</decl_stmt>
	<macro><name>VECTOR</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <expr_stmt><expr><name>alpn_names</name> <operator>=</operator> <name>VEC_INIT</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>br_x509_minimal_context</name></type> <name>xc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>x509_noanchor_context</name></type> <name>xwc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type><name>dnhash</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>;</decl_stmt>
	<union>union <block>{
		<decl_stmt><decl><type><name>br_ssl_engine_context</name></type> <name>eng</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>br_ssl_server_context</name></type> <name>srv</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>br_ssl_client_context</name></type> <name>cnt</name></decl>;</decl_stmt>
	}</block> <decl><name>cc</name></decl>;</union>
	<decl_stmt><decl><type><name>br_ssl_session_cache_lru</name></type> <name>lru</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>iobuf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cache</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>iobuf_len</name></decl>, <decl><type ref="prev"/><name>cache_len</name></decl>, <decl><type ref="prev"/><name>minhello_len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>br_sslio_context</name></type> <name>ioc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>flags</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>reconnect</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>retcode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>trace</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>is_client</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>is_server</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>sni</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>bidi</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>vmin</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>vmax</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>suites</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>num_suites</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>suite_ids</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>hfuns</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>chain</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>chain_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>cert_signer_algo</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>sk</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>nostaticecdh</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>iobuf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>iobuf_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>cache</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cache_len</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>minhello_len</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>reconnect</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>arg</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>usage_twrch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<goto>goto <name>twrch_exit_error</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>eqstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-trace"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>trace</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eqstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-v"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>verbose</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eqstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-server"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>is_server</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eqstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-client"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>is_client</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eqstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-sni"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>++</operator> <name>i</name> <operator>&gt;=</operator> <name>argc</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
					<argument><expr><literal type="string">"ERROR: no argument for '-sni'\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>usage_twrch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<goto>goto <name>twrch_exit_error</name>;</goto>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>arg</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>sni</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: duplicate SNI\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>usage_twrch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<goto>goto <name>twrch_exit_error</name>;</goto>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>sni</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eqstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-mono"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>bidi</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eqstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-buf"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>++</operator> <name>i</name> <operator>&gt;=</operator> <name>argc</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
					<argument><expr><literal type="string">"ERROR: no argument for '-buf'\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>usage_twrch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<goto>goto <name>twrch_exit_error</name>;</goto>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>arg</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>iobuf_len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
					<argument><expr><literal type="string">"ERROR: duplicate I/O buffer length\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>usage_twrch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<goto>goto <name>twrch_exit_error</name>;</goto>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>iobuf_len</name> <operator>=</operator> <call><name>parse_size</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>iobuf_len</name> <operator>==</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>usage_twrch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<goto>goto <name>twrch_exit_error</name>;</goto>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eqstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-cache"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>++</operator> <name>i</name> <operator>&gt;=</operator> <name>argc</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
					<argument><expr><literal type="string">"ERROR: no argument for '-cache'\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>usage_twrch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<goto>goto <name>twrch_exit_error</name>;</goto>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>arg</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>cache_len</name> <operator>!=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: duplicate session"</literal>
					<literal type="string">" cache length\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>usage_twrch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<goto>goto <name>twrch_exit_error</name>;</goto>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>cache_len</name> <operator>=</operator> <call><name>parse_size</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>cache_len</name> <operator>==</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>usage_twrch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<goto>goto <name>twrch_exit_error</name>;</goto>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eqstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-cert"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>++</operator> <name>i</name> <operator>&gt;=</operator> <name>argc</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
					<argument><expr><literal type="string">"ERROR: no argument for '-cert'\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>usage_twrch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<goto>goto <name>twrch_exit_error</name>;</goto>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>chain</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
					<argument><expr><literal type="string">"ERROR: duplicate certificate chain\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>usage_twrch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<goto>goto <name>twrch_exit_error</name>;</goto>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>arg</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>chain</name> <operator>=</operator> <call><name>read_certificates</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chain_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>chain</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>chain_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<goto>goto <name>twrch_exit_error</name>;</goto>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eqstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-key"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>++</operator> <name>i</name> <operator>&gt;=</operator> <name>argc</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
					<argument><expr><literal type="string">"ERROR: no argument for '-key'\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>usage_twrch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<goto>goto <name>twrch_exit_error</name>;</goto>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>sk</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
					<argument><expr><literal type="string">"ERROR: duplicate private key\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>usage_twrch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<goto>goto <name>twrch_exit_error</name>;</goto>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>arg</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>sk</name> <operator>=</operator> <call><name>read_private_key</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>sk</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<goto>goto <name>twrch_exit_error</name>;</goto>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eqstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-CA"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>++</operator> <name>i</name> <operator>&gt;=</operator> <name>argc</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
					<argument><expr><literal type="string">"ERROR: no argument for '-CA'\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>usage_twrch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<goto>goto <name>twrch_exit_error</name>;</goto>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>arg</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>read_trust_anchors</name><argument_list>(<argument><expr><operator>&amp;</operator><name>anchors</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>usage_twrch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<goto>goto <name>twrch_exit_error</name>;</goto>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eqstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-anon_ok"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>BR_OPT_TOLERATE_NO_CLIENT_AUTH</name></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eqstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-nostaticecdh"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>nostaticecdh</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eqstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-list"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>list_names</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<goto>goto <name>twrch_exit</name>;</goto>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eqstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-vmin"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>++</operator> <name>i</name> <operator>&gt;=</operator> <name>argc</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
					<argument><expr><literal type="string">"ERROR: no argument for '-vmin'\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>usage_twrch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<goto>goto <name>twrch_exit_error</name>;</goto>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>arg</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>vmin</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
					<argument><expr><literal type="string">"ERROR: duplicate minimum version\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>usage_twrch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<goto>goto <name>twrch_exit_error</name>;</goto>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>vmin</name> <operator>=</operator> <call><name>parse_version</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>vmin</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
					<argument><expr><literal type="string">"ERROR: unrecognised version '%s'\n"</literal></expr></argument>,
					<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>usage_twrch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<goto>goto <name>twrch_exit_error</name>;</goto>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eqstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-vmax"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>++</operator> <name>i</name> <operator>&gt;=</operator> <name>argc</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
					<argument><expr><literal type="string">"ERROR: no argument for '-vmax'\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>usage_twrch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<goto>goto <name>twrch_exit_error</name>;</goto>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>arg</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>vmax</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
					<argument><expr><literal type="string">"ERROR: duplicate maximum version\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>usage_twrch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<goto>goto <name>twrch_exit_error</name>;</goto>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>vmax</name> <operator>=</operator> <call><name>parse_version</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>vmax</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
					<argument><expr><literal type="string">"ERROR: unrecognised version '%s'\n"</literal></expr></argument>,
					<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>usage_twrch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<goto>goto <name>twrch_exit_error</name>;</goto>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eqstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-cs"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>++</operator> <name>i</name> <operator>&gt;=</operator> <name>argc</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
					<argument><expr><literal type="string">"ERROR: no argument for '-cs'\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>usage_twrch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<goto>goto <name>twrch_exit_error</name>;</goto>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>arg</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>suites</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: duplicate list"</literal>
					<literal type="string">" of cipher suites\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>usage_twrch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<goto>goto <name>twrch_exit_error</name>;</goto>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>suites</name> <operator>=</operator> <call><name>parse_suites</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num_suites</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>suites</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>usage_twrch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<goto>goto <name>twrch_exit_error</name>;</goto>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eqstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-hf"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>unsigned</name></type> <name>x</name></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><operator>++</operator> <name>i</name> <operator>&gt;=</operator> <name>argc</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
					<argument><expr><literal type="string">"ERROR: no argument for '-hf'\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>usage_twrch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<goto>goto <name>twrch_exit_error</name>;</goto>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>arg</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>parse_hash_functions</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>usage_twrch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<goto>goto <name>twrch_exit_error</name>;</goto>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>hfuns</name> <operator>|=</operator> <name>x</name></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eqstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-minhello"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>++</operator> <name>i</name> <operator>&gt;=</operator> <name>argc</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
					<argument><expr><literal type="string">"ERROR: no argument for '-minhello'\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>usage_twrch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<goto>goto <name>twrch_exit_error</name>;</goto>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>arg</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>minhello_len</name> <operator>!=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: duplicate minimum"</literal>
					<literal type="string">" ClientHello length\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>usage_twrch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<goto>goto <name>twrch_exit_error</name>;</goto>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>minhello_len</name> <operator>=</operator> <call><name>parse_size</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/*
			 * Minimum ClientHello length must fit on 16 bits.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name>minhello_len</name> <operator>==</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal>
				<operator>||</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>minhello_len</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>usage_twrch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<goto>goto <name>twrch_exit_error</name>;</goto>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eqstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-serverpref"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>BR_OPT_ENFORCE_SERVER_PREFERENCES</name></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eqstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-noreneg"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>BR_OPT_NO_RENEGOTIATION</name></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eqstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-alpn"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>++</operator> <name>i</name> <operator>&gt;=</operator> <name>argc</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
					<argument><expr><literal type="string">"ERROR: no argument for '-alpn'\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>usage_twrch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<goto>goto <name>twrch_exit_error</name>;</goto>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>VEC_ADD</name><argument_list>(<argument><expr><name>alpn_names</name></expr></argument>, <argument><expr><call><name>xstrdup</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eqstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-strictalpn"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>BR_OPT_FAIL_ON_ALPN_MISMATCH</name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: unknown option: '%s'\n"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>usage_twrch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<goto>goto <name>twrch_exit_error</name>;</goto>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/*
	 * Verify consistency of options.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_client</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>is_server</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR:"</literal>
			<literal type="string">" one of -server and -client must be specified\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>usage_twrch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>twrch_exit_error</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>is_client</name> <operator>&amp;&amp;</operator> <name>is_server</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR:"</literal>
			<literal type="string">" -server and -client may not be both specified\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>usage_twrch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>twrch_exit_error</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>vmin</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>vmin</name> <operator>=</operator> <name>BR_TLS10</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>vmax</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>vmax</name> <operator>=</operator> <name>BR_TLS12</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>vmax</name> <operator>&lt;</operator> <name>vmin</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: impossible minimum/maximum protocol"</literal>
			<literal type="string">" version combination\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>usage_twrch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>twrch_exit_error</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>is_server</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>chain</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: no certificate specified"</literal>
				<literal type="string">" for server (-cert)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>usage_twrch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<goto>goto <name>twrch_exit_error</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>sk</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: no private key specified"</literal>
				<literal type="string">" for server (-key)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>usage_twrch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<goto>goto <name>twrch_exit_error</name>;</goto>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>chain</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>sk</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: private key (-key)"</literal>
				<literal type="string">" but no certificate (-cert)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>usage_twrch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<goto>goto <name>twrch_exit_error</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>chain</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>sk</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: certificate (-cert)"</literal>
				<literal type="string">" but no private key (-key)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>usage_twrch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<goto>goto <name>twrch_exit_error</name>;</goto>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>suites</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>num_suites</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

		<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>cipher_suites</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>cipher_suites</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>req</name> <operator>&amp;</operator> <name>REQ_TLS12</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal>
				<operator>||</operator> <name>vmax</name> <operator>&gt;=</operator> <name>BR_TLS12</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>num_suites</name> <operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><name>suites</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>num_suites</name> <operator>*</operator> <sizeof>sizeof <name/></sizeof>*<name>suites</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>num_suites</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>cipher_suites</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>cipher_suites</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>req</name> <operator>&amp;</operator> <name>REQ_TLS12</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal>
				<operator>||</operator> <name>vmax</name> <operator>&gt;=</operator> <name>BR_TLS12</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>suites</name><index>[<expr><name>num_suites</name> <operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>cipher_suites</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>hfuns</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>hfuns</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>sk</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<switch>switch <condition>(<expr><name><name>sk</name><operator>-&gt;</operator><name>key_type</name></name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type> <name>curve</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>uint32_t</name></type> <name>supp</name></decl>;</decl_stmt>

		<case>case <expr><name>BR_KEYTYPE_RSA</name></expr>:</case>
			<break>break;</break>
		<case>case <expr><name>BR_KEYTYPE_EC</name></expr>:</case>
			<expr_stmt><expr><name>curve</name> <operator>=</operator> <name><name>sk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>curve</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>supp</name> <operator>=</operator> <call><name>br_ec_get_default</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>supported_curves</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>curve</name> <operator>&gt;</operator> <literal type="number">31</literal> <operator>||</operator> <operator>!</operator><operator>(</operator><operator>(</operator><name>supp</name> <operator>&gt;&gt;</operator> <name>curve</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: private key curve (%d)"</literal>
					<literal type="string">" is not supported\n"</literal></expr></argument>, <argument><expr><name>curve</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<goto>goto <name>twrch_exit_error</name>;</goto>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: unsupported"</literal>
				<literal type="string">" private key type (%d)\n"</literal></expr></argument>, <argument><expr><name><name>sk</name><operator>-&gt;</operator><name>key_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<goto>goto <name>twrch_exit_error</name>;</goto>
		</block_content>}</block></switch>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>chain</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>cert_signer_algo</name> <operator>=</operator> <call><name>get_cert_signer_algo</name><argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>cert_signer_algo</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<goto>goto <name>twrch_exit_error</name>;</goto>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>iobuf_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>bidi</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>iobuf_len</name> <operator>=</operator> <name>BR_SSL_BUFSIZE_BIDI</name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>iobuf_len</name> <operator>=</operator> <name>BR_SSL_BUFSIZE_MONO</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>iobuf</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>iobuf_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>is_server</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>cache_len</name> <operator>==</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>cache_len</name> <operator>=</operator> <literal type="number">5000</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>cache</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>cache_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Initialise the relevant context.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>is_client</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>br_ssl_client_zero</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>.</operator><name>cnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>br_ssl_server_zero</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>.</operator><name>srv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/*
	 * Compute implementation requirements and inject implementations.
	 */</comment>
	<expr_stmt><expr><name>suite_ids</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>num_suites</name> <operator>*</operator> <sizeof>sizeof <name/></sizeof>*<name>suite_ids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_ssl_engine_set_versions</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>.</operator><name>eng</name></name></expr></argument>, <argument><expr><name>vmin</name></expr></argument>, <argument><expr><name>vmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_ssl_engine_set_all_flags</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>.</operator><name>eng</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>vmin</name> <operator>&lt;=</operator> <name>BR_TLS11</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>hfuns</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>br_md5_ID</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: TLS 1.0 and 1.1 need MD5\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<goto>goto <name>twrch_exit_error</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>hfuns</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>br_sha1_ID</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: TLS 1.0 and 1.1 need SHA-1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<goto>goto <name>twrch_exit_error</name>;</goto>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>num_suites</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>unsigned</name></type> <name>req</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>req</name> <operator>=</operator> <name><name>suites</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>req</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>suite_ids</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name><name>suites</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>suite</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>req</name> <operator>&amp;</operator> <name>REQ_TLS12</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>vmax</name> <operator>&lt;</operator> <name>BR_TLS12</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
				<argument><expr><literal type="string">"ERROR: cipher suite %s requires TLS 1.2\n"</literal></expr></argument>,
				<argument><expr><name><name>suites</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<goto>goto <name>twrch_exit_error</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>req</name> <operator>&amp;</operator> <name>REQ_SHA1</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>hfuns</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>br_sha1_ID</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
				<argument><expr><literal type="string">"ERROR: cipher suite %s requires SHA-1\n"</literal></expr></argument>,
				<argument><expr><name><name>suites</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<goto>goto <name>twrch_exit_error</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>req</name> <operator>&amp;</operator> <name>REQ_SHA256</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>hfuns</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>br_sha256_ID</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
				<argument><expr><literal type="string">"ERROR: cipher suite %s requires SHA-256\n"</literal></expr></argument>,
				<argument><expr><name><name>suites</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<goto>goto <name>twrch_exit_error</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>req</name> <operator>&amp;</operator> <name>REQ_SHA384</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>hfuns</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>br_sha384_ID</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
				<argument><expr><literal type="string">"ERROR: cipher suite %s requires SHA-384\n"</literal></expr></argument>,
				<argument><expr><name><name>suites</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<goto>goto <name>twrch_exit_error</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* TODO: algorithm implementation selection */</comment>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>req</name> <operator>&amp;</operator> <name>REQ_AESCBC</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>br_ssl_engine_set_default_aes_cbc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>.</operator><name>eng</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>req</name> <operator>&amp;</operator> <name>REQ_AESCCM</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>br_ssl_engine_set_default_aes_ccm</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>.</operator><name>eng</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>req</name> <operator>&amp;</operator> <name>REQ_AESGCM</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>br_ssl_engine_set_default_aes_gcm</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>.</operator><name>eng</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>req</name> <operator>&amp;</operator> <name>REQ_CHAPOL</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>br_ssl_engine_set_default_chapol</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>.</operator><name>eng</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>req</name> <operator>&amp;</operator> <name>REQ_3DESCBC</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>br_ssl_engine_set_default_des_cbc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>.</operator><name>eng</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>is_client</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>req</name> <operator>&amp;</operator> <name>REQ_RSAKEYX</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>br_ssl_client_set_default_rsapub</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>.</operator><name>cnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>is_client</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>req</name> <operator>&amp;</operator> <name>REQ_ECDHE_RSA</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>br_ssl_engine_set_default_rsavrfy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>.</operator><name>eng</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>is_client</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>req</name> <operator>&amp;</operator> <name>REQ_ECDH</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>br_ssl_engine_set_default_ec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>.</operator><name>eng</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>req</name> <operator>&amp;</operator> <operator>(</operator><name>REQ_ECDHE_RSA</name> <operator>|</operator> <name>REQ_ECDHE_ECDSA</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>br_ssl_engine_set_default_ec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>.</operator><name>eng</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>br_ssl_engine_set_suites</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>.</operator><name>eng</name></name></expr></argument>, <argument><expr><name>suite_ids</name></expr></argument>, <argument><expr><name>num_suites</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>dnhash</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>hash_functions</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type><name>hc</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>hc</name> <operator>=</operator> <name><name>hash_functions</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>hclass</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>id</name> <operator>=</operator> <operator>(</operator><name><name>hc</name><operator>-&gt;</operator><name>desc</name></name> <operator>&gt;&gt;</operator> <name>BR_HASHDESC_ID_OFF</name><operator>)</operator> <operator>&amp;</operator> <name>BR_HASHDESC_ID_MASK</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>hfuns</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>id</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>dnhash</name> <operator>=</operator> <name>hc</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>br_ssl_engine_set_hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>.</operator><name>eng</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>hc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<if_stmt><if>if <condition>(<expr><name>vmin</name> <operator>&lt;=</operator> <name>BR_TLS11</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>br_ssl_engine_set_prf10</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>.</operator><name>eng</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>br_tls10_prf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>vmax</name> <operator>&gt;=</operator> <name>BR_TLS12</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>hfuns</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>br_sha256_ID</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>br_ssl_engine_set_prf_sha256</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>.</operator><name>eng</name></name></expr></argument>,
				<argument><expr><operator>&amp;</operator><name>br_tls12_sha256_prf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>hfuns</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>br_sha384_ID</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>br_ssl_engine_set_prf_sha384</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>.</operator><name>eng</name></name></expr></argument>,
				<argument><expr><operator>&amp;</operator><name>br_tls12_sha384_prf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>VEC_LEN</name><argument_list>(<argument><expr><name>alpn_names</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>br_ssl_engine_set_protocol_names</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>.</operator><name>eng</name></name></expr></argument>,
			<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><call><name>VEC_ELT</name><argument_list>(<argument><expr><name>alpn_names</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><call><name>VEC_LEN</name><argument_list>(<argument><expr><name>alpn_names</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * In server role, we use a session cache (size can be
	 * specified; if size is zero, then no cache is set).
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>is_server</name> <operator>&amp;&amp;</operator> <name>cache</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>br_ssl_session_cache_lru_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lru</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>, <argument><expr><name>cache_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>br_ssl_server_set_cache</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>.</operator><name>srv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>lru</name><operator>.</operator><name>vtable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * For a server, set the policy handler.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>is_server</name></expr>)</condition> <block>{<block_content>
		<switch>switch <condition>(<expr><name><name>sk</name><operator>-&gt;</operator><name>key_type</name></name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>BR_KEYTYPE_RSA</name></expr>:</case>
			<expr_stmt><expr><call><name>br_ssl_server_set_single_rsa</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>.</operator><name>srv</name></name></expr></argument>,
				<argument><expr><name>chain</name></expr></argument>, <argument><expr><name>chain_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name></name></expr></argument>,
				<argument><expr><name>BR_KEYTYPE_KEYX</name> <operator>|</operator> <name>BR_KEYTYPE_SIGN</name></expr></argument>,
				<argument><expr><call><name>br_rsa_private_get_default</name><argument_list>()</argument_list></call></expr></argument>,
				<argument><expr><call><name>br_rsa_pkcs1_sign_get_default</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>BR_KEYTYPE_EC</name></expr>:</case>
			<expr_stmt><expr><call><name>br_ssl_server_set_single_ec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>.</operator><name>srv</name></name></expr></argument>,
				<argument><expr><name>chain</name></expr></argument>, <argument><expr><name>chain_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>ec</name></name></expr></argument>,
				<argument><expr><name>BR_KEYTYPE_KEYX</name> <operator>|</operator> <name>BR_KEYTYPE_SIGN</name></expr></argument>,
				<argument><expr><name>cert_signer_algo</name></expr></argument>,
				<argument><expr><call><name>br_ec_get_default</name><argument_list>()</argument_list></call></expr></argument>,
				<argument><expr><call><name>br_ecdsa_sign_asn1_get_default</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: unsupported"</literal>
				<literal type="string">" private key type (%d)\n"</literal></expr></argument>, <argument><expr><name><name>sk</name><operator>-&gt;</operator><name>key_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<goto>goto <name>twrch_exit_error</name>;</goto>
		</block_content>}</block></switch>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * For a client, if a certificate was specified, use it.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>is_client</name> <operator>&amp;&amp;</operator> <name>chain</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<switch>switch <condition>(<expr><name><name>sk</name><operator>-&gt;</operator><name>key_type</name></name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>unsigned</name></type> <name>usages</name></decl>;</decl_stmt>

		<case>case <expr><name>BR_KEYTYPE_RSA</name></expr>:</case>
			<expr_stmt><expr><call><name>br_ssl_client_set_single_rsa</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>.</operator><name>cnt</name></name></expr></argument>,
				<argument><expr><name>chain</name></expr></argument>, <argument><expr><name>chain_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name></name></expr></argument>,
				<argument><expr><call><name>br_rsa_pkcs1_sign_get_default</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>BR_KEYTYPE_EC</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>nostaticecdh</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>cert_signer_algo</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>usages</name> <operator>=</operator> <name>BR_KEYTYPE_SIGN</name></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><name>usages</name> <operator>=</operator> <name>BR_KEYTYPE_KEYX</name> <operator>|</operator> <name>BR_KEYTYPE_SIGN</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<expr_stmt><expr><call><name>br_ssl_client_set_single_ec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>.</operator><name>cnt</name></name></expr></argument>,
				<argument><expr><name>chain</name></expr></argument>, <argument><expr><name>chain_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>ec</name></name></expr></argument>,
				<argument><expr><name>usages</name></expr></argument>, <argument><expr><name>cert_signer_algo</name></expr></argument>,
				<argument><expr><call><name>br_ec_get_default</name><argument_list>()</argument_list></call></expr></argument>,
				<argument><expr><call><name>br_ecdsa_sign_asn1_get_default</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: unsupported"</literal>
				<literal type="string">" private key type (%d)\n"</literal></expr></argument>, <argument><expr><name><name>sk</name><operator>-&gt;</operator><name>key_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<goto>goto <name>twrch_exit_error</name>;</goto>
		</block_content>}</block></switch>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * On a client, or if trust anchors have been configured, then
	 * set an X.509 validation engine. If there are no trust anchors
	 * (client only), then a "no anchor" wrapper will be applied.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>is_client</name> <operator>||</operator> <call><name>VEC_LEN</name><argument_list>(<argument><expr><name>anchors</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>br_x509_minimal_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xc</name></expr></argument>, <argument><expr><name>dnhash</name></expr></argument>,
			<argument><expr><operator>&amp;</operator><call><name>VEC_ELT</name><argument_list>(<argument><expr><name>anchors</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>VEC_LEN</name><argument_list>(<argument><expr><name>anchors</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>hash_functions</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type><name>hc</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>hc</name> <operator>=</operator> <name><name>hash_functions</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>hclass</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>id</name> <operator>=</operator> <operator>(</operator><name><name>hc</name><operator>-&gt;</operator><name>desc</name></name> <operator>&gt;&gt;</operator> <name>BR_HASHDESC_ID_OFF</name><operator>)</operator>
				<operator>&amp;</operator> <name>BR_HASHDESC_ID_MASK</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>hfuns</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>id</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>br_x509_minimal_set_hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xc</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>hc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>br_ssl_engine_set_default_rsavrfy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>.</operator><name>eng</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>br_ssl_engine_set_default_ecdsa</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>.</operator><name>eng</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>br_x509_minimal_set_rsa</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xc</name></expr></argument>, <argument><expr><call><name>br_rsa_pkcs1_vrfy_get_default</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>br_x509_minimal_set_ecdsa</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xc</name></expr></argument>,
			<argument><expr><call><name>br_ec_get_default</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>br_ecdsa_vrfy_asn1_get_default</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>br_ssl_engine_set_x509</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>.</operator><name>eng</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>xc</name><operator>.</operator><name>vtable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>VEC_LEN</name><argument_list>(<argument><expr><name>anchors</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>x509_noanchor_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xwc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>xc</name><operator>.</operator><name>vtable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>br_ssl_engine_set_x509</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>.</operator><name>eng</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>xwc</name><operator>.</operator><name>vtable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>br_ssl_engine_set_x509</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>.</operator><name>eng</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>xc</name><operator>.</operator><name>vtable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>is_server</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>br_ssl_server_set_trust_anchor_names_alt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>.</operator><name>srv</name></name></expr></argument>,
				<argument><expr><operator>&amp;</operator><call><name>VEC_ELT</name><argument_list>(<argument><expr><name>anchors</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>VEC_LEN</name><argument_list>(<argument><expr><name>anchors</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Set I/O buffer.
	 */</comment>
	<expr_stmt><expr><call><name>br_ssl_engine_set_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>.</operator><name>eng</name></name></expr></argument>, <argument><expr><name>iobuf</name></expr></argument>, <argument><expr><name>iobuf_len</name></expr></argument>, <argument><expr><name>bidi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Start the engine.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>is_client</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>br_ssl_client_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>.</operator><name>cnt</name></name></expr></argument>, <argument><expr><name>sni</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>is_server</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>br_ssl_server_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>.</operator><name>srv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * On Unix systems, we want to ignore SIGPIPE: if the peer
	 * closes the connection abruptly, then we want to report it
	 * as a "normal" error (exit code = 1).
	 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_WIN32</name></cpp:ifndef>
	<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/*
	 * Initialize the callbacks for exchanging data over stdin and
	 * stdout.
	 */</comment>
	<expr_stmt><expr><call><name>br_sslio_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ioc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cc</name><operator>.</operator><name>eng</name></name></expr></argument>, <argument><expr><name>stdin_read</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trace</name></expr></argument>, <argument><expr><name>stdout_write</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Run the Twrch protocol.
	 */</comment>
	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>br_sha1_context</name></type> <name>sc</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>hv</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>tmp</name><index>[<expr><literal type="number">41</literal></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint64_t</name></type> <name>count</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>fb</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * Read line, byte by byte, hashing it on the fly.
		 */</comment>
		<expr_stmt><expr><call><name>br_sha1_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>fb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>x</name></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>br_sslio_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ioc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>reconnect</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name>reconnect</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><call><name>br_sslio_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ioc</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
						<goto>goto <name>twrch_loop_finished</name>;</goto>
					</block_content>}</block></if></if_stmt>
					<if_stmt><if>if <condition>(<expr><name>is_client</name></expr>)</condition> <block>{<block_content>
						<expr_stmt><expr><call><name>br_ssl_client_reset</name><argument_list>(
							<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>.</operator><name>cnt</name></name></expr></argument>, <argument><expr><name>sni</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
					<if_stmt><if>if <condition>(<expr><name>is_server</name></expr>)</condition> <block>{<block_content>
						<expr_stmt><expr><call><name>br_ssl_server_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>.</operator><name>srv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
					<expr_stmt><expr><call><name>br_sslio_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ioc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cc</name><operator>.</operator><name>eng</name></name></expr></argument>,
						<argument><expr><name>stdin_read</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trace</name></expr></argument>,
						<argument><expr><name>stdout_write</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<continue>continue;</continue>
				</block_content>}</block></if></if_stmt>
				<goto>goto <name>twrch_loop_finished</name>;</goto>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>fb</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">0x0A</literal></expr>)</condition> <block>{<block_content>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>br_sha1_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>count</name> <operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></for>
		<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<switch>switch <condition>(<expr><name>fb</name></expr>)</condition> <block>{<block_content>
			<case>case <expr><literal type="char">'C'</literal></expr>:</case>
				<expr_stmt><expr><call><name>br_sslio_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ioc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<goto>goto <name>twrch_loop_finished</name>;</goto>
			<case>case <expr><literal type="char">'T'</literal></expr>:</case>
				<if_stmt><if>if <condition>(<expr><call><name>br_sslio_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ioc</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
					<goto>goto <name>twrch_loop_finished</name>;</goto>
				</block_content>}</block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><name>is_client</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>br_ssl_client_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>.</operator><name>cnt</name></name></expr></argument>, <argument><expr><name>sni</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><name>is_server</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>br_ssl_server_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>.</operator><name>srv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><call><name>br_sslio_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ioc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cc</name><operator>.</operator><name>eng</name></name></expr></argument>,
					<argument><expr><name>stdin_read</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trace</name></expr></argument>,
					<argument><expr><name>stdout_write</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<continue>continue;</continue>
			<case>case <expr><literal type="char">'G'</literal></expr>:</case>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>br_ssl_engine_renegotiate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>.</operator><name>eng</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>br_sslio_write_all</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ioc</name></expr></argument>, <argument><expr><literal type="string">"DENIED\n"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>br_sslio_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ioc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if> <else>else <block>{<block_content>
					<expr_stmt><expr><call><name>br_sslio_write_all</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ioc</name></expr></argument>, <argument><expr><literal type="string">"OK\n"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>br_sslio_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ioc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
				<continue>continue;</continue>
			<case>case <expr><literal type="char">'R'</literal></expr>:</case>
				<expr_stmt><expr><name>reconnect</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>br_sslio_write_all</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ioc</name></expr></argument>, <argument><expr><literal type="string">"OK\n"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>br_sslio_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ioc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<continue>continue;</continue>
			<case>case <expr><literal type="char">'U'</literal></expr>:</case>
				<if_stmt><if>if <condition>(<expr><name>is_client</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>br_ssl_client_forget_session</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>.</operator><name>cnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><name>is_server</name> <operator>&amp;&amp;</operator> <name>cache</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
					<decl_stmt><decl><type><name>br_ssl_session_parameters</name></type> <name>pp</name></decl>;</decl_stmt>

					<expr_stmt><expr><call><name>br_ssl_engine_get_session_parameters</name><argument_list>(
						<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>.</operator><name>eng</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name><name>pp</name><operator>.</operator><name>session_id_len</name></name> <operator>==</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
						<expr_stmt><expr><call><name>br_ssl_session_cache_lru_forget</name><argument_list>(
							<argument><expr><operator>&amp;</operator><name>lru</name></expr></argument>, <argument><expr><name><name>pp</name><operator>.</operator><name>session_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><call><name>br_sslio_write_all</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ioc</name></expr></argument>, <argument><expr><literal type="string">"DONE\n"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>br_sslio_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ioc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></switch>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>br_sha1_out</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sc</name></expr></argument>, <argument><expr><name>hv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>hv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tmp</name><index>[<expr><operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"0123456789abcdef"</literal><index>[<expr><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>]</index></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tmp</name><index>[<expr><operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"0123456789abcdef"</literal><index>[<expr><name>x</name> <operator>&amp;</operator> <literal type="number">15</literal></expr>]</index></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><name><name>tmp</name><index>[<expr><literal type="number">40</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x0A</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>br_sslio_write_all</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ioc</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">41</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>br_sslio_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ioc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

<label><name>twrch_loop_finished</name>:</label>
	<if_stmt><if>if <condition>(<expr><call><name>br_ssl_engine_current_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>.</operator><name>eng</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BR_SSL_CLOSED</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>br_ssl_engine_last_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>.</operator><name>eng</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>retcode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>print_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>retcode</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Engine not closed!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>retcode</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/*
	 * Release allocated structures.
	 */</comment>
<label><name>twrch_exit</name>:</label>
	<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>suites</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>suite_ids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free_certificates</name><argument_list>(<argument><expr><name>chain</name></expr></argument>, <argument><expr><name>chain_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free_private_key</name><argument_list>(<argument><expr><name>sk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>VEC_CLEAREXT</name><argument_list>(<argument><expr><name>anchors</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>free_ta_contents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>VEC_CLEAREXT</name><argument_list>(<argument><expr><name>alpn_names</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>free_alpn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>iobuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>retcode</name></expr>;</return>

<label><name>twrch_exit_error</name>:</label>
	<expr_stmt><expr><name>retcode</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<goto>goto <name>twrch_exit</name>;</goto>
</block_content>}</block></function>
</unit>
