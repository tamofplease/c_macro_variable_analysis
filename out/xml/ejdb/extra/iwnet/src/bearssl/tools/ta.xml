<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/extra/iwnet/src/bearssl/tools/ta.c"><comment type="block">/*
 * Copyright (c) 2016 Thomas Pornin &lt;pornin@bolet.org&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining 
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"brssl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bearssl.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>curve_to_sym</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>curve</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>curve</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>BR_EC_sect163k1</name></expr>:</case>         <return>return <expr><literal type="string">"BR_EC_sect163k1"</literal></expr>;</return>
	<case>case <expr><name>BR_EC_sect163r1</name></expr>:</case>         <return>return <expr><literal type="string">"BR_EC_sect163r1"</literal></expr>;</return>
	<case>case <expr><name>BR_EC_sect163r2</name></expr>:</case>         <return>return <expr><literal type="string">"BR_EC_sect163r2"</literal></expr>;</return>
	<case>case <expr><name>BR_EC_sect193r1</name></expr>:</case>         <return>return <expr><literal type="string">"BR_EC_sect193r1"</literal></expr>;</return>
	<case>case <expr><name>BR_EC_sect193r2</name></expr>:</case>         <return>return <expr><literal type="string">"BR_EC_sect193r2"</literal></expr>;</return>
	<case>case <expr><name>BR_EC_sect233k1</name></expr>:</case>         <return>return <expr><literal type="string">"BR_EC_sect233k1"</literal></expr>;</return>
	<case>case <expr><name>BR_EC_sect233r1</name></expr>:</case>         <return>return <expr><literal type="string">"BR_EC_sect233r1"</literal></expr>;</return>
	<case>case <expr><name>BR_EC_sect239k1</name></expr>:</case>         <return>return <expr><literal type="string">"BR_EC_sect239k1"</literal></expr>;</return>
	<case>case <expr><name>BR_EC_sect283k1</name></expr>:</case>         <return>return <expr><literal type="string">"BR_EC_sect283k1"</literal></expr>;</return>
	<case>case <expr><name>BR_EC_sect283r1</name></expr>:</case>         <return>return <expr><literal type="string">"BR_EC_sect283r1"</literal></expr>;</return>
	<case>case <expr><name>BR_EC_sect409k1</name></expr>:</case>         <return>return <expr><literal type="string">"BR_EC_sect409k1"</literal></expr>;</return>
	<case>case <expr><name>BR_EC_sect409r1</name></expr>:</case>         <return>return <expr><literal type="string">"BR_EC_sect409r1"</literal></expr>;</return>
	<case>case <expr><name>BR_EC_sect571k1</name></expr>:</case>         <return>return <expr><literal type="string">"BR_EC_sect571k1"</literal></expr>;</return>
	<case>case <expr><name>BR_EC_sect571r1</name></expr>:</case>         <return>return <expr><literal type="string">"BR_EC_sect571r1"</literal></expr>;</return>
	<case>case <expr><name>BR_EC_secp160k1</name></expr>:</case>         <return>return <expr><literal type="string">"BR_EC_secp160k1"</literal></expr>;</return>
	<case>case <expr><name>BR_EC_secp160r1</name></expr>:</case>         <return>return <expr><literal type="string">"BR_EC_secp160r1"</literal></expr>;</return>
	<case>case <expr><name>BR_EC_secp160r2</name></expr>:</case>         <return>return <expr><literal type="string">"BR_EC_secp160r2"</literal></expr>;</return>
	<case>case <expr><name>BR_EC_secp192k1</name></expr>:</case>         <return>return <expr><literal type="string">"BR_EC_secp192k1"</literal></expr>;</return>
	<case>case <expr><name>BR_EC_secp192r1</name></expr>:</case>         <return>return <expr><literal type="string">"BR_EC_secp192r1"</literal></expr>;</return>
	<case>case <expr><name>BR_EC_secp224k1</name></expr>:</case>         <return>return <expr><literal type="string">"BR_EC_secp224k1"</literal></expr>;</return>
	<case>case <expr><name>BR_EC_secp224r1</name></expr>:</case>         <return>return <expr><literal type="string">"BR_EC_secp224r1"</literal></expr>;</return>
	<case>case <expr><name>BR_EC_secp256k1</name></expr>:</case>         <return>return <expr><literal type="string">"BR_EC_secp256k1"</literal></expr>;</return>
	<case>case <expr><name>BR_EC_secp256r1</name></expr>:</case>         <return>return <expr><literal type="string">"BR_EC_secp256r1"</literal></expr>;</return>
	<case>case <expr><name>BR_EC_secp384r1</name></expr>:</case>         <return>return <expr><literal type="string">"BR_EC_secp384r1"</literal></expr>;</return>
	<case>case <expr><name>BR_EC_secp521r1</name></expr>:</case>         <return>return <expr><literal type="string">"BR_EC_secp521r1"</literal></expr>;</return>
	<case>case <expr><name>BR_EC_brainpoolP256r1</name></expr>:</case>   <return>return <expr><literal type="string">"BR_EC_brainpoolP256r1"</literal></expr>;</return>
	<case>case <expr><name>BR_EC_brainpoolP384r1</name></expr>:</case>   <return>return <expr><literal type="string">"BR_EC_brainpoolP384r1"</literal></expr>;</return>
	<case>case <expr><name>BR_EC_brainpoolP512r1</name></expr>:</case>   <return>return <expr><literal type="string">"BR_EC_brainpoolP512r1"</literal></expr>;</return>
	</block_content>}</block></switch>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_blob</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nstatic const unsigned char %s[] = {"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>u</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>u</name> <operator>%</operator> <literal type="number">12</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0x%02X"</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n};\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>print_ta_internals</name><parameter_list>(<parameter><decl><type><name>br_x509_trust_anchor</name> <modifier>*</modifier></type><name>ta</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>ctr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">25</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"TA%ld_DN"</literal></expr></argument>, <argument><expr><name>ctr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>print_blob</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>ta</name><operator>-&gt;</operator><name>dn</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>ta</name><operator>-&gt;</operator><name>dn</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<switch>switch <condition>(<expr><name><name>ta</name><operator>-&gt;</operator><name>pkey</name><operator>.</operator><name>key_type</name></name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>BR_KEYTYPE_RSA</name></expr>:</case>
		<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"TA%ld_RSA_N"</literal></expr></argument>, <argument><expr><name>ctr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>print_blob</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>ta</name><operator>-&gt;</operator><name>pkey</name><operator>.</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>ta</name><operator>-&gt;</operator><name>pkey</name><operator>.</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>nlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"TA%ld_RSA_E"</literal></expr></argument>, <argument><expr><name>ctr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>print_blob</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>ta</name><operator>-&gt;</operator><name>pkey</name><operator>.</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>e</name></name></expr></argument>, <argument><expr><name><name>ta</name><operator>-&gt;</operator><name>pkey</name><operator>.</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>elen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>BR_KEYTYPE_EC</name></expr>:</case>
		<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"TA%ld_EC_Q"</literal></expr></argument>, <argument><expr><name>ctr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>print_blob</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>ta</name><operator>-&gt;</operator><name>pkey</name><operator>.</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>q</name></name></expr></argument>, <argument><expr><name><name>ta</name><operator>-&gt;</operator><name>pkey</name><operator>.</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>qlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<default>default:</default>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: unknown anchor key type '%d'\n"</literal></expr></argument>,
			<argument><expr><name><name>ta</name><operator>-&gt;</operator><name>pkey</name><operator>.</operator><name>key_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></switch>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_ta</name><parameter_list>(<parameter><decl><type><name>br_x509_trust_anchor</name> <modifier>*</modifier></type><name>ta</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>ctr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">25</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t{\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t\t{ (unsigned char *)TA%ld_DN, sizeof TA%ld_DN },\n"</literal></expr></argument>,
		<argument><expr><name>ctr</name></expr></argument>, <argument><expr><name>ctr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t\t%s,\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>ta</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>BR_X509_TA_CA</name><operator>)</operator></expr>
		?</condition><then> <expr><literal type="string">"BR_X509_TA_CA"</literal></expr> </then><else>: <expr><literal type="string">"0"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t\t{\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<switch>switch <condition>(<expr><name><name>ta</name><operator>-&gt;</operator><name>pkey</name><operator>.</operator><name>key_type</name></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cname</name></decl>;</decl_stmt>

	<case>case <expr><name>BR_KEYTYPE_RSA</name></expr>:</case>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t\t\tBR_KEYTYPE_RSA,\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t\t\t{ .rsa = {\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t\t\t\t(unsigned char *)TA%ld_RSA_N,"</literal>
			<literal type="string">" sizeof TA%ld_RSA_N,\n"</literal></expr></argument>, <argument><expr><name>ctr</name></expr></argument>, <argument><expr><name>ctr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t\t\t\t(unsigned char *)TA%ld_RSA_E,"</literal>
			<literal type="string">" sizeof TA%ld_RSA_E,\n"</literal></expr></argument>, <argument><expr><name>ctr</name></expr></argument>, <argument><expr><name>ctr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t\t\t} }\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>BR_KEYTYPE_EC</name></expr>:</case>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t\t\tBR_KEYTYPE_EC,\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t\t\t{ .ec = {\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>cname</name> <operator>=</operator> <call><name>curve_to_sym</name><argument_list>(<argument><expr><name><name>ta</name><operator>-&gt;</operator><name>pkey</name><operator>.</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>curve</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>cname</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>ta</name><operator>-&gt;</operator><name>pkey</name><operator>.</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>curve</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>cname</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t\t\t\t%s,\n"</literal></expr></argument>, <argument><expr><name>cname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t\t\t\t(unsigned char *)TA%ld_EC_Q,"</literal>
			<literal type="string">" sizeof TA%ld_EC_Q,\n"</literal></expr></argument>, <argument><expr><name>ctr</name></expr></argument>, <argument><expr><name>ctr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t\t\t} }\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t\t}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>usage_ta</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"usage: brssl ta [ options ] file...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"options:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"   -q            suppress verbose messages\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* see brssl.h */</comment>
<function><type><name>int</name></type>
<name>do_ta</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retcode</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>verbose</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>num_files</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>anchor_list</name></type> <name>tas</name> <init>= <expr><name>VEC_INIT</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>num</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>retcode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>verbose</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>num_files</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>arg</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>num_files</name> <operator>++</operator></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>eqstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-v"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>eqstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-verbose"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>verbose</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>eqstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-q"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>eqstr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-quiet"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>verbose</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: unknown option: '%s'\n"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>usage_ta</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<goto>goto <name>ta_exit_error</name>;</goto>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>
	<if_stmt><if>if <condition>(<expr><name>num_files</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: no certificate file provided\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>usage_ta</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>ta_exit_error</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>size_t</name></type> <name>len1</name></decl>, <decl><type ref="prev"/><name>len2</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>fname</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>fname</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Reading file '%s': "</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>len1</name> <operator>=</operator> <call><name>VEC_LEN</name><argument_list>(<argument><expr><name>tas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>read_trust_anchors</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tas</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<goto>goto <name>ta_exit_error</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>len2</name> <operator>=</operator> <call><name>VEC_LEN</name><argument_list>(<argument><expr><name>tas</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>len1</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%lu trust anchor%s\n"</literal></expr></argument>,
				<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>len2</name></expr></argument>, <argument><expr><ternary><condition><expr><name>len2</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">"s"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>VEC_LEN</name><argument_list>(<argument><expr><name>tas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>print_ta_internals</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>VEC_ELT</name><argument_list>(<argument><expr><name>tas</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<goto>goto <name>ta_exit_error</name>;</goto>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nstatic const br_x509_trust_anchor TAs[%ld] = {"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>u</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>print_ta</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>VEC_ELT</name><argument_list>(<argument><expr><name>tas</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n};\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n#define TAs_NUM   %ld\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Release allocated structures.
	 */</comment>
<label><name>ta_exit</name>:</label>
	<expr_stmt><expr><call><name>VEC_CLEAREXT</name><argument_list>(<argument><expr><name>tas</name></expr></argument>, <argument><expr><name>free_ta_contents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>retcode</name></expr>;</return>

<label><name>ta_exit_error</name>:</label>
	<expr_stmt><expr><name>retcode</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<goto>goto <name>ta_exit</name>;</goto>
</block_content>}</block></function>
</unit>
