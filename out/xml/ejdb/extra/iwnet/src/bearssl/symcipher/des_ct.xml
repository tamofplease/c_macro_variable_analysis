<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/extra/iwnet/src/bearssl/symcipher/des_ct.c"><comment type="block">/*
 * Copyright (c) 2016 Thomas Pornin &lt;pornin@bolet.org&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining 
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>

<comment type="block">/*
 * During key schedule, we need to apply bit extraction PC-2 then permute
 * things into our bitslice representation. PC-2 extracts 48 bits out
 * of two 28-bit words (kl and kr), and we store these bits into two
 * 32-bit words sk0 and sk1.
 *
 *  -- bit 16+x of sk0 comes from bit QL0[x] of kl
 *  -- bit x of sk0 comes from bit QR0[x] of kr
 *  -- bit 16+x of sk1 comes from bit QL1[x] of kl
 *  -- bit x of sk1 comes from bit QR1[x] of kr
 */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>QL0</name><index>[]</index></name> <init>= <expr><block>{
	<expr><literal type="number">17</literal></expr>,  <expr><literal type="number">4</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">22</literal></expr>,  <expr><literal type="number">7</literal></expr>, <expr><literal type="number">18</literal></expr>,
	<expr><literal type="number">16</literal></expr>, <expr><literal type="number">24</literal></expr>,  <expr><literal type="number">2</literal></expr>, <expr><literal type="number">20</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">8</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">26</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>QR0</name><index>[]</index></name> <init>= <expr><block>{
	<expr><literal type="number">25</literal></expr>, <expr><literal type="number">19</literal></expr>,  <expr><literal type="number">9</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">5</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">23</literal></expr>,  <expr><literal type="number">8</literal></expr>,
	<expr><literal type="number">17</literal></expr>,  <expr><literal type="number">0</literal></expr>, <expr><literal type="number">22</literal></expr>,  <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">6</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">24</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>QL1</name><index>[]</index></name> <init>= <expr><block>{
	<expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">25</literal></expr>,  <expr><literal type="number">0</literal></expr>,
	<expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>,  <expr><literal type="number">5</literal></expr>,  <expr><literal type="number">9</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">21</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>QR1</name><index>[]</index></name> <init>= <expr><block>{
	<expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">15</literal></expr>,  <expr><literal type="number">4</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">16</literal></expr>,
	<expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">12</literal></expr>,  <expr><literal type="number">7</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">14</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * 32-bit rotation. The C compiler is supposed to recognize it as a
 * rotation and use the local architecture rotation opcode (if available).
 */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type>
<name>rotl</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <name>n</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>n</name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Compute key schedule for 8 key bytes (produces 32 subkey words).
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>keysched_unit</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>br_des_keysched_unit</name><argument_list>(<argument><expr><name>skey</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Apply PC-2 + bitslicing.
	 */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>uint32_t</name></type> <name>kl</name></decl>, <decl><type ref="prev"/><name>kr</name></decl>, <decl><type ref="prev"/><name>sk0</name></decl>, <decl><type ref="prev"/><name>sk1</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>kl</name> <operator>=</operator> <name><name>skey</name><index>[<expr><operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>kr</name> <operator>=</operator> <name><name>skey</name><index>[<expr><operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>sk0</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>sk1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>j</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>sk0</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>sk1</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>sk0</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>kl</name> <operator>&gt;&gt;</operator> <name><name>QL0</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>sk0</name> <operator>|=</operator> <operator>(</operator><name>kr</name> <operator>&gt;&gt;</operator> <name><name>QR0</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>sk1</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>kl</name> <operator>&gt;&gt;</operator> <name><name>QL1</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>sk1</name> <operator>|=</operator> <operator>(</operator><name>kr</name> <operator>&gt;&gt;</operator> <name><name>QR1</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></for>

		<expr_stmt><expr><name><name>skey</name><index>[<expr><operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>sk0</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>skey</name><index>[<expr><operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>sk1</name></expr>;</expr_stmt>
	</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
		<comment type="block">/*
		 * Speed-optimized version for PC-2 + bitslicing.
		 * (Unused. Kept for reference only.)
		 */</comment>
		sk0 = kl &amp; (uint32_t)0x00100000;
		sk0 |= (kl &amp; (uint32_t)0x08008000) &lt;&lt; 2;
		sk0 |= (kl &amp; (uint32_t)0x00400000) &lt;&lt; 4;
		sk0 |= (kl &amp; (uint32_t)0x00800000) &lt;&lt; 5;
		sk0 |= (kl &amp; (uint32_t)0x00040000) &lt;&lt; 6;
		sk0 |= (kl &amp; (uint32_t)0x00010000) &lt;&lt; 7;
		sk0 |= (kl &amp; (uint32_t)0x00000100) &lt;&lt; 10;
		sk0 |= (kl &amp; (uint32_t)0x00022000) &lt;&lt; 14;
		sk0 |= (kl &amp; (uint32_t)0x00000082) &lt;&lt; 18;
		sk0 |= (kl &amp; (uint32_t)0x00000004) &lt;&lt; 19;
		sk0 |= (kl &amp; (uint32_t)0x04000000) &gt;&gt; 10;
		sk0 |= (kl &amp; (uint32_t)0x00000010) &lt;&lt; 26;
		sk0 |= (kl &amp; (uint32_t)0x01000000) &gt;&gt; 2;

		sk0 |= kr &amp; (uint32_t)0x00000100;
		sk0 |= (kr &amp; (uint32_t)0x00000008) &lt;&lt; 1;
		sk0 |= (kr &amp; (uint32_t)0x00000200) &lt;&lt; 4;
		sk0 |= rotl(kr &amp; (uint32_t)0x08000021, 6);
		sk0 |= (kr &amp; (uint32_t)0x01000000) &gt;&gt; 24;
		sk0 |= (kr &amp; (uint32_t)0x00000002) &lt;&lt; 11;
		sk0 |= (kr &amp; (uint32_t)0x00100000) &gt;&gt; 18;
		sk0 |= (kr &amp; (uint32_t)0x00400000) &gt;&gt; 17;
		sk0 |= (kr &amp; (uint32_t)0x00800000) &gt;&gt; 14;
		sk0 |= (kr &amp; (uint32_t)0x02020000) &gt;&gt; 10;
		sk0 |= (kr &amp; (uint32_t)0x00080000) &gt;&gt; 5;
		sk0 |= (kr &amp; (uint32_t)0x00000040) &gt;&gt; 3;
		sk0 |= (kr &amp; (uint32_t)0x00000800) &gt;&gt; 1;

		sk1 = kl &amp; (uint32_t)0x02000000;
		sk1 |= (kl &amp; (uint32_t)0x00001000) &lt;&lt; 5;
		sk1 |= (kl &amp; (uint32_t)0x00000200) &lt;&lt; 11;
		sk1 |= (kl &amp; (uint32_t)0x00004000) &lt;&lt; 15;
		sk1 |= (kl &amp; (uint32_t)0x00000020) &lt;&lt; 16;
		sk1 |= (kl &amp; (uint32_t)0x00000800) &lt;&lt; 17;
		sk1 |= (kl &amp; (uint32_t)0x00000001) &lt;&lt; 24;
		sk1 |= (kl &amp; (uint32_t)0x00200000) &gt;&gt; 5;

		sk1 |= (kr &amp; (uint32_t)0x00000010) &lt;&lt; 8;
		sk1 |= (kr &amp; (uint32_t)0x04000000) &gt;&gt; 17;
		sk1 |= (kr &amp; (uint32_t)0x00004000) &gt;&gt; 14;
		sk1 |= (kr &amp; (uint32_t)0x00000400) &gt;&gt; 9;
		sk1 |= (kr &amp; (uint32_t)0x00010000) &gt;&gt; 8;
		sk1 |= (kr &amp; (uint32_t)0x00001000) &gt;&gt; 7;
		sk1 |= (kr &amp; (uint32_t)0x00000080) &gt;&gt; 3;
		sk1 |= (kr &amp; (uint32_t)0x00008000) &gt;&gt; 2;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/* see inner.h */</comment>
<function><type><name>unsigned</name></type>
<name>br_des_ct_keysched</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>key_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>key_len</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><literal type="number">8</literal></expr>:</case>
		<expr_stmt><expr><call><name>keysched_unit</name><argument_list>(<argument><expr><name>skey</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	<case>case <expr><literal type="number">16</literal></expr>:</case>
		<expr_stmt><expr><call><name>keysched_unit</name><argument_list>(<argument><expr><name>skey</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>keysched_unit</name><argument_list>(<argument><expr><name>skey</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>key</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>br_des_rev_skey</name><argument_list>(<argument><expr><name>skey</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>skey</name> <operator>+</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><name>skey</name></expr></argument>, <argument><expr><literal type="number">32</literal> <operator>*</operator> <sizeof>sizeof <name/></sizeof>*<name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">3</literal></expr>;</return>
	<default>default:</default>
		<expr_stmt><expr><call><name>keysched_unit</name><argument_list>(<argument><expr><name>skey</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>keysched_unit</name><argument_list>(<argument><expr><name>skey</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>key</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>br_des_rev_skey</name><argument_list>(<argument><expr><name>skey</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>keysched_unit</name><argument_list>(<argument><expr><name>skey</name> <operator>+</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>key</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">3</literal></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/*
 * DES confusion function. This function performs expansion E (32 to
 * 48 bits), XOR with subkey, S-boxes, and permutation P.
 */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type>
<name>Fconf</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>r0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>sk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * Each 6-&gt;4 S-box is virtually turned into four 6-&gt;1 boxes; we
	 * thus end up with 32 boxes that we call "T-boxes" here. We will
	 * evaluate them with bitslice code.
	 *
	 * Each T-box is a circuit of multiplexers (sort of) and thus
	 * takes 70 inputs: the 6 actual T-box inputs, and 64 constants
	 * that describe the T-box output for all combinations of the
	 * 6 inputs. With this model, all T-boxes are identical (with
	 * distinct inputs) and thus can be executed in parallel with
	 * bitslice code.
	 *
	 * T-boxes are numbered from 0 to 31, in least-to-most
	 * significant order. Thus, S-box S1 corresponds to T-boxes 31,
	 * 30, 29 and 28, in that order. T-box 'n' is computed with the
	 * bits at rank 'n' in the 32-bit words.
	 *
	 * Words x0 to x5 contain the T-box inputs 0 to 5.
	 */</comment>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>x0</name></decl>, <decl><type ref="prev"/><name>x1</name></decl>, <decl><type ref="prev"/><name>x2</name></decl>, <decl><type ref="prev"/><name>x3</name></decl>, <decl><type ref="prev"/><name>x4</name></decl>, <decl><type ref="prev"/><name>x5</name></decl>, <decl><type ref="prev"/><name>z0</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>y0</name></decl>, <decl><type ref="prev"/><name>y1</name></decl>, <decl><type ref="prev"/><name>y2</name></decl>, <decl><type ref="prev"/><name>y3</name></decl>, <decl><type ref="prev"/><name>y4</name></decl>, <decl><type ref="prev"/><name>y5</name></decl>, <decl><type ref="prev"/><name>y6</name></decl>, <decl><type ref="prev"/><name>y7</name></decl>, <decl><type ref="prev"/><name>y8</name></decl>, <decl><type ref="prev"/><name>y9</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>y10</name></decl>, <decl><type ref="prev"/><name>y11</name></decl>, <decl><type ref="prev"/><name>y12</name></decl>, <decl><type ref="prev"/><name>y13</name></decl>, <decl><type ref="prev"/><name>y14</name></decl>, <decl><type ref="prev"/><name>y15</name></decl>, <decl><type ref="prev"/><name>y16</name></decl>, <decl><type ref="prev"/><name>y17</name></decl>, <decl><type ref="prev"/><name>y18</name></decl>, <decl><type ref="prev"/><name>y19</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>y20</name></decl>, <decl><type ref="prev"/><name>y21</name></decl>, <decl><type ref="prev"/><name>y22</name></decl>, <decl><type ref="prev"/><name>y23</name></decl>, <decl><type ref="prev"/><name>y24</name></decl>, <decl><type ref="prev"/><name>y25</name></decl>, <decl><type ref="prev"/><name>y26</name></decl>, <decl><type ref="prev"/><name>y27</name></decl>, <decl><type ref="prev"/><name>y28</name></decl>, <decl><type ref="prev"/><name>y29</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>y30</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Spread input bits over the 6 input words x*.
	 */</comment>
	<expr_stmt><expr><name>x1</name> <operator>=</operator> <name>r0</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x11111111</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>x2</name> <operator>=</operator> <operator>(</operator><name>r0</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x11111111</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>x3</name> <operator>=</operator> <operator>(</operator><name>r0</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x11111111</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>x4</name> <operator>=</operator> <operator>(</operator><name>r0</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x11111111</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>x1</name> <operator>=</operator> <operator>(</operator><name>x1</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>-</operator> <name>x1</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>x2</name> <operator>=</operator> <operator>(</operator><name>x2</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>-</operator> <name>x2</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>x3</name> <operator>=</operator> <operator>(</operator><name>x3</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>-</operator> <name>x3</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>x4</name> <operator>=</operator> <operator>(</operator><name>x4</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>-</operator> <name>x4</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>x0</name> <operator>=</operator> <operator>(</operator><name>x4</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>x4</name> <operator>&gt;&gt;</operator> <literal type="number">28</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>x5</name> <operator>=</operator> <operator>(</operator><name>x1</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>x1</name> <operator>&lt;&lt;</operator> <literal type="number">28</literal><operator>)</operator></expr>;</expr_stmt>

	<comment type="block">/*
	 * XOR with the subkey for this round.
	 */</comment>
	<expr_stmt><expr><name>x0</name> <operator>^=</operator> <name><name>sk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>x1</name> <operator>^=</operator> <name><name>sk</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>x2</name> <operator>^=</operator> <name><name>sk</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>x3</name> <operator>^=</operator> <name><name>sk</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>x4</name> <operator>^=</operator> <name><name>sk</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>x5</name> <operator>^=</operator> <name><name>sk</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

	<comment type="block">/*
	 * The T-boxes are done in parallel, since they all use a
	 * "tree of multiplexer". We use "fake multiplexers":
	 *
	 *   y = a ^ (x &amp; b)
	 *
	 * computes y as either 'a' (if x == 0) or 'a ^ b' (if x == 1).
	 */</comment>
	<expr_stmt><expr><name>y0</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0xEFA72C4D</literal> <operator>^</operator> <operator>(</operator><name>x0</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0xEC7AC69C</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>y1</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0xAEAAEDFF</literal> <operator>^</operator> <operator>(</operator><name>x0</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x500FB821</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>y2</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x37396665</literal> <operator>^</operator> <operator>(</operator><name>x0</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x40EFA809</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>y3</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x68D7B833</literal> <operator>^</operator> <operator>(</operator><name>x0</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0xA5EC0B28</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>y4</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0xC9C755BB</literal> <operator>^</operator> <operator>(</operator><name>x0</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x252CF820</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>y5</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x73FC3606</literal> <operator>^</operator> <operator>(</operator><name>x0</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x40205801</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>y6</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0xA2A0A918</literal> <operator>^</operator> <operator>(</operator><name>x0</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0xE220F929</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>y7</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x8222BD90</literal> <operator>^</operator> <operator>(</operator><name>x0</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x44A3F9E1</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>y8</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0xD6B6AC77</literal> <operator>^</operator> <operator>(</operator><name>x0</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x794F104A</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>y9</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x3069300C</literal> <operator>^</operator> <operator>(</operator><name>x0</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x026F320B</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>y10</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x6CE0D5CC</literal> <operator>^</operator> <operator>(</operator><name>x0</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x7640B01A</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>y11</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x59A9A22D</literal> <operator>^</operator> <operator>(</operator><name>x0</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x238F1572</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>y12</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0xAC6D0BD4</literal> <operator>^</operator> <operator>(</operator><name>x0</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x7A63C083</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>y13</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x21C83200</literal> <operator>^</operator> <operator>(</operator><name>x0</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x11CCA000</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>y14</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0xA0E62188</literal> <operator>^</operator> <operator>(</operator><name>x0</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x202F69AA</literal><operator>)</operator></expr>;</expr_stmt>
	<comment type="block">/* y15 = (uint32_t)0x00000000 ^ (x0 &amp; (uint32_t)0x00000000); */</comment>
	<expr_stmt><expr><name>y16</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0xAF7D655A</literal> <operator>^</operator> <operator>(</operator><name>x0</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x51B33BE9</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>y17</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0xF0168AA3</literal> <operator>^</operator> <operator>(</operator><name>x0</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x3B0FE8AE</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>y18</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x90AA30C6</literal> <operator>^</operator> <operator>(</operator><name>x0</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x90BF8816</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>y19</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x5AB2750A</literal> <operator>^</operator> <operator>(</operator><name>x0</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x09E34F9B</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>y20</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x5391BE65</literal> <operator>^</operator> <operator>(</operator><name>x0</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x0103BE88</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>y21</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x93372BAF</literal> <operator>^</operator> <operator>(</operator><name>x0</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x49AC8E25</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>y22</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0xF288210C</literal> <operator>^</operator> <operator>(</operator><name>x0</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x922C313D</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>y23</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x920AF5C0</literal> <operator>^</operator> <operator>(</operator><name>x0</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x70EF31B0</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>y24</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x63D312C0</literal> <operator>^</operator> <operator>(</operator><name>x0</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x6A707100</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>y25</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x537B3006</literal> <operator>^</operator> <operator>(</operator><name>x0</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0xB97C9011</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>y26</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0xA2EFB0A5</literal> <operator>^</operator> <operator>(</operator><name>x0</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0xA320C959</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>y27</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0xBC8F96A5</literal> <operator>^</operator> <operator>(</operator><name>x0</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x6EA0AB4A</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>y28</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0xFAD176A5</literal> <operator>^</operator> <operator>(</operator><name>x0</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x6953DDF8</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>y29</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x665A14A3</literal> <operator>^</operator> <operator>(</operator><name>x0</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0xF74F3E2B</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>y30</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0xF2EFF0CC</literal> <operator>^</operator> <operator>(</operator><name>x0</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0xF0306CAD</literal><operator>)</operator></expr>;</expr_stmt>
	<comment type="block">/* y31 = (uint32_t)0x00000000 ^ (x0 &amp; (uint32_t)0x00000000); */</comment>

	<expr_stmt><expr><name>y0</name> <operator>=</operator> <name>y0</name> <operator>^</operator> <operator>(</operator><name>x1</name> <operator>&amp;</operator> <name>y1</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>y1</name> <operator>=</operator> <name>y2</name> <operator>^</operator> <operator>(</operator><name>x1</name> <operator>&amp;</operator> <name>y3</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>y2</name> <operator>=</operator> <name>y4</name> <operator>^</operator> <operator>(</operator><name>x1</name> <operator>&amp;</operator> <name>y5</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>y3</name> <operator>=</operator> <name>y6</name> <operator>^</operator> <operator>(</operator><name>x1</name> <operator>&amp;</operator> <name>y7</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>y4</name> <operator>=</operator> <name>y8</name> <operator>^</operator> <operator>(</operator><name>x1</name> <operator>&amp;</operator> <name>y9</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>y5</name> <operator>=</operator> <name>y10</name> <operator>^</operator> <operator>(</operator><name>x1</name> <operator>&amp;</operator> <name>y11</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>y6</name> <operator>=</operator> <name>y12</name> <operator>^</operator> <operator>(</operator><name>x1</name> <operator>&amp;</operator> <name>y13</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>y7</name> <operator>=</operator> <name>y14</name></expr>;</expr_stmt> <comment type="block">/* was: y14 ^ (x1 &amp; y15) */</comment>
	<expr_stmt><expr><name>y8</name> <operator>=</operator> <name>y16</name> <operator>^</operator> <operator>(</operator><name>x1</name> <operator>&amp;</operator> <name>y17</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>y9</name> <operator>=</operator> <name>y18</name> <operator>^</operator> <operator>(</operator><name>x1</name> <operator>&amp;</operator> <name>y19</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>y10</name> <operator>=</operator> <name>y20</name> <operator>^</operator> <operator>(</operator><name>x1</name> <operator>&amp;</operator> <name>y21</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>y11</name> <operator>=</operator> <name>y22</name> <operator>^</operator> <operator>(</operator><name>x1</name> <operator>&amp;</operator> <name>y23</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>y12</name> <operator>=</operator> <name>y24</name> <operator>^</operator> <operator>(</operator><name>x1</name> <operator>&amp;</operator> <name>y25</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>y13</name> <operator>=</operator> <name>y26</name> <operator>^</operator> <operator>(</operator><name>x1</name> <operator>&amp;</operator> <name>y27</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>y14</name> <operator>=</operator> <name>y28</name> <operator>^</operator> <operator>(</operator><name>x1</name> <operator>&amp;</operator> <name>y29</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>y15</name> <operator>=</operator> <name>y30</name></expr>;</expr_stmt> <comment type="block">/* was: y30 ^ (x1 &amp; y31) */</comment>

	<expr_stmt><expr><name>y0</name> <operator>=</operator> <name>y0</name> <operator>^</operator> <operator>(</operator><name>x2</name> <operator>&amp;</operator> <name>y1</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>y1</name> <operator>=</operator> <name>y2</name> <operator>^</operator> <operator>(</operator><name>x2</name> <operator>&amp;</operator> <name>y3</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>y2</name> <operator>=</operator> <name>y4</name> <operator>^</operator> <operator>(</operator><name>x2</name> <operator>&amp;</operator> <name>y5</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>y3</name> <operator>=</operator> <name>y6</name> <operator>^</operator> <operator>(</operator><name>x2</name> <operator>&amp;</operator> <name>y7</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>y4</name> <operator>=</operator> <name>y8</name> <operator>^</operator> <operator>(</operator><name>x2</name> <operator>&amp;</operator> <name>y9</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>y5</name> <operator>=</operator> <name>y10</name> <operator>^</operator> <operator>(</operator><name>x2</name> <operator>&amp;</operator> <name>y11</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>y6</name> <operator>=</operator> <name>y12</name> <operator>^</operator> <operator>(</operator><name>x2</name> <operator>&amp;</operator> <name>y13</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>y7</name> <operator>=</operator> <name>y14</name> <operator>^</operator> <operator>(</operator><name>x2</name> <operator>&amp;</operator> <name>y15</name><operator>)</operator></expr>;</expr_stmt>

	<expr_stmt><expr><name>y0</name> <operator>=</operator> <name>y0</name> <operator>^</operator> <operator>(</operator><name>x3</name> <operator>&amp;</operator> <name>y1</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>y1</name> <operator>=</operator> <name>y2</name> <operator>^</operator> <operator>(</operator><name>x3</name> <operator>&amp;</operator> <name>y3</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>y2</name> <operator>=</operator> <name>y4</name> <operator>^</operator> <operator>(</operator><name>x3</name> <operator>&amp;</operator> <name>y5</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>y3</name> <operator>=</operator> <name>y6</name> <operator>^</operator> <operator>(</operator><name>x3</name> <operator>&amp;</operator> <name>y7</name><operator>)</operator></expr>;</expr_stmt>

	<expr_stmt><expr><name>y0</name> <operator>=</operator> <name>y0</name> <operator>^</operator> <operator>(</operator><name>x4</name> <operator>&amp;</operator> <name>y1</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>y1</name> <operator>=</operator> <name>y2</name> <operator>^</operator> <operator>(</operator><name>x4</name> <operator>&amp;</operator> <name>y3</name><operator>)</operator></expr>;</expr_stmt>

	<expr_stmt><expr><name>y0</name> <operator>=</operator> <name>y0</name> <operator>^</operator> <operator>(</operator><name>x5</name> <operator>&amp;</operator> <name>y1</name><operator>)</operator></expr>;</expr_stmt>

	<comment type="block">/*
	 * The P permutation:
	 * -- Each bit move is converted into a mask + left rotation.
	 * -- Rotations that use the same movement are coalesced together.
	 * -- Left and right shifts are used as alternatives to a rotation
	 * where appropriate (this will help architectures that do not have
	 * a rotation opcode).
	 */</comment>
	<expr_stmt><expr><name>z0</name> <operator>=</operator> <operator>(</operator><name>y0</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x00000004</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>z0</name> <operator>|=</operator> <operator>(</operator><name>y0</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x00004000</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>z0</name> <operator>|=</operator> <call><name>rotl</name><argument_list>(<argument><expr><name>y0</name> <operator>&amp;</operator> <literal type="number">0x12020120</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>z0</name> <operator>|=</operator> <operator>(</operator><name>y0</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x00100000</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>z0</name> <operator>|=</operator> <operator>(</operator><name>y0</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x00008000</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">9</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>z0</name> <operator>|=</operator> <operator>(</operator><name>y0</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x04000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">22</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>z0</name> <operator>|=</operator> <operator>(</operator><name>y0</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x00000001</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">11</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>z0</name> <operator>|=</operator> <call><name>rotl</name><argument_list>(<argument><expr><name>y0</name> <operator>&amp;</operator> <literal type="number">0x20000200</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>z0</name> <operator>|=</operator> <operator>(</operator><name>y0</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x00200000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">19</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>z0</name> <operator>|=</operator> <operator>(</operator><name>y0</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x00000040</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>z0</name> <operator>|=</operator> <operator>(</operator><name>y0</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x00010000</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>z0</name> <operator>|=</operator> <operator>(</operator><name>y0</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x00000002</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>z0</name> <operator>|=</operator> <call><name>rotl</name><argument_list>(<argument><expr><name>y0</name> <operator>&amp;</operator> <literal type="number">0x40801800</literal></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>z0</name> <operator>|=</operator> <operator>(</operator><name>y0</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x00080000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>z0</name> <operator>|=</operator> <operator>(</operator><name>y0</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x00000010</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">21</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>z0</name> <operator>|=</operator> <operator>(</operator><name>y0</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x01000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>z0</name> <operator>|=</operator> <call><name>rotl</name><argument_list>(<argument><expr><name>y0</name> <operator>&amp;</operator> <literal type="number">0x88000008</literal></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>z0</name> <operator>|=</operator> <operator>(</operator><name>y0</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x00000480</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>z0</name> <operator>|=</operator> <operator>(</operator><name>y0</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x00442000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>
	<return>return <expr><name>z0</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Process one block through 16 successive rounds, omitting the swap
 * in the final round.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>process_block_unit</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pl</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>sk_exp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>l</name> <operator>=</operator> <operator>*</operator><name>pl</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>*</operator><name>pr</name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>uint32_t</name></type> <name>t</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>t</name> <operator>=</operator> <name>l</name> <operator>^</operator> <call><name>Fconf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>sk_exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>l</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>r</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>sk_exp</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><operator>*</operator><name>pl</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>pr</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* see inner.h */</comment>
<function><type><name>void</name></type>
<name>br_des_ct_process_block</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>num_rounds</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>sk_exp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>block</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>br_dec32be</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>br_dec32be</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_des_do_IP</name><argument_list>(<argument><expr><operator>&amp;</operator><name>l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>num_rounds</name> <operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>process_block_unit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><name>sk_exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>sk_exp</name> <operator>+=</operator> <literal type="number">96</literal></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>br_des_do_invIP</name><argument_list>(<argument><expr><operator>&amp;</operator><name>l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_enc32be</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_enc32be</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* see inner.h */</comment>
<function><type><name>void</name></type>
<name>br_des_ct_skey_expand</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>sk_exp</name></decl></parameter>,
	<parameter><decl><type><name>unsigned</name></type> <name>num_rounds</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>num_rounds</name> <operator>&lt;&lt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>num_rounds</name> <operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>uint32_t</name></type> <name>v</name></decl>, <decl><type ref="prev"/><name>w0</name></decl>, <decl><type ref="prev"/><name>w1</name></decl>, <decl><type ref="prev"/><name>w2</name></decl>, <decl><type ref="prev"/><name>w3</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>*</operator><name>skey</name> <operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>w0</name> <operator>=</operator> <name>v</name> <operator>&amp;</operator> <literal type="number">0x11111111</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>w1</name> <operator>=</operator> <operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x11111111</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>w2</name> <operator>=</operator> <operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x11111111</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>w3</name> <operator>=</operator> <operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x11111111</literal></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>sk_exp</name> <operator>++</operator> <operator>=</operator> <operator>(</operator><name>w0</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>-</operator> <name>w0</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>sk_exp</name> <operator>++</operator> <operator>=</operator> <operator>(</operator><name>w1</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>-</operator> <name>w1</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>sk_exp</name> <operator>++</operator> <operator>=</operator> <operator>(</operator><name>w2</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>-</operator> <name>w2</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>sk_exp</name> <operator>++</operator> <operator>=</operator> <operator>(</operator><name>w3</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>-</operator> <name>w3</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>*</operator><name>skey</name> <operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>w0</name> <operator>=</operator> <name>v</name> <operator>&amp;</operator> <literal type="number">0x11111111</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>w1</name> <operator>=</operator> <operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x11111111</literal></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>sk_exp</name> <operator>++</operator> <operator>=</operator> <operator>(</operator><name>w0</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>-</operator> <name>w0</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>sk_exp</name> <operator>++</operator> <operator>=</operator> <operator>(</operator><name>w1</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>-</operator> <name>w1</name></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>
</unit>
