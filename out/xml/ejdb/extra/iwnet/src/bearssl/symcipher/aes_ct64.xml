<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/extra/iwnet/src/bearssl/symcipher/aes_ct64.c"><comment type="block">/*
 * Copyright (c) 2016 Thomas Pornin &lt;pornin@bolet.org&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining 
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>

<comment type="block">/* see inner.h */</comment>
<function><type><name>void</name></type>
<name>br_aes_ct64_bitslice_Sbox</name><parameter_list>(<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * This S-box implementation is a straightforward translation of
	 * the circuit described by Boyar and Peralta in "A new
	 * combinational logic minimization technique with applications
	 * to cryptology" (https://eprint.iacr.org/2009/191.pdf).
	 *
	 * Note that variables x* (input) and s* (output) are numbered
	 * in "reverse" order (x0 is the high bit, x7 is the low bit).
	 */</comment>

	<decl_stmt><decl><type><name>uint64_t</name></type> <name>x0</name></decl>, <decl><type ref="prev"/><name>x1</name></decl>, <decl><type ref="prev"/><name>x2</name></decl>, <decl><type ref="prev"/><name>x3</name></decl>, <decl><type ref="prev"/><name>x4</name></decl>, <decl><type ref="prev"/><name>x5</name></decl>, <decl><type ref="prev"/><name>x6</name></decl>, <decl><type ref="prev"/><name>x7</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>y1</name></decl>, <decl><type ref="prev"/><name>y2</name></decl>, <decl><type ref="prev"/><name>y3</name></decl>, <decl><type ref="prev"/><name>y4</name></decl>, <decl><type ref="prev"/><name>y5</name></decl>, <decl><type ref="prev"/><name>y6</name></decl>, <decl><type ref="prev"/><name>y7</name></decl>, <decl><type ref="prev"/><name>y8</name></decl>, <decl><type ref="prev"/><name>y9</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>y10</name></decl>, <decl><type ref="prev"/><name>y11</name></decl>, <decl><type ref="prev"/><name>y12</name></decl>, <decl><type ref="prev"/><name>y13</name></decl>, <decl><type ref="prev"/><name>y14</name></decl>, <decl><type ref="prev"/><name>y15</name></decl>, <decl><type ref="prev"/><name>y16</name></decl>, <decl><type ref="prev"/><name>y17</name></decl>, <decl><type ref="prev"/><name>y18</name></decl>, <decl><type ref="prev"/><name>y19</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>y20</name></decl>, <decl><type ref="prev"/><name>y21</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>z0</name></decl>, <decl><type ref="prev"/><name>z1</name></decl>, <decl><type ref="prev"/><name>z2</name></decl>, <decl><type ref="prev"/><name>z3</name></decl>, <decl><type ref="prev"/><name>z4</name></decl>, <decl><type ref="prev"/><name>z5</name></decl>, <decl><type ref="prev"/><name>z6</name></decl>, <decl><type ref="prev"/><name>z7</name></decl>, <decl><type ref="prev"/><name>z8</name></decl>, <decl><type ref="prev"/><name>z9</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>z10</name></decl>, <decl><type ref="prev"/><name>z11</name></decl>, <decl><type ref="prev"/><name>z12</name></decl>, <decl><type ref="prev"/><name>z13</name></decl>, <decl><type ref="prev"/><name>z14</name></decl>, <decl><type ref="prev"/><name>z15</name></decl>, <decl><type ref="prev"/><name>z16</name></decl>, <decl><type ref="prev"/><name>z17</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>, <decl><type ref="prev"/><name>t5</name></decl>, <decl><type ref="prev"/><name>t6</name></decl>, <decl><type ref="prev"/><name>t7</name></decl>, <decl><type ref="prev"/><name>t8</name></decl>, <decl><type ref="prev"/><name>t9</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>t10</name></decl>, <decl><type ref="prev"/><name>t11</name></decl>, <decl><type ref="prev"/><name>t12</name></decl>, <decl><type ref="prev"/><name>t13</name></decl>, <decl><type ref="prev"/><name>t14</name></decl>, <decl><type ref="prev"/><name>t15</name></decl>, <decl><type ref="prev"/><name>t16</name></decl>, <decl><type ref="prev"/><name>t17</name></decl>, <decl><type ref="prev"/><name>t18</name></decl>, <decl><type ref="prev"/><name>t19</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>t20</name></decl>, <decl><type ref="prev"/><name>t21</name></decl>, <decl><type ref="prev"/><name>t22</name></decl>, <decl><type ref="prev"/><name>t23</name></decl>, <decl><type ref="prev"/><name>t24</name></decl>, <decl><type ref="prev"/><name>t25</name></decl>, <decl><type ref="prev"/><name>t26</name></decl>, <decl><type ref="prev"/><name>t27</name></decl>, <decl><type ref="prev"/><name>t28</name></decl>, <decl><type ref="prev"/><name>t29</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>t30</name></decl>, <decl><type ref="prev"/><name>t31</name></decl>, <decl><type ref="prev"/><name>t32</name></decl>, <decl><type ref="prev"/><name>t33</name></decl>, <decl><type ref="prev"/><name>t34</name></decl>, <decl><type ref="prev"/><name>t35</name></decl>, <decl><type ref="prev"/><name>t36</name></decl>, <decl><type ref="prev"/><name>t37</name></decl>, <decl><type ref="prev"/><name>t38</name></decl>, <decl><type ref="prev"/><name>t39</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>t40</name></decl>, <decl><type ref="prev"/><name>t41</name></decl>, <decl><type ref="prev"/><name>t42</name></decl>, <decl><type ref="prev"/><name>t43</name></decl>, <decl><type ref="prev"/><name>t44</name></decl>, <decl><type ref="prev"/><name>t45</name></decl>, <decl><type ref="prev"/><name>t46</name></decl>, <decl><type ref="prev"/><name>t47</name></decl>, <decl><type ref="prev"/><name>t48</name></decl>, <decl><type ref="prev"/><name>t49</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>t50</name></decl>, <decl><type ref="prev"/><name>t51</name></decl>, <decl><type ref="prev"/><name>t52</name></decl>, <decl><type ref="prev"/><name>t53</name></decl>, <decl><type ref="prev"/><name>t54</name></decl>, <decl><type ref="prev"/><name>t55</name></decl>, <decl><type ref="prev"/><name>t56</name></decl>, <decl><type ref="prev"/><name>t57</name></decl>, <decl><type ref="prev"/><name>t58</name></decl>, <decl><type ref="prev"/><name>t59</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>t60</name></decl>, <decl><type ref="prev"/><name>t61</name></decl>, <decl><type ref="prev"/><name>t62</name></decl>, <decl><type ref="prev"/><name>t63</name></decl>, <decl><type ref="prev"/><name>t64</name></decl>, <decl><type ref="prev"/><name>t65</name></decl>, <decl><type ref="prev"/><name>t66</name></decl>, <decl><type ref="prev"/><name>t67</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>s0</name></decl>, <decl><type ref="prev"/><name>s1</name></decl>, <decl><type ref="prev"/><name>s2</name></decl>, <decl><type ref="prev"/><name>s3</name></decl>, <decl><type ref="prev"/><name>s4</name></decl>, <decl><type ref="prev"/><name>s5</name></decl>, <decl><type ref="prev"/><name>s6</name></decl>, <decl><type ref="prev"/><name>s7</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>x0</name> <operator>=</operator> <name><name>q</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>x1</name> <operator>=</operator> <name><name>q</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>x2</name> <operator>=</operator> <name><name>q</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>x3</name> <operator>=</operator> <name><name>q</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>x4</name> <operator>=</operator> <name><name>q</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>x5</name> <operator>=</operator> <name><name>q</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>x6</name> <operator>=</operator> <name><name>q</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>x7</name> <operator>=</operator> <name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Top linear transformation.
	 */</comment>
	<expr_stmt><expr><name>y14</name> <operator>=</operator> <name>x3</name> <operator>^</operator> <name>x5</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>y13</name> <operator>=</operator> <name>x0</name> <operator>^</operator> <name>x6</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>y9</name> <operator>=</operator> <name>x0</name> <operator>^</operator> <name>x3</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>y8</name> <operator>=</operator> <name>x0</name> <operator>^</operator> <name>x5</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t0</name> <operator>=</operator> <name>x1</name> <operator>^</operator> <name>x2</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>y1</name> <operator>=</operator> <name>t0</name> <operator>^</operator> <name>x7</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>y4</name> <operator>=</operator> <name>y1</name> <operator>^</operator> <name>x3</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>y12</name> <operator>=</operator> <name>y13</name> <operator>^</operator> <name>y14</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>y2</name> <operator>=</operator> <name>y1</name> <operator>^</operator> <name>x0</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>y5</name> <operator>=</operator> <name>y1</name> <operator>^</operator> <name>x6</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>y3</name> <operator>=</operator> <name>y5</name> <operator>^</operator> <name>y8</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t1</name> <operator>=</operator> <name>x4</name> <operator>^</operator> <name>y12</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>y15</name> <operator>=</operator> <name>t1</name> <operator>^</operator> <name>x5</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>y20</name> <operator>=</operator> <name>t1</name> <operator>^</operator> <name>x1</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>y6</name> <operator>=</operator> <name>y15</name> <operator>^</operator> <name>x7</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>y10</name> <operator>=</operator> <name>y15</name> <operator>^</operator> <name>t0</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>y11</name> <operator>=</operator> <name>y20</name> <operator>^</operator> <name>y9</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>y7</name> <operator>=</operator> <name>x7</name> <operator>^</operator> <name>y11</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>y17</name> <operator>=</operator> <name>y10</name> <operator>^</operator> <name>y11</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>y19</name> <operator>=</operator> <name>y10</name> <operator>^</operator> <name>y8</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>y16</name> <operator>=</operator> <name>t0</name> <operator>^</operator> <name>y11</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>y21</name> <operator>=</operator> <name>y13</name> <operator>^</operator> <name>y16</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>y18</name> <operator>=</operator> <name>x0</name> <operator>^</operator> <name>y16</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Non-linear section.
	 */</comment>
	<expr_stmt><expr><name>t2</name> <operator>=</operator> <name>y12</name> <operator>&amp;</operator> <name>y15</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t3</name> <operator>=</operator> <name>y3</name> <operator>&amp;</operator> <name>y6</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t4</name> <operator>=</operator> <name>t3</name> <operator>^</operator> <name>t2</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t5</name> <operator>=</operator> <name>y4</name> <operator>&amp;</operator> <name>x7</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t6</name> <operator>=</operator> <name>t5</name> <operator>^</operator> <name>t2</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t7</name> <operator>=</operator> <name>y13</name> <operator>&amp;</operator> <name>y16</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t8</name> <operator>=</operator> <name>y5</name> <operator>&amp;</operator> <name>y1</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t9</name> <operator>=</operator> <name>t8</name> <operator>^</operator> <name>t7</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t10</name> <operator>=</operator> <name>y2</name> <operator>&amp;</operator> <name>y7</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t11</name> <operator>=</operator> <name>t10</name> <operator>^</operator> <name>t7</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t12</name> <operator>=</operator> <name>y9</name> <operator>&amp;</operator> <name>y11</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t13</name> <operator>=</operator> <name>y14</name> <operator>&amp;</operator> <name>y17</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t14</name> <operator>=</operator> <name>t13</name> <operator>^</operator> <name>t12</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t15</name> <operator>=</operator> <name>y8</name> <operator>&amp;</operator> <name>y10</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t16</name> <operator>=</operator> <name>t15</name> <operator>^</operator> <name>t12</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t17</name> <operator>=</operator> <name>t4</name> <operator>^</operator> <name>t14</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t18</name> <operator>=</operator> <name>t6</name> <operator>^</operator> <name>t16</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t19</name> <operator>=</operator> <name>t9</name> <operator>^</operator> <name>t14</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t20</name> <operator>=</operator> <name>t11</name> <operator>^</operator> <name>t16</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t21</name> <operator>=</operator> <name>t17</name> <operator>^</operator> <name>y20</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t22</name> <operator>=</operator> <name>t18</name> <operator>^</operator> <name>y19</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t23</name> <operator>=</operator> <name>t19</name> <operator>^</operator> <name>y21</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t24</name> <operator>=</operator> <name>t20</name> <operator>^</operator> <name>y18</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>t25</name> <operator>=</operator> <name>t21</name> <operator>^</operator> <name>t22</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t26</name> <operator>=</operator> <name>t21</name> <operator>&amp;</operator> <name>t23</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t27</name> <operator>=</operator> <name>t24</name> <operator>^</operator> <name>t26</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t28</name> <operator>=</operator> <name>t25</name> <operator>&amp;</operator> <name>t27</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t29</name> <operator>=</operator> <name>t28</name> <operator>^</operator> <name>t22</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t30</name> <operator>=</operator> <name>t23</name> <operator>^</operator> <name>t24</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t31</name> <operator>=</operator> <name>t22</name> <operator>^</operator> <name>t26</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t32</name> <operator>=</operator> <name>t31</name> <operator>&amp;</operator> <name>t30</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t33</name> <operator>=</operator> <name>t32</name> <operator>^</operator> <name>t24</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t34</name> <operator>=</operator> <name>t23</name> <operator>^</operator> <name>t33</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t35</name> <operator>=</operator> <name>t27</name> <operator>^</operator> <name>t33</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t36</name> <operator>=</operator> <name>t24</name> <operator>&amp;</operator> <name>t35</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t37</name> <operator>=</operator> <name>t36</name> <operator>^</operator> <name>t34</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t38</name> <operator>=</operator> <name>t27</name> <operator>^</operator> <name>t36</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t39</name> <operator>=</operator> <name>t29</name> <operator>&amp;</operator> <name>t38</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t40</name> <operator>=</operator> <name>t25</name> <operator>^</operator> <name>t39</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>t41</name> <operator>=</operator> <name>t40</name> <operator>^</operator> <name>t37</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t42</name> <operator>=</operator> <name>t29</name> <operator>^</operator> <name>t33</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t43</name> <operator>=</operator> <name>t29</name> <operator>^</operator> <name>t40</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t44</name> <operator>=</operator> <name>t33</name> <operator>^</operator> <name>t37</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t45</name> <operator>=</operator> <name>t42</name> <operator>^</operator> <name>t41</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>z0</name> <operator>=</operator> <name>t44</name> <operator>&amp;</operator> <name>y15</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>z1</name> <operator>=</operator> <name>t37</name> <operator>&amp;</operator> <name>y6</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>z2</name> <operator>=</operator> <name>t33</name> <operator>&amp;</operator> <name>x7</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>z3</name> <operator>=</operator> <name>t43</name> <operator>&amp;</operator> <name>y16</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>z4</name> <operator>=</operator> <name>t40</name> <operator>&amp;</operator> <name>y1</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>z5</name> <operator>=</operator> <name>t29</name> <operator>&amp;</operator> <name>y7</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>z6</name> <operator>=</operator> <name>t42</name> <operator>&amp;</operator> <name>y11</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>z7</name> <operator>=</operator> <name>t45</name> <operator>&amp;</operator> <name>y17</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>z8</name> <operator>=</operator> <name>t41</name> <operator>&amp;</operator> <name>y10</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>z9</name> <operator>=</operator> <name>t44</name> <operator>&amp;</operator> <name>y12</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>z10</name> <operator>=</operator> <name>t37</name> <operator>&amp;</operator> <name>y3</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>z11</name> <operator>=</operator> <name>t33</name> <operator>&amp;</operator> <name>y4</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>z12</name> <operator>=</operator> <name>t43</name> <operator>&amp;</operator> <name>y13</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>z13</name> <operator>=</operator> <name>t40</name> <operator>&amp;</operator> <name>y5</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>z14</name> <operator>=</operator> <name>t29</name> <operator>&amp;</operator> <name>y2</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>z15</name> <operator>=</operator> <name>t42</name> <operator>&amp;</operator> <name>y9</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>z16</name> <operator>=</operator> <name>t45</name> <operator>&amp;</operator> <name>y14</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>z17</name> <operator>=</operator> <name>t41</name> <operator>&amp;</operator> <name>y8</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Bottom linear transformation.
	 */</comment>
	<expr_stmt><expr><name>t46</name> <operator>=</operator> <name>z15</name> <operator>^</operator> <name>z16</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t47</name> <operator>=</operator> <name>z10</name> <operator>^</operator> <name>z11</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t48</name> <operator>=</operator> <name>z5</name> <operator>^</operator> <name>z13</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t49</name> <operator>=</operator> <name>z9</name> <operator>^</operator> <name>z10</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t50</name> <operator>=</operator> <name>z2</name> <operator>^</operator> <name>z12</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t51</name> <operator>=</operator> <name>z2</name> <operator>^</operator> <name>z5</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t52</name> <operator>=</operator> <name>z7</name> <operator>^</operator> <name>z8</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t53</name> <operator>=</operator> <name>z0</name> <operator>^</operator> <name>z3</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t54</name> <operator>=</operator> <name>z6</name> <operator>^</operator> <name>z7</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t55</name> <operator>=</operator> <name>z16</name> <operator>^</operator> <name>z17</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t56</name> <operator>=</operator> <name>z12</name> <operator>^</operator> <name>t48</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t57</name> <operator>=</operator> <name>t50</name> <operator>^</operator> <name>t53</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t58</name> <operator>=</operator> <name>z4</name> <operator>^</operator> <name>t46</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t59</name> <operator>=</operator> <name>z3</name> <operator>^</operator> <name>t54</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t60</name> <operator>=</operator> <name>t46</name> <operator>^</operator> <name>t57</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t61</name> <operator>=</operator> <name>z14</name> <operator>^</operator> <name>t57</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t62</name> <operator>=</operator> <name>t52</name> <operator>^</operator> <name>t58</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t63</name> <operator>=</operator> <name>t49</name> <operator>^</operator> <name>t58</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t64</name> <operator>=</operator> <name>z4</name> <operator>^</operator> <name>t59</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t65</name> <operator>=</operator> <name>t61</name> <operator>^</operator> <name>t62</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t66</name> <operator>=</operator> <name>z1</name> <operator>^</operator> <name>t63</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>s0</name> <operator>=</operator> <name>t59</name> <operator>^</operator> <name>t63</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>s6</name> <operator>=</operator> <name>t56</name> <operator>^</operator> <operator>~</operator><name>t62</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>s7</name> <operator>=</operator> <name>t48</name> <operator>^</operator> <operator>~</operator><name>t60</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t67</name> <operator>=</operator> <name>t64</name> <operator>^</operator> <name>t65</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>s3</name> <operator>=</operator> <name>t53</name> <operator>^</operator> <name>t66</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>s4</name> <operator>=</operator> <name>t51</name> <operator>^</operator> <name>t66</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>s5</name> <operator>=</operator> <name>t47</name> <operator>^</operator> <name>t65</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>s1</name> <operator>=</operator> <name>t64</name> <operator>^</operator> <operator>~</operator><name>s3</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>s2</name> <operator>=</operator> <name>t55</name> <operator>^</operator> <operator>~</operator><name>t67</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>q</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>s0</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>q</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>s1</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>q</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>s2</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>q</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>s3</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>q</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>s4</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>q</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>s5</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>q</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>s6</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>s7</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* see inner.h */</comment>
<function><type><name>void</name></type>
<name>br_aes_ct64_ortho</name><parameter_list>(<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SWAPN</name><parameter_list>(<parameter><type><name>cl</name></type></parameter>, <parameter><type><name>ch</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>do { \
		uint64_t a, b; \
		a = (x); \
		b = (y); \
		(x) = (a &amp; (uint64_t)cl) | ((b &amp; (uint64_t)cl) &lt;&lt; (s)); \
		(y) = ((a &amp; (uint64_t)ch) &gt;&gt; (s)) | (b &amp; (uint64_t)ch); \
	} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SWAP2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>SWAPN(0x5555555555555555, 0xAAAAAAAAAAAAAAAA,  1, x, y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SWAP4</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>SWAPN(0x3333333333333333, 0xCCCCCCCCCCCCCCCC,  2, x, y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SWAP8</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>SWAPN(0x0F0F0F0F0F0F0F0F, 0xF0F0F0F0F0F0F0F0,  4, x, y)</cpp:value></cpp:define>

	<expr_stmt><expr><call><name>SWAP2</name><argument_list>(<argument><expr><name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>q</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SWAP2</name><argument_list>(<argument><expr><name><name>q</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>q</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SWAP2</name><argument_list>(<argument><expr><name><name>q</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>q</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SWAP2</name><argument_list>(<argument><expr><name><name>q</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>q</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SWAP4</name><argument_list>(<argument><expr><name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>q</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SWAP4</name><argument_list>(<argument><expr><name><name>q</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>q</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SWAP4</name><argument_list>(<argument><expr><name><name>q</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>q</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SWAP4</name><argument_list>(<argument><expr><name><name>q</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>q</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SWAP8</name><argument_list>(<argument><expr><name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>q</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SWAP8</name><argument_list>(<argument><expr><name><name>q</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>q</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SWAP8</name><argument_list>(<argument><expr><name><name>q</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>q</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SWAP8</name><argument_list>(<argument><expr><name><name>q</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>q</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* see inner.h */</comment>
<function><type><name>void</name></type>
<name>br_aes_ct64_interleave_in</name><parameter_list>(<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>q0</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>q1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>x0</name></decl>, <decl><type ref="prev"/><name>x1</name></decl>, <decl><type ref="prev"/><name>x2</name></decl>, <decl><type ref="prev"/><name>x3</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>x0</name> <operator>=</operator> <name><name>w</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>x1</name> <operator>=</operator> <name><name>w</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>x2</name> <operator>=</operator> <name><name>w</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>x3</name> <operator>=</operator> <name><name>w</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>x0</name> <operator>|=</operator> <operator>(</operator><name>x0</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>x1</name> <operator>|=</operator> <operator>(</operator><name>x1</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>x2</name> <operator>|=</operator> <operator>(</operator><name>x2</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>x3</name> <operator>|=</operator> <operator>(</operator><name>x3</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>x0</name> <operator>&amp;=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0x0000FFFF0000FFFF</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>x1</name> <operator>&amp;=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0x0000FFFF0000FFFF</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>x2</name> <operator>&amp;=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0x0000FFFF0000FFFF</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>x3</name> <operator>&amp;=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0x0000FFFF0000FFFF</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>x0</name> <operator>|=</operator> <operator>(</operator><name>x0</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>x1</name> <operator>|=</operator> <operator>(</operator><name>x1</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>x2</name> <operator>|=</operator> <operator>(</operator><name>x2</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>x3</name> <operator>|=</operator> <operator>(</operator><name>x3</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>x0</name> <operator>&amp;=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0x00FF00FF00FF00FF</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>x1</name> <operator>&amp;=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0x00FF00FF00FF00FF</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>x2</name> <operator>&amp;=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0x00FF00FF00FF00FF</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>x3</name> <operator>&amp;=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0x00FF00FF00FF00FF</literal></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>q0</name> <operator>=</operator> <name>x0</name> <operator>|</operator> <operator>(</operator><name>x2</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>q1</name> <operator>=</operator> <name>x1</name> <operator>|</operator> <operator>(</operator><name>x3</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* see inner.h */</comment>
<function><type><name>void</name></type>
<name>br_aes_ct64_interleave_out</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>q0</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>q1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>x0</name></decl>, <decl><type ref="prev"/><name>x1</name></decl>, <decl><type ref="prev"/><name>x2</name></decl>, <decl><type ref="prev"/><name>x3</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>x0</name> <operator>=</operator> <name>q0</name> <operator>&amp;</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0x00FF00FF00FF00FF</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>x1</name> <operator>=</operator> <name>q1</name> <operator>&amp;</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0x00FF00FF00FF00FF</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>x2</name> <operator>=</operator> <operator>(</operator><name>q0</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0x00FF00FF00FF00FF</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>x3</name> <operator>=</operator> <operator>(</operator><name>q1</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0x00FF00FF00FF00FF</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>x0</name> <operator>|=</operator> <operator>(</operator><name>x0</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>x1</name> <operator>|=</operator> <operator>(</operator><name>x1</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>x2</name> <operator>|=</operator> <operator>(</operator><name>x2</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>x3</name> <operator>|=</operator> <operator>(</operator><name>x3</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>x0</name> <operator>&amp;=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0x0000FFFF0000FFFF</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>x1</name> <operator>&amp;=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0x0000FFFF0000FFFF</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>x2</name> <operator>&amp;=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0x0000FFFF0000FFFF</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>x3</name> <operator>&amp;=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0x0000FFFF0000FFFF</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>w</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>x0</name> <operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>x0</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>w</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>x1</name> <operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>x1</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>w</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>x2</name> <operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>x2</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>w</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>x3</name> <operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>x3</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>Rcon</name><index>[]</index></name> <init>= <expr><block>{
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x1B</literal></expr>, <expr><literal type="number">0x36</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>uint32_t</name></type>
<name>sub_word</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>q</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>q</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_aes_ct64_ortho</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_aes_ct64_bitslice_Sbox</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_aes_ct64_ortho</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* see inner.h */</comment>
<function><type><name>unsigned</name></type>
<name>br_aes_ct64_keysched</name><parameter_list>(<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>comp_skey</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>key_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>num_rounds</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>nk</name></decl>, <decl><type ref="prev"/><name>nkf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>skey</name><index>[<expr><literal type="number">60</literal></expr>]</index></name></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name>key_len</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><literal type="number">16</literal></expr>:</case>
		<expr_stmt><expr><name>num_rounds</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><literal type="number">24</literal></expr>:</case>
		<expr_stmt><expr><name>num_rounds</name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><literal type="number">32</literal></expr>:</case>
		<expr_stmt><expr><name>num_rounds</name> <operator>=</operator> <literal type="number">14</literal></expr>;</expr_stmt>
		<break>break;</break>
	<default>default:</default>
		<comment type="block">/* abort(); */</comment>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></switch>
	<expr_stmt><expr><name>nk</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>key_len</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>nkf</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>num_rounds</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_range_dec32le</name><argument_list>(<argument><expr><name>skey</name></expr></argument>, <argument><expr><operator>(</operator><name>key_len</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>skey</name><index>[<expr><operator>(</operator><name>key_len</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>nk</name></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nkf</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>tmp</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>sub_word</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call> <operator>^</operator> <name><name>Rcon</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>nk</name> <operator>&gt;</operator> <literal type="number">6</literal> <operator>&amp;&amp;</operator> <name>j</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>sub_word</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>tmp</name> <operator>^=</operator> <name><name>skey</name><index>[<expr><name>i</name> <operator>-</operator> <name>nk</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>skey</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>++</operator> <name>j</name> <operator>==</operator> <name>nk</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>k</name> <operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nkf</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr><operator>,</operator> <expr><name>j</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>q</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>br_aes_ct64_interleave_in</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>q</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>skey</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>q</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>q</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>q</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>q</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>q</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>q</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>q</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>q</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>q</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>br_aes_ct64_ortho</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>comp_skey</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator>
			  <operator>(</operator><name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0x1111111111111111</literal><operator>)</operator>
			<operator>|</operator> <operator>(</operator><name><name>q</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0x2222222222222222</literal><operator>)</operator>
			<operator>|</operator> <operator>(</operator><name><name>q</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0x4444444444444444</literal><operator>)</operator>
			<operator>|</operator> <operator>(</operator><name><name>q</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0x8888888888888888</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>comp_skey</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator>
			  <operator>(</operator><name><name>q</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0x1111111111111111</literal><operator>)</operator>
			<operator>|</operator> <operator>(</operator><name><name>q</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0x2222222222222222</literal><operator>)</operator>
			<operator>|</operator> <operator>(</operator><name><name>q</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0x4444444444444444</literal><operator>)</operator>
			<operator>|</operator> <operator>(</operator><name><name>q</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0x8888888888888888</literal><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>num_rounds</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* see inner.h */</comment>
<function><type><name>void</name></type>
<name>br_aes_ct64_skey_expand</name><parameter_list>(<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>,
	<parameter><decl><type><name>unsigned</name></type> <name>num_rounds</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>comp_skey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>num_rounds</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr><operator>,</operator> <expr><name>v</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>uint64_t</name></type> <name>x0</name></decl>, <decl><type ref="prev"/><name>x1</name></decl>, <decl><type ref="prev"/><name>x2</name></decl>, <decl><type ref="prev"/><name>x3</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>x0</name> <operator>=</operator> <name>x1</name> <operator>=</operator> <name>x2</name> <operator>=</operator> <name>x3</name> <operator>=</operator> <name><name>comp_skey</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>x0</name> <operator>&amp;=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0x1111111111111111</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>x1</name> <operator>&amp;=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0x2222222222222222</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>x2</name> <operator>&amp;=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0x4444444444444444</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>x3</name> <operator>&amp;=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0x8888888888888888</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>x1</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>x2</name> <operator>&gt;&gt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>x3</name> <operator>&gt;&gt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>skey</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>x0</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>-</operator> <name>x0</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>skey</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>x1</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>-</operator> <name>x1</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>skey</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>x2</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>-</operator> <name>x2</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>skey</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>x3</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>-</operator> <name>x3</name></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>
</unit>
