<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/extra/iwnet/src/bearssl/symcipher/poly1305_i15.c"><comment type="block">/*
 * Copyright (c) 2017 Thomas Pornin &lt;pornin@bolet.org&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining 
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>

<comment type="block">/*
 * This is a "reference" implementation of Poly1305 that uses the
 * generic "i15" code for big integers. It is slow, but it handles all
 * big-integer operations with generic code, thereby avoiding most
 * tricky situations with carry propagation and modular reduction.
 */</comment>

<comment type="block">/*
 * Modulus: 2^130-5.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>P1305</name><index>[]</index></name> <init>= <expr><block>{
	<expr><literal type="number">0x008A</literal></expr>,
	<expr><literal type="number">0x7FFB</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x03FF</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * -p mod 2^15.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P0I</name></cpp:macro>   <cpp:value>0x4CCD</cpp:value></cpp:define>

<comment type="block">/*
 * R^2 mod p, for conversion to Montgomery representation (R = 2^135,
 * since we use 9 words of 15 bits each, and 15*9 = 135).
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>R2</name><index>[]</index></name> <init>= <expr><block>{
	<expr><literal type="number">0x008A</literal></expr>,
	<expr><literal type="number">0x6400</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0000</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Perform the inner processing of blocks for Poly1305. The "r" array
 * is in Montgomery representation, while the "a" array is not.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>poly1305_inner</name><parameter_list>(<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>rev</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>b</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint32_t</name></type> <name>ctl</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * If there is a partial block, right-pad it with zeros.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>tmp</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * Decode next block and apply the "high bit". Since
		 * decoding is little-endian, we must byte-swap the buffer.
		 */</comment>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name><name>rev</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">15</literal> <operator>-</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>br_i15_decode_mod</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><sizeof>sizeof <name>rev</name></sizeof></expr></argument>, <argument><expr><name>P1305</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>|=</operator> <literal type="number">0x0100</literal></expr>;</expr_stmt>

		<comment type="block">/*
		 * Add the accumulator to the decoded block (modular
		 * addition).
		 */</comment>
		<expr_stmt><expr><name>ctl</name> <operator>=</operator> <call><name>br_i15_add</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ctl</name> <operator>|=</operator> <call><name>NOT</name><argument_list>(<argument><expr><call><name>br_i15_sub</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>P1305</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>br_i15_sub</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>P1305</name></expr></argument>, <argument><expr><name>ctl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Multiply by r, result is the new accumulator value.
		 */</comment>
		<expr_stmt><expr><call><name>br_i15_montymul</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>P1305</name></expr></argument>, <argument><expr><name>P0I</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<comment type="block">/*
 * Byteswap a 16-byte value.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>byteswap16</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>unsigned</name></type> <name>x</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">15</literal> <operator>-</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">15</literal> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/* see bearssl_block.h */</comment>
<function><type><name>void</name></type>
<name>br_poly1305_i15_run</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>aad</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>aad_len</name></decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>br_chacha20_run</name></type> <name>ichacha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>encrypt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>pkey</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>foot</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>t</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>r</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>acc</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Compute the MAC key. The 'r' value is the first 16 bytes of
	 * pkey[].
	 */</comment>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pkey</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>pkey</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ichacha</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pkey</name></expr></argument>, <argument><expr><sizeof>sizeof <name>pkey</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * If encrypting, ChaCha20 must run first, followed by Poly1305.
	 * When decrypting, the operations are reversed.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>encrypt</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ichacha</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Run Poly1305. We must process the AAD, then ciphertext, then
	 * the footer (with the lengths). Note that the AAD and ciphertext
	 * are meant to be padded with zeros up to the next multiple of 16,
	 * and the length of the footer is 16 bytes as well.
	 */</comment>

	<comment type="block">/*
	 * Apply the "clamping" operation on the encoded 'r' value.
	 */</comment>
	<expr_stmt><expr><name><name>pkey</name><index>[ <expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0x0F</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pkey</name><index>[ <expr><literal type="number">7</literal></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0x0F</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pkey</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0x0F</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pkey</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0x0F</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pkey</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0xFC</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pkey</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0xFC</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pkey</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0xFC</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * Decode the clamped 'r' value. Decoding should use little-endian
	 * so we must byteswap the value first.
	 */</comment>
	<expr_stmt><expr><call><name>byteswap16</name><argument_list>(<argument><expr><name>pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_i15_decode_mod</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>pkey</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>P1305</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Convert 'r' to Montgomery representation.
	 */</comment>
	<expr_stmt><expr><call><name>br_i15_montymul</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>R2</name></expr></argument>, <argument><expr><name>P1305</name></expr></argument>, <argument><expr><name>P0I</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Accumulator is 0.
	 */</comment>
	<expr_stmt><expr><call><name>br_i15_zero</name><argument_list>(<argument><expr><name>acc</name></expr></argument>, <argument><expr><literal type="number">0x8A</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Process the additional authenticated data, ciphertext, and
	 * footer in due order.
	 */</comment>
	<expr_stmt><expr><call><name>br_enc64le</name><argument_list>(<argument><expr><name>foot</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>aad_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_enc64le</name><argument_list>(<argument><expr><name>foot</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>poly1305_inner</name><argument_list>(<argument><expr><name>acc</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>aad</name></expr></argument>, <argument><expr><name>aad_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>poly1305_inner</name><argument_list>(<argument><expr><name>acc</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>poly1305_inner</name><argument_list>(<argument><expr><name>acc</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>foot</name></expr></argument>, <argument><expr><sizeof>sizeof <name>foot</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Decode the value 's'. Again, a byteswap is needed.
	 */</comment>
	<expr_stmt><expr><call><name>byteswap16</name><argument_list>(<argument><expr><name>pkey</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_i15_decode_mod</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>pkey</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>P1305</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Add the value 's' to the accumulator. That addition is done
	 * modulo 2^128, so we just ignore the carry.
	 */</comment>
	<expr_stmt><expr><call><name>br_i15_add</name><argument_list>(<argument><expr><name>acc</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Encode the result (128 low bits) to the tag. Encoding should
	 * be little-endian.
	 */</comment>
	<expr_stmt><expr><call><name>br_i15_encode</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>acc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>byteswap16</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * If decrypting, then ChaCha20 runs _after_ Poly1305.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>encrypt</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ichacha</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
