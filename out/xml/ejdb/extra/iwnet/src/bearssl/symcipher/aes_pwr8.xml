<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/extra/iwnet/src/bearssl/symcipher/aes_pwr8.c"><comment type="block">/*
 * Copyright (c) 2017 Thomas Pornin &lt;pornin@bolet.org&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining 
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_POWER_ASM_MACROS</name></cpp:macro>   <cpp:value>1</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>

<comment type="block">/*
 * This code contains the AES key schedule implementation using the
 * POWER8 opcodes.
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_POWER8</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>key_schedule_128</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sk</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name></type> <name>cc</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>fmod</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x11B</literal></expr>, <expr><literal type="number">0x11B</literal></expr>, <expr><literal type="number">0x11B</literal></expr>, <expr><literal type="number">0x11B</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_POWER8_LE</name></expr></cpp:if>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>idx2be</name><index>[]</index></name> <init>= <expr><block>{
		<expr><literal type="number">0x03020100</literal></expr>, <expr><literal type="number">0x07060504</literal></expr>, <expr><literal type="number">0x0B0A0908</literal></expr>, <expr><literal type="number">0x0F0E0D0C</literal></expr>
	}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>cc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * We use the VSX instructions for loading and storing the
	 * key/subkeys, since they support unaligned accesses. The rest
	 * of the computation is VMX only. VMX register 0 is VSX
	 * register 32.
	 */</comment>
	<asm>asm <specifier>volatile</specifier> (

		<comment type="block">/*
		 * v0 = all-zero word
		 * v1 = constant -8 / +8, copied into four words
		 * v2 = current subkey
		 * v3 = Rcon (x4 words)
		 * v6 = constant 8, copied into four words
		 * v7 = constant 0x11B, copied into four words
		 * v8 = constant for byteswapping words
		 */</comment>
		vspltisw(0, 0)
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_POWER8_LE</name></expr></cpp:if>
		vspltisw(1, -8)
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		vspltisw(1, 8)
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		lxvw4x(34, 0, %[key])
		vspltisw(3, 1)
		vspltisw(6, 8)
		lxvw4x(39, 0, %[fmod])
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_POWER8_LE</name></expr></cpp:if>
		lxvw4x(40, 0, %[idx2be])
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<comment type="block">/*
		 * First subkey is a copy of the key itself.
		 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_POWER8_LE</name></expr></cpp:if>
		vperm(4, 2, 2, 8)
		stxvw4x(36, 0, %[sk])
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		stxvw4x(34, 0, %[sk])
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<comment type="block">/*
		 * Loop must run 10 times.
		 */</comment>
		li(%[cc], 10)
		mtctr(%[cc])
	label(loop)
		<comment type="block">/* Increment subkey address */</comment>
		addi(%[sk], %[sk], 16)

		<comment type="block">/* Compute SubWord(RotWord(temp)) xor Rcon  (into v4, splat) */</comment>
		vrlw(4, 2, 1)
		vsbox(4, 4)
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_POWER8_LE</name></expr></cpp:if>
		vxor(4, 4, 3)
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		vsldoi(5, 3, 0, 3)
		vxor(4, 4, 5)
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		vspltw(4, 4, 3)

		<comment type="block">/* XOR words for next subkey */</comment>
		vsldoi(5, 0, 2, 12)
		vxor(2, 2, 5)
		vsldoi(5, 0, 2, 12)
		vxor(2, 2, 5)
		vsldoi(5, 0, 2, 12)
		vxor(2, 2, 5)
		vxor(2, 2, 4)

		<comment type="block">/* Store next subkey */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_POWER8_LE</name></expr></cpp:if>
		vperm(4, 2, 2, 8)
		stxvw4x(36, 0, %[sk])
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		stxvw4x(34, 0, %[sk])
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<comment type="block">/* Update Rcon */</comment>
		vadduwm(3, 3, 3)
		vsrw(4, 3, 6)
		vsubuwm(4, 0, 4)
		vand(4, 4, 7)
		vxor(3, 3, 4)

		bdnz(loop)

: [sk] "+b" (sk), [cc] "+b" (cc)
: [key] "b" (key), [fmod] "b" (fmod)
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_POWER8_LE</name></expr></cpp:if>
	, [idx2be] "b" (idx2be)
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
: "v0", "v1", "v2", "v3", "v4", "v5", "v6", "v7", "ctr", "memory"
	);</asm>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>key_schedule_192</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sk</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name></type> <name>cc</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_POWER8_LE</name></expr></cpp:if>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>idx2be</name><index>[]</index></name> <init>= <expr><block>{
		<expr><literal type="number">0x03020100</literal></expr>, <expr><literal type="number">0x07060504</literal></expr>, <expr><literal type="number">0x0B0A0908</literal></expr>, <expr><literal type="number">0x0F0E0D0C</literal></expr>
	}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>cc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * We use the VSX instructions for loading and storing the
	 * key/subkeys, since they support unaligned accesses. The rest
	 * of the computation is VMX only. VMX register 0 is VSX
	 * register 32.
	 */</comment>
	<asm>asm <specifier>volatile</specifier> (

		<comment type="block">/*
		 * v0 = all-zero word
		 * v1 = constant -8 / +8, copied into four words
		 * v2, v3 = current subkey
		 * v5 = Rcon (x4 words) (already shifted on big-endian)
		 * v6 = constant 8, copied into four words
		 * v8 = constant for byteswapping words
		 *
		 * The left two words of v3 are ignored.
		 */</comment>
		vspltisw(0, 0)
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_POWER8_LE</name></expr></cpp:if>
		vspltisw(1, -8)
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		vspltisw(1, 8)
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		li(%[cc], 8)
		lxvw4x(34, 0, %[key])
		lxvw4x(35, %[cc], %[key])
		vsldoi(3, 3, 0, 8)
		vspltisw(5, 1)
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>BR_POWER8_LE</name></expr></cpp:if>
		vsldoi(5, 5, 0, 3)
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		vspltisw(6, 8)
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_POWER8_LE</name></expr></cpp:if>
		lxvw4x(40, 0, %[idx2be])
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<comment type="block">/*
		 * Loop must run 8 times. Each iteration produces 256
		 * bits of subkeys, with a 64-bit overlap.
		 */</comment>
		li(%[cc], 8)
		mtctr(%[cc])
		li(%[cc], 16)
	label(loop)

		<comment type="block">/*
		 * Last 6 words in v2:v3l. Compute next 6 words into
		 * v3r:v4.
		 */</comment>
		vrlw(10, 3, 1)
		vsbox(10, 10)
		vxor(10, 10, 5)
		vspltw(10, 10, 1)
		vsldoi(11, 0, 10, 8)

		vsldoi(12, 0, 2, 12)
		vxor(12, 2, 12)
		vsldoi(13, 0, 12, 12)
		vxor(12, 12, 13)
		vsldoi(13, 0, 12, 12)
		vxor(12, 12, 13)

		vspltw(13, 12, 3)
		vxor(13, 13, 3)
		vsldoi(14, 0, 3, 12)
		vxor(13, 13, 14)

		vsldoi(4, 12, 13, 8)
		vsldoi(14, 0, 3, 8)
		vsldoi(3, 14, 12, 8)

		vxor(3, 3, 11)
		vxor(4, 4, 10)

		<comment type="block">/*
		 * Update Rcon. Since for a 192-bit key, we use only 8
		 * such constants, we will not hit the field modulus,
		 * so a simple shift (addition) works well.
		 */</comment>
		vadduwm(5, 5, 5)

		<comment type="block">/*
		 * Write out the two left 128-bit words
		 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_POWER8_LE</name></expr></cpp:if>
		vperm(10, 2, 2, 8)
		vperm(11, 3, 3, 8)
		stxvw4x(42, 0, %[sk])
		stxvw4x(43, %[cc], %[sk])
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		stxvw4x(34, 0, %[sk])
		stxvw4x(35, %[cc], %[sk])
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		addi(%[sk], %[sk], 24)

		<comment type="block">/*
		 * Shift words for next iteration.
		 */</comment>
		vsldoi(2, 3, 4, 8)
		vsldoi(3, 4, 0, 8)

		bdnz(loop)

		<comment type="block">/*
		 * The loop wrote the first 50 subkey words, but we need
		 * to produce 52, so we must do one last write.
		 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_POWER8_LE</name></expr></cpp:if>
		vperm(10, 2, 2, 8)
		stxvw4x(42, 0, %[sk])
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		stxvw4x(34, 0, %[sk])
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

: [sk] "+b" (sk), [cc] "+b" (cc)
: [key] "b" (key)
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_POWER8_LE</name></expr></cpp:if>
	, [idx2be] "b" (idx2be)
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
: "v0", "v1", "v2", "v3", "v4", "v5", "v6", "v7",
  "v8", "v9", "v10", "v11", "v12", "v13", "v14", "ctr", "memory"
	);</asm>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>key_schedule_256</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sk</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name></type> <name>cc</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_POWER8_LE</name></expr></cpp:if>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>idx2be</name><index>[]</index></name> <init>= <expr><block>{
		<expr><literal type="number">0x03020100</literal></expr>, <expr><literal type="number">0x07060504</literal></expr>, <expr><literal type="number">0x0B0A0908</literal></expr>, <expr><literal type="number">0x0F0E0D0C</literal></expr>
	}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>cc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * We use the VSX instructions for loading and storing the
	 * key/subkeys, since they support unaligned accesses. The rest
	 * of the computation is VMX only. VMX register 0 is VSX
	 * register 32.
	 */</comment>
	<asm>asm <specifier>volatile</specifier> (

		<comment type="block">/*
		 * v0 = all-zero word
		 * v1 = constant -8 / +8, copied into four words
		 * v2, v3 = current subkey
		 * v6 = Rcon (x4 words) (already shifted on big-endian)
		 * v7 = constant 8, copied into four words
		 * v8 = constant for byteswapping words
		 *
		 * The left two words of v3 are ignored.
		 */</comment>
		vspltisw(0, 0)
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_POWER8_LE</name></expr></cpp:if>
		vspltisw(1, -8)
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		vspltisw(1, 8)
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		li(%[cc], 16)
		lxvw4x(34, 0, %[key])
		lxvw4x(35, %[cc], %[key])
		vspltisw(6, 1)
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>BR_POWER8_LE</name></expr></cpp:if>
		vsldoi(6, 6, 0, 3)
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		vspltisw(7, 8)
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_POWER8_LE</name></expr></cpp:if>
		lxvw4x(40, 0, %[idx2be])
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<comment type="block">/*
		 * Loop must run 7 times. Each iteration produces two
		 * subkeys.
		 */</comment>
		li(%[cc], 7)
		mtctr(%[cc])
		li(%[cc], 16)
	label(loop)

		<comment type="block">/*
		 * Current words are in v2:v3. Compute next word in v4.
		 */</comment>
		vrlw(10, 3, 1)
		vsbox(10, 10)
		vxor(10, 10, 6)
		vspltw(10, 10, 3)

		vsldoi(4, 0, 2, 12)
		vxor(4, 2, 4)
		vsldoi(5, 0, 4, 12)
		vxor(4, 4, 5)
		vsldoi(5, 0, 4, 12)
		vxor(4, 4, 5)
		vxor(4, 4, 10)

		<comment type="block">/*
		 * Then other word in v5.
		 */</comment>
		vsbox(10, 4)
		vspltw(10, 10, 3)

		vsldoi(5, 0, 3, 12)
		vxor(5, 3, 5)
		vsldoi(11, 0, 5, 12)
		vxor(5, 5, 11)
		vsldoi(11, 0, 5, 12)
		vxor(5, 5, 11)
		vxor(5, 5, 10)

		<comment type="block">/*
		 * Update Rcon. Since for a 256-bit key, we use only 7
		 * such constants, we will not hit the field modulus,
		 * so a simple shift (addition) works well.
		 */</comment>
		vadduwm(6, 6, 6)

		<comment type="block">/*
		 * Write out the two left 128-bit words
		 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_POWER8_LE</name></expr></cpp:if>
		vperm(10, 2, 2, 8)
		vperm(11, 3, 3, 8)
		stxvw4x(42, 0, %[sk])
		stxvw4x(43, %[cc], %[sk])
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		stxvw4x(34, 0, %[sk])
		stxvw4x(35, %[cc], %[sk])
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		addi(%[sk], %[sk], 32)

		<comment type="block">/*
		 * Replace v2:v3 with v4:v5.
		 */</comment>
		vxor(2, 0, 4)
		vxor(3, 0, 5)

		bdnz(loop)

		<comment type="block">/*
		 * The loop wrote the first 14 subkeys, but we need 15,
		 * so we must do an extra write.
		 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_POWER8_LE</name></expr></cpp:if>
		vperm(10, 2, 2, 8)
		stxvw4x(42, 0, %[sk])
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		stxvw4x(34, 0, %[sk])
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

: [sk] "+b" (sk), [cc] "+b" (cc)
: [key] "b" (key)
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_POWER8_LE</name></expr></cpp:if>
	, [idx2be] "b" (idx2be)
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
: "v0", "v1", "v2", "v3", "v4", "v5", "v6", "v7",
  "v8", "v9", "v10", "v11", "v12", "v13", "v14", "ctr", "memory"
	);</asm>
</block_content>}</block></function>

<comment type="block">/* see inner.h */</comment>
<function><type><name>int</name></type>
<name>br_aes_pwr8_supported</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* see inner.h */</comment>
<function><type><name>unsigned</name></type>
<name>br_aes_pwr8_keysched</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sk</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><literal type="number">16</literal></expr>:</case>
		<expr_stmt><expr><call><name>key_schedule_128</name><argument_list>(<argument><expr><name>sk</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">10</literal></expr>;</return>
	<case>case <expr><literal type="number">24</literal></expr>:</case>
		<expr_stmt><expr><call><name>key_schedule_192</name><argument_list>(<argument><expr><name>sk</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">12</literal></expr>;</return>
	<default>default:</default>
		<expr_stmt><expr><call><name>key_schedule_256</name><argument_list>(<argument><expr><name>sk</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">14</literal></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
