<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/extra/iwnet/src/bearssl/symcipher/chacha20_sse2.c"><comment type="block">/*
 * Copyright (c) 2017 Thomas Pornin &lt;pornin@bolet.org&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining 
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ENABLE_INTRINSICS</name></cpp:macro>   <cpp:value>1</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_SSE2</name></expr></cpp:if>

<comment type="block">/*
 * This file contains a ChaCha20 implementation that leverages SSE2
 * opcodes for better performance.
 */</comment>

<comment type="block">/* see bearssl_block.h */</comment>
<function><type><name>br_chacha20_run</name></type>
<name>br_chacha20_sse2_get</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * If using 64-bit mode, then SSE2 opcodes should be automatically
	 * available, since they are part of the ABI.
	 *
	 * In 32-bit mode, we use CPUID to detect the SSE2 feature.
	 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_amd64</name></expr></cpp:if>
	<return>return <expr><operator>&amp;</operator><name>br_chacha20_sse2_run</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

	<comment type="block">/*
	 * SSE2 support is indicated by bit 26 in EDX.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>br_cpuid</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0x04000000</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>&amp;</operator><name>br_chacha20_sse2_run</name></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<decl_stmt><decl><type><name>BR_TARGETS_X86_UP</name></type>

<comment type="block">/* see bearssl_block.h */</comment>
<name>BR_TARGET</name><argument_list>(<argument><expr><literal type="string">"sse2"</literal></expr></argument>)</argument_list>
<name>uint32_t</name>
<name>br_chacha20_sse2_run</name><argument_list>(<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator><name>key</name></expr></argument>,
	<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator><name>iv</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>cc</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>data</name></expr></argument>, <argument><expr><name>size_t</name> <name>len</name></expr></argument>)</argument_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>ivtmp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>__m128i</name></type> <name>kw0</name></decl>, <decl><type ref="prev"/><name>kw1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>__m128i</name></type> <name>iw</name></decl>, <decl><type ref="prev"/><name>cw</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>__m128i</name></type> <name>one</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>CW</name><index>[]</index></name> <init>= <expr><block>{
		<expr><literal type="number">0x61707865</literal></expr>, <expr><literal type="number">0x3320646e</literal></expr>, <expr><literal type="number">0x79622d32</literal></expr>, <expr><literal type="number">0x6b206574</literal></expr>
	}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>kw0</name> <operator>=</operator> <call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>kw1</name> <operator>=</operator> <call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>key</name> <operator>+</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ivtmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>cc</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ivtmp</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>iw</name> <operator>=</operator> <call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name>ivtmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cw</name> <operator>=</operator> <call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name>CW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>one</name> <operator>=</operator> <call><name>_mm_set_epi32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/*
		 * sj contains state words 4*j to 4*j+3.
		 */</comment>
		<decl_stmt><decl><type><name>__m128i</name></type> <name>s0</name></decl>, <decl><type ref="prev"/><name>s1</name></decl>, <decl><type ref="prev"/><name>s2</name></decl>, <decl><type ref="prev"/><name>s3</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>s0</name> <operator>=</operator> <name>cw</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>s1</name> <operator>=</operator> <name>kw0</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>s2</name> <operator>=</operator> <name>kw1</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>s3</name> <operator>=</operator> <name>iw</name></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<comment type="block">/*
			 * Even round is straightforward application on
			 * the state words.
			 */</comment>
			<expr_stmt><expr><name>s0</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>s3</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><name>s0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>s3</name> <operator>=</operator> <call><name>_mm_or_si128</name><argument_list>(
				<argument><expr><call><name>_mm_slli_epi32</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><call><name>_mm_srli_epi32</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>s2</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>s1</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>s1</name> <operator>=</operator> <call><name>_mm_or_si128</name><argument_list>(
				<argument><expr><call><name>_mm_slli_epi32</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><call><name>_mm_srli_epi32</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>s0</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>s3</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><name>s0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>s3</name> <operator>=</operator> <call><name>_mm_or_si128</name><argument_list>(
				<argument><expr><call><name>_mm_slli_epi32</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><call><name>_mm_srli_epi32</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>s2</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>s1</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>s1</name> <operator>=</operator> <call><name>_mm_or_si128</name><argument_list>(
				<argument><expr><call><name>_mm_slli_epi32</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><call><name>_mm_srli_epi32</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/*
			 * For the odd round, we must rotate some state
			 * words so that the computations apply on the
			 * right combinations of words.
			 */</comment>
			<expr_stmt><expr><name>s1</name> <operator>=</operator> <call><name>_mm_shuffle_epi32</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><literal type="number">0x39</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>s2</name> <operator>=</operator> <call><name>_mm_shuffle_epi32</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><literal type="number">0x4E</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>s3</name> <operator>=</operator> <call><name>_mm_shuffle_epi32</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><literal type="number">0x93</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>s0</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>s3</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><name>s0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>s3</name> <operator>=</operator> <call><name>_mm_or_si128</name><argument_list>(
				<argument><expr><call><name>_mm_slli_epi32</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><call><name>_mm_srli_epi32</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>s2</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>s1</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>s1</name> <operator>=</operator> <call><name>_mm_or_si128</name><argument_list>(
				<argument><expr><call><name>_mm_slli_epi32</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><call><name>_mm_srli_epi32</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>s0</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>s3</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><name>s0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>s3</name> <operator>=</operator> <call><name>_mm_or_si128</name><argument_list>(
				<argument><expr><call><name>_mm_slli_epi32</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><call><name>_mm_srli_epi32</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>s2</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>s1</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>s1</name> <operator>=</operator> <call><name>_mm_or_si128</name><argument_list>(
				<argument><expr><call><name>_mm_slli_epi32</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><call><name>_mm_srli_epi32</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/*
			 * After the odd round, we rotate back the values
			 * to undo the rotate at the start of the odd round.
			 */</comment>
			<expr_stmt><expr><name>s1</name> <operator>=</operator> <call><name>_mm_shuffle_epi32</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><literal type="number">0x93</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>s2</name> <operator>=</operator> <call><name>_mm_shuffle_epi32</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><literal type="number">0x4E</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>s3</name> <operator>=</operator> <call><name>_mm_shuffle_epi32</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><literal type="number">0x39</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>

		<comment type="block">/*
		 * Addition with the initial state.
		 */</comment>
		<expr_stmt><expr><name>s0</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><name>cw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>s1</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>kw0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>s2</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><name>kw1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>s3</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><name>iw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Increment block counter.
		 */</comment>
		<expr_stmt><expr><name>iw</name> <operator>=</operator> <call><name>_mm_add_epi32</name><argument_list>(<argument><expr><name>iw</name></expr></argument>, <argument><expr><name>one</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * XOR final state with the data.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>_mm_storeu_si128</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>tmp</name> <operator>+</operator>  <literal type="number">0</literal><operator>)</operator></expr></argument>, <argument><expr><name>s0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>_mm_storeu_si128</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>tmp</name> <operator>+</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>, <argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>_mm_storeu_si128</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>tmp</name> <operator>+</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>_mm_storeu_si128</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>tmp</name> <operator>+</operator> <literal type="number">48</literal><operator>)</operator></expr></argument>, <argument><expr><name>s3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<expr_stmt><expr><name><name>buf</name><index>[<expr><name>u</name></expr>]</index></name> <operator>^=</operator> <name><name>tmp</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
			</block_content>}</block></for>
			<break>break;</break>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<decl_stmt><decl><type><name>__m128i</name></type> <name>b0</name></decl>, <decl><type ref="prev"/><name>b1</name></decl>, <decl><type ref="prev"/><name>b2</name></decl>, <decl><type ref="prev"/><name>b3</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>b0</name> <operator>=</operator> <call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>buf</name> <operator>+</operator>  <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>b1</name> <operator>=</operator> <call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>buf</name> <operator>+</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>b2</name> <operator>=</operator> <call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>buf</name> <operator>+</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>b3</name> <operator>=</operator> <call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>buf</name> <operator>+</operator> <literal type="number">48</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>b0</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><name>b0</name></expr></argument>, <argument><expr><name>s0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>b1</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><name>b1</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>b2</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><name>b2</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>b3</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><name>b3</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>_mm_storeu_si128</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>buf</name> <operator>+</operator>  <literal type="number">0</literal><operator>)</operator></expr></argument>, <argument><expr><name>b0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>_mm_storeu_si128</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>buf</name> <operator>+</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>, <argument><expr><name>b1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>_mm_storeu_si128</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>buf</name> <operator>+</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><name>b2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>_mm_storeu_si128</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>buf</name> <operator>+</operator> <literal type="number">48</literal><operator>)</operator></expr></argument>, <argument><expr><name>b3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></while>

	<comment type="block">/*
	 * _mm_extract_epi32() requires SSE4.1. We prefer to stick to
	 * raw SSE2, thus we use _mm_extract_epi16().
	 */</comment>
	<return>return <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>_mm_extract_epi16</name><argument_list>(<argument><expr><name>iw</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>
		<operator>|</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>_mm_extract_epi16</name><argument_list>(<argument><expr><name>iw</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>BR_TARGETS_X86_DOWN</name>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<comment type="block">/* see bearssl_block.h */</comment>
<name>br_chacha20_run</name></type>
<name>br_chacha20_sse2_get</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
