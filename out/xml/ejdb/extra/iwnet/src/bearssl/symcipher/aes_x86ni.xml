<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/extra/iwnet/src/bearssl/symcipher/aes_x86ni.c"><comment type="block">/*
 * Copyright (c) 2017 Thomas Pornin &lt;pornin@bolet.org&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining 
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_ENABLE_INTRINSICS</name></cpp:macro>   <cpp:value>1</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>

<comment type="block">/*
 * This code contains the AES key schedule implementation using the
 * AES-NI opcodes.
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_AES_X86NI</name></expr></cpp:if>

<comment type="block">/* see inner.h */</comment>
<function><type><name>int</name></type>
<name>br_aes_x86ni_supported</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * Bit mask for features in ECX:
	 *   19   SSE4.1 (used for _mm_insert_epi32(), for AES-CTR)
	 *   25   AES-NI
	 */</comment>
	<return>return <expr><call><name>br_cpuid</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0x02080000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>BR_TARGETS_X86_UP</name></type>

<name>BR_TARGET</name><argument_list>(<argument><expr><literal type="string">"sse2,aes"</literal></expr></argument>)</argument_list>
static <namespace><specifier>inline</specifier> __m128i
<name>expand_step128</name>(<name>__m128i</name> <name>k</name><operator>,</operator> <name>__m128i</name> <name>k2</name></namespace></decl>)
<block>{<block_content>
	<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><call><name>_mm_slli_si128</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><call><name>_mm_slli_si128</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><call><name>_mm_slli_si128</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>k2</name> <operator>=</operator> <call><name>_mm_shuffle_epi32</name><argument_list>(<argument><expr><name>k2</name></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>_mm_xor_si128</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl_stmt>

<macro><name>BR_TARGET</name><argument_list>(<argument><literal type="string">"sse2,aes"</literal></argument>)</argument_list></macro>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>expand_step192</name><parameter_list>(<parameter><decl><type><name>__m128i</name> <modifier>*</modifier></type><name>t1</name></decl></parameter>, <parameter><decl><type><name>__m128i</name> <modifier>*</modifier></type><name>t2</name></decl></parameter>, <parameter><decl><type><name>__m128i</name> <modifier>*</modifier></type><name>t3</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>__m128i</name></type> <name>t4</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>t2</name> <operator>=</operator> <call><name>_mm_shuffle_epi32</name><argument_list>(<argument><expr><operator>*</operator><name>t2</name></expr></argument>, <argument><expr><literal type="number">0x55</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>t4</name> <operator>=</operator> <call><name>_mm_slli_si128</name><argument_list>(<argument><expr><operator>*</operator><name>t1</name></expr></argument>, <argument><expr><literal type="number">0x4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>t1</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><operator>*</operator><name>t1</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>t4</name> <operator>=</operator> <call><name>_mm_slli_si128</name><argument_list>(<argument><expr><name>t4</name></expr></argument>, <argument><expr><literal type="number">0x4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>t1</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><operator>*</operator><name>t1</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>t4</name> <operator>=</operator> <call><name>_mm_slli_si128</name><argument_list>(<argument><expr><name>t4</name></expr></argument>, <argument><expr><literal type="number">0x4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>t1</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><operator>*</operator><name>t1</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>t1</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><operator>*</operator><name>t1</name></expr></argument>, <argument><expr><operator>*</operator><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>t2</name> <operator>=</operator> <call><name>_mm_shuffle_epi32</name><argument_list>(<argument><expr><operator>*</operator><name>t1</name></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>t4</name> <operator>=</operator> <call><name>_mm_slli_si128</name><argument_list>(<argument><expr><operator>*</operator><name>t3</name></expr></argument>, <argument><expr><literal type="number">0x4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>t3</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><operator>*</operator><name>t3</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>t3</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><operator>*</operator><name>t3</name></expr></argument>, <argument><expr><operator>*</operator><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>BR_TARGET</name><argument_list>(<argument><literal type="string">"sse2,aes"</literal></argument>)</argument_list></macro>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>expand_step256_1</name><parameter_list>(<parameter><decl><type><name>__m128i</name> <modifier>*</modifier></type><name>t1</name></decl></parameter>, <parameter><decl><type><name>__m128i</name> <modifier>*</modifier></type><name>t2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>__m128i</name></type> <name>t4</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>t2</name> <operator>=</operator> <call><name>_mm_shuffle_epi32</name><argument_list>(<argument><expr><operator>*</operator><name>t2</name></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>t4</name> <operator>=</operator> <call><name>_mm_slli_si128</name><argument_list>(<argument><expr><operator>*</operator><name>t1</name></expr></argument>, <argument><expr><literal type="number">0x4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>t1</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><operator>*</operator><name>t1</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>t4</name> <operator>=</operator> <call><name>_mm_slli_si128</name><argument_list>(<argument><expr><name>t4</name></expr></argument>, <argument><expr><literal type="number">0x4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>t1</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><operator>*</operator><name>t1</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>t4</name> <operator>=</operator> <call><name>_mm_slli_si128</name><argument_list>(<argument><expr><name>t4</name></expr></argument>, <argument><expr><literal type="number">0x4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>t1</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><operator>*</operator><name>t1</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>t1</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><operator>*</operator><name>t1</name></expr></argument>, <argument><expr><operator>*</operator><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>BR_TARGET</name><argument_list>(<argument><literal type="string">"sse2,aes"</literal></argument>)</argument_list></macro>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>expand_step256_2</name><parameter_list>(<parameter><decl><type><name>__m128i</name> <modifier>*</modifier></type><name>t1</name></decl></parameter>, <parameter><decl><type><name>__m128i</name> <modifier>*</modifier></type><name>t3</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>__m128i</name></type> <name>t2</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>t4</name> <operator>=</operator> <call><name>_mm_aeskeygenassist_si128</name><argument_list>(<argument><expr><operator>*</operator><name>t1</name></expr></argument>, <argument><expr><literal type="number">0x0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>t2</name> <operator>=</operator> <call><name>_mm_shuffle_epi32</name><argument_list>(<argument><expr><name>t4</name></expr></argument>, <argument><expr><literal type="number">0xAA</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>t4</name> <operator>=</operator> <call><name>_mm_slli_si128</name><argument_list>(<argument><expr><operator>*</operator><name>t3</name></expr></argument>, <argument><expr><literal type="number">0x4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>t3</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><operator>*</operator><name>t3</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>t4</name> <operator>=</operator> <call><name>_mm_slli_si128</name><argument_list>(<argument><expr><name>t4</name></expr></argument>, <argument><expr><literal type="number">0x4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>t3</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><operator>*</operator><name>t3</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>t4</name> <operator>=</operator> <call><name>_mm_slli_si128</name><argument_list>(<argument><expr><name>t4</name></expr></argument>, <argument><expr><literal type="number">0x4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>t3</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><operator>*</operator><name>t3</name></expr></argument>, <argument><expr><name>t4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>t3</name> <operator>=</operator> <call><name>_mm_xor_si128</name><argument_list>(<argument><expr><operator>*</operator><name>t3</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Perform key schedule for AES, encryption direction. Subkeys are written
 * in sk[], and the number of rounds is returned. Key length MUST be 16,
 * 24 or 32 bytes.
 */</comment>
<macro><name>BR_TARGET</name><argument_list>(<argument><literal type="string">"sse2,aes"</literal></argument>)</argument_list></macro>
<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>x86ni_keysched</name><parameter_list>(<parameter><decl><type><name>__m128i</name> <modifier>*</modifier></type><name>sk</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>kb</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEXP128</name><parameter_list>(<parameter><type><name>k</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>rcon</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>do { \
		k = expand_step128(k, _mm_aeskeygenassist_si128(k, rcon)); \
		sk[i] = k; \
	} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEXP192</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>rcon1</name></type></parameter>, <parameter><type><name>rcon2</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>do { \
		sk[(i) + 0] = t1; \
		sk[(i) + 1] = t3; \
		t2 = _mm_aeskeygenassist_si128(t3, rcon1); \
		expand_step192(&amp;t1, &amp;t2, &amp;t3); \
		sk[(i) + 1] = _mm_castpd_si128(_mm_shuffle_pd( \
			_mm_castsi128_pd(sk[(i) + 1]), \
			_mm_castsi128_pd(t1), 0)); \
		sk[(i) + 2] = _mm_castpd_si128(_mm_shuffle_pd( \
			_mm_castsi128_pd(t1), \
			_mm_castsi128_pd(t3), 1)); \
		t2 = _mm_aeskeygenassist_si128(t3, rcon2); \
		expand_step192(&amp;t1, &amp;t2, &amp;t3); \
	} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEXP256</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>rcon</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>do { \
		sk[(i) + 0] = t3; \
		t2 = _mm_aeskeygenassist_si128(t3, rcon); \
		expand_step256_1(&amp;t1, &amp;t2); \
		sk[(i) + 1] = t1; \
		expand_step256_2(&amp;t1, &amp;t3); \
	} while (0)</cpp:value></cpp:define>

	<expr_stmt><expr><name>kb</name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
	<switch>switch <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>__m128i</name></type> <name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>;</decl_stmt>

	<case>case <expr><literal type="number">16</literal></expr>:</case>
		<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name>kb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>KEXP128</name><argument_list>(<argument><expr><name>t1</name></expr></argument>,  <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>KEXP128</name><argument_list>(<argument><expr><name>t1</name></expr></argument>,  <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0x02</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>KEXP128</name><argument_list>(<argument><expr><name>t1</name></expr></argument>,  <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0x04</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>KEXP128</name><argument_list>(<argument><expr><name>t1</name></expr></argument>,  <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0x08</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>KEXP128</name><argument_list>(<argument><expr><name>t1</name></expr></argument>,  <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0x10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>KEXP128</name><argument_list>(<argument><expr><name>t1</name></expr></argument>,  <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">0x20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>KEXP128</name><argument_list>(<argument><expr><name>t1</name></expr></argument>,  <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">0x40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>KEXP128</name><argument_list>(<argument><expr><name>t1</name></expr></argument>,  <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>KEXP128</name><argument_list>(<argument><expr><name>t1</name></expr></argument>,  <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">0x1B</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>KEXP128</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0x36</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">10</literal></expr>;</return>

	<case>case <expr><literal type="number">24</literal></expr>:</case>
		<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name>kb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>t3</name> <operator>=</operator> <call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>kb</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>t3</name> <operator>=</operator> <call><name>_mm_shuffle_epi32</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><literal type="number">0x4E</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>KEXP192</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument>, <argument><expr><literal type="number">0x02</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>KEXP192</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0x04</literal></expr></argument>, <argument><expr><literal type="number">0x08</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>KEXP192</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">0x10</literal></expr></argument>, <argument><expr><literal type="number">0x20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>KEXP192</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">0x40</literal></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sk</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">12</literal></expr>;</return>

	<case>case <expr><literal type="number">32</literal></expr>:</case>
		<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name>kb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>t3</name> <operator>=</operator> <call><name>_mm_loadu_si128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>kb</name> <operator>+</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>KEXP256</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>KEXP256</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0x02</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>KEXP256</name><argument_list>( <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0x04</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>KEXP256</name><argument_list>( <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">0x08</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>KEXP256</name><argument_list>( <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">0x10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>KEXP256</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">0x20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sk</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <name>t3</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>t2</name> <operator>=</operator> <call><name>_mm_aeskeygenassist_si128</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><literal type="number">0x40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>expand_step256_1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sk</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">14</literal></expr>;</return>

	<default>default:</default>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></switch>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>KEXP128</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>KEXP192</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>KEXP256</name></cpp:undef>
</block_content>}</block></function>

<comment type="block">/* see inner.h */</comment>
<macro><name>BR_TARGET</name><argument_list>(<argument><literal type="string">"sse2,aes"</literal></argument>)</argument_list></macro>
<function><type><name>unsigned</name></type>
<name>br_aes_x86ni_keysched_enc</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>skni</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>__m128i</name></type> <name><name>sk</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>num_rounds</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>num_rounds</name> <operator>=</operator> <call><name>x86ni_keysched</name><argument_list>(<argument><expr><name>sk</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>skni</name></expr></argument>, <argument><expr><name>sk</name></expr></argument>, <argument><expr><operator>(</operator><name>num_rounds</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>num_rounds</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* see inner.h */</comment>
<macro><name>BR_TARGET</name><argument_list>(<argument><literal type="string">"sse2,aes"</literal></argument>)</argument_list></macro>
<function><type><name>unsigned</name></type>
<name>br_aes_x86ni_keysched_dec</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>skni</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>__m128i</name></type> <name><name>sk</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>num_rounds</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>num_rounds</name> <operator>=</operator> <call><name>x86ni_keysched</name><argument_list>(<argument><expr><name>sk</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>_mm_storeu_si128</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>skni</name></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><name>num_rounds</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>num_rounds</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>_mm_storeu_si128</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>skni</name> <operator>+</operator> <operator>(</operator><name>u</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator></expr></argument>,
			<argument><expr><call><name>_mm_aesimc_si128</name><argument_list>(<argument><expr><name><name>sk</name><index>[<expr><name>num_rounds</name> <operator>-</operator> <name>u</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>_mm_storeu_si128</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>skni</name> <operator>+</operator> <operator>(</operator><name>num_rounds</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name><name>sk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>num_rounds</name></expr>;</return>
</block_content>}</block></function>

<expr><name>BR_TARGETS_X86_DOWN</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
