<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/extra/iwnet/src/bearssl/symcipher/aes_ct64_dec.c"><comment type="block">/*
 * Copyright (c) 2016 Thomas Pornin &lt;pornin@bolet.org&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining 
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>

<comment type="block">/* see inner.h */</comment>
<function><type><name>void</name></type>
<name>br_aes_ct64_bitslice_invSbox</name><parameter_list>(<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * See br_aes_ct_bitslice_invSbox(). This is the natural extension
	 * to 64-bit registers.
	 */</comment>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>q0</name></decl>, <decl><type ref="prev"/><name>q1</name></decl>, <decl><type ref="prev"/><name>q2</name></decl>, <decl><type ref="prev"/><name>q3</name></decl>, <decl><type ref="prev"/><name>q4</name></decl>, <decl><type ref="prev"/><name>q5</name></decl>, <decl><type ref="prev"/><name>q6</name></decl>, <decl><type ref="prev"/><name>q7</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>q0</name> <operator>=</operator> <operator>~</operator><name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>q1</name> <operator>=</operator> <operator>~</operator><name><name>q</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>q2</name> <operator>=</operator> <name><name>q</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>q3</name> <operator>=</operator> <name><name>q</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>q4</name> <operator>=</operator> <name><name>q</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>q5</name> <operator>=</operator> <operator>~</operator><name><name>q</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>q6</name> <operator>=</operator> <operator>~</operator><name><name>q</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>q7</name> <operator>=</operator> <name><name>q</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>q</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>q1</name> <operator>^</operator> <name>q4</name> <operator>^</operator> <name>q6</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>q</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>q0</name> <operator>^</operator> <name>q3</name> <operator>^</operator> <name>q5</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>q</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>q7</name> <operator>^</operator> <name>q2</name> <operator>^</operator> <name>q4</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>q</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>q6</name> <operator>^</operator> <name>q1</name> <operator>^</operator> <name>q3</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>q</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>q5</name> <operator>^</operator> <name>q0</name> <operator>^</operator> <name>q2</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>q</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>q4</name> <operator>^</operator> <name>q7</name> <operator>^</operator> <name>q1</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>q</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>q3</name> <operator>^</operator> <name>q6</name> <operator>^</operator> <name>q0</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>q2</name> <operator>^</operator> <name>q5</name> <operator>^</operator> <name>q7</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>br_aes_ct64_bitslice_Sbox</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>q0</name> <operator>=</operator> <operator>~</operator><name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>q1</name> <operator>=</operator> <operator>~</operator><name><name>q</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>q2</name> <operator>=</operator> <name><name>q</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>q3</name> <operator>=</operator> <name><name>q</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>q4</name> <operator>=</operator> <name><name>q</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>q5</name> <operator>=</operator> <operator>~</operator><name><name>q</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>q6</name> <operator>=</operator> <operator>~</operator><name><name>q</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>q7</name> <operator>=</operator> <name><name>q</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>q</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>q1</name> <operator>^</operator> <name>q4</name> <operator>^</operator> <name>q6</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>q</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>q0</name> <operator>^</operator> <name>q3</name> <operator>^</operator> <name>q5</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>q</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>q7</name> <operator>^</operator> <name>q2</name> <operator>^</operator> <name>q4</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>q</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>q6</name> <operator>^</operator> <name>q1</name> <operator>^</operator> <name>q3</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>q</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>q5</name> <operator>^</operator> <name>q0</name> <operator>^</operator> <name>q2</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>q</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>q4</name> <operator>^</operator> <name>q7</name> <operator>^</operator> <name>q1</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>q</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>q3</name> <operator>^</operator> <name>q6</name> <operator>^</operator> <name>q0</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>q2</name> <operator>^</operator> <name>q5</name> <operator>^</operator> <name>q7</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>add_round_key</name><parameter_list>(<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>sk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>q</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^=</operator> <name><name>sk</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>inv_shift_rows</name><parameter_list>(<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>uint64_t</name></type> <name>x</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>q</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>q</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>&amp;</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0x000000000000FFFF</literal><operator>)</operator>
			<operator>|</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0x000000000FFF0000</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator>
			<operator>|</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0x00000000F0000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator>
			<operator>|</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0x000000FF00000000</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator>
			<operator>|</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0x0000FF0000000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator>
			<operator>|</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0x000F000000000000</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator>
			<operator>|</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0xFFF0000000000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type>
<name>rotr32</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>inv_mix_columns</name><parameter_list>(<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>q0</name></decl>, <decl><type ref="prev"/><name>q1</name></decl>, <decl><type ref="prev"/><name>q2</name></decl>, <decl><type ref="prev"/><name>q3</name></decl>, <decl><type ref="prev"/><name>q4</name></decl>, <decl><type ref="prev"/><name>q5</name></decl>, <decl><type ref="prev"/><name>q6</name></decl>, <decl><type ref="prev"/><name>q7</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>r0</name></decl>, <decl><type ref="prev"/><name>r1</name></decl>, <decl><type ref="prev"/><name>r2</name></decl>, <decl><type ref="prev"/><name>r3</name></decl>, <decl><type ref="prev"/><name>r4</name></decl>, <decl><type ref="prev"/><name>r5</name></decl>, <decl><type ref="prev"/><name>r6</name></decl>, <decl><type ref="prev"/><name>r7</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>q0</name> <operator>=</operator> <name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>q1</name> <operator>=</operator> <name><name>q</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>q2</name> <operator>=</operator> <name><name>q</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>q3</name> <operator>=</operator> <name><name>q</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>q4</name> <operator>=</operator> <name><name>q</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>q5</name> <operator>=</operator> <name><name>q</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>q6</name> <operator>=</operator> <name><name>q</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>q7</name> <operator>=</operator> <name><name>q</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>r0</name> <operator>=</operator> <operator>(</operator><name>q0</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>q0</name> <operator>&lt;&lt;</operator> <literal type="number">48</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>r1</name> <operator>=</operator> <operator>(</operator><name>q1</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>q1</name> <operator>&lt;&lt;</operator> <literal type="number">48</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>r2</name> <operator>=</operator> <operator>(</operator><name>q2</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>q2</name> <operator>&lt;&lt;</operator> <literal type="number">48</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>r3</name> <operator>=</operator> <operator>(</operator><name>q3</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>q3</name> <operator>&lt;&lt;</operator> <literal type="number">48</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>r4</name> <operator>=</operator> <operator>(</operator><name>q4</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>q4</name> <operator>&lt;&lt;</operator> <literal type="number">48</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>r5</name> <operator>=</operator> <operator>(</operator><name>q5</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>q5</name> <operator>&lt;&lt;</operator> <literal type="number">48</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>r6</name> <operator>=</operator> <operator>(</operator><name>q6</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>q6</name> <operator>&lt;&lt;</operator> <literal type="number">48</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>r7</name> <operator>=</operator> <operator>(</operator><name>q7</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>q7</name> <operator>&lt;&lt;</operator> <literal type="number">48</literal><operator>)</operator></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>q5</name> <operator>^</operator> <name>q6</name> <operator>^</operator> <name>q7</name> <operator>^</operator> <name>r0</name> <operator>^</operator> <name>r5</name> <operator>^</operator> <name>r7</name> <operator>^</operator> <call><name>rotr32</name><argument_list>(<argument><expr><name>q0</name> <operator>^</operator> <name>q5</name> <operator>^</operator> <name>q6</name> <operator>^</operator> <name>r0</name> <operator>^</operator> <name>r5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>q</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>q0</name> <operator>^</operator> <name>q5</name> <operator>^</operator> <name>r0</name> <operator>^</operator> <name>r1</name> <operator>^</operator> <name>r5</name> <operator>^</operator> <name>r6</name> <operator>^</operator> <name>r7</name> <operator>^</operator> <call><name>rotr32</name><argument_list>(<argument><expr><name>q1</name> <operator>^</operator> <name>q5</name> <operator>^</operator> <name>q7</name> <operator>^</operator> <name>r1</name> <operator>^</operator> <name>r5</name> <operator>^</operator> <name>r6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>q</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>q0</name> <operator>^</operator> <name>q1</name> <operator>^</operator> <name>q6</name> <operator>^</operator> <name>r1</name> <operator>^</operator> <name>r2</name> <operator>^</operator> <name>r6</name> <operator>^</operator> <name>r7</name> <operator>^</operator> <call><name>rotr32</name><argument_list>(<argument><expr><name>q0</name> <operator>^</operator> <name>q2</name> <operator>^</operator> <name>q6</name> <operator>^</operator> <name>r2</name> <operator>^</operator> <name>r6</name> <operator>^</operator> <name>r7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>q</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>q0</name> <operator>^</operator> <name>q1</name> <operator>^</operator> <name>q2</name> <operator>^</operator> <name>q5</name> <operator>^</operator> <name>q6</name> <operator>^</operator> <name>r0</name> <operator>^</operator> <name>r2</name> <operator>^</operator> <name>r3</name> <operator>^</operator> <name>r5</name> <operator>^</operator> <call><name>rotr32</name><argument_list>(<argument><expr><name>q0</name> <operator>^</operator> <name>q1</name> <operator>^</operator> <name>q3</name> <operator>^</operator> <name>q5</name> <operator>^</operator> <name>q6</name> <operator>^</operator> <name>q7</name> <operator>^</operator> <name>r0</name> <operator>^</operator> <name>r3</name> <operator>^</operator> <name>r5</name> <operator>^</operator> <name>r7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>q</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>q1</name> <operator>^</operator> <name>q2</name> <operator>^</operator> <name>q3</name> <operator>^</operator> <name>q5</name> <operator>^</operator> <name>r1</name> <operator>^</operator> <name>r3</name> <operator>^</operator> <name>r4</name> <operator>^</operator> <name>r5</name> <operator>^</operator> <name>r6</name> <operator>^</operator> <name>r7</name> <operator>^</operator> <call><name>rotr32</name><argument_list>(<argument><expr><name>q1</name> <operator>^</operator> <name>q2</name> <operator>^</operator> <name>q4</name> <operator>^</operator> <name>q5</name> <operator>^</operator> <name>q7</name> <operator>^</operator> <name>r1</name> <operator>^</operator> <name>r4</name> <operator>^</operator> <name>r5</name> <operator>^</operator> <name>r6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>q</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>q2</name> <operator>^</operator> <name>q3</name> <operator>^</operator> <name>q4</name> <operator>^</operator> <name>q6</name> <operator>^</operator> <name>r2</name> <operator>^</operator> <name>r4</name> <operator>^</operator> <name>r5</name> <operator>^</operator> <name>r6</name> <operator>^</operator> <name>r7</name> <operator>^</operator> <call><name>rotr32</name><argument_list>(<argument><expr><name>q2</name> <operator>^</operator> <name>q3</name> <operator>^</operator> <name>q5</name> <operator>^</operator> <name>q6</name> <operator>^</operator> <name>r2</name> <operator>^</operator> <name>r5</name> <operator>^</operator> <name>r6</name> <operator>^</operator> <name>r7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>q</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>q3</name> <operator>^</operator> <name>q4</name> <operator>^</operator> <name>q5</name> <operator>^</operator> <name>q7</name> <operator>^</operator> <name>r3</name> <operator>^</operator> <name>r5</name> <operator>^</operator> <name>r6</name> <operator>^</operator> <name>r7</name> <operator>^</operator> <call><name>rotr32</name><argument_list>(<argument><expr><name>q3</name> <operator>^</operator> <name>q4</name> <operator>^</operator> <name>q6</name> <operator>^</operator> <name>q7</name> <operator>^</operator> <name>r3</name> <operator>^</operator> <name>r6</name> <operator>^</operator> <name>r7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>q</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>q4</name> <operator>^</operator> <name>q5</name> <operator>^</operator> <name>q6</name> <operator>^</operator> <name>r4</name> <operator>^</operator> <name>r6</name> <operator>^</operator> <name>r7</name> <operator>^</operator> <call><name>rotr32</name><argument_list>(<argument><expr><name>q4</name> <operator>^</operator> <name>q5</name> <operator>^</operator> <name>q7</name> <operator>^</operator> <name>r4</name> <operator>^</operator> <name>r7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* see inner.h */</comment>
<function><type><name>void</name></type>
<name>br_aes_ct64_bitslice_decrypt</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>num_rounds</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>u</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>add_round_key</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>skey</name> <operator>+</operator> <operator>(</operator><name>num_rounds</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <name>num_rounds</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>u</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>u</name> <operator>--</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>inv_shift_rows</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>br_aes_ct64_bitslice_invSbox</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>add_round_key</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>skey</name> <operator>+</operator> <operator>(</operator><name>u</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>inv_mix_columns</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>inv_shift_rows</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_aes_ct64_bitslice_invSbox</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>add_round_key</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
