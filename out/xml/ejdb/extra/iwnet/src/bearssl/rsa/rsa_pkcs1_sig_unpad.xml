<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/extra/iwnet/src/bearssl/rsa/rsa_pkcs1_sig_unpad.c"><comment type="block">/*
 * Copyright (c) 2017 Thomas Pornin &lt;pornin@bolet.org&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining 
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>

<comment type="block">/* see bearssl_rsa.h */</comment>
<function><type><name>uint32_t</name></type>
<name>br_rsa_pkcs1_sig_unpad</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sig_len</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hash_oid</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>hash_len</name></decl></parameter>,
	<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hash_out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>pad1</name><index>[]</index></name> <init>= <expr><block>{
		<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>
	}</block></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>pad2</name><index>[<expr><literal type="number">43</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>x2</name></decl>, <decl><type ref="prev"/><name>x3</name></decl>, <decl><type ref="prev"/><name>pad_len</name></decl>, <decl><type ref="prev"/><name>zlen</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>sig_len</name> <operator>&lt;</operator> <literal type="number">11</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Expected format:
	 *  00 01 FF ... FF 00 30 x1 30 x2 06 x3 OID [ 05 00 ] 04 x4 HASH
	 *
	 * with the following rules:
	 *
	 *  -- Total length is that of the modulus and the signature
	 *     (this was already verified by br_rsa_i31_public()).
	 *
	 *  -- There are at least eight bytes of value 0xFF.
	 *
	 *  -- x4 is equal to the hash length (hash_len).
	 *
	 *  -- x3 is equal to the encoded OID value length (so x3 is the
	 *     first byte of hash_oid[]).
	 *
	 *  -- If the "05 00" is present, then x2 == x3 + 4; otherwise,
	 *     x2 == x3 + 2.
	 *
	 *  -- x1 == x2 + x4 + 4.
	 *
	 * So the total length after the last "FF" is either x3 + x4 + 11
	 * (with the "05 00") or x3 + x4 + 9 (without the "05 00").
	 */</comment>

	<comment type="block">/*
	 * Check the "00 01 FF .. FF 00" with at least eight 0xFF bytes.
	 * The comparison is valid because we made sure that the signature
	 * is at least 11 bytes long.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>sig</name></expr></argument>, <argument><expr><name>pad1</name></expr></argument>, <argument><expr><sizeof>sizeof <name>pad1</name></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <sizeof>sizeof <name>pad1</name></sizeof></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>sig_len</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>sig</name><index>[<expr><name>u</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0xFF</literal></expr>)</condition> <block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/*
	 * Remaining length is sig_len - u bytes (including the 00 just
	 * after the last FF). This must be equal to one of the two
	 * possible values (depending on whether the "05 00" sequence is
	 * present or not).
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>hash_oid</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>sig_len</name> <operator>-</operator> <name>u</name> <operator>!=</operator> <name>hash_len</name> <operator>+</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>sig</name><index>[<expr><name>u</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0x00</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>x3</name> <operator>=</operator> <name><name>hash_oid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>pad_len</name> <operator>=</operator> <name>x3</name> <operator>+</operator> <literal type="number">9</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pad2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pad_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>zlen</name> <operator>=</operator> <name>sig_len</name> <operator>-</operator> <name>u</name> <operator>-</operator> <name>hash_len</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>zlen</name> <operator>==</operator> <name>pad_len</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>x2</name> <operator>=</operator> <name>x3</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>zlen</name> <operator>==</operator> <name>pad_len</name> <operator>+</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>x2</name> <operator>=</operator> <name>x3</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>pad_len</name> <operator>=</operator> <name>zlen</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>pad2</name><index>[<expr><name>pad_len</name> <operator>-</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x05</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name><name>pad2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x30</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pad2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>x2</name> <operator>+</operator> <name>hash_len</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pad2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x30</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pad2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>x2</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pad2</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x06</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pad2</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><name>hash_oid</name></expr></argument>, <argument><expr><name>x3</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pad2</name><index>[<expr><name>pad_len</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x04</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pad2</name><index>[<expr><name>pad_len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>hash_len</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>pad2</name></expr></argument>, <argument><expr><name>sig</name> <operator>+</operator> <name>u</name></expr></argument>, <argument><expr><name>pad_len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>hash_out</name></expr></argument>, <argument><expr><name>sig</name> <operator>+</operator> <name>sig_len</name> <operator>-</operator> <name>hash_len</name></expr></argument>, <argument><expr><name>hash_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
</unit>
