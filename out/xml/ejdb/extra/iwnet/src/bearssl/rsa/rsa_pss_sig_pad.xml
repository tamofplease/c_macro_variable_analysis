<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/extra/iwnet/src/bearssl/rsa/rsa_pss_sig_pad.c"><comment type="block">/*
 * Copyright (c) 2018 Thomas Pornin &lt;pornin@bolet.org&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining 
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>

<comment type="block">/* see inner.h */</comment>
<function><type><name>uint32_t</name></type>
<name>br_rsa_pss_sig_pad</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_prng_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>rng</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type><name>hf_data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type><name>hf_mgf1</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>salt_len</name></decl></parameter>,
	<parameter><decl><type><name>uint32_t</name></type> <name>n_bitlen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>xlen</name></decl>, <decl><type ref="prev"/><name>hash_len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>br_hash_compat_context</name></type> <name>hc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>salt</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>seed</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>hash_len</name> <operator>=</operator> <call><name>br_digest_size</name><argument_list>(<argument><expr><name>hf_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * The padded string is one bit smaller than the modulus;
	 * notably, if the modulus length is equal to 1 modulo 8, then
	 * the padded string will be one _byte_ smaller, and the first
	 * byte will be set to 0. We apply these transformations here.
	 */</comment>
	<expr_stmt><expr><name>n_bitlen</name> <operator>--</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n_bitlen</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>x</name> <operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>xlen</name> <operator>=</operator> <operator>(</operator><name>n_bitlen</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * Check that the modulus is large enough for the hash value
	 * length combined with the intended salt length.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>hash_len</name> <operator>&gt;</operator> <name>xlen</name> <operator>||</operator> <name>salt_len</name> <operator>&gt;</operator> <name>xlen</name>
		<operator>||</operator> <operator>(</operator><name>hash_len</name> <operator>+</operator> <name>salt_len</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;</operator> <name>xlen</name></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Produce a random salt.
	 */</comment>
	<expr_stmt><expr><name>salt</name> <operator>=</operator> <name>x</name> <operator>+</operator> <name>xlen</name> <operator>-</operator> <name>hash_len</name> <operator>-</operator> <name>salt_len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>salt_len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>rng</name><operator>)</operator><operator>-&gt;</operator><name>generate</name></name><argument_list>(<argument><expr><name>rng</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><name>salt_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Compute the seed for MGF1.
	 */</comment>
	<expr_stmt><expr><name>seed</name> <operator>=</operator> <name>x</name> <operator>+</operator> <name>xlen</name> <operator>-</operator> <name>hash_len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>hf_data</name><operator>-&gt;</operator><name>init</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hc</name><operator>.</operator><name>vtable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>seed</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>hf_data</name><operator>-&gt;</operator><name>update</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hc</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name>seed</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>hf_data</name><operator>-&gt;</operator><name>update</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hc</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>hash_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>hf_data</name><operator>-&gt;</operator><name>update</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hc</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><name>salt_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>hf_data</name><operator>-&gt;</operator><name>out</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hc</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Prepare string PS (padded salt). The salt is already at the
	 * right place.
	 */</comment>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>xlen</name> <operator>-</operator> <name>salt_len</name> <operator>-</operator> <name>hash_len</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>x</name><index>[<expr><name>xlen</name> <operator>-</operator> <name>salt_len</name> <operator>-</operator> <name>hash_len</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * Generate the mask and XOR it into PS.
	 */</comment>
	<expr_stmt><expr><call><name>br_mgf1_xor</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>xlen</name> <operator>-</operator> <name>hash_len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>hf_mgf1</name></expr></argument>, <argument><expr><name>seed</name></expr></argument>, <argument><expr><name>hash_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Clear the top bits to ensure the value is lower than the
	 * modulus.
	 */</comment>
	<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0xFF</literal> <operator>&gt;&gt;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>xlen</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>-</operator> <name>n_bitlen</name><operator>)</operator></expr>;</expr_stmt>

	<comment type="block">/*
	 * The seed (H) is already in the right place. We just set the
	 * last byte.
	 */</comment>
	<expr_stmt><expr><name><name>x</name><index>[<expr><name>xlen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xBC</literal></expr>;</expr_stmt>

	<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
</unit>
