<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/extra/iwnet/src/bearssl/rsa/rsa_i31_modulus.c"><comment type="block">/*
 * Copyright (c) 2018 Thomas Pornin &lt;pornin@bolet.org&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining 
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>

<comment type="block">/* see bearssl_rsa.h */</comment>
<function><type><name>size_t</name></type>
<name>br_rsa_i31_compute_modulus</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>br_rsa_private_key</name> <modifier>*</modifier></type><name>sk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>tmp</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>BR_MAX_RSA_SIZE</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">30</literal><operator>)</operator> <operator>/</operator> <literal type="number">31</literal><operator>)</operator> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>t</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pbuf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>qbuf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>nlen</name></decl>, <decl><type ref="prev"/><name>plen</name></decl>, <decl><type ref="prev"/><name>qlen</name></decl>, <decl><type ref="prev"/><name>tlen</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Compute actual byte and lengths for p and q.
	 */</comment>
	<expr_stmt><expr><name>pbuf</name> <operator>=</operator> <name><name>sk</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>plen</name> <operator>=</operator> <name><name>sk</name><operator>-&gt;</operator><name>plen</name></name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>plen</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>pbuf</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>pbuf</name> <operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>plen</name> <operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><name>qbuf</name> <operator>=</operator> <name><name>sk</name><operator>-&gt;</operator><name>q</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>qlen</name> <operator>=</operator> <name><name>sk</name><operator>-&gt;</operator><name>qlen</name></name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>qlen</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>qbuf</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>qbuf</name> <operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>qlen</name> <operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><name>t</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>tlen</name> <operator>=</operator> <operator>(</operator><sizeof>sizeof <name>tmp</name></sizeof><operator>)</operator> <operator>/</operator> <operator>(</operator><sizeof>sizeof <name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></sizeof><operator>)</operator></expr>;</expr_stmt>

	<comment type="block">/*
	 * Decode p.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">31</literal> <operator>*</operator> <name>tlen</name><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><name>plen</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <literal type="number">31</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>br_i31_decode</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>pbuf</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>plen</name> <operator>=</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">63</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>t</name> <operator>+=</operator> <name>plen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>tlen</name> <operator>-=</operator> <name>plen</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Decode q.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">31</literal> <operator>*</operator> <name>tlen</name><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><name>qlen</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <literal type="number">31</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>br_i31_decode</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>qbuf</name></expr></argument>, <argument><expr><name>qlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>q</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>qlen</name> <operator>=</operator> <operator>(</operator><name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">63</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>t</name> <operator>+=</operator> <name>qlen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>tlen</name> <operator>-=</operator> <name>qlen</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Computation can proceed only if we have enough room for the
	 * modulus.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>tlen</name> <operator>&lt;</operator> <operator>(</operator><name>plen</name> <operator>+</operator> <name>qlen</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Private key already contains the modulus bit length, from which
	 * we can infer the output length. Even if n is NULL, we still had
	 * to decode p and q to make sure that the product can be computed.
	 */</comment>
	<expr_stmt><expr><name>nlen</name> <operator>=</operator> <operator>(</operator><name><name>sk</name><operator>-&gt;</operator><name>n_bitlen</name></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>br_i31_zero</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>br_i31_mulacc</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>br_i31_encode</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>nlen</name></expr>;</return>
</block_content>}</block></function>
</unit>
