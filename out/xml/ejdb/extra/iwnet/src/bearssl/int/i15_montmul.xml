<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/extra/iwnet/src/bearssl/int/i15_montmul.c"><comment type="block">/*
 * Copyright (c) 2017 Thomas Pornin &lt;pornin@bolet.org&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining 
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>

<comment type="block">/* see inner.h */</comment>
<function><type><name>void</name></type>
<name>br_i15_montymul</name><parameter_list>(<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>y</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>m0i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>len4</name></decl>, <decl><type ref="prev"/><name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>dh</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>len4</name> <operator>=</operator> <name>len</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">3</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_i15_zero</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>dh</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>uint32_t</name></type> <name>f</name></decl>, <decl><type ref="prev"/><name>xu</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>zh</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>xu</name> <operator>=</operator> <name><name>x</name><index>[<expr><name>u</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>MUL15</name><argument_list>(<argument><expr><operator>(</operator><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <call><name>MUL15</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>u</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7FFF</literal></expr></argument>, <argument><expr><name>m0i</name></expr></argument>)</argument_list></call>
			<operator>&amp;</operator> <literal type="number">0x7FFF</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_ARMEL_CORTEXM_GCC</name></expr></cpp:if>
		<if_stmt><if>if <condition>(<expr><name>len4</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>limit</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>limit</name> <operator>=</operator> <name>d</name> <operator>+</operator> <name>len4</name></expr>;</expr_stmt>
			<asm>asm <specifier>volatile</specifier> (
"\n\
	@ carry: r=r2                                              \n\
	@ multipliers: xu=r3 f=r4                                  \n\
	@ base registers: d+v=r5 y+v=r6 m+v=r7                     \n\
	@ r8 contains 0x7FFF                                       \n\
	@ r9 contains d+len4                                       \n\
	ldr	r0, %[limit]                                       \n\
	ldr	r3, %[xu]                                          \n\
	mov	r9, r0                                             \n\
	ldr	r4, %[f]                                           \n\
	eor	r2, r2                                             \n\
	ldr	r5, %[d]                                           \n\
	sub	r1, r2, #1                                         \n\
	ldr	r6, %[y]                                           \n\
	lsr	r1, r1, #17                                        \n\
	ldr	r7, %[m]                                           \n\
	mov	r8, r1                                             \n\
loop%=:                                                            \n\
	ldrh	r0, [r6, #2]                                       \n\
	ldrh	r1, [r7, #2]                                       \n\
	mul	r0, r3                                             \n\
	mul	r1, r4                                             \n\
	add	r2, r0, r2                                         \n\
	ldrh	r0, [r5, #2]                                       \n\
	add	r2, r1, r2                                         \n\
	mov	r1, r8                                             \n\
	add	r2, r0, r2                                         \n\
	and	r1, r2                                             \n\
	lsr	r2, r2, #15                                        \n\
	strh	r1, [r5, #0]                                       \n\
		                                                   \n\
	ldrh	r0, [r6, #4]                                       \n\
	ldrh	r1, [r7, #4]                                       \n\
	mul	r0, r3                                             \n\
	mul	r1, r4                                             \n\
	add	r2, r0, r2                                         \n\
	ldrh	r0, [r5, #4]                                       \n\
	add	r2, r1, r2                                         \n\
	mov	r1, r8                                             \n\
	add	r2, r0, r2                                         \n\
	and	r1, r2                                             \n\
	lsr	r2, r2, #15                                        \n\
	strh	r1, [r5, #2]                                       \n\
		                                                   \n\
	ldrh	r0, [r6, #6]                                       \n\
	ldrh	r1, [r7, #6]                                       \n\
	mul	r0, r3                                             \n\
	mul	r1, r4                                             \n\
	add	r2, r0, r2                                         \n\
	ldrh	r0, [r5, #6]                                       \n\
	add	r2, r1, r2                                         \n\
	mov	r1, r8                                             \n\
	add	r2, r0, r2                                         \n\
	and	r1, r2                                             \n\
	lsr	r2, r2, #15                                        \n\
	strh	r1, [r5, #4]                                       \n\
		                                                   \n\
	ldrh	r0, [r6, #8]                                       \n\
	ldrh	r1, [r7, #8]                                       \n\
	mul	r0, r3                                             \n\
	mul	r1, r4                                             \n\
	add	r2, r0, r2                                         \n\
	ldrh	r0, [r5, #8]                                       \n\
	add	r2, r1, r2                                         \n\
	mov	r1, r8                                             \n\
	add	r2, r0, r2                                         \n\
	and	r1, r2                                             \n\
	lsr	r2, r2, #15                                        \n\
	strh	r1, [r5, #6]                                       \n\
		                                                   \n\
	add	r5, r5, #8                                         \n\
	add	r6, r6, #8                                         \n\
	add	r7, r7, #8                                         \n\
	cmp	r5, r9                                             \n\
	bne	loop%=                                             \n\
		                                                   \n\
	str	r2, %[carry]                                       \n\
"
: [carry] "=m" (r)
: [xu] "m" (xu), [f] "m" (f), [d] "m" (d), [y] "m" (y),
	[m] "m" (m), [limit] "m" (limit)
: "r0", "r1", "r2", "r3", "r4", "r5", "r6", "r7", "r8", "r9" );</asm>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name>v</name> <operator>=</operator> <name>len4</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>v</name> <operator>&lt;</operator> <name>len4</name></expr>;</condition> <incr><expr><name>v</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>uint32_t</name></type> <name>z</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>z</name> <operator>=</operator> <name><name>d</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <call><name>MUL15</name><argument_list>(<argument><expr><name>xu</name></expr></argument>, <argument><expr><name><name>y</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call>
				<operator>+</operator> <call><name>MUL15</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>m</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>r</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>r</name> <operator>=</operator> <name>z</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>d</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>z</name> <operator>&amp;</operator> <literal type="number">0x7FFF</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>z</name> <operator>=</operator> <name><name>d</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <call><name>MUL15</name><argument_list>(<argument><expr><name>xu</name></expr></argument>, <argument><expr><name><name>y</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call>
				<operator>+</operator> <call><name>MUL15</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>m</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>r</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>r</name> <operator>=</operator> <name>z</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>d</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>z</name> <operator>&amp;</operator> <literal type="number">0x7FFF</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>z</name> <operator>=</operator> <name><name>d</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <call><name>MUL15</name><argument_list>(<argument><expr><name>xu</name></expr></argument>, <argument><expr><name><name>y</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call>
				<operator>+</operator> <call><name>MUL15</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>m</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>r</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>r</name> <operator>=</operator> <name>z</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>d</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>z</name> <operator>&amp;</operator> <literal type="number">0x7FFF</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>z</name> <operator>=</operator> <name><name>d</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <call><name>MUL15</name><argument_list>(<argument><expr><name>xu</name></expr></argument>, <argument><expr><name><name>y</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call>
				<operator>+</operator> <call><name>MUL15</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>m</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>r</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>r</name> <operator>=</operator> <name>z</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>d</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>z</name> <operator>&amp;</operator> <literal type="number">0x7FFF</literal></expr>;</expr_stmt>
		</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<for>for <control>(<init>;</init> <condition><expr><name>v</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>v</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>uint32_t</name></type> <name>z</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>z</name> <operator>=</operator> <name><name>d</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <call><name>MUL15</name><argument_list>(<argument><expr><name>xu</name></expr></argument>, <argument><expr><name><name>y</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call>
				<operator>+</operator> <call><name>MUL15</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>m</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>r</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>r</name> <operator>=</operator> <name>z</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>d</name><index>[<expr><name>v</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>z</name> <operator>&amp;</operator> <literal type="number">0x7FFF</literal></expr>;</expr_stmt>
		</block_content>}</block></for>

		<expr_stmt><expr><name>zh</name> <operator>=</operator> <name>dh</name> <operator>+</operator> <name>r</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>d</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>zh</name> <operator>&amp;</operator> <literal type="number">0x7FFF</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>dh</name> <operator>=</operator> <name>zh</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/*
	 * Restore the bit length (it was overwritten in the loop above).
	 */</comment>
	<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

	<comment type="block">/*
	 * d[] may be greater than m[], but it is still lower than twice
	 * the modulus.
	 */</comment>
	<expr_stmt><expr><call><name>br_i15_sub</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><call><name>NEQ</name><argument_list>(<argument><expr><name>dh</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>NOT</name><argument_list>(<argument><expr><call><name>br_i15_sub</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
