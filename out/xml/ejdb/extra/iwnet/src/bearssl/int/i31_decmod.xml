<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/extra/iwnet/src/bearssl/int/i31_decmod.c"><comment type="block">/*
 * Copyright (c) 2016 Thomas Pornin &lt;pornin@bolet.org&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining 
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>

<comment type="block">/* see inner.h */</comment>
<function><type><name>uint32_t</name></type>
<name>br_i31_decode_mod</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * Two-pass algorithm: in the first pass, we determine whether the
	 * value fits; in the second pass, we do the actual write.
	 *
	 * During the first pass, 'r' contains the comparison result so
	 * far:
	 *  0x00000000   value is equal to the modulus
	 *  0x00000001   value is greater than the modulus
	 *  0xFFFFFFFF   value is lower than the modulus
	 *
	 * Since we iterate starting with the least significant bytes (at
	 * the end of src[]), each new comparison overrides the previous
	 * except when the comparison yields 0 (equal).
	 *
	 * During the second pass, 'r' is either 0xFFFFFFFF (value fits)
	 * or 0x00000000 (value does not fit).
	 *
	 * We must iterate over all bytes of the source, _and_ possibly
	 * some extra virtual bytes (with value 0) so as to cover the
	 * complete modulus as well. We also add 4 such extra bytes beyond
	 * the modulus length because it then guarantees that no accumulated
	 * partial word remains to be processed.
	 */</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>mlen</name></decl>, <decl><type ref="prev"/><name>tlen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>pass</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>r</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>mlen</name> <operator>=</operator> <operator>(</operator><name><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">31</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>tlen</name> <operator>=</operator> <operator>(</operator><name>mlen</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>tlen</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>tlen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>tlen</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>pass</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pass</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>pass</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint32_t</name></type> <name>acc</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>acc_len</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>acc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>acc_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>tlen</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>uint32_t</name></type> <name>b</name></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>u</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>u</name></expr>]</index></name></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<expr_stmt><expr><name>acc</name> <operator>|=</operator> <operator>(</operator><name>b</name> <operator>&lt;&lt;</operator> <name>acc_len</name><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>acc_len</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>acc_len</name> <operator>&gt;=</operator> <literal type="number">31</literal></expr>)</condition> <block>{<block_content>
				<decl_stmt><decl><type><name>uint32_t</name></type> <name>xw</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>xw</name> <operator>=</operator> <name>acc</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x7FFFFFFF</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>acc_len</name> <operator>-=</operator> <literal type="number">31</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>acc</name> <operator>=</operator> <name>b</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>acc_len</name><operator>)</operator></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;=</operator> <name>mlen</name></expr>)</condition> <block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name>pass</name></expr>)</condition> <block>{<block_content>
						<expr_stmt><expr><name><name>x</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name>r</name> <operator>&amp;</operator> <name>xw</name></expr>;</expr_stmt>
					</block_content>}</block></if> <else>else <block>{<block_content>
						<decl_stmt><decl><type><name>uint32_t</name></type> <name>cc</name></decl>;</decl_stmt>

						<expr_stmt><expr><name>cc</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>CMP</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name><name>m</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>MUX</name><argument_list>(<argument><expr><call><name>EQ</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></else></if_stmt>
				</block_content>}</block></if> <else>else <block>{<block_content>
					<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pass</name></expr>)</condition> <block>{<block_content>
						<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>MUX</name><argument_list>(<argument><expr><call><name>EQ</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></else></if_stmt>
				<expr_stmt><expr><name>v</name> <operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>

		<comment type="block">/*
		 * When we reach this point at the end of the first pass:
		 * r is either 0, 1 or -1; we want to set r to 0 if it
		 * is equal to 0 or 1, and leave it to -1 otherwise.
		 *
		 * When we reach this point at the end of the second pass:
		 * r is either 0 or -1; we want to leave that value
		 * untouched. This is a subcase of the previous.
		 */</comment>
		<expr_stmt><expr><name>r</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>r</name> <operator>|=</operator> <operator>(</operator><name>r</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<return>return <expr><name>r</name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
</unit>
