<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/extra/iwnet/src/bearssl/int/i31_modpow2.c"><comment type="block">/*
 * Copyright (c) 2017 Thomas Pornin &lt;pornin@bolet.org&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining 
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>

<comment type="block">/* see inner.h */</comment>
<function><type><name>uint32_t</name></type>
<name>br_i31_modpow_opt</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>elen</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>m0i</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>tmp</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>twlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>mlen</name></decl>, <decl><type ref="prev"/><name>mwlen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>t1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>t2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>acc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>acc_len</name></decl>, <decl><type ref="prev"/><name>win_len</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Get modulus size.
	 */</comment>
	<expr_stmt><expr><name>mwlen</name> <operator>=</operator> <operator>(</operator><name><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">63</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>mlen</name> <operator>=</operator> <name>mwlen</name> <operator>*</operator> <sizeof>sizeof <name><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name>mwlen</name> <operator>+=</operator> <operator>(</operator><name>mwlen</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>t1</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t2</name> <operator>=</operator> <name>tmp</name> <operator>+</operator> <name>mwlen</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Compute possible window size, with a maximum of 5 bits.
	 * When the window has size 1 bit, we use a specific code
	 * that requires only two temporaries. Otherwise, for a
	 * window of k bits, we need 2^k+1 temporaries.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>twlen</name> <operator>&lt;</operator> <operator>(</operator><name>mwlen</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<for>for <control>(<init><expr><name>win_len</name> <operator>=</operator> <literal type="number">5</literal></expr>;</init> <condition><expr><name>win_len</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>win_len</name> <operator>--</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>win_len</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>mwlen</name> <operator>&lt;=</operator> <name>twlen</name></expr>)</condition> <block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/*
	 * Everything is done in Montgomery representation.
	 */</comment>
	<expr_stmt><expr><call><name>br_i31_to_monty</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Compute window contents. If the window has size one bit only,
	 * then t2 is set to x; otherwise, t2[0] is left untouched, and
	 * t2[k] is set to x^k (for k &gt;= 1).
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>win_len</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>mlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>t2</name> <operator>+</operator> <name>mwlen</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>mlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>base</name> <operator>=</operator> <name>t2</name> <operator>+</operator> <name>mwlen</name></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>win_len</name><operator>)</operator></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>br_i31_montymul</name><argument_list>(<argument><expr><name>base</name> <operator>+</operator> <name>mwlen</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>m0i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>base</name> <operator>+=</operator> <name>mwlen</name></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/*
	 * We need to set x to 1, in Montgomery representation. This can
	 * be done efficiently by setting the high word to 1, then doing
	 * one word-sized shift.
	 */</comment>
	<expr_stmt><expr><call><name>br_i31_zero</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>x</name><index>[<expr><operator>(</operator><name><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">31</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_i31_muladd_small</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * We process bits from most to least significant. At each
	 * loop iteration, we have acc_len bits in acc.
	 */</comment>
	<expr_stmt><expr><name>acc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>acc_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>acc_len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>elen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint32_t</name></type> <name>bits</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * Get the next bits.
		 */</comment>
		<expr_stmt><expr><name>k</name> <operator>=</operator> <name>win_len</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>acc_len</name> <operator>&lt;</operator> <name>win_len</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>elen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>acc</name> <operator>=</operator> <operator>(</operator><name>acc</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>*</operator><name>e</name> <operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>elen</name> <operator>--</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>acc_len</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><name>k</name> <operator>=</operator> <name>acc_len</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>bits</name> <operator>=</operator> <operator>(</operator><name>acc</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>acc_len</name> <operator>-</operator> <name>k</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>k</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>acc_len</name> <operator>-=</operator> <name>k</name></expr>;</expr_stmt>

		<comment type="block">/*
		 * We could get exactly k bits. Compute k squarings.
		 */</comment>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>br_i31_montymul</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>m0i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>mlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>

		<comment type="block">/*
		 * Window lookup: we want to set t2 to the window
		 * lookup value, assuming the bits are non-zero. If
		 * the window length is 1 bit only, then t2 is
		 * already set; otherwise, we do a constant-time lookup.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>win_len</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>br_i31_zero</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><name><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>base</name> <operator>=</operator> <name>t2</name> <operator>+</operator> <name>mwlen</name></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>k</name><operator>)</operator></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<decl_stmt><decl><type><name>uint32_t</name></type> <name>mask</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>mask</name> <operator>=</operator> <operator>-</operator><call><name>EQ</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<for>for <control>(<init><expr><name>v</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>v</name> <operator>&lt;</operator> <name>mwlen</name></expr>;</condition> <incr><expr><name>v</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
					<expr_stmt><expr><name><name>t2</name><index>[<expr><name>v</name></expr>]</index></name> <operator>|=</operator> <name>mask</name> <operator>&amp;</operator> <name><name>base</name><index>[<expr><name>v</name></expr>]</index></name></expr>;</expr_stmt>
				</block_content>}</block></for>
				<expr_stmt><expr><name>base</name> <operator>+=</operator> <name>mwlen</name></expr>;</expr_stmt>
			</block_content>}</block></for>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * Multiply with the looked-up value. We keep the
		 * product only if the exponent bits are not all-zero.
		 */</comment>
		<expr_stmt><expr><call><name>br_i31_montymul</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>m0i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>CCOPY</name><argument_list>(<argument><expr><call><name>NEQ</name><argument_list>(<argument><expr><name>bits</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>mlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="block">/*
	 * Convert back from Montgomery representation, and exit.
	 */</comment>
	<expr_stmt><expr><call><name>br_i31_from_monty</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>m0i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
</unit>
