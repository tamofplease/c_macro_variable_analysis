<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/extra/iwnet/src/bearssl/ssl/ssl_rec_cbc.c"><comment type="block">/*
 * Copyright (c) 2016 Thomas Pornin &lt;pornin@bolet.org&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining 
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>in_cbc_init</name><parameter_list>(<parameter><decl><type><name>br_sslrec_in_cbc_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>br_block_cbcdec_class</name> <modifier>*</modifier></type><name>bc_impl</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>bc_key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bc_key_len</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type><name>dig_impl</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>mac_key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>mac_key_len</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>mac_out_len</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>vtable</name></name> <operator>=</operator> <operator>&amp;</operator><name>br_sslrec_in_cbc_vtable</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>seq</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>bc_impl</name><operator>-&gt;</operator><name>init</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>bc</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name>bc_key</name></expr></argument>, <argument><expr><name>bc_key_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_hmac_key_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>mac</name></name></expr></argument>, <argument><expr><name>dig_impl</name></expr></argument>, <argument><expr><name>mac_key</name></expr></argument>, <argument><expr><name>mac_key_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>mac_len</name></name> <operator>=</operator> <name>mac_out_len</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>iv</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name><name>cc</name><operator>-&gt;</operator><name>iv</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>explicit_IV</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name><name>bc_impl</name><operator>-&gt;</operator><name>block_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>explicit_IV</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cbc_check_length</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_sslrec_in_cbc_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>rlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * Plaintext size: at most 16384 bytes
	 * Padding: at most 256 bytes
	 * MAC: mac_len extra bytes
	 * TLS 1.1+: each record has an explicit IV
	 *
	 * Minimum length includes at least one byte of padding, and the
	 * MAC.
	 *
	 * Total length must be a multiple of the block size.
	 */</comment>
	<decl_stmt><decl><type><name>size_t</name></type> <name>blen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>min_len</name></decl>, <decl><type ref="prev"/><name>max_len</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>blen</name> <operator>=</operator> <name><name>cc</name><operator>-&gt;</operator><name>bc</name><operator>.</operator><name>vtable</name><operator>-&gt;</operator><name>block_size</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>min_len</name> <operator>=</operator> <operator>(</operator><name>blen</name> <operator>+</operator> <name><name>cc</name><operator>-&gt;</operator><name>mac_len</name></name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>blen</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>max_len</name> <operator>=</operator> <operator>(</operator><literal type="number">16384</literal> <operator>+</operator> <literal type="number">256</literal> <operator>+</operator> <name><name>cc</name><operator>-&gt;</operator><name>mac_len</name></name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>blen</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>cc</name><operator>-&gt;</operator><name>explicit_IV</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>min_len</name> <operator>+=</operator> <name>blen</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>max_len</name> <operator>+=</operator> <name>blen</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>min_len</name> <operator>&lt;=</operator> <name>rlen</name> <operator>&amp;&amp;</operator> <name>rlen</name> <operator>&lt;=</operator> <name>max_len</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Rotate array buf[] of length 'len' to the left (towards low indices)
 * by 'num' bytes if ctl is 1; otherwise, leave it unchanged. This is
 * constant-time. 'num' MUST be lower than 'len'. 'len' MUST be lower
 * than or equal to 64.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>cond_rotate</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>ctl</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>v</name> <operator>=</operator> <name>num</name></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <call><name>MUX</name><argument_list>(<argument><expr><name>ctl</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>++</operator> <name>v</name> <operator>==</operator> <name>len</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>cbc_decrypt</name><parameter_list>(<parameter><decl><type><name>br_sslrec_in_cbc_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>record_type</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>data_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * We represent all lengths on 32-bit integers, because:
	 * -- SSL record lengths always fit in 32 bits;
	 * -- our constant-time primitives operate on 32-bit integers.
	 */</comment>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>blen</name></decl>, <decl><type ref="prev"/><name>min_len</name></decl>, <decl><type ref="prev"/><name>max_len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>good</name></decl>, <decl><type ref="prev"/><name>pad_len</name></decl>, <decl><type ref="prev"/><name>rot_count</name></decl>, <decl><type ref="prev"/><name>len_withmac</name></decl>, <decl><type ref="prev"/><name>len_nomac</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp1</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>tmp2</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>br_hmac_context</name></type> <name>hc</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>*</operator><name>data_len</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>blen</name> <operator>=</operator> <name><name>cc</name><operator>-&gt;</operator><name>bc</name><operator>.</operator><name>vtable</name><operator>-&gt;</operator><name>block_size</name></name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Decrypt data, and skip the explicit IV (if applicable). Note
	 * that the total length is supposed to have been verified by
	 * the caller. If there is an explicit IV, then we actually
	 * "decrypt" it using the implicit IV (from previous record),
	 * which is useless but harmless.
	 */</comment>
	<expr_stmt><expr><call><name><name>cc</name><operator>-&gt;</operator><name>bc</name><operator>.</operator><name>vtable</name><operator>-&gt;</operator><name>run</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>bc</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>cc</name><operator>-&gt;</operator><name>explicit_IV</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>blen</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>blen</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Compute minimum and maximum length of plaintext + MAC. These
	 * lengths can be inferred from the outside: they are not secret.
	 */</comment>
	<expr_stmt><expr><name>min_len</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>cc</name><operator>-&gt;</operator><name>mac_len</name></name> <operator>+</operator> <literal type="number">256</literal> <operator>&lt;</operator> <name>len</name><operator>)</operator></expr> ?</condition><then> <expr><name>len</name> <operator>-</operator> <literal type="number">256</literal></expr> </then><else>: <expr><name><name>cc</name><operator>-&gt;</operator><name>mac_len</name></name></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><name>max_len</name> <operator>=</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * Use the last decrypted byte to compute the actual payload
	 * length. Take care not to overflow (we use unsigned types).
	 */</comment>
	<expr_stmt><expr><name>pad_len</name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>max_len</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>good</name> <operator>=</operator> <call><name>LE</name><argument_list>(<argument><expr><name>pad_len</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>max_len</name> <operator>-</operator> <name>min_len</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>MUX</name><argument_list>(<argument><expr><name>good</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>max_len</name> <operator>-</operator> <name>pad_len</name><operator>)</operator></expr></argument>, <argument><expr><name>min_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Check padding contents: all padding bytes must be equal to
	 * the value of pad_len.
	 */</comment>
	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <name>min_len</name></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>max_len</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>good</name> <operator>&amp;=</operator> <call><name>LT</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>EQ</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>, <argument><expr><name>pad_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/*
	 * Extract the MAC value. This is done in one pass, but results
	 * in a "rotated" MAC value depending on where it actually
	 * occurs. The 'rot_count' value is set to the offset of the
	 * first MAC byte within tmp1[].
	 *
	 * min_len and max_len are also adjusted to the minimum and
	 * maximum lengths of the plaintext alone (without the MAC).
	 */</comment>
	<expr_stmt><expr><name>len_withmac</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>len</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>len_nomac</name> <operator>=</operator> <name>len_withmac</name> <operator>-</operator> <name><name>cc</name><operator>-&gt;</operator><name>mac_len</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>min_len</name> <operator>-=</operator> <name><name>cc</name><operator>-&gt;</operator><name>mac_len</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rot_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>mac_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <name>min_len</name></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>max_len</name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>tmp1</name><index>[<expr><name>v</name></expr>]</index></name> <operator>|=</operator> <call><name>MUX</name><argument_list>(<argument><expr><call><name>GE</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>len_nomac</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <call><name>LT</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>len_withmac</name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><name><name>buf</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>rot_count</name> <operator>=</operator> <call><name>MUX</name><argument_list>(<argument><expr><call><name>EQ</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>len_nomac</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>rot_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>++</operator> <name>v</name> <operator>==</operator> <name><name>cc</name><operator>-&gt;</operator><name>mac_len</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name>max_len</name> <operator>-=</operator> <name><name>cc</name><operator>-&gt;</operator><name>mac_len</name></name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Rotate back the MAC value. The loop below does the constant-time
	 * rotation in time n*log n for a MAC output of length n. We assume
	 * that the MAC output length is no more than 64 bytes, so the
	 * rotation count fits on 6 bits.
	 */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">5</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name> <operator>--</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>uint32_t</name></type> <name>rc</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>rc</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>cond_rotate</name><argument_list>(<argument><expr><name>rot_count</name> <operator>&gt;&gt;</operator> <name>i</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>mac_len</name></name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>rot_count</name> <operator>&amp;=</operator> <operator>~</operator><name>rc</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/*
	 * Recompute the HMAC value. The input is the concatenation of
	 * the sequence number (8 bytes), the record header (5 bytes),
	 * and the payload.
	 *
	 * At that point, min_len is the minimum plaintext length, but
	 * max_len still includes the MAC length.
	 */</comment>
	<expr_stmt><expr><call><name>br_enc64be</name><argument_list>(<argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>seq</name></name> <operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tmp2</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>record_type</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_enc16be</name><argument_list>(<argument><expr><name>tmp2</name> <operator>+</operator> <literal type="number">9</literal></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_enc16be</name><argument_list>(<argument><expr><name>tmp2</name> <operator>+</operator> <literal type="number">11</literal></expr></argument>, <argument><expr><name>len_nomac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_hmac_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>mac</name></name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>mac_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_hmac_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hc</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_hmac_outCT</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hc</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len_nomac</name></expr></argument>, <argument><expr><name>min_len</name></expr></argument>, <argument><expr><name>max_len</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Compare the extracted and recomputed MAC values.
	 */</comment>
	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name><name>cc</name><operator>-&gt;</operator><name>mac_len</name></name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>good</name> <operator>&amp;=</operator> <call><name>EQ0</name><argument_list>(<argument><expr><name><name>tmp1</name><index>[<expr><name>u</name></expr>]</index></name> <operator>^</operator> <name><name>tmp2</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/*
	 * Check that the plaintext length is valid. The previous
	 * check was on the encrypted length, but the padding may have
	 * turned shorter than expected.
	 *
	 * Once this final test is done, the critical "constant-time"
	 * section ends and we can make conditional jumps again.
	 */</comment>
	<expr_stmt><expr><name>good</name> <operator>&amp;=</operator> <call><name>LE</name><argument_list>(<argument><expr><name>len_nomac</name></expr></argument>, <argument><expr><literal type="number">16384</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>good</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>data_len</name> <operator>=</operator> <name>len_nomac</name></expr>;</expr_stmt>
	<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* see bearssl_ssl.h */</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_sslrec_in_cbc_class</name></type> <name>br_sslrec_in_cbc_vtable</name> <init>= <expr><block>{
	<expr><block>{
		<expr><sizeof>sizeof<argument_list>(<argument><expr><name>br_sslrec_in_cbc_context</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>(</operator><call><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>br_sslrec_in_class</name> <operator>*</operator><specifier>const</specifier> <operator>*</operator></expr></argument>, <argument><expr><name>size_t</name></expr></argument>)</argument_list></call><operator>)</operator>
			<operator>&amp;</operator><name>cbc_check_length</name></expr>,
		<expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><call>(<modifier>*</modifier>)<argument_list>(<argument><expr><specifier>const</specifier> <name>br_sslrec_in_class</name> <operator>*</operator><operator>*</operator></expr></argument>,
			<argument><expr><name>int</name></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>size_t</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator>
			<operator>&amp;</operator><name>cbc_decrypt</name></expr>
	}</block></expr>,
	<expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>br_sslrec_in_cbc_class</name> <operator>*</operator><operator>*</operator></expr></argument>,
		<argument><expr><specifier>const</specifier> <name>br_block_cbcdec_class</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>size_t</name></expr></argument>,
		<argument><expr><specifier>const</specifier> <name>br_hash_class</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>,
		<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator>
		<operator>&amp;</operator><name>in_cbc_init</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * For CBC output:
 *
 * -- With TLS 1.1+, there is an explicit IV. Generation method uses
 * HMAC, computed over the current sequence number, and the current MAC
 * key. The resulting value is truncated to the size of a block, and
 * added at the head of the plaintext; it will get encrypted along with
 * the data. This custom generation mechanism is "safe" under the
 * assumption that HMAC behaves like a random oracle; since the MAC for
 * a record is computed over the concatenation of the sequence number,
 * the record header and the plaintext, the HMAC-for-IV will not collide
 * with the normal HMAC.
 *
 * -- With TLS 1.0, for application data, we want to enforce a 1/n-1
 * split, as a countermeasure against chosen-plaintext attacks. We thus
 * need to leave some room in the buffer for that extra record.
 */</comment>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>out_cbc_init</name><parameter_list>(<parameter><decl><type><name>br_sslrec_out_cbc_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>br_block_cbcenc_class</name> <modifier>*</modifier></type><name>bc_impl</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>bc_key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bc_key_len</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type><name>dig_impl</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>mac_key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>mac_key_len</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>mac_out_len</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>vtable</name></name> <operator>=</operator> <operator>&amp;</operator><name>br_sslrec_out_cbc_vtable</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>seq</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>bc_impl</name><operator>-&gt;</operator><name>init</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>bc</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name>bc_key</name></expr></argument>, <argument><expr><name>bc_key_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_hmac_key_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>mac</name></name></expr></argument>, <argument><expr><name>dig_impl</name></expr></argument>, <argument><expr><name>mac_key</name></expr></argument>, <argument><expr><name>mac_key_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>mac_len</name></name> <operator>=</operator> <name>mac_out_len</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>iv</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name><name>cc</name><operator>-&gt;</operator><name>iv</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>explicit_IV</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name><name>bc_impl</name><operator>-&gt;</operator><name>block_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>explicit_IV</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>cbc_max_plaintext</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_sslrec_out_cbc_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
	<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>blen</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>blen</name> <operator>=</operator> <name><name>cc</name><operator>-&gt;</operator><name>bc</name><operator>.</operator><name>vtable</name><operator>-&gt;</operator><name>block_size</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>cc</name><operator>-&gt;</operator><name>explicit_IV</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>start</name> <operator>+=</operator> <name>blen</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>start</name> <operator>+=</operator> <literal type="number">4</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>cc</name><operator>-&gt;</operator><name>mac_len</name></name> <operator>+</operator> <name>blen</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>blen</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>end</name> <operator>-</operator> <operator>*</operator><name>start</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>blen</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>cc</name><operator>-&gt;</operator><name>mac_len</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">16384</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">16384</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <operator>*</operator><name>start</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>cbc_encrypt</name><parameter_list>(<parameter><decl><type><name>br_sslrec_out_cbc_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>record_type</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>data_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rbuf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>blen</name></decl>, <decl><type ref="prev"/><name>plen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>br_hmac_context</name></type> <name>hc</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>*</operator><name>data_len</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>blen</name> <operator>=</operator> <name><name>cc</name><operator>-&gt;</operator><name>bc</name><operator>.</operator><name>vtable</name><operator>-&gt;</operator><name>block_size</name></name></expr>;</expr_stmt>

	<comment type="block">/*
	 * If using TLS 1.0, with more than one byte of plaintext, and
	 * the record is application data, then we need to compute
	 * a "split". We do not perform the split on other record types
	 * because it turned out that some existing, deployed
	 * implementations of SSL/TLS do not tolerate the splitting of
	 * some message types (in particular the Finished message).
	 *
	 * If using TLS 1.1+, then there is an explicit IV. We produce
	 * that IV by adding an extra initial plaintext block, whose
	 * value is computed with HMAC over the record sequence number.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>cc</name><operator>-&gt;</operator><name>explicit_IV</name></name></expr>)</condition> <block>{<block_content>
		<comment type="block">/*
		 * We use here the fact that all the HMAC variants we
		 * support can produce at least 16 bytes, while all the
		 * block ciphers we support have blocks of no more than
		 * 16 bytes. Thus, we can always truncate the HMAC output
		 * down to the block size.
		 */</comment>
		<expr_stmt><expr><call><name>br_enc64be</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>seq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>br_hmac_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>mac</name></name></expr></argument>, <argument><expr><name>blen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>br_hmac_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hc</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>br_hmac_out</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hc</name></expr></argument>, <argument><expr><name>buf</name> <operator>-</operator> <name>blen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>rbuf</name> <operator>=</operator> <name>buf</name> <operator>-</operator> <name>blen</name> <operator>-</operator> <literal type="number">5</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>record_type</name> <operator>==</operator> <name>BR_SSL_APPLICATION_DATA</name></expr>)</condition> <block>{<block_content>
			<comment type="block">/*
			 * To do the split, we use a recursive invocation;
			 * since we only give one byte to the inner call,
			 * the recursion stops there.
			 *
			 * We need to compute the exact size of the extra
			 * record, so that the two resulting records end up
			 * being sequential in RAM.
			 *
			 * We use here the fact that cbc_max_plaintext()
			 * adjusted the start offset to leave room for the
			 * initial fragment.
			 */</comment>
			<decl_stmt><decl><type><name>size_t</name></type> <name>xlen</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>rbuf</name> <operator>=</operator> <name>buf</name> <operator>-</operator> <literal type="number">4</literal>
				<operator>-</operator> <operator>(</operator><operator>(</operator><name><name>cc</name><operator>-&gt;</operator><name>mac_len</name></name> <operator>+</operator> <name>blen</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>blen</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>rbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>xlen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>rbuf</name> <operator>=</operator> <call><name>cbc_encrypt</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>record_type</name></expr></argument>,
				<argument><expr><name>version</name></expr></argument>, <argument><expr><name>rbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>buf</name> <operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>len</name> <operator>--</operator></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>rbuf</name> <operator>=</operator> <name>buf</name> <operator>-</operator> <literal type="number">5</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/*
	 * Compute MAC.
	 */</comment>
	<expr_stmt><expr><call><name>br_enc64be</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>seq</name></name> <operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tmp</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>record_type</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_enc16be</name><argument_list>(<argument><expr><name>tmp</name> <operator>+</operator> <literal type="number">9</literal></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_enc16be</name><argument_list>(<argument><expr><name>tmp</name> <operator>+</operator> <literal type="number">11</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_hmac_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>mac</name></name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>mac_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_hmac_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hc</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_hmac_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hc</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_hmac_out</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hc</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>len</name> <operator>+=</operator> <name><name>cc</name><operator>-&gt;</operator><name>mac_len</name></name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Add padding.
	 */</comment>
	<expr_stmt><expr><name>plen</name> <operator>=</operator> <name>blen</name> <operator>-</operator> <operator>(</operator><name>len</name> <operator>&amp;</operator> <operator>(</operator><name>blen</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>plen</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>plen</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * If an explicit IV is used, the corresponding extra block was
	 * already put in place earlier; we just have to account for it
	 * here.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>cc</name><operator>-&gt;</operator><name>explicit_IV</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>buf</name> <operator>-=</operator> <name>blen</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>blen</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Encrypt the whole thing. If there is an explicit IV, we also
	 * encrypt it, which is fine (encryption of a uniformly random
	 * block is still a uniformly random block).
	 */</comment>
	<expr_stmt><expr><call><name><name>cc</name><operator>-&gt;</operator><name>bc</name><operator>.</operator><name>vtable</name><operator>-&gt;</operator><name>run</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>bc</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Add the header and return.
	 */</comment>
	<expr_stmt><expr><name><name>buf</name><index>[<expr><operator>-</operator><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>record_type</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_enc16be</name><argument_list>(<argument><expr><name>buf</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_enc16be</name><argument_list>(<argument><expr><name>buf</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>data_len</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>buf</name> <operator>+</operator> <name>len</name><operator>)</operator> <operator>-</operator> <name>rbuf</name><operator>)</operator></expr>;</expr_stmt>
	<return>return <expr><name>rbuf</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* see bearssl_ssl.h */</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_sslrec_out_cbc_class</name></type> <name>br_sslrec_out_cbc_vtable</name> <init>= <expr><block>{
	<expr><block>{
		<expr><sizeof>sizeof<argument_list>(<argument><expr><name>br_sslrec_out_cbc_context</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>br_sslrec_out_class</name> <operator>*</operator><specifier>const</specifier> <operator>*</operator></expr></argument>,
			<argument><expr><name>size_t</name> <operator>*</operator></expr></argument>, <argument><expr><name>size_t</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator>
			<operator>&amp;</operator><name>cbc_max_plaintext</name></expr>,
		<expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><call>(<modifier>*</modifier>)<argument_list>(<argument><expr><specifier>const</specifier> <name>br_sslrec_out_class</name> <operator>*</operator><operator>*</operator></expr></argument>,
			<argument><expr><name>int</name></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>size_t</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator>
			<operator>&amp;</operator><name>cbc_encrypt</name></expr>
	}</block></expr>,
	<expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>br_sslrec_out_cbc_class</name> <operator>*</operator><operator>*</operator></expr></argument>,
		<argument><expr><specifier>const</specifier> <name>br_block_cbcenc_class</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>size_t</name></expr></argument>,
		<argument><expr><specifier>const</specifier> <name>br_hash_class</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>,
		<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator>
		<operator>&amp;</operator><name>out_cbc_init</name></expr>
}</block></expr></init></decl>;</decl_stmt>
</unit>
