<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/extra/iwnet/src/bearssl/ssl/ssl_ccert_single_ec.c"><comment type="block">/*
 * Copyright (c) 2016 Thomas Pornin &lt;pornin@bolet.org&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining 
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>cc_none0</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_ssl_client_certificate_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>pctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>pctx</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>cc_none1</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_ssl_client_certificate_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>pctx</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>pctx</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>len</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>cc_none2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_ssl_client_certificate_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>pctx</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>pctx</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>len</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>cc_choose</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_ssl_client_certificate_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>pctx</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>br_ssl_client_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>auth_types</name></decl></parameter>,
	<parameter><decl><type><name>br_ssl_client_certificate</name> <modifier>*</modifier></type><name>choices</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>br_ssl_client_certificate_ec_context</name> <modifier>*</modifier></type><name>zc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>scurve</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>zc</name> <operator>=</operator> <operator>(</operator><name>br_ssl_client_certificate_ec_context</name> <operator>*</operator><operator>)</operator><name>pctx</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>scurve</name> <operator>=</operator> <call><name>br_ssl_client_get_server_curve</name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>zc</name><operator>-&gt;</operator><name>allowed_usages</name></name> <operator>&amp;</operator> <name>BR_KEYTYPE_KEYX</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal>
		<operator>&amp;&amp;</operator> <name>scurve</name> <operator>==</operator> <name><name>zc</name><operator>-&gt;</operator><name>sk</name><operator>-&gt;</operator><name>curve</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>x</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>zc</name><operator>-&gt;</operator><name>issuer_key_type</name></name> <operator>==</operator> <name>BR_KEYTYPE_RSA</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">16</literal></expr> </then><else>: <expr><literal type="number">17</literal></expr></else></ternary></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>auth_types</name> <operator>&gt;&gt;</operator> <name>x</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>choices</name><operator>-&gt;</operator><name>auth_type</name></name> <operator>=</operator> <name>BR_AUTH_ECDH</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>choices</name><operator>-&gt;</operator><name>hash_id</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>choices</name><operator>-&gt;</operator><name>chain</name></name> <operator>=</operator> <name><name>zc</name><operator>-&gt;</operator><name>chain</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>choices</name><operator>-&gt;</operator><name>chain_len</name></name> <operator>=</operator> <name><name>zc</name><operator>-&gt;</operator><name>chain_len</name></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * For ECDSA authentication, we must choose an appropriate
	 * hash function.
	 */</comment>
	<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>br_ssl_choose_hash</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>auth_types</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name><name>zc</name><operator>-&gt;</operator><name>allowed_usages</name></name> <operator>&amp;</operator> <name>BR_KEYTYPE_SIGN</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>choices</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name>choices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>choices</name><operator>-&gt;</operator><name>auth_type</name></name> <operator>=</operator> <name>BR_AUTH_ECDSA</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>choices</name><operator>-&gt;</operator><name>hash_id</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>choices</name><operator>-&gt;</operator><name>chain</name></name> <operator>=</operator> <name><name>zc</name><operator>-&gt;</operator><name>chain</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>choices</name><operator>-&gt;</operator><name>chain_len</name></name> <operator>=</operator> <name><name>zc</name><operator>-&gt;</operator><name>chain_len</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type>
<name>cc_do_keyx</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_ssl_client_certificate_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>pctx</name></decl></parameter>,
	<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>br_ssl_client_certificate_ec_context</name> <modifier>*</modifier></type><name>zc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>xoff</name></decl>, <decl><type ref="prev"/><name>xlen</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>zc</name> <operator>=</operator> <operator>(</operator><name>br_ssl_client_certificate_ec_context</name> <operator>*</operator><operator>)</operator><name>pctx</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name><name>zc</name><operator>-&gt;</operator><name>iec</name><operator>-&gt;</operator><name>mul</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>*</operator><name>len</name></expr></argument>, <argument><expr><name><name>zc</name><operator>-&gt;</operator><name>sk</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>zc</name><operator>-&gt;</operator><name>sk</name><operator>-&gt;</operator><name>xlen</name></name></expr></argument>, <argument><expr><name><name>zc</name><operator>-&gt;</operator><name>sk</name><operator>-&gt;</operator><name>curve</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>xoff</name> <operator>=</operator> <call><name><name>zc</name><operator>-&gt;</operator><name>iec</name><operator>-&gt;</operator><name>xoff</name></name><argument_list>(<argument><expr><name><name>zc</name><operator>-&gt;</operator><name>sk</name><operator>-&gt;</operator><name>curve</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>data</name> <operator>+</operator> <name>xoff</name></expr></argument>, <argument><expr><name>xlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name>xlen</name></expr>;</expr_stmt>
	<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>cc_do_sign</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_ssl_client_certificate_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>pctx</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>hash_id</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>hv_len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>br_ssl_client_certificate_ec_context</name> <modifier>*</modifier></type><name>zc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>hv</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type><name>hc</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>zc</name> <operator>=</operator> <operator>(</operator><name>br_ssl_client_certificate_ec_context</name> <operator>*</operator><operator>)</operator><name>pctx</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>hv</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>hv_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>hc</name> <operator>=</operator> <call><name>br_multihash_getimpl</name><argument_list>(<argument><expr><name><name>zc</name><operator>-&gt;</operator><name>mhash</name></name></expr></argument>, <argument><expr><name>hash_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>hc</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">139</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><call><name><name>zc</name><operator>-&gt;</operator><name>iecdsa</name></name><argument_list>(<argument><expr><name><name>zc</name><operator>-&gt;</operator><name>iec</name></name></expr></argument>, <argument><expr><name>hc</name></expr></argument>, <argument><expr><name>hv</name></expr></argument>, <argument><expr><name><name>zc</name><operator>-&gt;</operator><name>sk</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>br_ssl_client_certificate_class</name></type> <name>ccert_vtable</name> <init>= <expr><block>{
	<expr><sizeof>sizeof<argument_list>(<argument><expr><name>br_ssl_client_certificate_ec_context</name></expr></argument>)</argument_list></sizeof></expr>,
	<expr><name>cc_none0</name></expr>, <comment type="block">/* start_name_list */</comment>
	<expr><name>cc_none1</name></expr>, <comment type="block">/* start_name */</comment>
	<expr><name>cc_none2</name></expr>, <comment type="block">/* append_name */</comment>
	<expr><name>cc_none0</name></expr>, <comment type="block">/* end_name */</comment>
	<expr><name>cc_none0</name></expr>, <comment type="block">/* end_name_list */</comment>
	<expr><name>cc_choose</name></expr>,
	<expr><name>cc_do_keyx</name></expr>,
	<expr><name>cc_do_sign</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* see bearssl_ssl.h */</comment>
<function><type><name>void</name></type>
<name>br_ssl_client_set_single_ec</name><parameter_list>(<parameter><decl><type><name>br_ssl_client_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>br_x509_certificate</name> <modifier>*</modifier></type><name>chain</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>chain_len</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>br_ec_private_key</name> <modifier>*</modifier></type><name>sk</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>allowed_usages</name></decl></parameter>,
	<parameter><decl><type><name>unsigned</name></type> <name>cert_issuer_key_type</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>br_ec_impl</name> <modifier>*</modifier></type><name>iec</name></decl></parameter>, <parameter><decl><type><name>br_ecdsa_sign</name></type> <name>iecdsa</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>client_auth</name><operator>.</operator><name>single_ec</name><operator>.</operator><name>vtable</name></name> <operator>=</operator> <operator>&amp;</operator><name>ccert_vtable</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>client_auth</name><operator>.</operator><name>single_ec</name><operator>.</operator><name>chain</name></name> <operator>=</operator> <name>chain</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>client_auth</name><operator>.</operator><name>single_ec</name><operator>.</operator><name>chain_len</name></name> <operator>=</operator> <name>chain_len</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>client_auth</name><operator>.</operator><name>single_ec</name><operator>.</operator><name>sk</name></name> <operator>=</operator> <name>sk</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>client_auth</name><operator>.</operator><name>single_ec</name><operator>.</operator><name>allowed_usages</name></name> <operator>=</operator> <name>allowed_usages</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>client_auth</name><operator>.</operator><name>single_ec</name><operator>.</operator><name>issuer_key_type</name></name> <operator>=</operator> <name>cert_issuer_key_type</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>client_auth</name><operator>.</operator><name>single_ec</name><operator>.</operator><name>mhash</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>eng</name><operator>.</operator><name>mhash</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>client_auth</name><operator>.</operator><name>single_ec</name><operator>.</operator><name>iec</name></name> <operator>=</operator> <name>iec</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>client_auth</name><operator>.</operator><name>single_ec</name><operator>.</operator><name>iecdsa</name></name> <operator>=</operator> <name>iecdsa</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>client_auth_vtable</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>client_auth</name><operator>.</operator><name>single_ec</name><operator>.</operator><name>vtable</name></name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
