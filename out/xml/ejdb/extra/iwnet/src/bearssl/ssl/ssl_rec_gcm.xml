<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/extra/iwnet/src/bearssl/ssl/ssl_rec_gcm.c"><comment type="block">/*
 * Copyright (c) 2016 Thomas Pornin &lt;pornin@bolet.org&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining 
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>

<comment type="block">/*
 * GCM initialisation. This does everything except setting the vtable,
 * which depends on whether this is a context for encrypting or for
 * decrypting.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>gen_gcm_init</name><parameter_list>(<parameter><decl><type><name>br_sslrec_gcm_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>br_block_ctr_class</name> <modifier>*</modifier></type><name>bc_impl</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>key_len</name></decl></parameter>,
	<parameter><decl><type><name>br_ghash</name></type> <name>gh_impl</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>seq</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>bc_impl</name><operator>-&gt;</operator><name>init</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>bc</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>gh</name></name> <operator>=</operator> <name>gh_impl</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><sizeof>sizeof <name><name>cc</name><operator>-&gt;</operator><name>iv</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name><name>cc</name><operator>-&gt;</operator><name>h</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>tmp</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>bc_impl</name><operator>-&gt;</operator><name>run</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>bc</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><sizeof>sizeof <name><name>cc</name><operator>-&gt;</operator><name>h</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>in_gcm_init</name><parameter_list>(<parameter><decl><type><name>br_sslrec_gcm_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>br_block_ctr_class</name> <modifier>*</modifier></type><name>bc_impl</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>key_len</name></decl></parameter>,
	<parameter><decl><type><name>br_ghash</name></type> <name>gh_impl</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>vtable</name><operator>.</operator><name>in</name></name> <operator>=</operator> <operator>&amp;</operator><name>br_sslrec_in_gcm_vtable</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>gen_gcm_init</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>bc_impl</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>, <argument><expr><name>gh_impl</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>gcm_check_length</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_sslrec_gcm_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>rlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * GCM adds a fixed overhead:
	 *   8 bytes for the nonce_explicit (before the ciphertext)
	 *  16 bytes for the authentication tag (after the ciphertext)
	 */</comment>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>cc</name></expr>;</expr_stmt>
	<return>return <expr><name>rlen</name> <operator>&gt;=</operator> <literal type="number">24</literal> <operator>&amp;&amp;</operator> <name>rlen</name> <operator>&lt;=</operator> <operator>(</operator><literal type="number">16384</literal> <operator>+</operator> <literal type="number">24</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Compute the authentication tag. The value written in 'tag' must still
 * be CTR-encrypted.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>do_tag</name><parameter_list>(<parameter><decl><type><name>br_sslrec_gcm_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>record_type</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>version</name></decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>header</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>footer</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Compute authentication tag. Three elements must be injected in
	 * sequence, each possibly 0-padded to reach a length multiple
	 * of the block size: the 13-byte header (sequence number, record
	 * type, protocol version, record length), the cipher text, and
	 * the word containing the encodings of the bit lengths of the two
	 * other elements.
	 */</comment>
	<expr_stmt><expr><call><name>br_enc64be</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>seq</name></name> <operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>header</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>record_type</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_enc16be</name><argument_list>(<argument><expr><name>header</name> <operator>+</operator> <literal type="number">9</literal></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_enc16be</name><argument_list>(<argument><expr><name>header</name> <operator>+</operator> <literal type="number">11</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_enc64be</name><argument_list>(<argument><expr><name>footer</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><sizeof>sizeof <name>header</name></sizeof><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_enc64be</name><argument_list>(<argument><expr><name>footer</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>len</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cc</name><operator>-&gt;</operator><name>gh</name></name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><sizeof>sizeof <name>header</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cc</name><operator>-&gt;</operator><name>gh</name></name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cc</name><operator>-&gt;</operator><name>gh</name></name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name>footer</name></expr></argument>, <argument><expr><sizeof>sizeof <name>footer</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Do CTR encryption. This also does CTR encryption of a single block at
 * address 'xortag' with the counter value appropriate for the final
 * processing of the authentication tag.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>do_ctr</name><parameter_list>(<parameter><decl><type><name>br_sslrec_gcm_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>nonce</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>xortag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>iv</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>iv</name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>iv</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>nonce</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cc</name><operator>-&gt;</operator><name>bc</name><operator>.</operator><name>vtable</name><operator>-&gt;</operator><name>run</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>bc</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cc</name><operator>-&gt;</operator><name>bc</name><operator>.</operator><name>vtable</name><operator>-&gt;</operator><name>run</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>bc</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>xortag</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>gcm_decrypt</name><parameter_list>(<parameter><decl><type><name>br_sslrec_gcm_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>record_type</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>data_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>u</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>bad</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tag</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>data</name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>*</operator><name>data_len</name> <operator>-</operator> <literal type="number">24</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>do_tag</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>record_type</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>do_ctr</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Compare the computed tag with the value from the record. It
	 * is possibly useless to do a constant-time comparison here,
	 * but it does not hurt.
	 */</comment>
	<expr_stmt><expr><name>bad</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>bad</name> <operator>|=</operator> <name><name>tag</name><index>[<expr><name>u</name></expr>]</index></name> <operator>^</operator> <name><name>buf</name><index>[<expr><name>len</name> <operator>+</operator> <name>u</name></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<if_stmt><if>if <condition>(<expr><name>bad</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>data_len</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
	<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* see bearssl_ssl.h */</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_sslrec_in_gcm_class</name></type> <name>br_sslrec_in_gcm_vtable</name> <init>= <expr><block>{
	<expr><block>{
		<expr><sizeof>sizeof<argument_list>(<argument><expr><name>br_sslrec_gcm_context</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>(</operator><call><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>br_sslrec_in_class</name> <operator>*</operator><specifier>const</specifier> <operator>*</operator></expr></argument>, <argument><expr><name>size_t</name></expr></argument>)</argument_list></call><operator>)</operator>
			<operator>&amp;</operator><name>gcm_check_length</name></expr>,
		<expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><call>(<modifier>*</modifier>)<argument_list>(<argument><expr><specifier>const</specifier> <name>br_sslrec_in_class</name> <operator>*</operator><operator>*</operator></expr></argument>,
			<argument><expr><name>int</name></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>size_t</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator>
			<operator>&amp;</operator><name>gcm_decrypt</name></expr>
	}</block></expr>,
	<expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>br_sslrec_in_gcm_class</name> <operator>*</operator><operator>*</operator></expr></argument>,
		<argument><expr><specifier>const</specifier> <name>br_block_ctr_class</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>size_t</name></expr></argument>,
		<argument><expr><name>br_ghash</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator>
		<operator>&amp;</operator><name>in_gcm_init</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>out_gcm_init</name><parameter_list>(<parameter><decl><type><name>br_sslrec_gcm_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>br_block_ctr_class</name> <modifier>*</modifier></type><name>bc_impl</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>key_len</name></decl></parameter>,
	<parameter><decl><type><name>br_ghash</name></type> <name>gh_impl</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>vtable</name><operator>.</operator><name>out</name></name> <operator>=</operator> <operator>&amp;</operator><name>br_sslrec_out_gcm_vtable</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>gen_gcm_init</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>bc_impl</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>, <argument><expr><name>gh_impl</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>gcm_max_plaintext</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_sslrec_gcm_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
	<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>cc</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>start</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>*</operator><name>end</name> <operator>-</operator> <operator>*</operator><name>start</name> <operator>-</operator> <literal type="number">16</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">16384</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">16384</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <operator>*</operator><name>start</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>gcm_encrypt</name><parameter_list>(<parameter><decl><type><name>br_sslrec_gcm_context</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>record_type</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>data_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>data</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>*</operator><name>data_len</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>tmp</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_enc64be</name><argument_list>(<argument><expr><name>buf</name> <operator>-</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>seq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>do_ctr</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>buf</name> <operator>-</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>do_tag</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>record_type</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name> <operator>+</operator> <name>u</name></expr>]</index></name> <operator>^=</operator> <name><name>tmp</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">24</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>buf</name> <operator>-=</operator> <literal type="number">13</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>record_type</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_enc16be</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_enc16be</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>data_len</name> <operator>=</operator> <name>len</name> <operator>+</operator> <literal type="number">5</literal></expr>;</expr_stmt>
	<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* see bearssl_ssl.h */</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_sslrec_out_gcm_class</name></type> <name>br_sslrec_out_gcm_vtable</name> <init>= <expr><block>{
	<expr><block>{
		<expr><sizeof>sizeof<argument_list>(<argument><expr><name>br_sslrec_gcm_context</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>br_sslrec_out_class</name> <operator>*</operator><specifier>const</specifier> <operator>*</operator></expr></argument>,
			<argument><expr><name>size_t</name> <operator>*</operator></expr></argument>, <argument><expr><name>size_t</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator>
			<operator>&amp;</operator><name>gcm_max_plaintext</name></expr>,
		<expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><call>(<modifier>*</modifier>)<argument_list>(<argument><expr><specifier>const</specifier> <name>br_sslrec_out_class</name> <operator>*</operator><operator>*</operator></expr></argument>,
			<argument><expr><name>int</name></expr></argument>, <argument><expr><name>unsigned</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>size_t</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator>
			<operator>&amp;</operator><name>gcm_encrypt</name></expr>
	}</block></expr>,
	<expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>br_sslrec_out_gcm_class</name> <operator>*</operator><operator>*</operator></expr></argument>,
		<argument><expr><specifier>const</specifier> <name>br_block_ctr_class</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>size_t</name></expr></argument>,
		<argument><expr><name>br_ghash</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator>
		<operator>&amp;</operator><name>out_gcm_init</name></expr>
}</block></expr></init></decl>;</decl_stmt>
</unit>
