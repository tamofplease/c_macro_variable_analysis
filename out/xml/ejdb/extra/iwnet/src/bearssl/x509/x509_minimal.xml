<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/extra/iwnet/src/bearssl/x509/x509_minimal.c"><comment type="block">/* Automatically generated code; do not modify directly. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>rp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ip</name></decl>;</decl_stmt>
}</block></struct></type> <name>t0_context</name>;</typedef>

<function><type><specifier>static</specifier> <name>uint32_t</name></type>
<name>t0_parse7E_unsigned</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>x</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>unsigned</name></type> <name>y</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>y</name> <operator>&amp;</operator> <literal type="number">0x7F</literal><operator>)</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>x</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type>
<name>t0_parse7E_signed</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>neg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>x</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>neg</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>*</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>-</operator><name>neg</name></expr>;</expr_stmt>
	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>unsigned</name></type> <name>y</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>y</name> <operator>&amp;</operator> <literal type="number">0x7F</literal><operator>)</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>neg</name></expr>)</condition> <block>{<block_content>
				<return>return <expr><operator>-</operator><operator>(</operator><name>int32_t</name><operator>)</operator><operator>~</operator><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<return>return <expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>x</name></expr>;</return>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_VBYTE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>(unsigned char)((((uint32_t)(x) &gt;&gt; (n)) &amp; 0x7F) | 0x80)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_FBYTE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>(unsigned char)(((uint32_t)(x) &gt;&gt; (n)) &amp; 0x7F)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_SBYTE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>(unsigned char)((((uint32_t)(x) &gt;&gt; 28) + 0xF8) ^ 0xF8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_INT1</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>T0_FBYTE(x, 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_INT2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>T0_VBYTE(x, 7), T0_FBYTE(x, 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_INT3</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>T0_VBYTE(x, 14), T0_VBYTE(x, 7), T0_FBYTE(x, 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_INT4</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>T0_VBYTE(x, 21), T0_VBYTE(x, 14), T0_VBYTE(x, 7), T0_FBYTE(x, 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_INT5</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>T0_SBYTE(x), T0_VBYTE(x, 21), T0_VBYTE(x, 14), T0_VBYTE(x, 7), T0_FBYTE(x, 0)</cpp:value></cpp:define>

<comment type="block">/* static const unsigned char t0_datablock[]; */</comment>


<function_decl><type><name>void</name></type> <name>br_x509_minimal_init_main</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>t0ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>br_x509_minimal_run</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>t0ctx</name></decl></parameter>)</parameter_list>;</function_decl>



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>





<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Implementation Notes
 * --------------------
 *
 * The C code pushes the data by chunks; all decoding is done in the
 * T0 code. The cert_length value is set to the certificate length when
 * a new certificate is started; the T0 code picks it up as outer limit,
 * and decoding functions use it to ensure that no attempt is made at
 * reading past it. The T0 code also checks that once the certificate is
 * decoded, there are no trailing bytes.
 *
 * The T0 code sets cert_length to 0 when the certificate is fully
 * decoded.
 *
 * The C code must still perform two checks:
 *
 *  -- If the certificate length is 0, then the T0 code will not be
 *  invoked at all. This invalid condition must thus be reported by the
 *  C code.
 *
 *  -- When reaching the end of certificate, the C code must verify that
 *  the certificate length has been set to 0, thereby signaling that
 *  the T0 code properly decoded a certificate.
 *
 * Processing of a chain works in the following way:
 *
 *  -- The error flag is set to a non-zero value when validation is
 *  finished. The value is either BR_ERR_X509_OK (validation is
 *  successful) or another non-zero error code. When a non-zero error
 *  code is obtained, the remaining bytes in the current certificate and
 *  the subsequent certificates (if any) are completely ignored.
 *
 *  -- Each certificate is decoded in due course, with the following
 *  "interesting points":
 *
 *     -- Start of the TBS: the multihash engine is reset and activated.
 *
 *     -- Start of the issuer DN: the secondary hash engine is started,
 *     to process the encoded issuer DN.
 *
 *     -- End of the issuer DN: the secondary hash engine is stopped. The
 *     resulting hash value is computed and then copied into the
 *     next_dn_hash[] buffer.
 *
 *     -- Start of the subject DN: the secondary hash engine is started,
 *     to process the encoded subject DN.
 *
 *     -- For the EE certificate only: the Common Name, if any, is matched
 *     against the expected server name.
 *
 *     -- End of the subject DN: the secondary hash engine is stopped. The
 *     resulting hash value is computed into the pad. It is then processed:
 *
 *        -- If this is the EE certificate, then the hash is ignored
 *        (except for direct trust processing, see later; the hash is
 *        simply left in current_dn_hash[]).
 *
 *        -- Otherwise, the hashed subject DN is compared with the saved
 *        hash value (in saved_dn_hash[]). They must match.
 *
 *     Either way, the next_dn_hash[] value is then copied into the
 *     saved_dn_hash[] value. Thus, at that point, saved_dn_hash[]
 *     contains the hash of the issuer DN for the current certificate,
 *     and current_dn_hash[] contains the hash of the subject DN for the
 *     current certificate.
 *
 *     -- Public key: it is decoded into the cert_pkey[] buffer. Unknown
 *     key types are reported at that point.
 *
 *        -- If this is the EE certificate, then the key type is compared
 *        with the expected key type (initialization parameter). The public
 *        key data is copied to ee_pkey_data[]. The key and hashed subject
 *        DN are also compared with the "direct trust" keys; if the key
 *        and DN are matched, then validation ends with a success.
 *
 *        -- Otherwise, the saved signature (cert_sig[]) is verified
 *        against the saved TBS hash (tbs_hash[]) and that freshly
 *        decoded public key. Failure here ends validation with an error.
 *
 *     -- Extensions: extension values are processed in due order.
 *
 *        -- Basic Constraints: for all certificates except EE, must be
 *        present, indicate a CA, and have a path length compatible with
 *        the chain length so far.
 *
 *        -- Key Usage: for the EE, if present, must allow signatures
 *        or encryption/key exchange, as required for the cipher suite.
 *        For non-EE, if present, must have the "certificate sign" bit.
 *
 *        -- Subject Alt Name: for the EE, dNSName names are matched
 *        against the server name. Ignored for non-EE.
 *
 *        -- Authority Key Identifier, Subject Key Identifier, Issuer
 *        Alt Name, Subject Directory Attributes, CRL Distribution Points
 *        Freshest CRL, Authority Info Access and Subject Info Access
 *        extensions are always ignored: they either contain only
 *        informative data, or they relate to revocation processing, which
 *        we explicitly do not support.
 *
 *        -- All other extensions are ignored if non-critical. If a
 *        critical extension other than the ones above is encountered,
 *        then a failure is reported.
 *
 *     -- End of the TBS: the multihash engine is stopped.
 *
 *     -- Signature algorithm: the signature algorithm on the
 *     certificate is decoded. A failure is reported if that algorithm
 *     is unknown. The hashed TBS corresponding to the signature hash
 *     function is computed and stored in tbs_hash[] (if not supported,
 *     then a failure is reported). The hash OID and length are stored
 *     in cert_sig_hash_oid and cert_sig_hash_len.
 *
 *     -- Signature value: the signature value is copied into the
 *     cert_sig[] array.
 *
 *     -- Certificate end: the hashed issuer DN (saved_dn_hash[]) is
 *     looked up in the trust store (CA trust anchors only); for all
 *     that match, the signature (cert_sig[]) is verified against the
 *     anchor public key (hashed TBS is in tbs_hash[]). If one of these
 *     signatures is valid, then validation ends with a success.
 *
 *  -- If the chain end is reached without obtaining a validation success,
 *  then validation is reported as failed.
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_USE_UNIX_TIME</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_USE_WIN32_TIME</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * The T0 compiler will produce these prototypes declarations in the
 * header.
 *
void br_x509_minimal_init_main(void *ctx);
void br_x509_minimal_run(void *ctx);
 */</comment>

<comment type="block">/* see bearssl_x509.h */</comment>
<function><type><name>void</name></type>
<name>br_x509_minimal_init</name><parameter_list>(<parameter><decl><type><name>br_x509_minimal_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type><name>dn_hash_impl</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>br_x509_trust_anchor</name> <modifier>*</modifier></type><name>trust_anchors</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>trust_anchors_num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>vtable</name></name> <operator>=</operator> <operator>&amp;</operator><name>br_x509_minimal_vtable</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>dn_hash_impl</name></name> <operator>=</operator> <name>dn_hash_impl</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>trust_anchors</name></name> <operator>=</operator> <name>trust_anchors</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>trust_anchors_num</name></name> <operator>=</operator> <name>trust_anchors_num</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>xm_start_chain</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_x509_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>server_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>br_x509_minimal_context</name> <modifier>*</modifier></type><name>cc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>cc</name> <operator>=</operator> <operator>(</operator><name>br_x509_minimal_context</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>ctx</name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name><name>cc</name><operator>-&gt;</operator><name>num_name_elts</name></name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>name_elts</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>status</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>name_elts</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>pkey</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name><name>cc</name><operator>-&gt;</operator><name>pkey</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>num_certs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>err</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>cpu</name><operator>.</operator><name>dp</name></name> <operator>=</operator> <name><name>cc</name><operator>-&gt;</operator><name>dp_stack</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>cpu</name><operator>.</operator><name>rp</name></name> <operator>=</operator> <name><name>cc</name><operator>-&gt;</operator><name>rp_stack</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_x509_minimal_init_main</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>cpu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>server_name</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>server_name</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>server_name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>server_name</name></name> <operator>=</operator> <name>server_name</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>xm_start_cert</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_x509_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>br_x509_minimal_context</name> <modifier>*</modifier></type><name>cc</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>cc</name> <operator>=</operator> <operator>(</operator><name>br_x509_minimal_context</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>ctx</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>cc</name><operator>-&gt;</operator><name>err</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>length</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>err</name></name> <operator>=</operator> <name>BR_ERR_X509_TRUNCATED</name></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>cert_length</name></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>xm_append</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_x509_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>br_x509_minimal_context</name> <modifier>*</modifier></type><name>cc</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>cc</name> <operator>=</operator> <operator>(</operator><name>br_x509_minimal_context</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>ctx</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>cc</name><operator>-&gt;</operator><name>err</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>hbuf</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>hlen</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_x509_minimal_run</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>cpu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>xm_end_cert</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_x509_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>br_x509_minimal_context</name> <modifier>*</modifier></type><name>cc</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>cc</name> <operator>=</operator> <operator>(</operator><name>br_x509_minimal_context</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>ctx</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>cc</name><operator>-&gt;</operator><name>err</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>cc</name><operator>-&gt;</operator><name>cert_length</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>err</name></name> <operator>=</operator> <name>BR_ERR_X509_TRUNCATED</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>num_certs</name></name> <operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>xm_end_chain</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_x509_class</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>br_x509_minimal_context</name> <modifier>*</modifier></type><name>cc</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>cc</name> <operator>=</operator> <operator>(</operator><name>br_x509_minimal_context</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>ctx</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>cc</name><operator>-&gt;</operator><name>err</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>cc</name><operator>-&gt;</operator><name>num_certs</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>err</name></name> <operator>=</operator> <name>BR_ERR_X509_EMPTY_CHAIN</name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>err</name></name> <operator>=</operator> <name>BR_ERR_X509_NOT_TRUSTED</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>cc</name><operator>-&gt;</operator><name>err</name></name> <operator>==</operator> <name>BR_ERR_X509_OK</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>cc</name><operator>-&gt;</operator><name>err</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>br_x509_pkey</name> <modifier>*</modifier></type>
<name>xm_get_pkey</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>br_x509_class</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>usages</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>br_x509_minimal_context</name> <modifier>*</modifier></type><name>cc</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>cc</name> <operator>=</operator> <operator>(</operator><name>br_x509_minimal_context</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>ctx</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>cc</name><operator>-&gt;</operator><name>err</name></name> <operator>==</operator> <name>BR_ERR_X509_OK</name>
		<operator>||</operator> <name><name>cc</name><operator>-&gt;</operator><name>err</name></name> <operator>==</operator> <name>BR_ERR_X509_NOT_TRUSTED</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>usages</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>usages</name> <operator>=</operator> <name><name>cc</name><operator>-&gt;</operator><name>key_usages</name></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>br_x509_minimal_context</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>ctx</name><operator>)</operator><operator>-&gt;</operator><name>pkey</name></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* see bearssl_x509.h */</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>br_x509_class</name></type> <name>br_x509_minimal_vtable</name> <init>= <expr><block>{
	<expr><sizeof>sizeof<argument_list>(<argument><expr><name>br_x509_minimal_context</name></expr></argument>)</argument_list></sizeof></expr>,
	<expr><name>xm_start_chain</name></expr>,
	<expr><name>xm_start_cert</name></expr>,
	<expr><name>xm_append</name></expr>,
	<expr><name>xm_end_cert</name></expr>,
	<expr><name>xm_end_chain</name></expr>,
	<expr><name>xm_get_pkey</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTX</name></cpp:macro>   <cpp:value>((br_x509_minimal_context *)(void *)((unsigned char *)t0ctx - offsetof(br_x509_minimal_context, cpu)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONTEXT_NAME</name></cpp:macro>   <cpp:value>br_x509_minimal_context</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DNHASH_LEN</name></cpp:macro>   <cpp:value>((CTX-&gt;dn_hash_impl-&gt;desc &gt;&gt; BR_HASHDESC_OUT_OFF) &amp; BR_HASHDESC_OUT_MASK)</cpp:value></cpp:define>

<comment type="block">/*
 * Hash a DN (from a trust anchor) into the provided buffer. This uses the
 * DN hash implementation and context structure from the X.509 engine
 * context.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>hash_dn</name><parameter_list>(<parameter><decl><type><name>br_x509_minimal_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>dn</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
	<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>dn_hash_impl</name><operator>-&gt;</operator><name>init</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>dn_hash</name><operator>.</operator><name>vtable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>dn_hash_impl</name><operator>-&gt;</operator><name>update</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>dn_hash</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name>dn</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>dn_hash_impl</name><operator>-&gt;</operator><name>out</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>dn_hash</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Compare two big integers for equality. The integers use unsigned big-endian
 * encoding; extra leading bytes (of value 0) are allowed.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>eqbigint</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>b1</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len1</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>b2</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<while>while <condition>(<expr><name>len1</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>b1</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>b1</name> <operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>len1</name> <operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<while>while <condition>(<expr><name>len2</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>b2</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>b2</name> <operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>len2</name> <operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<if_stmt><if>if <condition>(<expr><name>len1</name> <operator>!=</operator> <name>len2</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><call><name>memcmp</name><argument_list>(<argument><expr><name>b1</name></expr></argument>, <argument><expr><name>b2</name></expr></argument>, <argument><expr><name>len1</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Compare two strings for equality, in a case-insensitive way. This
 * function handles casing only for ASCII letters.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>eqnocase</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf2</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>buf1</name> <operator>=</operator> <name>s1</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>buf2</name> <operator>=</operator> <name>s2</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>len</name> <operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>x1</name></decl>, <decl><type ref="prev"/><name>x2</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>x1</name> <operator>=</operator> <operator>*</operator><name>buf1</name> <operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>x2</name> <operator>=</operator> <operator>*</operator><name>buf2</name> <operator>++</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>x1</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>x1</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>x1</name> <operator>+=</operator> <literal type="char">'a'</literal> <operator>-</operator> <literal type="char">'A'</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>x2</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>x2</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>x2</name> <operator>+=</operator> <literal type="char">'a'</literal> <operator>-</operator> <literal type="char">'A'</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>x1</name> <operator>!=</operator> <name>x2</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>
	<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>verify_signature</name><parameter_list>(<parameter><decl><type><name>br_x509_minimal_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>br_x509_pkey</name> <modifier>*</modifier></type><name>pk</name></decl></parameter>)</parameter_list>;</function_decl>



<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>t0_datablock</name><index>[]</index></name> <init>= <expr><block>{
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0xF7</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x09</literal></expr>,
	<expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0xF7</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0x86</literal></expr>,
	<expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0xF7</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x86</literal></expr>,
	<expr><literal type="number">0xF7</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0xF7</literal></expr>, <expr><literal type="number">0x0D</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0xF7</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x2B</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x03</literal></expr>,
	<expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x02</literal></expr>,
	<expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x07</literal></expr>,
	<expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0xCE</literal></expr>, <expr><literal type="number">0x3D</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0xCE</literal></expr>,
	<expr><literal type="number">0x3D</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x2B</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x2B</literal></expr>,
	<expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0xCE</literal></expr>, <expr><literal type="number">0x3D</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0xCE</literal></expr>, <expr><literal type="number">0x3D</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0x86</literal></expr>,
	<expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0xCE</literal></expr>, <expr><literal type="number">0x3D</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0xCE</literal></expr>, <expr><literal type="number">0x3D</literal></expr>,
	<expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0xCE</literal></expr>, <expr><literal type="number">0x3D</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>,
	<expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0xFC</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x5E</literal></expr>,
	<expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x7E</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x3F</literal></expr>,
	<expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0xDF</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0xFD</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x7E</literal></expr>,
	<expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x3F</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0xDF</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x9E</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x5F</literal></expr>,
	<expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x1D</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x1D</literal></expr>, <expr><literal type="number">0x0F</literal></expr>,
	<expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x1D</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x1D</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x2B</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x1D</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x1D</literal></expr>,
	<expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x1D</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x1D</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x1D</literal></expr>,
	<expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x1D</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x2B</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x07</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x2B</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0B</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>t0_codeblock</name><index>[]</index></name> <init>= <expr><block>{
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0A</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT1</name><argument_list>(<argument><expr><name>BR_ERR_X509_BAD_BOOLEAN</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT1</name><argument_list>(<argument><expr><name>BR_ERR_X509_BAD_DN</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT1</name><argument_list>(<argument><expr><name>BR_ERR_X509_BAD_SERVER_NAME</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT1</name><argument_list>(<argument><expr><name>BR_ERR_X509_BAD_TAG_CLASS</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT1</name><argument_list>(<argument><expr><name>BR_ERR_X509_BAD_TAG_VALUE</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT1</name><argument_list>(<argument><expr><name>BR_ERR_X509_BAD_TIME</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT1</name><argument_list>(<argument><expr><name>BR_ERR_X509_CRITICAL_EXTENSION</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT1</name><argument_list>(<argument><expr><name>BR_ERR_X509_DN_MISMATCH</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT1</name><argument_list>(<argument><expr><name>BR_ERR_X509_EXPIRED</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT1</name><argument_list>(<argument><expr><name>BR_ERR_X509_EXTRA_ELEMENT</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT1</name><argument_list>(<argument><expr><name>BR_ERR_X509_FORBIDDEN_KEY_USAGE</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT1</name><argument_list>(<argument><expr><name>BR_ERR_X509_INDEFINITE_LENGTH</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT1</name><argument_list>(<argument><expr><name>BR_ERR_X509_INNER_TRUNC</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT1</name><argument_list>(<argument><expr><name>BR_ERR_X509_LIMIT_EXCEEDED</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT1</name><argument_list>(<argument><expr><name>BR_ERR_X509_NOT_CA</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT1</name><argument_list>(<argument><expr><name>BR_ERR_X509_NOT_CONSTRUCTED</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT1</name><argument_list>(<argument><expr><name>BR_ERR_X509_NOT_PRIMITIVE</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT1</name><argument_list>(<argument><expr><name>BR_ERR_X509_OVERFLOW</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT1</name><argument_list>(<argument><expr><name>BR_ERR_X509_PARTIAL_BYTE</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT1</name><argument_list>(<argument><expr><name>BR_ERR_X509_UNEXPECTED</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT1</name><argument_list>(<argument><expr><name>BR_ERR_X509_UNSUPPORTED</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT1</name><argument_list>(<argument><expr><name>BR_ERR_X509_WEAK_PUBLIC_KEY</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT1</name><argument_list>(<argument><expr><name>BR_KEYTYPE_EC</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><call><name>T0_INT1</name><argument_list>(<argument><expr><name>BR_KEYTYPE_RSA</name></expr></argument>)</argument_list></call></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><call><name>T0_INT2</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>CONTEXT_NAME</name></expr></argument>, <argument><expr><name>cert_length</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><call><name>T0_INT2</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>CONTEXT_NAME</name></expr></argument>, <argument><expr><name>cert_sig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><call><name>T0_INT2</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>CONTEXT_NAME</name></expr></argument>, <argument><expr><name>cert_sig_hash_len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><call><name>T0_INT2</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>CONTEXT_NAME</name></expr></argument>, <argument><expr><name>cert_sig_hash_oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><call><name>T0_INT2</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>CONTEXT_NAME</name></expr></argument>, <argument><expr><name>cert_sig_len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT2</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>CONTEXT_NAME</name></expr></argument>, <argument><expr><name>cert_signer_key_type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><call><name>T0_INT2</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>CONTEXT_NAME</name></expr></argument>, <argument><expr><name>current_dn_hash</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><call><name>T0_INT2</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>CONTEXT_NAME</name></expr></argument>, <argument><expr><name>key_usages</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT2</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>br_x509_minimal_context</name></expr></argument>, <argument><expr><name>pkey_data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT2</name><argument_list>(<argument><expr><name>BR_X509_BUFSIZE_KEY</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT2</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>CONTEXT_NAME</name></expr></argument>, <argument><expr><name>min_rsa_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT2</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>CONTEXT_NAME</name></expr></argument>, <argument><expr><name>next_dn_hash</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT2</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>CONTEXT_NAME</name></expr></argument>, <argument><expr><name>num_certs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT2</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>CONTEXT_NAME</name></expr></argument>, <argument><expr><name>pad</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT2</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>CONTEXT_NAME</name></expr></argument>, <argument><expr><name>saved_dn_hash</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x80</literal></expr>,
	<expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x7C</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x8F</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0A</literal></expr>,
	<expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x9A</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xB8</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x82</literal></expr>,
	<expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x3A</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x51</literal></expr>,
	<expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x74</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x05</literal></expr>,
	<expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x4B</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x3A</literal></expr>, <expr><literal type="number">0x3F</literal></expr>,
	<expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x5A</literal></expr>, <expr><literal type="number">0x2B</literal></expr>, <expr><literal type="number">0xAC</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0xAC</literal></expr>, <expr><literal type="number">0xB0</literal></expr>,
	<expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>,
	<expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0xAB</literal></expr>, <expr><literal type="number">0xAC</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0xAC</literal></expr>, <expr><literal type="number">0xA4</literal></expr>,
	<expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0xA4</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>,
	<expr><literal type="number">0x4A</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x9A</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x09</literal></expr>,
	<expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x22</literal></expr>,
	<expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0xAC</literal></expr>, <expr><literal type="number">0xAC</literal></expr>, <expr><literal type="number">0x9B</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0xB9</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x27</literal></expr>,
	<expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0xA1</literal></expr>, <expr><literal type="number">0xAC</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0xA7</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x3A</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x09</literal></expr>,
	<expr><literal type="number">0x3A</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0xA7</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x81</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x03</literal></expr>,
	<expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x3A</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x9B</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x29</literal></expr>,
	<expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x04</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x6A</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x02</literal></expr>,
	<expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0xA1</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x33</literal></expr>,
	<expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x4F</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0xA2</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x56</literal></expr>,
	<expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x06</literal></expr>,
	<expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x11</literal></expr>,
	<expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x1D</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x29</literal></expr>,
	<expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x02</literal></expr>,
	<expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x25</literal></expr>,
	<expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x06</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x8C</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x8C</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0xAA</literal></expr>,
	<expr><literal type="number">0xAC</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0xAC</literal></expr>, <expr><literal type="number">0x9B</literal></expr>, <expr><literal type="number">0x25</literal></expr>,
	<expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0xA3</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0x6E</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0xC0</literal></expr>,
	<expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0x27</literal></expr>,
	<expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0xC2</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x11</literal></expr>,
	<expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x4D</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x06</literal></expr>,
	<expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x3F</literal></expr>, <expr><literal type="number">0x6D</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0xC0</literal></expr>,
	<expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0xC5</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x06</literal></expr>,
	<expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x77</literal></expr>,
	<expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x04</literal></expr>,
	<expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x03</literal></expr>,
	<expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x76</literal></expr>,
	<expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x02</literal></expr>,
	<expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x3B</literal></expr>,
	<expr><literal type="number">0x2F</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x2F</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0x9B</literal></expr>, <expr><literal type="number">0x06</literal></expr>,
	<expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x80</literal></expr>,
	<expr><literal type="number">0x5E</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x53</literal></expr>,
	<expr><literal type="number">0xBC</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0xBD</literal></expr>,
	<expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x8A</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0xBE</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x06</literal></expr>,
	<expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x8B</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x7C</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0x7D</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x58</literal></expr>,
	<expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x7E</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0x04</literal></expr>,
	<expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x8A</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x80</literal></expr>,
	<expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x8B</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x5D</literal></expr>,
	<expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x5F</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x5C</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x04</literal></expr>,
	<expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0xA1</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><call><name>T0_INT2</name><argument_list>(<argument><expr><name>BR_X509_BUFSIZE_SIG</name></expr></argument>)</argument_list></call></expr>,
	<expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x4F</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x5E</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x5B</literal></expr>, <expr><literal type="number">0xA2</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x76</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x5A</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x6F</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x30</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x81</literal></expr>,
	<expr><literal type="number">0x2B</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x7B</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x3A</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0xFD</literal></expr>, <expr><literal type="number">0x7F</literal></expr>,
	<expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x3A</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x3A</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x26</literal></expr>,
	<expr><literal type="number">0xC6</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x0D</literal></expr>,
	<expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x06</literal></expr>,
	<expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x2F</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x14</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x2F</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x06</literal></expr>,
	<expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x2F</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x15</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x6F</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x6B</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x3D</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x43</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x4D</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0xBF</literal></expr>,
	<expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0xB8</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x6F</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x79</literal></expr>,
	<expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x7A</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x7B</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x06</literal></expr>,
	<expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x4E</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x30</literal></expr>,
	<expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0x3A</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x2F</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x3F</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x3F</literal></expr>,
	<expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x2F</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0xAC</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x17</literal></expr>,
	<expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0x9B</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x04</literal></expr>,
	<expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x06</literal></expr>,
	<expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x2F</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x13</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x1F</literal></expr>,
	<expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0xAB</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x02</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xAC</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0xA3</literal></expr>,
	<expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>,
	<expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x2B</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>,
	<expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x76</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xAC</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0xAC</literal></expr>, <expr><literal type="number">0x9B</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x11</literal></expr>,
	<expr><literal type="number">0xAC</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0xAC</literal></expr>, <expr><literal type="number">0x9B</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x48</literal></expr>,
	<expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x06</literal></expr>,
	<expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x4C</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x0A</literal></expr>,
	<expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0xB7</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x38</literal></expr>,
	<expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x2F</literal></expr>, <expr><literal type="number">0x3A</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x06</literal></expr>,
	<expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x2F</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x05</literal></expr>,
	<expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x4C</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0xAC</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0x1B</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x03</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0xAC</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x11</literal></expr>,
	<expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0xAC</literal></expr>, <expr><literal type="number">0x9B</literal></expr>,
	<expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x26</literal></expr>,
	<expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x5D</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x4D</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x1B</literal></expr>, <expr><literal type="number">0x02</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xB5</literal></expr>, <expr><literal type="number">0x83</literal></expr>,
	<expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x3A</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0xB5</literal></expr>, <expr><literal type="number">0x6B</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x8F</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xB6</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x3A</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xB6</literal></expr>, <expr><literal type="number">0x6B</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x8F</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x25</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x0D</literal></expr>,
	<expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x06</literal></expr>,
	<expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x60</literal></expr>,
	<expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xA0</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x8F</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x0F</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0xA0</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0xFF</literal></expr>,
	<expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x07</literal></expr>,
	<expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0xA0</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xFF</literal></expr>,
	<expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x6F</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x3A</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x7F</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x3C</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x3A</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x06</literal></expr>,
	<expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x3A</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x41</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x3F</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x06</literal></expr>,
	<expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x3A</literal></expr>, <expr><literal type="number">0x26</literal></expr>,
	<expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0xB7</literal></expr>,
	<expr><literal type="number">0x3D</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x6F</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x02</literal></expr>,
	<expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0xA5</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xA5</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x09</literal></expr>,
	<expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x09</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x6D</literal></expr>, <expr><literal type="number">0x08</literal></expr>,
	<expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x83</literal></expr>,
	<expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0xA6</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x3E</literal></expr>,
	<expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x3D</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x10</literal></expr>,
	<expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0x2F</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x78</literal></expr>,
	<expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x15</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x3A</literal></expr>, <expr><literal type="number">0xA6</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0xA6</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x9C</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x3B</literal></expr>, <expr><literal type="number">0xA6</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x3C</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x3C</literal></expr>, <expr><literal type="number">0xA6</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x2E</literal></expr>,
	<expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x6F</literal></expr>, <expr><literal type="number">0x06</literal></expr>,
	<expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x5A</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x29</literal></expr>,
	<expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0x7A</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x08</literal></expr>,
	<expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0x7A</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x03</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xA5</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x6F</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x29</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0xA8</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x26</literal></expr>,
	<expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x25</literal></expr>,
	<expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x6F</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x4F</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x02</literal></expr>,
	<expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x3F</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x02</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x0D</literal></expr>,
	<expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x4D</literal></expr>, <expr><literal type="number">0x29</literal></expr>,
	<expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x02</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x06</literal></expr>,
	<expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x4E</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x3A</literal></expr>, <expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x60</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0x73</literal></expr>,
	<expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x16</literal></expr>,
	<expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>,
	<expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x02</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0xBF</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x3F</literal></expr>,
	<expr><literal type="number">0xA2</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x05</literal></expr>,
	<expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x25</literal></expr>,
	<expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0xB4</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x72</literal></expr>,
	<expr><literal type="number">0xB4</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0xB4</literal></expr>,
	<expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x1D</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0xB4</literal></expr>, <expr><literal type="number">0x04</literal></expr>,
	<expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0xB2</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x07</literal></expr>,
	<expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0xAB</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x2D</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x04</literal></expr>,
	<expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>,
	<expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x7F</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x7F</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x9C</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x7E</literal></expr>, <expr><literal type="number">0x11</literal></expr>,
	<expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x9D</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0xBF</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x6D</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x1B</literal></expr>,
	<expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x03</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x9C</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x6D</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x66</literal></expr>,
	<expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x06</literal></expr>,
	<expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x9E</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x6D</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x6D</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x05</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x08</literal></expr>,
	<expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x3A</literal></expr>, <expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0x3A</literal></expr>, <expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x08</literal></expr>,
	<expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x4E</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0xB8</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x1A</literal></expr>,
	<expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0xC1</literal></expr>, <expr><literal type="number">0x26</literal></expr>,
	<expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x0B</literal></expr>,
	<expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x26</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0xFB</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0xFB</literal></expr>, <expr><literal type="number">0x6F</literal></expr>, <expr><literal type="number">0x6F</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x25</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0x7F</literal></expr>,
	<expr><literal type="number">0x6F</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x15</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x7E</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x00</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>t0_caddr</name><index>[]</index></name> <init>= <expr><block>{
	<expr><literal type="number">0</literal></expr>,
	<expr><literal type="number">5</literal></expr>,
	<expr><literal type="number">10</literal></expr>,
	<expr><literal type="number">15</literal></expr>,
	<expr><literal type="number">20</literal></expr>,
	<expr><literal type="number">25</literal></expr>,
	<expr><literal type="number">29</literal></expr>,
	<expr><literal type="number">33</literal></expr>,
	<expr><literal type="number">37</literal></expr>,
	<expr><literal type="number">41</literal></expr>,
	<expr><literal type="number">45</literal></expr>,
	<expr><literal type="number">49</literal></expr>,
	<expr><literal type="number">53</literal></expr>,
	<expr><literal type="number">57</literal></expr>,
	<expr><literal type="number">61</literal></expr>,
	<expr><literal type="number">65</literal></expr>,
	<expr><literal type="number">69</literal></expr>,
	<expr><literal type="number">73</literal></expr>,
	<expr><literal type="number">77</literal></expr>,
	<expr><literal type="number">81</literal></expr>,
	<expr><literal type="number">85</literal></expr>,
	<expr><literal type="number">89</literal></expr>,
	<expr><literal type="number">93</literal></expr>,
	<expr><literal type="number">97</literal></expr>,
	<expr><literal type="number">101</literal></expr>,
	<expr><literal type="number">105</literal></expr>,
	<expr><literal type="number">109</literal></expr>,
	<expr><literal type="number">113</literal></expr>,
	<expr><literal type="number">117</literal></expr>,
	<expr><literal type="number">121</literal></expr>,
	<expr><literal type="number">125</literal></expr>,
	<expr><literal type="number">130</literal></expr>,
	<expr><literal type="number">135</literal></expr>,
	<expr><literal type="number">140</literal></expr>,
	<expr><literal type="number">145</literal></expr>,
	<expr><literal type="number">150</literal></expr>,
	<expr><literal type="number">155</literal></expr>,
	<expr><literal type="number">160</literal></expr>,
	<expr><literal type="number">165</literal></expr>,
	<expr><literal type="number">173</literal></expr>,
	<expr><literal type="number">178</literal></expr>,
	<expr><literal type="number">183</literal></expr>,
	<expr><literal type="number">188</literal></expr>,
	<expr><literal type="number">193</literal></expr>,
	<expr><literal type="number">198</literal></expr>,
	<expr><literal type="number">203</literal></expr>,
	<expr><literal type="number">208</literal></expr>,
	<expr><literal type="number">213</literal></expr>,
	<expr><literal type="number">234</literal></expr>,
	<expr><literal type="number">239</literal></expr>,
	<expr><literal type="number">244</literal></expr>,
	<expr><literal type="number">249</literal></expr>,
	<expr><literal type="number">264</literal></expr>,
	<expr><literal type="number">269</literal></expr>,
	<expr><literal type="number">275</literal></expr>,
	<expr><literal type="number">281</literal></expr>,
	<expr><literal type="number">286</literal></expr>,
	<expr><literal type="number">294</literal></expr>,
	<expr><literal type="number">302</literal></expr>,
	<expr><literal type="number">308</literal></expr>,
	<expr><literal type="number">313</literal></expr>,
	<expr><literal type="number">324</literal></expr>,
	<expr><literal type="number">960</literal></expr>,
	<expr><literal type="number">975</literal></expr>,
	<expr><literal type="number">979</literal></expr>,
	<expr><literal type="number">984</literal></expr>,
	<expr><literal type="number">989</literal></expr>,
	<expr><literal type="number">994</literal></expr>,
	<expr><literal type="number">999</literal></expr>,
	<expr><literal type="number">1004</literal></expr>,
	<expr><literal type="number">1118</literal></expr>,
	<expr><literal type="number">1123</literal></expr>,
	<expr><literal type="number">1135</literal></expr>,
	<expr><literal type="number">1140</literal></expr>,
	<expr><literal type="number">1145</literal></expr>,
	<expr><literal type="number">1150</literal></expr>,
	<expr><literal type="number">1154</literal></expr>,
	<expr><literal type="number">1159</literal></expr>,
	<expr><literal type="number">1164</literal></expr>,
	<expr><literal type="number">1169</literal></expr>,
	<expr><literal type="number">1174</literal></expr>,
	<expr><literal type="number">1184</literal></expr>,
	<expr><literal type="number">1189</literal></expr>,
	<expr><literal type="number">1194</literal></expr>,
	<expr><literal type="number">1206</literal></expr>,
	<expr><literal type="number">1221</literal></expr>,
	<expr><literal type="number">1226</literal></expr>,
	<expr><literal type="number">1240</literal></expr>,
	<expr><literal type="number">1262</literal></expr>,
	<expr><literal type="number">1273</literal></expr>,
	<expr><literal type="number">1376</literal></expr>,
	<expr><literal type="number">1423</literal></expr>,
	<expr><literal type="number">1456</literal></expr>,
	<expr><literal type="number">1547</literal></expr>,
	<expr><literal type="number">1553</literal></expr>,
	<expr><literal type="number">1616</literal></expr>,
	<expr><literal type="number">1623</literal></expr>,
	<expr><literal type="number">1651</literal></expr>,
	<expr><literal type="number">1679</literal></expr>,
	<expr><literal type="number">1784</literal></expr>,
	<expr><literal type="number">1826</literal></expr>,
	<expr><literal type="number">1839</literal></expr>,
	<expr><literal type="number">1851</literal></expr>,
	<expr><literal type="number">1865</literal></expr>,
	<expr><literal type="number">1880</literal></expr>,
	<expr><literal type="number">2100</literal></expr>,
	<expr><literal type="number">2114</literal></expr>,
	<expr><literal type="number">2131</literal></expr>,
	<expr><literal type="number">2140</literal></expr>,
	<expr><literal type="number">2207</literal></expr>,
	<expr><literal type="number">2263</literal></expr>,
	<expr><literal type="number">2267</literal></expr>,
	<expr><literal type="number">2271</literal></expr>,
	<expr><literal type="number">2276</literal></expr>,
	<expr><literal type="number">2324</literal></expr>,
	<expr><literal type="number">2350</literal></expr>,
	<expr><literal type="number">2426</literal></expr>,
	<expr><literal type="number">2470</literal></expr>,
	<expr><literal type="number">2481</literal></expr>,
	<expr><literal type="number">2566</literal></expr>,
	<expr><literal type="number">2604</literal></expr>,
	<expr><literal type="number">2642</literal></expr>,
	<expr><literal type="number">2652</literal></expr>,
	<expr><literal type="number">2662</literal></expr>,
	<expr><literal type="number">2671</literal></expr>,
	<expr><literal type="number">2684</literal></expr>,
	<expr><literal type="number">2688</literal></expr>,
	<expr><literal type="number">2692</literal></expr>,
	<expr><literal type="number">2696</literal></expr>,
	<expr><literal type="number">2700</literal></expr>,
	<expr><literal type="number">2704</literal></expr>,
	<expr><literal type="number">2708</literal></expr>,
	<expr><literal type="number">2712</literal></expr>,
	<expr><literal type="number">2724</literal></expr>,
	<expr><literal type="number">2732</literal></expr>,
	<expr><literal type="number">2737</literal></expr>,
	<expr><literal type="number">2742</literal></expr>,
	<expr><literal type="number">2747</literal></expr>,
	<expr><literal type="number">2752</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_INTERPRETED</name></cpp:macro>   <cpp:value>60</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_ENTER</name><parameter_list>(<parameter><type><name>ip</name></type></parameter>, <parameter><type><name>rp</name></type></parameter>, <parameter><type><name>slot</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>do { \
		const unsigned char *t0_newip; \
		uint32_t t0_lnum; \
		t0_newip = &amp;t0_codeblock[t0_caddr[(slot) - T0_INTERPRETED]]; \
		t0_lnum = t0_parse7E_unsigned(&amp;t0_newip); \
		(rp) += t0_lnum; \
		*((rp) ++) = (uint32_t)((ip) - &amp;t0_codeblock[0]) + (t0_lnum &lt;&lt; 16); \
		(ip) = t0_newip; \
	} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_DEFENTRY</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>slot</name></type></parameter>)</parameter_list></cpp:macro> \
<cpp:value>void \
name(void *ctx) \
{ \
	t0_context *t0ctx = ctx; \
	t0ctx-&gt;ip = &amp;t0_codeblock[0]; \
	T0_ENTER(t0ctx-&gt;ip, t0ctx-&gt;rp, slot); \
}</cpp:value></cpp:define>

<macro><name>T0_DEFENTRY</name><argument_list>(<argument>br_x509_minimal_init_main</argument>, <argument><literal type="number">144</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_NEXT</name><parameter_list>(<parameter><type><name>t0ipp</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>(*(*(t0ipp)) ++)</cpp:value></cpp:define>

<function><type><name>void</name></type>
<name>br_x509_minimal_run</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>t0ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ip</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_LOCAL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>(*(rp - 2 - (x)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_POP</name><parameter_list>()</parameter_list></cpp:macro>       <cpp:value>(*-- dp)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_POPi</name><parameter_list>()</parameter_list></cpp:macro>      <cpp:value>(*(int32_t *)(-- dp))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_PEEK</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>     <cpp:value>(*(dp - 1 - (x)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_PEEKi</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>(*(int32_t *)(dp - 1 - (x)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_PUSH</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro>     <cpp:value>do { *dp = (v); dp ++; } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_PUSHi</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>do { *(int32_t *)dp = (v); dp ++; } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_RPOP</name><parameter_list>()</parameter_list></cpp:macro>      <cpp:value>(*-- rp)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_RPOPi</name><parameter_list>()</parameter_list></cpp:macro>     <cpp:value>(*(int32_t *)(-- rp))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_RPUSH</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>do { *rp = (v); rp ++; } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_RPUSHi</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>do { *(int32_t *)rp = (v); rp ++; } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_ROLL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>     <cpp:value>do { \
	size_t t0len = (size_t)(x); \
	uint32_t t0tmp = *(dp - 1 - t0len); \
	memmove(dp - t0len - 1, dp - t0len, t0len * sizeof *dp); \
	*(dp - 1) = t0tmp; \
} while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_SWAP</name><parameter_list>()</parameter_list></cpp:macro>      <cpp:value>do { \
	uint32_t t0tmp = *(dp - 2); \
	*(dp - 2) = *(dp - 1); \
	*(dp - 1) = t0tmp; \
} while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_ROT</name><parameter_list>()</parameter_list></cpp:macro>       <cpp:value>do { \
	uint32_t t0tmp = *(dp - 3); \
	*(dp - 3) = *(dp - 2); \
	*(dp - 2) = *(dp - 1); \
	*(dp - 1) = t0tmp; \
} while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_NROT</name><parameter_list>()</parameter_list></cpp:macro>       <cpp:value>do { \
	uint32_t t0tmp = *(dp - 1); \
	*(dp - 1) = *(dp - 2); \
	*(dp - 2) = *(dp - 3); \
	*(dp - 3) = t0tmp; \
} while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_PICK</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>do { \
	uint32_t t0depth = (x); \
	T0_PUSH(T0_PEEK(t0depth)); \
} while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_CO</name><parameter_list>()</parameter_list></cpp:macro>         <cpp:value>do { \
	goto t0_exit; \
} while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_RET</name><parameter_list>()</parameter_list></cpp:macro>        <cpp:value>goto t0_next</cpp:value></cpp:define>

	<expr_stmt><expr><name>dp</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>t0_context</name> <operator>*</operator><operator>)</operator><name>t0ctx</name><operator>)</operator><operator>-&gt;</operator><name>dp</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rp</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>t0_context</name> <operator>*</operator><operator>)</operator><name>t0ctx</name><operator>)</operator><operator>-&gt;</operator><name>rp</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ip</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>t0_context</name> <operator>*</operator><operator>)</operator><name>t0ctx</name><operator>)</operator><operator>-&gt;</operator><name>ip</name></expr>;</expr_stmt>
	<goto>goto <name>t0_next</name>;</goto>
	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>uint32_t</name></type> <name>t0x</name></decl>;</decl_stmt>

	<label><name>t0_next</name>:</label>
		<expr_stmt><expr><name>t0x</name> <operator>=</operator> <call><name>T0_NEXT</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>t0x</name> <operator>&lt;</operator> <name>T0_INTERPRETED</name></expr>)</condition> <block>{<block_content>
			<switch>switch <condition>(<expr><name>t0x</name></expr>)</condition> <block>{<block_content>
				<decl_stmt><decl><type><name>int32_t</name></type> <name>t0off</name></decl>;</decl_stmt>

			<case>case <expr><literal type="number">0</literal></expr>:</case> <comment type="block">/* ret */</comment>
				<expr_stmt><expr><name>t0x</name> <operator>=</operator> <call><name>T0_RPOP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>rp</name> <operator>-=</operator> <operator>(</operator><name>t0x</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>t0x</name> <operator>&amp;=</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>t0x</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name>ip</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
					<goto>goto <name>t0_exit</name>;</goto>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>ip</name> <operator>=</operator> <operator>&amp;</operator><name><name>t0_codeblock</name><index>[<expr><name>t0x</name></expr>]</index></name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">1</literal></expr>:</case> <comment type="block">/* literal constant */</comment>
				<expr_stmt><expr><call><name>T0_PUSHi</name><argument_list>(<argument><expr><call><name>t0_parse7E_signed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ip</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">2</literal></expr>:</case> <comment type="block">/* read local */</comment>
				<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><call><name>T0_LOCAL</name><argument_list>(<argument><expr><call><name>t0_parse7E_unsigned</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ip</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">3</literal></expr>:</case> <comment type="block">/* write local */</comment>
				<expr_stmt><expr><call><name>T0_LOCAL</name><argument_list>(<argument><expr><call><name>t0_parse7E_unsigned</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ip</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>T0_POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">4</literal></expr>:</case> <comment type="block">/* jump */</comment>
				<expr_stmt><expr><name>t0off</name> <operator>=</operator> <call><name>t0_parse7E_signed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>ip</name> <operator>+=</operator> <name>t0off</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">5</literal></expr>:</case> <comment type="block">/* jump if */</comment>
				<expr_stmt><expr><name>t0off</name> <operator>=</operator> <call><name>t0_parse7E_signed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name>ip</name> <operator>+=</operator> <name>t0off</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">6</literal></expr>:</case> <comment type="block">/* jump if not */</comment>
				<expr_stmt><expr><name>t0off</name> <operator>=</operator> <call><name>t0_parse7E_signed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>T0_POP</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name>ip</name> <operator>+=</operator> <name>t0off</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">7</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* %25 */</comment>

	<decl_stmt><decl><type><name>int32_t</name></type> <name>b</name> <init>= <expr><call><name>T0_POPi</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32_t</name></type> <name>a</name> <init>= <expr><call><name>T0_POPi</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>T0_PUSHi</name><argument_list>(<argument><expr><name>a</name> <operator>%</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">8</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* * */</comment>

	<decl_stmt><decl><type><name>uint32_t</name></type> <name>b</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><name>a</name> <operator>*</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">9</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* + */</comment>

	<decl_stmt><decl><type><name>uint32_t</name></type> <name>b</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><name>a</name> <operator>+</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">10</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* - */</comment>

	<decl_stmt><decl><type><name>uint32_t</name></type> <name>b</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><name>a</name> <operator>-</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">11</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* -rot */</comment>
 <expr_stmt><expr><call><name>T0_NROT</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">12</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* / */</comment>

	<decl_stmt><decl><type><name>int32_t</name></type> <name>b</name> <init>= <expr><call><name>T0_POPi</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32_t</name></type> <name>a</name> <init>= <expr><call><name>T0_POPi</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>T0_PUSHi</name><argument_list>(<argument><expr><name>a</name> <operator>/</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">13</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* &lt; */</comment>

	<decl_stmt><decl><type><name>int32_t</name></type> <name>b</name> <init>= <expr><call><name>T0_POPi</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32_t</name></type> <name>a</name> <init>= <expr><call><name>T0_POPi</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><operator>-</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>a</name> <operator>&lt;</operator> <name>b</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">14</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* &lt;&lt; */</comment>

	<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>T0_POPi</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>x</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><name>x</name> <operator>&lt;&lt;</operator> <name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">15</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* &lt;= */</comment>

	<decl_stmt><decl><type><name>int32_t</name></type> <name>b</name> <init>= <expr><call><name>T0_POPi</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32_t</name></type> <name>a</name> <init>= <expr><call><name>T0_POPi</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><operator>-</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>a</name> <operator>&lt;=</operator> <name>b</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">16</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* &lt;&gt; */</comment>

	<decl_stmt><decl><type><name>uint32_t</name></type> <name>b</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><operator>-</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>a</name> <operator>!=</operator> <name>b</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">17</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* = */</comment>

	<decl_stmt><decl><type><name>uint32_t</name></type> <name>b</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><operator>-</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>a</name> <operator>==</operator> <name>b</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">18</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* &gt; */</comment>

	<decl_stmt><decl><type><name>int32_t</name></type> <name>b</name> <init>= <expr><call><name>T0_POPi</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32_t</name></type> <name>a</name> <init>= <expr><call><name>T0_POPi</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><operator>-</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>a</name> <operator>&gt;</operator> <name>b</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">19</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* &gt;= */</comment>

	<decl_stmt><decl><type><name>int32_t</name></type> <name>b</name> <init>= <expr><call><name>T0_POPi</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32_t</name></type> <name>a</name> <init>= <expr><call><name>T0_POPi</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><operator>-</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>a</name> <operator>&gt;=</operator> <name>b</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">20</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* &gt;&gt; */</comment>

	<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>T0_POPi</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32_t</name></type> <name>x</name> <init>= <expr><call><name>T0_POPi</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>T0_PUSHi</name><argument_list>(<argument><expr><name>x</name> <operator>&gt;&gt;</operator> <name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">21</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* and */</comment>

	<decl_stmt><decl><type><name>uint32_t</name></type> <name>b</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><name>a</name> <operator>&amp;</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">22</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* blobcopy */</comment>

	<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>CTX</name> <operator>+</operator> <call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>CTX</name> <operator>+</operator> <call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">23</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* check-direct-trust */</comment>

	<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name><name>CTX</name><operator>-&gt;</operator><name>trust_anchors_num</name></name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>br_x509_trust_anchor</name> <modifier>*</modifier></type><name>ta</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>hashed_DN</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>kt</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>ta</name> <operator>=</operator> <operator>&amp;</operator><name><name>CTX</name><operator>-&gt;</operator><name>trust_anchors</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>ta</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>BR_X509_TA_CA</name></expr>)</condition> <block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>hash_dn</name><argument_list>(<argument><expr><name>CTX</name></expr></argument>, <argument><expr><name><name>ta</name><operator>-&gt;</operator><name>dn</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>ta</name><operator>-&gt;</operator><name>dn</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><name>hashed_DN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>hashed_DN</name></expr></argument>, <argument><expr><name><name>CTX</name><operator>-&gt;</operator><name>current_dn_hash</name></name></expr></argument>, <argument><expr><name>DNHASH_LEN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>kt</name> <operator>=</operator> <name><name>CTX</name><operator>-&gt;</operator><name>pkey</name><operator>.</operator><name>key_type</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ta</name><operator>-&gt;</operator><name>pkey</name><operator>.</operator><name>key_type</name></name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>!=</operator> <name>kt</name></expr>)</condition> <block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<switch>switch <condition>(<expr><name>kt</name></expr>)</condition> <block>{<block_content>

		<case>case <expr><name>BR_KEYTYPE_RSA</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>eqbigint</name><argument_list>(<argument><expr><name><name>CTX</name><operator>-&gt;</operator><name>pkey</name><operator>.</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>n</name></name></expr></argument>,
				<argument><expr><name><name>CTX</name><operator>-&gt;</operator><name>pkey</name><operator>.</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>nlen</name></name></expr></argument>,
				<argument><expr><name><name>ta</name><operator>-&gt;</operator><name>pkey</name><operator>.</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>n</name></name></expr></argument>,
				<argument><expr><name><name>ta</name><operator>-&gt;</operator><name>pkey</name><operator>.</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>nlen</name></name></expr></argument>)</argument_list></call>
				<operator>||</operator> <operator>!</operator><call><name>eqbigint</name><argument_list>(<argument><expr><name><name>CTX</name><operator>-&gt;</operator><name>pkey</name><operator>.</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>e</name></name></expr></argument>,
				<argument><expr><name><name>CTX</name><operator>-&gt;</operator><name>pkey</name><operator>.</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>elen</name></name></expr></argument>,
				<argument><expr><name><name>ta</name><operator>-&gt;</operator><name>pkey</name><operator>.</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>e</name></name></expr></argument>,
				<argument><expr><name><name>ta</name><operator>-&gt;</operator><name>pkey</name><operator>.</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>elen</name></name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>

		<case>case <expr><name>BR_KEYTYPE_EC</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name><name>CTX</name><operator>-&gt;</operator><name>pkey</name><operator>.</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>curve</name></name> <operator>!=</operator> <name><name>ta</name><operator>-&gt;</operator><name>pkey</name><operator>.</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>curve</name></name>
				<operator>||</operator> <name><name>CTX</name><operator>-&gt;</operator><name>pkey</name><operator>.</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>qlen</name></name> <operator>!=</operator> <name><name>ta</name><operator>-&gt;</operator><name>pkey</name><operator>.</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>qlen</name></name>
				<operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name><name>CTX</name><operator>-&gt;</operator><name>pkey</name><operator>.</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>q</name></name></expr></argument>,
					<argument><expr><name><name>ta</name><operator>-&gt;</operator><name>pkey</name><operator>.</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>q</name></name></expr></argument>,
					<argument><expr><name><name>ta</name><operator>-&gt;</operator><name>pkey</name><operator>.</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>qlen</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>

		<default>default:</default>
			<continue>continue;</continue>
		</block_content>}</block></switch>

		<comment type="block">/*
		 * Direct trust match!
		 */</comment>
		<expr_stmt><expr><name><name>CTX</name><operator>-&gt;</operator><name>err</name></name> <operator>=</operator> <name>BR_ERR_X509_OK</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>T0_CO</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">24</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* check-trust-anchor-CA */</comment>

	<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name><name>CTX</name><operator>-&gt;</operator><name>trust_anchors_num</name></name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>br_x509_trust_anchor</name> <modifier>*</modifier></type><name>ta</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>hashed_DN</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

		<expr_stmt><expr><name>ta</name> <operator>=</operator> <operator>&amp;</operator><name><name>CTX</name><operator>-&gt;</operator><name>trust_anchors</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ta</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>BR_X509_TA_CA</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>hash_dn</name><argument_list>(<argument><expr><name>CTX</name></expr></argument>, <argument><expr><name><name>ta</name><operator>-&gt;</operator><name>dn</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>ta</name><operator>-&gt;</operator><name>dn</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><name>hashed_DN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>hashed_DN</name></expr></argument>, <argument><expr><name><name>CTX</name><operator>-&gt;</operator><name>saved_dn_hash</name></name></expr></argument>, <argument><expr><name>DNHASH_LEN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>verify_signature</name><argument_list>(<argument><expr><name>CTX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ta</name><operator>-&gt;</operator><name>pkey</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>CTX</name><operator>-&gt;</operator><name>err</name></name> <operator>=</operator> <name>BR_ERR_X509_OK</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>T0_CO</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">25</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* check-validity-range */</comment>

	<decl_stmt><decl><type><name>uint32_t</name></type> <name>nbs</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>nbd</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>nas</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>nad</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>CTX</name><operator>-&gt;</operator><name>itime</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name><name>CTX</name><operator>-&gt;</operator><name>itime</name></name><argument_list>(<argument><expr><name><name>CTX</name><operator>-&gt;</operator><name>itime_ctx</name></name></expr></argument>, <argument><expr><name>nbd</name></expr></argument>, <argument><expr><name>nbs</name></expr></argument>, <argument><expr><name>nad</name></expr></argument>, <argument><expr><name>nas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>r</name> <argument_list type="generic">&lt; <argument><expr><operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>r</name></expr></argument> &gt;</argument_list></name> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>CTX</name><operator>-&gt;</operator><name>err</name></name> <operator>=</operator> <name>BR_ERR_X509_TIME_UNKNOWN</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>T0_CO</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<decl_stmt><decl><type><name>uint32_t</name></type> <name>vd</name> <init>= <expr><name><name>CTX</name><operator>-&gt;</operator><name>days</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint32_t</name></type> <name>vs</name> <init>= <expr><name><name>CTX</name><operator>-&gt;</operator><name>seconds</name></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>vd</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>vs</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BR_USE_UNIX_TIME</name></expr></cpp:if>
			<decl_stmt><decl><type><name>time_t</name></type> <name>x</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name>vd</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>x</name> <operator>/</operator> <literal type="number">86400</literal><operator>)</operator> <operator>+</operator> <literal type="number">719528</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>vs</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>x</name> <operator>%</operator> <literal type="number">86400</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>BR_USE_WIN32_TIME</name></expr></cpp:elif>
			<decl_stmt><decl><type><name>FILETIME</name></type> <name>ft</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>uint64_t</name></type> <name>x</name></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>GetSystemTimeAsFileTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>ft</name><operator>.</operator><name>dwHighDateTime</name></name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator>
				<operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>ft</name><operator>.</operator><name>dwLowDateTime</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>/</operator> <literal type="number">10000000</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>vd</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>x</name> <operator>/</operator> <literal type="number">86400</literal><operator>)</operator> <operator>+</operator> <literal type="number">584754</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>vs</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>x</name> <operator>%</operator> <literal type="number">86400</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			<expr_stmt><expr><name><name>CTX</name><operator>-&gt;</operator><name>err</name></name> <operator>=</operator> <name>BR_ERR_X509_TIME_UNKNOWN</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>T0_CO</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>vd</name> <operator>&lt;</operator> <name>nbd</name> <operator>||</operator> <operator>(</operator><name>vd</name> <operator>==</operator> <name>nbd</name> <operator>&amp;&amp;</operator> <name>vs</name> <operator>&lt;</operator> <name>nbs</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>vd</name> <operator>&gt;</operator> <name>nad</name> <operator>||</operator> <operator>(</operator><name>vd</name> <operator>==</operator> <name>nad</name> <operator>&amp;&amp;</operator> <name>vs</name> <operator>&gt;</operator> <name>nas</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><call><name>T0_PUSHi</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">26</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* co */</comment>
 <expr_stmt><expr><call><name>T0_CO</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">27</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* compute-dn-hash */</comment>

	<expr_stmt><expr><call><name><name>CTX</name><operator>-&gt;</operator><name>dn_hash_impl</name><operator>-&gt;</operator><name>out</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>CTX</name><operator>-&gt;</operator><name>dn_hash</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name><name>CTX</name><operator>-&gt;</operator><name>current_dn_hash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>CTX</name><operator>-&gt;</operator><name>do_dn_hash</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">28</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* compute-tbs-hash */</comment>

	<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><call><name>T0_POPi</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>br_multihash_out</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>CTX</name><operator>-&gt;</operator><name>mhash</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name><name>CTX</name><operator>-&gt;</operator><name>tbs_hash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">29</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* copy-ee-ec-pkey */</comment>

	<decl_stmt><decl><type><name>size_t</name></type> <name>qlen</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>curve</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>CTX</name><operator>-&gt;</operator><name>ee_pkey_data</name></name></expr></argument>, <argument><expr><name><name>CTX</name><operator>-&gt;</operator><name>pkey_data</name></name></expr></argument>, <argument><expr><name>qlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>CTX</name><operator>-&gt;</operator><name>pkey</name><operator>.</operator><name>key_type</name></name> <operator>=</operator> <name>BR_KEYTYPE_EC</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>CTX</name><operator>-&gt;</operator><name>pkey</name><operator>.</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>curve</name></name> <operator>=</operator> <name>curve</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>CTX</name><operator>-&gt;</operator><name>pkey</name><operator>.</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>q</name></name> <operator>=</operator> <name><name>CTX</name><operator>-&gt;</operator><name>ee_pkey_data</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>CTX</name><operator>-&gt;</operator><name>pkey</name><operator>.</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>qlen</name></name> <operator>=</operator> <name>qlen</name></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">30</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* copy-ee-rsa-pkey */</comment>

	<decl_stmt><decl><type><name>size_t</name></type> <name>elen</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>nlen</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>CTX</name><operator>-&gt;</operator><name>ee_pkey_data</name></name></expr></argument>, <argument><expr><name><name>CTX</name><operator>-&gt;</operator><name>pkey_data</name></name></expr></argument>, <argument><expr><name>nlen</name> <operator>+</operator> <name>elen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>CTX</name><operator>-&gt;</operator><name>pkey</name><operator>.</operator><name>key_type</name></name> <operator>=</operator> <name>BR_KEYTYPE_RSA</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>CTX</name><operator>-&gt;</operator><name>pkey</name><operator>.</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>n</name></name> <operator>=</operator> <name><name>CTX</name><operator>-&gt;</operator><name>ee_pkey_data</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>CTX</name><operator>-&gt;</operator><name>pkey</name><operator>.</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>nlen</name></name> <operator>=</operator> <name>nlen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>CTX</name><operator>-&gt;</operator><name>pkey</name><operator>.</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>e</name></name> <operator>=</operator> <name><name>CTX</name><operator>-&gt;</operator><name>ee_pkey_data</name></name> <operator>+</operator> <name>nlen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>CTX</name><operator>-&gt;</operator><name>pkey</name><operator>.</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>elen</name></name> <operator>=</operator> <name>elen</name></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">31</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* copy-name-SAN */</comment>

	<decl_stmt><decl><type><name>unsigned</name></type> <name>tag</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>ok</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>CTX</name><operator>-&gt;</operator><name>pad</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name><name>CTX</name><operator>-&gt;</operator><name>num_name_elts</name></name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>br_name_element</name> <modifier>*</modifier></type><name>ne</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>ne</name> <operator>=</operator> <operator>&amp;</operator><name><name>CTX</name><operator>-&gt;</operator><name>name_elts</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>ne</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ne</name><operator>-&gt;</operator><name>oid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ne</name><operator>-&gt;</operator><name>oid</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>tag</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>ok</name> <operator>&amp;&amp;</operator> <name><name>ne</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ne</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>CTX</name><operator>-&gt;</operator><name>pad</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>ne</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>ne</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><name><name>ne</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">32</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* copy-name-element */</comment>

	<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32_t</name></type> <name>off</name> <init>= <expr><call><name>T0_POPi</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ok</name> <init>= <expr><call><name>T0_POPi</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>off</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>br_name_element</name> <modifier>*</modifier></type><name>ne</name> <init>= <expr><operator>&amp;</operator><name><name>CTX</name><operator>-&gt;</operator><name>name_elts</name><index>[<expr><name>off</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>ok</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>CTX</name><operator>-&gt;</operator><name>pad</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name><name>ne</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ne</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>CTX</name><operator>-&gt;</operator><name>pad</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>ne</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>ne</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><name><name>ne</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name><name>ne</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">33</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* data-get8 */</comment>

	<decl_stmt><decl><type><name>size_t</name></type> <name>addr</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><name><name>t0_datablock</name><index>[<expr><name>addr</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">34</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* dn-hash-length */</comment>

	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><name>DNHASH_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">35</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* do-ecdsa-vrfy */</comment>

	<decl_stmt><decl><type><name>size_t</name></type> <name>qlen</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>curve</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>br_x509_pkey</name></type> <name>pk</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>pk</name><operator>.</operator><name>key_type</name></name> <operator>=</operator> <name>BR_KEYTYPE_EC</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pk</name><operator>.</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>curve</name></name> <operator>=</operator> <name>curve</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pk</name><operator>.</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>q</name></name> <operator>=</operator> <name><name>CTX</name><operator>-&gt;</operator><name>pkey_data</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pk</name><operator>.</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>qlen</name></name> <operator>=</operator> <name>qlen</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><call><name>verify_signature</name><argument_list>(<argument><expr><name>CTX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">36</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* do-rsa-vrfy */</comment>

	<decl_stmt><decl><type><name>size_t</name></type> <name>elen</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>nlen</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>br_x509_pkey</name></type> <name>pk</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>pk</name><operator>.</operator><name>key_type</name></name> <operator>=</operator> <name>BR_KEYTYPE_RSA</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pk</name><operator>.</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>n</name></name> <operator>=</operator> <name><name>CTX</name><operator>-&gt;</operator><name>pkey_data</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pk</name><operator>.</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>nlen</name></name> <operator>=</operator> <name>nlen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pk</name><operator>.</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>e</name></name> <operator>=</operator> <name><name>CTX</name><operator>-&gt;</operator><name>pkey_data</name></name> <operator>+</operator> <name>nlen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pk</name><operator>.</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>elen</name></name> <operator>=</operator> <name>elen</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><call><name>verify_signature</name><argument_list>(<argument><expr><name>CTX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">37</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* drop */</comment>
 <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>T0_POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">38</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* dup */</comment>
 <expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><call><name>T0_PEEK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">39</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* eqOID */</comment>

	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>a2</name> <init>= <expr><operator>&amp;</operator><name><name>t0_datablock</name><index>[<expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>a1</name> <init>= <expr><operator>&amp;</operator><name><name>CTX</name><operator>-&gt;</operator><name>pad</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><name><name>a1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <name><name>a2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>-</operator><operator>(</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>a1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>a2</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">40</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* eqblob */</comment>

	<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>a2</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>CTX</name> <operator>+</operator> <call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>a1</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>CTX</name> <operator>+</operator> <call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>T0_PUSHi</name><argument_list>(<argument><expr><operator>-</operator><operator>(</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>a2</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">41</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* fail */</comment>

	<expr_stmt><expr><name><name>CTX</name><operator>-&gt;</operator><name>err</name></name> <operator>=</operator> <call><name>T0_POPi</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>T0_CO</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">42</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* get16 */</comment>

	<decl_stmt><decl><type><name>uint32_t</name></type> <name>addr</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>CTX</name> <operator>+</operator> <name>addr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">43</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* get32 */</comment>

	<decl_stmt><decl><type><name>uint32_t</name></type> <name>addr</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>CTX</name> <operator>+</operator> <name>addr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">44</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* match-server-name */</comment>

	<decl_stmt><decl><type><name>size_t</name></type> <name>n1</name></decl>, <decl><type ref="prev"/><name>n2</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>CTX</name><operator>-&gt;</operator><name>server_name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>T0_RET</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>n1</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>CTX</name><operator>-&gt;</operator><name>server_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>n2</name> <operator>=</operator> <name><name>CTX</name><operator>-&gt;</operator><name>pad</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>n1</name> <operator>==</operator> <name>n2</name> <operator>&amp;&amp;</operator> <call><name>eqnocase</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>CTX</name><operator>-&gt;</operator><name>pad</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>CTX</name><operator>-&gt;</operator><name>server_name</name></name></expr></argument>, <argument><expr><name>n1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>T0_PUSHi</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>T0_RET</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>n2</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>CTX</name><operator>-&gt;</operator><name>pad</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal> <operator>&amp;&amp;</operator> <name><name>CTX</name><operator>-&gt;</operator><name>pad</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<while>while <condition>(<expr><name>u</name> <operator>&lt;</operator> <name>n1</name> <operator>&amp;&amp;</operator> <name><name>CTX</name><operator>-&gt;</operator><name>server_name</name><index>[<expr><name>u</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>u</name> <operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></while>
		<expr_stmt><expr><name>u</name> <operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>n1</name> <operator>-=</operator> <name>u</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n2</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>==</operator> <name>n1</name>
			<operator>&amp;&amp;</operator> <call><name>eqnocase</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>CTX</name><operator>-&gt;</operator><name>pad</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>CTX</name><operator>-&gt;</operator><name>server_name</name></name> <operator>+</operator> <name>u</name></expr></argument>, <argument><expr><name>n1</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>T0_PUSHi</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>T0_RET</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">45</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* neg */</comment>

	<decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><operator>-</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">46</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* offset-name-element */</comment>

	<decl_stmt><decl><type><name>unsigned</name></type> <name>san</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name><name>CTX</name><operator>-&gt;</operator><name>num_name_elts</name></name></expr>;</condition> <incr><expr><name>u</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>CTX</name><operator>-&gt;</operator><name>name_elts</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>status</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>oid</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>off</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>oid</name> <operator>=</operator> <name><name>CTX</name><operator>-&gt;</operator><name>name_elts</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>oid</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>san</name></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>oid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>oid</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
					<continue>continue;</continue>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>off</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><name>off</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>oid</name><index>[<expr><name>off</name></expr>]</index></name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>len</name> <operator>==</operator> <name><name>CTX</name><operator>-&gt;</operator><name>pad</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>
				<operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>oid</name> <operator>+</operator> <name>off</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
					<argument><expr><name><name>CTX</name><operator>-&gt;</operator><name>pad</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>T0_RET</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>T0_PUSHi</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">47</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* or */</comment>

	<decl_stmt><decl><type><name>uint32_t</name></type> <name>b</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><name>a</name> <operator>|</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">48</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* over */</comment>
 <expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><call><name>T0_PEEK</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">49</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* read-blob-inner */</comment>

	<decl_stmt><decl><type><name>uint32_t</name></type> <name>len</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>addr</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>clen</name> <init>= <expr><name><name>CTX</name><operator>-&gt;</operator><name>hlen</name></name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>clen</name> <operator>&gt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>clen</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>len</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>CTX</name> <operator>+</operator> <name>addr</name></expr></argument>, <argument><expr><name><name>CTX</name><operator>-&gt;</operator><name>hbuf</name></name></expr></argument>, <argument><expr><name>clen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>CTX</name><operator>-&gt;</operator><name>do_mhash</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>br_multihash_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>CTX</name><operator>-&gt;</operator><name>mhash</name></name></expr></argument>, <argument><expr><name><name>CTX</name><operator>-&gt;</operator><name>hbuf</name></name></expr></argument>, <argument><expr><name>clen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>CTX</name><operator>-&gt;</operator><name>do_dn_hash</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name><name>CTX</name><operator>-&gt;</operator><name>dn_hash_impl</name><operator>-&gt;</operator><name>update</name></name><argument_list>(
			<argument><expr><operator>&amp;</operator><name><name>CTX</name><operator>-&gt;</operator><name>dn_hash</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name><name>CTX</name><operator>-&gt;</operator><name>hbuf</name></name></expr></argument>, <argument><expr><name>clen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>CTX</name><operator>-&gt;</operator><name>hbuf</name></name> <operator>+=</operator> <name>clen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>CTX</name><operator>-&gt;</operator><name>hlen</name></name> <operator>-=</operator> <name>clen</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><name>addr</name> <operator>+</operator> <name>clen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><name>len</name> <operator>-</operator> <name>clen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">50</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* read8-low */</comment>

	<if_stmt><if>if <condition>(<expr><name><name>CTX</name><operator>-&gt;</operator><name>hlen</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>T0_PUSHi</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>x</name> <init>= <expr><operator>*</operator><name><name>CTX</name><operator>-&gt;</operator><name>hbuf</name></name> <operator>++</operator></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>CTX</name><operator>-&gt;</operator><name>do_mhash</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>br_multihash_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>CTX</name><operator>-&gt;</operator><name>mhash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>CTX</name><operator>-&gt;</operator><name>do_dn_hash</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>CTX</name><operator>-&gt;</operator><name>dn_hash_impl</name><operator>-&gt;</operator><name>update</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>CTX</name><operator>-&gt;</operator><name>dn_hash</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>CTX</name><operator>-&gt;</operator><name>hlen</name></name> <operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">51</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* rot */</comment>
 <expr_stmt><expr><call><name>T0_ROT</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">52</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* set16 */</comment>

	<decl_stmt><decl><type><name>uint32_t</name></type> <name>addr</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>CTX</name> <operator>+</operator> <name>addr</name><operator>)</operator> <operator>=</operator> <call><name>T0_POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">53</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* set32 */</comment>

	<decl_stmt><decl><type><name>uint32_t</name></type> <name>addr</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>CTX</name> <operator>+</operator> <name>addr</name><operator>)</operator> <operator>=</operator> <call><name>T0_POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">54</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* set8 */</comment>

	<decl_stmt><decl><type><name>uint32_t</name></type> <name>addr</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>CTX</name> <operator>+</operator> <name>addr</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><call><name>T0_POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">55</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* start-dn-hash */</comment>

	<expr_stmt><expr><call><name><name>CTX</name><operator>-&gt;</operator><name>dn_hash_impl</name><operator>-&gt;</operator><name>init</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>CTX</name><operator>-&gt;</operator><name>dn_hash</name><operator>.</operator><name>vtable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>CTX</name><operator>-&gt;</operator><name>do_dn_hash</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">56</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* start-tbs-hash */</comment>

	<expr_stmt><expr><call><name>br_multihash_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>CTX</name><operator>-&gt;</operator><name>mhash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>CTX</name><operator>-&gt;</operator><name>do_mhash</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">57</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* stop-tbs-hash */</comment>

	<expr_stmt><expr><name><name>CTX</name><operator>-&gt;</operator><name>do_mhash</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">58</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* swap */</comment>
 <expr_stmt><expr><call><name>T0_SWAP</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">59</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* zero-server-name */</comment>

	<expr_stmt><expr><call><name>T0_PUSHi</name><argument_list>(<argument><expr><operator>-</operator><operator>(</operator><name><name>CTX</name><operator>-&gt;</operator><name>server_name</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			</block_content>}</block></switch>

		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>T0_ENTER</name><argument_list>(<argument><expr><name>ip</name></expr></argument>, <argument><expr><name>rp</name></expr></argument>, <argument><expr><name>t0x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>
<label><name>t0_exit</name>:</label>
	<expr_stmt><expr><operator>(</operator><operator>(</operator><name>t0_context</name> <operator>*</operator><operator>)</operator><name>t0ctx</name><operator>)</operator><operator>-&gt;</operator><name>dp</name> <operator>=</operator> <name>dp</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><operator>(</operator><name>t0_context</name> <operator>*</operator><operator>)</operator><name>t0ctx</name><operator>)</operator><operator>-&gt;</operator><name>rp</name> <operator>=</operator> <name>rp</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><operator>(</operator><name>t0_context</name> <operator>*</operator><operator>)</operator><name>t0ctx</name><operator>)</operator><operator>-&gt;</operator><name>ip</name> <operator>=</operator> <name>ip</name></expr>;</expr_stmt>
</block_content>}</block></function>



<comment type="block">/*
 * Verify the signature on the certificate with the provided public key.
 * This function checks the public key type with regards to the expected
 * type. Returned value is either 0 on success, or a non-zero error code.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>verify_signature</name><parameter_list>(<parameter><decl><type><name>br_x509_minimal_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>br_x509_pkey</name> <modifier>*</modifier></type><name>pk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>kt</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>kt</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cert_signer_key_type</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pk</name><operator>-&gt;</operator><name>key_type</name></name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>!=</operator> <name>kt</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>BR_ERR_X509_WRONG_KEY_TYPE</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<switch>switch <condition>(<expr><name>kt</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

	<case>case <expr><name>BR_KEYTYPE_RSA</name></expr>:</case>
		<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>irsa</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>BR_ERR_X509_UNSUPPORTED</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>ctx</name><operator>-&gt;</operator><name>irsa</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cert_sig</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cert_sig_len</name></name></expr></argument>,
			<argument><expr><operator>&amp;</operator><name><name>t0_datablock</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>cert_sig_hash_oid</name></name></expr>]</index></name></expr></argument>,
			<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cert_sig_hash_len</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<return>return <expr><name>BR_ERR_X509_BAD_SIGNATURE</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tbs_hash</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cert_sig_hash_len</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>BR_ERR_X509_BAD_SIGNATURE</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>

	<case>case <expr><name>BR_KEYTYPE_EC</name></expr>:</case>
		<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>iecdsa</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>BR_ERR_X509_UNSUPPORTED</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>ctx</name><operator>-&gt;</operator><name>iecdsa</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>iec</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tbs_hash</name></name></expr></argument>,
			<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cert_sig_hash_len</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>ec</name></name></expr></argument>,
			<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cert_sig</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cert_sig_len</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<return>return <expr><name>BR_ERR_X509_BAD_SIGNATURE</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>

	<default>default:</default>
		<return>return <expr><name>BR_ERR_X509_UNSUPPORTED</name></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>


</unit>
