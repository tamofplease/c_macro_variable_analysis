<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/extra/iwnet/src/bearssl/x509/skey_decoder.c"><comment type="block">/* Automatically generated code; do not modify directly. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>rp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ip</name></decl>;</decl_stmt>
}</block></struct></type> <name>t0_context</name>;</typedef>

<function><type><specifier>static</specifier> <name>uint32_t</name></type>
<name>t0_parse7E_unsigned</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>x</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>unsigned</name></type> <name>y</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>y</name> <operator>&amp;</operator> <literal type="number">0x7F</literal><operator>)</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>x</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type>
<name>t0_parse7E_signed</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>neg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>x</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>neg</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>*</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>-</operator><name>neg</name></expr>;</expr_stmt>
	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>unsigned</name></type> <name>y</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>y</name> <operator>&amp;</operator> <literal type="number">0x7F</literal><operator>)</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>neg</name></expr>)</condition> <block>{<block_content>
				<return>return <expr><operator>-</operator><operator>(</operator><name>int32_t</name><operator>)</operator><operator>~</operator><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<return>return <expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>x</name></expr>;</return>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_VBYTE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>(unsigned char)((((uint32_t)(x) &gt;&gt; (n)) &amp; 0x7F) | 0x80)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_FBYTE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>(unsigned char)(((uint32_t)(x) &gt;&gt; (n)) &amp; 0x7F)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_SBYTE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>(unsigned char)((((uint32_t)(x) &gt;&gt; 28) + 0xF8) ^ 0xF8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_INT1</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>T0_FBYTE(x, 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_INT2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>T0_VBYTE(x, 7), T0_FBYTE(x, 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_INT3</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>T0_VBYTE(x, 14), T0_VBYTE(x, 7), T0_FBYTE(x, 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_INT4</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>T0_VBYTE(x, 21), T0_VBYTE(x, 14), T0_VBYTE(x, 7), T0_FBYTE(x, 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_INT5</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>T0_SBYTE(x), T0_VBYTE(x, 21), T0_VBYTE(x, 14), T0_VBYTE(x, 7), T0_FBYTE(x, 0)</cpp:value></cpp:define>

<comment type="block">/* static const unsigned char t0_datablock[]; */</comment>


<function_decl><type><name>void</name></type> <name>br_skey_decoder_init_main</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>t0ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>br_skey_decoder_run</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>t0ctx</name></decl></parameter>)</parameter_list>;</function_decl>



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>





<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTX</name></cpp:macro>   <cpp:value>((br_skey_decoder_context *)(void *)((unsigned char *)t0ctx - offsetof(br_skey_decoder_context, cpu)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONTEXT_NAME</name></cpp:macro>   <cpp:value>br_skey_decoder_context</cpp:value></cpp:define>

<comment type="block">/* see bearssl_x509.h */</comment>
<function><type><name>void</name></type>
<name>br_skey_decoder_init</name><parameter_list>(<parameter><decl><type><name>br_skey_decoder_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpu</name><operator>.</operator><name>dp</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>dp_stack</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cpu</name><operator>.</operator><name>rp</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>rp_stack</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_skey_decoder_init_main</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>cpu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_skey_decoder_run</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>cpu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* see bearssl_x509.h */</comment>
<function><type><name>void</name></type>
<name>br_skey_decoder_push</name><parameter_list>(<parameter><decl><type><name>br_skey_decoder_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>hbuf</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>hlen</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_skey_decoder_run</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>cpu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>t0_datablock</name><index>[]</index></name> <init>= <expr><block>{
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0xF7</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x07</literal></expr>,
	<expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0xCE</literal></expr>, <expr><literal type="number">0x3D</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0xCE</literal></expr>,
	<expr><literal type="number">0x3D</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x2B</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x2B</literal></expr>,
	<expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x23</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>t0_codeblock</name><index>[]</index></name> <init>= <expr><block>{
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x13</literal></expr>,
	<expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><call><name>T0_INT1</name><argument_list>(<argument><expr><name>BR_ERR_X509_BAD_TAG_CLASS</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><call><name>T0_INT1</name><argument_list>(<argument><expr><name>BR_ERR_X509_BAD_TAG_VALUE</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT1</name><argument_list>(<argument><expr><name>BR_ERR_X509_EXTRA_ELEMENT</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT1</name><argument_list>(<argument><expr><name>BR_ERR_X509_INDEFINITE_LENGTH</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT1</name><argument_list>(<argument><expr><name>BR_ERR_X509_INNER_TRUNC</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT1</name><argument_list>(<argument><expr><name>BR_ERR_X509_INVALID_VALUE</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT1</name><argument_list>(<argument><expr><name>BR_ERR_X509_LIMIT_EXCEEDED</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT1</name><argument_list>(<argument><expr><name>BR_ERR_X509_NOT_CONSTRUCTED</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT1</name><argument_list>(<argument><expr><name>BR_ERR_X509_NOT_PRIMITIVE</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT1</name><argument_list>(<argument><expr><name>BR_ERR_X509_OVERFLOW</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT1</name><argument_list>(<argument><expr><name>BR_ERR_X509_UNEXPECTED</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT1</name><argument_list>(<argument><expr><name>BR_ERR_X509_UNSUPPORTED</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT1</name><argument_list>(<argument><expr><name>BR_KEYTYPE_EC</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><call><name>T0_INT1</name><argument_list>(<argument><expr><name>BR_KEYTYPE_RSA</name></expr></argument>)</argument_list></call></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><call><name>T0_INT2</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>CONTEXT_NAME</name></expr></argument>, <argument><expr><name>key_data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><call><name>T0_INT2</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>CONTEXT_NAME</name></expr></argument>, <argument><expr><name>key_type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><call><name>T0_INT2</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>CONTEXT_NAME</name></expr></argument>, <argument><expr><name>pad</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x22</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x2D</literal></expr>, <expr><literal type="number">0x16</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x3D</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x2F</literal></expr>, <expr><literal type="number">0x16</literal></expr>,
	<expr><literal type="number">0x3A</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x2F</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x3B</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x06</literal></expr>,
	<expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x3E</literal></expr>,
	<expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x3F</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x48</literal></expr>,
	<expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x4C</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x0D</literal></expr>,
	<expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x16</literal></expr>,
	<expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x3A</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x4D</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x06</literal></expr>,
	<expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x3F</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x21</literal></expr>,
	<expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x3A</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x5D</literal></expr>,
	<expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x1D</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x4B</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x5B</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x5D</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x4D</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x3F</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x3F</literal></expr>, <expr><literal type="number">0x5D</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>,
	<expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x3F</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x2F</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x03</literal></expr>,
	<expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x4F</literal></expr>, <expr><literal type="number">0x4F</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x4E</literal></expr>, <expr><literal type="number">0x14</literal></expr>,
	<expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x07</literal></expr>,
	<expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x03</literal></expr>,
	<expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x51</literal></expr>,
	<expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x05</literal></expr>,
	<expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x22</literal></expr>,
	<expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><call><name>T0_INT2</name><argument_list>(<argument><expr><literal type="number">3</literal> <operator>*</operator> <name>BR_X509_BUFSIZE_SIG</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>,
	<expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>,
	<expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x3B</literal></expr>, <expr><literal type="number">0x44</literal></expr>,
	<expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x3B</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x13</literal></expr>,
	<expr><literal type="number">0x3A</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x3F</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x5A</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x29</literal></expr>,
	<expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x06</literal></expr>,
	<expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x4B</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x37</literal></expr>,
	<expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x30</literal></expr>,
	<expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x4E</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x02</literal></expr>,
	<expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x14</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x6F</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x2B</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x23</literal></expr>,
	<expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x06</literal></expr>,
	<expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x4E</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x59</literal></expr>,
	<expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x08</literal></expr>,
	<expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x83</literal></expr>,
	<expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x20</literal></expr>,
	<expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x4A</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x57</literal></expr>,
	<expr><literal type="number">0x3C</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x14</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x06</literal></expr>,
	<expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x06</literal></expr>,
	<expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x13</literal></expr>,
	<expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x08</literal></expr>,
	<expr><literal type="number">0x5C</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x36</literal></expr>,
	<expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x4C</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x14</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x07</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
	<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x5A</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x1B</literal></expr>, <expr><literal type="number">0x14</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
	<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x5D</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x5E</literal></expr>, <expr><literal type="number">0x14</literal></expr>,
	<expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x09</literal></expr>,
	<expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x00</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>t0_caddr</name><index>[]</index></name> <init>= <expr><block>{
	<expr><literal type="number">0</literal></expr>,
	<expr><literal type="number">5</literal></expr>,
	<expr><literal type="number">10</literal></expr>,
	<expr><literal type="number">14</literal></expr>,
	<expr><literal type="number">18</literal></expr>,
	<expr><literal type="number">22</literal></expr>,
	<expr><literal type="number">26</literal></expr>,
	<expr><literal type="number">30</literal></expr>,
	<expr><literal type="number">34</literal></expr>,
	<expr><literal type="number">38</literal></expr>,
	<expr><literal type="number">42</literal></expr>,
	<expr><literal type="number">46</literal></expr>,
	<expr><literal type="number">50</literal></expr>,
	<expr><literal type="number">54</literal></expr>,
	<expr><literal type="number">58</literal></expr>,
	<expr><literal type="number">62</literal></expr>,
	<expr><literal type="number">66</literal></expr>,
	<expr><literal type="number">70</literal></expr>,
	<expr><literal type="number">75</literal></expr>,
	<expr><literal type="number">80</literal></expr>,
	<expr><literal type="number">84</literal></expr>,
	<expr><literal type="number">89</literal></expr>,
	<expr><literal type="number">93</literal></expr>,
	<expr><literal type="number">97</literal></expr>,
	<expr><literal type="number">101</literal></expr>,
	<expr><literal type="number">107</literal></expr>,
	<expr><literal type="number">113</literal></expr>,
	<expr><literal type="number">118</literal></expr>,
	<expr><literal type="number">126</literal></expr>,
	<expr><literal type="number">134</literal></expr>,
	<expr><literal type="number">140</literal></expr>,
	<expr><literal type="number">163</literal></expr>,
	<expr><literal type="number">244</literal></expr>,
	<expr><literal type="number">311</literal></expr>,
	<expr><literal type="number">329</literal></expr>,
	<expr><literal type="number">404</literal></expr>,
	<expr><literal type="number">408</literal></expr>,
	<expr><literal type="number">412</literal></expr>,
	<expr><literal type="number">429</literal></expr>,
	<expr><literal type="number">434</literal></expr>,
	<expr><literal type="number">505</literal></expr>,
	<expr><literal type="number">519</literal></expr>,
	<expr><literal type="number">526</literal></expr>,
	<expr><literal type="number">540</literal></expr>,
	<expr><literal type="number">573</literal></expr>,
	<expr><literal type="number">582</literal></expr>,
	<expr><literal type="number">587</literal></expr>,
	<expr><literal type="number">654</literal></expr>,
	<expr><literal type="number">665</literal></expr>,
	<expr><literal type="number">721</literal></expr>,
	<expr><literal type="number">725</literal></expr>,
	<expr><literal type="number">730</literal></expr>,
	<expr><literal type="number">778</literal></expr>,
	<expr><literal type="number">804</literal></expr>,
	<expr><literal type="number">848</literal></expr>,
	<expr><literal type="number">859</literal></expr>,
	<expr><literal type="number">868</literal></expr>,
	<expr><literal type="number">881</literal></expr>,
	<expr><literal type="number">885</literal></expr>,
	<expr><literal type="number">889</literal></expr>,
	<expr><literal type="number">901</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_INTERPRETED</name></cpp:macro>   <cpp:value>34</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_ENTER</name><parameter_list>(<parameter><type><name>ip</name></type></parameter>, <parameter><type><name>rp</name></type></parameter>, <parameter><type><name>slot</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>do { \
		const unsigned char *t0_newip; \
		uint32_t t0_lnum; \
		t0_newip = &amp;t0_codeblock[t0_caddr[(slot) - T0_INTERPRETED]]; \
		t0_lnum = t0_parse7E_unsigned(&amp;t0_newip); \
		(rp) += t0_lnum; \
		*((rp) ++) = (uint32_t)((ip) - &amp;t0_codeblock[0]) + (t0_lnum &lt;&lt; 16); \
		(ip) = t0_newip; \
	} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_DEFENTRY</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>slot</name></type></parameter>)</parameter_list></cpp:macro> \
<cpp:value>void \
name(void *ctx) \
{ \
	t0_context *t0ctx = ctx; \
	t0ctx-&gt;ip = &amp;t0_codeblock[0]; \
	T0_ENTER(t0ctx-&gt;ip, t0ctx-&gt;rp, slot); \
}</cpp:value></cpp:define>

<macro><name>T0_DEFENTRY</name><argument_list>(<argument>br_skey_decoder_init_main</argument>, <argument><literal type="number">73</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_NEXT</name><parameter_list>(<parameter><type><name>t0ipp</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>(*(*(t0ipp)) ++)</cpp:value></cpp:define>

<function><type><name>void</name></type>
<name>br_skey_decoder_run</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>t0ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ip</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_LOCAL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>(*(rp - 2 - (x)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_POP</name><parameter_list>()</parameter_list></cpp:macro>       <cpp:value>(*-- dp)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_POPi</name><parameter_list>()</parameter_list></cpp:macro>      <cpp:value>(*(int32_t *)(-- dp))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_PEEK</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>     <cpp:value>(*(dp - 1 - (x)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_PEEKi</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>(*(int32_t *)(dp - 1 - (x)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_PUSH</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro>     <cpp:value>do { *dp = (v); dp ++; } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_PUSHi</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>do { *(int32_t *)dp = (v); dp ++; } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_RPOP</name><parameter_list>()</parameter_list></cpp:macro>      <cpp:value>(*-- rp)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_RPOPi</name><parameter_list>()</parameter_list></cpp:macro>     <cpp:value>(*(int32_t *)(-- rp))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_RPUSH</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>do { *rp = (v); rp ++; } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_RPUSHi</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>do { *(int32_t *)rp = (v); rp ++; } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_ROLL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>     <cpp:value>do { \
	size_t t0len = (size_t)(x); \
	uint32_t t0tmp = *(dp - 1 - t0len); \
	memmove(dp - t0len - 1, dp - t0len, t0len * sizeof *dp); \
	*(dp - 1) = t0tmp; \
} while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_SWAP</name><parameter_list>()</parameter_list></cpp:macro>      <cpp:value>do { \
	uint32_t t0tmp = *(dp - 2); \
	*(dp - 2) = *(dp - 1); \
	*(dp - 1) = t0tmp; \
} while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_ROT</name><parameter_list>()</parameter_list></cpp:macro>       <cpp:value>do { \
	uint32_t t0tmp = *(dp - 3); \
	*(dp - 3) = *(dp - 2); \
	*(dp - 2) = *(dp - 1); \
	*(dp - 1) = t0tmp; \
} while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_NROT</name><parameter_list>()</parameter_list></cpp:macro>       <cpp:value>do { \
	uint32_t t0tmp = *(dp - 1); \
	*(dp - 1) = *(dp - 2); \
	*(dp - 2) = *(dp - 3); \
	*(dp - 3) = t0tmp; \
} while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_PICK</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>do { \
	uint32_t t0depth = (x); \
	T0_PUSH(T0_PEEK(t0depth)); \
} while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_CO</name><parameter_list>()</parameter_list></cpp:macro>         <cpp:value>do { \
	goto t0_exit; \
} while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T0_RET</name><parameter_list>()</parameter_list></cpp:macro>        <cpp:value>goto t0_next</cpp:value></cpp:define>

	<expr_stmt><expr><name>dp</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>t0_context</name> <operator>*</operator><operator>)</operator><name>t0ctx</name><operator>)</operator><operator>-&gt;</operator><name>dp</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rp</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>t0_context</name> <operator>*</operator><operator>)</operator><name>t0ctx</name><operator>)</operator><operator>-&gt;</operator><name>rp</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ip</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>t0_context</name> <operator>*</operator><operator>)</operator><name>t0ctx</name><operator>)</operator><operator>-&gt;</operator><name>ip</name></expr>;</expr_stmt>
	<goto>goto <name>t0_next</name>;</goto>
	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>uint32_t</name></type> <name>t0x</name></decl>;</decl_stmt>

	<label><name>t0_next</name>:</label>
		<expr_stmt><expr><name>t0x</name> <operator>=</operator> <call><name>T0_NEXT</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>t0x</name> <operator>&lt;</operator> <name>T0_INTERPRETED</name></expr>)</condition> <block>{<block_content>
			<switch>switch <condition>(<expr><name>t0x</name></expr>)</condition> <block>{<block_content>
				<decl_stmt><decl><type><name>int32_t</name></type> <name>t0off</name></decl>;</decl_stmt>

			<case>case <expr><literal type="number">0</literal></expr>:</case> <comment type="block">/* ret */</comment>
				<expr_stmt><expr><name>t0x</name> <operator>=</operator> <call><name>T0_RPOP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>rp</name> <operator>-=</operator> <operator>(</operator><name>t0x</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>t0x</name> <operator>&amp;=</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>t0x</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name>ip</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
					<goto>goto <name>t0_exit</name>;</goto>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>ip</name> <operator>=</operator> <operator>&amp;</operator><name><name>t0_codeblock</name><index>[<expr><name>t0x</name></expr>]</index></name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">1</literal></expr>:</case> <comment type="block">/* literal constant */</comment>
				<expr_stmt><expr><call><name>T0_PUSHi</name><argument_list>(<argument><expr><call><name>t0_parse7E_signed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ip</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">2</literal></expr>:</case> <comment type="block">/* read local */</comment>
				<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><call><name>T0_LOCAL</name><argument_list>(<argument><expr><call><name>t0_parse7E_unsigned</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ip</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">3</literal></expr>:</case> <comment type="block">/* write local */</comment>
				<expr_stmt><expr><call><name>T0_LOCAL</name><argument_list>(<argument><expr><call><name>t0_parse7E_unsigned</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ip</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>T0_POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">4</literal></expr>:</case> <comment type="block">/* jump */</comment>
				<expr_stmt><expr><name>t0off</name> <operator>=</operator> <call><name>t0_parse7E_signed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>ip</name> <operator>+=</operator> <name>t0off</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">5</literal></expr>:</case> <comment type="block">/* jump if */</comment>
				<expr_stmt><expr><name>t0off</name> <operator>=</operator> <call><name>t0_parse7E_signed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name>ip</name> <operator>+=</operator> <name>t0off</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">6</literal></expr>:</case> <comment type="block">/* jump if not */</comment>
				<expr_stmt><expr><name>t0off</name> <operator>=</operator> <call><name>t0_parse7E_signed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>T0_POP</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name>ip</name> <operator>+=</operator> <name>t0off</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">7</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* + */</comment>

	<decl_stmt><decl><type><name>uint32_t</name></type> <name>b</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><name>a</name> <operator>+</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">8</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* - */</comment>

	<decl_stmt><decl><type><name>uint32_t</name></type> <name>b</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><name>a</name> <operator>-</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">9</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* -rot */</comment>
 <expr_stmt><expr><call><name>T0_NROT</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">10</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* &lt; */</comment>

	<decl_stmt><decl><type><name>int32_t</name></type> <name>b</name> <init>= <expr><call><name>T0_POPi</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32_t</name></type> <name>a</name> <init>= <expr><call><name>T0_POPi</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><operator>-</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>a</name> <operator>&lt;</operator> <name>b</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">11</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* &lt;&lt; */</comment>

	<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>T0_POPi</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>x</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><name>x</name> <operator>&lt;&lt;</operator> <name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">12</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* &lt;&gt; */</comment>

	<decl_stmt><decl><type><name>uint32_t</name></type> <name>b</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><operator>-</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>a</name> <operator>!=</operator> <name>b</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">13</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* = */</comment>

	<decl_stmt><decl><type><name>uint32_t</name></type> <name>b</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><operator>-</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>a</name> <operator>==</operator> <name>b</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">14</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* &gt; */</comment>

	<decl_stmt><decl><type><name>int32_t</name></type> <name>b</name> <init>= <expr><call><name>T0_POPi</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32_t</name></type> <name>a</name> <init>= <expr><call><name>T0_POPi</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><operator>-</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>a</name> <operator>&gt;</operator> <name>b</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">15</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* &gt;= */</comment>

	<decl_stmt><decl><type><name>int32_t</name></type> <name>b</name> <init>= <expr><call><name>T0_POPi</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32_t</name></type> <name>a</name> <init>= <expr><call><name>T0_POPi</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><operator>-</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>a</name> <operator>&gt;=</operator> <name>b</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">16</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* &gt;&gt; */</comment>

	<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>T0_POPi</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32_t</name></type> <name>x</name> <init>= <expr><call><name>T0_POPi</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>T0_PUSHi</name><argument_list>(<argument><expr><name>x</name> <operator>&gt;&gt;</operator> <name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">17</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* and */</comment>

	<decl_stmt><decl><type><name>uint32_t</name></type> <name>b</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><name>a</name> <operator>&amp;</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">18</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* co */</comment>
 <expr_stmt><expr><call><name>T0_CO</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">19</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* drop */</comment>
 <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>T0_POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">20</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* dup */</comment>
 <expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><call><name>T0_PEEK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">21</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* eqOID */</comment>

	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>a2</name> <init>= <expr><operator>&amp;</operator><name><name>t0_datablock</name><index>[<expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>a1</name> <init>= <expr><operator>&amp;</operator><name><name>CTX</name><operator>-&gt;</operator><name>pad</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><name><name>a1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <name><name>a2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>-</operator><operator>(</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>a1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>a2</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">22</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* fail */</comment>

	<expr_stmt><expr><name><name>CTX</name><operator>-&gt;</operator><name>err</name></name> <operator>=</operator> <call><name>T0_POPi</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>T0_CO</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">23</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* get8 */</comment>

	<decl_stmt><decl><type><name>uint32_t</name></type> <name>addr</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>CTX</name> <operator>+</operator> <name>addr</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">24</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* neg */</comment>

	<decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><operator>-</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">25</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* over */</comment>
 <expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><call><name>T0_PEEK</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">26</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* read-blob-inner */</comment>

	<decl_stmt><decl><type><name>uint32_t</name></type> <name>len</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>addr</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>clen</name> <init>= <expr><name><name>CTX</name><operator>-&gt;</operator><name>hlen</name></name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>clen</name> <operator>&gt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>clen</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>len</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>CTX</name> <operator>+</operator> <name>addr</name></expr></argument>, <argument><expr><name><name>CTX</name><operator>-&gt;</operator><name>hbuf</name></name></expr></argument>, <argument><expr><name>clen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>CTX</name><operator>-&gt;</operator><name>hbuf</name></name> <operator>+=</operator> <name>clen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>CTX</name><operator>-&gt;</operator><name>hlen</name></name> <operator>-=</operator> <name>clen</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><name>addr</name> <operator>+</operator> <name>clen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><name>len</name> <operator>-</operator> <name>clen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">27</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* read8-low */</comment>

	<if_stmt><if>if <condition>(<expr><name><name>CTX</name><operator>-&gt;</operator><name>hlen</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>T0_PUSHi</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>CTX</name><operator>-&gt;</operator><name>hlen</name></name> <operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><operator>*</operator><name><name>CTX</name><operator>-&gt;</operator><name>hbuf</name></name> <operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">28</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* rot */</comment>
 <expr_stmt><expr><call><name>T0_ROT</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">29</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* set-ec-key */</comment>

	<decl_stmt><decl><type><name>size_t</name></type> <name>xlen</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>curve</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>CTX</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>curve</name></name> <operator>=</operator> <name>curve</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>CTX</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>CTX</name><operator>-&gt;</operator><name>key_data</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>CTX</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>ec</name><operator>.</operator><name>xlen</name></name> <operator>=</operator> <name>xlen</name></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">30</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* set-rsa-key */</comment>

	<decl_stmt><decl><type><name>size_t</name></type> <name>iqlen</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>dqlen</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>dplen</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>qlen</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>plen</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>n_bitlen</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>off</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>CTX</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>n_bitlen</name></name> <operator>=</operator> <name>n_bitlen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>CTX</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>p</name></name> <operator>=</operator> <name><name>CTX</name><operator>-&gt;</operator><name>key_data</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>CTX</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>plen</name></name> <operator>=</operator> <name>plen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>off</name> <operator>=</operator> <name>plen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>CTX</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>q</name></name> <operator>=</operator> <name><name>CTX</name><operator>-&gt;</operator><name>key_data</name></name> <operator>+</operator> <name>off</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>CTX</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>qlen</name></name> <operator>=</operator> <name>qlen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>off</name> <operator>+=</operator> <name>qlen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>CTX</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>dp</name></name> <operator>=</operator> <name><name>CTX</name><operator>-&gt;</operator><name>key_data</name></name> <operator>+</operator> <name>off</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>CTX</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>dplen</name></name> <operator>=</operator> <name>dplen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>off</name> <operator>+=</operator> <name>dplen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>CTX</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>dq</name></name> <operator>=</operator> <name><name>CTX</name><operator>-&gt;</operator><name>key_data</name></name> <operator>+</operator> <name>off</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>CTX</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>dqlen</name></name> <operator>=</operator> <name>dqlen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>off</name> <operator>+=</operator> <name>dqlen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>CTX</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>iq</name></name> <operator>=</operator> <name><name>CTX</name><operator>-&gt;</operator><name>key_data</name></name> <operator>+</operator> <name>off</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>CTX</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>rsa</name><operator>.</operator><name>iqlen</name></name> <operator>=</operator> <name>iqlen</name></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">31</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* set8 */</comment>

	<decl_stmt><decl><type><name>uint32_t</name></type> <name>addr</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>CTX</name> <operator>+</operator> <name>addr</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><call><name>T0_POP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">32</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* swap */</comment>
 <expr_stmt><expr><call><name>T0_SWAP</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><literal type="number">33</literal></expr>:</case> <block>{<block_content>
				<comment type="block">/* u&gt;&gt; */</comment>

	<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>T0_POPi</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>x</name> <init>= <expr><call><name>T0_POP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>T0_PUSH</name><argument_list>(<argument><expr><name>x</name> <operator>&gt;&gt;</operator> <name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<break>break;</break>
			</block_content>}</block></switch>

		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>T0_ENTER</name><argument_list>(<argument><expr><name>ip</name></expr></argument>, <argument><expr><name>rp</name></expr></argument>, <argument><expr><name>t0x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>
<label><name>t0_exit</name>:</label>
	<expr_stmt><expr><operator>(</operator><operator>(</operator><name>t0_context</name> <operator>*</operator><operator>)</operator><name>t0ctx</name><operator>)</operator><operator>-&gt;</operator><name>dp</name> <operator>=</operator> <name>dp</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><operator>(</operator><name>t0_context</name> <operator>*</operator><operator>)</operator><name>t0ctx</name><operator>)</operator><operator>-&gt;</operator><name>rp</name> <operator>=</operator> <name>rp</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><operator>(</operator><name>t0_context</name> <operator>*</operator><operator>)</operator><name>t0ctx</name><operator>)</operator><operator>-&gt;</operator><name>ip</name> <operator>=</operator> <name>ip</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
