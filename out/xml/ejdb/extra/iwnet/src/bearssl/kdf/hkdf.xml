<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/extra/iwnet/src/bearssl/kdf/hkdf.c"><comment type="block">/*
 * Copyright (c) 2018 Thomas Pornin &lt;pornin@bolet.org&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining 
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inner.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name>br_hkdf_no_salt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/* see bearssl_kdf.h */</comment>
<function><type><name>void</name></type>
<name>br_hkdf_init</name><parameter_list>(<parameter><decl><type><name>br_hkdf_context</name> <modifier>*</modifier></type><name>hc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>br_hash_class</name> <modifier>*</modifier></type><name>digest_vtable</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>salt</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>salt_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>br_hmac_key_context</name></type> <name>kc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>salt</name> <operator>==</operator> <name>BR_HKDF_NO_SALT</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>salt</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>salt_len</name> <operator>=</operator> <call><name>br_digest_size</name><argument_list>(<argument><expr><name>digest_vtable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>salt_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>br_hmac_key_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>kc</name></expr></argument>, <argument><expr><name>digest_vtable</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><name>salt_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_hmac_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>hmac_ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hc</name><operator>-&gt;</operator><name>dig_len</name></name> <operator>=</operator> <call><name>br_hmac_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>hmac_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* see bearssl_kdf.h */</comment>
<function><type><name>void</name></type>
<name>br_hkdf_inject</name><parameter_list>(<parameter><decl><type><name>br_hkdf_context</name> <modifier>*</modifier></type><name>hc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ikm</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ikm_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>br_hmac_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>hmac_ctx</name></name></expr></argument>, <argument><expr><name>ikm</name></expr></argument>, <argument><expr><name>ikm_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* see bearssl_kdf.h */</comment>
<function><type><name>void</name></type>
<name>br_hkdf_flip</name><parameter_list>(<parameter><decl><type><name>br_hkdf_context</name> <modifier>*</modifier></type><name>hc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>br_hmac_out</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>hmac_ctx</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>br_hmac_key_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>prk_ctx</name></name></expr></argument>,
		<argument><expr><call><name>br_hmac_get_digest</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>hmac_ctx</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>hc</name><operator>-&gt;</operator><name>dig_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hc</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>hc</name><operator>-&gt;</operator><name>dig_len</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hc</name><operator>-&gt;</operator><name>chunk_num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* see bearssl_kdf.h */</comment>
<function><type><name>size_t</name></type>
<name>br_hkdf_produce</name><parameter_list>(<parameter><decl><type><name>br_hkdf_context</name> <modifier>*</modifier></type><name>hc</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>info_len</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>out_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>tlen</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>tlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>out_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>size_t</name></type> <name>clen</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>hc</name><operator>-&gt;</operator><name>ptr</name></name> <operator>==</operator> <name><name>hc</name><operator>-&gt;</operator><name>dig_len</name></name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>br_hmac_context</name></type> <name>hmac_ctx</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>x</name></decl>;</decl_stmt>

			<expr_stmt><expr><name><name>hc</name><operator>-&gt;</operator><name>chunk_num</name></name> <operator>++</operator></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>hc</name><operator>-&gt;</operator><name>chunk_num</name></name> <operator>==</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>
				<return>return <expr><name>tlen</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>hc</name><operator>-&gt;</operator><name>chunk_num</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>br_hmac_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hmac_ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>hc</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>prk_ctx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>x</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>br_hmac_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hmac_ctx</name></expr></argument>, <argument><expr><name><name>hc</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>hc</name><operator>-&gt;</operator><name>dig_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>br_hmac_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hmac_ctx</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>info_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>br_hmac_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hmac_ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>br_hmac_out</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hmac_ctx</name></expr></argument>, <argument><expr><name><name>hc</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>hc</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>clen</name> <operator>=</operator> <name><name>hc</name><operator>-&gt;</operator><name>dig_len</name></name> <operator>-</operator> <name><name>hc</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>clen</name> <operator>&gt;</operator> <name>out_len</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>clen</name> <operator>=</operator> <name>out_len</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>hc</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>hc</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>clen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>out</name> <operator>+</operator> <name>clen</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>out_len</name> <operator>-=</operator> <name>clen</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>hc</name><operator>-&gt;</operator><name>ptr</name></name> <operator>+=</operator> <name>clen</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>tlen</name> <operator>+=</operator> <name>clen</name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<return>return <expr><name>tlen</name></expr>;</return>
</block_content>}</block></function>
</unit>
