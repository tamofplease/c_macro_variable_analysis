<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/extra/iwnet/src/bearssl/bre/bre_utils.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bre_utils.h"</cpp:file></cpp:include>

<function><type><name>int64_t</name></type> <name>bre_atoi</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>str</name> <operator>&gt;</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>str</name> <operator>&lt;=</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>sign</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>sign</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>str</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>str</name> <operator>&lt;</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>str</name> <operator>&gt;</operator> <literal type="char">'9'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>num</name> <operator>=</operator> <name>num</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <operator>*</operator><name>str</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>num</name> <operator>*</operator> <name>sign</name></expr>;</return>
</block_content>}</block></function>
</unit>
