<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/extra/iwnet/src/bearssl/bre/bre_base64.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bre_base64.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>base64_table</name><index>[<expr><literal type="number">65</literal></expr>]</index></name>
  <init>= <expr><literal type="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</literal></expr></init></decl>;</decl_stmt>

<function><type><name>uint8_t</name> <modifier>*</modifier></type><name>base64_encode</name><parameter_list>(
  <parameter><decl><type><name>bre_alloc</name></type>     <name>alloc</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
  <parameter><decl><type><name>size_t</name></type>        <name>len</name></decl></parameter>,
  <parameter><decl><type><name>size_t</name>        <modifier>*</modifier></type><name>out_len</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name>    <modifier>*</modifier></type><name>prefix</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name>    <modifier>*</modifier></type><name>postfix</name></decl></parameter>,
  <parameter><decl><type><name>size_t</name></type>        <name>line_length</name></decl></parameter>)</parameter_list> <block>{<block_content>

  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>out</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pos</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>in</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>olen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ll</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>prefix_len</name> <init>= <expr><ternary><condition><expr><name>prefix</name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>postfix_len</name> <init>= <expr><ternary><condition><expr><name>postfix</name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>postfix</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>line_length</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>line_length</name> <operator>=</operator> <literal type="number">76</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>olen</name> <operator>=</operator> <name>len</name> <operator>*</operator> <literal type="number">4</literal> <operator>/</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>         <comment type="block">/* 3-byte blocks to 4-byte */</comment>
  <expr_stmt><expr><name>olen</name> <operator>+=</operator> <name>olen</name> <operator>/</operator> <name>line_length</name></expr>;</expr_stmt>     <comment type="block">/* line feeds */</comment>
  <expr_stmt><expr><name>olen</name><operator>++</operator></expr>;</expr_stmt>                         <comment type="block">/* NULL termination */</comment>

  <expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>olen</name> <operator>+</operator> <name>prefix_len</name> <operator>+</operator> <name>postfix_len</name> <operator>+</operator> <literal type="number">2</literal></expr></argument> <comment type="block">/* \n */</comment>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>out</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pos</name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>prefix_len</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>prefix_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>prefix_len</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pos</name><operator>++</operator> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>end</name> <operator>=</operator> <name>src</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>in</name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>ll</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <while>while <condition>(<expr><name>end</name> <operator>-</operator> <name>in</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pos</name><operator>++</operator> <operator>=</operator> <name><name>base64_table</name><index>[<expr><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pos</name><operator>++</operator> <operator>=</operator> <name><name>base64_table</name><index>[<expr><operator>(</operator><operator>(</operator><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x03</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pos</name><operator>++</operator> <operator>=</operator> <name><name>base64_table</name><index>[<expr><operator>(</operator><operator>(</operator><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pos</name><operator>++</operator> <operator>=</operator> <name><name>base64_table</name><index>[<expr><name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>in</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>ll</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ll</name> <operator>&gt;=</operator> <name>line_length</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pos</name><operator>++</operator> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>ll</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><name>end</name> <operator>-</operator> <name>in</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pos</name><operator>++</operator> <operator>=</operator> <name><name>base64_table</name><index>[<expr><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>end</name> <operator>-</operator> <name>in</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pos</name><operator>++</operator> <operator>=</operator> <name><name>base64_table</name><index>[<expr><operator>(</operator><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x03</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>pos</name><operator>++</operator> <operator>=</operator> <literal type="char">'='</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pos</name><operator>++</operator> <operator>=</operator> <name><name>base64_table</name><index>[<expr><operator>(</operator><operator>(</operator><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x03</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator>
                            <operator>|</operator> <operator>(</operator><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>pos</name><operator>++</operator> <operator>=</operator> <name><name>base64_table</name><index>[<expr><operator>(</operator><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>pos</name><operator>++</operator> <operator>=</operator> <literal type="char">'='</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>ll</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>ll</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pos</name><operator>++</operator> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>postfix_len</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>postfix</name></expr></argument>, <argument><expr><name>postfix_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>postfix_len</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pos</name><operator>++</operator> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>out_len</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>out_len</name> <operator>=</operator> <name>pos</name> <operator>-</operator> <name>out</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>out</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint8_t</name> <modifier>*</modifier></type><name>base64_decode</name><parameter_list>(
  <parameter><decl><type><name>bre_alloc</name></type>     <name>alloc</name></decl></parameter>,
  <parameter><decl><type><name>bre_dealloc</name></type>   <name>dealloc</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
  <parameter><decl><type><name>size_t</name></type>        <name>len</name></decl></parameter>,
  <parameter><decl><type><name>size_t</name>        <modifier>*</modifier></type><name>out_len</name></decl></parameter>)</parameter_list> <block>{<block_content>

  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>dtable</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>block</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>out</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pos</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>count</name></decl>, <decl><type ref="prev"/><name>olen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>pad</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dtable</name></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dtable</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>base64_table</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>dtable</name><index>[<expr><name><name>base64_table</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <name>i</name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name><name>dtable</name><index>[<expr><literal type="char">'='</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>dtable</name><index>[<expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>!=</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>count</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <name>count</name> <operator>%</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>olen</name> <operator>=</operator> <name>count</name> <operator>/</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name>pos</name> <operator>=</operator> <name>out</name> <operator>=</operator> <call><name>alloc</name><argument_list>(<argument><expr><name>olen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>out</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>dtable</name><index>[<expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>==</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pad</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>block</name><index>[<expr><name>count</name></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pos</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>block</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>pos</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name><name>block</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>block</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>pos</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name><name>block</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <name><name>block</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>pad</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>pad</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>pos</name><operator>--</operator></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pad</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>pos</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <comment type="block">/* Invalid padding */</comment>
          <expr_stmt><expr><call><name>dealloc</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><operator>*</operator><name>out_len</name> <operator>=</operator> <name>pos</name> <operator>-</operator> <name>out</name></expr>;</expr_stmt>
  <return>return <expr><name>out</name></expr>;</return>
</block_content>}</block></function>
</unit>
