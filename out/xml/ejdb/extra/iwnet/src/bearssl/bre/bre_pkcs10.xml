<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/extra/iwnet/src/bearssl/bre/bre_pkcs10.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bre_asn1.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bre_pkcs10.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bre_base64.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bre_internal.h"</cpp:file></cpp:include>

<comment type="block">/*
   CertificationRequestInfo ::= SEQUENCE {
        version       INTEGER { v1(0) } (v1,...),
        subject       Name,
        subjectPKInfo SubjectPublicKeyInfo{{ PKInfoAlgorithms }},
        attributes    [0] Attributes{{ CRIAttributes }}
   }

   SubjectPublicKeyInfo { ALGORITHM : IOSet} ::= SEQUENCE {
        algorithm        AlgorithmIdentifier {{IOSet}},
        subjectPublicKey BIT STRING
   }

   CertificationRequest ::= SEQUENCE {
        certificationRequestInfo CertificationRequestInfo,
        signatureAlgorithm AlgorithmIdentifier{{ SignatureAlgorithms }},
        signature          BIT STRING
   }
 */</comment>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>asn1_node</name></name> <modifier>*</modifier></type><name>_cri_subject_add</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>bre_ec_csr</name> <modifier>*</modifier></type><name>csr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>asn1_node</name></name> <modifier>*</modifier></type><name>cri</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>asn1</name></name> <modifier>*</modifier></type><name>asn</name> <init>= <expr><name><name>cri</name><operator>-&gt;</operator><name>asn1</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>asn1_node</name></name> <modifier>*</modifier></type><name>root</name> <init>= <expr><call><name>ZRET</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>asn1_container_add</name><argument_list>(<argument><expr><name>asn</name></expr></argument>, <argument><expr><literal type="number">0x30</literal></expr></argument>, <argument><expr><name>cri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>asn1_node</name></name> <modifier>*</modifier></type><name>cont</name> <init>= <expr><call><name>ZRET</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>asn1_container_add</name><argument_list>(<argument><expr><name>asn</name></expr></argument>, <argument><expr><literal type="number">0x31</literal></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>cont</name> <operator>=</operator> <call><name>ZRET</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>asn1_container_add</name><argument_list>(<argument><expr><name>asn</name></expr></argument>, <argument><expr><literal type="number">0x30</literal></expr></argument>, <argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ZRET</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>asn1_oid_add</name><argument_list>(<argument><expr><name>asn</name></expr></argument>, <argument><expr><literal type="string">"2.5.4.3"</literal></expr></argument>, <argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ZRET</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>asn1_string_add</name><argument_list>(<argument><expr><name>asn</name></expr></argument>, <argument><expr><literal type="number">0x0c</literal></expr></argument>, <argument><expr><name><name>csr</name><operator>-&gt;</operator><name>subj</name><operator>.</operator><name>cn</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>csr</name><operator>-&gt;</operator><name>subj</name><operator>.</operator><name>cn</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>csr</name><operator>-&gt;</operator><name>subj</name><operator>.</operator><name>email</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>cont</name> <operator>=</operator> <call><name>ZRET</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>asn1_container_add</name><argument_list>(<argument><expr><name>asn</name></expr></argument>, <argument><expr><literal type="number">0x31</literal></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cont</name> <operator>=</operator> <call><name>ZRET</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>asn1_container_add</name><argument_list>(<argument><expr><name>asn</name></expr></argument>, <argument><expr><literal type="number">0x30</literal></expr></argument>, <argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ZRET</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>asn1_oid_add</name><argument_list>(<argument><expr><name>asn</name></expr></argument>, <argument><expr><literal type="string">"1.2.840.113549.1.9.1"</literal></expr></argument>, <argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ZRET</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>asn1_string_add</name><argument_list>(<argument><expr><name>asn</name></expr></argument>, <argument><expr><literal type="number">0x16</literal></expr></argument>, <argument><expr><name><name>csr</name><operator>-&gt;</operator><name>subj</name><operator>.</operator><name>email</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>csr</name><operator>-&gt;</operator><name>subj</name><operator>.</operator><name>email</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>root</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>asn1_node</name></name> <modifier>*</modifier></type><name>_cri_ec_key_add</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>bre_ec_csr</name> <modifier>*</modifier></type><name>csr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>asn1_node</name></name> <modifier>*</modifier></type><name>cri</name></decl></parameter>)</parameter_list> <block>{<block_content>

  <decl_stmt><decl><type><name>br_ec_public_key</name></type> <name>pk</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>pkbuf</name><index>[<expr><literal type="number">255</literal></expr>]</index></name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ZRET</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>br_ec_compute_pub</name><argument_list>(<argument><expr><call><name>br_ec_get_default</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>pk</name></expr></argument>, <argument><expr><name>pkbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>csr</name><operator>-&gt;</operator><name>sk</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>asn1</name></name> <modifier>*</modifier></type><name>asn</name> <init>= <expr><name><name>cri</name><operator>-&gt;</operator><name>asn1</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>asn1_node</name></name> <modifier>*</modifier></type><name>root</name> <init>= <expr><call><name>ZRET</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>asn1_container_add</name><argument_list>(<argument><expr><name>asn</name></expr></argument>, <argument><expr><literal type="number">0x30</literal></expr></argument>, <argument><expr><name>cri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>asn1_node</name></name> <modifier>*</modifier></type><name>n</name> <init>= <expr><call><name>ZRET</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>asn1_container_add</name><argument_list>(<argument><expr><name>asn</name></expr></argument>, <argument><expr><literal type="number">0x30</literal></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ZRET</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>asn1_oid_add</name><argument_list>(<argument><expr><name>asn</name></expr></argument>, <argument><expr><literal type="string">"1.2.840.10045.2.1"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <switch>switch <condition>(<expr><name><name>pk</name><operator>.</operator><name>curve</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>BR_EC_secp256r1</name></expr>:</case>
      <expr_stmt><expr><call><name>ZRET</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>asn1_oid_add</name><argument_list>(<argument><expr><name>asn</name></expr></argument>, <argument><expr><literal type="string">"1.2.840.10045.3.1.7"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>BR_EC_secp384r1</name></expr>:</case>
      <expr_stmt><expr><call><name>ZRET</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>asn1_oid_add</name><argument_list>(<argument><expr><name>asn</name></expr></argument>, <argument><expr><literal type="string">"1.3.132.0.34"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>BR_EC_secp521r1</name></expr>:</case>
      <expr_stmt><expr><call><name>ZRET</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>asn1_oid_add</name><argument_list>(<argument><expr><name>asn</name></expr></argument>, <argument><expr><literal type="string">"1.3.132.0.35"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><name><name>asn</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <call><name>BRE_ERROR</name><argument_list>(<argument><expr><name>UNSUPPORTED_EC_PK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></switch>

  <expr_stmt><expr><call><name>ZRET</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>asn1_string_add</name><argument_list>(<argument><expr><name>asn</name></expr></argument>, <argument><expr><literal type="number">0x03</literal></expr></argument>, <argument><expr><name><name>pk</name><operator>.</operator><name>q</name></name></expr></argument>, <argument><expr><name><name>pk</name><operator>.</operator><name>qlen</name></name> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>ASN1_STRING_COPY</name></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>root</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>asn1_node</name></name> <modifier>*</modifier></type><name>_cri_extension_add</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>bre_ec_csr</name> <modifier>*</modifier></type><name>csr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>asn1_node</name></name> <modifier>*</modifier></type><name>cri</name></decl></parameter>)</parameter_list> <block>{<block_content>

  <decl_stmt><decl><type><name><name>struct</name> <name>asn1</name></name> <modifier>*</modifier></type><name>asn</name> <init>= <expr><name><name>cri</name><operator>-&gt;</operator><name>asn1</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>asn1_node</name></name> <modifier>*</modifier></type><name>root</name> <init>= <expr><call><name>ZRET</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>asn1_container_add</name><argument_list>(<argument><expr><name>asn</name></expr></argument>, <argument><expr><literal type="number">0xa0</literal></expr></argument>, <argument><expr><name>cri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// C-[0]</comment>
  <decl_stmt><decl><type><name><name>struct</name> <name>asn1_node</name></name> <modifier>*</modifier></type><name>cont</name> <init>= <expr><call><name>ZRET</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>asn1_container_add</name><argument_list>(<argument><expr><name>asn</name></expr></argument>, <argument><expr><literal type="number">0x30</literal></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ZRET</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>asn1_oid_add</name><argument_list>(<argument><expr><name>asn</name></expr></argument>, <argument><expr><literal type="string">"1.2.840.113549.1.9.14"</literal></expr></argument>, <argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>cont</name> <operator>=</operator> <call><name>ZRET</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>asn1_container_add</name><argument_list>(<argument><expr><name>asn</name></expr></argument>, <argument><expr><literal type="number">0x31</literal></expr></argument>, <argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>csr</name><operator>-&gt;</operator><name>subj</name><operator>.</operator><name>dns_name</name></name></expr>)</condition> <block>{<block_content>
    <comment type="line">// See https://tools.ietf.org/html/rfc5280#section-4.2.1.6</comment>

    <decl_stmt><decl><type><name><name>struct</name> <name>asn1_node</name></name> <modifier>*</modifier></type><name>ext</name> <init>= <expr><call><name>ZRET</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>asn1_container_add</name><argument_list>(<argument><expr><name>asn</name></expr></argument>, <argument><expr><literal type="number">0x30</literal></expr></argument>, <argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>ext</name> <operator>=</operator> <call><name>ZRET</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>asn1_container_add</name><argument_list>(<argument><expr><name>asn</name></expr></argument>, <argument><expr><literal type="number">0x30</literal></expr></argument>, <argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ZRET</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>asn1_oid_add</name><argument_list>(<argument><expr><name>asn</name></expr></argument>, <argument><expr><literal type="string">"2.5.29.17"</literal></expr></argument>, <argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// 04 Octet String  1e (30)</comment>
    <expr_stmt><expr><name>cont</name> <operator>=</operator> <call><name>ZRET</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>asn1_container_add</name><argument_list>(<argument><expr><name>asn</name></expr></argument>, <argument><expr><literal type="number">0x04</literal></expr></argument>, <argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// C-Sequence</comment>
    <expr_stmt><expr><name>cont</name> <operator>=</operator> <call><name>ZRET</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>asn1_container_add</name><argument_list>(<argument><expr><name>asn</name></expr></argument>, <argument><expr><literal type="number">0x30</literal></expr></argument>, <argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Content specific tag [2]</comment>
    <expr_stmt><expr><call><name>ZRET</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>asn1_string_add</name><argument_list>(<argument><expr><name>asn</name></expr></argument>, <argument><expr><literal type="number">0x82</literal></expr></argument>, <argument><expr><name><name>csr</name><operator>-&gt;</operator><name>subj</name><operator>.</operator><name>dns_name</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>csr</name><operator>-&gt;</operator><name>subj</name><operator>.</operator><name>dns_name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>root</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>asn1_node</name></name> <modifier>*</modifier></type><name>_cri_sign</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cri_der</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>cri_der_len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bre_ec_csr</name> <modifier>*</modifier></type><name>csr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>asn1_node</name></name> <modifier>*</modifier></type><name>cr</name></decl></parameter>)</parameter_list> <block>{<block_content>

  <decl_stmt><decl><type><name><name>struct</name> <name>asn1</name></name> <modifier>*</modifier></type><name>asn</name> <init>= <expr><name><name>cr</name><operator>-&gt;</operator><name>asn1</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// Comment from br_ecdsa_raw_to_asn1()</comment>
  <comment type="line">// Internal buffer is large enough to accommodate a signature</comment>
  <comment type="line">// such that r and s fit on 125 bytes each (signed encoding),</comment>
  <comment type="line">// meaning a curve order of up to 999 bits. This is the limit</comment>
  <comment type="line">// that ensures "simple" length encodings.</comment>

  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>sig</name><index>[<expr><literal type="number">257</literal></expr>]</index></name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>br_hash_compat_context</name></type> <name>hc</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>hc</name><operator>.</operator><name>vtable</name></name> <operator>=</operator> <name><name>csr</name><operator>-&gt;</operator><name>signature_hc</name></name></expr>;</expr_stmt>

  <comment type="line">// Compute hash of CertificationRequest</comment>
  <decl_stmt><decl><type><name>size_t</name></type> <name>hash_len</name> <init>= <expr><operator>(</operator><name><name>hc</name><operator>.</operator><name>vtable</name><operator>-&gt;</operator><name>desc</name></name> <operator>&gt;&gt;</operator> <name>BR_HASHDESC_OUT_OFF</name><operator>)</operator> <operator>&amp;</operator> <name>BR_HASHDESC_OUT_MASK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>hash_cri</name><index>[<expr><name>hash_len</name></expr>]</index></name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name><name>hc</name><operator>.</operator><name>vtable</name><operator>-&gt;</operator><name>init</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hc</name><operator>.</operator><name>vtable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>hc</name><operator>.</operator><name>vtable</name><operator>-&gt;</operator><name>update</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hc</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name>cri_der</name></expr></argument>, <argument><expr><name>cri_der_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>hc</name><operator>.</operator><name>vtable</name><operator>-&gt;</operator><name>out</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hc</name><operator>.</operator><name>vtable</name></name></expr></argument>, <argument><expr><name>hash_cri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>br_ecdsa_sign</name></type> <name>s</name> <init>= <expr><call><name>br_ecdsa_sign_asn1_get_default</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>sig_len</name> <init>= <expr><call><name>s</name><argument_list>(<argument><expr><call><name>br_ec_get_default</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>csr</name><operator>-&gt;</operator><name>signature_hc</name></name></expr></argument>, <argument><expr><name>hash_cri</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>csr</name><operator>-&gt;</operator><name>sk</name></name></expr></argument>, <argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>sig_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>asn</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <call><name>BRE_ERROR0</name><argument_list>(<argument><expr><literal type="string">"Failed to generate EC signature"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>oid_ecsda</name></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><operator>(</operator><name><name>hc</name><operator>.</operator><name>vtable</name><operator>-&gt;</operator><name>desc</name></name> <operator>&gt;&gt;</operator> <name>BR_HASHDESC_ID_OFF</name><operator>)</operator> <operator>&amp;</operator> <name>BR_HASHDESC_ID_MASK</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>br_sha512_ID</name></expr>:</case>
      <expr_stmt><expr><name>oid_ecsda</name> <operator>=</operator> <literal type="string">"1.2.840.10045.4.3.4"</literal></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>br_sha384_ID</name></expr>:</case>
      <expr_stmt><expr><name>oid_ecsda</name> <operator>=</operator> <literal type="string">"1.2.840.10045.4.3.3"</literal></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>br_sha256_ID</name></expr>:</case>
      <expr_stmt><expr><name>oid_ecsda</name> <operator>=</operator> <literal type="string">"1.2.840.10045.4.3.2"</literal></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>br_sha224_ID</name></expr>:</case>
      <expr_stmt><expr><name>oid_ecsda</name> <operator>=</operator> <literal type="string">"1.2.840.10045.4.3.1"</literal></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><name><name>asn</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <literal type="string">"Unsupported ECDSA hash function"</literal></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></switch>

  <decl_stmt><decl><type><name><name>struct</name> <name>asn1_node</name></name> <modifier>*</modifier></type><name>n</name> <init>= <expr><call><name>ZRET</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>asn1_container_add</name><argument_list>(<argument><expr><name>asn</name></expr></argument>, <argument><expr><literal type="number">0x30</literal></expr></argument>, <argument><expr><name>cr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ZRET</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>asn1_oid_add</name><argument_list>(<argument><expr><name>asn</name></expr></argument>, <argument><expr><name>oid_ecsda</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ZRET</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>asn1_string_add</name><argument_list>(<argument><expr><name>asn</name></expr></argument>, <argument><expr><literal type="number">0x03</literal></expr></argument>, <argument><expr><name>sig</name></expr></argument>, <argument><expr><name>sig_len</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>ASN1_STRING_COPY</name></expr></argument>, <argument><expr><name>cr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>cr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint8_t</name> <modifier>*</modifier></type><name>bre_csr_ec_der_create</name><parameter_list>(
  <parameter><decl><type><name>bre_alloc</name></type>         <name>alloc</name></decl></parameter>,
  <parameter><decl><type><name>bre_dealloc</name></type>       <name>dealloc</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>bre_ec_csr</name> <modifier>*</modifier></type><name>csr</name></decl></parameter>,
  <parameter><decl><type><name>size_t</name>           <modifier>*</modifier></type><name>out_len</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name>      <modifier>*</modifier><modifier>*</modifier></type><name>out_err</name></decl></parameter>)</parameter_list> <block>{<block_content>

  <expr_stmt><expr><operator>*</operator><name>out_err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>out_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>der</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>der_ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>der_len</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>asn1</name></name></type> <name>asn</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>pool</name> <operator>=</operator> <macro><name>pool_create</name><argument_list>(<argument>alloc</argument>, <argument>dealloc</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>asn</name><operator>.</operator><name>pool</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>out_err</name> <operator>=</operator> <call><name>BRE_ERROR</name><argument_list>(<argument><expr><name>ALLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>


  <comment type="line">// CertificationRequest ::= SEQUENCE {</comment>
  <comment type="line">//       certificationRequestInfo CertificationRequestInfo,</comment>
  <comment type="line">//       signatureAlgorithm AlgorithmIdentifier{{ SignatureAlgorithms }},</comment>
  <comment type="line">//       signature          BIT STRING</comment>
  <decl_stmt><decl><type><name><name>struct</name> <name>asn1_node</name></name> <modifier>*</modifier></type><name>cr</name> <init>= <expr><call><name>ZGO</name><argument_list>(<argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>asn1_container_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>asn</name></expr></argument>, <argument><expr><literal type="number">0x30</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// CertificationRequestInfo ::= SEQUENCE {</comment>
  <comment type="line">//       version       INTEGER { v1(0) } (v1,...),</comment>
  <comment type="line">//       subject       Name,</comment>
  <comment type="line">//       subjectPKInfo SubjectPublicKeyInfo{{ PKInfoAlgorithms }},</comment>
  <comment type="line">//       attributes    [0] Attributes{{ CRIAttributes }}</comment>
  <comment type="line">//  }</comment>
  <decl_stmt><decl><type><name><name>struct</name> <name>asn1_node</name></name> <modifier>*</modifier></type><name>cri</name> <init>= <expr><call><name>ZGO</name><argument_list>(<argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>asn1_container_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>asn</name></expr></argument>, <argument><expr><literal type="number">0x30</literal></expr></argument>, <argument><expr><name>cr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// CertificationRequestInfo::version</comment>
  <expr_stmt><expr><call><name>ZGO</name><argument_list>(<argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>asn1_integer_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>asn</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// CertificationRequestInfo::subject</comment>
  <expr_stmt><expr><call><name>ZGO</name><argument_list>(<argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>_cri_subject_add</name><argument_list>(<argument><expr><name>csr</name></expr></argument>, <argument><expr><name>cri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// CertificationRequestInfo::subjectPKInfo</comment>
  <expr_stmt><expr><call><name>ZGO</name><argument_list>(<argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>_cri_ec_key_add</name><argument_list>(<argument><expr><name>csr</name></expr></argument>, <argument><expr><name>cri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// CertificationRequestInfo::attributes</comment>
  <if_stmt><if>if <condition>(<expr><name><name>csr</name><operator>-&gt;</operator><name>subj</name><operator>.</operator><name>dns_name</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ZGO</name><argument_list>(<argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>_cri_extension_add</name><argument_list>(<argument><expr><name>csr</name></expr></argument>, <argument><expr><name>cri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// Convert CertificationRequestInfo into DER in order to sign</comment>
  <expr_stmt><expr><name>der</name> <operator>=</operator> <call><name>ZGO</name><argument_list>(<argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>asn1_der_allocated</name><argument_list>(<argument><expr><operator>&amp;</operator><name>asn</name></expr></argument>, <argument><expr><name>cri</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>der_len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ZGO</name><argument_list>(<argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>_cri_sign</name><argument_list>(<argument><expr><name>der</name></expr></argument>, <argument><expr><name>der_len</name></expr></argument>, <argument><expr><name>csr</name></expr></argument>, <argument><expr><name>cr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dealloc</name><argument_list>(<argument><expr><name>der</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>der</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <comment type="line">// Compute final CSR DER</comment>
  <expr_stmt><expr><name>der_ret</name> <operator>=</operator> <call><name>asn1_der_allocated</name><argument_list>(<argument><expr><operator>&amp;</operator><name>asn</name></expr></argument>, <argument><expr><name>cr</name></expr></argument>, <argument><expr><name>out_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><operator>*</operator><name>out_err</name> <operator>=</operator> <name><name>asn</name><operator>.</operator><name>error</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dealloc</name><argument_list>(<argument><expr><name>der</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pool_destroy</name><argument_list>(<argument><expr><name><name>asn</name><operator>.</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>der_ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint8_t</name> <modifier>*</modifier></type><name>bre_csr_ec_pem_create</name><parameter_list>(
  <parameter><decl><type><name>bre_alloc</name></type>         <name>alloc</name></decl></parameter>,
  <parameter><decl><type><name>bre_dealloc</name></type>       <name>dealloc</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>bre_ec_csr</name> <modifier>*</modifier></type><name>csr</name></decl></parameter>,
  <parameter><decl><type><name>size_t</name>           <modifier>*</modifier></type><name>out_len</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name>      <modifier>*</modifier><modifier>*</modifier></type><name>out_err</name></decl></parameter>)</parameter_list> <block>{<block_content>

  <expr_stmt><expr><operator>*</operator><name>out_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>out_err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>b64</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>olen</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>der</name> <init>= <expr><call><name>bre_csr_ec_der_create</name><argument_list>(<argument><expr><name>alloc</name></expr></argument>, <argument><expr><name>dealloc</name></expr></argument>, <argument><expr><name>csr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument>, <argument><expr><name>out_err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>der</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>b64</name> <operator>=</operator> <call><name>base64_encode</name><argument_list>(<argument><expr><name>alloc</name></expr></argument>, <argument><expr><name>der</name></expr></argument>, <argument><expr><name>olen</name></expr></argument>, <argument><expr><name>out_len</name></expr></argument>,
                      <argument><expr><literal type="string">"-----BEGIN CERTIFICATE REQUEST-----"</literal></expr></argument>,
                      <argument><expr><literal type="string">"-----END CERTIFICATE REQUEST-----"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>b64</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>out_err</name> <operator>=</operator> <call><name>BRE_ERROR</name><argument_list>(<argument><expr><name>ALLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>dealloc</name><argument_list>(<argument><expr><name>der</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>out_err</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dealloc</name><argument_list>(<argument><expr><name>b64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>b64</name></expr>;</return>
</block_content>}</block></function>
</unit>
