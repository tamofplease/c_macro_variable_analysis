<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/extra/iwnet/src/utils/iwn_url.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwn_url.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<comment type="block" format="doxygen">/**
 * Parse a non null terminated string into an integer.
 *
 * str: the string containing the number.
 * len: Number of characters to parse.
 */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>natoi</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>r</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> <operator>+=</operator> <name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Check if a URL is relative (no scheme and hostname).
 *
 * url: the string containing the URL to check.
 *
 * Returns 1 if relative, otherwise 0.
 */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>is_relative</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><ternary><condition><expr><operator>(</operator><operator>*</operator><name>url</name> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Parse the scheme of a URL by inserting a null terminator after the scheme.
 *
 * str: the string containing the URL to parse. Will be modified.
 *
 * Returns a pointer to the hostname on success, otherwise NULL.
 */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>char</name><modifier>*</modifier></type> <name>parse_scheme</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

  <comment type="block">/* If not found or first in string, return error */</comment>
  <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>s</name> <operator>==</operator> <name>str</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* If not followed by two slashes, return error */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'/'</literal> <operator>||</operator> <name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt> <comment type="line">// Replace ':' with NULL</comment>

  <return>return <expr><name>s</name> <operator>+</operator> <literal type="number">3</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Find a character in a string, replace it with '\0' and return the next
 * character in the string.
 *
 * str: the string to search in.
 * find: the character to search for.
 *
 * Returns a pointer to the character after the one to search for. If not
 * found, NULL is returned.
 */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>char</name><modifier>*</modifier></type> <name>find_and_terminate</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>find</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>find</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>str</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>str</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
  <return>return <expr><name>str</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Yes, the following functions could be implemented as preprocessor macros
     instead of inline functions, but I think that this approach will be more
     clean in this case. */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>char</name><modifier>*</modifier></type> <name>find_fragment</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>find_and_terminate</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">'#'</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>char</name><modifier>*</modifier></type> <name>find_query</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>find_and_terminate</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>char</name><modifier>*</modifier></type> <name>find_path</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>find_and_terminate</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Parse a URL string to a struct.
 *
 * url: pointer to the struct where to store the parsed URL parts.
 * u:   the string containing the URL to be parsed.
 *
 * Returns 0 on success, otherwise -1.
 */</comment>
<function><type><name>int</name></type> <name>iwn_url_parse</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_url</name></name> <modifier>*</modifier></type><name>url</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>u</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>url</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>u</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>iwn_url</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* (Fragment) */</comment>
  <expr_stmt><expr><name><name>url</name><operator>-&gt;</operator><name>fragment</name></name> <operator>=</operator> <call><name>find_fragment</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* (Query) */</comment>
  <expr_stmt><expr><name><name>url</name><operator>-&gt;</operator><name>query</name></name> <operator>=</operator> <call><name>find_query</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Relative URL? Parse scheme and hostname */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_relative</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <comment type="block">/* Scheme */</comment>
    <expr_stmt><expr><name><name>url</name><operator>-&gt;</operator><name>scheme</name></name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>u</name> <operator>=</operator> <call><name>parse_scheme</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>u</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Host */</comment>
    <if_stmt><if>if <condition>(<expr><literal type="char">'\0'</literal> <operator>==</operator> <operator>*</operator><name>u</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>url</name><operator>-&gt;</operator><name>host</name></name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>

    <comment type="block">/* (Path) */</comment>
    <expr_stmt><expr><name><name>url</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>find_path</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* (Credentials) */</comment>
    <expr_stmt><expr><name>u</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>url</name><operator>-&gt;</operator><name>host</name></name></expr></argument>, <argument><expr><literal type="char">'@'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>u</name></expr>)</condition> <block>{<block_content>
      <comment type="block">/* Missing credentials? */</comment>
      <if_stmt><if>if <condition>(<expr><name>u</name> <operator>==</operator> <name><name>url</name><operator>-&gt;</operator><name>host</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name><name>url</name><operator>-&gt;</operator><name>username</name></name> <operator>=</operator> <name><name>url</name><operator>-&gt;</operator><name>host</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>url</name><operator>-&gt;</operator><name>host</name></name> <operator>=</operator> <name>u</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>u</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

      <expr_stmt><expr><name>u</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>url</name><operator>-&gt;</operator><name>username</name></name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>u</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name><name>url</name><operator>-&gt;</operator><name>password</name></name> <operator>=</operator> <name>u</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>u</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Missing hostname? */</comment>
    <if_stmt><if>if <condition>(<expr><literal type="char">'\0'</literal> <operator>==</operator> <operator>*</operator><name><name>url</name><operator>-&gt;</operator><name>host</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* (Port) */</comment>
    <expr_stmt><expr><name>u</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>url</name><operator>-&gt;</operator><name>host</name></name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>u</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>NULL</name> <operator>==</operator> <name><name>url</name><operator>-&gt;</operator><name>path</name></name> <operator>||</operator> <name>u</name> <operator>&lt;</operator> <name><name>url</name><operator>-&gt;</operator><name>path</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>u</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><literal type="char">'\0'</literal> <operator>==</operator> <operator>*</operator><name>u</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>url</name><operator>-&gt;</operator><name>path</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>url</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <call><name>natoi</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name><name>url</name><operator>-&gt;</operator><name>path</name></name> <operator>-</operator> <name>u</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>url</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Missing hostname? */</comment>
    <if_stmt><if>if <condition>(<expr><literal type="char">'\0'</literal> <operator>==</operator> <operator>*</operator><name><name>url</name><operator>-&gt;</operator><name>host</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="block">/* (Path) */</comment>
    <expr_stmt><expr><name><name>url</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>find_path</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



</unit>
