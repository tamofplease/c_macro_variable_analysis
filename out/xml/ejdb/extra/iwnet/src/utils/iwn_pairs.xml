<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/extra/iwnet/src/utils/iwn_pairs.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwn_pairs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iowow/iwlog.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>iwn_val_buf_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_val</name></name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>val</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwn_val_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_vals</name></name> <modifier>*</modifier></type><name>vals</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>iwn_val</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>vals</name><operator>-&gt;</operator><name>last</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>vals</name><operator>-&gt;</operator><name>last</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>vals</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>vals</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name><name>vals</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwn_val_add_new</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_vals</name></name> <modifier>*</modifier></type><name>vals</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_val</name></name> <modifier>*</modifier></type><name>v</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>v</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>v</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>iwn_val_add</name><argument_list>(<argument><expr><name>vals</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwn_pair_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_pairs</name></name> <modifier>*</modifier></type><name>pairs</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>iwn_pair</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pairs</name><operator>-&gt;</operator><name>last</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pairs</name><operator>-&gt;</operator><name>last</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pairs</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pairs</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name><name>pairs</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>iwn_pair</name></name><modifier>*</modifier></type> <name>iwn_pair_find</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_pairs</name></name> <modifier>*</modifier></type><name>pairs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>key_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>IW_UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><name>pairs</name> <operator>||</operator> <operator>!</operator><name>key</name> <operator>||</operator> <operator>!</operator><name>key_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>key_len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>key_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <for>for <control>(<init><decl><type><name><name>struct</name> <name>iwn_pair</name></name> <modifier>*</modifier><name>p</name></type> <init>= <expr><name><name>pairs</name><operator>-&gt;</operator><name>first</name></name></expr></init></decl>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>key_len</name></name> <operator>==</operator> <name>key_len</name> <operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>p</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>iwn_val</name></name></type> <name>iwn_pair_find_val</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iwn_pairs</name></name> <modifier>*</modifier></type><name>pairs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>key_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_pair</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>iwn_pair_find</name><argument_list>(<argument><expr><name>pairs</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>(</operator>struct <name>iwn_val</name><operator>)</operator> <block>{
             <expr><operator>.</operator><name>buf</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>val</name></name></expr>,
             <expr><operator>.</operator><name>len</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>val_len</name></name></expr>
    }</block></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><operator>(</operator>struct <name>iwn_val</name><operator>)</operator> <block>{}</block></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwn_pair_add_pool</name><parameter_list>(
  <parameter><decl><type><name>IWPOOL</name>           <modifier>*</modifier></type><name>pool</name></decl></parameter>,
  <parameter><decl><type><name><name>struct</name> <name>iwn_pairs</name></name> <modifier>*</modifier></type><name>pairs</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name>       <modifier>*</modifier></type><name>key</name></decl></parameter>,
  <parameter><decl><type><name>ssize_t</name></type>           <name>key_len</name></decl></parameter>,
  <parameter><decl><type><name>char</name>             <modifier>*</modifier></type><name>val</name></decl></parameter>,
  <parameter><decl><type><name>ssize_t</name></type>           <name>val_len</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_pair</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>iwpool_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>key_len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>key_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>val_len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>val_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>key_len</name></name> <operator>=</operator> <name>key_len</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>val_len</name></name> <operator>=</operator> <name>val_len</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>iwn_pair_add</name><argument_list>(<argument><expr><name>pairs</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwn_pair_add_pool_all</name><parameter_list>(
  <parameter><decl><type><name>IWPOOL</name>           <modifier>*</modifier></type><name>pool</name></decl></parameter>,
  <parameter><decl><type><name><name>struct</name> <name>iwn_pairs</name></name> <modifier>*</modifier></type><name>pairs</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name>       <modifier>*</modifier></type><name>key</name></decl></parameter>,
  <parameter><decl><type><name>ssize_t</name></type>           <name>key_len</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name>       <modifier>*</modifier></type><name>val</name></decl></parameter>,
  <parameter><decl><type><name>ssize_t</name></type>           <name>val_len</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pval</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>val_len</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>val_len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>val_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>pval</name> <operator>=</operator> <call><name>iwpool_strndup2</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>val_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pval</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>key_len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>key_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>iwpool_strndup2</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>key</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>iwn_pair_add_pool</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>pairs</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>, <argument><expr><name>pval</name></expr></argument>, <argument><expr><name>val_len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>iwn_pair</name></name><modifier>*</modifier><modifier>*</modifier></type> <name>iwn_pairs_to_array</name><parameter_list>(<parameter><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iwn_pairs</name></name> <modifier>*</modifier></type><name>pairs</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>out_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name><name>struct</name> <name>iwn_pair</name></name> <modifier>*</modifier><name>p</name></type> <init>= <expr><name><name>pairs</name><operator>-&gt;</operator><name>first</name></name></expr></init></decl>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><operator>++</operator><name>cnt</name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <comment type="line">// NOLINTNEXTLINE</comment>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_pair</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>iwpool_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ret</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>cnt</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>out_size</name> <operator>=</operator> <name>cnt</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name><name>struct</name> <name>iwn_pair</name></name> <modifier>*</modifier><name>p</name></type> <init>= <expr><name><name>pairs</name><operator>-&gt;</operator><name>first</name></name></expr></init></decl>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>ret</name><index>[<expr><name>cnt</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>iwn_val</name></name><modifier>*</modifier><modifier>*</modifier></type> <name>iwn_vals_to_array</name><parameter_list>(<parameter><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iwn_vals</name></name> <modifier>*</modifier></type><name>vals</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>out_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name><name>struct</name> <name>iwn_val</name></name> <modifier>*</modifier><name>v</name></type> <init>= <expr><name><name>vals</name><operator>-&gt;</operator><name>first</name></name></expr></init></decl>;</init> <condition><expr><name>v</name></expr>;</condition> <incr><expr><name>v</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><operator>++</operator><name>cnt</name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <comment type="line">// NOLINTNEXTLINE</comment>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwn_val</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>iwpool_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ret</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>cnt</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>out_size</name> <operator>=</operator> <name>cnt</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name><name>struct</name> <name>iwn_val</name></name> <modifier>*</modifier><name>v</name></type> <init>= <expr><name><name>vals</name><operator>-&gt;</operator><name>first</name></name></expr></init></decl>;</init> <condition><expr><name>v</name></expr>;</condition> <incr><expr><name>v</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>ret</name><index>[<expr><name>cnt</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
</unit>
