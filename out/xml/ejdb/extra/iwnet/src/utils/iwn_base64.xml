<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/extra/iwnet/src/utils/iwn_base64.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;err.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwn_base64.h"</cpp:file></cpp:include>

<comment type="block">/* Base64 routines adapted from https://www.libsodium.org */</comment>

<comment type="block">/*
 * ISC License
 *
 * Copyright (c) 2013-2017
 * Frank Denis &lt;j at pureftpd dot org&gt;
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */</comment>

<comment type="block">/* Derived from original code by CodesInChaos */</comment>
<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>bin2hex</name><parameter_list>(
  <parameter><decl><type><name>char</name><modifier>*</modifier> <specifier>const</specifier></type>                <name>hex</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type>               <name>hex_maxlen</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name>bin</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type>               <name>bin_len</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator> <literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>x</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>b</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>bin_len</name> <operator>&gt;=</operator> <name>SIZE_MAX</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>hex_maxlen</name> <operator>&lt;=</operator> <name>bin_len</name> <operator>*</operator> <literal type="number">2U</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <comment type="line">//errx(2, "bin2hex length wrong");</comment>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>bin_len</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>bin</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>bin</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>(</operator><literal type="number">87U</literal> <operator>+</operator> <name>c</name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>c</name> <operator>-</operator> <literal type="number">10U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">38U</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal>
        <operator>|</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>(</operator><literal type="number">87U</literal> <operator>+</operator> <name>b</name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>b</name> <operator>-</operator> <literal type="number">10U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">38U</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hex</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2U</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <name>x</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>x</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hex</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2U</literal> <operator>+</operator> <literal type="number">1U</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <name>x</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><name><name>hex</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2U</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>

  <return>return <expr><name>hex</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hex2bin</name><parameter_list>(
  <parameter><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name>bin</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type>         <name>bin_maxlen</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier></type>    <name>hex</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type>         <name>hex_len</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier></type>    <name>ignore</name></decl></parameter>,
  <parameter><decl><type><name>size_t</name><modifier>*</modifier> <specifier>const</specifier></type>        <name>bin_len</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier><modifier>*</modifier> <specifier>const</specifier></type>   <name>hex_end</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>bin_pos</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator> <literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>hex_pos</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator> <literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c_acc</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c_alpha0</name></decl>, <decl><type ref="prev"/><name>c_alpha</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c_num0</name></decl>, <decl><type ref="prev"/><name>c_num</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c_val</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>state</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>hex_pos</name> <operator>&lt;</operator> <name>hex_len</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>hex</name><index>[<expr><name>hex_pos</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>c_num</name> <operator>=</operator> <name>c</name> <operator>^</operator> <literal type="number">48U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>c_num0</name> <operator>=</operator> <operator>(</operator><name>c_num</name> <operator>-</operator> <literal type="number">10U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>c_alpha</name> <operator>=</operator> <operator>(</operator><name>c</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">32U</literal><operator>)</operator> <operator>-</operator> <literal type="number">55U</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>c_alpha0</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>c_alpha</name> <operator>-</operator> <literal type="number">10U</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>c_alpha</name> <operator>-</operator> <literal type="number">16U</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>c_num0</name> <operator>|</operator> <name>c_alpha0</name><operator>)</operator> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ignore</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>state</name> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strchr</name><argument_list>(<argument><expr><name>ignore</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>hex_pos</name><operator>++</operator></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>c_val</name> <operator>=</operator> <operator>(</operator><name>c_num0</name> <operator>&amp;</operator> <name>c_num</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>c_alpha0</name> <operator>&amp;</operator> <name>c_alpha</name><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>bin_pos</name> <operator>&gt;=</operator> <name>bin_maxlen</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <literal type="number">0U</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>c_acc</name> <operator>=</operator> <name>c_val</name> <operator>*</operator> <literal type="number">16U</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>bin</name><index>[<expr><name>bin_pos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c_acc</name> <operator>|</operator> <name>c_val</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>state</name> <operator>=</operator> <operator>~</operator><name>state</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>hex_pos</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if <condition>(<expr><name>state</name> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>hex_pos</name><operator>--</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>bin_pos</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>hex_end</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>hex_end</name> <operator>=</operator> <operator>&amp;</operator><name><name>hex</name><index>[<expr><name>hex_pos</name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>hex_pos</name> <operator>!=</operator> <name>hex_len</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>bin_len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>bin_len</name> <operator>=</operator> <name>bin_pos</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Some macros for constant-time comparisons. These work over values in
 * the 0..255 range. Returned value is 0x00 on "false", 0xFF on "true".
 *
 * Original code by Thomas Pornin.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EQ</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>((((0U - ((unsigned int) (x) ^ (unsigned int) (y))) &gt;&gt; 8) &amp; 0xFF) ^ 0xFF)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((unsigned int) (y) - (unsigned int) (x)) &gt;&gt; 8) &amp; 0xFF)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(GT(y, x) ^ 0xFF)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GT(y, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GE(y, x)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>b64_byte_to_char</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><call><name>LT</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><name>x</name> <operator>+</operator> <literal type="char">'A'</literal><operator>)</operator><operator>)</operator>
         <operator>|</operator> <operator>(</operator><call><name>GE</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <call><name>LT</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">52</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><name>x</name> <operator>+</operator> <operator>(</operator><literal type="char">'a'</literal> <operator>-</operator> <literal type="number">26</literal><operator>)</operator><operator>)</operator><operator>)</operator>
         <operator>|</operator> <operator>(</operator><call><name>GE</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">52</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <call><name>LT</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">62</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><name>x</name> <operator>+</operator> <operator>(</operator><literal type="char">'0'</literal> <operator>-</operator> <literal type="number">52</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>|</operator> <operator>(</operator><call><name>EQ</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">62</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="char">'+'</literal><operator>)</operator>
         <operator>|</operator> <operator>(</operator><call><name>EQ</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">63</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="char">'/'</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>b64_char_to_byte</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>x</name>
    <init>= <expr><operator>(</operator><call><name>GE</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="char">'A'</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <call><name>LE</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="char">'Z'</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><name>c</name> <operator>-</operator> <literal type="char">'A'</literal><operator>)</operator><operator>)</operator>
      <operator>|</operator> <operator>(</operator><call><name>GE</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <call><name>LE</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="char">'z'</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><name>c</name> <operator>-</operator> <operator>(</operator><literal type="char">'a'</literal> <operator>-</operator> <literal type="number">26</literal><operator>)</operator><operator>)</operator><operator>)</operator>
      <operator>|</operator> <operator>(</operator><call><name>GE</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <call><name>LE</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="char">'9'</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><name>c</name> <operator>-</operator> <operator>(</operator><literal type="char">'0'</literal> <operator>-</operator> <literal type="number">52</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>|</operator> <operator>(</operator><call><name>EQ</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="char">'+'</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">62</literal><operator>)</operator>
      <operator>|</operator> <operator>(</operator><call><name>EQ</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">63</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

  <return>return <expr><name>x</name> <operator>|</operator> <operator>(</operator><call><name>EQ</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><call><name>EQ</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="char">'A'</literal></expr></argument>)</argument_list></call> <operator>^</operator> <literal type="number">0xFF</literal><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>b64_byte_to_urlsafe_char</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><call><name>LT</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><name>x</name> <operator>+</operator> <literal type="char">'A'</literal><operator>)</operator><operator>)</operator>
         <operator>|</operator> <operator>(</operator><call><name>GE</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <call><name>LT</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">52</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><name>x</name> <operator>+</operator> <operator>(</operator><literal type="char">'a'</literal> <operator>-</operator> <literal type="number">26</literal><operator>)</operator><operator>)</operator><operator>)</operator>
         <operator>|</operator> <operator>(</operator><call><name>GE</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">52</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <call><name>LT</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">62</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><name>x</name> <operator>+</operator> <operator>(</operator><literal type="char">'0'</literal> <operator>-</operator> <literal type="number">52</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>|</operator> <operator>(</operator><call><name>EQ</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">62</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="char">'-'</literal><operator>)</operator>
         <operator>|</operator> <operator>(</operator><call><name>EQ</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">63</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="char">'_'</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>b64_urlsafe_char_to_byte</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>x</name>
    <init>= <expr><operator>(</operator><call><name>GE</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="char">'A'</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <call><name>LE</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="char">'Z'</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><name>c</name> <operator>-</operator> <literal type="char">'A'</literal><operator>)</operator><operator>)</operator>
      <operator>|</operator> <operator>(</operator><call><name>GE</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <call><name>LE</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="char">'z'</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><name>c</name> <operator>-</operator> <operator>(</operator><literal type="char">'a'</literal> <operator>-</operator> <literal type="number">26</literal><operator>)</operator><operator>)</operator><operator>)</operator>
      <operator>|</operator> <operator>(</operator><call><name>GE</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <call><name>LE</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="char">'9'</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><name>c</name> <operator>-</operator> <operator>(</operator><literal type="char">'0'</literal> <operator>-</operator> <literal type="number">52</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>|</operator> <operator>(</operator><call><name>EQ</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">62</literal><operator>)</operator>
      <operator>|</operator> <operator>(</operator><call><name>EQ</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="char">'_'</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">63</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

  <return>return <expr><name>x</name> <operator>|</operator> <operator>(</operator><call><name>EQ</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><call><name>EQ</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="char">'A'</literal></expr></argument>)</argument_list></call> <operator>^</operator> <literal type="number">0xFF</literal><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VARIANT_NO_PADDING_MASK</name></cpp:macro> <cpp:value>0x2U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VARIANT_URLSAFE_MASK</name></cpp:macro>    <cpp:value>0x4U</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>base64_check_variant</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>variant</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>variant</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x6U</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x1U</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">//errx(2, "base64_check_variant: invalid variant");</comment>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>iwn_base64_encoded_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>bin_len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>variant</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>base64_check_variant</name><argument_list>(<argument><expr><name>variant</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>base64_ENCODED_LEN</name><argument_list>(<argument><expr><name>bin_len</name></expr></argument>, <argument><expr><name>variant</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>iwn_base64_encode</name><parameter_list>(
  <parameter><decl><type><name>char</name><modifier>*</modifier> <specifier>const</specifier></type>                <name>b64</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type>               <name>b64_maxlen</name></decl></parameter>,
  <parameter><decl><type><name>size_t</name>                    <modifier>*</modifier></type><name>out_b64_len</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name>bin</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type>               <name>bin_len</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>int</name></type>                  <name>variant</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>acc_len</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>b64_pos</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>bin_pos</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>acc</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>b64_len</name> <init>= <expr><call><name>iwn_base64_encoded_len</name><argument_list>(<argument><expr><name>bin_len</name></expr></argument>, <argument><expr><name>variant</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>b64_maxlen</name> <operator>&lt;</operator> <name>b64_len</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>out_b64_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>variant</name><operator>)</operator> <operator>&amp;</operator> <name>VARIANT_URLSAFE_MASK</name><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal></expr>)</condition> <block>{<block_content>
    <while>while <condition>(<expr><name>bin_pos</name> <operator>&lt;</operator> <name>bin_len</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>acc</name> <operator>=</operator> <operator>(</operator><name>acc</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>bin</name><index>[<expr><name>bin_pos</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>acc_len</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
      <while>while <condition>(<expr><name>acc_len</name> <operator>&gt;=</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>acc_len</name> <operator>-=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>b64</name><index>[<expr><name>b64_pos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <call><name>b64_byte_to_urlsafe_char</name><argument_list>(<argument><expr><operator>(</operator><name>acc</name> <operator>&gt;&gt;</operator> <name>acc_len</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></while>
    </block_content>}</block></while>
    <if_stmt><if>if <condition>(<expr><name>acc_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>b64</name><index>[<expr><name>b64_pos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <call><name>b64_byte_to_urlsafe_char</name><argument_list>(<argument><expr><operator>(</operator><name>acc</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">6</literal> <operator>-</operator> <name>acc_len</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <while>while <condition>(<expr><name>bin_pos</name> <operator>&lt;</operator> <name>bin_len</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>acc</name> <operator>=</operator> <operator>(</operator><name>acc</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>bin</name><index>[<expr><name>bin_pos</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>acc_len</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
      <while>while <condition>(<expr><name>acc_len</name> <operator>&gt;=</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>acc_len</name> <operator>-=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>b64</name><index>[<expr><name>b64_pos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <call><name>b64_byte_to_char</name><argument_list>(<argument><expr><operator>(</operator><name>acc</name> <operator>&gt;&gt;</operator> <name>acc_len</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></while>
    </block_content>}</block></while>
    <if_stmt><if>if <condition>(<expr><name>acc_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>b64</name><index>[<expr><name>b64_pos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <call><name>b64_byte_to_char</name><argument_list>(<argument><expr><operator>(</operator><name>acc</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">6</literal> <operator>-</operator> <name>acc_len</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <while>while <condition>(<expr><name>b64_pos</name> <operator>&lt;</operator> <name>b64_len</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>b64</name><index>[<expr><name>b64_pos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'='</literal></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><name><name>b64</name><index>[<expr><name>b64_len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>out_b64_len</name> <operator>=</operator> <name>b64_len</name></expr>;</expr_stmt>
  <return>return <expr><name>b64</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_base642bin_skip_padding</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name>b64</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>b64_len</name></decl></parameter>, <parameter><decl><type><name>size_t</name><modifier>*</modifier> <specifier>const</specifier></type> <name>b64_pos_p</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name>ignore</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>padding_len</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>padding_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>b64_pos_p</name> <operator>&gt;=</operator> <name>b64_len</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>b64</name><index>[<expr><operator>*</operator><name>b64_pos_p</name></expr>]</index></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>padding_len</name><operator>--</operator></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>ignore</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>strchr</name><argument_list>(<argument><expr><name>ignore</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>b64_pos_p</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>iwn_base64_decode</name><parameter_list>(
  <parameter><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name>bin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>bin_maxlen</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name>b64</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>b64_len</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name>ignore</name></decl></parameter>, <parameter><decl><type><name>size_t</name><modifier>*</modifier> <specifier>const</specifier></type> <name>bin_len</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier><modifier>*</modifier> <specifier>const</specifier></type> <name>b64_end</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>variant</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>acc_len</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>b64_pos</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>bin_pos</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>is_urlsafe</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>acc</name> <init>= <expr><literal type="number">0U</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>d</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>base64_check_variant</name><argument_list>(<argument><expr><name>variant</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>is_urlsafe</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>variant</name><operator>)</operator> <operator>&amp;</operator> <name>VARIANT_URLSAFE_MASK</name></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>b64_pos</name> <operator>&lt;</operator> <name>b64_len</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>b64</name><index>[<expr><name>b64_pos</name></expr>]</index></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>is_urlsafe</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>b64_urlsafe_char_to_byte</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>b64_char_to_byte</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <literal type="number">0xFF</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ignore</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strchr</name><argument_list>(<argument><expr><name>ignore</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>b64_pos</name><operator>++</operator></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>acc</name> <operator>=</operator> <operator>(</operator><name>acc</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>+</operator> <name>d</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>acc_len</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>acc_len</name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>acc_len</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>bin_pos</name> <operator>&gt;=</operator> <name>bin_maxlen</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>bin</name><index>[<expr><name>bin_pos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>acc</name> <operator>&gt;&gt;</operator> <name>acc_len</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>b64_pos</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>acc_len</name> <operator>&gt;</operator> <literal type="number">4U</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>acc</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>acc_len</name><operator>)</operator> <operator>-</operator> <literal type="number">1U</literal><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(  <expr><operator>(</operator><name>ret</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator>
            <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>variant</name><operator>)</operator> <operator>&amp;</operator> <name>VARIANT_NO_PADDING_MASK</name><operator>)</operator> <operator>==</operator> <literal type="number">0U</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_base642bin_skip_padding</name><argument_list>(<argument><expr><name>b64</name></expr></argument>, <argument><expr><name>b64_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b64_pos</name></expr></argument>, <argument><expr><name>ignore</name></expr></argument>,
                                   <argument><expr><name>acc_len</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>bin_pos</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <literal type="number">0U</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ignore</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <while>while <condition>(<expr><name>b64_pos</name> <operator>&lt;</operator> <name>b64_len</name> <operator>&amp;&amp;</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>ignore</name></expr></argument>, <argument><expr><name><name>b64</name><index>[<expr><name>b64_pos</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>b64_pos</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>b64_end</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>b64_end</name> <operator>=</operator> <operator>&amp;</operator><name><name>b64</name><index>[<expr><name>b64_pos</name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>b64_pos</name> <operator>!=</operator> <name>b64_len</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>bin_len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>bin_len</name> <operator>=</operator> <name>bin_pos</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>iwn_base64_encode_url</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buf_len</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>out_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>encoded_len</name> <init>= <expr><call><name>base64_ENCODED_LEN</name><argument_list>(<argument><expr><name>buf_len</name></expr></argument>, <argument><expr><name>base64_VARIANT_URLSAFE_NO_PADDING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>encoded</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>encoded_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>encoded</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>iwn_base64_encode</name><argument_list>(<argument><expr><name>encoded</name></expr></argument>, <argument><expr><name>encoded_len</name></expr></argument>, <argument><expr><name>out_len</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>, <argument><expr><name>base64_VARIANT_URLSAFE_NO_PADDING</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
