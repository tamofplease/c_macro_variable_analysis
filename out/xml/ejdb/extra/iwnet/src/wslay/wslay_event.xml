<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/extra/iwnet/src/wslay/wslay_event.c"><comment type="block">/*
 * Wslay - The WebSocket Library
 *
 * Copyright (c) 2011, 2012 Tatsuhiro Tsujikawa
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wslay_event.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wslay_frame.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wslay_net.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wslay_macro.h"</cpp:file></cpp:include>
<comment type="block">/* Start of utf8 dfa */</comment>
<comment type="block">/* Copyright (c) 2008-2010 Bjoern Hoehrmann &lt;bjoern@hoehrmann.de&gt;
 * See http://bjoern.hoehrmann.de/utf-8/decoder/dfa/ for details.
 *
 * Copyright (c) 2008-2009 Bjoern Hoehrmann &lt;bjoern@hoehrmann.de&gt;
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UTF8_ACCEPT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UTF8_REJECT</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<comment type="block">/* clang-format off */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>utf8d</name><index>[]</index></name> <init>= <expr><block>{
  <comment type="block">/*
   * The first part of the table maps bytes to character classes that
   * to reduce the size of the transition table and create bitmasks.
   */</comment>
   <expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
   <expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
   <expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
   <expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
   <expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,  <expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">9</literal></expr>,
   <expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,  <expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,
   <expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,
  <expr><literal type="number">10</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>, <expr><literal type="number">11</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">8</literal></expr>,

   <comment type="block">/*
    * The second part is a transition table that maps a combination
    * of a state of the automaton and a character class to a state.
    */</comment>
   <expr><literal type="number">0</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">24</literal></expr>,<expr><literal type="number">36</literal></expr>,<expr><literal type="number">60</literal></expr>,<expr><literal type="number">96</literal></expr>,<expr><literal type="number">84</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">48</literal></expr>,<expr><literal type="number">72</literal></expr>, <expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,
  <expr><literal type="number">12</literal></expr>, <expr><literal type="number">0</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>, <expr><literal type="number">0</literal></expr>,<expr><literal type="number">12</literal></expr>, <expr><literal type="number">0</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>,<expr><literal type="number">24</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">24</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">24</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,
  <expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">24</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>,<expr><literal type="number">24</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">24</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,
  <expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">36</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">36</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>,<expr><literal type="number">36</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">36</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">36</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,
  <expr><literal type="number">12</literal></expr>,<expr><literal type="number">36</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">12</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<comment type="block">/* clang-format on */</comment>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>decode</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>codep</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>byte</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>type</name> <init>= <expr><name><name>utf8d</name><index>[<expr><name>byte</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><operator>*</operator><name>codep</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>*</operator><name>state</name> <operator>!=</operator> <name>UTF8_ACCEPT</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>byte</name> <operator>&amp;</operator> <literal type="number">0x3fu</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>*</operator><name>codep</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator></expr>
                                   </then><else>: <expr><operator>(</operator><literal type="number">0xff</literal> <operator>&gt;&gt;</operator> <name>type</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>byte</name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>state</name> <operator>=</operator> <name><name>utf8d</name><index>[<expr><literal type="number">256</literal> <operator>+</operator> <operator>*</operator><name>state</name> <operator>+</operator> <name>type</name></expr>]</index></name></expr>;</expr_stmt>
  <return>return <expr><operator>*</operator><name>state</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* End of utf8 dfa */</comment>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>wslay_event_frame_recv_callback</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
                                               <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>wslay_event_frame_user_data</name></name> <modifier>*</modifier></type><name>e</name> <init>=
      <expr><operator>(</operator>struct <name>wslay_event_frame_user_data</name> <operator>*</operator><operator>)</operator><name>user_data</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name><name>e</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>recv_callback</name></name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>user_data</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>wslay_event_frame_send_callback</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
                                               <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>wslay_event_frame_user_data</name></name> <modifier>*</modifier></type><name>e</name> <init>=
      <expr><operator>(</operator>struct <name>wslay_event_frame_user_data</name> <operator>*</operator><operator>)</operator><name>user_data</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name><name>e</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>send_callback</name></name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>,
                                         <argument><expr><name><name>e</name><operator>-&gt;</operator><name>user_data</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>wslay_event_frame_genmask_callback</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
                                              <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>wslay_event_frame_user_data</name></name> <modifier>*</modifier></type><name>e</name> <init>=
      <expr><operator>(</operator>struct <name>wslay_event_frame_user_data</name> <operator>*</operator><operator>)</operator><name>user_data</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name><name>e</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>genmask_callback</name></name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>user_data</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>wslay_event_byte_chunk_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>wslay_event_byte_chunk</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>chunk</name></decl></parameter>,
                                       <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>chunk</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>wslay_event_byte_chunk</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>chunk</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>WSLAY_ERR_NOMEM</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>*</operator><name>chunk</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>wslay_event_byte_chunk</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>chunk</name><operator>)</operator><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>*</operator><name>chunk</name><operator>)</operator> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>chunk</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>chunk</name><operator>)</operator><operator>-&gt;</operator><name>data_length</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>wslay_event_byte_chunk_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>wslay_event_byte_chunk</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>wslay_event_byte_chunk_copy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>wslay_event_byte_chunk</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>,
                                        <parameter><decl><type><name>size_t</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
                                        <parameter><decl><type><name>size_t</name></type> <name>data_length</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>data_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>wslay_event_imsg_set</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>wslay_event_imsg</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>fin</name></decl></parameter>,
                                 <parameter><decl><type><name>uint8_t</name></type> <name>rsv</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>opcode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>fin</name></name> <operator>=</operator> <name>fin</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>rsv</name></name> <operator>=</operator> <name>rsv</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>opcode</name></name> <operator>=</operator> <name>opcode</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>msg_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>wslay_event_imsg_chunks_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>wslay_event_imsg</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <while>while <condition>(<expr><operator>!</operator><call><name>wslay_queue_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>wslay_event_byte_chunk</name></name> <modifier>*</modifier></type><name>chunk</name> <init>= <expr><call><name>wslay_struct_of</name><argument_list>(
        <argument><expr><call><name>wslay_queue_top</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>struct <name>wslay_event_byte_chunk</name></expr></argument>, <argument><expr><name>qe</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>wslay_queue_pop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>wslay_event_byte_chunk_free</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>wslay_event_imsg_reset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>wslay_event_imsg</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>opcode</name></name> <operator>=</operator> <literal type="number">0xffu</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>utf8state</name></name> <operator>=</operator> <name>UTF8_ACCEPT</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>wslay_event_imsg_chunks_free</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>wslay_event_imsg_append_chunk</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>wslay_event_imsg</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>,
                                         <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>wslay_event_byte_chunk</name></name> <modifier>*</modifier></type><name>chunk</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>wslay_event_byte_chunk_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>chunk</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>r</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>wslay_queue_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>chunk</name><operator>-&gt;</operator><name>qe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>msg_length</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>wslay_event_omsg_non_fragmented_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>wslay_event_omsg</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>m</name></decl></parameter>,
                                                <parameter><decl><type><name>uint8_t</name></type> <name>opcode</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>rsv</name></decl></parameter>,
                                                <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>,
                                                <parameter><decl><type><name>size_t</name></type> <name>msg_length</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>m</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>wslay_event_omsg</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>msg_length</name> <operator>+</operator> <name>WSLAY_FRAME_HDR_SIZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>m</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>WSLAY_ERR_NOMEM</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>*</operator><name>m</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>wslay_event_omsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>m</name><operator>)</operator><operator>-&gt;</operator><name>fin</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>m</name><operator>)</operator><operator>-&gt;</operator><name>opcode</name></name> <operator>=</operator> <name>opcode</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>m</name><operator>)</operator><operator>-&gt;</operator><name>rsv</name></name> <operator>=</operator> <name>rsv</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>m</name><operator>)</operator><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>WSLAY_NON_FRAGMENTED</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>m</name><operator>)</operator><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>*</operator><name>m</name><operator>)</operator> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>m</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>WSLAY_FRAME_HDR_SIZ</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>msg_length</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>m</name><operator>)</operator><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msg_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>m</name><operator>)</operator><operator>-&gt;</operator><name>data_length</name></name> <operator>=</operator> <name>msg_length</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>wslay_event_omsg_fragmented_init</name><parameter_list>(
    <parameter><decl><type><name><name>struct</name> <name>wslay_event_omsg</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>opcode</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>rsv</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name><name>union</name> <name>wslay_event_msg_source</name></name></type> <name>source</name></decl></parameter>,
    <parameter><decl><type><name>wslay_event_fragmented_msg_callback</name></type> <name>read_callback</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>m</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>wslay_event_omsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>m</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>WSLAY_ERR_NOMEM</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>m</name><operator>)</operator><operator>-&gt;</operator><name>opcode</name></name> <operator>=</operator> <name>opcode</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>m</name><operator>)</operator><operator>-&gt;</operator><name>rsv</name></name> <operator>=</operator> <name>rsv</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>m</name><operator>)</operator><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>WSLAY_FRAGMENTED</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>m</name><operator>)</operator><operator>-&gt;</operator><name>source</name></name> <operator>=</operator> <name>source</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>m</name><operator>)</operator><operator>-&gt;</operator><name>read_callback</name></name> <operator>=</operator> <name>read_callback</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>wslay_event_omsg_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>wslay_event_omsg</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>wslay_event_flatten_queue</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>wslay_queue</name></name> <modifier>*</modifier></type><name>queue</name></decl></parameter>,
                                          <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <while>while <condition>(<expr><operator>!</operator><call><name>wslay_queue_empty</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>wslay_event_byte_chunk</name></name> <modifier>*</modifier></type><name>chunk</name> <init>= <expr><call><name>wslay_struct_of</name><argument_list>(
          <argument><expr><call><name>wslay_queue_top</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>struct <name>wslay_event_byte_chunk</name></expr></argument>, <argument><expr><name>qe</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>wslay_queue_pop</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>data_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>off</name> <operator>+=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>data_length</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>wslay_event_byte_chunk_free</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>off</name> <operator>&lt;=</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>len</name> <operator>==</operator> <name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>buf</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>wslay_event_is_msg_queueable</name><parameter_list>(<parameter><decl><type><name>wslay_event_context_ptr</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>write_enabled</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>close_status</name></name> <operator>&amp;</operator> <name>WSLAY_CLOSE_QUEUED</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>wslay_event_queue_close</name><parameter_list>(<parameter><decl><type><name>wslay_event_context_ptr</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>status_code</name></decl></parameter>,
                            <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>reason</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>reason_length</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>wslay_event_is_msg_queueable</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>WSLAY_ERR_NO_MORE_MSG</name></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>reason_length</name> <operator>&gt;</operator> <literal type="number">123</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>WSLAY_ERR_INVALID_ARGUMENT</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>msg</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>msg_length</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>wslay_event_msg</name></name></type> <name>arg</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint16_t</name></type> <name>ncode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>status_code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>msg_length</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>ncode</name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>status_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncode</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>reason_length</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>msg</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>reason</name></expr></argument>, <argument><expr><name>reason_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>msg_length</name> <operator>=</operator> <name>reason_length</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name><name>arg</name><operator>.</operator><name>opcode</name></name> <operator>=</operator> <name>WSLAY_CONNECTION_CLOSE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>arg</name><operator>.</operator><name>msg</name></name> <operator>=</operator> <name>msg</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>arg</name><operator>.</operator><name>msg_length</name></name> <operator>=</operator> <name>msg_length</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>wslay_event_queue_msg</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>close_status</name></name> <operator>|=</operator> <name>WSLAY_CLOSE_QUEUED</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>r</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>wslay_event_queue_close_wrapper</name><parameter_list>(<parameter><decl><type><name>wslay_event_context_ptr</name></type> <name>ctx</name></decl></parameter>,
                                           <parameter><decl><type><name>uint16_t</name></type> <name>status_code</name></decl></parameter>,
                                           <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>reason</name></decl></parameter>,
                                           <parameter><decl><type><name>size_t</name></type> <name>reason_length</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>read_enabled</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>wslay_event_queue_close</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>status_code</name></expr></argument>, <argument><expr><name>reason</name></expr></argument>, <argument><expr><name>reason_length</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
      <name>r</name> <operator>!=</operator> <name>WSLAY_ERR_NO_MORE_MSG</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>r</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>wslay_event_verify_rsv_bits</name><parameter_list>(<parameter><decl><type><name>wslay_event_context_ptr</name></type> <name>ctx</name></decl></parameter>,
                                       <parameter><decl><type><name>uint8_t</name></type> <name>rsv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><operator>(</operator><name>rsv</name> <operator>&amp;</operator> <operator>~</operator><name><name>ctx</name><operator>-&gt;</operator><name>allowed_rsv_bits</name></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>wslay_event_queue_msg</name><parameter_list>(<parameter><decl><type><name>wslay_event_context_ptr</name></type> <name>ctx</name></decl></parameter>,
                          <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>wslay_event_msg</name></name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>wslay_event_queue_msg_ex</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>WSLAY_RSV_NONE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>wslay_event_queue_msg_ex</name><parameter_list>(<parameter><decl><type><name>wslay_event_context_ptr</name></type> <name>ctx</name></decl></parameter>,
                             <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>wslay_event_msg</name></name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>rsv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>wslay_event_omsg</name></name> <modifier>*</modifier></type><name>omsg</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>wslay_event_is_msg_queueable</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>WSLAY_ERR_NO_MORE_MSG</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* RSV1 is not allowed for control frames */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>wslay_is_ctrl_frame</name><argument_list>(<argument><expr><name><name>arg</name><operator>-&gt;</operator><name>opcode</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
       <operator>(</operator><name><name>arg</name><operator>-&gt;</operator><name>msg_length</name></name> <operator>&gt;</operator> <literal type="number">125</literal> <operator>||</operator> <call><name>wslay_get_rsv1</name><argument_list>(<argument><expr><name>rsv</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator> <operator>||</operator>
      <operator>!</operator><call><name>wslay_event_verify_rsv_bits</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rsv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>WSLAY_ERR_INVALID_ARGUMENT</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>wslay_event_omsg_non_fragmented_init</name><argument_list>(
           <argument><expr><operator>&amp;</operator><name>omsg</name></expr></argument>, <argument><expr><name><name>arg</name><operator>-&gt;</operator><name>opcode</name></name></expr></argument>, <argument><expr><name>rsv</name></expr></argument>, <argument><expr><name><name>arg</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><name><name>arg</name><operator>-&gt;</operator><name>msg_length</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>r</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>wslay_is_ctrl_frame</name><argument_list>(<argument><expr><name><name>arg</name><operator>-&gt;</operator><name>opcode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>wslay_queue_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>send_ctrl_queue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>omsg</name><operator>-&gt;</operator><name>qe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>wslay_queue_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>send_queue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>omsg</name><operator>-&gt;</operator><name>qe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><operator>++</operator><name><name>ctx</name><operator>-&gt;</operator><name>queued_msg_count</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>queued_msg_length</name></name> <operator>+=</operator> <name><name>arg</name><operator>-&gt;</operator><name>msg_length</name></name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>wslay_event_queue_fragmented_msg</name><parameter_list>(
    <parameter><decl><type><name>wslay_event_context_ptr</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>wslay_event_fragmented_msg</name></name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>wslay_event_queue_fragmented_msg_ex</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>WSLAY_RSV_NONE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>wslay_event_queue_fragmented_msg_ex</name><parameter_list>(
    <parameter><decl><type><name>wslay_event_context_ptr</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>wslay_event_fragmented_msg</name></name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,
    <parameter><decl><type><name>uint8_t</name></type> <name>rsv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>wslay_event_omsg</name></name> <modifier>*</modifier></type><name>omsg</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>wslay_event_is_msg_queueable</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>WSLAY_ERR_NO_MORE_MSG</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>wslay_is_ctrl_frame</name><argument_list>(<argument><expr><name><name>arg</name><operator>-&gt;</operator><name>opcode</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
      <operator>!</operator><call><name>wslay_event_verify_rsv_bits</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rsv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>WSLAY_ERR_INVALID_ARGUMENT</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>wslay_event_omsg_fragmented_init</name><argument_list>(
           <argument><expr><operator>&amp;</operator><name>omsg</name></expr></argument>, <argument><expr><name><name>arg</name><operator>-&gt;</operator><name>opcode</name></name></expr></argument>, <argument><expr><name>rsv</name></expr></argument>, <argument><expr><name><name>arg</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name><name>arg</name><operator>-&gt;</operator><name>read_callback</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>r</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>wslay_queue_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>send_queue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>omsg</name><operator>-&gt;</operator><name>qe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>++</operator><name><name>ctx</name><operator>-&gt;</operator><name>queued_msg_count</name></name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>wslay_event_config_set_callbacks</name><parameter_list>(
    <parameter><decl><type><name>wslay_event_context_ptr</name></type> <name>ctx</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>wslay_event_callbacks</name></name> <modifier>*</modifier></type><name>callbacks</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>callbacks</name></name> <operator>=</operator> <operator>*</operator><name>callbacks</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>wslay_event_context_init</name><parameter_list>(<parameter><decl><type><name>wslay_event_context_ptr</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                         <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>wslay_event_callbacks</name></name> <modifier>*</modifier></type><name>callbacks</name></decl></parameter>,
                         <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>wslay_frame_callbacks</name></name></type> <name>frame_callbacks</name> <init>= <expr><block>{
      <expr><name>wslay_event_frame_send_callback</name></expr>, <expr><name>wslay_event_frame_recv_callback</name></expr>,
      <expr><name>wslay_event_frame_genmask_callback</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>ctx</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>wslay_event_context</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>ctx</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>WSLAY_ERR_NOMEM</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>wslay_event_config_set_callbacks</name><argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><name>callbacks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>ctx</name><operator>)</operator><operator>-&gt;</operator><name>user_data</name></name> <operator>=</operator> <name>user_data</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>ctx</name><operator>)</operator><operator>-&gt;</operator><name><name>frame_user_data</name><operator>.</operator><name>ctx</name></name></name> <operator>=</operator> <operator>*</operator><name>ctx</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>ctx</name><operator>)</operator><operator>-&gt;</operator><name><name>frame_user_data</name><operator>.</operator><name>user_data</name></name></name> <operator>=</operator> <name>user_data</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>wslay_frame_context_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>ctx</name><operator>)</operator><operator>-&gt;</operator><name>frame_ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frame_callbacks</name></expr></argument>,
                                    <argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>ctx</name><operator>)</operator><operator>-&gt;</operator><name>frame_user_data</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>wslay_event_context_free</name><argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>r</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>ctx</name><operator>)</operator><operator>-&gt;</operator><name>read_enabled</name></name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>ctx</name><operator>)</operator><operator>-&gt;</operator><name>write_enabled</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>wslay_queue_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>ctx</name><operator>)</operator><operator>-&gt;</operator><name>send_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>wslay_queue_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>ctx</name><operator>)</operator><operator>-&gt;</operator><name>send_ctrl_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>ctx</name><operator>)</operator><operator>-&gt;</operator><name>queued_msg_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>ctx</name><operator>)</operator><operator>-&gt;</operator><name>queued_msg_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>wslay_queue_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>ctx</name><operator>)</operator><operator>-&gt;</operator><name>imsgs</name></name><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>chunks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>wslay_event_imsg_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>ctx</name><operator>)</operator><operator>-&gt;</operator><name>imsgs</name></name><index>[<expr><name>i</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>ctx</name><operator>)</operator><operator>-&gt;</operator><name>imsg</name></name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>ctx</name><operator>)</operator><operator>-&gt;</operator><name>imsgs</name></name><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</expr_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>ctx</name><operator>)</operator><operator>-&gt;</operator><name>obuf</name></name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>ctx</name><operator>)</operator><operator>-&gt;</operator><name>_obuf</name></name> <operator>+</operator> <name>WSLAY_FRAME_HDR_SIZ</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>ctx</name><operator>)</operator><operator>-&gt;</operator><name>obufmark</name></name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>ctx</name><operator>)</operator><operator>-&gt;</operator><name>obuflimit</name></name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>ctx</name><operator>)</operator><operator>-&gt;</operator><name>obuf</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>ctx</name><operator>)</operator><operator>-&gt;</operator><name>status_code_sent</name></name> <operator>=</operator> <name>WSLAY_CODE_ABNORMAL_CLOSURE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>ctx</name><operator>)</operator><operator>-&gt;</operator><name>status_code_recv</name></name> <operator>=</operator> <name>WSLAY_CODE_ABNORMAL_CLOSURE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>ctx</name><operator>)</operator><operator>-&gt;</operator><name>max_recv_msg_length</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">31</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>wslay_event_context_server_init</name><parameter_list>(
    <parameter><decl><type><name>wslay_event_context_ptr</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>wslay_event_callbacks</name></name> <modifier>*</modifier></type><name>callbacks</name></decl></parameter>,
    <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>wslay_event_context_init</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>callbacks</name></expr></argument>, <argument><expr><name>user_data</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>r</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>ctx</name><operator>)</operator><operator>-&gt;</operator><name>server</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>wslay_event_context_client_init</name><parameter_list>(
    <parameter><decl><type><name>wslay_event_context_ptr</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>wslay_event_callbacks</name></name> <modifier>*</modifier></type><name>callbacks</name></decl></parameter>,
    <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>wslay_event_context_init</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>callbacks</name></expr></argument>, <argument><expr><name>user_data</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>r</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>ctx</name><operator>)</operator><operator>-&gt;</operator><name>server</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>wslay_event_context_free</name><parameter_list>(<parameter><decl><type><name>wslay_event_context_ptr</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>wslay_event_imsg_chunks_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>imsgs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>wslay_queue_deinit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>imsgs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>chunks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <while>while <condition>(<expr><operator>!</operator><call><name>wslay_queue_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>send_queue</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>wslay_event_omsg</name></name> <modifier>*</modifier></type><name>omsg</name> <init>= <expr><call><name>wslay_struct_of</name><argument_list>(
        <argument><expr><call><name>wslay_queue_top</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>send_queue</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>struct <name>wslay_event_omsg</name></expr></argument>, <argument><expr><name>qe</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>wslay_queue_pop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>send_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>wslay_event_omsg_free</name><argument_list>(<argument><expr><name>omsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>wslay_queue_deinit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>send_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <while>while <condition>(<expr><operator>!</operator><call><name>wslay_queue_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>send_ctrl_queue</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>wslay_event_omsg</name></name> <modifier>*</modifier></type><name>omsg</name> <init>= <expr><call><name>wslay_struct_of</name><argument_list>(
        <argument><expr><call><name>wslay_queue_top</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>send_ctrl_queue</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>struct <name>wslay_event_omsg</name></expr></argument>, <argument><expr><name>qe</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>wslay_queue_pop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>send_ctrl_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>wslay_event_omsg_free</name><argument_list>(<argument><expr><name>omsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>wslay_queue_deinit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>send_ctrl_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>wslay_frame_context_free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>frame_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>wslay_event_omsg_free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>omsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>wslay_event_call_on_frame_recv_start_callback</name><parameter_list>(
    <parameter><decl><type><name>wslay_event_context_ptr</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>wslay_frame_iocb</name></name> <modifier>*</modifier></type><name>iocb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>on_frame_recv_start_callback</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>wslay_event_on_frame_recv_start_arg</name></name></type> <name>arg</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>arg</name><operator>.</operator><name>fin</name></name> <operator>=</operator> <name><name>iocb</name><operator>-&gt;</operator><name>fin</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>arg</name><operator>.</operator><name>rsv</name></name> <operator>=</operator> <name><name>iocb</name><operator>-&gt;</operator><name>rsv</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>arg</name><operator>.</operator><name>opcode</name></name> <operator>=</operator> <name><name>iocb</name><operator>-&gt;</operator><name>opcode</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>arg</name><operator>.</operator><name>payload_length</name></name> <operator>=</operator> <name><name>iocb</name><operator>-&gt;</operator><name>payload_length</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>on_frame_recv_start_callback</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>wslay_event_call_on_frame_recv_chunk_callback</name><parameter_list>(
    <parameter><decl><type><name>wslay_event_context_ptr</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>wslay_frame_iocb</name></name> <modifier>*</modifier></type><name>iocb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>on_frame_recv_chunk_callback</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>wslay_event_on_frame_recv_chunk_arg</name></name></type> <name>arg</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>arg</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name><name>iocb</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>arg</name><operator>.</operator><name>data_length</name></name> <operator>=</operator> <name><name>iocb</name><operator>-&gt;</operator><name>data_length</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>on_frame_recv_chunk_callback</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>wslay_event_call_on_frame_recv_end_callback</name><parameter_list>(<parameter><decl><type><name>wslay_event_context_ptr</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>on_frame_recv_end_callback</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>on_frame_recv_end_callback</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>wslay_event_is_valid_status_code</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>status_code</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><literal type="number">1000</literal> <operator>&lt;=</operator> <name>status_code</name> <operator>&amp;&amp;</operator> <name>status_code</name> <operator>&lt;=</operator> <literal type="number">1011</literal> <operator>&amp;&amp;</operator> <name>status_code</name> <operator>!=</operator> <literal type="number">1004</literal> <operator>&amp;&amp;</operator>
          <name>status_code</name> <operator>!=</operator> <literal type="number">1005</literal> <operator>&amp;&amp;</operator> <name>status_code</name> <operator>!=</operator> <literal type="number">1006</literal><operator>)</operator> <operator>||</operator>
         <operator>(</operator><literal type="number">3000</literal> <operator>&lt;=</operator> <name>status_code</name> <operator>&amp;&amp;</operator> <name>status_code</name> <operator>&lt;=</operator> <literal type="number">4999</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>wslay_event_config_get_no_buffering</name><parameter_list>(<parameter><decl><type><name>wslay_event_context_ptr</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>config</name></name> <operator>&amp;</operator> <name>WSLAY_CONFIG_NO_BUFFERING</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>wslay_event_recv</name><parameter_list>(<parameter><decl><type><name>wslay_event_context_ptr</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>wslay_frame_iocb</name></name></type> <name>iocb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ssize_t</name></type> <name>r</name></decl>;</decl_stmt>
  <while>while <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>read_enabled</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iocb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>iocb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>wslay_frame_recv</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>frame_ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iocb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>new_frame</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <comment type="block">/* RSV1 is not allowed on control and continuation frames */</comment>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>wslay_event_verify_rsv_bits</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>iocb</name><operator>.</operator><name>rsv</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
          <operator>(</operator><call><name>wslay_get_rsv1</name><argument_list>(<argument><expr><name><name>iocb</name><operator>.</operator><name>rsv</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
           <operator>(</operator><call><name>wslay_is_ctrl_frame</name><argument_list>(<argument><expr><name><name>iocb</name><operator>.</operator><name>opcode</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
            <name><name>iocb</name><operator>.</operator><name>opcode</name></name> <operator>==</operator> <name>WSLAY_CONTINUATION_FRAME</name><operator>)</operator><operator>)</operator> <operator>||</operator>
          <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>server</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>iocb</name><operator>.</operator><name>mask</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>server</name></name> <operator>&amp;&amp;</operator> <name><name>iocb</name><operator>.</operator><name>mask</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>wslay_event_queue_close_wrapper</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>WSLAY_CODE_PROTOCOL_ERROR</name></expr></argument>,
                                                 <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>r</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>imsg</name><operator>-&gt;</operator><name>opcode</name></name> <operator>==</operator> <literal type="number">0xffu</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>iocb</name><operator>.</operator><name>opcode</name></name> <operator>==</operator> <name>WSLAY_TEXT_FRAME</name> <operator>||</operator>
            <name><name>iocb</name><operator>.</operator><name>opcode</name></name> <operator>==</operator> <name>WSLAY_BINARY_FRAME</name> <operator>||</operator>
            <name><name>iocb</name><operator>.</operator><name>opcode</name></name> <operator>==</operator> <name>WSLAY_CONNECTION_CLOSE</name> <operator>||</operator>
            <name><name>iocb</name><operator>.</operator><name>opcode</name></name> <operator>==</operator> <name>WSLAY_PING</name> <operator>||</operator> <name><name>iocb</name><operator>.</operator><name>opcode</name></name> <operator>==</operator> <name>WSLAY_PONG</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>wslay_event_imsg_set</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>imsg</name></name></expr></argument>, <argument><expr><name><name>iocb</name><operator>.</operator><name>fin</name></name></expr></argument>, <argument><expr><name><name>iocb</name><operator>.</operator><name>rsv</name></name></expr></argument>, <argument><expr><name><name>iocb</name><operator>.</operator><name>opcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>new_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>wslay_event_queue_close_wrapper</name><argument_list>(
                   <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>WSLAY_CODE_PROTOCOL_ERROR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>r</name></expr>;</return>
          </block_content>}</block></if></if_stmt>
          <break>break;</break>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>ipayloadlen</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ipayloadoff</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>iocb</name><operator>.</operator><name>opcode</name></name> <operator>==</operator> <name>WSLAY_CONTINUATION_FRAME</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>imsg</name><operator>-&gt;</operator><name>fin</name></name> <operator>=</operator> <name><name>iocb</name><operator>.</operator><name>fin</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>iocb</name><operator>.</operator><name>opcode</name></name> <operator>==</operator> <name>WSLAY_CONNECTION_CLOSE</name> <operator>||</operator>
                   <name><name>iocb</name><operator>.</operator><name>opcode</name></name> <operator>==</operator> <name>WSLAY_PING</name> <operator>||</operator> <name><name>iocb</name><operator>.</operator><name>opcode</name></name> <operator>==</operator> <name>WSLAY_PONG</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>imsg</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>imsgs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>wslay_event_imsg_set</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>imsg</name></name></expr></argument>, <argument><expr><name><name>iocb</name><operator>.</operator><name>fin</name></name></expr></argument>, <argument><expr><name><name>iocb</name><operator>.</operator><name>rsv</name></name></expr></argument>, <argument><expr><name><name>iocb</name><operator>.</operator><name>opcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>wslay_event_queue_close_wrapper</name><argument_list>(
                   <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>WSLAY_CODE_PROTOCOL_ERROR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>r</name></expr>;</return>
          </block_content>}</block></if></if_stmt>
          <break>break;</break>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name>new_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>new_frame</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>imsg</name><operator>-&gt;</operator><name>msg_length</name></name> <operator>+</operator> <name><name>iocb</name><operator>.</operator><name>payload_length</name></name> <operator>&gt;</operator>
            <name><name>ctx</name><operator>-&gt;</operator><name>max_recv_msg_length</name></name></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>wslay_event_queue_close_wrapper</name><argument_list>(
                   <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>WSLAY_CODE_MESSAGE_TOO_BIG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>r</name></expr>;</return>
          </block_content>}</block></if></if_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ipayloadlen</name></name> <operator>=</operator> <name><name>iocb</name><operator>.</operator><name>payload_length</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>wslay_event_call_on_frame_recv_start_callback</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iocb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>wslay_event_config_get_no_buffering</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call> <operator>||</operator>
            <call><name>wslay_is_ctrl_frame</name><argument_list>(<argument><expr><name><name>iocb</name><operator>.</operator><name>opcode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>wslay_event_imsg_append_chunk</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>imsg</name></name></expr></argument>,
                                                 <argument><expr><name><name>iocb</name><operator>.</operator><name>payload_length</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>read_enabled</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>r</name></expr>;</return>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <comment type="block">/* If RSV1 bit is set then it is too early for utf-8 validation */</comment>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>wslay_get_rsv1</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>imsg</name><operator>-&gt;</operator><name>rsv</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
           <name><name>ctx</name><operator>-&gt;</operator><name>imsg</name><operator>-&gt;</operator><name>opcode</name></name> <operator>==</operator> <name>WSLAY_TEXT_FRAME</name><operator>)</operator> <operator>||</operator>
          <name><name>ctx</name><operator>-&gt;</operator><name>imsg</name><operator>-&gt;</operator><name>opcode</name></name> <operator>==</operator> <name>WSLAY_CONNECTION_CLOSE</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>imsg</name><operator>-&gt;</operator><name>opcode</name></name> <operator>==</operator> <name>WSLAY_CONNECTION_CLOSE</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>iocb</name><operator>.</operator><name>data_length</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
          <decl_stmt><decl><type><name>uint32_t</name></type> <name>codep</name></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><call><name>decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>imsg</name><operator>-&gt;</operator><name>utf8state</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>codep</name></expr></argument>, <argument><expr><name><name>iocb</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator>
              <name>UTF8_REJECT</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>wslay_event_queue_close_wrapper</name><argument_list>(
                     <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>WSLAY_CODE_INVALID_FRAME_PAYLOAD_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator>
                <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
              <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>r</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>imsg</name><operator>-&gt;</operator><name>utf8state</name></name> <operator>==</operator> <name>UTF8_REJECT</name></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>wslay_event_call_on_frame_recv_chunk_callback</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iocb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>iocb</name><operator>.</operator><name>data_length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>wslay_event_config_get_no_buffering</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call> <operator>||</operator>
            <call><name>wslay_is_ctrl_frame</name><argument_list>(<argument><expr><name><name>iocb</name><operator>.</operator><name>opcode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name><name>struct</name> <name>wslay_event_byte_chunk</name></name> <modifier>*</modifier></type><name>chunk</name></decl>;</decl_stmt>
          <expr_stmt><expr><name>chunk</name> <operator>=</operator> <call><name>wslay_struct_of</name><argument_list>(<argument><expr><call><name>wslay_queue_tail</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>imsg</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                  <argument><expr>struct <name>wslay_event_byte_chunk</name></expr></argument>, <argument><expr><name>qe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>wslay_event_byte_chunk_copy</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ipayloadoff</name></name></expr></argument>, <argument><expr><name><name>iocb</name><operator>.</operator><name>data</name></name></expr></argument>,
                                      <argument><expr><name><name>iocb</name><operator>.</operator><name>data_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ipayloadoff</name></name> <operator>+=</operator> <name><name>iocb</name><operator>.</operator><name>data_length</name></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>ipayloadoff</name></name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ipayloadlen</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>imsg</name><operator>-&gt;</operator><name>fin</name></name> <operator>&amp;&amp;</operator>
            <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>imsg</name><operator>-&gt;</operator><name>opcode</name></name> <operator>==</operator> <name>WSLAY_TEXT_FRAME</name> <operator>||</operator>
             <name><name>ctx</name><operator>-&gt;</operator><name>imsg</name><operator>-&gt;</operator><name>opcode</name></name> <operator>==</operator> <name>WSLAY_CONNECTION_CLOSE</name><operator>)</operator> <operator>&amp;&amp;</operator>
            <name><name>ctx</name><operator>-&gt;</operator><name>imsg</name><operator>-&gt;</operator><name>utf8state</name></name> <operator>!=</operator> <name>UTF8_ACCEPT</name></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>wslay_event_queue_close_wrapper</name><argument_list>(
                   <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>WSLAY_CODE_INVALID_FRAME_PAYLOAD_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>r</name></expr>;</return>
          </block_content>}</block></if></if_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>wslay_event_call_on_frame_recv_end_callback</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>imsg</name><operator>-&gt;</operator><name>fin</name></name></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>on_msg_recv_callback</name></name> <operator>||</operator>
              <name><name>ctx</name><operator>-&gt;</operator><name>imsg</name><operator>-&gt;</operator><name>opcode</name></name> <operator>==</operator> <name>WSLAY_CONNECTION_CLOSE</name> <operator>||</operator>
              <name><name>ctx</name><operator>-&gt;</operator><name>imsg</name><operator>-&gt;</operator><name>opcode</name></name> <operator>==</operator> <name>WSLAY_PING</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>struct</name> <name>wslay_event_on_msg_recv_arg</name></name></type> <name>arg</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>uint16_t</name></type> <name>status_code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>size_t</name></type> <name>msg_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>wslay_event_config_get_no_buffering</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call> <operator>||</operator>
                <call><name>wslay_is_ctrl_frame</name><argument_list>(<argument><expr><name><name>iocb</name><operator>.</operator><name>opcode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>wslay_event_flatten_queue</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>imsg</name><operator>-&gt;</operator><name>chunks</name></name></expr></argument>,
                                              <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>imsg</name><operator>-&gt;</operator><name>msg_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>imsg</name><operator>-&gt;</operator><name>msg_length</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>msg</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>read_enabled</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <return>return <expr><name>WSLAY_ERR_NOMEM</name></expr>;</return>
              </block_content>}</block></if></if_stmt>
              <expr_stmt><expr><name>msg_length</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>imsg</name><operator>-&gt;</operator><name>msg_length</name></name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>imsg</name><operator>-&gt;</operator><name>opcode</name></name> <operator>==</operator> <name>WSLAY_CONNECTION_CLOSE</name></expr>)</condition> <block>{<block_content>
              <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>reason</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><name>size_t</name></type> <name>reason_length</name></decl>;</decl_stmt>
              <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>imsg</name><operator>-&gt;</operator><name>msg_length</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status_code</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>status_code</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name>status_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>wslay_event_is_valid_status_code</name><argument_list>(<argument><expr><name>status_code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>wslay_event_queue_close_wrapper</name><argument_list>(
                           <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>WSLAY_CODE_PROTOCOL_ERROR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>r</name></expr>;</return>
                  </block_content>}</block></if></if_stmt>
                  <break>break;</break>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>reason</name> <operator>=</operator> <name>msg</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>reason_length</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>imsg</name><operator>-&gt;</operator><name>msg_length</name></name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
              </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>reason</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>reason_length</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
              </block_content>}</block></else></if_stmt>
              <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>close_status</name></name> <operator>|=</operator> <name>WSLAY_CLOSE_RECEIVED</name></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>status_code_recv</name></name> <operator>=</operator>
                  <ternary><condition><expr><name>status_code</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>WSLAY_CODE_NO_STATUS_RCVD</name></expr> </then><else>: <expr><name>status_code</name></expr></else></ternary></expr>;</expr_stmt>
              <if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>wslay_event_queue_close_wrapper</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>status_code</name></expr></argument>, <argument><expr><name>reason</name></expr></argument>,
                                                       <argument><expr><name>reason_length</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>r</name></expr>;</return>
              </block_content>}</block></if></if_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>imsg</name><operator>-&gt;</operator><name>opcode</name></name> <operator>==</operator> <name>WSLAY_PING</name></expr>)</condition> <block>{<block_content>
              <decl_stmt><decl><type><name><name>struct</name> <name>wslay_event_msg</name></name></type> <name>pong_arg</name></decl>;</decl_stmt>
              <expr_stmt><expr><name><name>pong_arg</name><operator>.</operator><name>opcode</name></name> <operator>=</operator> <name>WSLAY_PONG</name></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>pong_arg</name><operator>.</operator><name>msg</name></name> <operator>=</operator> <name>msg</name></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>pong_arg</name><operator>.</operator><name>msg_length</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>imsg</name><operator>-&gt;</operator><name>msg_length</name></name></expr>;</expr_stmt>
              <if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>wslay_event_queue_msg</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pong_arg</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
                  <name>r</name> <operator>!=</operator> <name>WSLAY_ERR_NO_MORE_MSG</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>read_enabled</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>r</name></expr>;</return>
              </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>on_msg_recv_callback</name></name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name><name>arg</name><operator>.</operator><name>rsv</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>imsg</name><operator>-&gt;</operator><name>rsv</name></name></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>arg</name><operator>.</operator><name>opcode</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>imsg</name><operator>-&gt;</operator><name>opcode</name></name></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>arg</name><operator>.</operator><name>msg</name></name> <operator>=</operator> <name>msg</name></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>arg</name><operator>.</operator><name>msg_length</name></name> <operator>=</operator> <name>msg_length</name></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>arg</name><operator>.</operator><name>status_code</name></name> <operator>=</operator> <name>status_code</name></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>callbacks</name><operator>.</operator><name>on_msg_recv_callback</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><call><name>wslay_event_imsg_reset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>imsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>imsg</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>imsgs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>imsg</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>imsgs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ipayloadlen</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ipayloadoff</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>WSLAY_ERR_WANT_READ</name> <operator>||</operator>
          <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>error</name></name> <operator>!=</operator> <name>WSLAY_ERR_WOULDBLOCK</name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>error</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>wslay_event_queue_close_wrapper</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>r</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>WSLAY_ERR_CALLBACK_FAILURE</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>wslay_event_on_non_fragmented_msg_popped</name><parameter_list>(<parameter><decl><type><name>wslay_event_context_ptr</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>omsg</name><operator>-&gt;</operator><name>fin</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>opayloadlen</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>omsg</name><operator>-&gt;</operator><name>data_length</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>opayloadoff</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>wslay_event_omsg</name></name> <modifier>*</modifier></type>
<name>wslay_event_send_ctrl_queue_pop</name><parameter_list>(<parameter><decl><type><name>wslay_event_context_ptr</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="block">/*
   * If Close control frame is queued, we don't send any control frame
   * other than Close.
   */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>close_status</name></name> <operator>&amp;</operator> <name>WSLAY_CLOSE_QUEUED</name></expr>)</condition> <block>{<block_content>
    <while>while <condition>(<expr><operator>!</operator><call><name>wslay_queue_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>send_ctrl_queue</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>wslay_event_omsg</name></name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>wslay_struct_of</name><argument_list>(
          <argument><expr><call><name>wslay_queue_top</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>send_ctrl_queue</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>struct <name>wslay_event_omsg</name></expr></argument>, <argument><expr><name>qe</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>wslay_queue_pop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>send_ctrl_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>opcode</name></name> <operator>==</operator> <name>WSLAY_CONNECTION_CLOSE</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>msg</name></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>wslay_event_omsg_free</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>wslay_event_omsg</name></name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><call><name>wslay_struct_of</name><argument_list>(
        <argument><expr><call><name>wslay_queue_top</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>send_ctrl_queue</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>struct <name>wslay_event_omsg</name></expr></argument>, <argument><expr><name>qe</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>wslay_queue_pop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>send_ctrl_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>msg</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>wslay_event_send</name><parameter_list>(<parameter><decl><type><name>wslay_event_context_ptr</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>wslay_frame_iocb</name></name></type> <name>iocb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ssize_t</name></type> <name>r</name></decl>;</decl_stmt>
  <while>while <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>write_enabled</name></name> <operator>&amp;&amp;</operator>
         <operator>(</operator><operator>!</operator><call><name>wslay_queue_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>send_queue</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
          <operator>!</operator><call><name>wslay_queue_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>send_ctrl_queue</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>omsg</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>omsg</name></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>wslay_queue_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>send_ctrl_queue</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>omsg</name></name> <operator>=</operator> <call><name>wslay_struct_of</name><argument_list>(<argument><expr><call><name>wslay_queue_top</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>send_queue</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr>struct <name>wslay_event_omsg</name></expr></argument>, <argument><expr><name>qe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>wslay_queue_pop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>send_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>omsg</name></name> <operator>=</operator> <call><name>wslay_event_send_ctrl_queue_pop</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>omsg</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>omsg</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>WSLAY_NON_FRAGMENTED</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>wslay_event_on_non_fragmented_msg_popped</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>wslay_is_ctrl_frame</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>omsg</name><operator>-&gt;</operator><name>opcode</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
               <name><name>ctx</name><operator>-&gt;</operator><name>frame_ctx</name><operator>-&gt;</operator><name>ostate</name></name> <operator>==</operator> <name>PREP_HEADER</name> <operator>&amp;&amp;</operator>
               <operator>!</operator><call><name>wslay_queue_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>send_ctrl_queue</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>wslay_queue_push_front</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>send_queue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>omsg</name><operator>-&gt;</operator><name>qe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>omsg</name></name> <operator>=</operator> <call><name>wslay_event_send_ctrl_queue_pop</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>omsg</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <comment type="block">/* ctrl message has WSLAY_NON_FRAGMENTED */</comment>
      <expr_stmt><expr><call><name>wslay_event_on_non_fragmented_msg_popped</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>omsg</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>WSLAY_NON_FRAGMENTED</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iocb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>iocb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>iocb</name><operator>.</operator><name>fin</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>iocb</name><operator>.</operator><name>opcode</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>omsg</name><operator>-&gt;</operator><name>opcode</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>iocb</name><operator>.</operator><name>rsv</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>omsg</name><operator>-&gt;</operator><name>rsv</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>iocb</name><operator>.</operator><name>mask</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>server</name></name> <operator>^</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>iocb</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>omsg</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>iocb</name><operator>.</operator><name>data_length</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>opayloadlen</name></name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>opayloadoff</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>iocb</name><operator>.</operator><name>data</name></name> <operator>+=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>opayloadoff</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>iocb</name><operator>.</operator><name>data_length</name></name> <operator>-=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>opayloadoff</name></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>iocb</name><operator>.</operator><name>payload_length</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>opayloadlen</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>wslay_frame_send</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>frame_ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iocb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>opayloadoff</name></name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>r</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>opayloadoff</name></name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>opayloadlen</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><operator>--</operator><name><name>ctx</name><operator>-&gt;</operator><name>queued_msg_count</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>queued_msg_length</name></name> <operator>-=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>omsg</name><operator>-&gt;</operator><name>data_length</name></name></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>omsg</name><operator>-&gt;</operator><name>opcode</name></name> <operator>==</operator> <name>WSLAY_CONNECTION_CLOSE</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>uint16_t</name></type> <name>status_code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>write_enabled</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>close_status</name></name> <operator>|=</operator> <name>WSLAY_CLOSE_SENT</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>omsg</name><operator>-&gt;</operator><name>data_length</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status_code</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>omsg</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>status_code</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name>status_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>status_code_sent</name></name> <operator>=</operator>
                <ternary><condition><expr><name>status_code</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>WSLAY_CODE_NO_STATUS_RCVD</name></expr> </then><else>: <expr><name>status_code</name></expr></else></ternary></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><call><name>wslay_event_omsg_free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>omsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>omsg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <break>break;</break>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>WSLAY_ERR_WANT_WRITE</name> <operator>||</operator>
            <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>error</name></name> <operator>!=</operator> <name>WSLAY_ERR_WOULDBLOCK</name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>error</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>write_enabled</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          <return>return <expr><name>WSLAY_ERR_CALLBACK_FAILURE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>omsg</name><operator>-&gt;</operator><name>fin</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>obuflimit</name></name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>obufmark</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>eof</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>omsg</name><operator>-&gt;</operator><name>read_callback</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>obuf</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>_obuf</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>WSLAY_FRAME_HDR_SIZ</name></expr></argument>,
                                     <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>omsg</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eof</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>eof</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <break>break;</break>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>write_enabled</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          <return>return <expr><name>WSLAY_ERR_CALLBACK_FAILURE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>obuflimit</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>obuf</name></name> <operator>+</operator> <name>r</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>eof</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>omsg</name><operator>-&gt;</operator><name>fin</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>opayloadlen</name></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>r</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>opayloadoff</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iocb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>iocb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>iocb</name><operator>.</operator><name>fin</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>omsg</name><operator>-&gt;</operator><name>fin</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>iocb</name><operator>.</operator><name>opcode</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>omsg</name><operator>-&gt;</operator><name>opcode</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>iocb</name><operator>.</operator><name>rsv</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>omsg</name><operator>-&gt;</operator><name>rsv</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>iocb</name><operator>.</operator><name>mask</name></name> <operator>=</operator> <ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>server</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>iocb</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>obufmark</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>iocb</name><operator>.</operator><name>data_length</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>obuflimit</name></name> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>obufmark</name></name><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>iocb</name><operator>.</operator><name>payload_length</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>opayloadlen</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>wslay_frame_send</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>frame_ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iocb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>obufmark</name></name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>obufmark</name></name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>obuflimit</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>obufmark</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>obuflimit</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>obuf</name></name></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>omsg</name><operator>-&gt;</operator><name>fin</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>--</operator><name><name>ctx</name><operator>-&gt;</operator><name>queued_msg_count</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>wslay_event_omsg_free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>omsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>omsg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>omsg</name><operator>-&gt;</operator><name>opcode</name></name> <operator>=</operator> <name>WSLAY_CONTINUATION_FRAME</name></expr>;</expr_stmt>
            <comment type="block">/* RSV1 is not set on continuation frames */</comment>
            <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>omsg</name><operator>-&gt;</operator><name>rsv</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>omsg</name><operator>-&gt;</operator><name>rsv</name></name> <operator>&amp;</operator> <operator>~</operator><name>WSLAY_RSV1_BIT</name><operator>)</operator></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <break>break;</break>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>WSLAY_ERR_WANT_WRITE</name> <operator>||</operator>
            <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>error</name></name> <operator>!=</operator> <name>WSLAY_ERR_WOULDBLOCK</name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>error</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>write_enabled</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          <return>return <expr><name>WSLAY_ERR_CALLBACK_FAILURE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>wslay_event_set_error</name><parameter_list>(<parameter><decl><type><name>wslay_event_context_ptr</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>wslay_event_want_read</name><parameter_list>(<parameter><decl><type><name>wslay_event_context_ptr</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>read_enabled</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>wslay_event_want_write</name><parameter_list>(<parameter><decl><type><name>wslay_event_context_ptr</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>write_enabled</name></name> <operator>&amp;&amp;</operator>
         <operator>(</operator><operator>!</operator><call><name>wslay_queue_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>send_queue</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
          <operator>!</operator><call><name>wslay_queue_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>send_ctrl_queue</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>omsg</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>wslay_event_shutdown_read</name><parameter_list>(<parameter><decl><type><name>wslay_event_context_ptr</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>read_enabled</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>wslay_event_shutdown_write</name><parameter_list>(<parameter><decl><type><name>wslay_event_context_ptr</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>write_enabled</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>wslay_event_get_read_enabled</name><parameter_list>(<parameter><decl><type><name>wslay_event_context_ptr</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name>ctx</name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>read_enabled</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>wslay_event_get_write_enabled</name><parameter_list>(<parameter><decl><type><name>wslay_event_context_ptr</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name>ctx</name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>write_enabled</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>wslay_event_get_close_received</name><parameter_list>(<parameter><decl><type><name>wslay_event_context_ptr</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name>ctx</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>close_status</name></name> <operator>&amp;</operator> <name>WSLAY_CLOSE_RECEIVED</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>wslay_event_get_close_sent</name><parameter_list>(<parameter><decl><type><name>wslay_event_context_ptr</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name>ctx</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>close_status</name></name> <operator>&amp;</operator> <name>WSLAY_CLOSE_SENT</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>wslay_event_config_set_allowed_rsv_bits</name><parameter_list>(<parameter><decl><type><name>wslay_event_context_ptr</name></type> <name>ctx</name></decl></parameter>,
                                             <parameter><decl><type><name>uint8_t</name></type> <name>rsv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="block">/* We currently only allow WSLAY_RSV1_BIT or WSLAY_RSV_NONE */</comment>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>allowed_rsv_bits</name></name> <operator>=</operator> <name>rsv</name> <operator>&amp;</operator> <name>WSLAY_RSV1_BIT</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>wslay_event_config_set_no_buffering</name><parameter_list>(<parameter><decl><type><name>wslay_event_context_ptr</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>config</name></name> <operator>|=</operator> <name>WSLAY_CONFIG_NO_BUFFERING</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>config</name></name> <operator>&amp;=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>~</operator><name>WSLAY_CONFIG_NO_BUFFERING</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>wslay_event_config_set_max_recv_msg_length</name><parameter_list>(<parameter><decl><type><name>wslay_event_context_ptr</name></type> <name>ctx</name></decl></parameter>,
                                                <parameter><decl><type><name>uint64_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>max_recv_msg_length</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>uint16_t</name></type> <name>wslay_event_get_status_code_received</name><parameter_list>(<parameter><decl><type><name>wslay_event_context_ptr</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>status_code_recv</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint16_t</name></type> <name>wslay_event_get_status_code_sent</name><parameter_list>(<parameter><decl><type><name>wslay_event_context_ptr</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>status_code_sent</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>wslay_event_get_queued_msg_count</name><parameter_list>(<parameter><decl><type><name>wslay_event_context_ptr</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>queued_msg_count</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>wslay_event_get_queued_msg_length</name><parameter_list>(<parameter><decl><type><name>wslay_event_context_ptr</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>queued_msg_length</name></name></expr>;</return>
</block_content>}</block></function>
</unit>
