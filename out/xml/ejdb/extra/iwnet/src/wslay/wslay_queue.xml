<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/extra/iwnet/src/wslay/wslay_queue.c"><comment type="block">/*
 * Wslay - The WebSocket Library
 *
 * Copyright (c) 2011, 2012 Tatsuhiro Tsujikawa
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wslay_queue.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wslay_macro.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>wslay_queue_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>wslay_queue</name></name> <modifier>*</modifier></type><name>queue</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>queue</name><operator>-&gt;</operator><name>top</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>wslay_queue_deinit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>wslay_queue</name></name> <modifier>*</modifier></type><name>queue</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>queue</name></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>wslay_queue_push</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>wslay_queue</name></name> <modifier>*</modifier></type><name>queue</name></decl></parameter>,
                      <parameter><decl><type><name><name>struct</name> <name>wslay_queue_entry</name></name> <modifier>*</modifier></type><name>ent</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>ent</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name><name>queue</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>ent</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ent</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>wslay_queue_push_front</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>wslay_queue</name></name> <modifier>*</modifier></type><name>queue</name></decl></parameter>,
                            <parameter><decl><type><name><name>struct</name> <name>wslay_queue_entry</name></name> <modifier>*</modifier></type><name>ent</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>ent</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>queue</name><operator>-&gt;</operator><name>top</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <name>ent</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>ent</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ent</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>wslay_queue_pop</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>wslay_queue</name></name> <modifier>*</modifier></type><name>queue</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <name><name>queue</name><operator>-&gt;</operator><name>top</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>queue</name><operator>-&gt;</operator><name>top</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>queue</name><operator>-&gt;</operator><name>top</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>wslay_queue_entry</name></name> <modifier>*</modifier></type><name>wslay_queue_top</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>wslay_queue</name></name> <modifier>*</modifier></type><name>queue</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>queue</name><operator>-&gt;</operator><name>top</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>wslay_queue_entry</name></name> <modifier>*</modifier></type><name>wslay_queue_tail</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>wslay_queue</name></name> <modifier>*</modifier></type><name>queue</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>wslay_struct_of</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>tail</name></name></expr></argument>, <argument><expr>struct <name>wslay_queue_entry</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>wslay_queue_empty</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>wslay_queue</name></name> <modifier>*</modifier></type><name>queue</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>top</name></name> <operator>||</operator> <name><name>queue</name><operator>-&gt;</operator><name>tail</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>queue</name><operator>-&gt;</operator><name>top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>queue</name><operator>-&gt;</operator><name>top</name></name> <operator>==</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>
</unit>
