<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/extra/iowow/src/fs/tests/iwfs_test2.c"><comment type="line">//</comment>
<comment type="block" format="doxygen">/**************************************************************************************************
 * IOWOW library
 *
 * MIT License
 *
 * Copyright (c) 2012-2022 Softmotions Ltd &lt;info@softmotions.com&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *************************************************************************************************/</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iowow.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log/iwlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fs/iwfsmfile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/iwutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"platform/iwp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwcfg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;CUnit/Basic.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_mutex_t</name></type> <name>records_mtx</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNLINK</name><parameter_list>()</parameter_list></cpp:macro> \
  <cpp:value>unlink("test_fsm_open_close.fsm");  \
  unlink("test_fsm_uniform_alloc.fsm"); \
  unlink("test_block_allocation1.fsm"); \
  unlink("test_block_allocation2.fsm")</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>init_suite</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>records_mtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>iw_init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>UNLINK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>clean_suite</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>records_mtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>UNLINK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>uint64_t</name></type> <name>iwfs_fsmdbg_number_of_free_areas</name><parameter_list>(<parameter><decl><type><name>IWFS_FSM</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uint64_t</name></type> <name>iwfs_fsmdbg_find_next_set_bit</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>,
  <parameter><decl><type><name>uint64_t</name></type>        <name>offset_bit</name></decl></parameter>,
  <parameter><decl><type><name>uint64_t</name></type>        <name>max_offset_bit</name></decl></parameter>,
  <parameter><decl><type><name>int</name>            <modifier>*</modifier></type><name>found</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uint64_t</name></type> <name>iwfs_fsmdbg_find_prev_set_bit</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>,
  <parameter><decl><type><name>uint64_t</name></type>        <name>offset_bit</name></decl></parameter>,
  <parameter><decl><type><name>uint64_t</name></type>        <name>min_offset_bit</name></decl></parameter>,
  <parameter><decl><type><name>int</name>            <modifier>*</modifier></type><name>found</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>iwfs_fsmdbg_dump_fsm_tree</name><parameter_list>(<parameter><decl><type><name>IWFS_FSM</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>iwrc</name></type> <name>iwfs_fsmdbg_state</name><parameter_list>(<parameter><decl><type><name>IWFS_FSM</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>IWFS_FSMDBG_STATE</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>iwrc</name></type> <name>iwfs_fsmdb_dump_fsm_bitmap</name><parameter_list>(<parameter><decl><type><name>IWFS_FSM</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blimit</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>test_fsm_bitmap</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BMSZ1</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name><name>buf</name><index>[<expr><name>BMSZ1</name></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>BMSZ1</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>found</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>uint64_t</name></type> <name>val</name> <init>= <expr><call><name>IW_HTOILL</name><argument_list>(<argument><expr><literal type="number">0x3UL</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* 0000011 */</comment>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>res</name> <init>= <expr><call><name>iwfs_fsmdbg_find_next_set_bit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>found</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>iwfs_fsmdbg_find_next_set_bit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>found</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>iwfs_fsmdbg_find_next_set_bit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>found</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0x3UL</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt> <comment type="block">/* 0001100 */</comment>
  <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>IW_HTOILL</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>iwfs_fsmdbg_find_next_set_bit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>found</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0x3UL</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt> <comment type="block">/* 0001100 */</comment>
  <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>IW_HTOILL</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>iwfs_fsmdbg_find_next_set_bit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>found</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0x3UL</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt> <comment type="block">/* 0001100 */</comment>
  <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>IW_HTOILL</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>iwfs_fsmdbg_find_next_set_bit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>found</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0x3UL</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt> <comment type="block">/* 0001100 */</comment>
  <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>IW_HTOILL</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>iwfs_fsmdbg_find_next_set_bit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>found</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0x3UL</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt> <comment type="block">/* 0001100 */</comment>
  <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>IW_HTOILL</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>iwfs_fsmdbg_find_prev_set_bit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>found</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0x3UL</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt> <comment type="block">/* 0001100 */</comment>
  <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>IW_HTOILL</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>iwfs_fsmdbg_find_prev_set_bit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>found</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0x2UL</literal></expr>;</expr_stmt> <comment type="block">/* 00000010 */</comment>
  <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>IW_HTOILL</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>iwfs_fsmdbg_find_next_set_bit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>found</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0x2UL</literal></expr>;</expr_stmt> <comment type="block">/* 00000010 */</comment>
  <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>IW_HTOILL</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>iwfs_fsmdbg_find_next_set_bit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>found</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0x4UL</literal></expr>;</expr_stmt> <comment type="block">/* 00000100 */</comment>
  <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>IW_HTOILL</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>iwfs_fsmdbg_find_next_set_bit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>found</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0x4UL</literal></expr>;</expr_stmt> <comment type="block">/* 00000100 */</comment>
  <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>IW_HTOILL</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>iwfs_fsmdbg_find_next_set_bit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>found</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0x4UL</literal></expr>;</expr_stmt> <comment type="block">/* 00000100 */</comment>
  <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>IW_HTOILL</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>iwfs_fsmdbg_find_next_set_bit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>found</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>val</name> <operator>=</operator> <operator>~</operator><literal type="number">0UL</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>IW_HTOILL</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>iwfs_fsmdbg_find_prev_set_bit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>found</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0x1UL</literal></expr>;</expr_stmt> <comment type="block">/* 00000001 */</comment>
  <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>IW_HTOILL</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>iwfs_fsmdbg_find_prev_set_bit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>found</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0x2UL</literal></expr>;</expr_stmt> <comment type="block">/* 00000010 */</comment>
  <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>IW_HTOILL</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>iwfs_fsmdbg_find_prev_set_bit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>found</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>IW_HTOILL</name><argument_list>(<argument><expr><literal type="number">0x1UL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>iwfs_fsmdbg_find_prev_set_bit</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>found</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>IW_HTOILL</name><argument_list>(<argument><expr><literal type="number">0x2UL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>iwfs_fsmdbg_find_prev_set_bit</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>found</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>IW_HTOILL</name><argument_list>(<argument><expr><literal type="number">0x4UL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>iwfs_fsmdbg_find_prev_set_bit</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>found</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>IW_HTOILL</name><argument_list>(<argument><expr><literal type="number">0x8UL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>iwfs_fsmdbg_find_prev_set_bit</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>found</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>IW_HTOILL</name><argument_list>(<argument><expr><literal type="number">0x2UL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>iwfs_fsmdbg_find_prev_set_bit</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">17</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>found</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">64</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* 0[0100000000000..|00]000 */</comment>
  <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>IW_HTOILL</name><argument_list>(<argument><expr><literal type="number">0x4UL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>IW_HTOILL</name><argument_list>(<argument><expr><literal type="number">0x0UL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>IW_HTOILL</name><argument_list>(<argument><expr><literal type="number">0x0UL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>iwfs_fsmdbg_find_prev_set_bit</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>found</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>IW_HTOILL</name><argument_list>(<argument><expr><literal type="number">0x4UL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>IW_HTOILL</name><argument_list>(<argument><expr><literal type="number">0x4UL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>IW_HTOILL</name><argument_list>(<argument><expr><literal type="number">0x0UL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>iwfs_fsmdbg_find_prev_set_bit</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>found</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">64</literal> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>test_fsm_open_close</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWFS_FSM_OPTS</name></type> <name>opts</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>exfile</name>         <operator>=</operator> <block>{
      <expr><operator>.</operator><name>file</name>         <operator>=</operator> <block>{ <expr><operator>.</operator><name>path</name> <operator>=</operator> <literal type="string">"test_fsm_open_close.fsm"</literal></expr>, <expr><operator>.</operator><name>lock_mode</name> <operator>=</operator> <name>IWP_WLOCK</name></expr> }</block></expr>,
      <expr><operator>.</operator><name>rspolicy</name>     <operator>=</operator> <name>iw_exfile_szpolicy_fibo</name></expr>,
      <expr><operator>.</operator><name>initial_size</name> <operator>=</operator> <literal type="number">0</literal></expr>
    }</block></expr>,
    <expr><operator>.</operator><name>bpow</name>           <operator>=</operator> <literal type="number">6</literal></expr>,
    <expr><operator>.</operator><name>hdrlen</name>         <operator>=</operator> <literal type="number">64</literal></expr>,
    <expr><operator>.</operator><name>oflags</name>         <operator>=</operator> <name>IWFSM_STRICT</name></expr>
  }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>aunit</name> <init>= <expr><call><name>iwp_alloc_unit</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWFS_FSMDBG_STATE</name></type> <name>state1</name></decl>, <decl><type ref="prev"/><name>state2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWFS_FSM</name></type> <name>fsm</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwfs_fsmfile_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_FALSE_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwfs_fsmdbg_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_FALSE</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_TRUE</name><argument_list>(<argument><expr><operator>(</operator><name>aunit</name> <operator>*</operator> <literal type="number">8</literal> <operator>-</operator> <name><name>state1</name><operator>.</operator><name>lfbklen</name></name><operator>)</operator> <operator>*</operator> <literal type="number">64</literal> <operator>==</operator> <literal type="number">2</literal> <operator>*</operator> <name>aunit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// allocated first 2 pages</comment>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>.</operator><name>close</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_FALSE_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwfs_fsmfile_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_FALSE_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwfs_fsmdbg_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_FALSE</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_TRUE</name><argument_list>(<argument><expr><operator>(</operator><name>aunit</name> <operator>*</operator> <literal type="number">8</literal> <operator>-</operator> <name><name>state2</name><operator>.</operator><name>lfbklen</name></name><operator>)</operator> <operator>*</operator> <literal type="number">64</literal> <operator>==</operator> <literal type="number">2</literal> <operator>*</operator> <name>aunit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name><name>state1</name><operator>.</operator><name>bmlen</name></name></expr></argument>, <argument><expr><name><name>state2</name><operator>.</operator><name>bmlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name><name>state1</name><operator>.</operator><name>bmoff</name></name></expr></argument>, <argument><expr><name><name>state2</name><operator>.</operator><name>bmoff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name><name>state1</name><operator>.</operator><name>lfbklen</name></name></expr></argument>, <argument><expr><name><name>state2</name><operator>.</operator><name>lfbklen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name><name>state1</name><operator>.</operator><name>lfbkoff</name></name></expr></argument>, <argument><expr><name><name>state2</name><operator>.</operator><name>lfbkoff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name><name>state1</name><operator>.</operator><name>state</name><operator>.</operator><name>block_size</name></name></expr></argument>, <argument><expr><name><name>state2</name><operator>.</operator><name>state</name><operator>.</operator><name>block_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name><name>state1</name><operator>.</operator><name>state</name><operator>.</operator><name>blocks_num</name></name></expr></argument>, <argument><expr><name><name>state2</name><operator>.</operator><name>state</name><operator>.</operator><name>blocks_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name><name>state1</name><operator>.</operator><name>state</name><operator>.</operator><name>hdrlen</name></name></expr></argument>, <argument><expr><name><name>state2</name><operator>.</operator><name>state</name><operator>.</operator><name>hdrlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name><name>state1</name><operator>.</operator><name>state</name><operator>.</operator><name>oflags</name></name></expr></argument>, <argument><expr><name><name>state2</name><operator>.</operator><name>state</name><operator>.</operator><name>oflags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name><name>state1</name><operator>.</operator><name>state</name><operator>.</operator><name>exfile</name><operator>.</operator><name>fsize</name></name></expr></argument>, <argument><expr><name><name>state2</name><operator>.</operator><name>state</name><operator>.</operator><name>exfile</name><operator>.</operator><name>fsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name><name>state1</name><operator>.</operator><name>state</name><operator>.</operator><name>exfile</name><operator>.</operator><name>fsize</name></name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>aunit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>.</operator><name>close</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_FALSE_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>test_fsm_uniform_alloc_impl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mmap_all</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>test_fsm_uniform_alloc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>test_fsm_uniform_alloc_impl</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>test_fsm_uniform_alloc_mmap_all</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>test_fsm_uniform_alloc_impl</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>test_fsm_uniform_alloc_impl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mmap_all</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWFS_FSMDBG_STATE</name></type> <name>state1</name></decl>, <decl><type ref="prev"/><name>state2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWFS_FSM_OPTS</name></type> <name>opts</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>exfile</name>        <operator>=</operator> <block>{
      <expr><operator>.</operator><name>file</name>        <operator>=</operator> <block>{
        <expr><operator>.</operator><name>path</name>      <operator>=</operator> <literal type="string">"test_fsm_uniform_alloc.fsm"</literal></expr>,
        <expr><operator>.</operator><name>lock_mode</name> <operator>=</operator> <name>IWP_WLOCK</name></expr>,
        <expr><operator>.</operator><name>omode</name>     <operator>=</operator> <name>IWFS_OTRUNC</name></expr>
      }</block></expr>,
      <expr><operator>.</operator><name>rspolicy</name>    <operator>=</operator> <name>iw_exfile_szpolicy_fibo</name></expr>
    }</block></expr>,
    <expr><operator>.</operator><name>bpow</name>          <operator>=</operator> <literal type="number">6</literal></expr>,
    <expr><operator>.</operator><name>hdrlen</name>        <operator>=</operator> <literal type="number">64</literal></expr>,
    <expr><operator>.</operator><name>oflags</name>        <operator>=</operator> <name>IWFSM_STRICT</name></expr>,
    <expr><operator>.</operator><name>mmap_all</name>      <operator>=</operator> <name>mmap_all</name></expr>
  }</block></expr></init></decl>;</decl_stmt>

  <typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>off_t</name></type> <name>addr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>off_t</name></type> <name>len</name></decl>;</decl_stmt>
  }</block></struct></type> <name>ASLOT</name>;</typedef>

  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>bsize</name> <init>= <expr><literal type="number">512</literal></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bcnt</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>
  <decl_stmt><decl><type><name>ASLOT</name></type> <name><name>aslots</name><index>[<expr><name>bcnt</name></expr>]</index></name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>IWFS_FSM</name></type> <name>fsm</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwfs_fsmfile_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_FALSE_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwfs_fsmdbg_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_FALSE_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name><name>state1</name><operator>.</operator><name>state</name><operator>.</operator><name>exfile</name><operator>.</operator><name>file</name><operator>.</operator><name>ostatus</name></name></expr></argument>, <argument><expr><name>IWFS_OPEN_NEW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>bcnt</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>aslots</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>addr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>.</operator><name>allocate</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>fsm</name></expr></argument>, <argument><expr><name>bsize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aslots</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aslots</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT_FALSE_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwfs_fsmdbg_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_FALSE_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>iwp_alloc_unit</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">4096</literal></expr>)</condition> <block>{<block_content> <comment type="line">// todo check for system with different alloc units</comment>
    <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name><name>state1</name><operator>.</operator><name>bmlen</name></name></expr></argument>, <argument><expr><literal type="number">8192</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name><name>state1</name><operator>.</operator><name>bmoff</name></name></expr></argument>, <argument><expr><literal type="number">2097152</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name><name>state1</name><operator>.</operator><name>lfbklen</name></name></expr></argument>, <argument><expr><literal type="number">32632</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name><name>state1</name><operator>.</operator><name>lfbkoff</name></name></expr></argument>, <argument><expr><literal type="number">32904</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name><name>state1</name><operator>.</operator><name>state</name><operator>.</operator><name>blocks_num</name></name></expr></argument>, <argument><expr><literal type="number">65536</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name><name>state1</name><operator>.</operator><name>state</name><operator>.</operator><name>free_segments_num</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name><name>state1</name><operator>.</operator><name>state</name><operator>.</operator><name>avg_alloc_size</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name><name>state1</name><operator>.</operator><name>state</name><operator>.</operator><name>alloc_dispersion</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>


  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>.</operator><name>close</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_FALSE_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return;</return>

  <expr_stmt><expr><name><name>opts</name><operator>.</operator><name>exfile</name><operator>.</operator><name>file</name><operator>.</operator><name>omode</name></name> <operator>=</operator> <name>IWFS_OREAD</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwfs_fsmfile_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_FALSE_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwfs_fsmdbg_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_FALSE_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name><name>state2</name><operator>.</operator><name>state</name><operator>.</operator><name>exfile</name><operator>.</operator><name>file</name><operator>.</operator><name>ostatus</name></name></expr></argument>, <argument><expr><name>IWFS_OPEN_EXISTING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_FALSE</name><argument_list>(<argument><expr><name><name>state2</name><operator>.</operator><name>state</name><operator>.</operator><name>exfile</name><operator>.</operator><name>file</name><operator>.</operator><name>opts</name><operator>.</operator><name>omode</name></name> <operator>&amp;</operator> <name>IWFS_OWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name><name>state1</name><operator>.</operator><name>bmlen</name></name></expr></argument>, <argument><expr><name><name>state2</name><operator>.</operator><name>bmlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name><name>state1</name><operator>.</operator><name>bmoff</name></name></expr></argument>, <argument><expr><name><name>state2</name><operator>.</operator><name>bmoff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name><name>state1</name><operator>.</operator><name>lfbklen</name></name></expr></argument>, <argument><expr><name><name>state2</name><operator>.</operator><name>lfbklen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name><name>state1</name><operator>.</operator><name>lfbkoff</name></name></expr></argument>, <argument><expr><name><name>state2</name><operator>.</operator><name>lfbkoff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name><name>state1</name><operator>.</operator><name>state</name><operator>.</operator><name>blocks_num</name></name></expr></argument>, <argument><expr><name><name>state2</name><operator>.</operator><name>state</name><operator>.</operator><name>blocks_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name><name>state1</name><operator>.</operator><name>state</name><operator>.</operator><name>free_segments_num</name></name></expr></argument>, <argument><expr><name><name>state2</name><operator>.</operator><name>state</name><operator>.</operator><name>free_segments_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name><name>state1</name><operator>.</operator><name>state</name><operator>.</operator><name>avg_alloc_size</name></name></expr></argument>, <argument><expr><name><name>state2</name><operator>.</operator><name>state</name><operator>.</operator><name>avg_alloc_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name><name>state1</name><operator>.</operator><name>state</name><operator>.</operator><name>alloc_dispersion</name></name></expr></argument>, <argument><expr><name><name>state2</name><operator>.</operator><name>state</name><operator>.</operator><name>alloc_dispersion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>uint32_t</name></type> <name>ibuf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>off_t</name></type> <name>ilen</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>.</operator><name>allocate</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>fsm</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ibuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>ibuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ilen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>IW_ERROR_READONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>.</operator><name>close</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_FALSE_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>opts</name><operator>.</operator><name>exfile</name><operator>.</operator><name>file</name><operator>.</operator><name>omode</name></name> <operator>=</operator> <name>IWFS_OWRITE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwfs_fsmfile_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_FALSE_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwfs_fsmdbg_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_FALSE_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>iwp_alloc_unit</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">4096</literal></expr>)</condition> <block>{<block_content> <comment type="line">// todo check for system with different alloc units</comment>
    <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name><name>state1</name><operator>.</operator><name>bmlen</name></name></expr></argument>, <argument><expr><literal type="number">8192</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name><name>state1</name><operator>.</operator><name>bmoff</name></name></expr></argument>, <argument><expr><literal type="number">2097152</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name><name>state1</name><operator>.</operator><name>lfbklen</name></name></expr></argument>, <argument><expr><literal type="number">32632</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name><name>state1</name><operator>.</operator><name>lfbkoff</name></name></expr></argument>, <argument><expr><literal type="number">32904</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name><name>state1</name><operator>.</operator><name>state</name><operator>.</operator><name>blocks_num</name></name></expr></argument>, <argument><expr><literal type="number">65536</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name><name>state1</name><operator>.</operator><name>state</name><operator>.</operator><name>free_segments_num</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name><name>state1</name><operator>.</operator><name>state</name><operator>.</operator><name>avg_alloc_size</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name><name>state1</name><operator>.</operator><name>state</name><operator>.</operator><name>alloc_dispersion</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>( <init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>bcnt</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>.</operator><name>deallocate</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>fsm</name></expr></argument>, <argument><expr><name><name>aslots</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>addr</name></expr></argument>, <argument><expr><name><name>aslots</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT_FALSE_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>.</operator><name>close</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_FALSE_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>iwp_alloc_unit</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">4096</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>IWP_FILE_STAT</name></type> <name>st</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwp_fstat</name><argument_list>(<argument><expr><literal type="string">"test_fsm_uniform_alloc.fsm"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><call><name>iwp_alloc_unit</name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>FSMREC</name> <block>{
  <decl_stmt><decl><type><name>int64_t</name></type> <name>offset</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>length</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>     <name>locked</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>FSMREC</name></name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>FSMREC</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block></struct></type> <name>FSMREC</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>int</name></type>       <name>maxrecs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>       <name>avgrecsz</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWFS_FSM</name> <modifier>*</modifier></type><name>fsm</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>volatile</specifier> <name>int</name></type> <name>numrecs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FSMREC</name>      <modifier>*</modifier></type><name>reclist</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FSMREC</name>      <modifier>*</modifier></type><name>head</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>blkpow</name></decl>;</decl_stmt>
}</block></struct></type> <name>FSMRECTASK</name>;</typedef>

<comment type="line" format="doxygen">//!!!! TODO this test is not good for multithreaded env, refactoring needed</comment>

<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>recordsthr</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>FSMRECTASK</name> <modifier>*</modifier></type><name>task</name> <init>= <expr><name>op</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FSMREC</name> <modifier>*</modifier></type><name>rec</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWFS_FSM</name> <modifier>*</modifier></type><name>fsm</name> <init>= <expr><name><name>task</name><operator>-&gt;</operator><name>fsm</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>sp</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxrsize</name> <init>= <expr><call><name>IW_ROUNDUP</name><argument_list>(<argument><expr><name><name>task</name><operator>-&gt;</operator><name>avgrecsz</name></name> <operator>*</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>task</name><operator>-&gt;</operator><name>blkpow</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rdata</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>maxrsize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rdata2</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>maxrsize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>numrec</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>records_mtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>numrec</name> <operator>=</operator> <name><name>task</name><operator>-&gt;</operator><name>numrecs</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>records_mtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <while>while <condition>(<expr><name>numrec</name> <operator>&lt;</operator> <name><name>task</name><operator>-&gt;</operator><name>maxrecs</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>rec</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>rec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>rec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>rec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rec</name><operator>-&gt;</operator><name>locked</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <do>do <block>{<block_content>
      <expr_stmt><expr><name><name>rec</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <call><name>iwu_rand_dnorm</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name><name>task</name><operator>-&gt;</operator><name>avgrecsz</name></name></expr></argument>, <argument><expr><name><name>task</name><operator>-&gt;</operator><name>avgrecsz</name></name> <operator>/</operator> <literal type="number">3.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> while <condition>(<expr><name><name>rec</name><operator>-&gt;</operator><name>length</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>rec</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;</operator> <name>maxrsize</name></expr>)</condition>;</do>

    <comment type="block">/* Allocate record */</comment>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>allocate</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><name><name>rec</name><operator>-&gt;</operator><name>length</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rec</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rec</name><operator>-&gt;</operator><name>length</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT_FALSE_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>rdata</name></expr></argument>, <argument><expr><operator>(</operator><name><name>rec</name><operator>-&gt;</operator><name>offset</name></name> <operator>&gt;&gt;</operator> <name><name>task</name><operator>-&gt;</operator><name>blkpow</name></name><operator>)</operator></expr></argument>, <argument><expr><name>maxrsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT_TRUE_FATAL</name><argument_list>(<argument><expr><name>maxrsize</name> <operator>&gt;=</operator> <name><name>rec</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>write</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><name><name>rec</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>rdata</name></expr></argument>, <argument><expr><name><name>rec</name><operator>-&gt;</operator><name>length</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT_FALSE_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><name><name>rec</name><operator>-&gt;</operator><name>length</name></name></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>records_mtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>task</name><operator>-&gt;</operator><name>reclist</name></name> <operator>!=</operator> <name>rec</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>task</name><operator>-&gt;</operator><name>reclist</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>reclist</name></name> <operator>=</operator> <name>rec</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>reclist</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>task</name><operator>-&gt;</operator><name>reclist</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>rec</name><operator>-&gt;</operator><name>locked</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>++</operator><operator>(</operator><name><name>task</name><operator>-&gt;</operator><name>numrecs</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>numrec</name> <operator>=</operator> <name><name>task</name><operator>-&gt;</operator><name>numrecs</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>records_mtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><name>rec</name> <operator>=</operator> <name><name>task</name><operator>-&gt;</operator><name>reclist</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>rec</name> <operator>&amp;&amp;</operator> <name><name>rec</name><operator>-&gt;</operator><name>prev</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">3</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>a</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>a</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content> <comment type="block">/* realloc */</comment>
      <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>records_mtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>rec</name><operator>-&gt;</operator><name>locked</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rec</name> <operator>=</operator> <name><name>rec</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>records_mtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>rec</name><operator>-&gt;</operator><name>locked</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>records_mtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>deallocate</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><name><name>rec</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>rec</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>CU_ASSERT_FALSE_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* allocate */</comment>
      <do>do <block>{<block_content>
        <expr_stmt><expr><name><name>rec</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <call><name>iwu_rand_dnorm</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name><name>task</name><operator>-&gt;</operator><name>avgrecsz</name></name></expr></argument>, <argument><expr><name><name>task</name><operator>-&gt;</operator><name>avgrecsz</name></name> <operator>/</operator> <literal type="number">3.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> while <condition>(<expr><name><name>rec</name><operator>-&gt;</operator><name>length</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>rec</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;</operator> <name>maxrsize</name></expr>)</condition>;</do>

      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>allocate</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><name><name>rec</name><operator>-&gt;</operator><name>length</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rec</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rec</name><operator>-&gt;</operator><name>length</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CU_ASSERT_FALSE</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>rec</name><operator>-&gt;</operator><name>length</name></name> <operator>&lt;=</operator> <name>maxrsize</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Write a record */</comment>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>rdata</name></expr></argument>, <argument><expr><operator>(</operator><name><name>rec</name><operator>-&gt;</operator><name>offset</name></name> <operator>&gt;&gt;</operator> <name><name>task</name><operator>-&gt;</operator><name>blkpow</name></name><operator>)</operator></expr></argument>, <argument><expr><name>maxrsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>-&gt;</operator><name>write</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><name><name>rec</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>rdata</name></expr></argument>, <argument><expr><name><name>rec</name><operator>-&gt;</operator><name>length</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>CU_ASSERT_FALSE_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="block">/* printf("Ops %lld %lld\n\n", rl &gt;&gt; task-&gt;blkpow, rec-&gt;length &gt;&gt;
         * task-&gt;blkpow); */</comment>
        <expr_stmt><expr><call><name>CU_ASSERT_TRUE_FATAL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>records_mtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>rec</name><operator>-&gt;</operator><name>locked</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>records_mtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="line">// TODO</comment>

      <comment type="line">//            rc = fsm-&gt;lread(fsm, rec-&gt;offset, rdata, rec-&gt;length, &amp;sp);</comment>
      <comment type="line">//            CU_ASSERT_FALSE_FATAL(rc);</comment>
      <comment type="line">//            CU_ASSERT_EQUAL_FATAL(sp, rec-&gt;length);</comment>
      <comment type="line">//            memset(rdata2, (rec-&gt;offset &gt;&gt; task-&gt;blkpow), maxrsize);</comment>
      <comment type="line">//            int cmp = memcmp(rdata, rdata2, rec-&gt;length);</comment>
      <comment type="line">//            CU_ASSERT_FALSE_FATAL(cmp);</comment>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>rec</name> <operator>=</operator> <name><name>rec</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>rdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>rdata2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>test_block_allocation_impl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mmap_all</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nthreads</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numrec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>avgrecsz</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blkpow</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>pthread_t</name> <modifier>*</modifier></type><name>tlist</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>nthreads</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pthread_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>IWFS_FSM_OPTS</name></type> <name>opts</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>exfile</name>     <operator>=</operator> <block>{
      <expr><operator>.</operator><name>file</name>     <operator>=</operator> <block>{ <expr><operator>.</operator><name>path</name> <operator>=</operator> <name>path</name></expr>, <expr><operator>.</operator><name>omode</name> <operator>=</operator> <name>IWFS_OTRUNC</name></expr> }</block></expr>,
      <expr><operator>.</operator><name>rspolicy</name> <operator>=</operator> <name>iw_exfile_szpolicy_fibo</name></expr>
    }</block></expr>,
    <expr><operator>.</operator><name>bpow</name>       <operator>=</operator> <name>blkpow</name></expr>,
    <expr><operator>.</operator><name>oflags</name>     <operator>=</operator> <name>IWFSM_STRICT</name></expr>,
    <expr><operator>.</operator><name>mmap_all</name>   <operator>=</operator> <name>mmap_all</name></expr>
  }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>FSMRECTASK</name></type> <name>task</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FSMREC</name> <modifier>*</modifier></type><name>rec</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWFS_FSM</name></type> <name>fsm</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwfs_fsmfile_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_FALSE_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>task</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>numrecs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>maxrecs</name></name> <operator>=</operator> <name>numrec</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>avgrecsz</name></name> <operator>=</operator> <name>avgrecsz</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>fsm</name></name> <operator>=</operator> <operator>&amp;</operator><name>fsm</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>reclist</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>task</name><operator>.</operator><name>reclist</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>task</name><operator>.</operator><name>reclist</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>task</name><operator>.</operator><name>reclist</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>head</name></name> <operator>=</operator> <name><name>task</name><operator>.</operator><name>reclist</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>task</name><operator>.</operator><name>blkpow</name></name> <operator>=</operator> <name><name>opts</name><operator>.</operator><name>bpow</name></name></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nthreads</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>CU_ASSERT_EQUAL_FATAL</name><argument_list>(<argument><expr><call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tlist</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>recordsthr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>task</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nthreads</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>pthread_join</name><argument_list>(<argument><expr><name><name>tlist</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="block">/* Cleanup */</comment>
  <expr_stmt><expr><name>rec</name> <operator>=</operator> <name><name>task</name><operator>.</operator><name>reclist</name></name></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>rec</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>prev</name> <operator>=</operator> <name><name>rec</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>rec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rec</name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>.</operator><name>close</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_FALSE_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>test_block_allocation1_impl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mmap_all</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>test_block_allocation1</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>test_block_allocation1_impl</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>test_block_allocation1_mmap_all</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>test_block_allocation1_impl</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>test_block_allocation1_impl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mmap_all</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWFS_FSM</name></type> <name>fsm</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>psize</name> <init>= <expr><call><name>iwp_alloc_unit</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWFS_FSM_OPTS</name></type> <name>opts</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>exfile</name>    <operator>=</operator> <block>{
      <expr><operator>.</operator><name>file</name>    <operator>=</operator> <block>{
        <expr><operator>.</operator><name>path</name>  <operator>=</operator> <literal type="string">"test_block_allocation1.fsm"</literal></expr>,
        <expr><operator>.</operator><name>omode</name> <operator>=</operator> <name>IWFS_OTRUNC</name></expr>
      }</block></expr>
    }</block></expr>,
    <expr><operator>.</operator><name>hdrlen</name>    <operator>=</operator> <name>psize</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">64</literal></expr>,
    <expr><operator>.</operator><name>bpow</name>      <operator>=</operator> <literal type="number">6</literal></expr>,
    <expr><operator>.</operator><name>oflags</name>    <operator>=</operator> <name>IWFSM_STRICT</name></expr>,
    <expr><operator>.</operator><name>mmap_all</name>  <operator>=</operator> <name>mmap_all</name></expr>
  }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>off_t</name></type> <name>oaddr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>off_t</name></type> <name>olen</name></decl>;</decl_stmt>
  <comment type="line">// off_t sp, sp2;</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>bsize</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>opts</name><operator>.</operator><name>bpow</name></name><operator>)</operator></expr></init></decl>;</decl_stmt> <comment type="block">/* byte block */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>hoff</name> <init>= <expr><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>psize</name><operator>)</operator></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwfs_fsmfile_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fsm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_FALSE_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Next alloc status:
     xxxxxxx */</comment>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>.</operator><name>allocate</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>fsm</name></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>*</operator> <name>bsize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oaddr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_FALSE_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>oaddr</name></expr></argument>, <argument><expr><name>hoff</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>olen</name></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>*</operator> <name>bsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>.</operator><name>allocate</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>fsm</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <name>bsize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oaddr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_FALSE_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>oaddr</name></expr></argument>, <argument><expr><name>hoff</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>bsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>olen</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <name>bsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>.</operator><name>deallocate</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>fsm</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>*</operator> <name>bsize</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>*</operator> <name>bsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>IWFS_ERROR_FSM_SEGMENTATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <comment type="block">/* Next alloc status:
     x*xxxxx */</comment>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>.</operator><name>deallocate</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>fsm</name></expr></argument>, <argument><expr><name>hoff</name> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <name>bsize</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>*</operator> <name>bsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_FALSE_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Next alloc status:
     xxxxxxx */</comment>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>.</operator><name>allocate</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>fsm</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>*</operator> <name>bsize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oaddr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_FALSE_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>oaddr</name></expr></argument>, <argument><expr><name>hoff</name> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <name>bsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>olen</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>*</operator> <name>bsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Next alloc status:
     x**xxxx */</comment>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>.</operator><name>deallocate</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>fsm</name></expr></argument>, <argument><expr><name>oaddr</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>bsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_FALSE_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Next alloc status:
     x**x**x */</comment>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>.</operator><name>deallocate</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>fsm</name></expr></argument>, <argument><expr><name>hoff</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>bsize</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>bsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_FALSE_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>oaddr</name> <operator>=</operator> <name>hoff</name> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <name>bsize</name></expr>;</expr_stmt> <comment type="block">/* Test a free block location suggestion */</comment>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>.</operator><name>allocate</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>fsm</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>bsize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oaddr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_FALSE_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>oaddr</name></expr></argument>, <argument><expr><name>hoff</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>bsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>olen</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>bsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Next alloc status:
     x**x**x */</comment>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>.</operator><name>deallocate</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>fsm</name></expr></argument>, <argument><expr><name>hoff</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>bsize</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>bsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_FALSE_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Next alloc status:
     x*****x */</comment>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><call><name>iwfs_fsmdbg_number_of_free_areas</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fsm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>.</operator><name>deallocate</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>fsm</name></expr></argument>, <argument><expr><name>hoff</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>bsize</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>*</operator> <name>bsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_FALSE_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><call><name>iwfs_fsmdbg_number_of_free_areas</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fsm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Next alloc status:
     xxxxxxx */</comment>
  <expr_stmt><expr><name>oaddr</name> <operator>=</operator> <name>hoff</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>.</operator><name>allocate</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>fsm</name></expr></argument>, <argument><expr><literal type="number">5</literal> <operator>*</operator> <name>bsize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oaddr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_FALSE_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>oaddr</name></expr></argument>, <argument><expr><name>hoff</name> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <name>bsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>olen</name></expr></argument>, <argument><expr><literal type="number">5</literal> <operator>*</operator> <name>bsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><call><name>iwfs_fsmdbg_number_of_free_areas</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fsm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Test reallocate</comment>
  <comment type="block">/* Next alloc status:
   * xxx*** */</comment>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>.</operator><name>deallocate</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>fsm</name></expr></argument>, <argument><expr><name>hoff</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>bsize</name></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>*</operator> <name>bsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_FALSE_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>.</operator><name>deallocate</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>fsm</name></expr></argument>, <argument><expr><name>hoff</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>*</operator> <name>bsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_FALSE_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><call><name>iwfs_fsmdbg_number_of_free_areas</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fsm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Next alloc status:
   * xx**** */</comment>
  <expr_stmt><expr><name>oaddr</name> <operator>=</operator> <name>hoff</name> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <name>bsize</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>olen</name> <operator>=</operator> <literal type="number">3</literal> <operator>*</operator> <name>bsize</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>.</operator><name>reallocate</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>fsm</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>bsize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oaddr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_FALSE_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>oaddr</name></expr></argument>, <argument><expr><name>hoff</name> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <name>bsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>olen</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>bsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_EQUAL</name><argument_list>(<argument><expr><call><name>iwfs_fsmdbg_number_of_free_areas</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fsm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Next alloc status:
   * xxxxxx */</comment>
  <comment type="line">//  rc = fsm.reallocate(&amp;fsm, 6 * bsize, &amp;oaddr, &amp;olen, 0);</comment>
  <comment type="line">//  CU_ASSERT_FALSE_FATAL(rc);</comment>
  <comment type="line">//  CU_ASSERT_EQUAL(oaddr, hoff + 1 * bsize);</comment>
  <comment type="line">//  CU_ASSERT_EQUAL(olen, 6 * bsize);</comment>
  <comment type="line">//</comment>
  <comment type="line">//  /* Next alloc status:</comment>
  <comment type="line">//     *xx***x */</comment>
  <comment type="line">//  rc = fsm.deallocate(&amp;fsm, hoff + 3 * bsize, 3 * bsize);</comment>
  <comment type="line">//  CU_ASSERT_FALSE_FATAL(rc);</comment>

  <comment type="line">// todo</comment>
  <comment type="line">//  oaddr = hoff + 1 * bsize;</comment>
  <comment type="line">//  olen = 1 * bsize;</comment>
  <comment type="line">//  rc = fsm.reallocate(&amp;fsm, 2 * bsize, &amp;oaddr, &amp;olen, 0);</comment>
  <comment type="line">//  CU_ASSERT_EQUAL(oaddr, hoff);</comment>
  <comment type="line">//  CU_ASSERT_EQUAL(olen, 2 * bsize);</comment>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>fsm</name><operator>.</operator><name>close</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_ASSERT_FALSE_FATAL</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>test_block_allocation2_impl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mmap_all</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>test_block_allocation2</name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>test_block_allocation2_impl</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>test_block_allocation2_mmap_all</name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>test_block_allocation2_impl</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>test_block_allocation2_impl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mmap_all</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>test_block_allocation_impl</name><argument_list>(<argument><expr><name>mmap_all</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">50000</literal></expr></argument>, <argument><expr><literal type="number">493</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"test_block_allocation2.fsm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>test_block_allocation_impl</name><argument_list>(<argument><expr><name>mmap_all</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">50000</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"test_block_allocation2.fsm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>CU_pSuite</name></type> <name>pSuite</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Initialize the CUnit test registry */</comment>
  <if_stmt><if>if <condition>(<expr><name>CUE_SUCCESS</name> <operator>!=</operator> <call><name>CU_initialize_registry</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>CU_get_error</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Add a suite to the registry */</comment>
  <expr_stmt><expr><name>pSuite</name> <operator>=</operator> <call><name>CU_add_suite</name><argument_list>(<argument><expr><literal type="string">"iwfs_test2"</literal></expr></argument>, <argument><expr><name>init_suite</name></expr></argument>, <argument><expr><name>clean_suite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pSuite</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CU_cleanup_registry</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>CU_get_error</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Add the tests to the suite */</comment>
  <if_stmt><if>if <condition>(  <expr><operator>(</operator><name>NULL</name> <operator>==</operator> <call><name>CU_add_test</name><argument_list>(<argument><expr><name>pSuite</name></expr></argument>, <argument><expr><literal type="string">"test_fsm_bitmap"</literal></expr></argument>, <argument><expr><name>test_fsm_bitmap</name></expr></argument>)</argument_list></call><operator>)</operator>
     <operator>||</operator> <operator>(</operator><name>NULL</name> <operator>==</operator> <call><name>CU_add_test</name><argument_list>(<argument><expr><name>pSuite</name></expr></argument>, <argument><expr><literal type="string">"test_fsm_open_close"</literal></expr></argument>, <argument><expr><name>test_fsm_open_close</name></expr></argument>)</argument_list></call><operator>)</operator>
     <operator>||</operator> <operator>(</operator><name>NULL</name> <operator>==</operator> <call><name>CU_add_test</name><argument_list>(<argument><expr><name>pSuite</name></expr></argument>, <argument><expr><literal type="string">"test_fsm_uniform_alloc"</literal></expr></argument>, <argument><expr><name>test_fsm_uniform_alloc</name></expr></argument>)</argument_list></call><operator>)</operator>
     <operator>||</operator> <operator>(</operator><name>NULL</name> <operator>==</operator> <call><name>CU_add_test</name><argument_list>(<argument><expr><name>pSuite</name></expr></argument>, <argument><expr><literal type="string">"test_fsm_uniform_alloc_mmap_all"</literal></expr></argument>, <argument><expr><name>test_fsm_uniform_alloc_mmap_all</name></expr></argument>)</argument_list></call><operator>)</operator>
     <operator>||</operator> <operator>(</operator><name>NULL</name> <operator>==</operator> <call><name>CU_add_test</name><argument_list>(<argument><expr><name>pSuite</name></expr></argument>, <argument><expr><literal type="string">"test_block_allocation1"</literal></expr></argument>, <argument><expr><name>test_block_allocation1</name></expr></argument>)</argument_list></call><operator>)</operator>
     <operator>||</operator> <operator>(</operator><name>NULL</name> <operator>==</operator> <call><name>CU_add_test</name><argument_list>(<argument><expr><name>pSuite</name></expr></argument>, <argument><expr><literal type="string">"test_block_allocation1_mmap_all"</literal></expr></argument>, <argument><expr><name>test_block_allocation1_mmap_all</name></expr></argument>)</argument_list></call><operator>)</operator>
     <operator>||</operator> <operator>(</operator><name>NULL</name> <operator>==</operator> <call><name>CU_add_test</name><argument_list>(<argument><expr><name>pSuite</name></expr></argument>, <argument><expr><literal type="string">"test_block_allocation2"</literal></expr></argument>, <argument><expr><name>test_block_allocation2</name></expr></argument>)</argument_list></call><operator>)</operator>
     <operator>||</operator> <operator>(</operator><name>NULL</name> <operator>==</operator> <call><name>CU_add_test</name><argument_list>(<argument><expr><name>pSuite</name></expr></argument>, <argument><expr><literal type="string">"test_block_allocation2_mmap_all"</literal></expr></argument>, <argument><expr><name>test_block_allocation2_mmap_all</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>CU_cleanup_registry</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>CU_get_error</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Run all tests using the CUnit Basic interface */</comment>
  <expr_stmt><expr><call><name>CU_basic_set_mode</name><argument_list>(<argument><expr><name>CU_BRM_VERBOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CU_basic_run_tests</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>CU_get_error</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>CU_get_number_of_failures</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CU_cleanup_registry</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
</unit>
