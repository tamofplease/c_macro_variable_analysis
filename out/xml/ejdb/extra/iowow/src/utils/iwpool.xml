<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/extra/iowow/src/utils/iwpool.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwpool.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IWPOOL_UNIT_ALIGN_SIZE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<comment type="block" format="doxygen">/** Atomic heap unit */</comment>
<typedef>typedef <type><struct>struct <name>IWPOOL_UNIT</name> <block>{
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>heap</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>IWPOOL_UNIT</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block></struct></type> <name>IWPOOL_UNIT</name>;</typedef>

<comment type="block" format="doxygen">/** Memory pool */</comment>
<struct>struct <name>_IWPOOL</name> <block>{
  <decl_stmt><decl><type><name>size_t</name></type> <name>usiz</name></decl>;</decl_stmt>                       <comment type="block" format="doxygen">/**&lt; Used size */</comment>
  <decl_stmt><decl><type><name>size_t</name></type> <name>asiz</name></decl>;</decl_stmt>                       <comment type="block" format="doxygen">/**&lt; Allocated size */</comment>
  <decl_stmt><decl><type><name>char</name>  <modifier>*</modifier></type><name>heap</name></decl>;</decl_stmt>                       <comment type="block" format="doxygen">/**&lt; Current pool heap ptr */</comment>
  <decl_stmt><decl><type><name>IWPOOL_UNIT</name> <modifier>*</modifier></type><name>unit</name></decl>;</decl_stmt>                 <comment type="block" format="doxygen">/**&lt; Current heap unit */</comment>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl>;</decl_stmt>                   <comment type="block" format="doxygen">/**&lt; Associated user data */</comment>
  <function_decl><type><name>void</name></type>  (<modifier>*</modifier><name>user_data_free_fn</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl> <comment type="block" format="doxygen">/**&lt; User data dispose function */</comment>
}</block>;</struct>

<function><type><name>IWPOOL</name><modifier>*</modifier></type> <name>iwpool_create</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>siz</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>siz</name> <operator>=</operator> <ternary><condition><expr><name>siz</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>IWPOOL_POOL_SIZ</name></expr> </then><else>: <expr><name>siz</name></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name>siz</name> <operator>=</operator> <call><name>IW_ROUNDUP</name><argument_list>(<argument><expr><name>siz</name></expr></argument>, <argument><expr><name>IWPOOL_UNIT_ALIGN_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pool</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pool</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>error</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>unit</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>pool</name><operator>-&gt;</operator><name>unit</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pool</name><operator>-&gt;</operator><name>unit</name></name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>error</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>unit</name><operator>-&gt;</operator><name>heap</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>siz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pool</name><operator>-&gt;</operator><name>unit</name><operator>-&gt;</operator><name>heap</name></name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>error</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>asiz</name></name> <operator>=</operator> <name>siz</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>heap</name></name> <operator>=</operator> <name><name>pool</name><operator>-&gt;</operator><name>unit</name><operator>-&gt;</operator><name>heap</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>usiz</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>unit</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>user_data</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>user_data_free_fn</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><name>pool</name></expr>;</return>

<label><name>error</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>pool</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pool</name><operator>-&gt;</operator><name>unit</name></name> <operator>&amp;&amp;</operator> <name><name>pool</name><operator>-&gt;</operator><name>unit</name><operator>-&gt;</operator><name>heap</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>unit</name><operator>-&gt;</operator><name>heap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>unit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>IWPOOL</name><modifier>*</modifier></type> <name>iwpool_create_empty</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>_IWPOOL</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>int</name></type> <name>iwpool_extend</name><parameter_list>(<parameter><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>siz</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>IWPOOL_UNIT</name> <modifier>*</modifier></type><name>nunit</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>nunit</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>nunit</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>siz</name> <operator>=</operator> <call><name>IW_ROUNDUP</name><argument_list>(<argument><expr><name>siz</name></expr></argument>, <argument><expr><name>IWPOOL_UNIT_ALIGN_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>nunit</name><operator>-&gt;</operator><name>heap</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>siz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>nunit</name><operator>-&gt;</operator><name>heap</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>nunit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>nunit</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>pool</name><operator>-&gt;</operator><name>unit</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>heap</name></name> <operator>=</operator> <name><name>nunit</name><operator>-&gt;</operator><name>heap</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>unit</name></name> <operator>=</operator> <name>nunit</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>usiz</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>asiz</name></name> <operator>=</operator> <name>siz</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>iwpool_alloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>siz</name></decl></parameter>, <parameter><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>siz</name> <operator>=</operator> <call><name>IW_ROUNDUP</name><argument_list>(<argument><expr><name>siz</name></expr></argument>, <argument><expr><name>IWPOOL_UNIT_ALIGN_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>usiz</name> <init>= <expr><name><name>pool</name><operator>-&gt;</operator><name>usiz</name></name> <operator>+</operator> <name>siz</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>SIZE_T_MAX</name> <operator>-</operator> <name><name>pool</name><operator>-&gt;</operator><name>usiz</name></name> <operator>&lt;</operator> <name>siz</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>pool</name><operator>-&gt;</operator><name>heap</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>usiz</name> <operator>&gt;</operator> <name><name>pool</name><operator>-&gt;</operator><name>asiz</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>SIZE_T_MAX</name> <operator>-</operator> <name><name>pool</name><operator>-&gt;</operator><name>asiz</name></name> <operator>&lt;</operator> <name>usiz</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>usiz</name> <operator>=</operator> <name>usiz</name> <operator>+</operator> <name><name>pool</name><operator>-&gt;</operator><name>asiz</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>iwpool_extend</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>usiz</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>pool</name><operator>-&gt;</operator><name>heap</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>usiz</name></name> <operator>+=</operator> <name>siz</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>heap</name></name> <operator>+=</operator> <name>siz</name></expr>;</expr_stmt>
  <return>return <expr><name>h</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>iwpool_calloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>siz</name></decl></parameter>, <parameter><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>iwpool_alloc</name><argument_list>(<argument><expr><name>siz</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>siz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>iwpool_strndup</name><parameter_list>(<parameter><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>iwrc</name> <modifier>*</modifier></type><name>rcp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>iwpool_alloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ret</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>iwpool_strdup</name><parameter_list>(<parameter><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>iwrc</name> <modifier>*</modifier></type><name>rcp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>iwpool_strndup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rcp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>iwpool_strdup2</name><parameter_list>(<parameter><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <return>return <expr><call><name>iwpool_strndup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>iwpool_strndup2</name><parameter_list>(<parameter><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <return>return <expr><call><name>iwpool_strndup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>int</name></type> <name>_iwpool_printf_estimate_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
  <return>return <expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>_iwpool_printf_va</name><parameter_list>(<parameter><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>wbuf</name> <init>= <expr><call><name>iwpool_alloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>wbuf</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>wbuf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>wbuf</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>iwpool_printf</name><parameter_list>(<parameter><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>_iwpool_printf_estimate_size</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>_iwpool_printf_va</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>iwpool_split_string</name><parameter_list>(
  <parameter><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>haystack</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>split_chars</name></decl></parameter>,
  <parameter><decl><type><name>bool</name></type> <name>ignore_whitespace</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>hsz</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>haystack</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>iwpool_alloc</name><argument_list>(<argument><expr><operator>(</operator><name>hsz</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sp</name> <init>= <expr><name>haystack</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ep</name> <init>= <expr><name>sp</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><operator>*</operator><name>ep</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr><operator>,</operator> <expr><operator>++</operator><name>ep</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name>ch</name> <init>= <expr><name><name>haystack</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sch</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>split_chars</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ep</name> <operator>&gt;=</operator> <name>sp</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>sch</name> <operator>||</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>ep</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>sch</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>ep</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>++</operator><name>ep</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>ignore_whitespace</name></expr>)</condition> <block>{<block_content>
        <while>while <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>sp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>++</operator><name>sp</name></expr>;</expr_stmt></block_content></block></while>
        <while>while <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>ep</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>--</operator><name>ep</name></expr>;</expr_stmt></block_content></block></while>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>ep</name> <operator>&gt;=</operator> <name>sp</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>iwpool_alloc</name><argument_list>(<argument><expr><name>ep</name> <operator>-</operator> <name>sp</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition> <block>{<block_content>
          <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>ep</name> <operator>-</operator> <name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>s</name><index>[<expr><name>ep</name> <operator>-</operator> <name>sp</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ret</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ep</name> <operator>=</operator> <name>haystack</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>sp</name> <operator>=</operator> <name>haystack</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name><name>ret</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>iwpool_printf_split</name><parameter_list>(
  <parameter><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>split_chars</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>ignore_whitespace</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>_iwpool_printf_estimate_size</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>iwpool_split_string</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>split_chars</name></expr></argument>, <argument><expr><name>ignore_whitespace</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwpool_free_fn</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>iwpool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwpool_user_data_set</name><parameter_list>(<parameter><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_fn</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pool</name><operator>-&gt;</operator><name>user_data_free_fn</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>pool</name><operator>-&gt;</operator><name>user_data_free_fn</name></name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>user_data_free_fn</name></name> <operator>=</operator> <name>free_fn</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>user_data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>iwpool_user_data_detach</name><parameter_list>(<parameter><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>user_data_free_fn</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><name><name>pool</name><operator>-&gt;</operator><name>user_data</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>iwpool_user_data_get</name><parameter_list>(<parameter><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name><name>pool</name><operator>-&gt;</operator><name>user_data</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>iwpool_allocated_size</name><parameter_list>(<parameter><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name><name>pool</name><operator>-&gt;</operator><name>asiz</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>iwpool_used_size</name><parameter_list>(<parameter><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name><name>pool</name><operator>-&gt;</operator><name>usiz</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwpool_destroy</name><parameter_list>(<parameter><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pool</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <for>for <control>(<init><decl><type><name>IWPOOL_UNIT</name> <modifier>*</modifier></type><name>u</name> <init>= <expr><name><name>pool</name><operator>-&gt;</operator><name>unit</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</init> <condition><expr><name>u</name></expr>;</condition> <incr><expr><name>u</name> <operator>=</operator> <name>next</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>u</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>u</name><operator>-&gt;</operator><name>heap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if <condition>(<expr><name><name>pool</name><operator>-&gt;</operator><name>user_data_free_fn</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>pool</name><operator>-&gt;</operator><name>user_data_free_fn</name></name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>user_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
