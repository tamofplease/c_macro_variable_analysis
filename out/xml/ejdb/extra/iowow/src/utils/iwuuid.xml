<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/extra/iowow/src/utils/iwuuid.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwuuid.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<union>union <name>_uuid</name> <block>{
  <decl_stmt><decl><type><name>uint8_t</name></type>  <name><name>byte</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name><name>rnd</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</union>

<comment type="line">// [a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}</comment>

<function><type><name>IW_INLINE</name> <name>bool</name></type> <name>_is_uuid_char</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><name>ch</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>&lt;=</operator> <literal type="char">'z'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ch</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ch</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>iwu_uuid_valid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uuid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>uuid</name> <operator>||</operator> <operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name>uuid</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>IW_UUID_STR_LEN</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_is_uuid_char</name><argument_list>(<argument><expr><name><name>uuid</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if <condition>(<expr><name><name>uuid</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>uuid</name> <operator>+=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_is_uuid_char</name><argument_list>(<argument><expr><name><name>uuid</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>false</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><name><name>uuid</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>uuid</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
  </block_content>}</block></for>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_is_uuid_char</name><argument_list>(<argument><expr><name><name>uuid</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwu_uuid4_fill</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name><name>dest</name><index>[<expr><specifier>static</specifier> <name>IW_UUID_STR_LEN</name></expr>]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>IW_UUID_STR_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>union</name> <name>_uuid</name></name></type> <name>uuid</name></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>uuid</name><operator>.</operator><name>rnd</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>iwu_rand_u32</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name><name>uuid</name><operator>.</operator><name>byte</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>uuid</name><operator>.</operator><name>byte</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x40</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>uuid</name><operator>.</operator><name>byte</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>uuid</name><operator>.</operator><name>byte</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>IW_UUID_STR_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x"</literal></expr></argument>,
           <argument><expr><name><name>uuid</name><operator>.</operator><name>byte</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
           <argument><expr><name><name>uuid</name><operator>.</operator><name>byte</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
           <argument><expr><name><name>uuid</name><operator>.</operator><name>byte</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
           <argument><expr><name><name>uuid</name><operator>.</operator><name>byte</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,
           <argument><expr><name><name>uuid</name><operator>.</operator><name>byte</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>,
           <argument><expr><name><name>uuid</name><operator>.</operator><name>byte</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>,
           <argument><expr><name><name>uuid</name><operator>.</operator><name>byte</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>,
           <argument><expr><name><name>uuid</name><operator>.</operator><name>byte</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>,
           <argument><expr><name><name>uuid</name><operator>.</operator><name>byte</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>,
           <argument><expr><name><name>uuid</name><operator>.</operator><name>byte</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>,
           <argument><expr><name><name>uuid</name><operator>.</operator><name>byte</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>,
           <argument><expr><name><name>uuid</name><operator>.</operator><name>byte</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>,
           <argument><expr><name><name>uuid</name><operator>.</operator><name>byte</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>,
           <argument><expr><name><name>uuid</name><operator>.</operator><name>byte</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>,
           <argument><expr><name><name>uuid</name><operator>.</operator><name>byte</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>,
           <argument><expr><name><name>uuid</name><operator>.</operator><name>byte</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>IW_UUID_STR_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
