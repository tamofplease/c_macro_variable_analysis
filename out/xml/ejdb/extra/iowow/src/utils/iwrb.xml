<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/extra/iowow/src/utils/iwrb.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwrb.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<function><type><name>IWRB</name><modifier>*</modifier></type> <name>iwrb_create</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>usize</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>IWRB</name> <modifier>*</modifier></type><name>rb</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>rb</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>usize</name> <operator>*</operator> <name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rb</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>rb</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rb</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rb</name><operator>-&gt;</operator><name>usize</name></name> <operator>=</operator> <name>usize</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rb</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>rb</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>rb</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <return>return <expr><name>rb</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwrb_destroy</name><parameter_list>(<parameter><decl><type><name>IWRB</name> <modifier>*</modifier><modifier>*</modifier></type><name>rbp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>rbp</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>rbp</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>rbp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>rbp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>IWRB</name><modifier>*</modifier></type> <name>iwrb_wrap</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>usize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>len</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>IWRB</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>usize</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>IWRB</name> <modifier>*</modifier></type><name>rb</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>rb</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rb</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <operator>(</operator><name>len</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>IWRB</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>/</operator> <name>usize</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rb</name><operator>-&gt;</operator><name>usize</name></name> <operator>=</operator> <name>usize</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rb</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>buf</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>rb</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <return>return <expr><name>rb</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwrb_put</name><parameter_list>(<parameter><decl><type><name>IWRB</name> <modifier>*</modifier></type><name>rb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>rb</name><operator>-&gt;</operator><name>pos</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>upos</name> <init>= <expr><ternary><condition><expr><name><name>rb</name><operator>-&gt;</operator><name>pos</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>rb</name><operator>-&gt;</operator><name>pos</name></name></expr> </then><else>: <expr><operator>-</operator><name><name>rb</name><operator>-&gt;</operator><name>pos</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>upos</name> <operator>==</operator> <name><name>rb</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>rb</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>rb</name><operator>-&gt;</operator><name>usize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>rb</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>rb</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>upos</name> <operator>*</operator> <name><name>rb</name><operator>-&gt;</operator><name>usize</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>rb</name><operator>-&gt;</operator><name>usize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>rb</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <ternary><condition><expr><name><name>rb</name><operator>-&gt;</operator><name>pos</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>rb</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name><name>rb</name><operator>-&gt;</operator><name>pos</name></name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>rb</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>rb</name><operator>-&gt;</operator><name>usize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rb</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwrb_back</name><parameter_list>(<parameter><decl><type><name>IWRB</name> <modifier>*</modifier></type><name>rb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>rb</name><operator>-&gt;</operator><name>pos</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>--</operator><name><name>rb</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>rb</name><operator>-&gt;</operator><name>pos</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>++</operator><name><name>rb</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>iwrb_peek</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>IWRB</name> <modifier>*</modifier></type><name>rb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>rb</name><operator>-&gt;</operator><name>pos</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>upos</name> <init>= <expr><ternary><condition><expr><name><name>rb</name><operator>-&gt;</operator><name>pos</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>rb</name><operator>-&gt;</operator><name>pos</name></name></expr> </then><else>: <expr><operator>-</operator><name><name>rb</name><operator>-&gt;</operator><name>pos</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <return>return <expr><name><name>rb</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <operator>(</operator><name>upos</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>rb</name><operator>-&gt;</operator><name>usize</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwrb_clear</name><parameter_list>(<parameter><decl><type><name>IWRB</name> <modifier>*</modifier></type><name>rb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>rb</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>iwrb_num_cached</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>IWRB</name> <modifier>*</modifier></type><name>rb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>rb</name><operator>-&gt;</operator><name>pos</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><name><name>rb</name><operator>-&gt;</operator><name>pos</name></name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name><name>rb</name><operator>-&gt;</operator><name>len</name></name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwrb_iter_init</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>IWRB</name> <modifier>*</modifier></type><name>rb</name></decl></parameter>, <parameter><decl><type><name>IWRB_ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>rb</name></name> <operator>=</operator> <name>rb</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <ternary><condition><expr><name><name>rb</name><operator>-&gt;</operator><name>pos</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>rb</name><operator>-&gt;</operator><name>pos</name></name></expr> </then><else>: <expr><operator>-</operator><name><name>rb</name><operator>-&gt;</operator><name>pos</name></name></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ipos</name></name> <operator>=</operator> <ternary><condition><expr><name><name>rb</name><operator>-&gt;</operator><name>pos</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><name><name>rb</name><operator>-&gt;</operator><name>pos</name></name></expr> </then><else>: <expr><name><name>rb</name><operator>-&gt;</operator><name>pos</name></name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>iwrb_iter_prev</name><parameter_list>(<parameter><decl><type><name>IWRB_ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>IWRB</name> <modifier>*</modifier></type><name>rb</name> <init>= <expr><name><name>iter</name><operator>-&gt;</operator><name>rb</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>ipos</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>rb</name><operator>-&gt;</operator><name>pos</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>pos</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>ipos</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ipos</name></name> <operator>=</operator> <operator>-</operator><name><name>iter</name><operator>-&gt;</operator><name>ipos</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name><name>rb</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <operator>--</operator><name><name>iter</name><operator>-&gt;</operator><name>pos</name></name> <operator>*</operator> <name><name>rb</name><operator>-&gt;</operator><name>usize</name></name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>pos</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name><name>rb</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>ipos</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ipos</name></name> <operator>=</operator> <operator>-</operator><name><name>iter</name><operator>-&gt;</operator><name>ipos</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>ipos</name></name> <operator>==</operator> <name><name>iter</name><operator>-&gt;</operator><name>pos</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ipos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name><name>rb</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <operator>--</operator><name><name>iter</name><operator>-&gt;</operator><name>pos</name></name> <operator>*</operator> <name><name>rb</name><operator>-&gt;</operator><name>usize</name></name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
