<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/extra/iowow/src/utils/iwhmap.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwhmap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"murmur3.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_BUCKETS</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STEPS</name></cpp:macro>       <cpp:value>4</cpp:value></cpp:define>

<struct_decl>struct <name>lru_node</name>;</struct_decl>

<typedef>typedef <type><struct>struct <name>entry</name> <block>{
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>lru_node</name></name> <modifier>*</modifier></type><name>lru_node</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>hash</name></decl>;</decl_stmt>
}</block></struct></type> <name>entry_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>entry_t</name> <modifier>*</modifier></type><name>entries</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>used</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>total</name></decl>;</decl_stmt>
}</block></struct></type> <name>bucket_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>lru_node</name> <block>{
  <decl_stmt><decl><type><name><name>struct</name> <name>lru_node</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>lru_node</name></name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
}</block></struct></type> <name>lru_node_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_IWHMAP</name> <block>{
  <decl_stmt><decl><type><name>uint32_t</name></type>  <name>count</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type>  <name>buckets_mask</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bucket_t</name> <modifier>*</modifier></type><name>buckets</name></decl>;</decl_stmt>

  <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>cmp_fn</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>uint32_t</name></type> (<modifier>*</modifier><name>hash_key_fn</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>kv_free_fn</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="line">// LRU</comment>
  <decl_stmt><decl><type><name><name>struct</name> <name>lru_node</name></name> <modifier>*</modifier></type><name>lru_first</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>lru_node</name></name> <modifier>*</modifier></type><name>lru_last</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwhmap_lru_eviction_needed</name></type> <name>lru_ev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>lru_ev_user_data</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>int_key_as_pointer_value</name></decl>;</decl_stmt>
}</block></struct></type> <name>hmap_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_noop_kv_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_noop_uint64_kv_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwhmap_kv_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>uint32_t</name></type> <name>_n_buckets</name><parameter_list>(<parameter><decl><type><name>hmap_t</name> <modifier>*</modifier></type><name>hm</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name><name>hm</name><operator>-&gt;</operator><name>buckets_mask</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_ptr_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>v1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>v2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><ternary><condition><expr><name>v1</name> <operator>&gt;</operator> <name>v2</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><ternary><condition><expr><name>v1</name> <operator>&lt;</operator> <name>v2</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_uint32_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>v1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>v2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>intptr_t</name></type> <name>p1</name> <init>= <expr><operator>(</operator><name>intptr_t</name><operator>)</operator> <name>v1</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>intptr_t</name></type> <name>p2</name> <init>= <expr><operator>(</operator><name>intptr_t</name><operator>)</operator> <name>v2</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><ternary><condition><expr><name>p1</name> <operator>&gt;</operator> <name>p2</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><ternary><condition><expr><name>p1</name> <operator>&lt;</operator> <name>p2</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_uint64_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>v1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>v2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>uintptr_t</name></expr></argument>)</argument_list></sizeof> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>intptr_t</name></type> <name>p1</name> <init>= <expr><operator>(</operator><name>intptr_t</name><operator>)</operator> <name>v1</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>intptr_t</name></type> <name>p2</name> <init>= <expr><operator>(</operator><name>intptr_t</name><operator>)</operator> <name>v2</name></expr></init></decl>;</decl_stmt>
    <return>return <expr><ternary><condition><expr><name>p1</name> <operator>&gt;</operator> <name>p2</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><ternary><condition><expr><name>p1</name> <operator>&lt;</operator> <name>p2</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>l1</name></decl>, <decl><type ref="prev"/><name>l2</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>l1</name></expr></argument>, <argument><expr><name>v1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>l1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>l2</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>l2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><ternary><condition><expr><name>l1</name> <operator>&gt;</operator> <name>l2</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><ternary><condition><expr><name>l1</name> <operator>&lt;</operator> <name>l2</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="line">// https://gist.github.com/badboy/6267743</comment>
<comment type="line">// https://nullprogram.com/blog/2018/07/31</comment>

<function><type><name>IW_INLINE</name> <name>uint32_t</name></type> <name>_hash_uint32</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>x</name> <operator>^=</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">17</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>x</name> <operator>*=</operator> <call><name>UINT32_C</name><argument_list>(<argument><expr><literal type="number">0xed5ad4bb</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>x</name> <operator>^=</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">11</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>x</name> <operator>*=</operator> <call><name>UINT32_C</name><argument_list>(<argument><expr><literal type="number">0xac4c1b51</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>x</name> <operator>^=</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>x</name> <operator>*=</operator> <call><name>UINT32_C</name><argument_list>(<argument><expr><literal type="number">0x31848bab</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>x</name> <operator>^=</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>
  <return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>uint32_t</name></type> <name>_hash_uint64</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>_hash_uint32</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>^</operator> <call><name>_hash_uint32</name><argument_list>(<argument><expr><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>uint32_t</name></type> <name>_hash_uint64_key</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>uintptr_t</name></expr></argument>)</argument_list></sizeof> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>_hash_uint64</name><argument_list>(<argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <name>key</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>lv</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lv</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>_hash_uint64</name><argument_list>(<argument><expr><name>lv</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>uint32_t</name></type> <name>_hash_uint32_key</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>_hash_uint32</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator> <name>key</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>uint32_t</name></type> <name>_hash_buf_key</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>murmur3</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>IWHMAP</name><modifier>*</modifier></type> <name>iwhmap_create</name><parameter_list>(
  <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>cmp_fn</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
  <parameter><function_decl><type><name>uint32_t</name></type> (<modifier>*</modifier><name>hash_key_fn</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
  <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>kv_free_fn</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>
  )</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>hash_key_fn</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmp_fn</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>cmp_fn</name> <operator>=</operator> <name>_ptr_cmp</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>kv_free_fn</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>kv_free_fn</name> <operator>=</operator> <name>_noop_kv_free</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>hmap_t</name> <modifier>*</modifier></type><name>hm</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>hm</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>hm</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>hm</name><operator>-&gt;</operator><name>buckets</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>MIN_BUCKETS</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hm</name><operator>-&gt;</operator><name>buckets</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>hm</name><operator>-&gt;</operator><name>buckets</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>hm</name><operator>-&gt;</operator><name>cmp_fn</name></name> <operator>=</operator> <name>cmp_fn</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hm</name><operator>-&gt;</operator><name>hash_key_fn</name></name> <operator>=</operator> <name>hash_key_fn</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hm</name><operator>-&gt;</operator><name>kv_free_fn</name></name> <operator>=</operator> <name>kv_free_fn</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hm</name><operator>-&gt;</operator><name>buckets_mask</name></name> <operator>=</operator> <name>MIN_BUCKETS</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hm</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hm</name><operator>-&gt;</operator><name>lru_first</name></name> <operator>=</operator> <name><name>hm</name><operator>-&gt;</operator><name>lru_last</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hm</name><operator>-&gt;</operator><name>lru_ev</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hm</name><operator>-&gt;</operator><name>lru_ev_user_data</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hm</name><operator>-&gt;</operator><name>int_key_as_pointer_value</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <return>return <expr><name>hm</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>IWHMAP</name><modifier>*</modifier></type> <name>iwhmap_create_u64</name><parameter_list>(<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>kv_free_fn</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>kv_free_fn</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>kv_free_fn</name> <operator>=</operator> <name>_noop_uint64_kv_free</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>hmap_t</name> <modifier>*</modifier></type><name>hm</name> <init>= <expr><call><name>iwhmap_create</name><argument_list>(<argument><expr><name>_uint64_cmp</name></expr></argument>, <argument><expr><name>_hash_uint64_key</name></expr></argument>, <argument><expr><name>kv_free_fn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>hm</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>uintptr_t</name></expr></argument>)</argument_list></sizeof> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>hm</name><operator>-&gt;</operator><name>int_key_as_pointer_value</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>hm</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>IWHMAP</name><modifier>*</modifier></type> <name>iwhmap_create_u32</name><parameter_list>(<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>kv_free_fn</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>hmap_t</name> <modifier>*</modifier></type><name>hm</name> <init>= <expr><call><name>iwhmap_create</name><argument_list>(<argument><expr><name>_uint32_cmp</name></expr></argument>, <argument><expr><name>_hash_uint32_key</name></expr></argument>, <argument><expr><name>kv_free_fn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>hm</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>hm</name><operator>-&gt;</operator><name>int_key_as_pointer_value</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>hm</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>IWHMAP</name><modifier>*</modifier></type> <name>iwhmap_create_str</name><parameter_list>(<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>kv_free_fn</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>iwhmap_create</name><argument_list>(<argument><expr><operator>(</operator><call><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>void</name><operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name><operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator> <name>strcmp</name></expr></argument>, <argument><expr><name>_hash_buf_key</name></expr></argument>, <argument><expr><name>kv_free_fn</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>entry_t</name><modifier>*</modifier></type> <name>_entry_find</name><parameter_list>(<parameter><decl><type><name>IWHMAP</name> <modifier>*</modifier></type><name>hm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>hash</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bucket_t</name> <modifier>*</modifier></type><name>bucket</name> <init>= <expr><name><name>hm</name><operator>-&gt;</operator><name>buckets</name></name> <operator>+</operator> <operator>(</operator><name>hash</name> <operator>&amp;</operator> <name><name>hm</name><operator>-&gt;</operator><name>buckets_mask</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>entry_t</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><name><name>bucket</name><operator>-&gt;</operator><name>entries</name></name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>entry_t</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>entry</name> <operator>+</operator> <name><name>bucket</name><operator>-&gt;</operator><name>used</name></name></expr></init></decl>;</init> <condition><expr><name>entry</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><operator>++</operator><name>entry</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>hash</name> <operator>==</operator> <name><name>entry</name><operator>-&gt;</operator><name>hash</name></name> <operator>&amp;&amp;</operator> <call><name><name>hm</name><operator>-&gt;</operator><name>cmp_fn</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>entry</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>entry_t</name><modifier>*</modifier></type> <name>_entry_add</name><parameter_list>(<parameter><decl><type><name>IWHMAP</name> <modifier>*</modifier></type><name>hm</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>hash</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>entry_t</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bucket_t</name> <modifier>*</modifier></type><name>bucket</name> <init>= <expr><name><name>hm</name><operator>-&gt;</operator><name>buckets</name></name> <operator>+</operator> <operator>(</operator><name>hash</name> <operator>&amp;</operator> <name><name>hm</name><operator>-&gt;</operator><name>buckets_mask</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>bucket</name><operator>-&gt;</operator><name>used</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name><name>bucket</name><operator>-&gt;</operator><name>total</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>UINT32_MAX</name> <operator>-</operator> <name><name>bucket</name><operator>-&gt;</operator><name>total</name></name> <operator>&lt;</operator> <name>STEPS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EOVERFLOW</name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>new_total</name> <init>= <expr><name><name>bucket</name><operator>-&gt;</operator><name>total</name></name> <operator>+</operator> <name>STEPS</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>entry_t</name> <modifier>*</modifier></type><name>new_entries</name> <init>= <expr><call><name>realloc</name><argument_list>(<argument><expr><name><name>bucket</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>, <argument><expr><name>new_total</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>new_entries</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_entries</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>bucket</name><operator>-&gt;</operator><name>entries</name></name> <operator>=</operator> <name>new_entries</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>bucket</name><operator>-&gt;</operator><name>total</name></name> <operator>=</operator> <name>new_total</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>entry</name> <operator>=</operator> <name><name>bucket</name><operator>-&gt;</operator><name>entries</name></name></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>entry_t</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>entry</name> <operator>+</operator> <name><name>bucket</name><operator>-&gt;</operator><name>used</name></name></expr></init></decl>;</init> <condition><expr><name>entry</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><operator>++</operator><name>entry</name></expr></incr>)</control> <block>{<block_content>
    <comment type="line">// NOLINTNEXTLINE (clang-analyzer-core.UndefinedBinaryOperatorResult)</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>hash</name> <operator>==</operator> <name><name>entry</name><operator>-&gt;</operator><name>hash</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>hm</name><operator>-&gt;</operator><name>cmp_fn</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>entry</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><operator>++</operator><name><name>bucket</name><operator>-&gt;</operator><name>used</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>++</operator><name><name>hm</name><operator>-&gt;</operator><name>count</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>hash</name></name> <operator>=</operator> <name>hash</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>lru_node</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <return>return <expr><name>entry</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_rehash</name><parameter_list>(<parameter><decl><type><name>hmap_t</name> <modifier>*</modifier></type><name>hm</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>num_buckets</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bucket_t</name> <modifier>*</modifier></type><name>buckets</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><name>num_buckets</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>buckets</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>buckets</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>num_buckets</name> <operator>&amp;</operator> <operator>(</operator><name>num_buckets</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>num_buckets</name> <operator>!=</operator> <call><name>_n_buckets</name><argument_list>(<argument><expr><name>hm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>bucket_t</name> <modifier>*</modifier></type><name>bucket</name></decl>,
           <decl><type ref="prev"><modifier>*</modifier></type><name>bucket_end</name> <init>= <expr><name><name>hm</name><operator>-&gt;</operator><name>buckets</name></name> <operator>+</operator> <call><name>_n_buckets</name><argument_list>(<argument><expr><name>hm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>hmap_t</name></type> <name>hm_copy</name> <init>= <expr><operator>*</operator><name>hm</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>hm_copy</name><operator>.</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hm_copy</name><operator>.</operator><name>buckets_mask</name></name> <operator>=</operator> <name>num_buckets</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hm_copy</name><operator>.</operator><name>buckets</name></name> <operator>=</operator> <name>buckets</name></expr>;</expr_stmt>

  <for>for <control>(<init><expr><name>bucket</name> <operator>=</operator> <name><name>hm</name><operator>-&gt;</operator><name>buckets</name></name></expr>;</init> <condition><expr><name>bucket</name> <operator>&lt;</operator> <name>bucket_end</name></expr>;</condition> <incr><expr><operator>++</operator><name>bucket</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>entry_t</name> <modifier>*</modifier></type><name>entry_old</name> <init>= <expr><name><name>bucket</name><operator>-&gt;</operator><name>entries</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>entry_old</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>entry_t</name> <modifier>*</modifier></type><name>entry_old_end</name> <init>= <expr><name>entry_old</name> <operator>+</operator> <name><name>bucket</name><operator>-&gt;</operator><name>used</name></name></expr></init></decl>;</decl_stmt>
      <for>for <control>( <init>;</init> <condition><expr><name>entry_old</name> <operator>&lt;</operator> <name>entry_old_end</name></expr>;</condition> <incr><expr><operator>++</operator><name>entry_old</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>entry_t</name> <modifier>*</modifier></type><name>entry_new</name> <init>= <expr><call><name>_entry_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hm_copy</name></expr></argument>, <argument><expr><name><name>entry_old</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>entry_old</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>entry_new</name></expr>)</condition> <block>{<block_content>
          <goto>goto <name>fail</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>entry_new</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name><name>entry_old</name><operator>-&gt;</operator><name>key</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>entry_new</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name><name>entry_old</name><operator>-&gt;</operator><name>val</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>entry_new</name><operator>-&gt;</operator><name>lru_node</name></name> <operator>=</operator> <name><name>entry_old</name><operator>-&gt;</operator><name>lru_node</name></name></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init><expr><name>bucket</name> <operator>=</operator> <name><name>hm</name><operator>-&gt;</operator><name>buckets</name></name></expr>;</init> <condition><expr><name>bucket</name> <operator>&lt;</operator> <name>bucket_end</name></expr>;</condition> <incr><expr><operator>++</operator><name>bucket</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>bucket</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>hm</name><operator>-&gt;</operator><name>buckets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hm</name><operator>-&gt;</operator><name>buckets</name></name> <operator>=</operator> <name>buckets</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hm</name><operator>-&gt;</operator><name>buckets_mask</name></name> <operator>=</operator> <name>num_buckets</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>hm</name><operator>-&gt;</operator><name>count</name></name> <operator>==</operator> <name><name>hm_copy</name><operator>.</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return;</return>

<label><name>fail</name>:</label>
  <for>for <control>(<init><expr><name>bucket_end</name> <operator>=</operator> <name>bucket</name></expr><operator>,</operator> <expr><name>bucket</name> <operator>=</operator> <name><name>hm</name><operator>-&gt;</operator><name>buckets</name></name></expr>;</init> <condition><expr><name>bucket</name> <operator>&lt;</operator> <name>bucket_end</name></expr>;</condition> <incr><expr><operator>++</operator><name>bucket</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>bucket</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buckets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_lru_entry_update</name><parameter_list>(<parameter><decl><type><name>IWHMAP</name> <modifier>*</modifier></type><name>hm</name></decl></parameter>, <parameter><decl><type><name>entry_t</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>lru_node</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>lru_node</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>lru_node</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>lru_node</name></name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><name><name>entry</name><operator>-&gt;</operator><name>lru_node</name><operator>-&gt;</operator><name>prev</name></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>prev</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>lru_node</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>hm</name><operator>-&gt;</operator><name>lru_first</name></name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>lru_node</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>lru_node</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hm</name><operator>-&gt;</operator><name>lru_last</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>lru_node</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>lru_node</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>lru_node</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>hm</name><operator>-&gt;</operator><name>lru_last</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hm</name><operator>-&gt;</operator><name>lru_last</name></name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>lru_node</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>lru_node</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>entry</name><operator>-&gt;</operator><name>lru_node</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>lru_node</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>lru_node</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>hm</name><operator>-&gt;</operator><name>lru_last</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>hm</name><operator>-&gt;</operator><name>lru_last</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>lru_node</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>lru_node</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>lru_node</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>hm</name><operator>-&gt;</operator><name>lru_last</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hm</name><operator>-&gt;</operator><name>lru_last</name></name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>lru_node</name></name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>hm</name><operator>-&gt;</operator><name>lru_first</name></name> <operator>=</operator> <name><name>hm</name><operator>-&gt;</operator><name>lru_last</name></name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>lru_node</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>lru_node</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>lru_node</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_lru_entry_remove</name><parameter_list>(<parameter><decl><type><name>IWHMAP</name> <modifier>*</modifier></type><name>hm</name></decl></parameter>, <parameter><decl><type><name>entry_t</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>lru_node</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>lru_node</name></name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><name><name>entry</name><operator>-&gt;</operator><name>lru_node</name><operator>-&gt;</operator><name>prev</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>prev</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>lru_node</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>hm</name><operator>-&gt;</operator><name>lru_first</name></name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>lru_node</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>lru_node</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>lru_node</name><operator>-&gt;</operator><name>prev</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>lru_node</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hm</name><operator>-&gt;</operator><name>lru_last</name></name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>lru_node</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>hm</name><operator>-&gt;</operator><name>lru_last</name></name> <operator>=</operator> <name><name>hm</name><operator>-&gt;</operator><name>lru_first</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>lru_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>lru_node</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>iwhmap_get</name><parameter_list>(<parameter><decl><type><name>IWHMAP</name> <modifier>*</modifier></type><name>hm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>hash</name> <init>= <expr><call><name><name>hm</name><operator>-&gt;</operator><name>hash_key_fn</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>entry_t</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><call><name>_entry_find</name><argument_list>(<argument><expr><name>hm</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>entry</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>hm</name><operator>-&gt;</operator><name>lru_ev</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>_lru_entry_update</name><argument_list>(<argument><expr><name>hm</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name><name>entry</name><operator>-&gt;</operator><name>val</name></name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_entry_remove</name><parameter_list>(<parameter><decl><type><name>IWHMAP</name> <modifier>*</modifier></type><name>hm</name></decl></parameter>, <parameter><decl><type><name>bucket_t</name> <modifier>*</modifier></type><name>bucket</name></decl></parameter>, <parameter><decl><type><name>entry_t</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>lru_node</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_lru_entry_remove</name><argument_list>(<argument><expr><name>hm</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name><name>hm</name><operator>-&gt;</operator><name>kv_free_fn</name></name><argument_list>(<argument><expr><ternary><condition><expr><name><name>hm</name><operator>-&gt;</operator><name>int_key_as_pointer_value</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></else></ternary></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>bucket</name><operator>-&gt;</operator><name>used</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>entry_t</name> <modifier>*</modifier></type><name>entry_last</name> <init>= <expr><name><name>bucket</name><operator>-&gt;</operator><name>entries</name></name> <operator>+</operator> <name><name>bucket</name><operator>-&gt;</operator><name>used</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>entry</name> <operator>!=</operator> <name>entry_last</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>entry_last</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>--</operator><name><name>bucket</name><operator>-&gt;</operator><name>used</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>--</operator><name><name>hm</name><operator>-&gt;</operator><name>count</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>hm</name><operator>-&gt;</operator><name>buckets_mask</name></name> <operator>&gt;</operator> <name>MIN_BUCKETS</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>hm</name><operator>-&gt;</operator><name>count</name></name> <operator>&lt;</operator> <name><name>hm</name><operator>-&gt;</operator><name>buckets_mask</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_rehash</name><argument_list>(<argument><expr><name>hm</name></expr></argument>, <argument><expr><call><name>_n_buckets</name><argument_list>(<argument><expr><name>hm</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>steps_used</name> <init>= <expr><name><name>bucket</name><operator>-&gt;</operator><name>used</name></name> <operator>/</operator> <name>STEPS</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>steps_total</name> <init>= <expr><name><name>bucket</name><operator>-&gt;</operator><name>total</name></name> <operator>/</operator> <name>STEPS</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>steps_used</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>steps_total</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>entry_t</name> <modifier>*</modifier></type><name>entries_new</name> <init>= <expr><call><name>realloc</name><argument_list>(<argument><expr><name><name>bucket</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>, <argument><expr><operator>(</operator><name>steps_used</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>STEPS</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>entries_new</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>entries_new</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>bucket</name><operator>-&gt;</operator><name>entries</name></name> <operator>=</operator> <name>entries_new</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>bucket</name><operator>-&gt;</operator><name>total</name></name> <operator>=</operator> <operator>(</operator><name>steps_used</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>STEPS</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>iwhmap_remove</name><parameter_list>(<parameter><decl><type><name>IWHMAP</name> <modifier>*</modifier></type><name>hm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>hash</name> <init>= <expr><call><name><name>hm</name><operator>-&gt;</operator><name>hash_key_fn</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bucket_t</name> <modifier>*</modifier></type><name>bucket</name> <init>= <expr><name><name>hm</name><operator>-&gt;</operator><name>buckets</name></name> <operator>+</operator> <operator>(</operator><name>hash</name> <operator>&amp;</operator> <name><name>hm</name><operator>-&gt;</operator><name>buckets_mask</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>entry_t</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><call><name>_entry_find</name><argument_list>(<argument><expr><name>hm</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>entry</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_entry_remove</name><argument_list>(<argument><expr><name>hm</name></expr></argument>, <argument><expr><name>bucket</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>iwhmap_remove_u64</name><parameter_list>(<parameter><decl><type><name>IWHMAP</name> <modifier>*</modifier></type><name>hm</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>hm</name><operator>-&gt;</operator><name>int_key_as_pointer_value</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwhmap_remove</name><argument_list>(<argument><expr><name>hm</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator> <name>key</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><call><name>iwhmap_remove</name><argument_list>(<argument><expr><name>hm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>iwhmap_remove_u32</name><parameter_list>(<parameter><decl><type><name>IWHMAP</name> <modifier>*</modifier></type><name>hm</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>iwhmap_remove</name><argument_list>(<argument><expr><name>hm</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator> <name>key</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwhmap_put</name><parameter_list>(<parameter><decl><type><name>IWHMAP</name> <modifier>*</modifier></type><name>hm</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>hash</name> <init>= <expr><call><name><name>hm</name><operator>-&gt;</operator><name>hash_key_fn</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>entry_t</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><call><name>_entry_add</name><argument_list>(<argument><expr><name>hm</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>entry</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ERRNO</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name><name>hm</name><operator>-&gt;</operator><name>kv_free_fn</name></name><argument_list>(<argument><expr><ternary><condition><expr><name><name>hm</name><operator>-&gt;</operator><name>int_key_as_pointer_value</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></else></ternary></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hm</name><operator>-&gt;</operator><name>lru_ev</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_lru_entry_update</name><argument_list>(<argument><expr><name>hm</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hm</name><operator>-&gt;</operator><name>count</name></name> <operator>&gt;</operator> <name><name>hm</name><operator>-&gt;</operator><name>buckets_mask</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_rehash</name><argument_list>(<argument><expr><name>hm</name></expr></argument>, <argument><expr><call><name>_n_buckets</name><argument_list>(<argument><expr><name>hm</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <while>while <condition>(<expr><name><name>hm</name><operator>-&gt;</operator><name>lru_first</name></name> <operator>&amp;&amp;</operator> <call><name><name>hm</name><operator>-&gt;</operator><name>lru_ev</name></name><argument_list>(<argument><expr><name>hm</name></expr></argument>, <argument><expr><name><name>hm</name><operator>-&gt;</operator><name>lru_ev_user_data</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name><name>hm</name><operator>-&gt;</operator><name>hash_key_fn</name></name><argument_list>(<argument><expr><name><name>hm</name><operator>-&gt;</operator><name>lru_first</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>bucket_t</name> <modifier>*</modifier></type><name>bucket</name> <init>= <expr><name><name>hm</name><operator>-&gt;</operator><name>buckets</name></name> <operator>+</operator> <operator>(</operator><name>hash</name> <operator>&amp;</operator> <name><name>hm</name><operator>-&gt;</operator><name>buckets_mask</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>_entry_find</name><argument_list>(<argument><expr><name>hm</name></expr></argument>, <argument><expr><name><name>hm</name><operator>-&gt;</operator><name>lru_first</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Should never be zero.</comment>
    <expr_stmt><expr><call><name>_entry_remove</name><argument_list>(<argument><expr><name>hm</name></expr></argument>, <argument><expr><name>bucket</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwhmap_put_str</name><parameter_list>(<parameter><decl><type><name>IWHMAP</name> <modifier>*</modifier></type><name>hm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key_</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><name>key_</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>key</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>iwhmap_put</name><argument_list>(<argument><expr><name>hm</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwhmap_rename</name><parameter_list>(<parameter><decl><type><name>IWHMAP</name> <modifier>*</modifier></type><name>hm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key_old</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key_new</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>hash</name> <init>= <expr><call><name><name>hm</name><operator>-&gt;</operator><name>hash_key_fn</name></name><argument_list>(<argument><expr><name>key_old</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>entry_t</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><call><name>_entry_find</name><argument_list>(<argument><expr><name>hm</name></expr></argument>, <argument><expr><name>key_old</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bucket_t</name> <modifier>*</modifier></type><name>bucket</name> <init>= <expr><name><name>hm</name><operator>-&gt;</operator><name>buckets</name></name> <operator>+</operator> <operator>(</operator><name>hash</name> <operator>&amp;</operator> <name><name>hm</name><operator>-&gt;</operator><name>buckets_mask</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>entry</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><name><name>entry</name><operator>-&gt;</operator><name>val</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_entry_remove</name><argument_list>(<argument><expr><name>hm</name></expr></argument>, <argument><expr><name>bucket</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name><name>hm</name><operator>-&gt;</operator><name>hash_key_fn</name></name><argument_list>(<argument><expr><name>key_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>_entry_add</name><argument_list>(<argument><expr><name>hm</name></expr></argument>, <argument><expr><name>key_new</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>entry</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ERRNO</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>hm</name><operator>-&gt;</operator><name>kv_free_fn</name></name><argument_list>(<argument><expr><ternary><condition><expr><name><name>hm</name><operator>-&gt;</operator><name>int_key_as_pointer_value</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></else></ternary></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>key_new</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>hm</name><operator>-&gt;</operator><name>lru_ev</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>_lru_entry_update</name><argument_list>(<argument><expr><name>hm</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwhmap_put_u32</name><parameter_list>(<parameter><decl><type><name>IWHMAP</name> <modifier>*</modifier></type><name>hm</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>iwhmap_put</name><argument_list>(<argument><expr><name>hm</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator> <name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwhmap_put_u64</name><parameter_list>(<parameter><decl><type><name>IWHMAP</name> <modifier>*</modifier></type><name>hm</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>hm</name><operator>-&gt;</operator><name>int_key_as_pointer_value</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwhmap_put</name><argument_list>(<argument><expr><name>hm</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator> <name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>kv</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>kv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>kv</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>kv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>kv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>iwhmap_put</name><argument_list>(<argument><expr><name>hm</name></expr></argument>, <argument><expr><name>kv</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>iwhmap_get_u64</name><parameter_list>(<parameter><decl><type><name>IWHMAP</name> <modifier>*</modifier></type><name>hm</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>hm</name><operator>-&gt;</operator><name>int_key_as_pointer_value</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwhmap_get</name><argument_list>(<argument><expr><name>hm</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <operator>(</operator><name>intptr_t</name><operator>)</operator> <name>key</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><call><name>iwhmap_get</name><argument_list>(<argument><expr><name>hm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>iwhmap_get_u32</name><parameter_list>(<parameter><decl><type><name>IWHMAP</name> <modifier>*</modifier></type><name>hm</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>iwhmap_get</name><argument_list>(<argument><expr><name>hm</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <operator>(</operator><name>intptr_t</name><operator>)</operator> <name>key</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>iwhmap_count</name><parameter_list>(<parameter><decl><type><name>IWHMAP</name> <modifier>*</modifier></type><name>hm</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name><name>hm</name><operator>-&gt;</operator><name>count</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwhmap_iter_init</name><parameter_list>(<parameter><decl><type><name>IWHMAP</name> <modifier>*</modifier></type><name>hm</name></decl></parameter>, <parameter><decl><type><name>IWHMAP_ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>hm</name></name> <operator>=</operator> <name>hm</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>entry</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>bucket</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>iwhmap_iter_next</name><parameter_list>(<parameter><decl><type><name>IWHMAP_ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>iter</name><operator>-&gt;</operator><name>hm</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>entry_t</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bucket_t</name> <modifier>*</modifier></type><name>bucket</name> <init>= <expr><name><name>iter</name><operator>-&gt;</operator><name>hm</name><operator>-&gt;</operator><name>buckets</name></name> <operator>+</operator> <name><name>iter</name><operator>-&gt;</operator><name>bucket</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><operator>++</operator><name><name>iter</name><operator>-&gt;</operator><name>entry</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>iter</name><operator>-&gt;</operator><name>entry</name></name> <operator>&gt;=</operator> <name><name>bucket</name><operator>-&gt;</operator><name>used</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>n</name> <init>= <expr><call><name>_n_buckets</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>hm</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>entry</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for <control>(<init><expr><operator>++</operator><name><name>iter</name><operator>-&gt;</operator><name>bucket</name></name></expr>;</init> <condition><expr><name><name>iter</name><operator>-&gt;</operator><name>bucket</name></name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name><name>iter</name><operator>-&gt;</operator><name>bucket</name></name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>bucket</name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>hm</name><operator>-&gt;</operator><name>buckets</name></name> <operator>+</operator> <name><name>iter</name><operator>-&gt;</operator><name>bucket</name></name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>bucket</name><operator>-&gt;</operator><name>used</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>bucket</name></name> <operator>&gt;=</operator> <name>n</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>entry</name> <operator>=</operator> <name><name>bucket</name><operator>-&gt;</operator><name>entries</name></name> <operator>+</operator> <name><name>iter</name><operator>-&gt;</operator><name>entry</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>val</name></name></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwhmap_clear</name><parameter_list>(<parameter><decl><type><name>IWHMAP</name> <modifier>*</modifier></type><name>hm</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>hm</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <for>for <control>(<init><decl><type><name>bucket_t</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><name><name>hm</name><operator>-&gt;</operator><name>buckets</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>be</name> <init>= <expr><name><name>hm</name><operator>-&gt;</operator><name>buckets</name></name> <operator>+</operator> <call><name>_n_buckets</name><argument_list>(<argument><expr><name>hm</name></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <name>be</name></expr>;</condition> <incr><expr><operator>++</operator><name>b</name></expr></incr>)</control> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>entry_t</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name><name>b</name><operator>-&gt;</operator><name>entries</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ee</name> <init>= <expr><name><name>b</name><operator>-&gt;</operator><name>entries</name></name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>used</name></name></expr></init></decl>;</init> <condition><expr><name>e</name> <operator>&lt;</operator> <name>ee</name></expr>;</condition> <incr><expr><operator>++</operator><name>e</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>hm</name><operator>-&gt;</operator><name>kv_free_fn</name></name><argument_list>(<argument><expr><ternary><condition><expr><name><name>hm</name><operator>-&gt;</operator><name>int_key_as_pointer_value</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>e</name><operator>-&gt;</operator><name>key</name></name></expr></else></ternary></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>total</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>entries</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if <condition>(<expr><call><name>_n_buckets</name><argument_list>(<argument><expr><name>hm</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>MIN_BUCKETS</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>bucket_t</name> <modifier>*</modifier></type><name>buckets_new</name> <init>= <expr><call><name>realloc</name><argument_list>(<argument><expr><name><name>hm</name><operator>-&gt;</operator><name>buckets</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>buckets_new</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>MIN_BUCKETS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>buckets_new</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buckets_new</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>buckets_new</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>MIN_BUCKETS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hm</name><operator>-&gt;</operator><name>buckets</name></name> <operator>=</operator> <name>buckets_new</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hm</name><operator>-&gt;</operator><name>buckets_mask</name></name> <operator>=</operator> <name>MIN_BUCKETS</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>hm</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwhmap_destroy</name><parameter_list>(<parameter><decl><type><name>IWHMAP</name> <modifier>*</modifier></type><name>hm</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>hm</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <for>for <control>(<init><decl><type><name>bucket_t</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><name><name>hm</name><operator>-&gt;</operator><name>buckets</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>be</name> <init>= <expr><name><name>hm</name><operator>-&gt;</operator><name>buckets</name></name> <operator>+</operator> <call><name>_n_buckets</name><argument_list>(<argument><expr><name>hm</name></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <name>be</name></expr>;</condition> <incr><expr><operator>++</operator><name>b</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>entries</name></name></expr>)</condition> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>entry_t</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name><name>b</name><operator>-&gt;</operator><name>entries</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ee</name> <init>= <expr><name><name>b</name><operator>-&gt;</operator><name>entries</name></name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>used</name></name></expr></init></decl>;</init> <condition><expr><name>e</name> <operator>&lt;</operator> <name>ee</name></expr>;</condition> <incr><expr><operator>++</operator><name>e</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>hm</name><operator>-&gt;</operator><name>kv_free_fn</name></name><argument_list>(<argument><expr><ternary><condition><expr><name><name>hm</name><operator>-&gt;</operator><name>int_key_as_pointer_value</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>e</name><operator>-&gt;</operator><name>key</name></name></expr></else></ternary></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <for>for <control>(<init><decl><type><name>lru_node_t</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><name><name>hm</name><operator>-&gt;</operator><name>lru_first</name></name></expr></init></decl>;</init> <condition><expr><name>n</name></expr>;</condition> <incr/>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>lru_node_t</name> <modifier>*</modifier></type><name>nn</name> <init>= <expr><name><name>n</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <name>nn</name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>hm</name><operator>-&gt;</operator><name>buckets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>iwhmap_lru_eviction_max_count</name><parameter_list>(<parameter><decl><type><name>IWHMAP</name> <modifier>*</modifier></type><name>hm</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>max_count_val</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>max_count</name> <init>= <expr><operator>(</operator><name>uintptr_t</name><operator>)</operator> <name>max_count_val</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>iwhmap_count</name><argument_list>(<argument><expr><name>hm</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>max_count</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwhmap_lru_init</name><parameter_list>(<parameter><decl><type><name>IWHMAP</name> <modifier>*</modifier></type><name>hm</name></decl></parameter>, <parameter><decl><type><name>iwhmap_lru_eviction_needed</name></type> <name>ev</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ev_user_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>hm</name><operator>-&gt;</operator><name>lru_ev</name></name> <operator>=</operator> <name>ev</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hm</name><operator>-&gt;</operator><name>lru_ev_user_data</name></name> <operator>=</operator> <name>ev_user_data</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
