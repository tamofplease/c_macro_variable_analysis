<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/extra/iowow/src/utils/iwtp.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwtp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwth.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwarr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<struct>struct <name>task</name> <block>{
  <decl_stmt><decl><type><name>iwtp_task_f</name></type> <name>fn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>       <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>task</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>iwtp</name> <block>{
  <decl_stmt><decl><type><name><name>struct</name> <name>task</name></name>    <modifier>*</modifier></type><name>head</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>task</name></name>    <modifier>*</modifier></type><name>tail</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>mtx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>pthread_cond_t</name></type>  <name>cond</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWULIST</name></type> <name>threads</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>thread_name_prefix</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>   <name>num_threads</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>   <name>num_threads_busy</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>   <name>overflow_threads_factor</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>   <name>queue_limit</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>   <name>queue_size</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>warn_on_overflow_thread_spawn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>shutdown</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>_worker_fn</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>iwrc</name></type> <name>iwtp_schedule</name><parameter_list>(<parameter><decl><type><name>IWTP</name></type> <name>tp</name></decl></parameter>, <parameter><decl><type><name>iwtp_task_f</name></type> <name>fn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>tp</name> <operator>||</operator> <operator>!</operator><name>fn</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>task</name></name> <modifier>*</modifier></type><name>task</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>task</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCA</name><argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>task</name> <operator>=</operator> <operator>(</operator>struct <name>task</name><operator>)</operator> <block>{
    <expr><operator>.</operator><name>fn</name> <operator>=</operator> <name>fn</name></expr>,
    <expr><operator>.</operator><name>arg</name> <operator>=</operator> <name>arg</name></expr>
  }</block></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>tp</name><operator>-&gt;</operator><name>queue_limit</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>tp</name><operator>-&gt;</operator><name>queue_size</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name><name>tp</name><operator>-&gt;</operator><name>queue_limit</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_OVERFLOW</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwlog_error</name><argument_list>(<argument><expr><literal type="string">"iwtp | Reached  thread pool queue size limit: %d"</literal></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>queue_limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>tp</name><operator>-&gt;</operator><name>tail</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>tail</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>task</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>task</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>task</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>task</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><operator>++</operator><name><name>tp</name><operator>-&gt;</operator><name>queue_size</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(  <expr><name><name>tp</name><operator>-&gt;</operator><name>queue_size</name></name> <operator>&gt;</operator> <literal type="number">1</literal>
     <operator>&amp;&amp;</operator> <name><name>tp</name><operator>-&gt;</operator><name>num_threads_busy</name></name> <operator>&gt;=</operator> <name><name>tp</name><operator>-&gt;</operator><name>num_threads</name></name>
     <operator>&amp;&amp;</operator> <call><name>iwulist_length</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>threads</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>tp</name><operator>-&gt;</operator><name>num_threads</name></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name><name>tp</name><operator>-&gt;</operator><name>overflow_threads_factor</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>pthread_t</name></type> <name>th</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rci</name> <init>= <expr><call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>th</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>_worker_fn</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>rci</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwlog_ecode_error2</name><argument_list>(<argument><expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_THREADING_ERRNO</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"iwtp | Failed to create and overflow thread"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>pthread_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>_worker_fn</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>iwtp</name></name> <modifier>*</modifier></type><name>tp</name> <init>= <expr><name>op</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>pthread_t</name></type> <name>st</name> <init>= <expr><call><name>pthread_self</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>idx</name> <init>= <expr><call><name>iwulist_length</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>threads</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>iwulist_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>threads</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>tp</name><operator>-&gt;</operator><name>thread_name_prefix</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>nbuf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <name><name>tp</name><operator>-&gt;</operator><name>num_threads</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>nbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s%zd+"</literal></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>thread_name_prefix</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>tp</name><operator>-&gt;</operator><name>warn_on_overflow_thread_spawn</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>iwlog_warn</name><argument_list>(<argument><expr><literal type="string">"iwtp | Overflow thread spawned: %s%zd+"</literal></expr></argument>,
                   <argument><expr><ternary><condition><expr><name><name>tp</name><operator>-&gt;</operator><name>thread_name_prefix</name></name></expr> ?</condition><then> <expr><name><name>tp</name><operator>-&gt;</operator><name>thread_name_prefix</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>nbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s%zd"</literal></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>thread_name_prefix</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>iwp_set_current_thread_name</name><argument_list>(<argument><expr><name>nbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>iwtp_task_f</name></type> <name>fn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>++</operator><name><name>tp</name><operator>-&gt;</operator><name>num_threads_busy</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>tp</name><operator>-&gt;</operator><name>head</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>task</name></name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>tp</name><operator>-&gt;</operator><name>head</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>fn</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>fn</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>arg</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>arg</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>tp</name><operator>-&gt;</operator><name>head</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><operator>--</operator><name><name>tp</name><operator>-&gt;</operator><name>queue_size</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>fn</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>fn</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>--</operator><name><name>tp</name><operator>-&gt;</operator><name>num_threads_busy</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <name><name>tp</name><operator>-&gt;</operator><name>num_threads</name></name></expr>)</condition> <block>{<block_content>
      <comment type="line">// Overflow thread will be terminated immediately.</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>tp</name><operator>-&gt;</operator><name>shutdown</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>iwulist_remove_first_by</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>threads</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pthread_detach</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>tp</name><operator>-&gt;</operator><name>head</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>tp</name><operator>-&gt;</operator><name>shutdown</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>pthread_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwtp_start_by_spec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iwtp_spec</name></name> <modifier>*</modifier></type><name>spec</name></decl></parameter>, <parameter><decl><type><name>IWTP</name> <modifier>*</modifier></type><name>out_tp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>spec</name> <operator>||</operator> <operator>!</operator><name>out_tp</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>spec</name><operator>-&gt;</operator><name>thread_name_prefix</name></name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>spec</name><operator>-&gt;</operator><name>thread_name_prefix</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>num_threads</name> <init>= <expr><name><name>spec</name><operator>-&gt;</operator><name>num_threads</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>num_threads</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>num_threads</name> <operator>=</operator> <call><name>iwp_num_cpu_cores</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>num_threads</name> <operator>&gt;</operator> <literal type="number">1023</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>num_threads</name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>queue_limit</name> <init>= <expr><name><name>spec</name><operator>-&gt;</operator><name>queue_limit</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>queue_limit</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>queue_limit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>overflow_threads_factor</name> <init>= <expr><name><name>spec</name><operator>-&gt;</operator><name>overflow_threads_factor</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>overflow_threads_factor</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>overflow_threads_factor</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>iwtp</name></name> <modifier>*</modifier></type><name>tp</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>tp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>tp</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>tp</name> <operator>=</operator> <operator>(</operator>struct <name>iwtp</name><operator>)</operator> <block>{
    <expr><operator>.</operator><name>warn_on_overflow_thread_spawn</name> <operator>=</operator> <name><name>spec</name><operator>-&gt;</operator><name>warn_on_overflow_thread_spawn</name></name></expr>,
    <expr><operator>.</operator><name>overflow_threads_factor</name> <operator>=</operator> <name>overflow_threads_factor</name></expr>,
    <expr><operator>.</operator><name>num_threads</name> <operator>=</operator> <name>num_threads</name></expr>,
    <expr><operator>.</operator><name>queue_limit</name> <operator>=</operator> <name>queue_limit</name></expr>,
    <expr><operator>.</operator><name>mtx</name> <operator>=</operator> <name>PTHREAD_MUTEX_INITIALIZER</name></expr>,
    <expr><operator>.</operator><name>cond</name> <operator>=</operator> <name>PTHREAD_COND_INITIALIZER</name></expr>
  }</block></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>spec</name><operator>-&gt;</operator><name>thread_name_prefix</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>thread_name_prefix</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>spec</name><operator>-&gt;</operator><name>thread_name_prefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwulist_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>threads</name></name></expr></argument>, <argument><expr><name>num_threads</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pthread_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_threads</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>pthread_t</name></type> <name>th</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rci</name> <init>= <expr><call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>th</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>_worker_fn</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>rci</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_THREADING_ERRNO</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><call><name>IW_UNLIKELY</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>out_tp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwtp_shutdown</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tp</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>out_tp</name> <operator>=</operator> <name>tp</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwtp_start</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>thread_name_prefix</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_threads</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>queue_limit</name></decl></parameter>, <parameter><decl><type><name>IWTP</name> <modifier>*</modifier></type><name>out_tp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <macro><name>iwtp_start_by_spec</name><argument_list>(<argument>&amp;(struct iwtp_spec) {
    .thread_name_prefix = thread_name_prefix</argument>,
    <argument>.num_threads = num_threads</argument>,
    <argument>.queue_limit = queue_limit
  }</argument>, <argument>out_tp</argument>)</argument_list></macro>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwtp_shutdown</name><parameter_list>(<parameter><decl><type><name>IWTP</name> <modifier>*</modifier></type><name>tpp</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>wait_for_all</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>tpp</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>tpp</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>IWTP</name></type> <name>tp</name> <init>= <expr><operator>*</operator><name>tpp</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWULIST</name> <modifier>*</modifier></type><name>joinlist</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>pthread_t</name></type> <name>st</name> <init>= <expr><call><name>pthread_self</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>iwulist_find_first</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>threads</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwlog_error</name><argument_list>(<argument><expr><literal type="string">"iwtp | Calling iwtp_shutdown() from one of managed thread: %lu"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>IW_ERROR_ASSERTION</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>tp</name><operator>-&gt;</operator><name>shutdown</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>tpp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>shutdown</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>wait_for_all</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>task</name></name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name><name>tp</name><operator>-&gt;</operator><name>head</name></name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>t</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>task</name></name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name>t</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>queue_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>joinlist</name> <operator>=</operator> <call><name>iwulist_clone</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>threads</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_cond_broadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>l</name> <init>= <expr><call><name>iwulist_length</name><argument_list>(<argument><expr><name>joinlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>l</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>pthread_t</name></type> <name>t</name> <init>= <expr><operator>*</operator><operator>(</operator><name>pthread_t</name><operator>*</operator><operator>)</operator> <call><name>iwulist_at2</name><argument_list>(<argument><expr><name>joinlist</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>pthread_join</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>pthread_cond_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>iwulist_destroy_keep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>threads</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>iwulist_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>joinlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>tp</name><operator>-&gt;</operator><name>thread_name_prefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>iwtp_queue_size</name><parameter_list>(<parameter><decl><type><name>IWTP</name></type> <name>tp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>res</name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>queue_size</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>
</unit>
