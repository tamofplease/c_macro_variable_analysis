<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/extra/iowow/src/utils/iwarr.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwarr.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sort_r.h"</cpp:file></cpp:include>

<function><type><name>off_t</name></type> <name>iwarr_sorted_insert</name><parameter_list>(
  <parameter><decl><type><name>void</name><modifier>*</modifier> <specifier>restrict</specifier></type> <name>els</name></decl></parameter>,
  <parameter><decl><type><name>size_t</name></type> <name>nels</name></decl></parameter>,
  <parameter><decl><type><name>size_t</name></type> <name>elsize</name></decl></parameter>,
  <parameter><decl><type><name>void</name><modifier>*</modifier> <specifier>restrict</specifier></type> <name>eptr</name></decl></parameter>,
  <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>cmp</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
  <parameter><decl><type><name>bool</name></type> <name>skipeq</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EL</name><parameter_list>(<parameter><type><name>idx_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(elsptr + (idx_) * elsize)</cpp:value></cpp:define>

  <decl_stmt><decl><type><name>off_t</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
        <decl><type ref="prev"/><name>lb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
        <decl><type ref="prev"/><name>ub</name> <init>= <expr><name>nels</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>elsptr</name> <init>= <expr><name>els</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>nels</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>els</name></expr></argument>, <argument><expr><name>eptr</name></expr></argument>, <argument><expr><name>elsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>idx</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>cr</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>idx</name> <operator>=</operator> <operator>(</operator><name>ub</name> <operator>+</operator> <name>lb</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>cr</name> <operator>=</operator> <call><name>cmp</name><argument_list>(<argument><expr><call><name>EL</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>eptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>cr</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>skipeq</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cr</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>lb</name> <operator>=</operator> <name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>lb</name> <operator>&gt;</operator> <name>ub</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>idx</name> <operator>=</operator> <name>lb</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>ub</name> <operator>=</operator> <name>idx</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>lb</name> <operator>&gt;</operator> <name>ub</name></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><call><name>EL</name><argument_list>(<argument><expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>EL</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>nels</name> <operator>-</operator> <name>idx</name><operator>)</operator> <operator>*</operator> <name>elsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>EL</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>eptr</name></expr></argument>, <argument><expr><name>elsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>idx</name></expr>;</return>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EL</name></cpp:undef>
</block_content>}</block></function>

<function><type><name>off_t</name></type> <name>iwarr_sorted_remove</name><parameter_list>(
  <parameter><decl><type><name>void</name><modifier>*</modifier> <specifier>restrict</specifier></type> <name>els</name></decl></parameter>,
  <parameter><decl><type><name>size_t</name></type> <name>nels</name></decl></parameter>,
  <parameter><decl><type><name>size_t</name></type> <name>elsize</name></decl></parameter>,
  <parameter><decl><type><name>void</name><modifier>*</modifier> <specifier>restrict</specifier></type> <name>eptr</name></decl></parameter>,
  <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>cmp</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>
  )</parameter_list> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EL</name><parameter_list>(<parameter><type><name>idx_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(elsptr + (idx_) * elsize)</cpp:value></cpp:define>

  <decl_stmt><decl><type><name>off_t</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
        <decl><type ref="prev"/><name>lb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
        <decl><type ref="prev"/><name>ub</name> <init>= <expr><name>nels</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>elsptr</name> <init>= <expr><name>els</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>nels</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>cr</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>idx</name> <operator>=</operator> <operator>(</operator><name>ub</name> <operator>+</operator> <name>lb</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>cr</name> <operator>=</operator> <call><name>cmp</name><argument_list>(<argument><expr><call><name>EL</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>eptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>cr</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <name>nels</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><call><name>EL</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>EL</name><argument_list>(<argument><expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>nels</name> <operator>-</operator> <name>idx</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>elsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><name>idx</name></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cr</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>lb</name> <operator>=</operator> <name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>lb</name> <operator>&gt;</operator> <name>ub</name></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>ub</name> <operator>=</operator> <name>idx</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>lb</name> <operator>&gt;</operator> <name>ub</name></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EL</name></cpp:undef>
</block_content>}</block></function>

<function><type><name>off_t</name></type> <name>iwarr_sorted_find</name><parameter_list>(
  <parameter><decl><type><name>void</name><modifier>*</modifier> <specifier>restrict</specifier></type> <name>els</name></decl></parameter>,
  <parameter><decl><type><name>size_t</name></type> <name>nels</name></decl></parameter>,
  <parameter><decl><type><name>size_t</name></type> <name>elsize</name></decl></parameter>,
  <parameter><decl><type><name>void</name><modifier>*</modifier> <specifier>restrict</specifier></type> <name>eptr</name></decl></parameter>,
  <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>cmp</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>
  )</parameter_list> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EL</name><parameter_list>(<parameter><type><name>idx_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(elsptr + (idx_) * elsize)</cpp:value></cpp:define>

  <decl_stmt><decl><type><name>off_t</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
        <decl><type ref="prev"/><name>lb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
        <decl><type ref="prev"/><name>ub</name> <init>= <expr><name>nels</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>elsptr</name> <init>= <expr><name>els</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>nels</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>cr</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>idx</name> <operator>=</operator> <operator>(</operator><name>ub</name> <operator>+</operator> <name>lb</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>cr</name> <operator>=</operator> <call><name>cmp</name><argument_list>(<argument><expr><call><name>EL</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>eptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>cr</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>idx</name></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cr</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>lb</name> <operator>=</operator> <name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>lb</name> <operator>&gt;</operator> <name>ub</name></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>ub</name> <operator>=</operator> <name>idx</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>lb</name> <operator>&gt;</operator> <name>ub</name></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EL</name></cpp:undef>
</block_content>}</block></function>

<function><type><name>off_t</name></type> <name>iwarr_sorted_find2</name><parameter_list>(
  <parameter><decl><type><name>void</name><modifier>*</modifier> <specifier>restrict</specifier></type> <name>els</name></decl></parameter>,
  <parameter><decl><type><name>size_t</name></type> <name>nels</name></decl></parameter>,
  <parameter><decl><type><name>size_t</name></type> <name>elsize</name></decl></parameter>,
  <parameter><decl><type><name>void</name><modifier>*</modifier> <specifier>restrict</specifier></type> <name>eptr</name></decl></parameter>,
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>op</name></decl></parameter>,
  <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>found</name></decl></parameter>,
  <parameter><function_decl><type><name>iwrc</name></type> (<modifier>*</modifier><name>cmp</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list></function_decl></parameter>
  )</parameter_list> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EL</name><parameter_list>(<parameter><type><name>idx_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(elsptr + (idx_) * elsize)</cpp:value></cpp:define>

  <decl_stmt><decl><type><name>off_t</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
        <decl><type ref="prev"/><name>lb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
        <decl><type ref="prev"/><name>ub</name> <init>= <expr><name>nels</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>elsptr</name> <init>= <expr><name>els</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>nels</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>cr</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>idx</name> <operator>=</operator> <operator>(</operator><name>ub</name> <operator>+</operator> <name>lb</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>cmp</name><argument_list>(<argument><expr><call><name>EL</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>eptr</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>cr</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <return>return <expr><name>idx</name></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cr</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>lb</name> <operator>=</operator> <name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>lb</name> <operator>&gt;</operator> <name>ub</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>idx</name> <operator>=</operator> <name>lb</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>ub</name> <operator>=</operator> <name>idx</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>lb</name> <operator>&gt;</operator> <name>ub</name></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><operator>*</operator><name>found</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <return>return <expr><name>idx</name></expr>;</return>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EL</name></cpp:undef>
</block_content>}</block></function>

<comment type="line" format="doxygen">///////////////////////////////////////////////////////////////////////////</comment>
<comment type="line">//                     Fixed sized item list                             //</comment>
<comment type="line" format="doxygen">///////////////////////////////////////////////////////////////////////////</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IWULIST_ALLOC_UNIT</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<function><type><name>iwrc</name></type> <name>iwulist_init</name><parameter_list>(<parameter><decl><type><name>IWULIST</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>initial_length</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>unit_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>usize</name></name> <operator>=</operator> <name>unit_size</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>initial_length</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>initial_length</name> <operator>=</operator> <name>IWULIST_ALLOC_UNIT</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>anum</name></name> <operator>=</operator> <name>initial_length</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>array</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>unit_size</name> <operator>*</operator> <name>initial_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>list</name><operator>-&gt;</operator><name>array</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>IWULIST</name><modifier>*</modifier></type> <name>iwulist_create</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>initial_length</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>unit_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>IWULIST</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>list</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>list</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>iwulist_init</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>initial_length</name></expr></argument>, <argument><expr><name>unit_size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>list</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwulist_clear</name><parameter_list>(<parameter><decl><type><name>IWULIST</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>list</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>iwulist_init</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>IWULIST_ALLOC_UNIT</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>usize</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwulist_destroy_keep</name><parameter_list>(<parameter><decl><type><name>IWULIST</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>list</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>list</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwulist_destroy</name><parameter_list>(<parameter><decl><type><name>IWULIST</name> <modifier>*</modifier><modifier>*</modifier></type><name>listp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>listp</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>listp</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwulist_destroy_keep</name><argument_list>(<argument><expr><operator>*</operator><name>listp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>listp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>listp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>iwulist_length</name><parameter_list>(<parameter><decl><type><name>IWULIST</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name><name>list</name><operator>-&gt;</operator><name>num</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>IWULIST</name><modifier>*</modifier></type> <name>iwulist_clone</name><parameter_list>(<parameter><decl><type><name>IWULIST</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>list</name><operator>-&gt;</operator><name>num</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwulist_create</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>anum</name></name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>usize</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>IWULIST</name> <modifier>*</modifier></type><name>nlist</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>nlist</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>nlist</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>anum</name> <init>= <expr><ternary><condition><expr><name><name>list</name><operator>-&gt;</operator><name>num</name></name> <operator>&gt;</operator> <name>IWULIST_ALLOC_UNIT</name></expr> ?</condition><then> <expr><name><name>list</name><operator>-&gt;</operator><name>num</name></name></expr> </then><else>: <expr><name>IWULIST_ALLOC_UNIT</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>nlist</name><operator>-&gt;</operator><name>array</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>anum</name> <operator>*</operator> <name><name>list</name><operator>-&gt;</operator><name>usize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>nlist</name><operator>-&gt;</operator><name>array</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>nlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>nlist</name><operator>-&gt;</operator><name>array</name></name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>array</name></name> <operator>+</operator> <name><name>list</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>num</name></name> <operator>*</operator> <name><name>list</name><operator>-&gt;</operator><name>usize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>nlist</name><operator>-&gt;</operator><name>usize</name></name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>usize</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>nlist</name><operator>-&gt;</operator><name>num</name></name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>num</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>nlist</name><operator>-&gt;</operator><name>anum</name></name> <operator>=</operator> <name>anum</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>nlist</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><name>nlist</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>iwulist_at</name><parameter_list>(<parameter><decl><type><name>IWULIST</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>iwrc</name> <modifier>*</modifier></type><name>orc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>orc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <name><name>list</name><operator>-&gt;</operator><name>num</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>orc</name> <operator>=</operator> <name>IW_ERROR_OUT_OF_BOUNDS</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>index</name> <operator>+=</operator> <name><name>list</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>
  <return>return <expr><name><name>list</name><operator>-&gt;</operator><name>array</name></name> <operator>+</operator> <name>index</name> <operator>*</operator> <name><name>list</name><operator>-&gt;</operator><name>usize</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>iwulist_at2</name><parameter_list>(<parameter><decl><type><name>IWULIST</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <name><name>list</name><operator>-&gt;</operator><name>num</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>index</name> <operator>+=</operator> <name><name>list</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>
  <return>return <expr><name><name>list</name><operator>-&gt;</operator><name>array</name></name> <operator>+</operator> <name>index</name> <operator>*</operator> <name><name>list</name><operator>-&gt;</operator><name>usize</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwulist_push</name><parameter_list>(<parameter><decl><type><name>IWULIST</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>index</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>start</name></name> <operator>+</operator> <name><name>list</name><operator>-&gt;</operator><name>num</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <name><name>list</name><operator>-&gt;</operator><name>anum</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>anum</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>anum</name></name> <operator>+</operator> <name><name>list</name><operator>-&gt;</operator><name>num</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>nptr</name> <init>= <expr><call><name>realloc</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>array</name></name></expr></argument>, <argument><expr><name>anum</name> <operator>*</operator> <name><name>list</name><operator>-&gt;</operator><name>usize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>nptr</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>anum</name></name> <operator>=</operator> <name>anum</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>array</name></name> <operator>=</operator> <name>nptr</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>array</name></name> <operator>+</operator> <name>index</name> <operator>*</operator> <name><name>list</name><operator>-&gt;</operator><name>usize</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>usize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>++</operator><name><name>list</name><operator>-&gt;</operator><name>num</name></name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwulist_pop</name><parameter_list>(<parameter><decl><type><name>IWULIST</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>list</name><operator>-&gt;</operator><name>num</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_OUT_OF_BOUNDS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>num</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>num</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>list</name><operator>-&gt;</operator><name>anum</name></name> <operator>&gt;</operator> <name>IWULIST_ALLOC_UNIT</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>list</name><operator>-&gt;</operator><name>anum</name></name> <operator>&gt;=</operator> <name>num</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>list</name><operator>-&gt;</operator><name>start</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>array</name></name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>array</name></name> <operator>+</operator> <name><name>list</name><operator>-&gt;</operator><name>start</name></name> <operator>*</operator> <name><name>list</name><operator>-&gt;</operator><name>usize</name></name></expr></argument>, <argument><expr><name>num</name> <operator>*</operator> <name><name>list</name><operator>-&gt;</operator><name>usize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>anum</name> <init>= <expr><ternary><condition><expr><name>num</name> <operator>&gt;</operator> <name>IWULIST_ALLOC_UNIT</name></expr> ?</condition><then> <expr><name>num</name></expr> </then><else>: <expr><name>IWULIST_ALLOC_UNIT</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>nptr</name> <init>= <expr><call><name>realloc</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>array</name></name></expr></argument>, <argument><expr><name>anum</name> <operator>*</operator> <name><name>list</name><operator>-&gt;</operator><name>usize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>nptr</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>anum</name></name> <operator>=</operator> <name>anum</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>array</name></name> <operator>=</operator> <name>nptr</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>num</name></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwulist_shift</name><parameter_list>(<parameter><decl><type><name>IWULIST</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>list</name><operator>-&gt;</operator><name>num</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_OUT_OF_BOUNDS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>num</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>num</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>start</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>start</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>list</name><operator>-&gt;</operator><name>anum</name></name> <operator>&gt;</operator> <name>IWULIST_ALLOC_UNIT</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>list</name><operator>-&gt;</operator><name>anum</name></name> <operator>&gt;=</operator> <name>num</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>start</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>array</name></name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>array</name></name> <operator>+</operator> <name>start</name> <operator>*</operator> <name><name>list</name><operator>-&gt;</operator><name>usize</name></name></expr></argument>, <argument><expr><name>num</name> <operator>*</operator> <name><name>list</name><operator>-&gt;</operator><name>usize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>anum</name> <init>= <expr><ternary><condition><expr><name>num</name> <operator>&gt;</operator> <name>IWULIST_ALLOC_UNIT</name></expr> ?</condition><then> <expr><name>num</name></expr> </then><else>: <expr><name>IWULIST_ALLOC_UNIT</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>nptr</name> <init>= <expr><call><name>realloc</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>array</name></name></expr></argument>, <argument><expr><name>anum</name> <operator>*</operator> <name><name>list</name><operator>-&gt;</operator><name>usize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>nptr</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>anum</name></name> <operator>=</operator> <name>anum</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>array</name></name> <operator>=</operator> <name>nptr</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>num</name></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwulist_insert</name><parameter_list>(<parameter><decl><type><name>IWULIST</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;</operator> <name><name>list</name><operator>-&gt;</operator><name>num</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_OUT_OF_BOUNDS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>index</name> <operator>+=</operator> <name><name>list</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>list</name><operator>-&gt;</operator><name>start</name></name> <operator>+</operator> <name><name>list</name><operator>-&gt;</operator><name>num</name></name> <operator>&gt;=</operator> <name><name>list</name><operator>-&gt;</operator><name>anum</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>anum</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>anum</name></name> <operator>+</operator> <name><name>list</name><operator>-&gt;</operator><name>num</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>nptr</name> <init>= <expr><call><name>realloc</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>array</name></name></expr></argument>, <argument><expr><name>anum</name> <operator>*</operator> <name><name>list</name><operator>-&gt;</operator><name>usize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>nptr</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>anum</name></name> <operator>=</operator> <name>anum</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>array</name></name> <operator>=</operator> <name>nptr</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>array</name></name> <operator>+</operator> <operator>(</operator><name>index</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>list</name><operator>-&gt;</operator><name>usize</name></name></expr></argument>,
          <argument><expr><name><name>list</name><operator>-&gt;</operator><name>array</name></name> <operator>+</operator> <name>index</name> <operator>*</operator> <name><name>list</name><operator>-&gt;</operator><name>usize</name></name></expr></argument>,
          <argument><expr><operator>(</operator><name><name>list</name><operator>-&gt;</operator><name>start</name></name> <operator>+</operator> <name><name>list</name><operator>-&gt;</operator><name>num</name></name> <operator>-</operator> <name>index</name><operator>)</operator> <operator>*</operator> <name><name>list</name><operator>-&gt;</operator><name>usize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>array</name></name> <operator>+</operator> <name>index</name> <operator>*</operator> <name><name>list</name><operator>-&gt;</operator><name>usize</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>usize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>++</operator><name><name>list</name><operator>-&gt;</operator><name>num</name></name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwulist_set</name><parameter_list>(<parameter><decl><type><name>IWULIST</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <name><name>list</name><operator>-&gt;</operator><name>num</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_OUT_OF_BOUNDS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>index</name> <operator>+=</operator> <name><name>list</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>array</name></name> <operator>+</operator> <name>index</name> <operator>*</operator> <name><name>list</name><operator>-&gt;</operator><name>usize</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>usize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwulist_remove</name><parameter_list>(<parameter><decl><type><name>IWULIST</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <name><name>list</name><operator>-&gt;</operator><name>num</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_OUT_OF_BOUNDS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>index</name> <operator>+=</operator> <name><name>list</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>--</operator><name><name>list</name><operator>-&gt;</operator><name>num</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>array</name></name> <operator>+</operator> <name>index</name> <operator>*</operator> <name><name>list</name><operator>-&gt;</operator><name>usize</name></name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>array</name></name> <operator>+</operator> <operator>(</operator><name>index</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>list</name><operator>-&gt;</operator><name>usize</name></name></expr></argument>,
          <argument><expr><operator>(</operator><name><name>list</name><operator>-&gt;</operator><name>start</name></name> <operator>+</operator> <name><name>list</name><operator>-&gt;</operator><name>num</name></name> <operator>-</operator> <name>index</name><operator>)</operator> <operator>*</operator> <name><name>list</name><operator>-&gt;</operator><name>usize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>list</name><operator>-&gt;</operator><name>anum</name></name> <operator>&gt;</operator> <name>IWULIST_ALLOC_UNIT</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>list</name><operator>-&gt;</operator><name>anum</name></name> <operator>&gt;=</operator> <name><name>list</name><operator>-&gt;</operator><name>num</name></name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>list</name><operator>-&gt;</operator><name>start</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>array</name></name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>array</name></name> <operator>+</operator> <name><name>list</name><operator>-&gt;</operator><name>start</name></name> <operator>*</operator> <name><name>list</name><operator>-&gt;</operator><name>usize</name></name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>num</name></name> <operator>*</operator> <name><name>list</name><operator>-&gt;</operator><name>usize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>anum</name> <init>= <expr><ternary><condition><expr><name><name>list</name><operator>-&gt;</operator><name>num</name></name> <operator>&gt;</operator> <name>IWULIST_ALLOC_UNIT</name></expr> ?</condition><then> <expr><name><name>list</name><operator>-&gt;</operator><name>num</name></name></expr> </then><else>: <expr><name>IWULIST_ALLOC_UNIT</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>nptr</name> <init>= <expr><call><name>realloc</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>array</name></name></expr></argument>, <argument><expr><name>anum</name> <operator>*</operator> <name><name>list</name><operator>-&gt;</operator><name>usize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>nptr</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>anum</name></name> <operator>=</operator> <name>anum</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>array</name></name> <operator>=</operator> <name>nptr</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>iwulist_remove_first_by</name><parameter_list>(<parameter><decl><type><name>IWULIST</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data_ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>start</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>list</name><operator>-&gt;</operator><name>start</name></name> <operator>+</operator> <name><name>list</name><operator>-&gt;</operator><name>num</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>array</name></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>list</name><operator>-&gt;</operator><name>usize</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>data_ptr</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>usize</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>iwulist_remove</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <name><name>list</name><operator>-&gt;</operator><name>start</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ssize_t</name></type> <name>iwulist_find_first</name><parameter_list>(<parameter><decl><type><name>IWULIST</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data_ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>start</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>list</name><operator>-&gt;</operator><name>start</name></name> <operator>+</operator> <name><name>list</name><operator>-&gt;</operator><name>num</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>array</name></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>list</name><operator>-&gt;</operator><name>usize</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>data_ptr</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>usize</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>i</name> <operator>-</operator> <name><name>list</name><operator>-&gt;</operator><name>start</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwulist_unshift</name><parameter_list>(<parameter><decl><type><name>IWULIST</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>list</name><operator>-&gt;</operator><name>start</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>list</name><operator>-&gt;</operator><name>num</name></name> <operator>&gt;=</operator> <name><name>list</name><operator>-&gt;</operator><name>anum</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>size_t</name></type> <name>anum</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>anum</name></name> <operator>+</operator> <name><name>list</name><operator>-&gt;</operator><name>num</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>nptr</name> <init>= <expr><call><name>realloc</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>array</name></name></expr></argument>, <argument><expr><name>anum</name> <operator>*</operator> <name><name>list</name><operator>-&gt;</operator><name>usize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>nptr</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>anum</name></name> <operator>=</operator> <name>anum</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>array</name></name> <operator>=</operator> <name>nptr</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>anum</name></name> <operator>-</operator> <name><name>list</name><operator>-&gt;</operator><name>num</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>array</name></name> <operator>+</operator> <name><name>list</name><operator>-&gt;</operator><name>start</name></name> <operator>*</operator> <name><name>list</name><operator>-&gt;</operator><name>usize</name></name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>array</name></name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>num</name></name> <operator>*</operator> <name><name>list</name><operator>-&gt;</operator><name>usize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>array</name></name> <operator>+</operator> <operator>(</operator><name><name>list</name><operator>-&gt;</operator><name>start</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>list</name><operator>-&gt;</operator><name>usize</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>usize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>--</operator><name><name>list</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>++</operator><name><name>list</name><operator>-&gt;</operator><name>num</name></name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwulist_sort</name><parameter_list>(<parameter><decl><type><name>IWULIST</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>compar</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>sort_r</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>array</name></name> <operator>+</operator> <name><name>list</name><operator>-&gt;</operator><name>start</name></name> <operator>*</operator> <name><name>list</name><operator>-&gt;</operator><name>usize</name></name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>usize</name></name></expr></argument>, <argument><expr><name>compar</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line" format="doxygen">///////////////////////////////////////////////////////////////////////////</comment>
<comment type="line">//                      Array list implementation                        //</comment>
<comment type="line" format="doxygen">///////////////////////////////////////////////////////////////////////////</comment>

<function><type><name>iwrc</name></type> <name>iwlist_init</name><parameter_list>(<parameter><decl><type><name>IWLIST</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>anum</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>anum</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>anum</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>anum</name></name> <operator>=</operator> <name>anum</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>array</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>anum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>list</name><operator>-&gt;</operator><name>array</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>IWLIST</name><modifier>*</modifier></type> <name>iwlist_create</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>anum</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>IWLIST</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>list</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>list</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>iwlist_init</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>anum</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>list</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwlist_destroy_keep</name><parameter_list>(<parameter><decl><type><name>IWLIST</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>list</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>IWLISTITEM</name> <modifier>*</modifier></type><name>array</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>array</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>array</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>size_t</name></type> <name>end</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>start</name></name> <operator>+</operator> <name><name>list</name><operator>-&gt;</operator><name>num</name></name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>start</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>array</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>anum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwlist_destroy</name><parameter_list>(<parameter><decl><type><name>IWLIST</name> <modifier>*</modifier><modifier>*</modifier></type><name>listp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>listp</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>listp</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwlist_destroy_keep</name><argument_list>(<argument><expr><operator>*</operator><name>listp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>listp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>listp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>iwlist_length</name><parameter_list>(<parameter><decl><type><name>IWLIST</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name><name>list</name><operator>-&gt;</operator><name>num</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>IWLIST</name><modifier>*</modifier></type> <name>iwlist_clone</name><parameter_list>(<parameter><decl><type><name>IWLIST</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>num</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>num</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>num</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwlist_create</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>IWLIST</name> <modifier>*</modifier></type><name>nlist</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>nlist</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>nlist</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>IWLISTITEM</name> <modifier>*</modifier></type><name>array</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>array</name></name> <operator>+</operator> <name><name>list</name><operator>-&gt;</operator><name>start</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWLISTITEM</name> <modifier>*</modifier></type><name>narray</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>narray</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>num</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>narray</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>nlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>narray</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>narray</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>narray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>nlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>narray</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name></expr></argument>, <argument><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name></expr></argument>, <argument><expr><name>size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name><name>nlist</name><operator>-&gt;</operator><name>anum</name></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>nlist</name><operator>-&gt;</operator><name>array</name></name> <operator>=</operator> <name>narray</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>nlist</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>nlist</name><operator>-&gt;</operator><name>num</name></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
  <return>return <expr><name>nlist</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>iwlist_at</name><parameter_list>(<parameter><decl><type><name>IWLIST</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>osize</name></decl></parameter>, <parameter><decl><type><name>iwrc</name> <modifier>*</modifier></type><name>orc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>orc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <name><name>list</name><operator>-&gt;</operator><name>num</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>orc</name> <operator>=</operator> <name>IW_ERROR_OUT_OF_BOUNDS</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>index</name> <operator>+=</operator> <name><name>list</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>osize</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>osize</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name><name>list</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>val</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>iwlist_at2</name><parameter_list>(<parameter><decl><type><name>IWLIST</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>osize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <name><name>list</name><operator>-&gt;</operator><name>num</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>index</name> <operator>+=</operator> <name><name>list</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>osize</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>osize</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name><name>list</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>val</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwlist_push</name><parameter_list>(<parameter><decl><type><name>IWLIST</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>data_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>index</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>start</name></name> <operator>+</operator> <name><name>list</name><operator>-&gt;</operator><name>num</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <name><name>list</name><operator>-&gt;</operator><name>anum</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>anum</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>anum</name></name> <operator>+</operator> <name><name>list</name><operator>-&gt;</operator><name>num</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>nptr</name> <init>= <expr><call><name>realloc</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>array</name></name></expr></argument>, <argument><expr><name>anum</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>nptr</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>anum</name></name> <operator>=</operator> <name>anum</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>array</name></name> <operator>=</operator> <name>nptr</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>IWLISTITEM</name> <modifier>*</modifier></type><name>array</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>array</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>array</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>data_size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>array</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>val</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>array</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>val</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>array</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name><name>val</name><index>[<expr><name>data_size</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>array</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <name>data_size</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>num</name></name><operator>++</operator></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>iwlist_pop</name><parameter_list>(<parameter><decl><type><name>IWLIST</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>osize</name></decl></parameter>, <parameter><decl><type><name>iwrc</name> <modifier>*</modifier></type><name>orc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>orc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>list</name><operator>-&gt;</operator><name>num</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>orc</name> <operator>=</operator> <name>IW_ERROR_OUT_OF_BOUNDS</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>index</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>start</name></name> <operator>+</operator> <name><name>list</name><operator>-&gt;</operator><name>num</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>--</operator><name><name>list</name><operator>-&gt;</operator><name>num</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>osize</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>osize</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name><name>list</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>val</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwlist_unshift</name><parameter_list>(<parameter><decl><type><name>IWLIST</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>data_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>list</name><operator>-&gt;</operator><name>start</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>list</name><operator>-&gt;</operator><name>num</name></name> <operator>&gt;=</operator> <name><name>list</name><operator>-&gt;</operator><name>anum</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>size_t</name></type> <name>anum</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>anum</name></name> <operator>+</operator> <name><name>list</name><operator>-&gt;</operator><name>num</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>nptr</name> <init>= <expr><call><name>realloc</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>array</name></name></expr></argument>, <argument><expr><name>anum</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>nptr</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>anum</name></name> <operator>=</operator> <name>anum</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>array</name></name> <operator>=</operator> <name>nptr</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>anum</name></name> <operator>-</operator> <name><name>list</name><operator>-&gt;</operator><name>num</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>array</name></name> <operator>+</operator> <name><name>list</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>array</name></name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>anum</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>index</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>start</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>data_size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>val</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name><name>val</name><index>[<expr><name>data_size</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <name>data_size</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>--</operator><name><name>list</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>++</operator><name><name>list</name><operator>-&gt;</operator><name>num</name></name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>iwlist_shift</name><parameter_list>(<parameter><decl><type><name>IWLIST</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>osize</name></decl></parameter>, <parameter><decl><type><name>iwrc</name> <modifier>*</modifier></type><name>orc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>orc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>list</name><operator>-&gt;</operator><name>num</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>orc</name> <operator>=</operator> <name>IW_ERROR_OUT_OF_BOUNDS</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>index</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>start</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>++</operator><name><name>list</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>--</operator><name><name>list</name><operator>-&gt;</operator><name>num</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>osize</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>rv</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>val</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>list</name><operator>-&gt;</operator><name>start</name></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>list</name><operator>-&gt;</operator><name>start</name></name> <operator>&gt;</operator> <name><name>list</name><operator>-&gt;</operator><name>num</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>array</name></name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>array</name></name> <operator>+</operator> <name><name>list</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>num</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwlist_insert</name><parameter_list>(<parameter><decl><type><name>IWLIST</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>data_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;</operator> <name><name>list</name><operator>-&gt;</operator><name>num</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_OUT_OF_BOUNDS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>index</name> <operator>+=</operator> <name><name>list</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>list</name><operator>-&gt;</operator><name>start</name></name> <operator>+</operator> <name><name>list</name><operator>-&gt;</operator><name>num</name></name> <operator>&gt;=</operator> <name><name>list</name><operator>-&gt;</operator><name>anum</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>anum</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>anum</name></name> <operator>+</operator> <name><name>list</name><operator>-&gt;</operator><name>num</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>nptr</name> <init>= <expr><call><name>realloc</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>array</name></name></expr></argument>, <argument><expr><name>anum</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>nptr</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>anum</name></name> <operator>=</operator> <name>anum</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>array</name></name> <operator>=</operator> <name>nptr</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>array</name></name> <operator>+</operator> <name>index</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>array</name></name> <operator>+</operator> <name>index</name></expr></argument>,
          <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>list</name><operator>-&gt;</operator><name>start</name></name> <operator>+</operator> <name><name>list</name><operator>-&gt;</operator><name>num</name></name> <operator>-</operator> <name>index</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>data_size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>val</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name><name>val</name><index>[<expr><name>data_size</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <name>data_size</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>num</name></name><operator>++</operator></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwlist_set</name><parameter_list>(<parameter><decl><type><name>IWLIST</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>data_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <name><name>list</name><operator>-&gt;</operator><name>num</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_OUT_OF_BOUNDS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>index</name> <operator>+=</operator> <name><name>list</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>data_size</name> <operator>&gt;</operator> <name><name>list</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>size</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>nptr</name> <init>= <expr><call><name>realloc</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>val</name></expr></argument>, <argument><expr><name>data_size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>nptr</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>=</operator> <name>nptr</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>val</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <name>data_size</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name><name>val</name><index>[<expr><name>data_size</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>iwlist_remove</name><parameter_list>(<parameter><decl><type><name>IWLIST</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>osize</name></decl></parameter>, <parameter><decl><type><name>iwrc</name> <modifier>*</modifier></type><name>orc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>orc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <name><name>list</name><operator>-&gt;</operator><name>num</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>orc</name> <operator>=</operator> <name>IW_ERROR_OUT_OF_BOUNDS</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>index</name> <operator>+=</operator> <name><name>list</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>rv</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>val</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>osize</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>--</operator><name><name>list</name><operator>-&gt;</operator><name>num</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>array</name></name> <operator>+</operator> <name>index</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>array</name></name> <operator>+</operator> <name>index</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
          <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>list</name><operator>-&gt;</operator><name>start</name></name> <operator>+</operator> <name><name>list</name><operator>-&gt;</operator><name>num</name></name> <operator>-</operator> <name>index</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwlist_sort</name><parameter_list>(<parameter><decl><type><name>IWLIST</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>compar</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>IWLISTITEM</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>IWLISTITEM</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>sort_r</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>array</name></name> <operator>+</operator> <name><name>list</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>,
         <argument><expr><operator>(</operator><call><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>void</name><operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name><operator>*</operator></expr></argument>, <argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator> <name>compar</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
