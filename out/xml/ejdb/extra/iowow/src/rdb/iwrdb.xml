<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/extra/iowow/src/rdb/iwrdb.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwrdb.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwfile.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>O_CLOEXEC</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_CLOEXEC</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwcfg.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ENSURE_OPEN</name><parameter_list>(<parameter><type><name>db_</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>if (!(db_) || INVALIDHANDLE((db_)-&gt;fh)) return IW_ERROR_INVALID_STATE</cpp:value></cpp:define>

<struct>struct <name>_IWRDB</name> <block>{
  <decl_stmt><decl><type><name>HANDLE</name></type> <name>fh</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrdb_oflags_t</name></type>    <name>oflags</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>pthread_rwlock_t</name> <modifier>*</modifier></type><name>cwl</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>    <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>   <name>bufsz</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>off_t</name></type>    <name>bp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>off_t</name></type>    <name>end</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>IW_INLINE</name> <name>iwrc</name></type> <name>_wlock</name><parameter_list>(<parameter><decl><type><name>IWRDB</name></type> <name>db</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name> <init>= <expr><ternary><condition><expr><name><name>db</name><operator>-&gt;</operator><name>cwl</name></name></expr> ?</condition><then> <expr><call><name>pthread_rwlock_wrlock</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>cwl</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <return>return <expr><operator>(</operator><ternary><condition><expr><name>rci</name></expr> ?</condition><then> <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_THREADING_ERRNO</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>iwrc</name></type> <name>_rlock</name><parameter_list>(<parameter><decl><type><name>IWRDB</name></type> <name>db</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name> <init>= <expr><ternary><condition><expr><name><name>db</name><operator>-&gt;</operator><name>cwl</name></name></expr> ?</condition><then> <expr><call><name>pthread_rwlock_rdlock</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>cwl</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <return>return <expr><operator>(</operator><ternary><condition><expr><name>rci</name></expr> ?</condition><then> <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_THREADING_ERRNO</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>iwrc</name></type> <name>_unlock</name><parameter_list>(<parameter><decl><type><name>IWRDB</name></type> <name>db</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name> <init>= <expr><ternary><condition><expr><name><name>db</name><operator>-&gt;</operator><name>cwl</name></name></expr> ?</condition><then> <expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>cwl</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <return>return <expr><operator>(</operator><ternary><condition><expr><name>rci</name></expr> ?</condition><then> <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_THREADING_ERRNO</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_initlocks</name><parameter_list>(<parameter><decl><type><name>IWRDB</name></type> <name>db</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>oflags</name></name> <operator>&amp;</operator> <name>IWRDB_NOLOCKS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>cwl</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>cwl</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>db</name><operator>-&gt;</operator><name>cwl</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>db</name><operator>-&gt;</operator><name>cwl</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>pthread_rwlockattr_t</name></type> <name>attr</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>pthread_rwlockattr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>__linux__</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>defined</name> <name>__USE_UNIX98</name> <operator>||</operator> <name>defined</name> <name>__USE_XOPEN2K</name><operator>)</operator></expr></cpp:if>
  <expr_stmt><expr><call><name>pthread_rwlockattr_setkind_np</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name> <init>= <expr><call><name>pthread_rwlock_init</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>cwl</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rci</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>cwl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>cwl</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_THREADING_ERRNO</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_destroy_locks</name><parameter_list>(<parameter><decl><type><name>IWRDB</name></type> <name>db</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>db</name><operator>-&gt;</operator><name>cwl</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name> <init>= <expr><call><name>pthread_rwlock_destroy</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>cwl</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rci</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_THREADING_ERRNO</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>cwl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>cwl</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_flush_lw</name><parameter_list>(<parameter><decl><type><name>IWRDB</name></type> <name>db</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>bp</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>iwp_write</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>fh</name></name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>bp</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>end</name></name> <operator>+=</operator> <name><name>db</name><operator>-&gt;</operator><name>bp</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>bp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_append_lw</name><parameter_list>(<parameter><decl><type><name>IWRDB</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>oref</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>oref</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>bufsz</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>bp</name></name> <operator>+</operator> <name>len</name> <operator>&gt;</operator> <name><name>db</name><operator>-&gt;</operator><name>bufsz</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_flush_lw</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>rc</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>db</name><operator>-&gt;</operator><name>bufsz</name></name> <operator>||</operator> <operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>bp</name></name> <operator>+</operator> <name>len</name> <operator>&gt;</operator> <name><name>db</name><operator>-&gt;</operator><name>bufsz</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>oref</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>end</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwp_write</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>fh</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>end</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>db</name><operator>-&gt;</operator><name>bp</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>oref</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>end</name></name> <operator>+</operator> <name><name>db</name><operator>-&gt;</operator><name>bp</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>bp</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>bp</name></name> <operator>&lt;=</operator> <name><name>db</name><operator>-&gt;</operator><name>bufsz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>bufsz</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>bp</name></name> <operator>==</operator> <name><name>db</name><operator>-&gt;</operator><name>bufsz</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>_flush_lw</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwrdb_open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>iwrdb_oflags_t</name></type> <name>oflags</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bufsz</name></decl></parameter>, <parameter><decl><type><name>IWRDB</name> <modifier>*</modifier></type><name>odb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>path</name> <operator>&amp;&amp;</operator> <name>odb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWRDB</name></type> <name>db</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>odb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_WIN32</name></cpp:ifndef>
  <decl_stmt><decl><type><name>HANDLE</name></type> <name>fh</name> <init>= <expr><call><name>open</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>O_CREAT</name> <operator>|</operator> <name>O_RDWR</name> <operator>|</operator> <name>O_CLOEXEC</name></expr></argument>, <argument><expr><name>IWFS_DEFAULT_FILEMODE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>INVALIDHANDLE</name><argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_IO_ERRNO</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>HANDLE</name></type> <name>fh</name> <init>= <expr><call><name>CreateFile</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>GENERIC_READ</name> <operator>|</operator> <name>GENERIC_WRITE</name></expr></argument>,
                         <argument><expr><name>FILE_SHARE_READ</name> <operator>|</operator> <name>FILE_SHARE_WRITE</name></expr></argument>,
                         <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OPEN_ALWAYS</name></expr></argument>, <argument><expr><name>FILE_ATTRIBUTE_NORMAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>INVALIDHANDLE</name><argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_werror</name><argument_list>(<argument><expr><name>IW_ERROR_IO_ERRNO</name></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><name>db</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>db</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>db</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>odb</name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>oflags</name></name> <operator>=</operator> <name>oflags</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>fh</name></name> <operator>=</operator> <name>fh</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>bufsz</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>bufsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>db</name><operator>-&gt;</operator><name>buf</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>bufsz</name></name> <operator>=</operator> <name>bufsz</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwp_lseek</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>fh</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>IWP_SEEK_END</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_initlocks</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&amp;&amp;</operator> <name>db</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>iwrdb_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwrdb_sync</name><parameter_list>(<parameter><decl><type><name>IWRDB</name></type> <name>db</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>_ENSURE_OPEN</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_wlock</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_flush_lw</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwp_fsync</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>fh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>_unlock</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwrdb_close</name><parameter_list>(<parameter><decl><type><name>IWRDB</name> <modifier>*</modifier></type><name>rdb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWRDB</name></type> <name>db</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rdb</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>rdb</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>db</name> <operator>=</operator> <operator>*</operator><name>rdb</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>INVALIDHANDLE</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>fh</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>iwrdb_sync</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>iwp_closefh</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>fh</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>fh</name></name> <operator>=</operator> <name>INVALID_HANDLE_VALUE</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>_destroy_locks</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>rdb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwrdb_append</name><parameter_list>(<parameter><decl><type><name>IWRDB</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>oref</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>_ENSURE_OPEN</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_wlock</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_append_lw</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>oref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>_unlock</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwrdb_patch</name><parameter_list>(<parameter><decl><type><name>IWRDB</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>ref</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>skip</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>sz</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ssize_t</name></type> <name>sz2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ssize_t</name></type> <name>tw</name> <init>= <expr><name>len</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>rp</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ssize_t</name></type> <name>off</name> <init>= <expr><name>ref</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name>skip</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>_ENSURE_OPEN</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ref</name> <operator>||</operator> <operator>(</operator><name>off</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>skip</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_wlock</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>off</name> <operator>+</operator> <name>len</name> <operator>&gt;</operator> <name><name>db</name><operator>-&gt;</operator><name>end</name></name> <operator>+</operator> <name><name>db</name><operator>-&gt;</operator><name>bp</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_OUT_OF_BOUNDS</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>off</name> <operator>&lt;</operator> <name><name>db</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>sz2</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwp_pwrite</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>fh</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>rp</name></expr></argument>, <argument><expr><name>sz2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>tw</name> <operator>-=</operator> <name>sz</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>rp</name> <operator>+=</operator> <name>sz</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>off</name> <operator>+=</operator> <name>sz</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>tw</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>sz</name> <operator>=</operator> <name>off</name> <operator>-</operator> <name><name>db</name><operator>-&gt;</operator><name>end</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>sz</name></expr></argument>, <argument><expr><name>rp</name></expr></argument>, <argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>_unlock</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwrdb_read</name><parameter_list>(<parameter><decl><type><name>IWRDB</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>ref</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>skip</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>sz</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ssize_t</name></type> <name>sz2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ssize_t</name></type> <name>tr</name> <init>= <expr><name>len</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ssize_t</name></type> <name>off</name> <init>= <expr><name>ref</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name>skip</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><operator>*</operator><name>sp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_ENSURE_OPEN</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ref</name> <operator>||</operator> <operator>(</operator><name>skip</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_rlock</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>off</name> <operator>+</operator> <name>len</name> <operator>&gt;</operator> <name><name>db</name><operator>-&gt;</operator><name>end</name></name> <operator>+</operator> <name><name>db</name><operator>-&gt;</operator><name>bp</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>off_t</name></type> <name>l</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>end</name></name> <operator>+</operator> <name><name>db</name><operator>-&gt;</operator><name>bp</name></name> <operator>-</operator> <name>off</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>l</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_OUT_OF_BOUNDS</name></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>off</name> <operator>&lt;</operator> <name><name>db</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>sz2</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwp_pread</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>fh</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>wp</name></expr></argument>, <argument><expr><name>sz2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>tr</name> <operator>-=</operator> <name>sz</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>wp</name> <operator>+=</operator> <name>sz</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>off</name> <operator>+=</operator> <name>sz</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>tr</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>bp</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>sz</name> <operator>=</operator> <name>off</name> <operator>-</operator> <name><name>db</name><operator>-&gt;</operator><name>end</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>sz</name></expr></argument>, <argument><expr><name>tr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>sp</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>_unlock</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
</unit>
