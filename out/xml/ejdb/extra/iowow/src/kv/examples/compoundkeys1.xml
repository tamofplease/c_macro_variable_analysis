<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/extra/iowow/src/kv/examples/compoundkeys1.c"><comment type="line" format="doxygen">///</comment>
<comment type="line" format="doxygen">/// Compound keys demo.</comment>
<comment type="line" format="doxygen">///</comment>
<comment type="line" format="doxygen">/// Compound keys allows associate one `key value` with many references</comment>
<comment type="line" format="doxygen">/// represented as VNUM64 (eg.: Non unique table indexes).</comment>
<comment type="line" format="doxygen">///</comment>
<comment type="line" format="doxygen">/// Compound mainly used for non-unique indexes in ejdb2 database engine:</comment>
<comment type="line" format="doxygen">///</comment>
<comment type="line" format="doxygen">///   `&lt;prefix key value&gt;.&lt;document id&gt;`</comment>
<comment type="line" format="doxygen">///</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwkv.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<struct>struct <name>user_s</name> <block>{
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>id</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>    <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>chat_root_s</name> <block>{
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>user_s</name></name></type> <name><name>users</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>chat_root_s</name></name></type> <name><name>rooms</name><index>[]</index></name> <init>= <expr><block>{
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"Meeting room"</literal></expr>,
    <expr><operator>.</operator><name>users</name> <operator>=</operator><block>{
      <expr><block>{ <expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="number">1</literal></expr>, <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"Joy Lynn"</literal></expr>      }</block></expr>,
      <expr><block>{ <expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="number">2</literal></expr>, <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"Aubrey Sparks"</literal></expr> }</block></expr>,
      <expr><block>{ <expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="number">3</literal></expr>, <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"Vinnie Kaye"</literal></expr>   }</block></expr>,
      <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr>
    }</block></expr>
  }</block></expr>,
  <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"Webinar room"</literal></expr>,
    <expr><operator>.</operator><name>users</name> <operator>=</operator><block>{
      <expr><block>{ <expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="number">4</literal></expr>, <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"Arda Payne"</literal></expr>    }</block></expr>,
      <expr><block>{ <expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="number">2</literal></expr>, <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"Joy Lynn"</literal></expr>      }</block></expr>,
      <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr>
    }</block></expr>
  }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>run</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>IWKV_OPTS</name></type> <name>opts</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>path</name>   <operator>=</operator> <literal type="string">"compoundkeys.db"</literal></expr>,
    <expr><operator>.</operator><name>oflags</name> <operator>=</operator> <name>IWKV_TRUNC</name></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWKV</name></type> <name>iwkv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWDB</name></type> <name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWKV_cursor</name></type> <name>cur</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>iwkv_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iwkv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwkv_db</name><argument_list>(<argument><expr><name>iwkv</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>IWDB_COMPOUND_KEYS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Persist all rooms with members</comment>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>rooms</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>rooms</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>chat_root_s</name></name> <modifier>*</modifier></type><name>room</name> <init>= <expr><operator>&amp;</operator><name><name>rooms</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name><name>struct</name> <name>user_s</name></name> <modifier>*</modifier><name>user</name></type> <init>= <expr><operator>&amp;</operator><name><name>room</name><operator>-&gt;</operator><name>users</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</init> <condition><expr><name><name>user</name><operator>-&gt;</operator><name>id</name></name></expr>;</condition> <incr><expr><name>user</name> <operator>=</operator> <operator>&amp;</operator><name><name>room</name><operator>-&gt;</operator><name>users</name><index>[<expr><operator>++</operator><name>j</name></expr>]</index></name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>IWKV_val</name></type> <name>key</name> <init>= <expr><block>{ <expr><operator>.</operator><name>data</name> <operator>=</operator> <name><name>room</name><operator>-&gt;</operator><name>name</name></name></expr>, <expr><operator>.</operator><name>size</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>room</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>compound</name> <operator>=</operator> <name><name>user</name><operator>-&gt;</operator><name>id</name></name></expr> }</block></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>IWKV_val</name></type> <name>val</name> <init>= <expr><block>{ <expr><operator>.</operator><name>data</name> <operator>=</operator> <name><name>user</name><operator>-&gt;</operator><name>name</name></name></expr>, <expr><operator>.</operator><name>size</name> <operator>=</operator> <macro><name>strlen</name><argument_list>(<argument>user-&gt;name</argument>)</argument_list></macro></expr> }</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwkv_put</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>

  <comment type="line">// Get specific user from the room</comment>
  <block>{<block_content>
    <decl_stmt><decl><type><name>IWKV_val</name></type> <name>key</name> <init>= <expr><block>{ <expr><operator>.</operator><name>data</name> <operator>=</operator> <literal type="string">"Webinar room"</literal></expr>, <expr><operator>.</operator><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"Webinar room"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>, <expr><operator>.</operator><name>compound</name> <operator>=</operator> <literal type="number">2</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>IWKV_val</name></type> <name>val</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwkv_get</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"\n&gt;&gt;&gt;&gt; Found: '%.*s' in room '%s' by id: %d\n"</literal></expr></argument>,
            <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>val</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>val</name><operator>.</operator><name>data</name></name></expr></argument>,
            <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>key</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>key</name><operator>.</operator><name>compound</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwkv_val_dispose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>

  <comment type="line">// Iterate over all members in `Meeting room`</comment>
  <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>rooms</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"\n&gt;&gt;&gt;&gt; Iterate over all members in %s\n"</literal></expr></argument>, <argument><expr><name><name>rooms</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>IWKV_val</name></type> <name>val</name></decl>, <decl><type ref="prev"/><name>key</name> <init>= <expr><block>{ <expr><operator>.</operator><name>data</name> <operator>=</operator> <name><name>rooms</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>name</name></expr>, <expr><operator>.</operator><name>size</name> <operator>=</operator> <name>len</name></expr> }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwkv_cursor_open</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur</name></expr></argument>, <argument><expr><name>IWKV_CURSOR_GE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <do>do <block>{<block_content>
      <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>iwkv_cursor_get</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>key</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>rooms</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><call><name>MIN</name><argument_list>(<argument><expr><name><name>key</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="line">// We rolled to end of `Meeting room` room</comment>
        <expr_stmt><expr><call><name>iwkv_kv_dispose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"%.*s: %d %.*s\n"</literal></expr></argument>,
              <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>key</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>key</name><operator>.</operator><name>data</name></name></expr></argument>,
              <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>key</name><operator>.</operator><name>compound</name></name></expr></argument>,
              <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>val</name><operator>.</operator><name>size</name></name></expr></argument>,
              <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>val</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>iwkv_kv_dispose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> while <condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>iwkv_cursor_to</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>IWKV_CURSOR_PREV</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>;</do>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>cur</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwkv_cursor_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>iwkv_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iwkv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>run</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
