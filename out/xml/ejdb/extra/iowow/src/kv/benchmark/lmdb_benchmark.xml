<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/extra/iowow/src/kv/benchmark/lmdb_benchmark.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bmbase.c"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;lmdb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"sizeof(size_t) == 8 bytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E</name><parameter_list>(<parameter><type><name>expr_</name></type></parameter>, <parameter><type><name>ret_</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>if ((rc = (expr_)) != MDB_SUCCESS) { \
    fprintf(stderr, "%s:%d %s\n", __FILE__, __LINE__, mdb_strerror(rc)); \
    return ret_; \
  }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B</name><parameter_list>(<parameter><type><name>expr_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>E(expr_, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_DB</name></cpp:macro> <cpp:value>"lmdb_bench.db"</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>BM_LEVELDB</name> <block>{
  <decl_stmt><decl><type><name>MDB_env</name> <modifier>*</modifier></type><name>env</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MDB_dbi</name></type>  <name>dbi</name></decl>;</decl_stmt>
}</block></struct></type> <name>BM_LMDB</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>env_setup</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>major</name></decl>, <decl><type ref="prev"/><name>minor</name></decl>, <decl><type ref="prev"/><name>patch</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>mdb_version</name><argument_list>(<argument><expr><operator>&amp;</operator><name>major</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>minor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>patch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" engine: LMDB %d.%d.%d\n"</literal></expr></argument>, <argument><expr><name>major</name></expr></argument>, <argument><expr><name>minor</name></expr></argument>, <argument><expr><name>patch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>db_size_bytes</name><parameter_list>(<parameter><decl><type><name>BMCTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><ternary><condition><expr><name><name>bm</name><operator>.</operator><name>param_db</name></name></expr> ?</condition><then> <expr><name><name>bm</name><operator>.</operator><name>param_db</name></name></expr> </then><else>: <expr><name>DEFAULT_DB</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWP_FILE_STAT</name></type> <name>fst</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>iwp_fstat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name><name>fst</name><operator>.</operator><name>size</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>db_open</name><parameter_list>(<parameter><decl><type><name>BMCTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>db</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return> <comment type="line">// db is not closed properly</comment>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><ternary><condition><expr><name><name>bm</name><operator>.</operator><name>param_db</name></name></expr> ?</condition><then> <expr><name><name>bm</name><operator>.</operator><name>param_db</name></name></expr> </then><else>: <expr><name>DEFAULT_DB</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>freshdb</name></name></expr>)</condition> <block>{<block_content> <comment type="line">// completely remove db folder</comment>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>unlink</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>errno</name> <operator>!=</operator> <name>ENOENT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>E</name><argument_list>(<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>MDB_txn</name> <modifier>*</modifier></type><name>txn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>BM_LMDB</name> <modifier>*</modifier></type><name>bmdb</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>bmdb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>E</name><argument_list>(<argument><expr><call><name>mdb_env_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bmdb</name><operator>-&gt;</operator><name>env</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>E</name><argument_list>(<argument><expr><call><name>mdb_env_set_maxreaders</name><argument_list>(<argument><expr><name><name>bmdb</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>E</name><argument_list>(<argument><expr><call><name>mdb_env_set_mapsize</name><argument_list>(<argument><expr><name><name>bmdb</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><literal type="number">1024ULL</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 100 GB</comment>
  <expr_stmt><expr><call><name>E</name><argument_list>(<argument><expr><call><name>mdb_env_open</name><argument_list>(<argument><expr><name><name>bmdb</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>MDB_FIXEDMAP</name> <operator>|</operator> <name>MDB_NOSUBDIR</name> <operator>|</operator> <name>MDB_NOSYNC</name></expr></argument>, <argument><expr><literal type="number">0664</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>E</name><argument_list>(<argument><expr><call><name>mdb_txn_begin</name><argument_list>(<argument><expr><name><name>bmdb</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>txn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>E</name><argument_list>(<argument><expr><call><name>mdb_dbi_open</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>bmdb</name><operator>-&gt;</operator><name>dbi</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>E</name><argument_list>(<argument><expr><call><name>mdb_txn_commit</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>bmdb</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>db_close</name><parameter_list>(<parameter><decl><type><name>BMCTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>db</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>BM_LMDB</name> <modifier>*</modifier></type><name>bmdb</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>B</name><argument_list>(<argument><expr><call><name>mdb_env_sync</name><argument_list>(<argument><expr><name><name>bmdb</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mdb_dbi_close</name><argument_list>(<argument><expr><name><name>bmdb</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name><name>bmdb</name><operator>-&gt;</operator><name>dbi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mdb_env_close</name><argument_list>(<argument><expr><name><name>bmdb</name><operator>-&gt;</operator><name>env</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>bmdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>db_put</name><parameter_list>(<parameter><decl><type><name>BMCTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>IWKV_val</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>IWKV_val</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>sync</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>BM_LMDB</name> <modifier>*</modifier></type><name>bmdb</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MDB_txn</name> <modifier>*</modifier></type><name>txn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MDB_val</name></type> <name>mkey</name></decl>, <decl><type ref="prev"/><name>mval</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>mkey</name><operator>.</operator><name>mv_data</name></name> <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mkey</name><operator>.</operator><name>mv_size</name></name> <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mval</name><operator>.</operator><name>mv_data</name></name> <operator>=</operator> <name><name>val</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mval</name><operator>.</operator><name>mv_size</name></name> <operator>=</operator> <name><name>val</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>B</name><argument_list>(<argument><expr><call><name>mdb_txn_begin</name><argument_list>(<argument><expr><name><name>bmdb</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>txn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>B</name><argument_list>(<argument><expr><call><name>mdb_put</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name><name>bmdb</name><operator>-&gt;</operator><name>dbi</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mkey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mval</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>B</name><argument_list>(<argument><expr><call><name>mdb_txn_commit</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>sync</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>B</name><argument_list>(<argument><expr><call><name>mdb_env_sync</name><argument_list>(<argument><expr><name><name>bmdb</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>db_get</name><parameter_list>(<parameter><decl><type><name>BMCTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>IWKV_val</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>IWKV_val</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>found</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MDB_txn</name> <modifier>*</modifier></type><name>txn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MDB_val</name></type> <name>mkey</name></decl>, <decl><type ref="prev"/><name>mval</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>BM_LMDB</name> <modifier>*</modifier></type><name>bmdb</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>mkey</name><operator>.</operator><name>mv_data</name></name> <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mkey</name><operator>.</operator><name>mv_size</name></name> <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>B</name><argument_list>(<argument><expr><call><name>mdb_txn_begin</name><argument_list>(<argument><expr><name><name>bmdb</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MDB_RDONLY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>txn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdb_get</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name><name>bmdb</name><operator>-&gt;</operator><name>dbi</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mkey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>mval</name><operator>.</operator><name>mv_size</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>val</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>val</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>mval</name><operator>.</operator><name>mv_data</name></name></expr></argument>, <argument><expr><name><name>mval</name><operator>.</operator><name>mv_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rc</name> <operator>==</operator> <name>MDB_NOTFOUND</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>found</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>mdb_txn_abort</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>B</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>db_del</name><parameter_list>(<parameter><decl><type><name>BMCTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>IWKV_val</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>sync</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MDB_txn</name> <modifier>*</modifier></type><name>txn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MDB_val</name></type> <name>mkey</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>BM_LMDB</name> <modifier>*</modifier></type><name>bmdb</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>mkey</name><operator>.</operator><name>mv_data</name></name> <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mkey</name><operator>.</operator><name>mv_size</name></name> <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>B</name><argument_list>(<argument><expr><call><name>mdb_txn_begin</name><argument_list>(<argument><expr><name><name>bmdb</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>txn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdb_del</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name><name>bmdb</name><operator>-&gt;</operator><name>dbi</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mkey</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>MDB_NOTFOUND</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>B</name><argument_list>(<argument><expr><call><name>mdb_txn_commit</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>sync</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>B</name><argument_list>(<argument><expr><call><name>mdb_env_sync</name><argument_list>(<argument><expr><name><name>bmdb</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>db_read_seq</name><parameter_list>(<parameter><decl><type><name>BMCTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>reverse</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MDB_txn</name> <modifier>*</modifier></type><name>txn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MDB_cursor</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MDB_val</name></type> <name>mkey</name></decl>, <decl><type ref="prev"/><name>mval</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>BM_LMDB</name> <modifier>*</modifier></type><name>bmdb</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>B</name><argument_list>(<argument><expr><call><name>mdb_txn_begin</name><argument_list>(<argument><expr><name><name>bmdb</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MDB_RDONLY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>txn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>B</name><argument_list>(<argument><expr><call><name>mdb_cursor_open</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name><name>bmdb</name><operator>-&gt;</operator><name>dbi</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>B</name><argument_list>(<argument><expr><call><name>mdb_cursor_get</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mkey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mval</name></expr></argument>, <argument><expr><ternary><condition><expr><name>reverse</name></expr> ?</condition><then> <expr><name>MDB_LAST</name></expr> </then><else>: <expr><name>MDB_FIRST</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bm</name><operator>.</operator><name>param_num</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>rc</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdb_cursor_get</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mkey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mval</name></expr></argument>, <argument><expr><ternary><condition><expr><name>reverse</name></expr> ?</condition><then> <expr><name>MDB_PREV</name></expr> </then><else>: <expr><name>MDB_NEXT</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>MDB_NOTFOUND</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>mdb_cursor_close</name><argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mdb_txn_abort</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>B</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>db_cursor_to_key</name><parameter_list>(<parameter><decl><type><name>BMCTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>IWKV_val</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>IWKV_val</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>found</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MDB_txn</name> <modifier>*</modifier></type><name>txn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MDB_cursor</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MDB_val</name></type> <name>mkey</name></decl>, <decl><type ref="prev"/><name>mval</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>BM_LMDB</name> <modifier>*</modifier></type><name>bmdb</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>mkey</name><operator>.</operator><name>mv_data</name></name> <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mkey</name><operator>.</operator><name>mv_size</name></name> <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>B</name><argument_list>(<argument><expr><call><name>mdb_txn_begin</name><argument_list>(<argument><expr><name><name>bmdb</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MDB_RDONLY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>txn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>B</name><argument_list>(<argument><expr><call><name>mdb_cursor_open</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name><name>bmdb</name><operator>-&gt;</operator><name>dbi</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdb_cursor_get</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mkey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mval</name></expr></argument>, <argument><expr><name>MDB_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>MDB_NOTFOUND</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>found</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>mval</name><operator>.</operator><name>mv_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>val</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>mval</name><operator>.</operator><name>mv_data</name></name></expr></argument>, <argument><expr><name><name>mval</name><operator>.</operator><name>mv_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>mdb_cursor_close</name><argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mdb_txn_abort</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>B</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>g_program</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>bm</name><operator>.</operator><name>env_setup</name></name> <operator>=</operator> <name>env_setup</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>bm</name><operator>.</operator><name>db_size_bytes</name></name> <operator>=</operator> <name>db_size_bytes</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>bm</name><operator>.</operator><name>db_open</name></name> <operator>=</operator> <name>db_open</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>bm</name><operator>.</operator><name>db_close</name></name> <operator>=</operator> <name>db_close</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>bm</name><operator>.</operator><name>db_put</name></name> <operator>=</operator> <name>db_put</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>bm</name><operator>.</operator><name>db_get</name></name> <operator>=</operator> <name>db_get</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>bm</name><operator>.</operator><name>db_del</name></name> <operator>=</operator> <name>db_del</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>bm</name><operator>.</operator><name>db_read_seq</name></name> <operator>=</operator> <name>db_read_seq</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>bm</name><operator>.</operator><name>db_cursor_to_key</name></name> <operator>=</operator> <name>db_cursor_to_key</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bm_bench_run</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
