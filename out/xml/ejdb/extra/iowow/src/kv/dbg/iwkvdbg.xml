<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/extra/iowow/src/kv/dbg/iwkvdbg.c"><comment type="line">//--------------------------  DEBUG STAFF</comment>

<function><type><name>void</name></type> <name>iwkvd_trigger_xor</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>g_trigger</name> <operator>^=</operator> <name>val</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwkvd_kvblk</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>KVBLK</name> <modifier>*</modifier></type><name>kb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxvlen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>f</name> <operator>&amp;&amp;</operator> <name>kb</name> <operator>&amp;&amp;</operator> <name><name>kb</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mm</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vbuf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>kbuf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>klen</name></decl>, <decl><type ref="prev"/><name>vlen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWFS_FSM</name> <modifier>*</modifier></type><name>fsm</name> <init>= <expr><operator>&amp;</operator><name><name>kb</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>iwkv</name><operator>-&gt;</operator><name>fsm</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>blkn_t</name></type> <name>blkn</name> <init>= <expr><call><name>ADDR2BLK</name><argument_list>(<argument><expr><name><name>kb</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"\n === KVBLK[%u] maxoff=%"</literal> <name>PRIx64</name> <literal type="string">", zidx=%d, idxsz=%d, szpow=%u, flg=%x, db=%d\n"</literal></expr></argument>, <comment type="line">// -V576</comment>
          <argument><expr><name>blkn</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <name><name>kb</name><operator>-&gt;</operator><name>maxoff</name></name></expr></argument>, <argument><expr><name><name>kb</name><operator>-&gt;</operator><name>zidx</name></name></expr></argument>, <argument><expr><name><name>kb</name><operator>-&gt;</operator><name>idxsz</name></name></expr></argument>, <argument><expr><name><name>kb</name><operator>-&gt;</operator><name>szpow</name></name></expr></argument>, <argument><expr><name><name>kb</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name><name>kb</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name><name>fsm</name><operator>-&gt;</operator><name>probe_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>KVBLK_IDXNUM</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>KVP</name> <modifier>*</modifier></type><name>kvp</name> <init>= <expr><operator>&amp;</operator><name><name>kb</name><operator>-&gt;</operator><name>pidx</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_kvblk_key_peek</name><argument_list>(<argument><expr><name>kb</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>klen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>_kvblk_value_peek</name><argument_list>(<argument><expr><name>kb</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"\n    %02d: [%04"</literal> <name>PRIx64</name> <literal type="string">", %02u, %02d]: %.*s:%.*s"</literal></expr></argument>,
            <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <name><name>kvp</name><operator>-&gt;</operator><name>off</name></name></expr></argument>, <argument><expr><name><name>kvp</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>kvp</name><operator>-&gt;</operator><name>ridx</name></name></expr></argument>,
            <argument><expr><name>klen</name></expr></argument>, <argument><expr><name>kbuf</name></expr></argument>, <argument><expr><call><name>MIN</name><argument_list>(<argument><expr><name>vlen</name></expr></argument>, <argument><expr><name>maxvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IWKVD_MAX_VALSZ</name></cpp:macro> <cpp:value>96</cpp:value></cpp:define>

<function><type><name>iwrc</name></type> <name>iwkvd_sblk</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>IWLCTX</name> <modifier>*</modifier></type><name>lx</name></decl></parameter>, <parameter><decl><type><name>SBLK</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>sb</name> <operator>&amp;&amp;</operator> <name><name>sb</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>lkl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>lkbuf</name><index>[<expr><name>PREFIX_KEY_LEN_V1</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mm</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vbuf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>kbuf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>klen</name></decl>, <decl><type ref="prev"/><name>vlen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWFS_FSM</name> <modifier>*</modifier></type><name>fsm</name> <init>= <expr><operator>&amp;</operator><name><name>sb</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>iwkv</name><operator>-&gt;</operator><name>fsm</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>blkn_t</name></type> <name>blkn</name> <init>= <expr><call><name>ADDR2BLK</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name><name>fsm</name><operator>-&gt;</operator><name>probe_mmap</name></name><argument_list>(<argument><expr><name>fsm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_sblk_loadkvblk_mm</name><argument_list>(<argument><expr><name>lx</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>kvblk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>sb</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SBLK_DB</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>lkl</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lkl</name></expr></argument>, <argument><expr><name>mm</name> <operator>+</operator> <name><name>sb</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name>SOFF_LKL_U1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>lkl</name> <operator>=</operator> <call><name>IW_ITOHL</name><argument_list>(<argument><expr><name>lkl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>lx</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>iwkv</name><operator>-&gt;</operator><name>fmt_version</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>lkbuf</name></expr></argument>, <argument><expr><name>mm</name> <operator>+</operator> <name><name>sb</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name>SOFF_LK_V2</name></expr></argument>, <argument><expr><name>lkl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>lkbuf</name></expr></argument>, <argument><expr><name>mm</name> <operator>+</operator> <name><name>sb</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name>SOFF_LK_V1</name></expr></argument>, <argument><expr><name>lkl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"\n === SBLK[%u] lvl=%d, pnum=%d, flg=%x, kvzidx=%d, p0=%u, db=%u"</literal></expr></argument>,
          <argument><expr><name>blkn</name></expr></argument>,
          <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>IWKVD_PRINT_NO_LEVEVELS</name> <operator>&amp;</operator> <name>flags</name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name><name>sb</name><operator>-&gt;</operator><name>lvl</name></name></expr></else></ternary><operator>)</operator></expr></argument>,
          <argument><expr><name><name>sb</name><operator>-&gt;</operator><name>pnum</name></name></expr></argument>, <argument><expr><name><name>sb</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name><name>sb</name><operator>-&gt;</operator><name>kvblk</name><operator>-&gt;</operator><name>zidx</name></name></expr></argument>,
          <argument><expr><name><name>sb</name><operator>-&gt;</operator><name>p0</name></name></expr></argument>,
          <argument><expr><name><name>sb</name><operator>-&gt;</operator><name>kvblk</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"\n === SBLK[%u] szpow=%d, lkl=%d, lk=%s\n"</literal></expr></argument>, <argument><expr><name>blkn</name></expr></argument>, <argument><expr><name><name>sb</name><operator>-&gt;</operator><name>kvblk</name><operator>-&gt;</operator><name>szpow</name></name></expr></argument>, <argument><expr><name>lkl</name></expr></argument>, <argument><expr><name>lkbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// -V576</comment>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sb</name><operator>-&gt;</operator><name>pnum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr><operator>,</operator> <expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">" === SBLK[%u]"</literal></expr></argument>, <argument><expr><name>blkn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_kvblk_key_peek</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>kvblk</name></name></expr></argument>, <argument><expr><name><name>sb</name><operator>-&gt;</operator><name>pi</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>klen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>rc</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>IWKVD_PRINT_VALS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>_kvblk_value_peek</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>kvblk</name></name></expr></argument>, <argument><expr><name><name>sb</name><operator>-&gt;</operator><name>pi</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"    [%03d,%03d] %.*s:%.*s"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>sb</name><operator>-&gt;</operator><name>pi</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>klen</name></expr></argument>, <argument><expr><name>kbuf</name></expr></argument>, <argument><expr><call><name>MIN</name><argument_list>(<argument><expr><name>vlen</name></expr></argument>, <argument><expr><name>IWKVD_MAX_VALSZ</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"    [%03d,%03d] %.*s"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>sb</name><operator>-&gt;</operator><name>pi</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>klen</name></expr></argument>, <argument><expr><name>kbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>IWFS_FSM</name> <modifier>*</modifier></type><name>iwkvd_fsm</name><parameter_list>(<parameter><decl><type><name>IWKV</name></type> <name>kv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>&amp;</operator><name><name>kv</name><operator>-&gt;</operator><name>fsm</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwkvd_db</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>IWDB</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>plvl</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SBLK</name> <modifier>*</modifier></type><name>sb</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tail</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWLCTX</name></type> <name>lx</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>db</name>   <operator>=</operator> <name>db</name></expr>,
    <expr><operator>.</operator><name>nlvl</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_sblk_at</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lx</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_sblk_at</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"\n\n== DB[%u] lvl=%d, blk=%u, dbflg=%x, p0=%u"</literal></expr></argument>,
          <argument><expr><name><name>db</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,
          <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>IWKVD_PRINT_NO_LEVEVELS</name> <operator>&amp;</operator> <name>flags</name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name><name>sb</name><operator>-&gt;</operator><name>lvl</name></name></expr></else></ternary><operator>)</operator></expr></argument>,
          <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <call><name>ADDR2BLK</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr></argument>,
          <argument><expr><name><name>db</name><operator>-&gt;</operator><name>dbflg</name></name></expr></argument>,
          <argument><expr><name><name>tail</name><operator>-&gt;</operator><name>p0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>IWKVD_PRINT_NO_LEVEVELS</name> <operator>&amp;</operator> <name>flags</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"\n== DB[%u]-&gt;n=["</literal></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>sb</name><operator>-&gt;</operator><name>lvl</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">", %d:%u"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>sb</name><operator>-&gt;</operator><name>n</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"%d:%u"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>sb</name><operator>-&gt;</operator><name>n</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>blkn_t</name></type> <name>blk</name> <init>= <expr><name><name>sb</name><operator>-&gt;</operator><name>n</name><index>[<expr><name>plvl</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>blk</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_sblk_at</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lx</name></expr></argument>, <argument><expr><call><name>BLK2ADDR</name><argument_list>(<argument><expr><name>blk</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>iwkvd_sblk</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lx</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>blk</name> <operator>=</operator> <name><name>sb</name><operator>-&gt;</operator><name>n</name><index>[<expr><name>plvl</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_sblk_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
