<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/extra/iowow/src/kv/iwal.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwkv_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"win32/mman/mman.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>O_CLOEXEC</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_CLOEXEC</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mman.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>extern</specifier> <name>atomic_uint_fast64_t</name></type> <name>g_trigger</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BKP_STARTED</name></cpp:macro>     <cpp:value>0x1</cpp:value></cpp:define>       <comment type="block" format="doxygen">/**&lt; Backup started */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BKP_WAL_CLEANUP</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>       <comment type="block" format="doxygen">/**&lt; Do checkpoint and truncate WAL file */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BKP_MAIN_COPY</name></cpp:macro>   <cpp:value>0x3</cpp:value></cpp:define>       <comment type="block" format="doxygen">/**&lt; Copy main database file */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BKP_WAL_COPY1</name></cpp:macro>   <cpp:value>0x4</cpp:value></cpp:define>       <comment type="block" format="doxygen">/**&lt; Copy most of WAL file content */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BKP_WAL_COPY2</name></cpp:macro>   <cpp:value>0x5</cpp:value></cpp:define>       <comment type="block" format="doxygen">/**&lt; Copy rest of WAL file in exclusive locked mode */</comment>

<typedef>typedef <type><struct>struct <name>IWAL</name> <block>{
  <decl_stmt><decl><type><name>IWDLSNR</name></type>     <name>lsnr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>atomic_bool</name></type> <name>applying</name></decl>;</decl_stmt>             <comment type="block" format="doxygen">/**&lt; WAL applying */</comment>
  <decl_stmt><decl><type><name>atomic_bool</name></type> <name>open</name></decl>;</decl_stmt>                 <comment type="block" format="doxygen">/**&lt; Is WAL in use */</comment>
  <decl_stmt><decl><type><name>atomic_bool</name></type> <name>force_cp</name></decl>;</decl_stmt>             <comment type="block" format="doxygen">/**&lt; Next checkpoint scheduled */</comment>
  <decl_stmt><decl><type><name>atomic_bool</name></type> <name>synched</name></decl>;</decl_stmt>              <comment type="block" format="doxygen">/**&lt; WAL is synched or WBFIXPOINT is the last write operation */</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>force_sp</name></decl>;</decl_stmt>                    <comment type="block" format="doxygen">/**&lt; Next savepoint scheduled */</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>check_cp_crc</name></decl>;</decl_stmt>                <comment type="block" format="doxygen">/**&lt; Check CRC32 sum of data blocks during checkpoint. Default: false  */</comment>
  <decl_stmt><decl><type><name>iwkv_openflags</name></type> <name>oflags</name></decl>;</decl_stmt>            <comment type="block" format="doxygen">/**&lt; File open flags */</comment>
  <decl_stmt><decl><type><name>atomic_int</name></type>     <name>bkp_stage</name></decl>;</decl_stmt>         <comment type="block" format="doxygen">/**&lt; Online backup stage */</comment>
  <decl_stmt><decl><type><name>size_t</name></type>   <name>wal_buffer_sz</name></decl>;</decl_stmt>           <comment type="block" format="doxygen">/**&lt; WAL file intermediate buffer size. */</comment>
  <decl_stmt><decl><type><name>size_t</name></type>   <name>checkpoint_buffer_sz</name></decl>;</decl_stmt>    <comment type="block" format="doxygen">/**&lt; Checkpoint buffer size in bytes. */</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>bufpos</name></decl>;</decl_stmt>                  <comment type="block" format="doxygen">/**&lt; Current position in buffer */</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>bufsz</name></decl>;</decl_stmt>                   <comment type="block" format="doxygen">/**&lt; Size of buffer */</comment>
  <decl_stmt><decl><type><name>HANDLE</name></type>   <name>fh</name></decl>;</decl_stmt>                      <comment type="block" format="doxygen">/**&lt; File handle */</comment>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>                     <comment type="block" format="doxygen">/**&lt; File buffer */</comment>
  <decl_stmt><decl><type><name>char</name>    <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>                    <comment type="block" format="doxygen">/**&lt; WAL file path */</comment>
  <decl_stmt><decl><type><name>pthread_mutex_t</name> <modifier>*</modifier></type><name>mtxp</name></decl>;</decl_stmt>            <comment type="block" format="doxygen">/**&lt; Global WAL mutex */</comment>
  <decl_stmt><decl><type><name>pthread_cond_t</name>  <modifier>*</modifier></type><name>cpt_condp</name></decl>;</decl_stmt>       <comment type="block" format="doxygen">/**&lt; Checkpoint thread cond variable */</comment>
  <decl_stmt><decl><type><name>pthread_t</name>       <modifier>*</modifier></type><name>cptp</name></decl>;</decl_stmt>            <comment type="block" format="doxygen">/**&lt; Checkpoint thread */</comment>
  <function_decl><type><name>iwrc</name></type> (<modifier>*</modifier><name>wal_lock_interceptor</name>)<parameter_list>(<parameter><decl><type><name>bool</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
  <comment type="block" format="doxygen">/**&lt; Optional function called
       - before acquiring
       - after releasing
       exclusive database lock by WAL checkpoint thread.
       In the case of `before lock` first argument will be set to true */</comment>
  <decl_stmt><decl><type><name>void</name>    <modifier>*</modifier></type><name>wal_lock_interceptor_opaque</name></decl>;</decl_stmt>  <comment type="block" format="doxygen">/**&lt; Opaque data for `wal_lock_interceptor` */</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>savepoint_timeout_sec</name></decl>;</decl_stmt>        <comment type="block" format="doxygen">/**&lt; Savepoint timeout seconds */</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>checkpoint_timeout_sec</name></decl>;</decl_stmt>       <comment type="block" format="doxygen">/**&lt; Checkpoint timeout seconds */</comment>
  <decl_stmt><decl><type><name>atomic_size_t</name></type> <name>mbytes</name></decl>;</decl_stmt>                  <comment type="block" format="doxygen">/**&lt; Estimated size of modifed private mmaped memory bytes */</comment>
  <decl_stmt><decl><type><name>off_t</name></type>    <name>rollforward_offset</name></decl>;</decl_stmt>           <comment type="block" format="doxygen">/**&lt; Rollforward offset during online backup */</comment>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>checkpoint_ts</name></decl>;</decl_stmt>                <comment type="block" format="doxygen">/**&lt; Last checkpoint timestamp milliseconds */</comment>
  <decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>mtx</name></decl>;</decl_stmt>                   <comment type="block" format="doxygen">/**&lt; Global WAL mutex */</comment>
  <decl_stmt><decl><type><name>pthread_cond_t</name></type>  <name>cpt_cond</name></decl>;</decl_stmt>              <comment type="block" format="doxygen">/**&lt; Checkpoint thread cond variable */</comment>
  <decl_stmt><decl><type><name>pthread_t</name></type>       <name>cpt</name></decl>;</decl_stmt>                   <comment type="block" format="doxygen">/**&lt; Checkpoint thread */</comment>
  <decl_stmt><decl><type><name>IWKV</name></type> <name>iwkv</name></decl>;</decl_stmt>
}</block></struct></type> <name>IWAL</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>iwrc</name></type> <name>_checkpoint_exl</name><parameter_list>(<parameter><decl><type><name>IWAL</name> <modifier>*</modifier></type><name>wal</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>tsp</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>no_fixpoint</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>IW_INLINE</name> <name>iwrc</name></type> <name>_lock</name><parameter_list>(<parameter><decl><type><name>IWAL</name> <modifier>*</modifier></type><name>wal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name> <init>= <expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><name><name>wal</name><operator>-&gt;</operator><name>mtxp</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><operator>(</operator><ternary><condition><expr><name>rci</name></expr> ?</condition><then> <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_THREADING_ERRNO</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>iwrc</name></type> <name>_unlock</name><parameter_list>(<parameter><decl><type><name>IWAL</name> <modifier>*</modifier></type><name>wal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name> <init>= <expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><name><name>wal</name><operator>-&gt;</operator><name>mtxp</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><operator>(</operator><ternary><condition><expr><name>rci</name></expr> ?</condition><then> <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_THREADING_ERRNO</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_excl_lock</name><parameter_list>(<parameter><decl><type><name>IWAL</name> <modifier>*</modifier></type><name>wal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>wal</name><operator>-&gt;</operator><name>wal_lock_interceptor</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>wal</name><operator>-&gt;</operator><name>wal_lock_interceptor</name></name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name><name>wal</name><operator>-&gt;</operator><name>wal_lock_interceptor_opaque</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwkv_exclusive_lock</name><argument_list>(<argument><expr><name><name>wal</name><operator>-&gt;</operator><name>iwkv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>wal</name><operator>-&gt;</operator><name>wal_lock_interceptor</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name><name>wal</name><operator>-&gt;</operator><name>wal_lock_interceptor</name></name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name><name>wal</name><operator>-&gt;</operator><name>wal_lock_interceptor_opaque</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_lock</name><argument_list>(<argument><expr><name>wal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>iwkv_exclusive_unlock</name><argument_list>(<argument><expr><name><name>wal</name><operator>-&gt;</operator><name>iwkv</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>wal</name><operator>-&gt;</operator><name>wal_lock_interceptor</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name><name>wal</name><operator>-&gt;</operator><name>wal_lock_interceptor</name></name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name><name>wal</name><operator>-&gt;</operator><name>wal_lock_interceptor_opaque</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_excl_unlock</name><parameter_list>(<parameter><decl><type><name>IWAL</name> <modifier>*</modifier></type><name>wal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_unlock</name><argument_list>(<argument><expr><name>wal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>iwkv_exclusive_unlock</name><argument_list>(<argument><expr><name><name>wal</name><operator>-&gt;</operator><name>iwkv</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>wal</name><operator>-&gt;</operator><name>wal_lock_interceptor</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name><name>wal</name><operator>-&gt;</operator><name>wal_lock_interceptor</name></name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name><name>wal</name><operator>-&gt;</operator><name>wal_lock_interceptor_opaque</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_init_locks</name><parameter_list>(<parameter><decl><type><name>IWAL</name> <modifier>*</modifier></type><name>wal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name> <init>= <expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wal</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rci</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_THREADING_ERRNO</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>wal</name><operator>-&gt;</operator><name>mtxp</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>wal</name><operator>-&gt;</operator><name>mtx</name></name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_wal_shutdown</name><parameter_list>(<parameter><decl><type><name>IWAL</name> <modifier>*</modifier></type><name>wal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <while>while <condition>(<expr><name><name>wal</name><operator>-&gt;</operator><name>bkp_stage</name></name></expr>)</condition> <block>{<block_content> <comment type="line">// todo: review</comment>
    <expr_stmt><expr><call><name>iwp_sleep</name><argument_list>(<argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><name><name>wal</name><operator>-&gt;</operator><name>open</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>wal</name><operator>-&gt;</operator><name>mtxp</name></name> <operator>&amp;&amp;</operator> <name><name>wal</name><operator>-&gt;</operator><name>cpt_condp</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><name><name>wal</name><operator>-&gt;</operator><name>mtxp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_cond_broadcast</name><argument_list>(<argument><expr><name><name>wal</name><operator>-&gt;</operator><name>cpt_condp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><name><name>wal</name><operator>-&gt;</operator><name>mtxp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>wal</name><operator>-&gt;</operator><name>cptp</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>pthread_join</name><argument_list>(<argument><expr><name><name>wal</name><operator>-&gt;</operator><name>cpt</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>wal</name><operator>-&gt;</operator><name>cptp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_destroy</name><parameter_list>(<parameter><decl><type><name>IWAL</name> <modifier>*</modifier></type><name>wal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>wal</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_wal_shutdown</name><argument_list>(<argument><expr><name>wal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>INVALIDHANDLE</name><argument_list>(<argument><expr><name><name>wal</name><operator>-&gt;</operator><name>fh</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwp_unlock</name><argument_list>(<argument><expr><name><name>wal</name><operator>-&gt;</operator><name>fh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>iwp_closefh</name><argument_list>(<argument><expr><name><name>wal</name><operator>-&gt;</operator><name>fh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>wal</name><operator>-&gt;</operator><name>cpt_condp</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>pthread_cond_destroy</name><argument_list>(<argument><expr><name><name>wal</name><operator>-&gt;</operator><name>cpt_condp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>wal</name><operator>-&gt;</operator><name>cpt_condp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>wal</name><operator>-&gt;</operator><name>mtxp</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><name><name>wal</name><operator>-&gt;</operator><name>mtxp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>wal</name><operator>-&gt;</operator><name>mtxp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>wal</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>wal</name><operator>-&gt;</operator><name>buf</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>wal</name><operator>-&gt;</operator><name>buf</name></name> <operator>-=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WBSEP</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>wal</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_flush_wl</name><parameter_list>(<parameter><decl><type><name>IWAL</name> <modifier>*</modifier></type><name>wal</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>sync</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>wal</name><operator>-&gt;</operator><name>bufpos</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>crc</name> <init>= <expr><ternary><condition><expr><name><name>wal</name><operator>-&gt;</operator><name>check_cp_crc</name></name></expr> ?</condition><then> <expr><call><name>iwu_crc32</name><argument_list>(<argument><expr><name><name>wal</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>wal</name><operator>-&gt;</operator><name>bufpos</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>WBSEP</name></type> <name>sep</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>id</name>  <operator>=</operator> <name>WOP_SEP</name></expr>,
      <expr><operator>.</operator><name>crc</name> <operator>=</operator> <name>crc</name></expr>,
      <expr><operator>.</operator><name>len</name> <operator>=</operator> <name><name>wal</name><operator>-&gt;</operator><name>bufpos</name></name></expr>
    }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>wz</name> <init>= <expr><name><name>wal</name><operator>-&gt;</operator><name>bufpos</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WBSEP</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>wp</name> <init>= <expr><name><name>wal</name><operator>-&gt;</operator><name>buf</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WBSEP</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sep</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>WBSEP</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwp_write</name><argument_list>(<argument><expr><name><name>wal</name><operator>-&gt;</operator><name>fh</name></name></expr></argument>, <argument><expr><name>wp</name></expr></argument>, <argument><expr><name>wz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>wal</name><operator>-&gt;</operator><name>bufpos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>sync</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwp_fsync</name><argument_list>(<argument><expr><name><name>wal</name><operator>-&gt;</operator><name>fh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>iwrc</name></type> <name>_truncate_wl</name><parameter_list>(<parameter><decl><type><name>IWAL</name> <modifier>*</modifier></type><name>wal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>iwp_ftruncate</name><argument_list>(<argument><expr><name><name>wal</name><operator>-&gt;</operator><name>fh</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>wal</name><operator>-&gt;</operator><name>rollforward_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwp_lseek</name><argument_list>(<argument><expr><name><name>wal</name><operator>-&gt;</operator><name>fh</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>IWP_SEEK_SET</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwp_fsync</name><argument_list>(<argument><expr><name><name>wal</name><operator>-&gt;</operator><name>fh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_write_wl</name><parameter_list>(<parameter><decl><type><name>IWAL</name> <modifier>*</modifier></type><name>wal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>oplen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>off_t</name></type> <name>bufsz</name> <init>= <expr><name><name>wal</name><operator>-&gt;</operator><name>bufsz</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>wal</name><operator>-&gt;</operator><name>synched</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>bufsz</name> <operator>-</operator> <name><name>wal</name><operator>-&gt;</operator><name>bufpos</name></name> <operator>&lt;</operator> <name>oplen</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_flush_wl</name><argument_list>(<argument><expr><name>wal</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>bufsz</name> <operator>-</operator> <name><name>wal</name><operator>-&gt;</operator><name>bufpos</name></name> <operator>&gt;=</operator> <name>oplen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>wal</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>wal</name><operator>-&gt;</operator><name>bufpos</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>oplen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>wal</name><operator>-&gt;</operator><name>bufpos</name></name> <operator>+=</operator> <name>oplen</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>bufsz</name> <operator>-</operator> <name><name>wal</name><operator>-&gt;</operator><name>bufpos</name></name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_flush_wl</name><argument_list>(<argument><expr><name>wal</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwp_write</name><argument_list>(<argument><expr><name><name>wal</name><operator>-&gt;</operator><name>fh</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>bufsz</name> <operator>-</operator> <name><name>wal</name><operator>-&gt;</operator><name>bufpos</name></name> <operator>&gt;=</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>wal</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>wal</name><operator>-&gt;</operator><name>bufpos</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>wal</name><operator>-&gt;</operator><name>bufpos</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>iwrc</name></type> <name>_write_op</name><parameter_list>(<parameter><decl><type><name>IWAL</name> <modifier>*</modifier></type><name>wal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>oplen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_lock</name><argument_list>(<argument><expr><name>wal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_write_wl</name><argument_list>(<argument><expr><name>wal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>oplen</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>_unlock</name><argument_list>(<argument><expr><name>wal</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwal_sync</name><parameter_list>(<parameter><decl><type><name>IWKV</name></type> <name>iwkv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>IWAL</name> <modifier>*</modifier></type><name>wal</name> <init>= <expr><operator>(</operator><name>IWAL</name><operator>*</operator><operator>)</operator> <name><name>iwkv</name><operator>-&gt;</operator><name>dlsnr</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_lock</name><argument_list>(<argument><expr><name>wal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_flush_wl</name><argument_list>(<argument><expr><name>wal</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>_unlock</name><argument_list>(<argument><expr><name>wal</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_onopen</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>IWDLSNR</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_onclosing</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>IWDLSNR</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>IWAL</name> <modifier>*</modifier></type><name>wal</name> <init>= <expr><operator>(</operator><name>IWAL</name><operator>*</operator><operator>)</operator> <name>self</name></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>IW_TESTS</name></cpp:ifdef>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>tv</name> <init>= <expr><name>g_trigger</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tv</name> <operator>&amp;</operator> <name>IWKVD_WAL_NO_CHECKPOINT_ON_CLOSE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_destroy</name><argument_list>(<argument><expr><name>wal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_checkpoint_exl</name><argument_list>(<argument><expr><name>wal</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>_destroy</name><argument_list>(<argument><expr><name>wal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_onset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>IWDLSNR</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>IWAL</name> <modifier>*</modifier></type><name>wal</name> <init>= <expr><operator>(</operator><name>IWAL</name><operator>*</operator><operator>)</operator> <name>self</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>wal</name><operator>-&gt;</operator><name>applying</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>WBSET</name></type> <name>wb</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>id</name>  <operator>=</operator> <name>WOP_SET</name></expr>,
    <expr><operator>.</operator><name>val</name> <operator>=</operator> <name>val</name></expr>,
    <expr><operator>.</operator><name>off</name> <operator>=</operator> <name>off</name></expr>,
    <expr><operator>.</operator><name>len</name> <operator>=</operator> <name>len</name></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>wal</name><operator>-&gt;</operator><name>mbytes</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
  <return>return <expr><call><name>_write_op</name><argument_list>(<argument><expr><operator>(</operator><name>IWAL</name><operator>*</operator><operator>)</operator> <name>self</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wb</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>wb</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_oncopy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>IWDLSNR</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>noff</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>IWAL</name> <modifier>*</modifier></type><name>wal</name> <init>= <expr><operator>(</operator><name>IWAL</name><operator>*</operator><operator>)</operator> <name>self</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>wal</name><operator>-&gt;</operator><name>applying</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>WBCOPY</name></type> <name>wb</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>id</name>   <operator>=</operator> <name>WOP_COPY</name></expr>,
    <expr><operator>.</operator><name>off</name>  <operator>=</operator> <name>off</name></expr>,
    <expr><operator>.</operator><name>len</name>  <operator>=</operator> <name>len</name></expr>,
    <expr><operator>.</operator><name>noff</name> <operator>=</operator> <name>noff</name></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>wal</name><operator>-&gt;</operator><name>mbytes</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
  <return>return <expr><call><name>_write_op</name><argument_list>(<argument><expr><name>wal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wb</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>wb</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_onwrite</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>IWDLSNR</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>len</name> <operator>&lt;=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>IWAL</name> <modifier>*</modifier></type><name>wal</name> <init>= <expr><operator>(</operator><name>IWAL</name><operator>*</operator><operator>)</operator> <name>self</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>wal</name><operator>-&gt;</operator><name>applying</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>WBWRITE</name></type> <name>wb</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>id</name>  <operator>=</operator> <name>WOP_WRITE</name></expr>,
    <expr><operator>.</operator><name>crc</name> <operator>=</operator> <name><name>wal</name><operator>-&gt;</operator><name>check_cp_crc</name></name> <operator>?</operator> <call><name>iwu_crc32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>len</name></expr></argument>,  <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>:</operator> <literal type="number">0</literal></expr>,
    <expr><operator>.</operator><name>len</name> <operator>=</operator> <name>len</name></expr>,
    <expr><operator>.</operator><name>off</name> <operator>=</operator> <name>off</name></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>wal</name><operator>-&gt;</operator><name>mbytes</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
  <return>return <expr><call><name>_write_op</name><argument_list>(<argument><expr><name>wal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wb</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>wb</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_onresize</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>IWDLSNR</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>osize</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>nsize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>handled</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>IWAL</name> <modifier>*</modifier></type><name>wal</name> <init>= <expr><operator>(</operator><name>IWAL</name><operator>*</operator><operator>)</operator> <name>self</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>wal</name><operator>-&gt;</operator><name>applying</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>handled</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>handled</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>WBRESIZE</name></type> <name>wb</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>id</name>    <operator>=</operator> <name>WOP_RESIZE</name></expr>,
    <expr><operator>.</operator><name>osize</name> <operator>=</operator> <name>osize</name></expr>,
    <expr><operator>.</operator><name>nsize</name> <operator>=</operator> <name>nsize</name></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_lock</name><argument_list>(<argument><expr><name>wal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_write_wl</name><argument_list>(<argument><expr><name>wal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wb</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>wb</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_checkpoint_exl</name><argument_list>(<argument><expr><name>wal</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>_unlock</name><argument_list>(<argument><expr><name>wal</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_onsynced</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>IWDLSNR</name></name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>IWAL</name> <modifier>*</modifier></type><name>wal</name> <init>= <expr><operator>(</operator><name>IWAL</name><operator>*</operator><operator>)</operator> <name>self</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>wal</name><operator>-&gt;</operator><name>applying</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_lock</name><argument_list>(<argument><expr><name>wal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_flush_wl</name><argument_list>(<argument><expr><name>wal</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>_unlock</name><argument_list>(<argument><expr><name>wal</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_last_fix_and_reset_points</name><parameter_list>(<parameter><decl><type><name>IWAL</name> <modifier>*</modifier></type><name>wal</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>wmm</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>fsz</name></decl></parameter>, <parameter><decl><type><name>off_t</name> <modifier>*</modifier></type><name>fpos</name></decl></parameter>, <parameter><decl><type><name>off_t</name> <modifier>*</modifier></type><name>rpos</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>rp</name> <init>= <expr><name>wmm</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>fpos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>rpos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>rp</name> <operator>-</operator> <name>wmm</name> <operator>&lt;</operator> <name>fsz</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>opid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>off_t</name></type> <name>avail</name> <init>= <expr><name>fsz</name> <operator>-</operator> <operator>(</operator><name>rp</name> <operator>-</operator> <name>wmm</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opid</name></expr></argument>, <argument><expr><name>rp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>opid</name> <operator>!=</operator> <name>WOP_SEP</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <switch>switch <condition>(<expr><name>opid</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>WOP_SEP</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>WBSEP</name></type> <name>wb</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>avail</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>wb</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
          <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wb</name></expr></argument>, <argument><expr><name>rp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>wb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rp</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>wb</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>wb</name><operator>.</operator><name>len</name></name> <operator>&gt;</operator> <name>avail</name></expr>)</condition> <block>{<block_content>
          <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>WOP_SET</name></expr>:</case> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>avail</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WBSET</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
          <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>rp</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WBSET</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>WOP_COPY</name></expr>:</case> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>avail</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WBCOPY</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
          <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>rp</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WBCOPY</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>WOP_WRITE</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>WBWRITE</name></type> <name>wb</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>avail</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>wb</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
          <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wb</name></expr></argument>, <argument><expr><name>rp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>wb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rp</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>wb</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>avail</name> <operator>&lt;</operator> <name><name>wb</name><operator>.</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
          <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>rp</name> <operator>+=</operator> <name><name>wb</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>WOP_RESIZE</name></expr>:</case> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>avail</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WBRESIZE</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
          <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>rp</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WBRESIZE</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>WOP_SAVEPOINT</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>fpos</name> <operator>=</operator> <operator>(</operator><name>rp</name> <operator>-</operator> <name>wmm</name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>rp</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WBSAVEPOINT</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>WOP_RESET</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>rpos</name> <operator>=</operator> <operator>(</operator><name>rp</name> <operator>-</operator> <name>wmm</name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>rp</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WBRESET</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <default>default:</default> <block>{<block_content>
        <return>return;</return>
        <break>break;</break>
      </block_content>}</block>
    </block_content>}</block></switch>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_rollforward_exl</name><parameter_list>(<parameter><decl><type><name>IWAL</name> <modifier>*</modifier></type><name>wal</name></decl></parameter>, <parameter><decl><type><name>IWFS_EXT</name> <modifier>*</modifier></type><name>extf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>recover_mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>wal</name><operator>-&gt;</operator><name>bufpos</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>off_t</name></type> <name>fsz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>iwp_lseek</name><argument_list>(<argument><expr><name><name>wal</name><operator>-&gt;</operator><name>fh</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>IWP_SEEK_END</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fsz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fsz</name></expr>)</condition> <block>{<block_content> <comment type="line">// empty wal log</comment>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>sp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mm</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>ccrc</name> <init>= <expr><name><name>wal</name><operator>-&gt;</operator><name>check_cp_crc</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>off_t</name></type> <name>fpos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="line">// checkpoint</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_WIN32</name></cpp:ifndef>
  <decl_stmt><decl><type><name>off_t</name></type> <name>pfsz</name> <init>= <expr><call><name>IW_ROUNDUP</name><argument_list>(<argument><expr><name>fsz</name></expr></argument>, <argument><expr><call><name>iwp_page_size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>wmm</name> <init>= <expr><call><name>mmap</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>pfsz</name></expr></argument>, <argument><expr><name>PROT_READ</name></expr></argument>, <argument><expr><name>MAP_PRIVATE</name></expr></argument>, <argument><expr><name><name>wal</name><operator>-&gt;</operator><name>fh</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MADV_SEQUENTIAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MADV_DONTFORK</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>int</name></type> <name>adv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MADV_SEQUENTIAL</name></cpp:ifdef>
  <expr_stmt><expr><name>adv</name> <operator>|=</operator> <name>MADV_SEQUENTIAL</name></expr>;</expr_stmt>
  <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MADV_DONTFORK</name></cpp:ifdef>
  <expr_stmt><expr><name>adv</name> <operator>|=</operator> <name>MADV_DONTFORK</name></expr>;</expr_stmt>
  <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>madvise</name><argument_list>(<argument><expr><name>wmm</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>fsz</name></expr></argument>, <argument><expr><name>adv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>off_t</name></type> <name>pfsz</name> <init>= <expr><name>fsz</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>wmm</name> <init>= <expr><call><name>mmap</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PROT_READ</name></expr></argument>, <argument><expr><name>MAP_PRIVATE</name></expr></argument>, <argument><expr><name><name>wal</name><operator>-&gt;</operator><name>fh</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <if_stmt><if>if <condition>(<expr><name>wmm</name> <operator>==</operator> <name>MAP_FAILED</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ERRNO</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// Temporary turn off extf locking</comment>
  <expr_stmt><expr><name><name>wal</name><operator>-&gt;</operator><name>applying</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

  <comment type="line">// Remap fsm in MAP_SHARED mode</comment>
  <expr_stmt><expr><call><name><name>extf</name><operator>-&gt;</operator><name>remove_mmap_unsafe</name></name><argument_list>(<argument><expr><name>extf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>extf</name><operator>-&gt;</operator><name>add_mmap_unsafe</name></name><argument_list>(<argument><expr><name>extf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SIZE_T_MAX</name></expr></argument>, <argument><expr><name>IWFS_MMAP_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>munmap</name><argument_list>(<argument><expr><name>wmm</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>pfsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>wal</name><operator>-&gt;</operator><name>iwkv</name><operator>-&gt;</operator><name>fatalrc</name></name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>wal</name><operator>-&gt;</operator><name>applying</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_WAL_CORRUPTED</name><parameter_list>(<parameter><type><name>msg_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { \
    rc = IWKV_ERROR_CORRUPTED_WAL_FILE; \
    iwlog_ecode_error2(rc, msg_); \
    goto finish; \
} while (0);</cpp:value></cpp:define>

  <if_stmt><if>if <condition>(<expr><name>recover_mode</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>off_t</name></type> <name>rpos</name></decl>;</decl_stmt> <comment type="line">// reset point</comment>
    <expr_stmt><expr><call><name>_last_fix_and_reset_points</name><argument_list>(<argument><expr><name>wal</name></expr></argument>, <argument><expr><name>wmm</name></expr></argument>, <argument><expr><name>fsz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fpos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fpos</name></expr>)</condition> <block>{<block_content>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>rpos</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>recover_mode</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <comment type="line">// Recover from last known reset point</comment>
      <if_stmt><if>if <condition>(<expr><name>fpos</name> <operator>&lt;</operator> <name>rpos</name></expr>)</condition> <block>{<block_content>
        <goto>goto <name>finish</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <comment type="line">// WBSEP__WBRESET</comment>
      <comment type="line">//        \_rpos</comment>
      <expr_stmt><expr><name>rpos</name> <operator>-=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WBSEP</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
      <comment type="line">// WBSEP__WBRESET</comment>
      <comment type="line">// \_rpos</comment>
      <expr_stmt><expr><name>wmm</name> <operator>+=</operator> <name>rpos</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>fsz</name> <operator>-=</operator> <name>rpos</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>wal</name><operator>-&gt;</operator><name>rollforward_offset</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>wal</name><operator>-&gt;</operator><name>rollforward_offset</name></name> <operator>&gt;=</operator> <name>fsz</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>_WAL_CORRUPTED</name><argument_list>(<argument><expr><literal type="string">"Invalid rollforward offset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>wmm</name> <operator>+=</operator> <name><name>wal</name><operator>-&gt;</operator><name>rollforward_offset</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>fsz</name> <operator>-=</operator> <name><name>wal</name><operator>-&gt;</operator><name>rollforward_offset</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>rp</name> <init>= <expr><name>wmm</name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>rp</name> <operator>-</operator> <name>wmm</name> <operator>&lt;</operator> <name>fsz</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>opid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>off_t</name></type> <name>avail</name> <init>= <expr><name>fsz</name> <operator>-</operator> <operator>(</operator><name>rp</name> <operator>-</operator> <name>wmm</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opid</name></expr></argument>, <argument><expr><name>rp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>opid</name> <operator>!=</operator> <name>WOP_SEP</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IWKV_ERROR_CORRUPTED_WAL_FILE</name></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <switch>switch <condition>(<expr><name>opid</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>WOP_SEP</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>WBSEP</name></type> <name>wb</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>avail</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>wb</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>_WAL_CORRUPTED</name><argument_list>(<argument><expr><literal type="string">"Premature end of WAL (WBSEP)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wb</name></expr></argument>, <argument><expr><name>rp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>wb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rp</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>wb</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>wb</name><operator>.</operator><name>len</name></name> <operator>&gt;</operator> <name>avail</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>_WAL_CORRUPTED</name><argument_list>(<argument><expr><literal type="string">"Premature end of WAL (WBSEP)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>ccrc</name> <operator>&amp;&amp;</operator> <name><name>wb</name><operator>.</operator><name>crc</name></name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>uint32_t</name></type> <name>crc</name> <init>= <expr><call><name>iwu_crc32</name><argument_list>(<argument><expr><name>rp</name></expr></argument>, <argument><expr><name><name>wb</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name>crc</name> <operator>!=</operator> <name><name>wb</name><operator>.</operator><name>crc</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>_WAL_CORRUPTED</name><argument_list>(<argument><expr><literal type="string">"Invalid CRC32 checksum of WAL segment (WBSEP)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>WOP_SET</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>WBSET</name></type> <name>wb</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>avail</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>wb</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>_WAL_CORRUPTED</name><argument_list>(<argument><expr><literal type="string">"Premature end of WAL (WBSET)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wb</name></expr></argument>, <argument><expr><name>rp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>wb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rp</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>wb</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>extf</name><operator>-&gt;</operator><name>probe_mmap_unsafe</name></name><argument_list>(<argument><expr><name>extf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>mm</name> <operator>+</operator> <name><name>wb</name><operator>.</operator><name>off</name></name></expr></argument>, <argument><expr><name><name>wb</name><operator>.</operator><name>val</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name><name>wb</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>WOP_COPY</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>WBCOPY</name></type> <name>wb</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>avail</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>wb</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>_WAL_CORRUPTED</name><argument_list>(<argument><expr><literal type="string">"Premature end of WAL (WBCOPY)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wb</name></expr></argument>, <argument><expr><name>rp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>wb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rp</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>wb</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>extf</name><operator>-&gt;</operator><name>probe_mmap_unsafe</name></name><argument_list>(<argument><expr><name>extf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>mm</name> <operator>+</operator> <name><name>wb</name><operator>.</operator><name>noff</name></name></expr></argument>, <argument><expr><name>mm</name> <operator>+</operator> <name><name>wb</name><operator>.</operator><name>off</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name><name>wb</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>WOP_WRITE</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>WBWRITE</name></type> <name>wb</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>avail</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>wb</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>_WAL_CORRUPTED</name><argument_list>(<argument><expr><literal type="string">"Premature end of WAL (WBWRITE)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wb</name></expr></argument>, <argument><expr><name>rp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>wb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rp</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>wb</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>avail</name> <operator>&lt;</operator> <name><name>wb</name><operator>.</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>_WAL_CORRUPTED</name><argument_list>(<argument><expr><literal type="string">"Premature end of WAL (WBWRITE)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>ccrc</name> <operator>&amp;&amp;</operator> <name><name>wb</name><operator>.</operator><name>crc</name></name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>uint32_t</name></type> <name>crc</name> <init>= <expr><call><name>iwu_crc32</name><argument_list>(<argument><expr><name>rp</name></expr></argument>, <argument><expr><name><name>wb</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name>crc</name> <operator>!=</operator> <name><name>wb</name><operator>.</operator><name>crc</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>_WAL_CORRUPTED</name><argument_list>(<argument><expr><literal type="string">"Invalid CRC32 checksum of WAL segment (WBWRITE)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>extf</name><operator>-&gt;</operator><name>probe_mmap_unsafe</name></name><argument_list>(<argument><expr><name>extf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>mm</name> <operator>+</operator> <name><name>wb</name><operator>.</operator><name>off</name></name></expr></argument>, <argument><expr><name>rp</name></expr></argument>, <argument><expr><name><name>wb</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rp</name> <operator>+=</operator> <name><name>wb</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>WOP_RESIZE</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>WBRESIZE</name></type> <name>wb</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>avail</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>wb</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>_WAL_CORRUPTED</name><argument_list>(<argument><expr><literal type="string">"Premature end of WAL (WBRESIZE)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wb</name></expr></argument>, <argument><expr><name>rp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>wb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rp</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>wb</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>extf</name><operator>-&gt;</operator><name>truncate_unsafe</name></name><argument_list>(<argument><expr><name>extf</name></expr></argument>, <argument><expr><name><name>wb</name><operator>.</operator><name>nsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>WOP_SAVEPOINT</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name>fpos</name> <operator>==</operator> <name>rp</name> <operator>-</operator> <name>wmm</name></expr>)</condition> <block>{<block_content> <comment type="line">// last fixpoint to</comment>
          <decl_stmt><decl><type><name>WBSAVEPOINT</name></type> <name>wb</name></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wb</name></expr></argument>, <argument><expr><name>rp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>wb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>iwlog_warn</name><argument_list>(<argument><expr><literal type="string">"Database recovered at point of time: %"</literal>
                     <name>PRIu64</name>
                     <literal type="string">" ms since epoch\n"</literal></expr></argument>, <argument><expr><name><name>wb</name><operator>.</operator><name>ts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <goto>goto <name>finish</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>rp</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WBSAVEPOINT</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>WOP_RESET</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><name>rp</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WBRESET</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <default>default:</default> <block>{<block_content>
        <expr_stmt><expr><call><name>_WAL_CORRUPTED</name><argument_list>(<argument><expr><literal type="string">"Invalid WAL command"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
    </block_content>}</block></switch>
  </block_content>}</block></for>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_WAL_CORRUPTED</name></cpp:undef>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>extf</name><operator>-&gt;</operator><name>sync_mmap_unsafe</name></name><argument_list>(<argument><expr><name>extf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>IWFS_SYNCDEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>munmap</name><argument_list>(<argument><expr><name>wmm</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>pfsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name><name>extf</name><operator>-&gt;</operator><name>remove_mmap_unsafe</name></name><argument_list>(<argument><expr><name>extf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name><name>extf</name><operator>-&gt;</operator><name>add_mmap_unsafe</name></name><argument_list>(<argument><expr><name>extf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SIZE_T_MAX</name></expr></argument>, <argument><expr><name>IWFS_MMAP_PRIVATE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rc</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>stage</name> <init>= <expr><name><name>wal</name><operator>-&gt;</operator><name>bkp_stage</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>stage</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>stage</name> <operator>==</operator> <name>BKP_WAL_CLEANUP</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_truncate_wl</name><argument_list>(<argument><expr><name>wal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="line">// Don't truncate WAL during online backup.</comment>
      <comment type="line">// Just append the WBRESET mark</comment>
      <decl_stmt><decl><type><name>WBRESET</name></type> <name>wb</name> <init>= <expr><block>{
        <expr><operator>.</operator><name>id</name> <operator>=</operator> <name>WOP_RESET</name></expr>
      }</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>_flush_wl</name><argument_list>(<argument><expr><name>wal</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// Write: WBSEP + WBRESET</comment>
      <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>_write_wl</name><argument_list>(<argument><expr><name>wal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wb</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>wb</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>_flush_wl</name><argument_list>(<argument><expr><name>wal</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>iwp_lseek</name><argument_list>(<argument><expr><name><name>wal</name><operator>-&gt;</operator><name>fh</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>IWP_SEEK_END</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fsz</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rc</name></expr>)</condition> <block>{<block_content>
        <comment type="line">// rollforward_offset points here --&gt; WBSEP __ WBRESET __ EOF</comment>
        <expr_stmt><expr><name><name>wal</name><operator>-&gt;</operator><name>rollforward_offset</name></name> <operator>=</operator> <name>fsz</name> <operator>-</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>WBSEP</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WBRESET</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>wal</name><operator>-&gt;</operator><name>iwkv</name><operator>-&gt;</operator><name>fatalrc</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>wal</name><operator>-&gt;</operator><name>iwkv</name><operator>-&gt;</operator><name>fatalrc</name></name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>wal</name><operator>-&gt;</operator><name>synched</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>wal</name><operator>-&gt;</operator><name>applying</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_recover_wl</name><parameter_list>(<parameter><decl><type><name>IWKV</name></type> <name>iwkv</name></decl></parameter>, <parameter><decl><type><name>IWAL</name> <modifier>*</modifier></type><name>wal</name></decl></parameter>, <parameter><decl><type><name>IWFS_FSM_OPTS</name> <modifier>*</modifier></type><name>fsmopts</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>recover_backup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>off_t</name></type> <name>fsz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>iwp_lseek</name><argument_list>(<argument><expr><name><name>wal</name><operator>-&gt;</operator><name>fh</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>IWP_SEEK_END</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fsz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fsz</name></expr>)</condition> <block>{<block_content> <comment type="line">// empty wal log</comment>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>IWFS_EXT</name></type> <name>extf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWFS_EXT_OPTS</name></type> <name>extopts</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>extopts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fsmopts</name><operator>-&gt;</operator><name>exfile</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>extopts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>extopts</name><operator>.</operator><name>use_locks</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>extopts</name><operator>.</operator><name>file</name><operator>.</operator><name>omode</name></name> <operator>=</operator> <name>IWFS_OCREATE</name> <operator>|</operator> <name>IWFS_OWRITE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>extopts</name><operator>.</operator><name>file</name><operator>.</operator><name>dlsnr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwfs_exfile_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name>extf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>extopts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_rollforward_exl</name><argument_list>(<argument><expr><name>wal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>extf</name></expr></argument>, <argument><expr><ternary><condition><expr><name>recover_backup</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name><name>extf</name><operator>.</operator><name>close</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>extf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>bool</name></type> <name>_need_checkpoint</name><parameter_list>(<parameter><decl><type><name>IWAL</name> <modifier>*</modifier></type><name>wal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>mbytes</name> <init>= <expr><name><name>wal</name><operator>-&gt;</operator><name>mbytes</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>force</name> <init>= <expr><name><name>wal</name><operator>-&gt;</operator><name>force_cp</name></name></expr></init></decl>;</decl_stmt>
  <return>return <expr><operator>(</operator><name>force</name> <operator>||</operator> <name>mbytes</name> <operator>&gt;=</operator> <name><name>wal</name><operator>-&gt;</operator><name>checkpoint_buffer_sz</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_checkpoint_exl</name><parameter_list>(<parameter><decl><type><name>IWAL</name> <modifier>*</modifier></type><name>wal</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>tsp</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>no_fixpoint</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>tsp</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>tsp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>stage</name> <init>= <expr><name><name>wal</name><operator>-&gt;</operator><name>bkp_stage</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>stage</name> <operator>==</operator> <name>BKP_MAIN_COPY</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// No checkpoints during main file copying</comment>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWFS_EXT</name> <modifier>*</modifier></type><name>extf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWKV</name></type> <name>iwkv</name> <init>= <expr><name><name>wal</name><operator>-&gt;</operator><name>iwkv</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>no_fixpoint</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>wal</name><operator>-&gt;</operator><name>force_cp</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>wal</name><operator>-&gt;</operator><name>force_sp</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>WBSAVEPOINT</name></type> <name>wb</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>id</name> <operator>=</operator> <name>WOP_SAVEPOINT</name></expr>
    }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwp_current_time_ms</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wb</name><operator>.</operator><name>ts</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_write_wl</name><argument_list>(<argument><expr><name>wal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wb</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>wb</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_flush_wl</name><argument_list>(<argument><expr><name>wal</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>iwkv</name><operator>-&gt;</operator><name>fsm</name><operator>.</operator><name>extfile</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iwkv</name><operator>-&gt;</operator><name>fsm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>extf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_rollforward_exl</name><argument_list>(<argument><expr><name>wal</name></expr></argument>, <argument><expr><name>extf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>wal</name><operator>-&gt;</operator><name>mbytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>wal</name><operator>-&gt;</operator><name>synched</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>iwp_current_time_ms</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wal</name><operator>-&gt;</operator><name>checkpoint_ts</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>tsp</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>tsp</name> <operator>=</operator> <name><name>wal</name><operator>-&gt;</operator><name>checkpoint_ts</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>iwkv</name><operator>-&gt;</operator><name>fatalrc</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>iwkv</name><operator>-&gt;</operator><name>fatalrc</name></name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>IW_TESTS</name></cpp:ifdef>

<function><type><name>iwrc</name></type> <name>iwal_test_checkpoint</name><parameter_list>(<parameter><decl><type><name>IWKV</name></type> <name>iwkv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>iwkv</name><operator>-&gt;</operator><name>dlsnr</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IWKV_ERROR_WAL_MODE_REQUIRED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>IWAL</name> <modifier>*</modifier></type><name>wal</name> <init>= <expr><operator>(</operator><name>IWAL</name><operator>*</operator><operator>)</operator> <name><name>iwkv</name><operator>-&gt;</operator><name>dlsnr</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_excl_lock</name><argument_list>(<argument><expr><name>wal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_checkpoint_exl</name><argument_list>(<argument><expr><name>wal</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>_excl_unlock</name><argument_list>(<argument><expr><name>wal</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line">//--------------------------------------- Public API</comment>

<function><type><name>WUR</name> <name>iwrc</name></type> <name>iwal_poke_checkpoint</name><parameter_list>(<parameter><decl><type><name>IWKV</name></type> <name>iwkv</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>force</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>IWAL</name> <modifier>*</modifier></type><name>wal</name> <init>= <expr><operator>(</operator><name>IWAL</name><operator>*</operator><operator>)</operator> <name><name>iwkv</name><operator>-&gt;</operator><name>dlsnr</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>wal</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name>force</name> <operator>||</operator> <call><name>_need_checkpoint</name><argument_list>(<argument><expr><name>wal</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_lock</name><argument_list>(<argument><expr><name>wal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>cforce</name> <init>= <expr><name><name>wal</name><operator>-&gt;</operator><name>force_cp</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>cforce</name></expr>)</condition> <block>{<block_content> <comment type="line">// Forced already</comment>
    <expr_stmt><expr><call><name>_unlock</name><argument_list>(<argument><expr><name>wal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>force</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>wal</name><operator>-&gt;</operator><name>force_cp</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>_need_checkpoint</name><argument_list>(<argument><expr><name>wal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_unlock</name><argument_list>(<argument><expr><name>wal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name> <init>= <expr><call><name>pthread_cond_broadcast</name><argument_list>(<argument><expr><name><name>wal</name><operator>-&gt;</operator><name>cpt_condp</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rci</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_THREADING_ERRNO</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>_unlock</name><argument_list>(<argument><expr><name>wal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwal_poke_savepoint</name><parameter_list>(<parameter><decl><type><name>IWKV</name></type> <name>iwkv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>IWAL</name> <modifier>*</modifier></type><name>wal</name> <init>= <expr><operator>(</operator><name>IWAL</name><operator>*</operator><operator>)</operator> <name><name>iwkv</name><operator>-&gt;</operator><name>dlsnr</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>wal</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_lock</name><argument_list>(<argument><expr><name>wal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>fsp</name> <init>= <expr><name><name>wal</name><operator>-&gt;</operator><name>force_sp</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fsp</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>wal</name><operator>-&gt;</operator><name>force_sp</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rci</name> <init>= <expr><call><name>pthread_cond_broadcast</name><argument_list>(<argument><expr><name><name>wal</name><operator>-&gt;</operator><name>cpt_condp</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>rci</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_THREADING_ERRNO</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>_unlock</name><argument_list>(<argument><expr><name>wal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>_savepoint_exl</name><parameter_list>(<parameter><decl><type><name>IWAL</name> <modifier>*</modifier></type><name>wal</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>tsp</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>sync</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>tsp</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>tsp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>wal</name><operator>-&gt;</operator><name>force_sp</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>WBSAVEPOINT</name></type> <name>wbfp</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>id</name> <operator>=</operator> <name>WOP_SAVEPOINT</name></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>iwp_current_time_ms</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wbfp</name><operator>.</operator><name>ts</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_write_wl</name><argument_list>(<argument><expr><name>wal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wbfp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>wbfp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_flush_wl</name><argument_list>(<argument><expr><name>wal</name></expr></argument>, <argument><expr><name>sync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>sync</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>wal</name><operator>-&gt;</operator><name>synched</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>tsp</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>tsp</name> <operator>=</operator> <name><name>wbfp</name><operator>.</operator><name>ts</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>iwal_synched</name><parameter_list>(<parameter><decl><type><name>IWKV</name></type> <name>iwkv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>IWAL</name> <modifier>*</modifier></type><name>wal</name> <init>= <expr><operator>(</operator><name>IWAL</name><operator>*</operator><operator>)</operator> <name><name>iwkv</name><operator>-&gt;</operator><name>dlsnr</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>wal</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name><name>wal</name><operator>-&gt;</operator><name>synched</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwal_savepoint_exl</name><parameter_list>(<parameter><decl><type><name>IWKV</name></type> <name>iwkv</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>sync</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>IWAL</name> <modifier>*</modifier></type><name>wal</name> <init>= <expr><operator>(</operator><name>IWAL</name><operator>*</operator><operator>)</operator> <name><name>iwkv</name><operator>-&gt;</operator><name>dlsnr</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>wal</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>_savepoint_exl</name><argument_list>(<argument><expr><name>wal</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sync</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwal_shutdown</name><parameter_list>(<parameter><decl><type><name>IWKV</name></type> <name>iwkv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>IWAL</name> <modifier>*</modifier></type><name>wal</name> <init>= <expr><operator>(</operator><name>IWAL</name><operator>*</operator><operator>)</operator> <name><name>iwkv</name><operator>-&gt;</operator><name>dlsnr</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>wal</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_wal_shutdown</name><argument_list>(<argument><expr><name>wal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>_cpt_worker_fn</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWAL</name> <modifier>*</modifier></type><name>wal</name> <init>= <expr><name>op</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWKV</name></type> <name>iwkv</name> <init>= <expr><name><name>wal</name><operator>-&gt;</operator><name>iwkv</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>savepoint_ts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name><name>wal</name><operator>-&gt;</operator><name>open</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>tp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>tick_ts</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>sp</name> <init>= <expr><name>false</name></expr></init></decl>, <decl><type ref="prev"/><name>cp</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_lock</name><argument_list>(<argument><expr><name>wal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCBREAK</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>_need_checkpoint</name><argument_list>(<argument><expr><name>wal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>cp</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>_unlock</name><argument_list>(<argument><expr><name>wal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>cprun</name>;</goto>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>wal</name><operator>-&gt;</operator><name>force_sp</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>sp</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>_unlock</name><argument_list>(<argument><expr><name>wal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>cprun</name>;</goto>
    </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IW_HAVE_CLOCK_MONOTONIC</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>IW_HAVE_PTHREAD_CONDATTR_SETCLOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwp_clock_get_time</name><argument_list>(<argument><expr><name>CLOCK_MONOTONIC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwp_clock_get_time</name><argument_list>(<argument><expr><name>CLOCK_REALTIME</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>_unlock</name><argument_list>(<argument><expr><name>wal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>tp</name><operator>.</operator><name>tv_sec</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="line">// one sec tick</comment>
    <expr_stmt><expr><name>tick_ts</name> <operator>=</operator> <name><name>tp</name><operator>.</operator><name>tv_sec</name></name> <operator>*</operator> <literal type="number">1000</literal> <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <call><name>round</name><argument_list>(<argument><expr><name><name>tp</name><operator>.</operator><name>tv_nsec</name></name> <operator>/</operator> <literal type="number">1.0e6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <do>do <block>{<block_content>
      <expr_stmt><expr><name>rci</name> <operator>=</operator> <call><name>pthread_cond_timedwait</name><argument_list>(<argument><expr><name><name>wal</name><operator>-&gt;</operator><name>cpt_condp</name></name></expr></argument>, <argument><expr><name><name>wal</name><operator>-&gt;</operator><name>mtxp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> while <condition>(<expr><name>rci</name> <operator>==</operator> <name>EINTR</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>wal</name><operator>-&gt;</operator><name>open</name></name></expr>)</condition>;</do>
    <if_stmt><if>if <condition>(<expr><name>rci</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>rci</name> <operator>!=</operator> <name>ETIMEDOUT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_THREADING_ERRNO</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>_unlock</name><argument_list>(<argument><expr><name>wal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>wal</name><operator>-&gt;</operator><name>open</name></name> <operator>||</operator> <name><name>iwkv</name><operator>-&gt;</operator><name>fatalrc</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>_unlock</name><argument_list>(<argument><expr><name>wal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>synched</name> <init>= <expr><name><name>wal</name><operator>-&gt;</operator><name>synched</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>mbytes</name> <init>= <expr><name><name>wal</name><operator>-&gt;</operator><name>mbytes</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>_need_checkpoint</name><argument_list>(<argument><expr><name>wal</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><operator>(</operator><name>mbytes</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>tick_ts</name> <operator>-</operator> <name><name>wal</name><operator>-&gt;</operator><name>checkpoint_ts</name></name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">1000LL</literal> <operator>*</operator> <name><name>wal</name><operator>-&gt;</operator><name>checkpoint_timeout_sec</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>cp</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>sp</name> <operator>=</operator> <operator>!</operator><name>synched</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>wal</name><operator>-&gt;</operator><name>force_sp</name></name> <operator>||</operator> <operator>(</operator><operator>(</operator><name>tick_ts</name> <operator>-</operator> <name>savepoint_ts</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">1000LL</literal> <operator>*</operator> <name><name>wal</name><operator>-&gt;</operator><name>savepoint_timeout_sec</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>_unlock</name><argument_list>(<argument><expr><name>wal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>cprun</name>:</label>
    <if_stmt><if>if <condition>(<expr><name>cp</name> <operator>||</operator> <name>sp</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_excl_lock</name><argument_list>(<argument><expr><name>wal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCBREAK</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>iwkv</name><operator>-&gt;</operator><name>open</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>cp</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_checkpoint_exl</name><argument_list>(<argument><expr><name>wal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>savepoint_ts</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_savepoint_exl</name><argument_list>(<argument><expr><name>wal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>savepoint_ts</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>_excl_unlock</name><argument_list>(<argument><expr><name>wal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>iwlog_ecode_error2</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="string">"WAL worker savepoint/checkpoint error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>iwkv</name><operator>-&gt;</operator><name>fatalrc</name></name> <operator>=</operator> <ternary><condition><expr><name><name>iwkv</name><operator>-&gt;</operator><name>fatalrc</name></name></expr> ?</condition><then> <expr><name><name>iwkv</name><operator>-&gt;</operator><name>fatalrc</name></name></expr> </then><else>: <expr><name>rc</name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwlog_ecode_error2</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="string">"WAL worker exited with error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwal_online_backup</name><parameter_list>(<parameter><decl><type><name>IWKV</name></type> <name>iwkv</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>ts</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>target_file</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>sp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>lv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>llv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">16384</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>off_t</name></type> <name>off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>fsize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>ts</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>target_file</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>IWAL</name> <modifier>*</modifier></type><name>wal</name> <init>= <expr><operator>(</operator><name>IWAL</name><operator>*</operator><operator>)</operator> <name><name>iwkv</name><operator>-&gt;</operator><name>dlsnr</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>wal</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IWKV_ERROR_WAL_MODE_REQUIRED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_lock</name><argument_list>(<argument><expr><name>wal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>wal</name><operator>-&gt;</operator><name>bkp_stage</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IWKV_ERROR_BACKUP_IN_PROGRESS</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>wal</name><operator>-&gt;</operator><name>bkp_stage</name></name> <operator>=</operator> <name>BKP_STARTED</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>_unlock</name><argument_list>(<argument><expr><name>wal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_WIN32</name></cpp:ifndef>
  <decl_stmt><decl><type><name>HANDLE</name></type> <name>fh</name> <init>= <expr><call><name>open</name><argument_list>(<argument><expr><name>target_file</name></expr></argument>, <argument><expr><name>O_CREAT</name> <operator>|</operator> <name>O_WRONLY</name> <operator>|</operator> <name>O_TRUNC</name></expr></argument>, <argument><expr><literal type="number">00600</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>INVALIDHANDLE</name><argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_IO_ERRNO</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>HANDLE</name></type> <name>fh</name> <init>= <expr><call><name>CreateFile</name><argument_list>(<argument><expr><name>target_file</name></expr></argument>, <argument><expr><name>GENERIC_READ</name> <operator>|</operator> <name>GENERIC_WRITE</name></expr></argument>, <argument><expr><name>FILE_SHARE_READ</name> <operator>|</operator> <name>FILE_SHARE_WRITE</name></expr></argument>,
                         <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>CREATE_ALWAYS</name></expr></argument>, <argument><expr><name>FILE_ATTRIBUTE_NORMAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>INVALIDHANDLE</name><argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_werror</name><argument_list>(<argument><expr><name>IW_ERROR_IO_ERRNO</name></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="line">// Flush all pending WAL changes</comment>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_excl_lock</name><argument_list>(<argument><expr><name>wal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>wal</name><operator>-&gt;</operator><name>bkp_stage</name></name> <operator>=</operator> <name>BKP_WAL_CLEANUP</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_checkpoint_exl</name><argument_list>(<argument><expr><name>wal</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>wal</name><operator>-&gt;</operator><name>bkp_stage</name></name> <operator>=</operator> <name>BKP_MAIN_COPY</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_excl_unlock</name><argument_list>(<argument><expr><name>wal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Copy main database file</comment>
  <decl_stmt><decl><type><name>IWFS_FSM_STATE</name></type> <name>fstate</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>iwkv</name><operator>-&gt;</operator><name>fsm</name><operator>.</operator><name>state</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iwkv</name><operator>-&gt;</operator><name>fsm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <do>do <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwp_pread</name><argument_list>(<argument><expr><name><name>fstate</name><operator>.</operator><name>exfile</name><operator>.</operator><name>file</name><operator>.</operator><name>fh</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>sp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwp_write</name><argument_list>(<argument><expr><name>fh</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>off</name> <operator>+=</operator> <name>sp</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block> while <condition>(<expr><name>sp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>

  <comment type="line">// Copy most of WAL file content</comment>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_lock</name><argument_list>(<argument><expr><name>wal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>wal</name><operator>-&gt;</operator><name>bkp_stage</name></name> <operator>=</operator> <name>BKP_WAL_COPY1</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_flush_wl</name><argument_list>(<argument><expr><name>wal</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_unlock</name><argument_list>(<argument><expr><name>wal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>fsize</name> <operator>=</operator> <name>off</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>off</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <do>do <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwp_pread</name><argument_list>(<argument><expr><name><name>wal</name><operator>-&gt;</operator><name>fh</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>sp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwp_write</name><argument_list>(<argument><expr><name>fh</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>off</name> <operator>+=</operator> <name>sp</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block> while <condition>(<expr><name>sp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>


  <comment type="line">// Copy rest of WAL file in exclusive locked mode</comment>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_excl_lock</name><argument_list>(<argument><expr><name>wal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>wal</name><operator>-&gt;</operator><name>bkp_stage</name></name> <operator>=</operator> <name>BKP_WAL_COPY2</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_savepoint_exl</name><argument_list>(<argument><expr><name>wal</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>unlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <do>do <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwp_pread</name><argument_list>(<argument><expr><name><name>wal</name><operator>-&gt;</operator><name>fh</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>unlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>sp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwp_write</name><argument_list>(<argument><expr><name>fh</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>unlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>off</name> <operator>+=</operator> <name>sp</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block> while <condition>(<expr><name>sp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>

  <expr_stmt><expr><name>llv</name> <operator>=</operator> <call><name>IW_HTOILL</name><argument_list>(<argument><expr><name>fsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwp_write</name><argument_list>(<argument><expr><name>fh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>llv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>llv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>unlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>lv</name> <operator>=</operator> <call><name>IW_HTOIL</name><argument_list>(<argument><expr><name>IWKV_BACKUP_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwp_write</name><argument_list>(<argument><expr><name>fh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>unlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>unlock</name>:</label>
  <expr_stmt><expr><name><name>wal</name><operator>-&gt;</operator><name>bkp_stage</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>_excl_unlock</name><argument_list>(<argument><expr><name>wal</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_lock</name><argument_list>(<argument><expr><name>wal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>wal</name><operator>-&gt;</operator><name>bkp_stage</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_unlock</name><argument_list>(<argument><expr><name>wal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwal_poke_checkpoint</name><argument_list>(<argument><expr><name>iwkv</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>INVALIDHANDLE</name><argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>iwp_fdatasync</name><argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>IWRC</name><argument_list>(<argument><expr><call><name>iwp_closefh</name><argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>_init_cpt</name><parameter_list>(<parameter><decl><type><name>IWAL</name> <modifier>*</modifier></type><name>wal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(  <expr><operator>(</operator><name><name>wal</name><operator>-&gt;</operator><name>savepoint_timeout_sec</name></name> <operator>==</operator> <name>UINT32_MAX</name><operator>)</operator>
     <operator>&amp;&amp;</operator> <operator>(</operator><name><name>wal</name><operator>-&gt;</operator><name>checkpoint_timeout_sec</name></name> <operator>==</operator> <name>UINT32_MAX</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <comment type="line">// do not start checkpoint thread</comment>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>pthread_attr_t</name></type> <name>pattr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>pthread_condattr_t</name></type> <name>cattr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name> <init>= <expr><call><name>pthread_condattr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cattr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rci</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_THREADING_ERRNO</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IW_HAVE_CLOCK_MONOTONIC</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>IW_HAVE_PTHREAD_CONDATTR_SETCLOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><name>rci</name> <operator>=</operator> <call><name>pthread_condattr_setclock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cattr</name></expr></argument>, <argument><expr><name>CLOCK_MONOTONIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rci</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_THREADING_ERRNO</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><name>rci</name> <operator>=</operator> <call><name>pthread_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wal</name><operator>-&gt;</operator><name>cpt_cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cattr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rci</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_THREADING_ERRNO</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>wal</name><operator>-&gt;</operator><name>cpt_condp</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>wal</name><operator>-&gt;</operator><name>cpt_cond</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>rci</name> <operator>=</operator> <call><name>pthread_attr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pattr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rci</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_THREADING_ERRNO</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>pthread_attr_setdetachstate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pattr</name></expr></argument>, <argument><expr><name>PTHREAD_CREATE_JOINABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rci</name> <operator>=</operator> <call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wal</name><operator>-&gt;</operator><name>cpt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pattr</name></expr></argument>, <argument><expr><name>_cpt_worker_fn</name></expr></argument>, <argument><expr><name>wal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rci</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_THREADING_ERRNO</name></expr></argument>, <argument><expr><name>rci</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>wal</name><operator>-&gt;</operator><name>cptp</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>wal</name><operator>-&gt;</operator><name>cpt</name></name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwal_create</name><parameter_list>(<parameter><decl><type><name>IWKV</name></type> <name>iwkv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>IWKV_OPTS</name> <modifier>*</modifier></type><name>opts</name></decl></parameter>, <parameter><decl><type><name>IWFS_FSM_OPTS</name> <modifier>*</modifier></type><name>fsmopts</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>recover_backup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>iwkv</name><operator>-&gt;</operator><name>dlsnr</name></name> <operator>&amp;&amp;</operator> <name>opts</name> <operator>&amp;&amp;</operator> <name>fsmopts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>opts</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>opts</name><operator>-&gt;</operator><name>oflags</name></name> <operator>&amp;</operator> <name>IWKV_RDONLY</name><operator>)</operator> <operator>||</operator> <operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>wal</name><operator>.</operator><name>enabled</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWAL</name> <modifier>*</modifier></type><name>wal</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>wal</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>wal</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>wal</name><operator>-&gt;</operator><name>wal_lock_interceptor</name></name> <operator>=</operator> <name><name>opts</name><operator>-&gt;</operator><name>wal</name><operator>.</operator><name>wal_lock_interceptor</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>wal</name><operator>-&gt;</operator><name>wal_lock_interceptor_opaque</name></name> <operator>=</operator> <name><name>opts</name><operator>-&gt;</operator><name>wal</name><operator>.</operator><name>wal_lock_interceptor_opaque</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>sz</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>wpath</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>sz</name> <operator>+</operator> <literal type="number">4</literal> <comment type="block">/*-wal*/</comment> <operator>+</operator> <literal type="number">1</literal></expr></argument> <comment type="block">/*\0*/</comment>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>wpath</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>wpath</name> <operator>+</operator> <name>sz</name></expr></argument>, <argument><expr><literal type="string">"-wal"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>wpath</name><index>[<expr><name>sz</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>wal</name><operator>-&gt;</operator><name>fh</name></name> <operator>=</operator> <name>INVALID_HANDLE_VALUE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>wal</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <name>wpath</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>wal</name><operator>-&gt;</operator><name>oflags</name></name> <operator>=</operator> <name><name>opts</name><operator>-&gt;</operator><name>oflags</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>wal</name><operator>-&gt;</operator><name>iwkv</name></name> <operator>=</operator> <name>iwkv</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>iwp_current_time_ms</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wal</name><operator>-&gt;</operator><name>checkpoint_ts</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_init_locks</name><argument_list>(<argument><expr><name>wal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>IWDLSNR</name> <modifier>*</modifier></type><name>dlsnr</name> <init>= <expr><operator>&amp;</operator><name><name>wal</name><operator>-&gt;</operator><name>lsnr</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>dlsnr</name><operator>-&gt;</operator><name>onopen</name></name> <operator>=</operator> <name>_onopen</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dlsnr</name><operator>-&gt;</operator><name>onclosing</name></name> <operator>=</operator> <name>_onclosing</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dlsnr</name><operator>-&gt;</operator><name>onset</name></name> <operator>=</operator> <name>_onset</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dlsnr</name><operator>-&gt;</operator><name>oncopy</name></name> <operator>=</operator> <name>_oncopy</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dlsnr</name><operator>-&gt;</operator><name>onwrite</name></name> <operator>=</operator> <name>_onwrite</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dlsnr</name><operator>-&gt;</operator><name>onresize</name></name> <operator>=</operator> <name>_onresize</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dlsnr</name><operator>-&gt;</operator><name>onsynced</name></name> <operator>=</operator> <name>_onsynced</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>iwkv</name><operator>-&gt;</operator><name>dlsnr</name></name> <operator>=</operator> <operator>(</operator><name>IWDLSNR</name><operator>*</operator><operator>)</operator> <name>wal</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>wal</name><operator>-&gt;</operator><name>wal_buffer_sz</name></name>
    <operator>=</operator> <ternary><condition><expr><name><name>opts</name><operator>-&gt;</operator><name>wal</name><operator>.</operator><name>wal_buffer_sz</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>
      ?</condition><then> <expr><name><name>opts</name><operator>-&gt;</operator><name>wal</name><operator>.</operator><name>wal_buffer_sz</name></name></expr> </then><else>:
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>__ANDROID__</name> <operator>||</operator> <name>defined</name> <name>TARGET_OS_IPHONE</name></expr></cpp:if>
      <expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></else></ternary></expr>;</expr_stmt> <comment type="line">// 2M</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt> <comment type="line">// 8M</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <if_stmt><if>if <condition>(<expr><name><name>wal</name><operator>-&gt;</operator><name>wal_buffer_sz</name></name> <operator>&lt;</operator> <literal type="number">4096</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>wal</name><operator>-&gt;</operator><name>wal_buffer_sz</name></name> <operator>=</operator> <literal type="number">4096</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>wal</name><operator>-&gt;</operator><name>checkpoint_buffer_sz</name></name>
    <operator>=</operator> <ternary><condition><expr><name><name>opts</name><operator>-&gt;</operator><name>wal</name><operator>.</operator><name>checkpoint_buffer_sz</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>
      ?</condition><then> <expr><name><name>opts</name><operator>-&gt;</operator><name>wal</name><operator>.</operator><name>checkpoint_buffer_sz</name></name></expr> </then><else>:
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>__ANDROID__</name> <operator>||</operator> <name>defined</name> <name>TARGET_OS_IPHONE</name></expr></cpp:if>
      <expr><literal type="number">64ULL</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></else></ternary></expr>;</expr_stmt> <comment type="line">// 64M</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><literal type="number">1024ULL</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt> <comment type="line">// 1G</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <if_stmt><if>if <condition>(<expr><name><name>wal</name><operator>-&gt;</operator><name>checkpoint_buffer_sz</name></name> <operator>&lt;</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr>)</condition> <block>{<block_content> <comment type="line">// 1M minimal</comment>
    <expr_stmt><expr><name><name>wal</name><operator>-&gt;</operator><name>checkpoint_buffer_sz</name></name> <operator>=</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>wal</name><operator>-&gt;</operator><name>savepoint_timeout_sec</name></name>
    <operator>=</operator> <ternary><condition><expr><name><name>opts</name><operator>-&gt;</operator><name>wal</name><operator>.</operator><name>savepoint_timeout_sec</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>
      ?</condition><then> <expr><name><name>opts</name><operator>-&gt;</operator><name>wal</name><operator>.</operator><name>savepoint_timeout_sec</name></name></expr> </then><else>: <expr><literal type="number">10</literal></expr></else></ternary></expr>;</expr_stmt> <comment type="line">// 10 sec</comment>

  <expr_stmt><expr><name><name>wal</name><operator>-&gt;</operator><name>checkpoint_timeout_sec</name></name>
    <operator>=</operator> <ternary><condition><expr><name><name>opts</name><operator>-&gt;</operator><name>wal</name><operator>.</operator><name>checkpoint_timeout_sec</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>__ANDROID__</name> <operator>||</operator> <name>defined</name> <name>TARGET_OS_IPHONE</name></expr></cpp:if>
      <expr><name><name>opts</name><operator>-&gt;</operator><name>wal</name><operator>.</operator><name>checkpoint_timeout_sec</name></name></expr> </then><else>: <expr><literal type="number">60</literal></expr></else></ternary></expr>;</expr_stmt> <comment type="line">// 1 min</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <label><name>opts</name></label>-&gt;<label><name>wal</name></label>.<label><name>checkpoint_timeout_sec</name> :</label> <expr_stmt><expr><literal type="number">300</literal></expr>;</expr_stmt> <comment type="line">// 5 min</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <if_stmt><if>if <condition>(<expr><name><name>wal</name><operator>-&gt;</operator><name>checkpoint_timeout_sec</name></name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content> <comment type="line">// 10 sec minimal</comment>
    <expr_stmt><expr><name><name>wal</name><operator>-&gt;</operator><name>checkpoint_timeout_sec</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>wal</name><operator>-&gt;</operator><name>savepoint_timeout_sec</name></name> <operator>&gt;=</operator> <name><name>wal</name><operator>-&gt;</operator><name>checkpoint_timeout_sec</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>wal</name><operator>-&gt;</operator><name>savepoint_timeout_sec</name></name> <operator>=</operator> <name><name>wal</name><operator>-&gt;</operator><name>checkpoint_timeout_sec</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>wal</name><operator>-&gt;</operator><name>check_cp_crc</name></name> <operator>=</operator> <name><name>opts</name><operator>-&gt;</operator><name>wal</name><operator>.</operator><name>check_crc_on_checkpoint</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>wal</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>wal</name><operator>-&gt;</operator><name>wal_buffer_sz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>wal</name><operator>-&gt;</operator><name>buf</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>wal</name><operator>-&gt;</operator><name>buf</name></name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WBSEP</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>wal</name><operator>-&gt;</operator><name>bufsz</name></name> <operator>=</operator> <name><name>wal</name><operator>-&gt;</operator><name>wal_buffer_sz</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WBSEP</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <comment type="line">// Now open WAL file</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_WIN32</name></cpp:ifndef>
  <decl_stmt><decl><type><name>HANDLE</name></type> <name>fh</name> <init>= <expr><call><name>open</name><argument_list>(<argument><expr><name><name>wal</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>O_CREAT</name> <operator>|</operator> <name>O_RDWR</name> <operator>|</operator> <name>O_CLOEXEC</name></expr></argument>, <argument><expr><name>IWFS_DEFAULT_FILEMODE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>INVALIDHANDLE</name><argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_IO_ERRNO</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>HANDLE</name></type> <name>fh</name> <init>= <expr><call><name>CreateFile</name><argument_list>(<argument><expr><name><name>wal</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>GENERIC_READ</name> <operator>|</operator> <name>GENERIC_WRITE</name></expr></argument>, <argument><expr><name>FILE_SHARE_READ</name></expr></argument>,
                         <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OPEN_ALWAYS</name></expr></argument>, <argument><expr><name>FILE_ATTRIBUTE_NORMAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>INVALIDHANDLE</name><argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_werror</name><argument_list>(<argument><expr><name>IW_ERROR_IO_ERRNO</name></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><name><name>wal</name><operator>-&gt;</operator><name>fh</name></name> <operator>=</operator> <name>fh</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwp_flock</name><argument_list>(<argument><expr><name><name>wal</name><operator>-&gt;</operator><name>fh</name></name></expr></argument>, <argument><expr><name>IWP_WLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Now force all fsm data to be privately mmaped.</comment>
  <comment type="line">// We will apply wal log to main database file</comment>
  <comment type="line">// then re-read our private mmaps</comment>
  <expr_stmt><expr><name><name>fsmopts</name><operator>-&gt;</operator><name>mmap_opts</name></name> <operator>=</operator> <name>IWFS_MMAP_PRIVATE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fsmopts</name><operator>-&gt;</operator><name>exfile</name><operator>.</operator><name>file</name><operator>.</operator><name>dlsnr</name></name> <operator>=</operator> <name><name>iwkv</name><operator>-&gt;</operator><name>dlsnr</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>wal</name><operator>-&gt;</operator><name>oflags</name></name> <operator>&amp;</operator> <name>IWKV_TRUNC</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_truncate_wl</name><argument_list>(<argument><expr><name>wal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_recover_wl</name><argument_list>(<argument><expr><name>iwkv</name></expr></argument>, <argument><expr><name>wal</name></expr></argument>, <argument><expr><name>fsmopts</name></expr></argument>, <argument><expr><name>recover_backup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>wal</name><operator>-&gt;</operator><name>open</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <comment type="line">// Start checkpoint thread</comment>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_init_cpt</name><argument_list>(<argument><expr><name>wal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>iwkv</name><operator>-&gt;</operator><name>dlsnr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>iwkv</name><operator>-&gt;</operator><name>fatalrc</name></name> <operator>=</operator> <ternary><condition><expr><name><name>iwkv</name><operator>-&gt;</operator><name>fatalrc</name></name></expr> ?</condition><then> <expr><name><name>iwkv</name><operator>-&gt;</operator><name>fatalrc</name></name></expr> </then><else>: <expr><name>rc</name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iwal_shutdown</name><argument_list>(<argument><expr><name>iwkv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_destroy</name><argument_list>(<argument><expr><name>wal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
</unit>
