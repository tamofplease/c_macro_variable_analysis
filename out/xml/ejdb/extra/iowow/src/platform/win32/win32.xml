<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/extra/iowow/src/platform/win32/win32.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwcfg.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_NANOSECONDS_PER_TICK</name></cpp:macro>   <cpp:value>100ULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_NANOSECONDS_PER_SECOND</name></cpp:macro> <cpp:value>1000000000ULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_TICKS_PER_SECOND</name></cpp:macro>       <cpp:value>10000000ULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_TICKS_PER_MILLISECOND</name></cpp:macro>  <cpp:value>10000ULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_SEC_TO_UNIX_EPOCH</name></cpp:macro>      <cpp:value>11644473600ULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_TICKS_TO_UNIX_EPOCH</name></cpp:macro>    <cpp:value>(_TICKS_PER_SECOND * _SEC_TO_UNIX_EPOCH)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_TIMESPEC2MS</name><parameter_list>(<parameter><type><name>IW_ts</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((IW_ts).tv_sec * 1000) + (uint64_t) round((IW_ts).tv_nsec / 1.0e6)</cpp:value></cpp:define>

<function><type><name>IW_INLINE</name> <name>uint64_t</name></type> <name>_iwp_filetime2ticks</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FILETIME</name> <modifier>*</modifier></type><name>ft</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>ticks</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator> <name><name>ft</name><operator>-&gt;</operator><name>dwHighDateTime</name></name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>+</operator> <name><name>ft</name><operator>-&gt;</operator><name>dwLowDateTime</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ticks</name> <operator>&lt;</operator> <name>_TICKS_TO_UNIX_EPOCH</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>ticks</name> <operator>-=</operator> <name>_TICKS_TO_UNIX_EPOCH</name></expr>;</expr_stmt>
  <return>return <expr><name>ticks</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>void</name></type> <name>_iwp_filetime2timespec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FILETIME</name> <modifier>*</modifier></type><name>ft</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timespec</name></name> <modifier>*</modifier></type><name>spec</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>ticks</name> <init>= <expr><call><name>_iwp_filetime2ticks</name><argument_list>(<argument><expr><name>ft</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>spec</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>=</operator> <name>ticks</name> <operator>/</operator> <name>_TICKS_PER_SECOND</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>spec</name><operator>-&gt;</operator><name>tv_nsec</name></name> <operator>=</operator> <operator>(</operator><name>ticks</name> <operator>%</operator> <name>_TICKS_PER_SECOND</name><operator>)</operator> <operator>*</operator> <name>_NANOSECONDS_PER_TICK</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>uint64_t</name></type> <name>_iwp_filetime2millisecons</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FILETIME</name> <modifier>*</modifier></type><name>ft</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>ticks</name> <init>= <expr><call><name>_iwp_filetime2ticks</name><argument_list>(<argument><expr><name>ft</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>ticks</name> <operator>/</operator> <name>_TICKS_PER_MILLISECOND</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwp_clock_get_time</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>clock_id</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timespec</name></name> <modifier>*</modifier></type><name>spec</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rci</name> <init>= <expr><call><name>clock_gettime</name><argument_list>(<argument><expr><name>clock_id</name></expr></argument>, <argument><expr><name>spec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rci</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ERRNO</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwp_current_time_ms</name><parameter_list>(<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>time</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>monotonic</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>FILETIME</name></type> <name>ft</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>GetSystemTimeAsFileTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>time</name> <operator>=</operator> <call><name>_iwp_filetime2millisecons</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwp_fsync</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>INVALIDHANDLE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_HANDLE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FlushFileBuffers</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_werror</name><argument_list>(<argument><expr><name>IW_ERROR_IO_ERRNO</name></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwp_fdatasync</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>fh</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>iwp_fsync</name><argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>SYSTEM_INFO</name></type> <name>sysinfo</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_iwp_getsysinfo</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>GetSystemInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sysinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>iwp_page_size</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name><name>sysinfo</name><operator>.</operator><name>dwPageSize</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>iwp_alloc_unit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name><name>sysinfo</name><operator>.</operator><name>dwAllocationGranularity</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint16_t</name></type> <name>iwp_num_cpu_cores</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name><name>sysinfo</name><operator>.</operator><name>dwNumberOfProcessors</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwp_ftruncate</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>fh</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>LARGE_INTEGER</name></type> <name>size</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>size</name><operator>.</operator><name>QuadPart</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SetFilePointerEx</name><argument_list>(<argument><expr><name>fh</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FILE_BEGIN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_werror</name><argument_list>(<argument><expr><name>IW_ERROR_IO_ERRNO</name></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SetEndOfFile</name><argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_werror</name><argument_list>(<argument><expr><name>IW_ERROR_IO_ERRNO</name></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwp_fallocate</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>fh</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>iwp_ftruncate</name><argument_list>(<argument><expr><name>fh</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwp_sleep</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>ms</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>req</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name>ms</name> <operator>/</operator> <literal type="number">1000UL</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>tv_nsec</name></name> <operator>=</operator> <operator>(</operator><name>ms</name> <operator>%</operator> <literal type="number">1000UL</literal><operator>)</operator> <operator>*</operator> <literal type="number">1000UL</literal> <operator>*</operator> <literal type="number">1000UL</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>nanosleep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_THREADING_ERRNO</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwp_fstat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>IWP_FILE_STAT</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>fs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><ternary><condition><expr><operator>(</operator><name>errno</name> <operator>==</operator> <name>ENOENT</name><operator>)</operator></expr> ?</condition><then> <expr><name>IW_ERROR_NOT_EXISTS</name></expr> </then><else>: <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_IO_ERRNO</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>atime</name></name> <operator>=</operator> <literal type="number">1000ULL</literal> <operator>*</operator> <name><name>st</name><operator>.</operator><name>st_atime</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>mtime</name></name> <operator>=</operator> <literal type="number">1000ULL</literal> <operator>*</operator> <name><name>st</name><operator>.</operator><name>st_mtime</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>ctime</name></name> <operator>=</operator> <literal type="number">1000ULL</literal> <operator>*</operator> <name><name>st</name><operator>.</operator><name>st_ctime</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>st</name><operator>.</operator><name>st_size</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>S_ISREG</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>ftype</name></name> <operator>=</operator> <name>IWP_TYPE_FILE</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>ftype</name></name> <operator>=</operator> <name>IWP_TYPE_DIR</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>ftype</name></name> <operator>=</operator> <name>IWP_OTHER</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwp_fstath</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>fh</name></decl></parameter>, <parameter><decl><type><name>IWP_FILE_STAT</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>fs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>BY_HANDLE_FILE_INFORMATION</name></type> <name>info</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>INVALIDHANDLE</name><argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_HANDLE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetFileInformationByHandle</name><argument_list>(<argument><expr><name>fh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>err</name> <init>= <expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>ERROR_FILE_NOT_FOUND</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>IW_ERROR_NOT_EXISTS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name>iwrc_set_werror</name><argument_list>(<argument><expr><name>IW_ERROR_IO_ERRNO</name></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>atime</name></name> <operator>=</operator> <call><name>_iwp_filetime2millisecons</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>.</operator><name>ftLastAccessTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>ctime</name></name> <operator>=</operator> <call><name>_iwp_filetime2millisecons</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>.</operator><name>ftCreationTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>mtime</name></name> <operator>=</operator> <call><name>_iwp_filetime2millisecons</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>.</operator><name>ftLastWriteTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>ULARGE_INTEGER</name></type> <name>ul</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>LowPart</name>  <operator>=</operator> <name><name>info</name><operator>.</operator><name>nFileSizeLow</name></name></expr>,
    <expr><operator>.</operator><name>HighPart</name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>nFileSizeHigh</name></name></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>ul</name><operator>.</operator><name>QuadPart</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>dwFileAttributes</name></name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_DIRECTORY</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>ftype</name></name> <operator>=</operator> <name>IWP_TYPE_DIR</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>ftype</name></name> <operator>=</operator> <name>IWP_TYPE_FILE</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwp_closefh</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>fh</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>INVALIDHANDLE</name><argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CloseHandle</name><argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_werror</name><argument_list>(<argument><expr><name>IW_ERROR_IO_ERRNO</name></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwp_flock</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>fh</name></decl></parameter>, <parameter><decl><type><name>iwp_lockmode</name></type> <name>lmode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>INVALIDHANDLE</name><argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_HANDLE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>lmode</name> <operator>==</operator> <name>IWP_NOLOCK</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>DWORD</name></type> <name>type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* shared lock with waiting */</comment>
  <decl_stmt><decl><type><name>OVERLAPPED</name></type> <name>offset</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>lmode</name> <operator>&amp;</operator> <name>IWP_WLOCK</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>type</name> <operator>=</operator> <name>LOCKFILE_EXCLUSIVE_LOCK</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>lmode</name> <operator>&amp;</operator> <name>IWP_NBLOCK</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>type</name> <operator>|=</operator> <name>LOCKFILE_FAIL_IMMEDIATELY</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>LockFileEx</name><argument_list>(<argument><expr><name>fh</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ULONG_MAX</name></expr></argument>, <argument><expr><name>ULONG_MAX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_werror</name><argument_list>(<argument><expr><name>IW_ERROR_ERRNO</name></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwp_unlock</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>fh</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>INVALIDHANDLE</name><argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_HANDLE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>OVERLAPPED</name></type> <name>offset</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>UnlockFileEx</name><argument_list>(<argument><expr><name>fh</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ULONG_MAX</name></expr></argument>, <argument><expr><name>ULONG_MAX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_werror</name><argument_list>(<argument><expr><name>IW_ERROR_ERRNO</name></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwp_pread</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>fh</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>siz</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>INVALIDHANDLE</name><argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_HANDLE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name> <operator>||</operator> <operator>!</operator><name>sp</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>DWORD</name></type> <name>rdb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ULARGE_INTEGER</name></type> <name>bigint</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>OVERLAPPED</name></type> <name>offset</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>bigint</name><operator>.</operator><name>QuadPart</name></name> <operator>=</operator> <name>off</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>offset</name><operator>.</operator><name>Offset</name></name> <operator>=</operator> <name><name>bigint</name><operator>.</operator><name>LowPart</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>offset</name><operator>.</operator><name>OffsetHigh</name></name> <operator>=</operator> <name><name>bigint</name><operator>.</operator><name>HighPart</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ReadFile</name><argument_list>(<argument><expr><name>fh</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>siz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rdb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>err</name> <init>= <expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>ERROR_HANDLE_EOF</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>sp</name> <operator>=</operator> <name>rdb</name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>sp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><call><name>iwrc_set_werror</name><argument_list>(<argument><expr><name>IW_ERROR_IO_ERRNO</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>sp</name> <operator>=</operator> <name>rdb</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwp_read</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>fh</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>siz</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>INVALIDHANDLE</name><argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_HANDLE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name> <operator>||</operator> <operator>!</operator><name>sp</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>DWORD</name></type> <name>rdb</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ReadFile</name><argument_list>(<argument><expr><name>fh</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>siz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rdb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>err</name> <init>= <expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>ERROR_HANDLE_EOF</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>sp</name> <operator>=</operator> <name>rdb</name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>sp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><call><name>iwrc_set_werror</name><argument_list>(<argument><expr><name>IW_ERROR_IO_ERRNO</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>sp</name> <operator>=</operator> <name>rdb</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwp_pwrite</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>fh</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>siz</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>INVALIDHANDLE</name><argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_HANDLE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name> <operator>||</operator> <operator>!</operator><name>sp</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>DWORD</name></type> <name>wrb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ULARGE_INTEGER</name></type> <name>bigint</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>OVERLAPPED</name></type> <name>offset</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>bigint</name><operator>.</operator><name>QuadPart</name></name> <operator>=</operator> <name>off</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>offset</name><operator>.</operator><name>Offset</name></name> <operator>=</operator> <name><name>bigint</name><operator>.</operator><name>LowPart</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>offset</name><operator>.</operator><name>OffsetHigh</name></name> <operator>=</operator> <name><name>bigint</name><operator>.</operator><name>HighPart</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>WriteFile</name><argument_list>(<argument><expr><name>fh</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>siz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wrb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>sp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><call><name>iwrc_set_werror</name><argument_list>(<argument><expr><name>IW_ERROR_IO_ERRNO</name></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>sp</name> <operator>=</operator> <name>wrb</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwp_write</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>fh</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>INVALIDHANDLE</name><argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_HANDLE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>DWORD</name></type> <name>written</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>WriteFile</name><argument_list>(<argument><expr><name>fh</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>written</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_werror</name><argument_list>(<argument><expr><name>IW_ERROR_IO_ERRNO</name></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>iwp_lseek</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>fh</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>iwp_seek_origin</name></type> <name>origin</name></decl></parameter>, <parameter><decl><type><name>off_t</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>INVALIDHANDLE</name><argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_HANDLE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>pos</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>LARGE_INTEGER</name></type> <name>loff</name></decl>, <decl><type ref="prev"/><name>noff</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>loff</name><operator>.</operator><name>QuadPart</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>origin</name> <operator>==</operator> <name>IWP_SEEK_CUR</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>w</name> <operator>=</operator> <name>FILE_CURRENT</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>origin</name> <operator>==</operator> <name>IWP_SEEK_END</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>w</name> <operator>=</operator> <name>FILE_END</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>w</name> <operator>=</operator> <name>FILE_BEGIN</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SetFilePointerEx</name><argument_list>(<argument><expr><name>fh</name></expr></argument>, <argument><expr><name>loff</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>noff</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_werror</name><argument_list>(<argument><expr><name>IW_ERROR_IO_ERRNO</name></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>pos</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <name><name>noff</name><operator>.</operator><name>QuadPart</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>iwp_set_current_thread_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>pthread_setname_np</name><argument_list>(<argument><expr><call><name>pthread_self</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>iwp_tmpdir</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>GetTempPathA</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_iwp_init_impl</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>_iwp_getsysinfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
