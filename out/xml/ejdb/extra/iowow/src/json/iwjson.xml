<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/extra/iowow/src/json/iwjson.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwjson.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwconv.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utf8proc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwjson_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_STRX</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>#x</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_STR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>_STRX(x)</cpp:value></cpp:define>

<function><type><name>IW_INLINE</name> <name>int</name></type> <name>_jbl_printf_estimate_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>ret</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name>ret</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function_decl><type><name>IW_INLINE</name> <name>void</name></type> <name>_jbn_remove_item</name><parameter_list>(<parameter><decl><type><name>JBL_NODE</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>JBL_NODE</name></type> <name>child</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>_jbn_add_item</name><parameter_list>(<parameter><decl><type><name>JBL_NODE</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>JBL_NODE</name></type> <name>node</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>iwjson_ftoa</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><specifier>static</specifier> <name>IWNUMBUF_SIZE</name></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>out_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// TODO: review</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>IWNUMBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"%.8Lf"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>out_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition> <block>{<block_content> <comment type="line">// trim zeroes from right</comment>
    <expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>buf</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>out_len</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbl_create_empty_object</name><parameter_list>(<parameter><decl><type><name>JBL</name> <modifier>*</modifier></type><name>jblp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>jblp</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>jblp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>jblp</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>binn_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>jblp</name><operator>)</operator><operator>-&gt;</operator><name>bn</name></name></expr></argument>, <argument><expr><name>BINN_OBJECT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbl_create_empty_array</name><parameter_list>(<parameter><decl><type><name>JBL</name> <modifier>*</modifier></type><name>jblp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>jblp</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>jblp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>jblp</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>binn_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>jblp</name><operator>)</operator><operator>-&gt;</operator><name>bn</name></name></expr></argument>, <argument><expr><name>BINN_LIST</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>jbl_set_user_data</name><parameter_list>(<parameter><decl><type><name>JBL</name></type> <name>jbl</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>user_data_free_fn</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>binn_set_user_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jbl</name><operator>-&gt;</operator><name>bn</name></name></expr></argument>, <argument><expr><name>user_data</name></expr></argument>, <argument><expr><name>user_data_free_fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>jbl_get_user_data</name><parameter_list>(<parameter><decl><type><name>JBL</name></type> <name>jbl</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>user_data</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbl_set_int64</name><parameter_list>(<parameter><decl><type><name>JBL</name></type> <name>jbl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>jbl_type_t</name></type> <name>t</name> <init>= <expr><call><name>jbl_type</name><argument_list>(<argument><expr><name>jbl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>t</name> <operator>!=</operator> <name>JBV_OBJECT</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>t</name> <operator>!=</operator> <name>JBV_ARRAY</name><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>!</operator><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>writable</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>JBL_ERROR_CREATION</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>binn</name> <modifier>*</modifier></type><name>bv</name> <init>= <expr><operator>&amp;</operator><name><name>jbl</name><operator>-&gt;</operator><name>bn</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>JBV_OBJECT</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>binn_object_set_int64</name><argument_list>(<argument><expr><name>bv</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>JBL_ERROR_CREATION</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><name>JBL_ERROR_CREATION</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>t</name> <operator>==</operator> <name>JBV_ARRAY</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>binn_list_add_int64</name><argument_list>(<argument><expr><name>bv</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>JBL_ERROR_CREATION</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>JBL_ERROR_INVALID</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbl_set_f64</name><parameter_list>(<parameter><decl><type><name>JBL</name></type> <name>jbl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>jbl_type_t</name></type> <name>t</name> <init>= <expr><call><name>jbl_type</name><argument_list>(<argument><expr><name>jbl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>t</name> <operator>!=</operator> <name>JBV_OBJECT</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>t</name> <operator>!=</operator> <name>JBV_ARRAY</name><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>!</operator><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>writable</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>JBL_ERROR_CREATION</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>binn</name> <modifier>*</modifier></type><name>bv</name> <init>= <expr><operator>&amp;</operator><name><name>jbl</name><operator>-&gt;</operator><name>bn</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>JBV_OBJECT</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>binn_object_set_double</name><argument_list>(<argument><expr><name>bv</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>JBL_ERROR_CREATION</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><name>JBL_ERROR_CREATION</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>t</name> <operator>==</operator> <name>JBV_ARRAY</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>binn_list_add_double</name><argument_list>(<argument><expr><name>bv</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>JBL_ERROR_CREATION</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>JBL_ERROR_INVALID</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbl_set_string</name><parameter_list>(<parameter><decl><type><name>JBL</name></type> <name>jbl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>jbl_type_t</name></type> <name>t</name> <init>= <expr><call><name>jbl_type</name><argument_list>(<argument><expr><name>jbl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>t</name> <operator>!=</operator> <name>JBV_OBJECT</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>t</name> <operator>!=</operator> <name>JBV_ARRAY</name><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>!</operator><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>writable</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>JBL_ERROR_CREATION</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>binn</name> <modifier>*</modifier></type><name>bv</name> <init>= <expr><operator>&amp;</operator><name><name>jbl</name><operator>-&gt;</operator><name>bn</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>JBV_OBJECT</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>binn_object_set_str</name><argument_list>(<argument><expr><name>bv</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>JBL_ERROR_CREATION</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><name>JBL_ERROR_CREATION</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>t</name> <operator>==</operator> <name>JBV_ARRAY</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>binn_list_add_const_str</name><argument_list>(<argument><expr><name>bv</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>JBL_ERROR_CREATION</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>JBL_ERROR_INVALID</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbl_set_string_printf</name><parameter_list>(<parameter><decl><type><name>JBL</name></type> <name>jbl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>_jbl_printf_estimate_size</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGA</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbl_set_string</name><argument_list>(<argument><expr><name>jbl</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbl_from_json_printf_va</name><parameter_list>(<parameter><decl><type><name>JBL</name> <modifier>*</modifier></type><name>jblp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>va</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>va_list</name></type> <name>cva</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>va_copy</name><argument_list>(<argument><expr><name>cva</name></expr></argument>, <argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>_jbl_printf_estimate_size</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><name>va</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>cva</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGA</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>cva</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>cva</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbl_from_json</name><argument_list>(<argument><expr><name>jblp</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbl_from_json_printf</name><parameter_list>(<parameter><decl><type><name>JBL</name> <modifier>*</modifier></type><name>jblp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>jbl_from_json_printf_va</name><argument_list>(<argument><expr><name>jblp</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbn_from_json_printf_va</name><parameter_list>(<parameter><decl><type><name>JBL_NODE</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>va</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>va_list</name></type> <name>cva</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>va_copy</name><argument_list>(<argument><expr><name>cva</name></expr></argument>, <argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>_jbl_printf_estimate_size</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><name>va</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>cva</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGA</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>cva</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>cva</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbn_from_json</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbn_from_json_printf</name><parameter_list>(<parameter><decl><type><name>JBL_NODE</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>jbn_from_json_printf_va</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbl_set_bool</name><parameter_list>(<parameter><decl><type><name>JBL</name></type> <name>jbl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>jbl_type_t</name></type> <name>t</name> <init>= <expr><call><name>jbl_type</name><argument_list>(<argument><expr><name>jbl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>t</name> <operator>!=</operator> <name>JBV_OBJECT</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>t</name> <operator>!=</operator> <name>JBV_ARRAY</name><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>!</operator><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>writable</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>JBL_ERROR_CREATION</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>binn</name> <modifier>*</modifier></type><name>bv</name> <init>= <expr><operator>&amp;</operator><name><name>jbl</name><operator>-&gt;</operator><name>bn</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>JBV_OBJECT</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>binn_object_set_bool</name><argument_list>(<argument><expr><name>bv</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>JBL_ERROR_CREATION</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><name>JBL_ERROR_CREATION</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>t</name> <operator>==</operator> <name>JBV_ARRAY</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>binn_list_add_bool</name><argument_list>(<argument><expr><name>bv</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>JBL_ERROR_CREATION</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>JBL_ERROR_INVALID</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbl_set_null</name><parameter_list>(<parameter><decl><type><name>JBL</name></type> <name>jbl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>jbl_type_t</name></type> <name>t</name> <init>= <expr><call><name>jbl_type</name><argument_list>(<argument><expr><name>jbl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>t</name> <operator>!=</operator> <name>JBV_OBJECT</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>t</name> <operator>!=</operator> <name>JBV_ARRAY</name><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>!</operator><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>writable</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>JBL_ERROR_CREATION</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>binn</name> <modifier>*</modifier></type><name>bv</name> <init>= <expr><operator>&amp;</operator><name><name>jbl</name><operator>-&gt;</operator><name>bn</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>JBV_OBJECT</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>binn_object_set_null</name><argument_list>(<argument><expr><name>bv</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>JBL_ERROR_CREATION</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><name>JBL_ERROR_CREATION</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>t</name> <operator>==</operator> <name>JBV_ARRAY</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>binn_list_add_null</name><argument_list>(<argument><expr><name>bv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>JBL_ERROR_CREATION</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>JBL_ERROR_INVALID</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbl_set_empty_array</name><parameter_list>(<parameter><decl><type><name>JBL</name></type> <name>jbl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JBL</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>jbl_create_empty_array</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbl_set_nested</name><argument_list>(<argument><expr><name>jbl</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>jbl_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbl_set_empty_object</name><parameter_list>(<parameter><decl><type><name>JBL</name></type> <name>jbl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JBL</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>jbl_create_empty_object</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbl_set_nested</name><argument_list>(<argument><expr><name>jbl</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>jbl_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbl_set_nested</name><parameter_list>(<parameter><decl><type><name>JBL</name></type> <name>jbl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>JBL</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>jbl_type_t</name></type> <name>t</name> <init>= <expr><call><name>jbl_type</name><argument_list>(<argument><expr><name>jbl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>t</name> <operator>!=</operator> <name>JBV_OBJECT</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>t</name> <operator>!=</operator> <name>JBV_ARRAY</name><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>!</operator><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>writable</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>JBL_ERROR_CREATION</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>binn</name> <modifier>*</modifier></type><name>bv</name> <init>= <expr><operator>&amp;</operator><name><name>jbl</name><operator>-&gt;</operator><name>bn</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>JBV_OBJECT</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>binn_object_set_value</name><argument_list>(<argument><expr><name>bv</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>bn</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>JBL_ERROR_CREATION</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><name>JBL_ERROR_CREATION</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>t</name> <operator>==</operator> <name>JBV_ARRAY</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>binn_list_add_value</name><argument_list>(<argument><expr><name>bv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>bn</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>JBL_ERROR_CREATION</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>JBL_ERROR_INVALID</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbl_from_buf_keep</name><parameter_list>(<parameter><decl><type><name>JBL</name> <modifier>*</modifier></type><name>jblp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bufsz</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>keep_on_destroy</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>, <decl><type ref="prev"/><name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>bufsz</name> <operator>&lt;</operator> <name>MIN_BINN_SIZE</name><operator>)</operator> <operator>||</operator> <operator>!</operator><call><name>binn_is_valid_header</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>JBL_ERROR_INVALID_BUFFER</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name>bufsz</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>JBL_ERROR_INVALID_BUFFER</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>jblp</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>jblp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>jblp</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>JBL</name></type> <name>jbl</name> <init>= <expr><operator>*</operator><name>jblp</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>header</name></name> <operator>=</operator> <name>BINN_MAGIC</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>count</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>freefn</name></name> <operator>=</operator> <ternary><condition><expr><name>keep_on_destroy</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>free</name></expr></else></ternary></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbl_clone</name><parameter_list>(<parameter><decl><type><name>JBL</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>JBL</name> <modifier>*</modifier></type><name>targetp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>targetp</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>targetp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>JBL</name></type> <name>t</name> <init>= <expr><operator>*</operator><name>targetp</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>t</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>binn</name> <modifier>*</modifier></type><name>bn</name> <init>= <expr><call><name>binn_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>src</name><operator>-&gt;</operator><name>bn</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>bn</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>JBL_ERROR_CREATION</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>bn</name><operator>-&gt;</operator><name>allocated</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>bn</name></name></expr></argument>, <argument><expr><name>bn</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>bn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>bn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_EXPORT</name> <name>iwrc</name></type> <name>jbl_object_copy_to</name><parameter_list>(<parameter><decl><type><name>JBL</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>JBL</name></type> <name>target</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <comment type="line">// According to binn spec keys are not null terminated</comment>
  <comment type="line">// and key length is not more than 255 bytes</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl>, <decl><type ref="prev"/><name><name>kbuf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>klen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBL</name></type> <name>holder</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBL_iterator</name></type> <name>it</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>jbl_type</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>JBV_OBJECT</name><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>jbl_type</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>JBV_OBJECT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>JBL_ERROR_NOT_AN_OBJECT</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>jbl_create_iterator_holder</name><argument_list>(<argument><expr><operator>&amp;</operator><name>holder</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>jbl_iterator_init</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>it</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><call><name>jbl_iterator_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><name>holder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>klen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>kbuf</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>kbuf</name><index>[<expr><name>klen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><call><name>jbl_set_nested</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>kbuf</name></expr></argument>, <argument><expr><name>holder</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>jbl_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>holder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbl_clone_into_pool</name><parameter_list>(<parameter><decl><type><name>JBL</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>JBL</name> <modifier>*</modifier></type><name>targetp</name></decl></parameter>, <parameter><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>targetp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>writable</name></name> <operator>&amp;&amp;</operator> <name><name>src</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>dirty</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>binn_save_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>src</name><operator>-&gt;</operator><name>bn</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>JBL_ERROR_INVALID</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>JBL</name></type> <name>jbl</name> <init>= <expr><call><name>iwpool_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>jbl</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>src</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>jbl</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>jbl</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jbl</name><operator>-&gt;</operator><name>bn</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>src</name><operator>-&gt;</operator><name>bn</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>jbl</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>jbl</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>freefn</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>targetp</name> <operator>=</operator> <name>jbl</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbl_from_buf_keep_onstack</name><parameter_list>(<parameter><decl><type><name>JBL</name></type> <name>jbl</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bufsz</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>, <decl><type ref="prev"/><name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>bufsz</name> <operator>&lt;</operator> <name>MIN_BINN_SIZE</name><operator>)</operator> <operator>||</operator> <operator>!</operator><call><name>binn_is_valid_header</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>JBL_ERROR_INVALID_BUFFER</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name>bufsz</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>JBL_ERROR_INVALID_BUFFER</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>jbl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>jbl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>header</name></name> <operator>=</operator> <name>BINN_MAGIC</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>count</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbl_from_buf_keep_onstack2</name><parameter_list>(<parameter><decl><type><name>JBL</name></type> <name>jbl</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>, <decl><type ref="prev"/><name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>binn_is_valid_header</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>JBL_ERROR_INVALID_BUFFER</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>jbl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>jbl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>header</name></name> <operator>=</operator> <name>BINN_MAGIC</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>count</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>jbl_destroy</name><parameter_list>(<parameter><decl><type><name>JBL</name> <modifier>*</modifier></type><name>jblp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>jblp</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>JBL</name></type> <name>jbl</name> <init>= <expr><operator>*</operator><name>jblp</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>binn_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jbl</name><operator>-&gt;</operator><name>bn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>jbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>jblp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbl_create_iterator_holder</name><parameter_list>(<parameter><decl><type><name>JBL</name> <modifier>*</modifier></type><name>jblp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>jblp</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>jblp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>jblp</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbl_iterator_init</name><parameter_list>(<parameter><decl><type><name>JBL</name></type> <name>jbl</name></decl></parameter>, <parameter><decl><type><name>JBL_iterator</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>btype</name> <init>= <expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>btype</name> <operator>!=</operator> <name>BINN_OBJECT</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>btype</name> <operator>!=</operator> <name>BINN_LIST</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>btype</name> <operator>!=</operator> <name>BINN_MAP</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>iter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>binn_iter</name> <modifier>*</modifier></type><name>biter</name> <init>= <expr><operator>(</operator><name>binn_iter</name><operator>*</operator><operator>)</operator> <name>iter</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>binn_iter_init</name><argument_list>(<argument><expr><name>biter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>jbl</name><operator>-&gt;</operator><name>bn</name></name></expr></argument>, <argument><expr><name>btype</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>JBL_ERROR_CREATION</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>jbl_iterator_next</name><parameter_list>(<parameter><decl><type><name>JBL_iterator</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name>JBL</name></type> <name>holder</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pkey</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>klen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>binn_iter</name> <modifier>*</modifier></type><name>biter</name> <init>= <expr><operator>(</operator><name>binn_iter</name><operator>*</operator><operator>)</operator> <name>iter</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pkey</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pkey</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>klen</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>klen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>iter</name> <operator>||</operator> <operator>(</operator><name><name>iter</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BINN_LIST</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>klen</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>klen</name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>current</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name>binn_list_next</name><argument_list>(<argument><expr><name>biter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>holder</name><operator>-&gt;</operator><name>bn</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><call><name>binn_read_next_pair2</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>biter</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>, <argument><expr><name>pkey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>holder</name><operator>-&gt;</operator><name>bn</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>jbl_type_t</name></type> <name>_jbl_binn_type</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>btype</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>btype</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>BINN_NULL</name></expr>:</case>
      <return>return <expr><name>JBV_NULL</name></expr>;</return>
    <case>case <expr><name>BINN_STRING</name></expr>:</case>
      <return>return <expr><name>JBV_STR</name></expr>;</return>
    <case>case <expr><name>BINN_OBJECT</name></expr>:</case>
    <case>case <expr><name>BINN_MAP</name></expr>:</case>
      <return>return <expr><name>JBV_OBJECT</name></expr>;</return>
    <case>case <expr><name>BINN_LIST</name></expr>:</case>
      <return>return <expr><name>JBV_ARRAY</name></expr>;</return>
    <case>case <expr><name>BINN_BOOL</name></expr>:</case>
    <case>case <expr><name>BINN_TRUE</name></expr>:</case>
    <case>case <expr><name>BINN_FALSE</name></expr>:</case>
      <return>return <expr><name>JBV_BOOL</name></expr>;</return>
    <case>case <expr><name>BINN_UINT8</name></expr>:</case>
    <case>case <expr><name>BINN_UINT16</name></expr>:</case>
    <case>case <expr><name>BINN_UINT32</name></expr>:</case>
    <case>case <expr><name>BINN_UINT64</name></expr>:</case>
    <case>case <expr><name>BINN_INT8</name></expr>:</case>
    <case>case <expr><name>BINN_INT16</name></expr>:</case>
    <case>case <expr><name>BINN_INT32</name></expr>:</case>
    <case>case <expr><name>BINN_INT64</name></expr>:</case>
      <return>return <expr><name>JBV_I64</name></expr>;</return>
    <case>case <expr><name>BINN_FLOAT32</name></expr>:</case>
    <case>case <expr><name>BINN_FLOAT64</name></expr>:</case>
      <return>return <expr><name>JBV_F64</name></expr>;</return>
    <default>default:</default>
      <return>return <expr><name>JBV_NONE</name></expr>;</return>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>jbl_type_t</name></type> <name>jbl_type</name><parameter_list>(<parameter><decl><type><name>JBL</name></type> <name>jbl</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>jbl</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>_jbl_binn_type</name><argument_list>(<argument><expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>JBV_NONE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>jbl_count</name><parameter_list>(<parameter><decl><type><name>JBL</name></type> <name>jbl</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><name>size_t</name><operator>)</operator> <name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>count</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>jbl_size</name><parameter_list>(<parameter><decl><type><name>JBL</name></type> <name>jbl</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><name>size_t</name><operator>)</operator> <name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>size</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>jbl_structure_size</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>_JBL</name></expr></argument>)</argument_list></sizeof></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbl_from_json</name><parameter_list>(<parameter><decl><type><name>JBL</name> <modifier>*</modifier></type><name>jblp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>jsonstr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>jblp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><call><name>iwpool_create</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>jsonstr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pool</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>JBL</name></type> <name>jbl</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBL_NODE</name></type> <name>node</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbn_from_json</name><argument_list>(<argument><expr><name>jsonstr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JBV_OBJECT</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbl_create_empty_object</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JBV_ARRAY</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbl_create_empty_array</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="line">// TODO: Review</comment>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JBL_ERROR_CREATION</name></expr>;</expr_stmt>
    <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbl_fill_from_node</name><argument_list>(<argument><expr><name>jbl</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>jblp</name> <operator>=</operator> <name>jbl</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>iwpool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>_jbl_write_double</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>jbl_json_printer</name></type> <name>pt</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>sz</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>IWNUMBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>iwjson_ftoa</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>pt</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>_jbl_write_int</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>jbl_json_printer</name></type> <name>pt</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>IWNUMBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>sz</name> <init>= <expr><call><name>iwitoa</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>pt</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>_jbl_write_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>jbl_json_printer</name></type> <name>pt</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>jbl_print_flags_t</name></type> <name>pf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>pt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'"'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>specials</name> <init>= <expr><literal type="string">"btnvfr"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name><operator>*</operator><operator>)</operator> <name>str</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT</name><parameter_list>(<parameter><type><name>data_</name></type></parameter>, <parameter><type><name>size_</name></type></parameter>, <parameter><type><name>ch_</name></type></parameter>, <parameter><type><name>count_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { \
    rc = pt((const char*) (data_), size_, ch_, count_, op); \
    RCRET(rc); \
} while (0)</cpp:value></cpp:define>

  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>ch</name> <init>= <expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ch</name> <operator>==</operator> <literal type="char">'"'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ch</name> <operator>==</operator> <literal type="char">'\\'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>ch</name> <operator>&gt;=</operator> <literal type="char">'\b'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>ch</name> <operator>&lt;=</operator> <literal type="char">'\r'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>specials</name><index>[<expr><name>ch</name> <operator>-</operator> <literal type="char">'\b'</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>isprint</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pf</name> <operator>&amp;</operator> <name>JBL_PRINT_CODEPOINTS</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type> <name><name>sbuf</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt> <comment type="line">// escaped unicode seq</comment>
      <decl_stmt><decl><type><name>utf8proc_int32_t</name></type> <name>cp</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>utf8proc_ssize_t</name></type> <name>sz</name> <init>= <expr><call><name>utf8proc_iterate</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>JBL_ERROR_PARSE_INVALID_UTF8</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>cp</name> <operator>&gt;</operator> <literal type="number">0x0010000UL</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>uint32_t</name></type> <name>hs</name> <init>= <expr><literal type="number">0xD800</literal></expr></init></decl>, <decl><type ref="prev"/><name>ls</name> <init>= <expr><literal type="number">0xDC00</literal></expr></init></decl>;</decl_stmt> <comment type="line">// surrogates</comment>
        <expr_stmt><expr><name>cp</name> <operator>-=</operator> <literal type="number">0x0010000UL</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>hs</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>cp</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3FF</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>ls</name> <operator>|=</operator> <operator>(</operator><name>cp</name> <operator>&amp;</operator> <literal type="number">0x3FF</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>sbuf</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="string">"\\u%04X"</literal></expr></argument>, <argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><name>sbuf</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>sbuf</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="string">"\\u%04X"</literal></expr></argument>, <argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><name>sbuf</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>sbuf</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="string">"\\u%04X"</literal></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><name>sbuf</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name>i</name> <operator>+=</operator> <name>sz</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>pt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'"'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PT</name></cpp:undef>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_jbl_as_json</name><parameter_list>(<parameter><decl><type><name>binn</name> <modifier>*</modifier></type><name>bn</name></decl></parameter>, <parameter><decl><type><name>jbl_json_printer</name></type> <name>pt</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lvl</name></decl></parameter>, <parameter><decl><type><name>jbl_print_flags_t</name></type> <name>pf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>binn</name></type> <name>bv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>binn_iter</name></type> <name>iter</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>lv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>llv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>dv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>key</name><index>[<expr><name>MAX_BIN_KEY_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>pretty</name> <init>= <expr><name>pf</name> <operator>&amp;</operator> <name>JBL_PRINT_PRETTY</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT</name><parameter_list>(<parameter><type><name>data_</name></type></parameter>, <parameter><type><name>size_</name></type></parameter>, <parameter><type><name>ch_</name></type></parameter>, <parameter><type><name>count_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { \
    rc = pt(data_, size_, ch_, count_, op); \
    RCGO(rc, finish); \
} while (0)</cpp:value></cpp:define>

  <switch>switch <condition>(<expr><name><name>bn</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>BINN_LIST</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>binn_iter_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>bn</name></expr></argument>, <argument><expr><name><name>bn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JBL_ERROR_INVALID</name></expr>;</expr_stmt>
        <goto>goto <name>finish</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'['</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>bn</name><operator>-&gt;</operator><name>count</name></name> <operator>&amp;&amp;</operator> <name>pretty</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><call><name>binn_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bv</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>pretty</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>lvl</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jbl_as_json</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bv</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>lvl</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>pf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>bn</name><operator>-&gt;</operator><name>count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>pretty</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
      <if_stmt><if>if <condition>(<expr><name><name>bn</name><operator>-&gt;</operator><name>count</name></name> <operator>&amp;&amp;</operator> <name>pretty</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>lvl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>BINN_OBJECT</name></expr>:</case>
    <case>case <expr><name>BINN_MAP</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>binn_iter_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>bn</name></expr></argument>, <argument><expr><name><name>bn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JBL_ERROR_INVALID</name></expr>;</expr_stmt>
        <goto>goto <name>finish</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'{'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>bn</name><operator>-&gt;</operator><name>count</name></name> <operator>&amp;&amp;</operator> <name>pretty</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>bn</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BINN_OBJECT</name></expr>)</condition> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><call><name>binn_object_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bv</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name>pretty</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>lvl</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jbl_write_string</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>pf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>pretty</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="string">": "</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jbl_as_json</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bv</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>lvl</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>pf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>bn</name><operator>-&gt;</operator><name>count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <if_stmt><if>if <condition>(<expr><name>pretty</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><call><name>binn_map_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bv</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name>pretty</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>lvl</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'"'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jbl_write_int</name><argument_list>(<argument><expr><name>lv</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'"'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>pretty</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="string">": "</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jbl_as_json</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bv</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>lvl</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>pf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>bn</name><operator>-&gt;</operator><name>count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <if_stmt><if>if <condition>(<expr><name>pretty</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
      </block_content>}</block></else></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>bn</name><operator>-&gt;</operator><name>count</name></name> <operator>&amp;&amp;</operator> <name>pretty</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>lvl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'}'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>BINN_STRING</name></expr>:</case>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jbl_write_string</name><argument_list>(<argument><expr><name><name>bn</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>pf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>BINN_UINT8</name></expr>:</case>
      <expr_stmt><expr><name>llv</name> <operator>=</operator> <name><name>bn</name><operator>-&gt;</operator><name>vuint8</name></name></expr>;</expr_stmt>
      <goto>goto <name>loc_int</name>;</goto>
    <case>case <expr><name>BINN_UINT16</name></expr>:</case>
      <expr_stmt><expr><name>llv</name> <operator>=</operator> <name><name>bn</name><operator>-&gt;</operator><name>vuint16</name></name></expr>;</expr_stmt>
      <goto>goto <name>loc_int</name>;</goto>
    <case>case <expr><name>BINN_UINT32</name></expr>:</case>
      <expr_stmt><expr><name>llv</name> <operator>=</operator> <name><name>bn</name><operator>-&gt;</operator><name>vuint32</name></name></expr>;</expr_stmt>
      <goto>goto <name>loc_int</name>;</goto>
    <case>case <expr><name>BINN_INT8</name></expr>:</case>
      <expr_stmt><expr><name>llv</name> <operator>=</operator> <name><name>bn</name><operator>-&gt;</operator><name>vint8</name></name></expr>;</expr_stmt> <comment type="line">// NOLINT(bugprone-signed-char-misuse)</comment>
      <goto>goto <name>loc_int</name>;</goto>
    <case>case <expr><name>BINN_INT16</name></expr>:</case>
      <expr_stmt><expr><name>llv</name> <operator>=</operator> <name><name>bn</name><operator>-&gt;</operator><name>vint16</name></name></expr>;</expr_stmt>
      <goto>goto <name>loc_int</name>;</goto>
    <case>case <expr><name>BINN_INT32</name></expr>:</case>
      <expr_stmt><expr><name>llv</name> <operator>=</operator> <name><name>bn</name><operator>-&gt;</operator><name>vint32</name></name></expr>;</expr_stmt>
      <goto>goto <name>loc_int</name>;</goto>
    <case>case <expr><name>BINN_INT64</name></expr>:</case>
      <expr_stmt><expr><name>llv</name> <operator>=</operator> <name><name>bn</name><operator>-&gt;</operator><name>vint64</name></name></expr>;</expr_stmt>
      <goto>goto <name>loc_int</name>;</goto>
    <case>case <expr><name>BINN_UINT64</name></expr>:</case> <comment type="line">// overflow?</comment>
      <expr_stmt><expr><name>llv</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator> <name><name>bn</name><operator>-&gt;</operator><name>vuint64</name></name></expr>;</expr_stmt>
<label><name>loc_int</name>:</label>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jbl_write_int</name><argument_list>(<argument><expr><name>llv</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>BINN_FLOAT32</name></expr>:</case>
      <expr_stmt><expr><name>dv</name> <operator>=</operator> <name><name>bn</name><operator>-&gt;</operator><name>vfloat</name></name></expr>;</expr_stmt>
      <goto>goto <name>loc_float</name>;</goto>
    <case>case <expr><name>BINN_FLOAT64</name></expr>:</case>
      <expr_stmt><expr><name>dv</name> <operator>=</operator> <name><name>bn</name><operator>-&gt;</operator><name>vdouble</name></name></expr>;</expr_stmt>
<label><name>loc_float</name>:</label>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jbl_write_double</name><argument_list>(<argument><expr><name>dv</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>BINN_TRUE</name></expr>:</case>
      <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>BINN_FALSE</name></expr>:</case>
      <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>BINN_BOOL</name></expr>:</case>
      <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>bn</name><operator>-&gt;</operator><name>vbool</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>BINN_NULL</name></expr>:</case>
      <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="string">"null"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>IW_ERROR_ASSERTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_ASSERTION</name></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>

<label><name>finish</name>:</label>
  <return>return <expr><name>rc</name></expr>;</return>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PT</name></cpp:undef>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbl_as_json</name><parameter_list>(<parameter><decl><type><name>JBL</name></type> <name>jbl</name></decl></parameter>, <parameter><decl><type><name>jbl_json_printer</name></type> <name>pt</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>jbl_print_flags_t</name></type> <name>pf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>jbl</name> <operator>||</operator> <operator>!</operator><name>pt</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>_jbl_as_json</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jbl</name><operator>-&gt;</operator><name>bn</name></name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbl_fstream_json_printer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name> <init>= <expr><name>op</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>file</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>count</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type> <name><name>cbuf</name><index>[<expr><name>count</name></expr>]</index></name></decl>;</decl_stmt> <comment type="line">// TODO: review overflow</comment>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>cbuf</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>size_t</name></type> <name>wc</name> <init>= <expr><call><name>fwrite</name><argument_list>(<argument><expr><name>cbuf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>wc</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>cbuf</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_IO_ERRNO</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>size</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>count</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>fprintf</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"%.*s"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_IO_ERRNO</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbl_xstr_json_printer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name> <init>= <expr><name>op</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>xstr</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>count</name></expr>)</condition> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>iwxstr_cat</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ch</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>size</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>count</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>iwxstr_cat</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbl_count_json_printer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>cnt</name> <init>= <expr><name>op</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>cnt</name> <operator>=</operator> <operator>*</operator><name>cnt</name> <operator>+</operator> <name>count</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>size</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>count</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>cnt</name> <operator>=</operator> <operator>*</operator><name>cnt</name> <operator>+</operator> <name>count</name> <operator>*</operator> <name>size</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>jbl_get_i64</name><parameter_list>(<parameter><decl><type><name>JBL</name></type> <name>jbl</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>jbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <switch>switch <condition>(<expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>BINN_UINT8</name></expr>:</case>
      <return>return <expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>vuint8</name></name></expr>;</return>
    <case>case <expr><name>BINN_UINT16</name></expr>:</case>
      <return>return <expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>vuint16</name></name></expr>;</return>
    <case>case <expr><name>BINN_UINT32</name></expr>:</case>
      <return>return <expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>vuint32</name></name></expr>;</return>
    <case>case <expr><name>BINN_UINT64</name></expr>:</case>
      <return>return <expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>vuint64</name></name></expr>;</return>
    <case>case <expr><name>BINN_INT8</name></expr>:</case>
      <return>return <expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>vint8</name></name></expr>;</return>
    <case>case <expr><name>BINN_INT16</name></expr>:</case>
      <return>return <expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>vint16</name></name></expr>;</return>
    <case>case <expr><name>BINN_INT32</name></expr>:</case>
      <return>return <expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>vint32</name></name></expr>;</return>
    <case>case <expr><name>BINN_INT64</name></expr>:</case>
      <return>return <expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>vint64</name></name></expr>;</return>
    <case>case <expr><name>BINN_BOOL</name></expr>:</case>
      <return>return <expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>vbool</name></name></expr>;</return>
    <case>case <expr><name>BINN_FLOAT32</name></expr>:</case>
      <return>return <expr><operator>(</operator><name>int64_t</name><operator>)</operator> <name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>vfloat</name></name></expr>;</return>
    <case>case <expr><name>BINN_FLOAT64</name></expr>:</case>
      <return>return <expr><operator>(</operator><name>int64_t</name><operator>)</operator> <name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>vdouble</name></name></expr>;</return>
    <default>default:</default>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>jbl_get_i32</name><parameter_list>(<parameter><decl><type><name>JBL</name></type> <name>jbl</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><name>int32_t</name><operator>)</operator> <call><name>jbl_get_i64</name><argument_list>(<argument><expr><name>jbl</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>double</name></type> <name>jbl_get_f64</name><parameter_list>(<parameter><decl><type><name>JBL</name></type> <name>jbl</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>jbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <switch>switch <condition>(<expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>BINN_FLOAT64</name></expr>:</case>
      <return>return <expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>vdouble</name></name></expr>;</return>
    <case>case <expr><name>BINN_FLOAT32</name></expr>:</case>
      <return>return <expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>vfloat</name></name></expr>;</return>
    <case>case <expr><name>BINN_UINT8</name></expr>:</case>
      <return>return <expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>vuint8</name></name></expr>;</return>
    <case>case <expr><name>BINN_UINT16</name></expr>:</case>
      <return>return <expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>vuint16</name></name></expr>;</return>
    <case>case <expr><name>BINN_UINT32</name></expr>:</case>
      <return>return <expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>vuint32</name></name></expr>;</return>
    <case>case <expr><name>BINN_UINT64</name></expr>:</case>
      <return>return <expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>vuint64</name></name></expr>;</return>
    <case>case <expr><name>BINN_INT8</name></expr>:</case>
      <return>return <expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>vint8</name></name></expr>;</return>
    <case>case <expr><name>BINN_INT16</name></expr>:</case>
      <return>return <expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>vint16</name></name></expr>;</return>
    <case>case <expr><name>BINN_INT32</name></expr>:</case>
      <return>return <expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>vint32</name></name></expr>;</return>
    <case>case <expr><name>BINN_INT64</name></expr>:</case>
      <return>return <expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>vint64</name></name></expr>;</return>
    <case>case <expr><name>BINN_BOOL</name></expr>:</case>
      <return>return <expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>vbool</name></name></expr>;</return>
    <default>default:</default>
      <return>return <expr><literal type="number">0.0</literal></expr>;</return>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>jbl_get_str</name><parameter_list>(<parameter><decl><type><name>JBL</name></type> <name>jbl</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>jbl</name> <operator>&amp;&amp;</operator> <name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BINN_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>BINN_STRING</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>ptr</name></name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>jbl_copy_strn</name><parameter_list>(<parameter><decl><type><name>JBL</name></type> <name>jbl</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bufsz</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>jbl</name> <operator>&amp;&amp;</operator> <name>buf</name> <operator>&amp;&amp;</operator> <name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>BINN_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>BINN_STRING</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>slen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>ret</name> <init>= <expr><call><name>MIN</name><argument_list>(<argument><expr><name>slen</name></expr></argument>, <argument><expr><name>bufsz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>jbl_type_t</name></type> <name>jbl_object_get_type</name><parameter_list>(<parameter><decl><type><name>JBL</name></type> <name>jbl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>BINN_OBJECT</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>JBV_NONE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>binn</name></type> <name>bv</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>binn_object_get_value</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jbl</name><operator>-&gt;</operator><name>bn</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>JBV_NONE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>_jbl_binn_type</name><argument_list>(<argument><expr><name><name>bv</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbl_object_get_i64</name><parameter_list>(<parameter><decl><type><name>JBL</name></type> <name>jbl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>BINN_OBJECT</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>JBL_ERROR_NOT_AN_OBJECT</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int64</name></type> <name>v</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>binn_object_get_int64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jbl</name><operator>-&gt;</operator><name>bn</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>JBL_ERROR_CREATION</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbl_object_get_f64</name><parameter_list>(<parameter><decl><type><name>JBL</name></type> <name>jbl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>BINN_OBJECT</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>JBL_ERROR_NOT_AN_OBJECT</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>binn_object_get_double</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jbl</name><operator>-&gt;</operator><name>bn</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>JBL_ERROR_CREATION</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbl_object_get_bool</name><parameter_list>(<parameter><decl><type><name>JBL</name></type> <name>jbl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>BINN_OBJECT</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>JBL_ERROR_NOT_AN_OBJECT</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>BOOL</name></type> <name>v</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>binn_object_get_bool</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jbl</name><operator>-&gt;</operator><name>bn</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>JBL_ERROR_CREATION</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbl_object_get_str</name><parameter_list>(<parameter><decl><type><name>JBL</name></type> <name>jbl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>BINN_OBJECT</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>JBL_ERROR_NOT_AN_OBJECT</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>binn_object_get_str</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jbl</name><operator>-&gt;</operator><name>bn</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator> <name>out</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>JBL_ERROR_CREATION</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbl_object_get_fill_jbl</name><parameter_list>(<parameter><decl><type><name>JBL</name></type> <name>jbl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>JBL</name></type> <name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>BINN_OBJECT</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>JBL_ERROR_NOT_AN_OBJECT</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>binn_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>out</name><operator>-&gt;</operator><name>bn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>binn_object_get_value</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jbl</name><operator>-&gt;</operator><name>bn</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out</name><operator>-&gt;</operator><name>bn</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>JBL_ERROR_CREATION</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbl_as_buf</name><parameter_list>(<parameter><decl><type><name>JBL</name></type> <name>jbl</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>jbl</name> <operator>&amp;&amp;</operator> <name>buf</name> <operator>&amp;&amp;</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>writable</name></name> <operator>&amp;&amp;</operator> <name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>dirty</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>binn_save_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jbl</name><operator>-&gt;</operator><name>bn</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>JBL_ERROR_INVALID</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">//----------------------------------------------------------------------------------------------------------</comment>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_jbl_ptr_pool</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>JBL_PTR</name> <modifier>*</modifier></type><name>jpp</name></decl></parameter>, <parameter><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>sz</name></decl>, <decl><type ref="prev"/><name>doff</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBL_PTR</name></type> <name>jp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>jpr</name></decl>;</decl_stmt> <comment type="line">// raw pointer to jp</comment>
  <expr_stmt><expr><operator>*</operator><name>jpp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>path</name> <operator>||</operator> <operator>(</operator><name><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'/'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>JBL_ERROR_JSON_POINTER</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>path</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>path</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>++</operator><name>cnt</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name>len</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>path</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>JBL_ERROR_JSON_POINTER</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>sz</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr>struct <name>_JBL_PTR</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>cnt</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>len</name><operator>)</operator></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pool</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>jp</name> <operator>=</operator> <call><name>iwpool_alloc</name><argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>jp</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>jp</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>jpr</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>jp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>jp</name><operator>-&gt;</operator><name>cnt</name></name> <operator>=</operator> <name>cnt</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>jp</name><operator>-&gt;</operator><name>sz</name></name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>doff</name> <operator>=</operator> <call><name>offsetof</name><argument_list>(<argument><expr>struct <name>_JBL_PTR</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>cnt</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>sz</name> <operator>-</operator> <name>doff</name> <operator>&gt;=</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>path</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>cnt</name> <operator>&lt;</operator> <name><name>jp</name><operator>-&gt;</operator><name>cnt</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr><operator>,</operator> <expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>path</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>jp</name><operator>-&gt;</operator><name>n</name><index>[<expr><name>cnt</name></expr>]</index></name> <operator>=</operator> <name>jpr</name> <operator>+</operator> <name>doff</name> <operator>+</operator> <name>j</name></expr>;</expr_stmt>
      <for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition>;</condition> <incr><expr><operator>++</operator><name>i</name></expr><operator>,</operator> <expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>path</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator> <operator>(</operator><name><name>path</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><operator>--</operator><name>i</name></expr>;</expr_stmt>
          <expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>jp</name><operator>-&gt;</operator><name>n</name><index>[<expr><name>cnt</name></expr>]</index></name> <operator>+</operator> <name>k</name><operator>)</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>path</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'~'</literal></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name><name>path</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>jp</name><operator>-&gt;</operator><name>n</name><index>[<expr><name>cnt</name></expr>]</index></name> <operator>+</operator> <name>k</name><operator>)</operator> <operator>=</operator> <literal type="char">'~'</literal></expr>;</expr_stmt>
          </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>path</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'1'</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>jp</name><operator>-&gt;</operator><name>n</name><index>[<expr><name>cnt</name></expr>]</index></name> <operator>+</operator> <name>k</name><operator>)</operator> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>jp</name><operator>-&gt;</operator><name>n</name><index>[<expr><name>cnt</name></expr>]</index></name> <operator>+</operator> <name>k</name><operator>)</operator> <operator>=</operator> <name><name>path</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><name>j</name> <operator>+=</operator> <name>k</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>++</operator><name>cnt</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><operator>*</operator><name>jpp</name> <operator>=</operator> <name>jp</name></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbl_ptr_alloc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>JBL_PTR</name> <modifier>*</modifier></type><name>jpp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>_jbl_ptr_pool</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>jpp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbl_ptr_alloc_pool</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>JBL_PTR</name> <modifier>*</modifier></type><name>jpp</name></decl></parameter>, <parameter><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>_jbl_ptr_pool</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>jpp</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>jbl_ptr_cmp</name><parameter_list>(<parameter><decl><type><name>JBL_PTR</name></type> <name>p1</name></decl></parameter>, <parameter><decl><type><name>JBL_PTR</name></type> <name>p2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>p1</name><operator>-&gt;</operator><name>sz</name></name> <operator>!=</operator> <name><name>p2</name><operator>-&gt;</operator><name>sz</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name><name>p1</name><operator>-&gt;</operator><name>sz</name></name> <operator>-</operator> <name><name>p2</name><operator>-&gt;</operator><name>sz</name></name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>p1</name><operator>-&gt;</operator><name>cnt</name></name> <operator>!=</operator> <name><name>p2</name><operator>-&gt;</operator><name>cnt</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name><name>p1</name><operator>-&gt;</operator><name>cnt</name></name> <operator>-</operator> <name><name>p2</name><operator>-&gt;</operator><name>cnt</name></name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p1</name><operator>-&gt;</operator><name>cnt</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>p1</name><operator>-&gt;</operator><name>n</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>p2</name><operator>-&gt;</operator><name>n</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>r</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbl_ptr_serialize</name><parameter_list>(<parameter><decl><type><name>JBL_PTR</name></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ptr</name><operator>-&gt;</operator><name>cnt</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>iwxstr_cat</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>iwxstr_cat</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>n</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>n</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>_jbl_visit</name><parameter_list>(<parameter><decl><type><name>binn_iter</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lvl</name></decl></parameter>, <parameter><decl><type><name>JBL_VCTX</name> <modifier>*</modifier></type><name>vctx</name></decl></parameter>, <parameter><decl><type><name>JBL_VISITOR</name></type> <name>visitor</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>binn</name> <modifier>*</modifier></type><name>bn</name> <init>= <expr><name><name>vctx</name><operator>-&gt;</operator><name>bn</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>jbl_visitor_cmd_t</name></type> <name>cmd</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>binn</name></type> <name>bv</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>lvl</name> <operator>&gt;</operator> <name>JBL_MAX_NESTING_LEVEL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>JBL_ERROR_MAX_NESTING_LEVEL_EXCEEDED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>iter</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>binn_iter</name></type> <name>it</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>BINN_IS_CONTAINER_TYPE</name><argument_list>(<argument><expr><name><name>bn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>JBL_ERROR_INVALID</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>binn_iter_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><name>bn</name></expr></argument>, <argument><expr><name><name>bn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>JBL_ERROR_INVALID</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jbl_visit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>vctx</name></expr></argument>, <argument><expr><name>visitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <switch>switch <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>BINN_OBJECT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type> <name><name>key</name><index>[<expr><name>MAX_BIN_KEY_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
      <while>while <condition>(<expr><operator>!</operator><name><name>vctx</name><operator>-&gt;</operator><name>terminate</name></name> <operator>&amp;&amp;</operator> <call><name>binn_object_next</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>visitor</name><argument_list>(<argument><expr><name>lvl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bv</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>vctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>&amp;</operator> <name>JBL_VCMD_TERMINATE</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>vctx</name><operator>-&gt;</operator><name>terminate</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>cmd</name> <operator>&amp;</operator> <name>JBL_VCMD_SKIP_NESTED</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>BINN_IS_CONTAINER_TYPE</name><argument_list>(<argument><expr><name><name>bv</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>binn_iter</name></type> <name>it</name></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>binn_iter_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bv</name></expr></argument>, <argument><expr><name><name>bv</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>JBL_ERROR_INVALID</name></expr>;</return>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jbl_visit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><name>lvl</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>vctx</name></expr></argument>, <argument><expr><name>visitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></while>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>BINN_MAP</name></expr>:</case> <block>{<block_content>
      <while>while <condition>(<expr><operator>!</operator><name><name>vctx</name><operator>-&gt;</operator><name>terminate</name></name> <operator>&amp;&amp;</operator> <call><name>binn_map_next</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>visitor</name><argument_list>(<argument><expr><name>lvl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>vctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>&amp;</operator> <name>JBL_VCMD_TERMINATE</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>vctx</name><operator>-&gt;</operator><name>terminate</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>cmd</name> <operator>&amp;</operator> <name>JBL_VCMD_SKIP_NESTED</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>BINN_IS_CONTAINER_TYPE</name><argument_list>(<argument><expr><name><name>bv</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>binn_iter</name></type> <name>it</name></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>binn_iter_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bv</name></expr></argument>, <argument><expr><name><name>bv</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>JBL_ERROR_INVALID</name></expr>;</return>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jbl_visit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><name>lvl</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>vctx</name></expr></argument>, <argument><expr><name>visitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></while>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>BINN_LIST</name></expr>:</case> <block>{<block_content>
      <for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>!</operator><name><name>vctx</name><operator>-&gt;</operator><name>terminate</name></name> <operator>&amp;&amp;</operator> <call><name>binn_list_next</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bv</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>idx</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>visitor</name><argument_list>(<argument><expr><name>lvl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>vctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>&amp;</operator> <name>JBL_VCMD_TERMINATE</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>vctx</name><operator>-&gt;</operator><name>terminate</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>cmd</name> <operator>&amp;</operator> <name>JBL_VCMD_SKIP_NESTED</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>BINN_IS_CONTAINER_TYPE</name><argument_list>(<argument><expr><name><name>bv</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>binn_iter</name></type> <name>it</name></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>binn_iter_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bv</name></expr></argument>, <argument><expr><name><name>bv</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>JBL_ERROR_INVALID</name></expr>;</return>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jbl_visit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><name>lvl</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>vctx</name></expr></argument>, <argument><expr><name>visitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
      <break>break;</break>
    </block_content>}</block>
  </block_content>}</block></switch>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbn_visit</name><parameter_list>(<parameter><decl><type><name>JBL_NODE</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lvl</name></decl></parameter>, <parameter><decl><type><name>JBN_VCTX</name> <modifier>*</modifier></type><name>vctx</name></decl></parameter>, <parameter><decl><type><name>JBN_VISITOR</name></type> <name>visitor</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>lvl</name> <operator>&gt;</operator> <name>JBL_MAX_NESTING_LEVEL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>JBL_ERROR_MAX_NESTING_LEVEL_EXCEEDED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>node</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>vctx</name><operator>-&gt;</operator><name>root</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>lvl</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>node</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>JBL_NODE</name></type> <name>n</name> <init>= <expr><name>node</name></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>JBV_OBJECT</name></expr>:</case>
    <case>case <expr><name>JBV_ARRAY</name></expr>:</case> <block>{<block_content>
      <for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>child</name></name></expr>;</init> <condition><expr><operator>!</operator><name><name>vctx</name><operator>-&gt;</operator><name>terminate</name></name> <operator>&amp;&amp;</operator> <name>n</name></expr>;</condition> <incr><expr><name>n</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>jbn_visitor_cmd_t</name></type> <name>cmd</name> <init>= <expr><call><name>visitor</name><argument_list>(<argument><expr><name>lvl</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>klidx</name></name></expr></argument>, <argument><expr><name>vctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>&amp;</operator> <name>JBL_VCMD_TERMINATE</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>vctx</name><operator>-&gt;</operator><name>terminate</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>&amp;</operator> <name>JBN_VCMD_DELETE</name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>JBL_NODE</name></type> <name>nn</name> <init>= <expr><name><name>n</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt> <comment type="line">// Keep pointer to next</comment>
          <expr_stmt><expr><call><name>_jbn_remove_item</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>nn</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>cmd</name> <operator>&amp;</operator> <name>JBL_VCMD_SKIP_NESTED</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>n</name><operator>-&gt;</operator><name>type</name></name> <operator>&gt;=</operator> <name>JBV_OBJECT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbn_visit</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>lvl</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>vctx</name></expr></argument>, <argument><expr><name>visitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
      <break>break;</break>
    </block_content>}</block>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>lvl</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>visitor</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>vctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>bool</name></type> <name>_jbl_visitor_update_jptr_cursor</name><parameter_list>(<parameter><decl><type><name>JBL_VCTX</name> <modifier>*</modifier></type><name>vctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lvl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JBL_PTR</name></type> <name>jp</name> <init>= <expr><name><name>vctx</name><operator>-&gt;</operator><name>op</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>lvl</name> <operator>&lt;</operator> <name><name>jp</name><operator>-&gt;</operator><name>cnt</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>vctx</name><operator>-&gt;</operator><name>pos</name></name> <operator>&gt;=</operator> <name>lvl</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>vctx</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>lvl</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>vctx</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>lvl</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>keyptr</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>IWNUMBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>keyptr</name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>iwitoa</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>IWNUMBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>keyptr</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>keyptr</name></expr></argument>, <argument><expr><name><name>jp</name><operator>-&gt;</operator><name>n</name><index>[<expr><name>lvl</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><operator>(</operator><name><name>jp</name><operator>-&gt;</operator><name>n</name><index>[<expr><name>lvl</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>jp</name><operator>-&gt;</operator><name>n</name><index>[<expr><name>lvl</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>vctx</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>lvl</name></expr>;</expr_stmt>
        <return>return <expr><operator>(</operator><name><name>jp</name><operator>-&gt;</operator><name>cnt</name></name> <operator>==</operator> <name>lvl</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>bool</name></type> <name>_jbn_visitor_update_jptr_cursor</name><parameter_list>(<parameter><decl><type><name>JBN_VCTX</name> <modifier>*</modifier></type><name>vctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lvl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JBL_PTR</name></type> <name>jp</name> <init>= <expr><name><name>vctx</name><operator>-&gt;</operator><name>op</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>lvl</name> <operator>&lt;</operator> <name><name>jp</name><operator>-&gt;</operator><name>cnt</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>vctx</name><operator>-&gt;</operator><name>pos</name></name> <operator>&gt;=</operator> <name>lvl</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>vctx</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>lvl</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>vctx</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>lvl</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>keyptr</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>IWNUMBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>keyptr</name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>iwitoa</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>IWNUMBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>keyptr</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>idx</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>keyptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>jplen</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>jp</name><operator>-&gt;</operator><name>n</name><index>[<expr><name>lvl</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator>  <operator>(</operator><name>idx</name> <operator>==</operator> <name>jplen</name><operator>)</operator>
          <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>keyptr</name></expr></argument>, <argument><expr><name><name>jp</name><operator>-&gt;</operator><name>n</name><index>[<expr><name>lvl</name></expr>]</index></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name><name>jp</name><operator>-&gt;</operator><name>n</name><index>[<expr><name>lvl</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>jp</name><operator>-&gt;</operator><name>n</name><index>[<expr><name>lvl</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>vctx</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>lvl</name></expr>;</expr_stmt>
        <return>return <expr><operator>(</operator><name><name>jp</name><operator>-&gt;</operator><name>cnt</name></name> <operator>==</operator> <name>lvl</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>jbl_visitor_cmd_t</name></type> <name>_jbl_get_visitor2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>lvl</name></decl></parameter>, <parameter><decl><type><name>binn</name> <modifier>*</modifier></type><name>bv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>JBL_VCTX</name> <modifier>*</modifier></type><name>vctx</name></decl></parameter>, <parameter><decl><type><name>iwrc</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JBL_PTR</name></type> <name>jp</name> <init>= <expr><name><name>vctx</name><operator>-&gt;</operator><name>op</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>jp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>_jbl_visitor_update_jptr_cursor</name><argument_list>(<argument><expr><name>vctx</name></expr></argument>, <argument><expr><name>lvl</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <comment type="line">// Pointer matched</comment>
    <decl_stmt><decl><type><name>JBL</name></type> <name>jbl</name> <init>= <expr><name><name>vctx</name><operator>-&gt;</operator><name>result</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jbl</name><operator>-&gt;</operator><name>bn</name></name></expr></argument>, <argument><expr><name>bv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>bv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>vctx</name><operator>-&gt;</operator><name>found</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <return>return <expr><name>JBL_VCMD_TERMINATE</name></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>jp</name><operator>-&gt;</operator><name>cnt</name></name> <operator>&lt;</operator> <name>lvl</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>JBL_VCMD_SKIP_NESTED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>JBL_VCMD_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>jbl_visitor_cmd_t</name></type> <name>_jbl_get_visitor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>lvl</name></decl></parameter>, <parameter><decl><type><name>binn</name> <modifier>*</modifier></type><name>bv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>JBL_VCTX</name> <modifier>*</modifier></type><name>vctx</name></decl></parameter>, <parameter><decl><type><name>iwrc</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JBL_PTR</name></type> <name>jp</name> <init>= <expr><name><name>vctx</name><operator>-&gt;</operator><name>op</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>jp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>_jbl_visitor_update_jptr_cursor</name><argument_list>(<argument><expr><name>vctx</name></expr></argument>, <argument><expr><name>lvl</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <comment type="line">// Pointer matched</comment>
    <decl_stmt><decl><type><name>JBL</name></type> <name>jbl</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>_JBL</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>jbl</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>JBL_VCMD_TERMINATE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jbl</name><operator>-&gt;</operator><name>bn</name></name></expr></argument>, <argument><expr><name>bv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>bv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>vctx</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <name>jbl</name></expr>;</expr_stmt>
    <return>return <expr><name>JBL_VCMD_TERMINATE</name></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>jp</name><operator>-&gt;</operator><name>cnt</name></name> <operator>&lt;</operator> <name>lvl</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>JBL_VCMD_SKIP_NESTED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>JBL_VCMD_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>_jbl_at</name><parameter_list>(<parameter><decl><type><name>JBL</name></type> <name>jbl</name></decl></parameter>, <parameter><decl><type><name>JBL_PTR</name></type> <name>jp</name></decl></parameter>, <parameter><decl><type><name>JBL</name></type> <name>res</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JBL_VCTX</name></type> <name>vctx</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>bn</name>     <operator>=</operator> <operator>&amp;</operator><name><name>jbl</name><operator>-&gt;</operator><name>bn</name></name></expr>,
    <expr><operator>.</operator><name>op</name>     <operator>=</operator> <name>jp</name></expr>,
    <expr><operator>.</operator><name>pos</name>    <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>,
    <expr><operator>.</operator><name>result</name> <operator>=</operator> <name>res</name></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>_jbl_visit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vctx</name></expr></argument>, <argument><expr><name>_jbl_get_visitor2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>vctx</name><operator>.</operator><name>found</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbl_at2</name><parameter_list>(<parameter><decl><type><name>JBL</name></type> <name>jbl</name></decl></parameter>, <parameter><decl><type><name>JBL_PTR</name></type> <name>jp</name></decl></parameter>, <parameter><decl><type><name>JBL</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JBL_VCTX</name></type> <name>vctx</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>bn</name>  <operator>=</operator> <operator>&amp;</operator><name><name>jbl</name><operator>-&gt;</operator><name>bn</name></name></expr>,
    <expr><operator>.</operator><name>op</name>  <operator>=</operator> <name>jp</name></expr>,
    <expr><operator>.</operator><name>pos</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_jbl_visit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vctx</name></expr></argument>, <argument><expr><name>_jbl_get_visitor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vctx</name><operator>.</operator><name>result</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JBL_ERROR_PATH_NOTFOUND</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <operator>(</operator><name>JBL</name><operator>)</operator> <name><name>vctx</name><operator>.</operator><name>result</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbl_at</name><parameter_list>(<parameter><decl><type><name>JBL</name></type> <name>jbl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>JBL</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JBL_PTR</name></type> <name>jp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_jbl_ptr_pool</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbl_at2</name><argument_list>(<argument><expr><name>jbl</name></expr></argument>, <argument><expr><name>jp</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>jp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>jbn_visitor_cmd_t</name></type> <name>_jbn_get_visitor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>lvl</name></decl></parameter>, <parameter><decl><type><name>JBL_NODE</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>klidx</name></decl></parameter>, <parameter><decl><type><name>JBN_VCTX</name> <modifier>*</modifier></type><name>vctx</name></decl></parameter>, <parameter><decl><type><name>iwrc</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>lvl</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <comment type="line">// EOF</comment>
    <return>return <expr><name>JBL_VCMD_OK</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>JBL_PTR</name></type> <name>jp</name> <init>= <expr><name><name>vctx</name><operator>-&gt;</operator><name>op</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>jp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>_jbn_visitor_update_jptr_cursor</name><argument_list>(<argument><expr><name>vctx</name></expr></argument>, <argument><expr><name>lvl</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>klidx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <comment type="line">// Pointer matched</comment>
    <expr_stmt><expr><name><name>vctx</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
    <return>return <expr><name>JBL_VCMD_TERMINATE</name></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>jp</name><operator>-&gt;</operator><name>cnt</name></name> <operator>&lt;</operator> <name>lvl</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>JBL_VCMD_SKIP_NESTED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>JBL_VCMD_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbn_at2</name><parameter_list>(<parameter><decl><type><name>JBL_NODE</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>JBL_PTR</name></type> <name>jp</name></decl></parameter>, <parameter><decl><type><name>JBL_NODE</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JBN_VCTX</name></type> <name>vctx</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>root</name> <operator>=</operator> <name>node</name></expr>,
    <expr><operator>.</operator><name>op</name>   <operator>=</operator> <name>jp</name></expr>,
    <expr><operator>.</operator><name>pos</name>  <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>jbn_visit</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vctx</name></expr></argument>, <argument><expr><name>_jbn_get_visitor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vctx</name><operator>.</operator><name>result</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JBL_ERROR_PATH_NOTFOUND</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <operator>(</operator><name>JBL_NODE</name><operator>)</operator> <name><name>vctx</name><operator>.</operator><name>result</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbn_at</name><parameter_list>(<parameter><decl><type><name>JBL_NODE</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>JBL_NODE</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JBL_PTR</name></type> <name>jp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_jbl_ptr_pool</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbn_at2</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>jp</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>jp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>jbn_paths_compare</name><parameter_list>(<parameter><decl><type><name>JBL_NODE</name></type> <name>n1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>n1path</name></decl></parameter>, <parameter><decl><type><name>JBL_NODE</name></type> <name>n2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>n2path</name></decl></parameter>, <parameter><decl><type><name>jbl_type_t</name></type> <name>vtype</name></decl></parameter>, <parameter><decl><type><name>iwrc</name> <modifier>*</modifier></type><name>rcp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>JBL_NODE</name></type> <name>v1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>v2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>jbn_at</name><argument_list>(<argument><expr><name>n1</name></expr></argument>, <argument><expr><name>n1path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>rc</name> <operator>!=</operator> <name>JBL_ERROR_PATH_NOTFOUND</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbn_at</name><argument_list>(<argument><expr><name>n2</name></expr></argument>, <argument><expr><name>n2path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>rc</name> <operator>!=</operator> <name>JBL_ERROR_PATH_NOTFOUND</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>vtype</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>v1</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>v1</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>vtype</name><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>v2</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>v2</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>vtype</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <name>JBL_ERROR_TYPE_MISMATCHED</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>_jbl_compare_nodes</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>, <argument><expr><name>rcp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>jbn_path_compare</name><parameter_list>(<parameter><decl><type><name>JBL_NODE</name></type> <name>n1</name></decl></parameter>, <parameter><decl><type><name>JBL_NODE</name></type> <name>n2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>jbl_type_t</name></type> <name>vtype</name></decl></parameter>, <parameter><decl><type><name>iwrc</name> <modifier>*</modifier></type><name>rcp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>jbn_paths_compare</name><argument_list>(<argument><expr><name>n1</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>n2</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>vtype</name></expr></argument>, <argument><expr><name>rcp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>jbn_path_compare_str</name><parameter_list>(<parameter><decl><type><name>JBL_NODE</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sv</name></decl></parameter>, <parameter><decl><type><name>iwrc</name> <modifier>*</modifier></type><name>rcp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>JBL_NODE</name></type> <name>v</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>jbn_at</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>_JBL_NODE</name></name></type> <name>cn</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>type</name>  <operator>=</operator> <name>JBV_STR</name></expr>,
    <expr><operator>.</operator><name>vptr</name>  <operator>=</operator> <name>sv</name></expr>,
    <expr><operator>.</operator><name>vsize</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <macro><name>strlen</name><argument_list>(<argument>sv</argument>)</argument_list></macro></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>_jbl_compare_nodes</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cn</name></expr></argument>, <argument><expr><name>rcp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>jbn_path_compare_i64</name><parameter_list>(<parameter><decl><type><name>JBL_NODE</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>iv</name></decl></parameter>, <parameter><decl><type><name>iwrc</name> <modifier>*</modifier></type><name>rcp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>JBL_NODE</name></type> <name>v</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>jbn_at</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>_JBL_NODE</name></name></type> <name>cn</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>JBV_I64</name></expr>,
    <expr><operator>.</operator><name>vi64</name> <operator>=</operator> <name>iv</name></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>_jbl_compare_nodes</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cn</name></expr></argument>, <argument><expr><name>rcp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>jbn_path_compare_f64</name><parameter_list>(<parameter><decl><type><name>JBL_NODE</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>fv</name></decl></parameter>, <parameter><decl><type><name>iwrc</name> <modifier>*</modifier></type><name>rcp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>JBL_NODE</name></type> <name>v</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>jbn_at</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>_JBL_NODE</name></name></type> <name>cn</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>JBV_F64</name></expr>,
    <expr><operator>.</operator><name>vf64</name> <operator>=</operator> <name>fv</name></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>_jbl_compare_nodes</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cn</name></expr></argument>, <argument><expr><name>rcp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>jbn_path_compare_bool</name><parameter_list>(<parameter><decl><type><name>JBL_NODE</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>bv</name></decl></parameter>, <parameter><decl><type><name>iwrc</name> <modifier>*</modifier></type><name>rcp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>JBL_NODE</name></type> <name>v</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>jbn_at</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>_JBL_NODE</name></name></type> <name>cn</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>type</name>  <operator>=</operator> <name>JBV_BOOL</name></expr>,
    <expr><operator>.</operator><name>vbool</name> <operator>=</operator> <name>bv</name></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>_jbl_compare_nodes</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cn</name></expr></argument>, <argument><expr><name>rcp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>void</name></type> <name>_jbl_node_reset_data</name><parameter_list>(<parameter><decl><type><name>JBL_NODE</name></type> <name>target</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>jbl_type_t</name></type> <name>t</name> <init>= <expr><name><name>target</name><operator>-&gt;</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator> <name>target</name><operator>)</operator> <operator>+</operator> <call><name>offsetof</name><argument_list>(<argument><expr>struct <name>_JBL_NODE</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr></argument>,
         <argument><expr><literal type="number">0</literal></expr></argument>,
         <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>_JBL_NODE</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <call><name>offsetof</name><argument_list>(<argument><expr>struct <name>_JBL_NODE</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>target</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>void</name></type> <name>_jbl_copy_node_data</name><parameter_list>(<parameter><decl><type><name>JBL_NODE</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>JBL_NODE</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator> <name>target</name><operator>)</operator> <operator>+</operator> <call><name>offsetof</name><argument_list>(<argument><expr>struct <name>_JBL_NODE</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr></argument>,
         <argument><expr><operator>(</operator><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator> <name>value</name><operator>)</operator> <operator>+</operator> <call><name>offsetof</name><argument_list>(<argument><expr>struct <name>_JBL_NODE</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr></argument>,
         <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>_JBL_NODE</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <call><name>offsetof</name><argument_list>(<argument><expr>struct <name>_JBL_NODE</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>_jbl_increment_node_data</name><parameter_list>(<parameter><decl><type><name>JBL_NODE</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>JBL_NODE</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>JBV_I64</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>JBV_F64</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>JBL_ERROR_PATCH_INVALID_VALUE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>target</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JBV_I64</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JBV_I64</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>target</name><operator>-&gt;</operator><name>vi64</name></name> <operator>+=</operator> <name><name>value</name><operator>-&gt;</operator><name>vi64</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>target</name><operator>-&gt;</operator><name>vi64</name></name> <operator>+=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator> <name><name>value</name><operator>-&gt;</operator><name>vf64</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>target</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JBV_F64</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JBV_F64</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>target</name><operator>-&gt;</operator><name>vf64</name></name> <operator>+=</operator> <name><name>value</name><operator>-&gt;</operator><name>vf64</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>target</name><operator>-&gt;</operator><name>vf64</name></name> <operator>+=</operator> <operator>(</operator><name>double</name><operator>)</operator> <name><name>value</name><operator>-&gt;</operator><name>vi64</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name>JBL_ERROR_PATCH_TARGET_INVALID</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>jbn_data</name><parameter_list>(<parameter><decl><type><name>JBL_NODE</name></type> <name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>_jbl_node_reset_data</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>jbn_length</name><parameter_list>(<parameter><decl><type><name>JBL_NODE</name></type> <name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>JBL_NODE</name></type> <name>n</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>child</name></name></expr></init></decl>;</init> <condition><expr><name>n</name></expr>;</condition> <incr><expr><name>n</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><operator>++</operator><name>ret</name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_jbn_add_item</name><parameter_list>(<parameter><decl><type><name>JBL_NODE</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>JBL_NODE</name></type> <name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>parent</name> <operator>&amp;&amp;</operator> <name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>child</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>JBL_NODE</name></type> <name>prev</name> <init>= <expr><name><name>parent</name><operator>-&gt;</operator><name>child</name><operator>-&gt;</operator><name>prev</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>child</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>prev</name></expr>)</condition> <block>{<block_content> <comment type="line">// -V1051</comment>
      <expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>child</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>child</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>child</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JBV_ARRAY</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>prev</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>klidx</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>klidx</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>klidx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>jbn_add_item</name><parameter_list>(<parameter><decl><type><name>JBL_NODE</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>JBL_NODE</name></type> <name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>_jbn_add_item</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbn_add_item_str</name><parameter_list>(<parameter><decl><type><name>JBL_NODE</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vlen</name></decl></parameter>, <parameter><decl><type><name>JBL_NODE</name> <modifier>*</modifier></type><name>node_out</name></decl></parameter>, <parameter><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>parent</name> <operator>||</operator> <operator>!</operator><name>pool</name> <operator>||</operator> <operator>(</operator><name><name>parent</name><operator>-&gt;</operator><name>type</name></name> <operator>&lt;</operator> <name>JBV_OBJECT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBL_NODE</name></type> <name>n</name> <init>= <expr><call><name>iwpool_calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>n</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>n</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JBV_OBJECT</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>key</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <call><name>iwpool_strdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>klidx</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JBV_STR</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>vlen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>vlen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>vptr</name></name> <operator>=</operator> <call><name>iwpool_strndup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>vsize</name></name> <operator>=</operator> <name>vlen</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>jbn_add_item</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>node_out</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>node_out</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<label><name>finish</name>:</label>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbn_add_item_null</name><parameter_list>(<parameter><decl><type><name>JBL_NODE</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>parent</name> <operator>||</operator> <operator>!</operator><name>pool</name> <operator>||</operator> <operator>(</operator><name><name>parent</name><operator>-&gt;</operator><name>type</name></name> <operator>&lt;</operator> <name>JBV_OBJECT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBL_NODE</name></type> <name>n</name> <init>= <expr><call><name>iwpool_calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>n</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>n</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JBV_OBJECT</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>key</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <call><name>iwpool_strdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>klidx</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JBV_NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>jbn_add_item</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>finish</name>:</label>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbn_add_item_i64</name><parameter_list>(<parameter><decl><type><name>JBL_NODE</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>JBL_NODE</name> <modifier>*</modifier></type><name>node_out</name></decl></parameter>, <parameter><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>parent</name> <operator>||</operator> <operator>!</operator><name>pool</name> <operator>||</operator> <operator>(</operator><name><name>parent</name><operator>-&gt;</operator><name>type</name></name> <operator>&lt;</operator> <name>JBV_OBJECT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBL_NODE</name></type> <name>n</name> <init>= <expr><call><name>iwpool_calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>n</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>n</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JBV_OBJECT</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>key</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <call><name>iwpool_strdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>klidx</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JBV_I64</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>vi64</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>jbn_add_item</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>node_out</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>node_out</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<label><name>finish</name>:</label>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbn_add_item_f64</name><parameter_list>(<parameter><decl><type><name>JBL_NODE</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>JBL_NODE</name> <modifier>*</modifier></type><name>node_out</name></decl></parameter>, <parameter><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>parent</name> <operator>||</operator> <operator>!</operator><name>pool</name> <operator>||</operator> <operator>(</operator><name><name>parent</name><operator>-&gt;</operator><name>type</name></name> <operator>&lt;</operator> <name>JBV_OBJECT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBL_NODE</name></type> <name>n</name> <init>= <expr><call><name>iwpool_calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>n</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>n</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JBV_OBJECT</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>key</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <call><name>iwpool_strdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>klidx</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JBV_F64</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>vf64</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>jbn_add_item</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>node_out</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>node_out</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<label><name>finish</name>:</label>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbn_add_item_bool</name><parameter_list>(<parameter><decl><type><name>JBL_NODE</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>JBL_NODE</name> <modifier>*</modifier></type><name>node_out</name></decl></parameter>, <parameter><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>parent</name> <operator>||</operator> <operator>!</operator><name>pool</name> <operator>||</operator> <operator>(</operator><name><name>parent</name><operator>-&gt;</operator><name>type</name></name> <operator>&lt;</operator> <name>JBV_OBJECT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBL_NODE</name></type> <name>n</name> <init>= <expr><call><name>iwpool_calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>n</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>n</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JBV_OBJECT</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>key</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <call><name>iwpool_strdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>klidx</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JBV_BOOL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>vbool</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>jbn_add_item</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>node_out</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>node_out</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<label><name>finish</name>:</label>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbn_add_item_obj</name><parameter_list>(<parameter><decl><type><name>JBL_NODE</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>JBL_NODE</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>parent</name> <operator>||</operator> <operator>!</operator><name>pool</name> <operator>||</operator> <operator>(</operator><name><name>parent</name><operator>-&gt;</operator><name>type</name></name> <operator>&lt;</operator> <name>JBV_OBJECT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBL_NODE</name></type> <name>n</name> <init>= <expr><call><name>iwpool_calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>n</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>n</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JBV_OBJECT</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>key</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <call><name>iwpool_strdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>klidx</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JBV_OBJECT</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>jbn_add_item</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>out</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<label><name>finish</name>:</label>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbn_add_item_arr</name><parameter_list>(<parameter><decl><type><name>JBL_NODE</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>JBL_NODE</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>parent</name> <operator>||</operator> <operator>!</operator><name>pool</name> <operator>||</operator> <operator>(</operator><name><name>parent</name><operator>-&gt;</operator><name>type</name></name> <operator>&lt;</operator> <name>JBV_OBJECT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBL_NODE</name></type> <name>n</name> <init>= <expr><call><name>iwpool_calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>n</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>n</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JBV_OBJECT</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>key</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <call><name>iwpool_strdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>klidx</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JBV_ARRAY</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>jbn_add_item</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>out</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<label><name>finish</name>:</label>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbn_copy_path</name><parameter_list>(
  <parameter><decl><type><name>JBL_NODE</name></type>    <name>src</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src_path</name></decl></parameter>,
  <parameter><decl><type><name>JBL_NODE</name></type>    <name>target</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>target_path</name></decl></parameter>,
  <parameter><decl><type><name>bool</name></type>        <name>overwrite_on_nulls</name></decl></parameter>,
  <parameter><decl><type><name>bool</name></type>        <name>no_src_clone</name></decl></parameter>,
  <parameter><decl><type><name>IWPOOL</name>     <modifier>*</modifier></type><name>pool</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>src</name> <operator>||</operator> <operator>!</operator><name>src_path</name> <operator>||</operator> <operator>!</operator><name>target</name> <operator>||</operator> <operator>!</operator><name>target_path</name> <operator>||</operator> <operator>!</operator><name>pool</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBL_NODE</name></type> <name>n1</name></decl>, <decl><type ref="prev"/><name>n2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>jbp_patch_t</name></type> <name>op</name> <init>= <expr><name>JBP_REPLACE</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><name>src_path</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <comment type="line">// -V526</comment>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbn_at</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>JBL_ERROR_PATH_NOTFOUND</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>n1</name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>overwrite_on_nulls</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>n1</name><operator>-&gt;</operator><name>type</name></name> <operator>&lt;=</operator> <name>JBV_NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>no_src_clone</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>n2</name> <operator>=</operator> <name>n1</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbn_clone</name><argument_list>(<argument><expr><name>n1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n2</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbn_at</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>target_path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>JBL_ERROR_PATH_NOTFOUND</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>op</name> <operator>=</operator> <name>JBP_ADD_CREATE</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>JBL_PATCH</name></type> <name><name>p</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{
      <expr><operator>.</operator><name>op</name> <operator>=</operator> <name>op</name></expr>,
      <expr><operator>.</operator><name>path</name> <operator>=</operator> <name>target_path</name></expr>,
      <expr><operator>.</operator><name>vnode</name> <operator>=</operator> <name>n2</name></expr>
    }</block></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>jbn_patch</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_EXPORT</name> <name>iwrc</name></type> <name>jbn_copy_paths</name><parameter_list>(
  <parameter><decl><type><name>JBL_NODE</name></type>     <name>src</name></decl></parameter>,
  <parameter><decl><type><name>JBL_NODE</name></type>     <name>target</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>paths</name></decl></parameter>,
  <parameter><decl><type><name>bool</name></type>         <name>overwrite_on_nulls</name></decl></parameter>,
  <parameter><decl><type><name>bool</name></type>         <name>no_src_clone</name></decl></parameter>,
  <parameter><decl><type><name>IWPOOL</name>      <modifier>*</modifier></type><name>pool</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>target</name> <operator>||</operator> <operator>!</operator><name>src</name> <operator>||</operator> <operator>!</operator><name>paths</name> <operator>||</operator> <operator>!</operator><name>pool</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name> <init>= <expr><name>paths</name></expr></init></decl>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><operator>*</operator><name>p</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbn_copy_path</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>overwrite_on_nulls</name></expr></argument>, <argument><expr><name>no_src_clone</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCBREAK</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>void</name></type> <name>_jbn_remove_item</name><parameter_list>(<parameter><decl><type><name>JBL_NODE</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>JBL_NODE</name></type> <name>child</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>child</name></name> <operator>==</operator> <name>child</name></expr>)</condition> <block>{<block_content>                 <comment type="line">// First element</comment>
    <if_stmt><if>if <condition>(<expr><name><name>child</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>child</name></name> <operator>=</operator> <name><name>child</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>child</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>child</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>child</name><operator>-&gt;</operator><name>prev</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>child</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>child</name><operator>-&gt;</operator><name>prev</name></name> <operator>==</operator> <name>child</name></expr>)</condition> <block>{<block_content>    <comment type="line">// Last element</comment>
    <expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>child</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>child</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>child</name><operator>-&gt;</operator><name>prev</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content> <comment type="line">// Somewhere in middle</comment>
    <if_stmt><if>if <condition>(<expr><name><name>child</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>child</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>child</name><operator>-&gt;</operator><name>prev</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>child</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>child</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>jbn_remove_item</name><parameter_list>(<parameter><decl><type><name>JBL_NODE</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>JBL_NODE</name></type> <name>child</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>_jbn_remove_item</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_jbl_create_node</name><parameter_list>(
  <parameter><decl><type><name>JBLDRCTX</name>   <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>binn</name> <modifier>*</modifier></type><name>bv</name></decl></parameter>,
  <parameter><decl><type><name>JBL_NODE</name></type>    <name>parent</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type>         <name>klidx</name></decl></parameter>,
  <parameter><decl><type><name>JBL_NODE</name>   <modifier>*</modifier></type><name>node</name></decl></parameter>,
  <parameter><decl><type><name>bool</name></type>        <name>clone_strings</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBL_NODE</name></type> <name>n</name> <init>= <expr><call><name>iwpool_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>n</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>node</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>node</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>n</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>n</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>key</name> <operator>&amp;&amp;</operator> <name>clone_strings</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <call><name>iwpool_strndup</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>klidx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>klidx</name></name> <operator>=</operator> <name>klidx</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
  <switch>switch <condition>(<expr><name><name>bv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>BINN_NULL</name></expr>:</case>
      <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JBV_NULL</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>BINN_STRING</name></expr>:</case>
      <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JBV_STR</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>clone_strings</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>vptr</name></name> <operator>=</operator> <name><name>bv</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>vsize</name></name> <operator>=</operator> <name><name>bv</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>vptr</name></name> <operator>=</operator> <call><name>iwpool_strndup</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name><name>bv</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>bv</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>vsize</name></name> <operator>=</operator> <name><name>bv</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>
    <case>case <expr><name>BINN_OBJECT</name></expr>:</case>
    <case>case <expr><name>BINN_MAP</name></expr>:</case>
      <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JBV_OBJECT</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>BINN_LIST</name></expr>:</case>
      <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JBV_ARRAY</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>BINN_TRUE</name></expr>:</case>
      <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JBV_BOOL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>vbool</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>BINN_FALSE</name></expr>:</case>
      <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JBV_BOOL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>vbool</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>BINN_BOOL</name></expr>:</case>
      <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JBV_BOOL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>vbool</name></name> <operator>=</operator> <name><name>bv</name><operator>-&gt;</operator><name>vbool</name></name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>BINN_UINT8</name></expr>:</case>
      <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>vi64</name></name> <operator>=</operator> <name><name>bv</name><operator>-&gt;</operator><name>vuint8</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JBV_I64</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>BINN_UINT16</name></expr>:</case>
      <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>vi64</name></name> <operator>=</operator> <name><name>bv</name><operator>-&gt;</operator><name>vuint16</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JBV_I64</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>BINN_UINT32</name></expr>:</case>
      <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>vi64</name></name> <operator>=</operator> <name><name>bv</name><operator>-&gt;</operator><name>vuint32</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JBV_I64</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>BINN_UINT64</name></expr>:</case>
      <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>vi64</name></name> <operator>=</operator> <name><name>bv</name><operator>-&gt;</operator><name>vuint64</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JBV_I64</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>BINN_INT8</name></expr>:</case>
      <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>vi64</name></name> <operator>=</operator> <name><name>bv</name><operator>-&gt;</operator><name>vint8</name></name></expr>;</expr_stmt> <comment type="line">// NOLINT(bugprone-signed-char-misuse)</comment>
      <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JBV_I64</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>BINN_INT16</name></expr>:</case>
      <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>vi64</name></name> <operator>=</operator> <name><name>bv</name><operator>-&gt;</operator><name>vint16</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JBV_I64</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>BINN_INT32</name></expr>:</case>
      <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>vi64</name></name> <operator>=</operator> <name><name>bv</name><operator>-&gt;</operator><name>vint32</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JBV_I64</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>BINN_INT64</name></expr>:</case>
      <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>vi64</name></name> <operator>=</operator> <name><name>bv</name><operator>-&gt;</operator><name>vint64</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JBV_I64</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>BINN_FLOAT32</name></expr>:</case>
    <case>case <expr><name>BINN_FLOAT64</name></expr>:</case>
      <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>vf64</name></name> <operator>=</operator> <name><name>bv</name><operator>-&gt;</operator><name>vdouble</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JBV_F64</name></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JBL_ERROR_CREATION</name></expr>;</expr_stmt>
      <goto>goto <name>finish</name>;</goto>
  </block_content>}</block></switch>
  <if_stmt><if>if <condition>(<expr><name>parent</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_jbn_add_item</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>finish</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>node</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>node</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_jbl_node_from_binn_impl</name><parameter_list>(
  <parameter><decl><type><name>JBLDRCTX</name>   <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>binn</name> <modifier>*</modifier></type><name>bn</name></decl></parameter>,
  <parameter><decl><type><name>JBL_NODE</name></type>    <name>parent</name></decl></parameter>,
  <parameter><decl><type><name>char</name>       <modifier>*</modifier></type><name>key</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type>         <name>klidx</name></decl></parameter>,
  <parameter><decl><type><name>bool</name></type>        <name>clone_strings</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>binn</name></type> <name>bv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>binn_iter</name></type> <name>iter</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <switch>switch <condition>(<expr><name><name>bn</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>BINN_OBJECT</name></expr>:</case>
    <case>case <expr><name>BINN_MAP</name></expr>:</case>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jbl_create_node</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>bn</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>klidx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parent</name></expr></argument>, <argument><expr><name>clone_strings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>root</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>binn_iter_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>(</operator><name>binn</name><operator>*</operator><operator>)</operator> <name>bn</name></expr></argument>, <argument><expr><name><name>bn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>JBL_ERROR_INVALID</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>bn</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BINN_OBJECT</name></expr>)</condition> <block>{<block_content>
        <while>while <condition>(<expr><call><name>binn_object_next2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>klidx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jbl_node_from_binn_impl</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bv</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>klidx</name></expr></argument>, <argument><expr><name>clone_strings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>bn</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>BINN_MAP</name></expr>)</condition> <block>{<block_content>
        <while>while <condition>(<expr><call><name>binn_map_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>klidx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jbl_node_from_binn_impl</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bv</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>klidx</name></expr></argument>, <argument><expr><name>clone_strings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    <case>case <expr><name>BINN_LIST</name></expr>:</case>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jbl_create_node</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>bn</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>klidx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parent</name></expr></argument>, <argument><expr><name>clone_strings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>root</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>binn_iter_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>(</operator><name>binn</name><operator>*</operator><operator>)</operator> <name>bn</name></expr></argument>, <argument><expr><name><name>bn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>JBL_ERROR_INVALID</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><call><name>binn_list_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bv</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jbl_node_from_binn_impl</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bv</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>clone_strings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <break>break;</break>
    <default>default:</default> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jbl_create_node</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>bn</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>klidx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>clone_strings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
  </block_content>}</block></switch>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>_jbl_node_from_binn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>binn</name> <modifier>*</modifier></type><name>bn</name></decl></parameter>, <parameter><decl><type><name>JBL_NODE</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>clone_strings</name></decl></parameter>, <parameter><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JBLDRCTX</name></type> <name>ctx</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>pool</name> <operator>=</operator> <name>pool</name></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_jbl_node_from_binn_impl</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>bn</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>clone_strings</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>node</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>node</name> <operator>=</operator> <name><name>ctx</name><operator>.</operator><name>root</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>JBL_NODE</name></type> <name>_jbl_node_find</name><parameter_list>(<parameter><decl><type><name>JBL_NODE</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>JBL_PTR</name></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>to</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name> <operator>||</operator> <operator>!</operator><name>node</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>JBL_NODE</name></type> <name>n</name> <init>= <expr><name>node</name></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>from</name></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>ptr</name><operator>-&gt;</operator><name>cnt</name></name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>to</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JBV_OBJECT</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>ptrnlen</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>n</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>child</name></name></expr>;</init> <condition><expr><name>n</name></expr>;</condition> <incr><expr><name>n</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>n</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>klidx</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>ptrnlen</name> <operator>==</operator> <name><name>n</name><operator>-&gt;</operator><name>klidx</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JBV_ARRAY</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>idx</name> <init>= <expr><call><name>iwatoi</name><argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>n</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>child</name></name></expr>;</init> <condition><expr><name>n</name></expr>;</condition> <incr><expr><name>n</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <name><name>n</name><operator>-&gt;</operator><name>klidx</name></name></expr>)</condition> <block>{<block_content>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>JBL_NODE</name></type> <name>_jbl_node_find2</name><parameter_list>(<parameter><decl><type><name>JBL_NODE</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>JBL_PTR</name></type> <name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>node</name> <operator>||</operator> <operator>!</operator><name>ptr</name> <operator>||</operator> <operator>!</operator><name><name>ptr</name><operator>-&gt;</operator><name>cnt</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>_jbl_node_find</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>cnt</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>JBL_NODE</name></type> <name>_jbl_node_detach</name><parameter_list>(<parameter><decl><type><name>JBL_NODE</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>JBL_PTR</name></type> <name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>path</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>JBL_NODE</name></type> <name>parent</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>path</name><operator>-&gt;</operator><name>cnt</name></name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>_jbl_node_find</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>path</name><operator>-&gt;</operator><name>cnt</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>target</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>parent</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>JBL_NODE</name></type> <name>child</name> <init>= <expr><call><name>_jbl_node_find</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>path</name><operator>-&gt;</operator><name>cnt</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>path</name><operator>-&gt;</operator><name>cnt</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>child</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>_jbn_remove_item</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>child</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>JBL_NODE</name></type> <name>jbn_detach2</name><parameter_list>(<parameter><decl><type><name>JBL_NODE</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>JBL_PTR</name></type> <name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>_jbl_node_detach</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>JBL_NODE</name></type> <name>jbn_detach</name><parameter_list>(<parameter><decl><type><name>JBL_NODE</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JBL_PTR</name></type> <name>jp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_jbl_ptr_pool</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>JBL_NODE</name></type> <name>res</name> <init>= <expr><call><name>jbn_detach2</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>jp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>jp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_jbl_cmp_node_keys</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>o1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>o2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JBL_NODE</name></type> <name>n1</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>JBL_NODE</name><operator>*</operator><operator>)</operator> <name>o1</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBL_NODE</name></type> <name>n2</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>JBL_NODE</name><operator>*</operator><operator>)</operator> <name>o2</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>n1</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>n2</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>n2</name> <operator>||</operator> <operator>(</operator><name><name>n1</name><operator>-&gt;</operator><name>klidx</name></name> <operator>&gt;</operator> <name><name>n2</name><operator>-&gt;</operator><name>klidx</name></name><operator>)</operator></expr>)</condition> <block>{<block_content> <comment type="line">// -V522</comment>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>n1</name> <operator>||</operator> <operator>(</operator><name><name>n1</name><operator>-&gt;</operator><name>klidx</name></name> <operator>&lt;</operator> <name><name>n2</name><operator>-&gt;</operator><name>klidx</name></name><operator>)</operator></expr>)</condition> <block>{<block_content> <comment type="line">// -V522</comment>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>n1</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>n2</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>n1</name><operator>-&gt;</operator><name>klidx</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>_jbl_node_count</name><parameter_list>(<parameter><decl><type><name>JBL_NODE</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>child</name></name></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>n</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_jbl_compare_objects</name><parameter_list>(<parameter><decl><type><name>JBL_NODE</name></type> <name>n1</name></decl></parameter>, <parameter><decl><type><name>JBL_NODE</name></type> <name>n2</name></decl></parameter>, <parameter><decl><type><name>iwrc</name> <modifier>*</modifier></type><name>rcp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>cnt</name> <init>= <expr><call><name>_jbl_node_count</name><argument_list>(<argument><expr><name>n1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><call><name>_jbl_node_count</name><argument_list>(<argument><expr><name>n2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>&gt;</operator> <name>i</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cnt</name> <operator>&lt;</operator> <name>i</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cnt</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>JBL_NODE</name> <modifier>*</modifier></type><name>s1</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>JBL_NODE</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>cnt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>s1</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>JBL_NODE</name> <modifier>*</modifier></type><name>s2</name> <init>= <expr><name>s1</name> <operator>+</operator> <name>cnt</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>n1</name> <operator>=</operator> <name><name>n1</name><operator>-&gt;</operator><name>child</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>n2</name> <operator>=</operator> <name><name>n2</name><operator>-&gt;</operator><name>child</name></name></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>n1</name> <operator>&amp;&amp;</operator> <name>n2</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>n1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>n2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>n1</name> <operator>=</operator> <name><name>n1</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>n2</name> <operator>=</operator> <name><name>n2</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>JBL_NODE</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>_jbl_cmp_node_keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>JBL_NODE</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>_jbl_cmp_node_keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cnt</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_jbl_cmp_node_keys</name><argument_list>(<argument><expr><name>s1</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>s2</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_jbl_compare_nodes</name><argument_list>(<argument><expr><name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>rcp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>rcp</name> <operator>||</operator> <name>ret</name></expr>)</condition> <block>{<block_content>
      <goto>goto <name>finish</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>_jbl_compare_nodes</name><parameter_list>(<parameter><decl><type><name>JBL_NODE</name></type> <name>n1</name></decl></parameter>, <parameter><decl><type><name>JBL_NODE</name></type> <name>n2</name></decl></parameter>, <parameter><decl><type><name>iwrc</name> <modifier>*</modifier></type><name>rcp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>n1</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>n2</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>n1</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>n2</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>n1</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name><name>n2</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>n1</name><operator>-&gt;</operator><name>type</name></name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>n2</name><operator>-&gt;</operator><name>type</name></name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <switch>switch <condition>(<expr><name><name>n1</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>JBV_BOOL</name></expr>:</case>
      <return>return <expr><name><name>n1</name><operator>-&gt;</operator><name>vbool</name></name> <operator>-</operator> <name><name>n2</name><operator>-&gt;</operator><name>vbool</name></name></expr>;</return>
    <case>case <expr><name>JBV_I64</name></expr>:</case>
      <return>return <expr><ternary><condition><expr><name><name>n1</name><operator>-&gt;</operator><name>vi64</name></name> <operator>&gt;</operator> <name><name>n2</name><operator>-&gt;</operator><name>vi64</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><ternary><condition><expr><name><name>n1</name><operator>-&gt;</operator><name>vi64</name></name> <operator>&lt;</operator> <name><name>n2</name><operator>-&gt;</operator><name>vi64</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr>;</return>
    <case>case <expr><name>JBV_F64</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>size_t</name></type> <name>sz1</name></decl>, <decl><type ref="prev"/><name>sz2</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name></type> <name><name>b1</name><index>[<expr><name>IWNUMBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name></type> <name><name>b2</name><index>[<expr><name>IWNUMBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>iwjson_ftoa</name><argument_list>(<argument><expr><name><name>n1</name><operator>-&gt;</operator><name>vf64</name></name></expr></argument>, <argument><expr><name>b1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>iwjson_ftoa</name><argument_list>(<argument><expr><name><name>n2</name><operator>-&gt;</operator><name>vf64</name></name></expr></argument>, <argument><expr><name>b2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><call><name>iwafcmp</name><argument_list>(<argument><expr><name>b1</name></expr></argument>, <argument><expr><name>sz1</name></expr></argument>, <argument><expr><name>b2</name></expr></argument>, <argument><expr><name>sz2</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>JBV_STR</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name><name>n1</name><operator>-&gt;</operator><name>vsize</name></name> <operator>!=</operator> <name><name>n2</name><operator>-&gt;</operator><name>vsize</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name><name>n1</name><operator>-&gt;</operator><name>vsize</name></name> <operator>-</operator> <name><name>n2</name><operator>-&gt;</operator><name>vsize</name></name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>n1</name><operator>-&gt;</operator><name>vptr</name></name></expr></argument>, <argument><expr><name><name>n2</name><operator>-&gt;</operator><name>vptr</name></name></expr></argument>, <argument><expr><name><name>n1</name><operator>-&gt;</operator><name>vsize</name></name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>JBV_ARRAY</name></expr>:</case>
      <for>for <control>(<init><expr><name>n1</name> <operator>=</operator> <name><name>n1</name><operator>-&gt;</operator><name>child</name></name></expr><operator>,</operator> <expr><name>n2</name> <operator>=</operator> <name><name>n2</name><operator>-&gt;</operator><name>child</name></name></expr>;</init> <condition><expr><name>n1</name> <operator>&amp;&amp;</operator> <name>n2</name></expr>;</condition> <incr><expr><name>n1</name> <operator>=</operator> <name><name>n1</name><operator>-&gt;</operator><name>next</name></name></expr><operator>,</operator> <expr><name>n2</name> <operator>=</operator> <name><name>n2</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>_jbl_compare_nodes</name><argument_list>(<argument><expr><name>n1</name></expr></argument>, <argument><expr><name>n2</name></expr></argument>, <argument><expr><name>rcp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>res</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
      <if_stmt><if>if <condition>(<expr><name>n1</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n2</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
      </block_content>}</block></else></if_stmt>
    <case>case <expr><name>JBV_OBJECT</name></expr>:</case>
      <return>return <expr><call><name>_jbl_compare_objects</name><argument_list>(<argument><expr><name>n1</name></expr></argument>, <argument><expr><name>n2</name></expr></argument>, <argument><expr><name>rcp</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>JBV_NULL</name></expr>:</case>
    <case>case <expr><name>JBV_NONE</name></expr>:</case>
      <break>break;</break>
  </block_content>}</block></switch>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>jbn_compare_nodes</name><parameter_list>(<parameter><decl><type><name>JBL_NODE</name></type> <name>n1</name></decl></parameter>, <parameter><decl><type><name>JBL_NODE</name></type> <name>n2</name></decl></parameter>, <parameter><decl><type><name>iwrc</name> <modifier>*</modifier></type><name>rcp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>_jbl_compare_nodes</name><argument_list>(<argument><expr><name>n1</name></expr></argument>, <argument><expr><name>n2</name></expr></argument>, <argument><expr><name>rcp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_jbl_target_apply_patch</name><parameter_list>(<parameter><decl><type><name>JBL_NODE</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>JBL_PATCHEXT</name> <modifier>*</modifier></type><name>ex</name></decl></parameter>, <parameter><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>_JBL_NODE</name></name> <modifier>*</modifier></type><name>ntmp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>jbp_patch_t</name></type> <name>op</name> <init>= <expr><name><name>ex</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>op</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBL_PTR</name></type> <name>path</name> <init>= <expr><name><name>ex</name><operator>-&gt;</operator><name>path</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBL_NODE</name></type> <name>value</name> <init>= <expr><name><name>ex</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>vnode</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>oproot</name> <init>= <expr><name><name>ex</name><operator>-&gt;</operator><name>path</name><operator>-&gt;</operator><name>cnt</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>ex</name><operator>-&gt;</operator><name>path</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>JBP_TEST</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>JBL_ERROR_PATCH_NOVALUE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>_jbl_compare_nodes</name><argument_list>(<argument><expr><ternary><condition><expr><name>oproot</name></expr> ?</condition><then> <expr><name>target</name></expr> </then><else>: <expr><call><name>_jbl_node_find</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>path</name><operator>-&gt;</operator><name>cnt</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>JBL_ERROR_PATCH_TEST_FAILED</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><name>rc</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>oproot</name></expr>)</condition> <block>{<block_content> <comment type="line">// Root operation</comment>
    <if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>JBP_REMOVE</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>target</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>op</name> <operator>==</operator> <name>JBP_REPLACE</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>op</name> <operator>==</operator> <name>JBP_ADD</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>op</name> <operator>==</operator> <name>JBP_ADD_CREATE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>JBL_ERROR_PATCH_NOVALUE</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>value</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content> <comment type="line">// Not a root</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>op</name> <operator>==</operator> <name>JBP_REMOVE</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>op</name> <operator>==</operator> <name>JBP_REPLACE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>_jbl_node_detach</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name><name>ex</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>JBP_REMOVE</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>op</name> <operator>==</operator> <name>JBP_MOVE</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>op</name> <operator>==</operator> <name>JBP_COPY</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>op</name> <operator>==</operator> <name>JBP_SWAP</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>JBP_MOVE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>_jbl_node_detach</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name><name>ex</name><operator>-&gt;</operator><name>from</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>_jbl_node_find</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name><name>ex</name><operator>-&gt;</operator><name>from</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>ex</name><operator>-&gt;</operator><name>from</name><operator>-&gt;</operator><name>cnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>JBL_ERROR_PATH_NOTFOUND</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>JBP_SWAP</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>ntmp</name> <operator>=</operator> <call><name>iwpool_calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ntmp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ntmp</name></expr>)</condition> <block>{<block_content>
          <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content> <comment type="line">// ADD/REPLACE/INCREMENT</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>JBL_ERROR_PATCH_NOVALUE</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>lastidx</name> <init>= <expr><name><name>path</name><operator>-&gt;</operator><name>cnt</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JBL_NODE</name></type> <name>parent</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>path</name><operator>-&gt;</operator><name>cnt</name></name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>_jbl_node_find</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>lastidx</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>target</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>parent</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>JBP_ADD_CREATE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>parent</name> <operator>=</operator> <name>target</name></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>lastidx</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
          <decl_stmt><decl><type><name>JBL_NODE</name></type> <name>pn</name> <init>= <expr><call><name>_jbl_node_find</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pn</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>pn</name> <operator>=</operator> <call><name>iwpool_calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pn</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pn</name></expr>)</condition> <block>{<block_content>
              <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>pn</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JBV_OBJECT</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>pn</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name><name>path</name><operator>-&gt;</operator><name>n</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>pn</name><operator>-&gt;</operator><name>klidx</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>pn</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>_jbn_add_item</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>pn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pn</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>JBV_OBJECT</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>JBL_ERROR_PATCH_TARGET_INVALID</name></expr>;</return>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><name>parent</name> <operator>=</operator> <name>pn</name></expr>;</expr_stmt>
        </block_content>}</block></for>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><name>JBL_ERROR_PATCH_TARGET_INVALID</name></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JBV_ARRAY</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>path</name><operator>-&gt;</operator><name>n</name><index>[<expr><name>lastidx</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>path</name><operator>-&gt;</operator><name>n</name><index>[<expr><name>lastidx</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>JBP_SWAP</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>_jbl_node_detach</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name><name>ex</name><operator>-&gt;</operator><name>from</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>_jbn_add_item</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Add to end of array</comment>
      </block_content>}</block></if> <else>else <block>{<block_content>                        <comment type="line">// Insert into the specified index</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name>iwatoi</name><argument_list>(<argument><expr><name><name>path</name><operator>-&gt;</operator><name>n</name><index>[<expr><name>lastidx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><name>idx</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>JBL_NODE</name></type> <name>child</name> <init>= <expr><name><name>parent</name><operator>-&gt;</operator><name>child</name></name></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>child</name> <operator>&amp;&amp;</operator> <name>cnt</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>cnt</name><operator>--</operator></expr>;</expr_stmt>
          <expr_stmt><expr><name>child</name> <operator>=</operator> <name><name>child</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
        </block_content>}</block></while>
        <if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>JBL_ERROR_PATCH_INVALID_ARRAY_INDEX</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>klidx</name></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>child</name></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>JBP_SWAP</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>_jbl_copy_node_data</name><argument_list>(<argument><expr><name>ntmp</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>_jbl_copy_node_data</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>_jbl_copy_node_data</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>ntmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>child</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>child</name> <operator>==</operator> <name><name>parent</name><operator>-&gt;</operator><name>child</name></name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>child</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
              <expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <while>while <condition>(<expr><name>child</name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>klidx</name></name><operator>++</operator></expr>;</expr_stmt>
              <expr_stmt><expr><name>child</name> <operator>=</operator> <name><name>child</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
            </block_content>}</block></while>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>JBP_SWAP</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>_jbl_node_detach</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name><name>ex</name><operator>-&gt;</operator><name>from</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><call><name>_jbn_add_item</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JBV_OBJECT</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>JBL_NODE</name></type> <name>child</name> <init>= <expr><call><name>_jbl_node_find</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>path</name><operator>-&gt;</operator><name>cnt</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>path</name><operator>-&gt;</operator><name>cnt</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>child</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>JBP_INCREMENT</name></expr>)</condition> <block>{<block_content>
          <return>return <expr><call><name>_jbl_increment_node_data</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>JBP_SWAP</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>_jbl_copy_node_data</name><argument_list>(<argument><expr><name>ntmp</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>_jbl_copy_node_data</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>_jbl_copy_node_data</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>ntmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>_jbl_copy_node_data</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>op</name> <operator>!=</operator> <name>JBP_INCREMENT</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>JBP_SWAP</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>_jbl_node_detach</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name><name>ex</name><operator>-&gt;</operator><name>from</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name><name>path</name><operator>-&gt;</operator><name>n</name><index>[<expr><name><name>path</name><operator>-&gt;</operator><name>cnt</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>klidx</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>_jbn_add_item</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><name>JBL_ERROR_PATCH_TARGET_INVALID</name></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><name>JBL_ERROR_PATCH_TARGET_INVALID</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_jbl_from_node_impl</name><parameter_list>(<parameter><decl><type><name>binn</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>JBL_NODE</name></type> <name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>JBV_OBJECT</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>binn_create</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>BINN_OBJECT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>JBL_ERROR_CREATION</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <for>for <control>(<init><decl><type><name>JBL_NODE</name></type> <name>n</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>child</name></name></expr></init></decl>;</init> <condition><expr><name>n</name></expr>;</condition> <incr><expr><name>n</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>binn</name></type> <name>bv</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jbl_from_node_impl</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bv</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>binn_object_set_value2</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>klidx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JBL_ERROR_CREATION</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>binn_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <break>break;</break>
    <case>case <expr><name>JBV_ARRAY</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>binn_create</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>BINN_LIST</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>JBL_ERROR_CREATION</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <for>for <control>(<init><decl><type><name>JBL_NODE</name></type> <name>n</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>child</name></name></expr></init></decl>;</init> <condition><expr><name>n</name></expr>;</condition> <incr><expr><name>n</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>binn</name></type> <name>bv</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jbl_from_node_impl</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bv</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>binn_list_add_value</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JBL_ERROR_CREATION</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>binn_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <break>break;</break>
    <case>case <expr><name>JBV_STR</name></expr>:</case>
      <expr_stmt><expr><call><name>binn_init_item</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>binn_set_string</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>vptr</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>vsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>JBV_I64</name></expr>:</case>
      <expr_stmt><expr><call><name>binn_init_item</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>binn_set_int64</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>vi64</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>JBV_F64</name></expr>:</case>
      <expr_stmt><expr><call><name>binn_init_item</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>binn_set_double</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>vf64</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>JBV_BOOL</name></expr>:</case>
      <expr_stmt><expr><call><name>binn_init_item</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>binn_set_bool</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>vbool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>JBV_NULL</name></expr>:</case>
      <expr_stmt><expr><call><name>binn_init_item</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>binn_set_null</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>JBV_NONE</name></expr>:</case>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JBL_ERROR_CREATION</name></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>_jbl_binn_from_node</name><parameter_list>(<parameter><decl><type><name>binn</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>JBL_NODE</name></type> <name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_jbl_from_node_impl</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rc</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>writable</name></name> <operator>&amp;&amp;</operator> <name><name>res</name><operator>-&gt;</operator><name>dirty</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>binn_save_header</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>_jbl_from_node</name><parameter_list>(<parameter><decl><type><name>JBL</name></type> <name>jbl</name></decl></parameter>, <parameter><decl><type><name>JBL_NODE</name></type> <name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>jbl</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
  <return>return <expr><call><name>_jbl_binn_from_node</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jbl</name><operator>-&gt;</operator><name>bn</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_jbl_patch_node</name><parameter_list>(<parameter><decl><type><name>JBL_NODE</name></type> <name>root</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>JBL_PATCH</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>cnt</name></decl></parameter>, <parameter><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>root</name> <operator>||</operator> <operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBL_PATCHEXT</name></type> <name><name>parr</name><index>[<expr><name>cnt</name></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>parr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cnt</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>JBL_PATCHEXT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cnt</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>JBL_PATCHEXT</name> <modifier>*</modifier></type><name>ext</name> <init>= <expr><operator>&amp;</operator><name><name>parr</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jbl_ptr_pool</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ext</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>from</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jbl_ptr_pool</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>from</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ext</name><operator>-&gt;</operator><name>from</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cnt</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jbl_target_apply_patch</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>parr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_jbl_patch</name><parameter_list>(<parameter><decl><type><name>JBL</name></type> <name>jbl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>JBL_PATCH</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>cnt</name></decl></parameter>, <parameter><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>jbl</name> <operator>||</operator> <operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>binn</name></type> <name>bv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>binn</name> <modifier>*</modifier></type><name>bn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBL_NODE</name></type> <name>root</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_jbl_node_from_binn</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jbl</name><operator>-&gt;</operator><name>bn</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>root</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jbl_patch_node</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>root</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>JBV_NONE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jbl_from_node_impl</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bv</name></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>bn</name> <operator>=</operator> <operator>&amp;</operator><name>bv</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>bn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>binn_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jbl</name><operator>-&gt;</operator><name>bn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>bn</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>bn</name><operator>-&gt;</operator><name>writable</name></name> <operator>&amp;&amp;</operator> <name><name>bn</name><operator>-&gt;</operator><name>dirty</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>binn_save_header</name><argument_list>(<argument><expr><name>bn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jbl</name><operator>-&gt;</operator><name>bn</name></name></expr></argument>, <argument><expr><name>bn</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>allocated</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jbl</name><operator>-&gt;</operator><name>bn</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JBV_NONE</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>_jbl_cmp_atomic_values</name><parameter_list>(<parameter><decl><type><name>JBL</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>JBL</name></type> <name>v2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>jbl_type_t</name></type> <name>t1</name> <init>= <expr><call><name>jbl_type</name><argument_list>(<argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>jbl_type_t</name></type> <name>t2</name> <init>= <expr><call><name>jbl_type</name><argument_list>(<argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>t1</name> <operator>!=</operator> <name>t2</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <name>t1</name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>t2</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <switch>switch <condition>(<expr><name>t1</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>JBV_BOOL</name></expr>:</case>
    <case>case <expr><name>JBV_I64</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>vv1</name> <init>= <expr><call><name>jbl_get_i64</name><argument_list>(<argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>vv2</name> <init>= <expr><call><name>jbl_get_i64</name><argument_list>(<argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><ternary><condition><expr><name>vv1</name> <operator>&gt;</operator> <name>vv2</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><ternary><condition><expr><name>vv1</name> <operator>&lt;</operator> <name>vv2</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>JBV_STR</name></expr>:</case>
      <return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>jbl_get_str</name><argument_list>(<argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>jbl_get_str</name><argument_list>(<argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> <comment type="line">// -V575</comment>
    <case>case <expr><name>JBV_F64</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>double</name></type> <name>vv1</name> <init>= <expr><call><name>jbl_get_f64</name><argument_list>(<argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>double</name></type> <name>vv2</name> <init>= <expr><call><name>jbl_get_f64</name><argument_list>(<argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><ternary><condition><expr><name>vv1</name> <operator>&gt;</operator> <name>vv2</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><ternary><condition><expr><name>vv1</name> <operator>&lt;</operator> <name>vv2</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr>;</return>
    </block_content>}</block>
    <default>default:</default>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>_jbl_is_eq_atomic_values</name><parameter_list>(<parameter><decl><type><name>JBL</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>JBL</name></type> <name>v2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>jbl_type_t</name></type> <name>t1</name> <init>= <expr><call><name>jbl_type</name><argument_list>(<argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>jbl_type_t</name></type> <name>t2</name> <init>= <expr><call><name>jbl_type</name><argument_list>(<argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>t1</name> <operator>!=</operator> <name>t2</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <switch>switch <condition>(<expr><name>t1</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>JBV_BOOL</name></expr>:</case>
    <case>case <expr><name>JBV_I64</name></expr>:</case>
      <return>return <expr><call><name>jbl_get_i64</name><argument_list>(<argument><expr><name>v1</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>jbl_get_i64</name><argument_list>(<argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>JBV_STR</name></expr>:</case>
      <return>return <expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><call><name>jbl_get_str</name><argument_list>(<argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>jbl_get_str</name><argument_list>(<argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> <comment type="line">// -V575</comment>
    <case>case <expr><name>JBV_F64</name></expr>:</case>
      <return>return <expr><call><name>jbl_get_f64</name><argument_list>(<argument><expr><name>v1</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>jbl_get_f64</name><argument_list>(<argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr>;</return> <comment type="line">// -V550</comment>
    <case>case <expr><name>JBV_OBJECT</name></expr>:</case>
    <case>case <expr><name>JBV_ARRAY</name></expr>:</case>
      <return>return <expr><name>false</name></expr>;</return>
    <default>default:</default>
      <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></switch>
</block_content>}</block></function>

<comment type="line">// --------------------------- Public API</comment>

<function><type><name>void</name></type> <name>jbn_apply_from</name><parameter_list>(<parameter><decl><type><name>JBL_NODE</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>JBL_NODE</name></type> <name>from</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>off</name> <init>= <expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>_JBL_NODE</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>target</name> <operator>+</operator> <name>off</name></expr></argument>,
         <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>from</name> <operator>+</operator> <name>off</name></expr></argument>,
         <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>_JBL_NODE</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbl_to_node</name><parameter_list>(<parameter><decl><type><name>JBL</name></type> <name>jbl</name></decl></parameter>, <parameter><decl><type><name>JBL_NODE</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>clone_strings</name></decl></parameter>, <parameter><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>jbl</name><operator>-&gt;</operator><name>node</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>node</name> <operator>=</operator> <name><name>jbl</name><operator>-&gt;</operator><name>node</name></name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>_jbl_node_from_binn</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jbl</name><operator>-&gt;</operator><name>bn</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>clone_strings</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbn_patch</name><parameter_list>(<parameter><decl><type><name>JBL_NODE</name></type> <name>root</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>JBL_PATCH</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>cnt</name></decl></parameter>, <parameter><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>_jbl_patch_node</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbl_patch</name><parameter_list>(<parameter><decl><type><name>JBL</name></type> <name>jbl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>JBL_PATCH</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>cnt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>jbl</name> <operator>||</operator> <operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><call><name>iwpool_create</name><argument_list>(<argument><expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pool</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_jbl_patch</name><argument_list>(<argument><expr><name>jbl</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>iwpool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_jbl_create_patch</name><parameter_list>(<parameter><decl><type><name>JBL_NODE</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>JBL_PATCH</name> <modifier>*</modifier><modifier>*</modifier></type><name>pptr</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>cntp</name></decl></parameter>, <parameter><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>pptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>cntp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>JBL_NODE</name></type> <name>n</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>child</name></name></expr></init></decl>;</init> <condition><expr><name>n</name></expr>;</condition> <incr><expr><name>n</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>JBV_OBJECT</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>JBL_ERROR_PATCH_INVALID</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <decl_stmt><decl><type><name>JBL_PATCH</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>iwpool_alloc</name><argument_list>(<argument><expr><name>i</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>JBL_NODE</name></type> <name>n</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>child</name></name></expr></init></decl>;</init> <condition><expr><name>n</name></expr>;</condition> <incr><expr><name>n</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>next</name></name></expr><operator>,</operator> <expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>JBL_PATCH</name> <modifier>*</modifier></type><name>pp</name> <init>= <expr><name>p</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>JBL_NODE</name></type> <name>n2</name> <init>= <expr><name><name>n</name><operator>-&gt;</operator><name>child</name></name></expr></init></decl>;</init> <condition><expr><name>n2</name></expr>;</condition> <incr><expr><name>n2</name> <operator>=</operator> <name><name>n2</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"op"</literal></expr></argument>, <argument><expr><name><name>n2</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>n2</name><operator>-&gt;</operator><name>klidx</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>n2</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>JBV_STR</name></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>JBL_ERROR_PATCH_INVALID</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"add"</literal></expr></argument>, <argument><expr><name><name>n2</name><operator>-&gt;</operator><name>vptr</name></name></expr></argument>, <argument><expr><name><name>n2</name><operator>-&gt;</operator><name>vsize</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>op</name></name> <operator>=</operator> <name>JBP_ADD</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"remove"</literal></expr></argument>, <argument><expr><name><name>n2</name><operator>-&gt;</operator><name>vptr</name></name></expr></argument>, <argument><expr><name><name>n2</name><operator>-&gt;</operator><name>vsize</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>op</name></name> <operator>=</operator> <name>JBP_REMOVE</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"replace"</literal></expr></argument>, <argument><expr><name><name>n2</name><operator>-&gt;</operator><name>vptr</name></name></expr></argument>, <argument><expr><name><name>n2</name><operator>-&gt;</operator><name>vsize</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>op</name></name> <operator>=</operator> <name>JBP_REPLACE</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"copy"</literal></expr></argument>, <argument><expr><name><name>n2</name><operator>-&gt;</operator><name>vptr</name></name></expr></argument>, <argument><expr><name><name>n2</name><operator>-&gt;</operator><name>vsize</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>op</name></name> <operator>=</operator> <name>JBP_COPY</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"move"</literal></expr></argument>, <argument><expr><name><name>n2</name><operator>-&gt;</operator><name>vptr</name></name></expr></argument>, <argument><expr><name><name>n2</name><operator>-&gt;</operator><name>vsize</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>op</name></name> <operator>=</operator> <name>JBP_MOVE</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>, <argument><expr><name><name>n2</name><operator>-&gt;</operator><name>vptr</name></name></expr></argument>, <argument><expr><name><name>n2</name><operator>-&gt;</operator><name>vsize</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>op</name></name> <operator>=</operator> <name>JBP_TEST</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"increment"</literal></expr></argument>, <argument><expr><name><name>n2</name><operator>-&gt;</operator><name>vptr</name></name></expr></argument>, <argument><expr><name><name>n2</name><operator>-&gt;</operator><name>vsize</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>op</name></name> <operator>=</operator> <name>JBP_INCREMENT</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"add_create"</literal></expr></argument>, <argument><expr><name><name>n2</name><operator>-&gt;</operator><name>vptr</name></name></expr></argument>, <argument><expr><name><name>n2</name><operator>-&gt;</operator><name>vsize</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>op</name></name> <operator>=</operator> <name>JBP_ADD_CREATE</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"swap"</literal></expr></argument>, <argument><expr><name><name>n2</name><operator>-&gt;</operator><name>vptr</name></name></expr></argument>, <argument><expr><name><name>n2</name><operator>-&gt;</operator><name>vsize</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>op</name></name> <operator>=</operator> <name>JBP_SWAP</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <return>return <expr><name>JBL_ERROR_PATCH_INVALID_OP</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"value"</literal></expr></argument>, <argument><expr><name><name>n2</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>n2</name><operator>-&gt;</operator><name>klidx</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>vnode</name></name> <operator>=</operator> <name>n2</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"path"</literal></expr></argument>, <argument><expr><name><name>n2</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>n2</name><operator>-&gt;</operator><name>klidx</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>n2</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>JBV_STR</name></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>JBL_ERROR_PATCH_INVALID</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <name><name>n2</name><operator>-&gt;</operator><name>vptr</name></name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"from"</literal></expr></argument>, <argument><expr><name><name>n2</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>n2</name><operator>-&gt;</operator><name>klidx</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>n2</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>JBV_STR</name></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>JBL_ERROR_PATCH_INVALID</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>from</name></name> <operator>=</operator> <name><name>n2</name><operator>-&gt;</operator><name>vptr</name></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>
  <expr_stmt><expr><operator>*</operator><name>cntp</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pptr</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbl_patch_from_json</name><parameter_list>(<parameter><decl><type><name>JBL</name></type> <name>jbl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>patchjson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>jbl</name> <operator>||</operator> <operator>!</operator><name>patchjson</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>JBL_PATCH</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBL_NODE</name></type> <name>patch</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>patchjson</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><call><name>iwpool_create</name><argument_list>(<argument><expr><call><name>MAX</name><argument_list>(<argument><expr><name>cnt</name></expr></argument>, <argument><expr><literal type="number">1024U</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pool</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>jbn_from_json</name><argument_list>(<argument><expr><name>patchjson</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>patch</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>patch</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JBV_ARRAY</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jbl_create_patch</name><argument_list>(<argument><expr><name>patch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cnt</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jbl_patch</name><argument_list>(<argument><expr><name>jbl</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>patch</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JBV_OBJECT</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// FIXME: Merge patch not implemented</comment>
    <comment type="line">//_jbl_merge_patch_node()</comment>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_NOT_IMPLEMENTED</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>JBL_ERROR_PATCH_INVALID</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>iwpool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbl_fill_from_node</name><parameter_list>(<parameter><decl><type><name>JBL</name></type> <name>jbl</name></decl></parameter>, <parameter><decl><type><name>JBL_NODE</name></type> <name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>jbl</name> <operator>||</operator> <operator>!</operator><name>node</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JBV_NONE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>jbl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>jbl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>binn</name></type> <name>bv</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_jbl_binn_from_node</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bv</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>binn_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jbl</name><operator>-&gt;</operator><name>bn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jbl</name><operator>-&gt;</operator><name>bn</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>allocated</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbl_from_node</name><parameter_list>(<parameter><decl><type><name>JBL</name> <modifier>*</modifier></type><name>jblp</name></decl></parameter>, <parameter><decl><type><name>JBL_NODE</name></type> <name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>jblp</name> <operator>||</operator> <operator>!</operator><name>node</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JBV_OBJECT</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbl_create_empty_object</name><argument_list>(<argument><expr><name>jblp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JBV_ARRAY</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbl_create_empty_array</name><argument_list>(<argument><expr><name>jblp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>IW_ERROR_INVALID_ARGS</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>jbl_fill_from_node</name><argument_list>(<argument><expr><operator>*</operator><name>jblp</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>JBL_NODE</name></type> <name>_jbl_merge_patch_node</name><parameter_list>(<parameter><decl><type><name>JBL_NODE</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>JBL_NODE</name></type> <name>patch</name></decl></parameter>, <parameter><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>iwrc</name> <modifier>*</modifier></type><name>rcp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>patch</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>patch</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JBV_OBJECT</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>target</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>target</name> <operator>=</operator> <call><name>iwpool_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>target</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>target</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>target</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>target</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JBV_OBJECT</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>target</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name><name>patch</name><operator>-&gt;</operator><name>key</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>target</name><operator>-&gt;</operator><name>klidx</name></name> <operator>=</operator> <name><name>patch</name><operator>-&gt;</operator><name>klidx</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>target</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>JBV_OBJECT</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>_jbl_node_reset_data</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>target</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JBV_OBJECT</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>patch</name> <operator>=</operator> <name><name>patch</name><operator>-&gt;</operator><name>child</name></name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>patch</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>JBL_NODE</name></type> <name>patch_next</name> <init>= <expr><name><name>patch</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>patch</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JBV_NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>JBL_NODE</name></type> <name>node</name> <init>= <expr><name><name>target</name><operator>-&gt;</operator><name>child</name></name></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>node</name></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>klidx</name></name> <operator>==</operator> <name><name>patch</name><operator>-&gt;</operator><name>klidx</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>patch</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>klidx</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>_jbn_remove_item</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
        </block_content>}</block></while>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>JBL_NODE</name></type> <name>node</name> <init>= <expr><name><name>target</name><operator>-&gt;</operator><name>child</name></name></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>node</name></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>klidx</name></name> <operator>==</operator> <name><name>patch</name><operator>-&gt;</operator><name>klidx</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>patch</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>klidx</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>_jbl_copy_node_data</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><call><name>_jbl_merge_patch_node</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>patch</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>rcp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
        </block_content>}</block></while>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>node</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>_jbn_add_item</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><call><name>_jbl_merge_patch_node</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>patch</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>rcp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name>patch</name> <operator>=</operator> <name>patch_next</name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return <expr><name>target</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name>patch</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbn_merge_patch_from_json</name><parameter_list>(<parameter><decl><type><name>JBL_NODE</name></type> <name>root</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>patchjson</name></decl></parameter>, <parameter><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>root</name> <operator>||</operator> <operator>!</operator><name>patchjson</name> <operator>||</operator> <operator>!</operator><name>pool</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>JBL_NODE</name></type> <name>patch</name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>jbn_from_json</name><argument_list>(<argument><expr><name>patchjson</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>patch</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>_jbl_merge_patch_node</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>patch</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>root</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>root</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// -V575</comment>
  </block_content>}</block></if></if_stmt>

<label><name>finish</name>:</label>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbl_merge_patch</name><parameter_list>(<parameter><decl><type><name>JBL</name></type> <name>jbl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>patchjson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>jbl</name> <operator>||</operator> <operator>!</operator><name>patchjson</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>binn</name></type> <name>bv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBL_NODE</name></type> <name>target</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><call><name>iwpool_create</name><argument_list>(<argument><expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>size</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pool</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>_jbl_node_from_binn</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jbl</name><operator>-&gt;</operator><name>bn</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>target</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbn_merge_patch_from_json</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>patchjson</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jbl_binn_from_node</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bv</name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>binn_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jbl</name><operator>-&gt;</operator><name>bn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jbl</name><operator>-&gt;</operator><name>bn</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>jbl</name><operator>-&gt;</operator><name>bn</name><operator>.</operator><name>allocated</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>iwpool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbl_merge_patch_jbl</name><parameter_list>(<parameter><decl><type><name>JBL</name></type> <name>jbl</name></decl></parameter>, <parameter><decl><type><name>JBL</name></type> <name>patch</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>IWXSTR</name> <modifier>*</modifier></type><name>xstr</name> <init>= <expr><call><name>iwxstr_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>xstr</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>jbl_as_json</name><argument_list>(<argument><expr><name>patch</name></expr></argument>, <argument><expr><name>jbl_xstr_json_printer</name></expr></argument>, <argument><expr><name>xstr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCGO</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>jbl_merge_patch</name><argument_list>(<argument><expr><name>jbl</name></expr></argument>, <argument><expr><call><name>iwxstr_ptr</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>finish</name>:</label>
  <expr_stmt><expr><call><name>iwxstr_destroy</name><argument_list>(<argument><expr><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbn_patch_auto</name><parameter_list>(<parameter><decl><type><name>JBL_NODE</name></type> <name>root</name></decl></parameter>, <parameter><decl><type><name>JBL_NODE</name></type> <name>patch</name></decl></parameter>, <parameter><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>root</name> <operator>||</operator> <operator>!</operator><name>patch</name> <operator>||</operator> <operator>!</operator><name>pool</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>patch</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JBV_OBJECT</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_jbl_merge_patch_node</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>patch</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>patch</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JBV_ARRAY</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>cnt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>JBL_PATCH</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jbl_create_patch</name><argument_list>(<argument><expr><name>patch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cnt</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jbl_patch_node</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbn_merge_patch</name><parameter_list>(<parameter><decl><type><name>JBL_NODE</name></type> <name>root</name></decl></parameter>, <parameter><decl><type><name>JBL_NODE</name></type> <name>patch</name></decl></parameter>, <parameter><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>root</name> <operator>||</operator> <operator>!</operator><name>patch</name> <operator>||</operator> <operator>!</operator><name>pool</name> <operator>||</operator> <operator>(</operator><name><name>root</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>JBV_OBJECT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>IW_ERROR_INVALID_ARGS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>_jbl_merge_patch_node</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>patch</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>_jbl_ecodefn</name><parameter_list>(<parameter><decl><type><name>locale_t</name></type> <name>locale</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ecode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>ecode</name> <operator>&gt;</operator> <name>_JBL_ERROR_START</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>ecode</name> <operator>&lt;</operator> <name>_JBL_ERROR_END</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <switch>switch <condition>(<expr><name>ecode</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>JBL_ERROR_INVALID_BUFFER</name></expr>:</case>
      <return>return <expr><literal type="string">"Invalid JBL buffer (JBL_ERROR_INVALID_BUFFER)"</literal></expr>;</return>
    <case>case <expr><name>JBL_ERROR_CREATION</name></expr>:</case>
      <return>return <expr><literal type="string">"Cannot create JBL object (JBL_ERROR_CREATION)"</literal></expr>;</return>
    <case>case <expr><name>JBL_ERROR_INVALID</name></expr>:</case>
      <return>return <expr><literal type="string">"Invalid JBL object (JBL_ERROR_INVALID)"</literal></expr>;</return>
    <case>case <expr><name>JBL_ERROR_PARSE_JSON</name></expr>:</case>
      <return>return <expr><literal type="string">"Failed to parse JSON string (JBL_ERROR_PARSE_JSON)"</literal></expr>;</return>
    <case>case <expr><name>JBL_ERROR_PARSE_UNQUOTED_STRING</name></expr>:</case>
      <return>return <expr><literal type="string">"Unquoted JSON string (JBL_ERROR_PARSE_UNQUOTED_STRING)"</literal></expr>;</return>
    <case>case <expr><name>JBL_ERROR_PARSE_INVALID_CODEPOINT</name></expr>:</case>
      <return>return <expr><literal type="string">"Invalid unicode codepoint/escape sequence (JBL_ERROR_PARSE_INVALID_CODEPOINT)"</literal></expr>;</return>
    <case>case <expr><name>JBL_ERROR_PARSE_INVALID_UTF8</name></expr>:</case>
      <return>return <expr><literal type="string">"Invalid utf8 string (JBL_ERROR_PARSE_INVALID_UTF8)"</literal></expr>;</return>
    <case>case <expr><name>JBL_ERROR_JSON_POINTER</name></expr>:</case>
      <return>return <expr><literal type="string">"Invalid JSON pointer (rfc6901) path (JBL_ERROR_JSON_POINTER)"</literal></expr>;</return>
    <case>case <expr><name>JBL_ERROR_PATH_NOTFOUND</name></expr>:</case>
      <return>return <expr><literal type="string">"JSON object not matched the path specified (JBL_ERROR_PATH_NOTFOUND)"</literal></expr>;</return>
    <case>case <expr><name>JBL_ERROR_PATCH_INVALID</name></expr>:</case>
      <return>return <expr><literal type="string">"Invalid JSON patch specified (JBL_ERROR_PATCH_INVALID)"</literal></expr>;</return>
    <case>case <expr><name>JBL_ERROR_PATCH_INVALID_OP</name></expr>:</case>
      <return>return <expr><literal type="string">"Invalid JSON patch operation specified (JBL_ERROR_PATCH_INVALID_OP)"</literal></expr>;</return>
    <case>case <expr><name>JBL_ERROR_PATCH_NOVALUE</name></expr>:</case>
      <return>return <expr><literal type="string">"No value specified in JSON patch (JBL_ERROR_PATCH_NOVALUE)"</literal></expr>;</return>
    <case>case <expr><name>JBL_ERROR_PATCH_TARGET_INVALID</name></expr>:</case>
      <return>return <expr><literal type="string">"Could not find target object to set value (JBL_ERROR_PATCH_TARGET_INVALID)"</literal></expr>;</return>
    <case>case <expr><name>JBL_ERROR_PATCH_INVALID_VALUE</name></expr>:</case>
      <return>return <expr><literal type="string">"Invalid value specified by patch (JBL_ERROR_PATCH_INVALID_VALUE)"</literal></expr>;</return>
    <case>case <expr><name>JBL_ERROR_PATCH_INVALID_ARRAY_INDEX</name></expr>:</case>
      <return>return <expr><literal type="string">"Invalid array index in JSON patch path (JBL_ERROR_PATCH_INVALID_ARRAY_INDEX)"</literal></expr>;</return>
    <case>case <expr><name>JBL_ERROR_PATCH_TEST_FAILED</name></expr>:</case>
      <return>return <expr><literal type="string">"JSON patch test operation failed (JBL_ERROR_PATCH_TEST_FAILED)"</literal></expr>;</return>
    <case>case <expr><name>JBL_ERROR_NOT_AN_OBJECT</name></expr>:</case>
      <return>return <expr><literal type="string">"JBL is not an object (JBL_ERROR_NOT_AN_OBJECT)"</literal></expr>;</return>
    <case>case <expr><name>JBL_ERROR_TYPE_MISMATCHED</name></expr>:</case>
      <return>return <expr><literal type="string">"Type of JBL object mismatched user type constraints (JBL_ERROR_TYPE_MISMATCHED)"</literal></expr>;</return>
    <case>case <expr><name>JBL_ERROR_MAX_NESTING_LEVEL_EXCEEDED</name></expr>:</case>
      <return>return <expr><literal type="string">"Exceeded the maximal object nesting level: "</literal> <call><name>_STR</name><argument_list>(<argument><expr><name>JBL_MAX_NESTING_LEVEL</name></expr></argument>)</argument_list></call>
             <literal type="string">" (JBL_ERROR_MAX_NESTING_LEVEL_EXCEEDED)"</literal></expr>;</return>
  </block_content>}</block></switch>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbl_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>_jbl_initialized</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__sync_bool_compare_and_swap</name><argument_list>(<argument><expr><operator>&amp;</operator><name>_jbl_initialized</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>iwlog_register_ecodefn</name><argument_list>(<argument><expr><name>_jbl_ecodefn</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
