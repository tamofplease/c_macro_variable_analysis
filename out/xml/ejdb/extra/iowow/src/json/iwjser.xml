<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/extra/iowow/src/json/iwjser.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwjson.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwjson_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwconv.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utf8proc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;locale.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_WHITESPACE</name><parameter_list>(<parameter><type><name>c_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((unsigned char) (c_) &lt;= (unsigned char) ' ')</cpp:value></cpp:define>

<comment type="block" format="doxygen">/** JSON parsing context */</comment>
<typedef>typedef <type><struct>struct <name>JCTX</name> <block>{
  <decl_stmt><decl><type><name>IWPOOL</name>     <modifier>*</modifier></type><name>pool</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBL_NODE</name></type>    <name>root</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
}</block></struct></type> <name>JCTX</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_jbn_add_item</name><parameter_list>(<parameter><decl><type><name>JBL_NODE</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>JBL_NODE</name></type> <name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>parent</name> <operator>&amp;&amp;</operator> <name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>child</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>JBL_NODE</name></type> <name>prev</name> <init>= <expr><name><name>parent</name><operator>-&gt;</operator><name>child</name><operator>-&gt;</operator><name>prev</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>child</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>prev</name></expr>)</condition> <block>{<block_content> <comment type="line">// -V1051</comment>
      <expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>child</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>child</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>child</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JBV_ARRAY</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>prev</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>klidx</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>klidx</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>klidx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>JBL_NODE</name></type> <name>_jbl_json_create_node</name><parameter_list>(<parameter><decl><type><name>jbl_type_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>klidx</name></decl></parameter>, <parameter><decl><type><name>JBL_NODE</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>JCTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JBL_NODE</name></type> <name>node</name> <init>= <expr><call><name>iwpool_calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>node</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>node</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>klidx</name></name> <operator>=</operator> <name>klidx</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>parent</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>_jbn_add_item</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>root</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>void</name></type> <name>_jbl_skip_bom</name><parameter_list>(<parameter><decl><type><name>JCTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\xEF'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\xBB'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\xBF'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>IW_INLINE</name> <name>int</name></type> <name>_jbl_hex</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'a'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>&lt;=</operator> <literal type="char">'f'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>c</name> <operator>-</operator> <literal type="char">'a'</literal> <operator>+</operator> <literal type="number">10</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'A'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>&lt;=</operator> <literal type="char">'F'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>c</name> <operator>-</operator> <literal type="char">'A'</literal> <operator>+</operator> <literal type="number">10</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_jbl_unescape_json_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dlen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>end</name></decl></parameter>, <parameter><decl><type><name>iwrc</name> <modifier>*</modifier></type><name>rcp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ds</name> <init>= <expr><name>d</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>de</name> <init>= <expr><name>d</name> <operator>+</operator> <name>dlen</name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content> <comment type="line">// string closing quotes</comment>
      <if_stmt><if>if <condition>(<expr><name>end</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>d</name> <operator>-</operator> <name>ds</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
      <switch>switch <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="char">'\\'</literal></expr>:</case>
        <case>case <expr><literal type="char">'/'</literal></expr>:</case>
        <case>case <expr><literal type="char">'"'</literal></expr>:</case>
          <if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <name>de</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><operator>++</operator><name>p</name></expr><operator>,</operator> <expr><operator>++</operator><name>d</name></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><literal type="char">'b'</literal></expr>:</case>
          <if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <name>de</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <literal type="char">'\b'</literal></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><operator>++</operator><name>p</name></expr><operator>,</operator> <expr><operator>++</operator><name>d</name></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><literal type="char">'f'</literal></expr>:</case>
          <if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <name>de</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <literal type="char">'\f'</literal></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><operator>++</operator><name>p</name></expr><operator>,</operator> <expr><operator>++</operator><name>d</name></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><literal type="char">'n'</literal></expr>:</case>
        <case>case <expr><literal type="char">'r'</literal></expr>:</case>
          <if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <name>de</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><operator>++</operator><name>p</name></expr><operator>,</operator> <expr><operator>++</operator><name>d</name></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><literal type="char">'t'</literal></expr>:</case>
          <if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <name>de</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <literal type="char">'\t'</literal></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><operator>++</operator><name>p</name></expr><operator>,</operator> <expr><operator>++</operator><name>d</name></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><literal type="char">'u'</literal></expr>:</case> <block>{<block_content>
          <decl_stmt><decl><type><name>uint32_t</name></type> <name>cp</name></decl>, <decl><type ref="prev"/><name>cp2</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int</name></type> <name>h1</name></decl>, <decl><type ref="prev"/><name>h2</name></decl>, <decl><type ref="prev"/><name>h3</name></decl>, <decl><type ref="prev"/><name>h4</name></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(  <expr><operator>(</operator><operator>(</operator><name>h1</name> <operator>=</operator> <call><name>_jbl_hex</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>h2</name> <operator>=</operator> <call><name>_jbl_hex</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator>
             <operator>||</operator> <operator>(</operator><operator>(</operator><name>h3</name> <operator>=</operator> <call><name>_jbl_hex</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>h4</name> <operator>=</operator> <call><name>_jbl_hex</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <name>JBL_ERROR_PARSE_INVALID_CODEPOINT</name></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><name>cp</name> <operator>=</operator> <name>h1</name> <operator>&lt;&lt;</operator> <literal type="number">12</literal> <operator>|</operator> <name>h2</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <name>h3</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal> <operator>|</operator> <name>h4</name></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><operator>(</operator><name>cp</name> <operator>&amp;</operator> <literal type="number">0xfc00</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xd800</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(  <expr><operator>(</operator><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\\'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'u'</literal><operator>)</operator>
               <operator>||</operator> <operator>(</operator><operator>(</operator><name>h1</name> <operator>=</operator> <call><name>_jbl_hex</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>h2</name> <operator>=</operator> <call><name>_jbl_hex</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator>
               <operator>||</operator> <operator>(</operator><operator>(</operator><name>h3</name> <operator>=</operator> <call><name>_jbl_hex</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>h4</name> <operator>=</operator> <call><name>_jbl_hex</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <name>JBL_ERROR_PARSE_INVALID_CODEPOINT</name></expr>;</expr_stmt>
              <return>return <expr><literal type="number">0</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>cp2</name> <operator>=</operator> <name>h1</name> <operator>&lt;&lt;</operator> <literal type="number">12</literal> <operator>|</operator> <name>h2</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <name>h3</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal> <operator>|</operator> <name>h4</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>cp2</name> <operator>&amp;</operator> <literal type="number">0xfc00</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0xdc00</literal></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <name>JBL_ERROR_PARSE_INVALID_CODEPOINT</name></expr>;</expr_stmt>
              <return>return <expr><literal type="number">0</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>cp</name> <operator>=</operator> <literal type="number">0x10000</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>cp</name> <operator>-</operator> <literal type="number">0xd800</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>cp2</name> <operator>-</operator> <literal type="number">0xdc00</literal><operator>)</operator></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>utf8proc_codepoint_valid</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <name>JBL_ERROR_PARSE_INVALID_CODEPOINT</name></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
          </block_content>}</block></if></if_stmt>
          <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>uchars</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>utf8proc_ssize_t</name></type> <name>ulen</name> <init>= <expr><call><name>utf8proc_encode_char</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>uchars</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ulen</name> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uchars</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ulen</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <name>de</name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <name><name>uchars</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><operator>++</operator><name>d</name></expr>;</expr_stmt>
          </block_content>}</block></for>
          <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block>
        <default>default:</default>
          <if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <name>de</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><operator>++</operator><name>d</name></expr>;</expr_stmt>
      </block_content>}</block></switch>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <name>de</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><operator>++</operator><name>d</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><operator>*</operator><name>rcp</name> <operator>=</operator> <name>JBL_ERROR_PARSE_UNQUOTED_STRING</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>_jbl_parse_key</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>JCTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>key</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>_jbl_unescape_json_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>rc</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>kptr</name> <init>= <expr><call><name>iwpool_alloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>kptr</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>!=</operator> <call><name>_jbl_unescape_json_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>kptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>rc</name></name></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>rc</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>JBL_ERROR_PARSE_JSON</name></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>kptr</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>key</name> <operator>=</operator> <name>kptr</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <call><name>IS_WHITESPACE</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>JBL_ERROR_PARSE_JSON</name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'}'</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>p</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_WHITESPACE</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">','</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>JBL_ERROR_PARSE_JSON</name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>JBL_ERROR_PARSE_JSON</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>_jbl_parse_value</name><parameter_list>(
  <parameter><decl><type><name>int</name></type> <name>lvl</name></decl></parameter>,
  <parameter><decl><type><name>JBL_NODE</name></type> <name>parent</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>klidx</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
  <parameter><decl><type><name>JCTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>lvl</name> <operator>&gt;</operator> <name>JBL_MAX_NESTING_LEVEL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>JBL_ERROR_MAX_NESTING_LEVEL_EXCEEDED</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>JBL_NODE</name></type> <name>node</name></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <switch>switch <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><literal type="char">'\0'</literal></expr>:</case>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>JBL_ERROR_PARSE_JSON</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
      <case>case <expr><literal type="char">' '</literal></expr>:</case>
      <case>case <expr><literal type="char">'\t'</literal></expr>:</case>
      <case>case <expr><literal type="char">'\n'</literal></expr>:</case>
      <case>case <expr><literal type="char">'\r'</literal></expr>:</case>
      <case>case <expr><literal type="char">','</literal></expr>:</case>
        <expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><literal type="char">'n'</literal></expr>:</case>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"null"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>_jbl_json_create_node</name><argument_list>(<argument><expr><name>JBV_NULL</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>klidx</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>rc</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
          </block_content>}</block></if></if_stmt>
          <return>return <expr><name>p</name> <operator>+</operator> <literal type="number">4</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>JBL_ERROR_PARSE_JSON</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
      <case>case <expr><literal type="char">'t'</literal></expr>:</case>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>_jbl_json_create_node</name><argument_list>(<argument><expr><name>JBV_BOOL</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>klidx</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>rc</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>vbool</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> <comment type="line">// -V522</comment>
          <return>return <expr><name>p</name> <operator>+</operator> <literal type="number">4</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>JBL_ERROR_PARSE_JSON</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
      <case>case <expr><literal type="char">'f'</literal></expr>:</case>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>_jbl_json_create_node</name><argument_list>(<argument><expr><name>JBV_BOOL</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>klidx</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>rc</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>vbool</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
          <return>return <expr><name>p</name> <operator>+</operator> <literal type="number">5</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>JBL_ERROR_PARSE_JSON</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
      <case>case <expr><literal type="char">'"'</literal></expr>:</case>
        <expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>_jbl_unescape_json_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>rc</name></name></expr>)</condition> <block>{<block_content>
          <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>_jbl_json_create_node</name><argument_list>(<argument><expr><name>JBV_STR</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>klidx</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>rc</name></name></expr>)</condition> <block>{<block_content>
          <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>vptr</name> <init>= <expr><call><name>iwpool_alloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><operator>!</operator><name>vptr</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
          </block_content>}</block></if></if_stmt>
          <if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>!=</operator> <call><name>_jbl_unescape_json_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>vptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>rc</name></name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>rc</name></name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>JBL_ERROR_PARSE_JSON</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><name><name>vptr</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>vptr</name></name> <operator>=</operator> <name>vptr</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>vsize</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>p</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>vptr</name></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>vsize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><name>p</name></expr>;</return>
      <case>case <expr><literal type="char">'{'</literal></expr>:</case>
        <expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>_jbl_json_create_node</name><argument_list>(<argument><expr><name>JBV_OBJECT</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>klidx</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>rc</name></name></expr>)</condition> <block>{<block_content>
          <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>
        <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nkey</name></decl>;</decl_stmt>
          <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>_jbl_parse_key</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nkey</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>rc</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
          </block_content>}</block></if></if_stmt>
          <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'}'</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>              <comment type="line">// -V522</comment>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>_jbl_parse_value</name><argument_list>(<argument><expr><name>lvl</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>nkey</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>nkey</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>rc</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></while>
        <break>break;</break>
      <case>case <expr><literal type="char">'['</literal></expr>:</case>
        <expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>_jbl_json_create_node</name><argument_list>(<argument><expr><name>JBV_ARRAY</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>klidx</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>rc</name></name></expr>)</condition> <block>{<block_content>
          <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
          <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>_jbl_parse_value</name><argument_list>(<argument><expr><name>lvl</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>rc</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
          </block_content>}</block></if></if_stmt>
          <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <break>break;</break>
      <case>case <expr><literal type="char">']'</literal></expr>:</case>
        <return>return <expr><name>p</name></expr>;</return>
        <break>break;</break>
      <case>case <expr><literal type="char">'-'</literal></expr>:</case>
      <case>case <expr><literal type="char">'0'</literal></expr>:</case>
      <case>case <expr><literal type="char">'1'</literal></expr>:</case>
      <case>case <expr><literal type="char">'2'</literal></expr>:</case>
      <case>case <expr><literal type="char">'3'</literal></expr>:</case>
      <case>case <expr><literal type="char">'4'</literal></expr>:</case>
      <case>case <expr><literal type="char">'5'</literal></expr>:</case>
      <case>case <expr><literal type="char">'6'</literal></expr>:</case>
      <case>case <expr><literal type="char">'7'</literal></expr>:</case>
      <case>case <expr><literal type="char">'8'</literal></expr>:</case>
      <case>case <expr><literal type="char">'9'</literal></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>_jbl_json_create_node</name><argument_list>(<argument><expr><name>JBV_I64</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>klidx</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>rc</name></name></expr>)</condition> <block>{<block_content>
          <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pe</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>vi64</name></name> <operator>=</operator> <call><name>strtoll</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pe</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pe</name> <operator>==</operator> <name>p</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>errno</name> <operator>==</operator> <name>ERANGE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>JBL_ERROR_PARSE_JSON</name></expr>;</expr_stmt>
          <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>pe</name> <operator>==</operator> <literal type="char">'.'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>pe</name> <operator>==</operator> <literal type="char">'e'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>pe</name> <operator>==</operator> <literal type="char">'E'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>JBV_F64</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>vf64</name></name> <operator>=</operator> <call><name>iwstrtod</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pe</name> <operator>==</operator> <name>p</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>errno</name> <operator>==</operator> <name>ERANGE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>JBL_ERROR_PARSE_JSON</name></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>pe</name></expr>;</return>
      </block_content>}</block>
      <default>default:</default>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>JBL_ERROR_PARSE_JSON</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></switch>
  </block_content>}</block></while>
  <return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>iwrc</name></type> <name>_jbl_node_as_json</name><parameter_list>(<parameter><decl><type><name>JBL_NODE</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>jbl_json_printer</name></type> <name>pt</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lvl</name></decl></parameter>, <parameter><decl><type><name>jbl_print_flags_t</name></type> <name>pf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>pretty</name> <init>= <expr><name>pf</name> <operator>&amp;</operator> <name>JBL_PRINT_PRETTY</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT</name><parameter_list>(<parameter><type><name>data_</name></type></parameter>, <parameter><type><name>size_</name></type></parameter>, <parameter><type><name>ch_</name></type></parameter>, <parameter><type><name>count_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { \
    rc = pt(data_, size_, ch_, count_, op); \
    RCRET(rc); \
} while (0)</cpp:value></cpp:define>

  <switch>switch <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>JBV_ARRAY</name></expr>:</case>
      <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'['</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>child</name></name> <operator>&amp;&amp;</operator> <name>pretty</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <for>for <control>(<init><decl><type><name>JBL_NODE</name></type> <name>n</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>child</name></name></expr></init></decl>;</init> <condition><expr><name>n</name></expr>;</condition> <incr><expr><name>n</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>pretty</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>lvl</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jbl_node_as_json</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>lvl</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>pf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>pretty</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
      <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>child</name></name> <operator>&amp;&amp;</operator> <name>pretty</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>lvl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>JBV_OBJECT</name></expr>:</case>
      <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'{'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>child</name></name> <operator>&amp;&amp;</operator> <name>pretty</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <for>for <control>(<init><decl><type><name>JBL_NODE</name></type> <name>n</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>child</name></name></expr></init></decl>;</init> <condition><expr><name>n</name></expr>;</condition> <incr><expr><name>n</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>pretty</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>lvl</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jbl_write_string</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>klidx</name></name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>pf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>pretty</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="string">": "</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jbl_node_as_json</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>lvl</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>pf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>pretty</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
      <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>child</name></name> <operator>&amp;&amp;</operator> <name>pretty</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>lvl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'}'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>JBV_STR</name></expr>:</case>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jbl_write_string</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>vptr</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>vsize</name></name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>pf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>JBV_I64</name></expr>:</case>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jbl_write_int</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>vi64</name></name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>JBV_F64</name></expr>:</case>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>_jbl_write_double</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>vf64</name></name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>JBV_BOOL</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>vbool</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>
    <case>case <expr><name>JBV_NULL</name></expr>:</case>
      <expr_stmt><expr><call><name>PT</name><argument_list>(<argument><expr><literal type="string">"null"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><call><name>iwlog_ecode_error3</name><argument_list>(<argument><expr><name>IW_ERROR_ASSERTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>IW_ERROR_ASSERTION</name></expr>;</return>
  </block_content>}</block></switch>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PT</name></cpp:undef>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>JBL_NODE</name></type> <name>_jbl_clone_node_struct</name><parameter_list>(<parameter><decl><type><name>JBL_NODE</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JBL_NODE</name></type> <name>n</name> <init>= <expr><call><name>iwpool_calloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>n</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>n</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>vsize</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>vsize</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>klidx</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>klidx</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>flags</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>key</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <call><name>iwpool_strndup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>klidx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>n</name><operator>-&gt;</operator><name>key</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <switch>switch <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>JBV_STR</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>vptr</name></name> <operator>=</operator> <call><name>iwpool_strndup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>vptr</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>vsize</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>n</name><operator>-&gt;</operator><name>vptr</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>JBV_I64</name></expr>:</case>
      <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>vi64</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>vi64</name></name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>JBV_BOOL</name></expr>:</case>
      <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>vbool</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>vbool</name></name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>JBV_F64</name></expr>:</case>
      <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>vf64</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>vf64</name></name></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
  <empty_stmt>;</empty_stmt>
  <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>jbn_visitor_cmd_t</name></type> <name>_jbl_clone_node_visit</name><parameter_list>(
  <parameter><decl><type><name>int</name></type> <name>lvl</name></decl></parameter>, <parameter><decl><type><name>JBL_NODE</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>klidx</name></decl></parameter>, <parameter><decl><type><name>JBN_VCTX</name> <modifier>*</modifier></type><name>vctx</name></decl></parameter>,
  <parameter><decl><type><name>iwrc</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>lvl</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>JBL_VCMD_OK</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>JBL_NODE</name></type> <name>parent</name> <init>= <expr><name><name>vctx</name><operator>-&gt;</operator><name>root</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>lvl</name> <operator>&lt;</operator> <name><name>vctx</name><operator>-&gt;</operator><name>pos</name></name></expr>)</condition> <block>{<block_content> <comment type="line">// Pop</comment>
    <for>for <control>( <init>;</init> <condition><expr><name>lvl</name> <operator>&lt;</operator> <name><name>vctx</name><operator>-&gt;</operator><name>pos</name></name></expr>;</condition> <incr><expr><operator>--</operator><name><name>vctx</name><operator>-&gt;</operator><name>pos</name></name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>parent</name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name><name>vctx</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>vctx</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>lvl</name> <operator>&gt;</operator> <name><name>vctx</name><operator>-&gt;</operator><name>pos</name></name></expr>)</condition> <block>{<block_content> <comment type="line">// Push</comment>
    <expr_stmt><expr><name><name>vctx</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>lvl</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>parent</name> <operator>=</operator> <name><name>vctx</name><operator>-&gt;</operator><name>op</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>vctx</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>JBL_NODE</name></type> <name>nn</name> <init>= <expr><call><name>_jbl_clone_node_struct</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>vctx</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>nn</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>rc</name> <operator>=</operator> <call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JBL_VCMD_TERMINATE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>_jbn_add_item</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>nn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>nn</name><operator>-&gt;</operator><name>type</name></name> <operator>&gt;=</operator> <name>JBV_OBJECT</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>vctx</name><operator>-&gt;</operator><name>op</name></name> <operator>=</operator> <name>nn</name></expr>;</expr_stmt> <comment type="line">// Remeber the last container object</comment>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>JBL_VCMD_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbn_clone</name><parameter_list>(<parameter><decl><type><name>JBL_NODE</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>JBL_NODE</name> <modifier>*</modifier></type><name>targetp</name></decl></parameter>, <parameter><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>targetp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>JBL_NODE</name></type> <name>n</name> <init>= <expr><call><name>_jbl_clone_node_struct</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>n</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>iwrc_set_errno</name><argument_list>(<argument><expr><name>IW_ERROR_ALLOC</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>JBN_VCTX</name></type> <name>vctx</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>pool</name> <operator>=</operator> <name>pool</name></expr>,
    <expr><operator>.</operator><name>root</name> <operator>=</operator> <name>n</name></expr>,
    <expr><operator>.</operator><name>op</name>   <operator>=</operator> <name>n</name></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iwrc</name></type> <name>rc</name> <init>= <expr><call><name>jbn_visit</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vctx</name></expr></argument>, <argument><expr><name>_jbl_clone_node_visit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RCRET</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>targetp</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbn_as_json</name><parameter_list>(<parameter><decl><type><name>JBL_NODE</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>jbl_json_printer</name></type> <name>pt</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>jbl_print_flags_t</name></type> <name>pf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>_jbl_node_as_json</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>iwrc</name></type> <name>jbn_from_json</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><name>JBL_NODE</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>IWPOOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>node</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>JCTX</name></type> <name>ctx</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>pool</name> <operator>=</operator> <name>pool</name></expr>,
    <expr><operator>.</operator><name>buf</name>  <operator>=</operator> <name>json</name></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>_jbl_skip_bom</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_jbl_parse_value</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>node</name> <operator>=</operator> <name><name>ctx</name><operator>.</operator><name>root</name></name></expr>;</expr_stmt>
  <return>return <expr><name><name>ctx</name><operator>.</operator><name>rc</name></name></expr>;</return>
</block_content>}</block></function>

</unit>
