<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/extra/iowow/src/re/vm.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iwre.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cregex.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REGEX_VM_MAX_MATCHES</name></cpp:macro> <cpp:value>IWRE_MAX_MATCHES</cpp:value></cpp:define>

<comment type="block">/* The VM executes one or more threads, each running a regular expression
 * program, which is just a list of regular expression instructions. Each
 * thread maintains two registers while it runs: a program counter (PC) and
 * a string pointer (SP).
 */</comment>
<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>visited</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>cregex_program_instr_t</name> <modifier>*</modifier></type><name>pc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>matches</name><index>[<expr><name>REGEX_VM_MAX_MATCHES</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>vm_thread</name>;</typedef>

<comment type="block">/* Run program on string */</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vm_run</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>cregex_program_t</name> <modifier>*</modifier></type><name>program</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name>             <modifier>*</modifier></type><name>string</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name>            <modifier>*</modifier><modifier>*</modifier></type><name>matches</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type>                     <name>nmatches</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Run program on string (using a previously allocated buffer of at least
 * vm_estimate_threads(program) threads)
 */</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vm_run_with_threads</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>cregex_program_t</name> <modifier>*</modifier></type><name>program</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name>             <modifier>*</modifier></type><name>string</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name>            <modifier>*</modifier><modifier>*</modifier></type><name>matches</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type>                     <name>nmatches</name></decl></parameter>,
  <parameter><decl><type><name>vm_thread</name>              <modifier>*</modifier></type><name>threads</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>nthreads</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>vm_thread</name> <modifier>*</modifier></type><name>threads</name></decl>;</decl_stmt>
}</block></struct></type> <name>vm_thread_list</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vm_add_thread</name><parameter_list>(
  <parameter><decl><type><name>vm_thread_list</name>               <modifier>*</modifier></type><name>list</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>cregex_program_t</name>       <modifier>*</modifier></type><name>program</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>cregex_program_instr_t</name> <modifier>*</modifier></type><name>pc</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name>                   <modifier>*</modifier></type><name>string</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name>                   <modifier>*</modifier></type><name>sp</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name>                  <modifier>*</modifier><modifier>*</modifier></type><name>matches</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type>                           <name>nmatches</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>list</name><operator>-&gt;</operator><name>threads</name><index>[<expr><name>pc</name> <operator>-</operator> <name><name>program</name><operator>-&gt;</operator><name>instructions</name></name></expr>]</index></name><operator>.</operator><name>visited</name> <operator>==</operator> <name>sp</name> <operator>-</operator> <name>string</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>threads</name><index>[<expr><name>pc</name> <operator>-</operator> <name><name>program</name><operator>-&gt;</operator><name>instructions</name></name></expr>]</index></name><operator>.</operator><name>visited</name> <operator>=</operator> <name>sp</name> <operator>-</operator> <name>string</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <switch>switch <condition>(<expr><name><name>pc</name><operator>-&gt;</operator><name>opcode</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>REGEX_PROGRAM_OPCODE_MATCH</name></expr>:</case>
    <comment type="block">/* fall-through */</comment>

    <comment type="block">/* Characters */</comment>
    <case>case <expr><name>REGEX_PROGRAM_OPCODE_CHARACTER</name></expr>:</case>
    <case>case <expr><name>REGEX_PROGRAM_OPCODE_ANY_CHARACTER</name></expr>:</case>
    <case>case <expr><name>REGEX_PROGRAM_OPCODE_CHARACTER_CLASS</name></expr>:</case>
    <case>case <expr><name>REGEX_PROGRAM_OPCODE_CHARACTER_CLASS_NEGATED</name></expr>:</case>
      <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>threads</name><index>[<expr><name><name>list</name><operator>-&gt;</operator><name>nthreads</name></name></expr>]</index></name><operator>.</operator><name>pc</name> <operator>=</operator> <name>pc</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>threads</name><index>[<expr><name><name>list</name><operator>-&gt;</operator><name>nthreads</name></name></expr>]</index></name><operator>.</operator><name>matches</name></expr></argument>, <argument><expr><name>matches</name></expr></argument>,
             <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>matches</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>nmatches</name> <operator>&lt;=</operator> <name>REGEX_VM_MAX_MATCHES</name><operator>)</operator></expr>
                                   ?</condition><then> <expr><name>nmatches</name></expr>
                                   </then><else>: <expr><name>REGEX_VM_MAX_MATCHES</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>++</operator><name><name>list</name><operator>-&gt;</operator><name>nthreads</name></name></expr>;</expr_stmt>
      <break>break;</break>

    <comment type="block">/* Control-flow */</comment>
    <case>case <expr><name>REGEX_PROGRAM_OPCODE_SPLIT</name></expr>:</case>
      <expr_stmt><expr><call><name>vm_add_thread</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>program</name></expr></argument>, <argument><expr><name><name>pc</name><operator>-&gt;</operator><name>first</name></name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>matches</name></expr></argument>, <argument><expr><name>nmatches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>vm_add_thread</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>program</name></expr></argument>, <argument><expr><name><name>pc</name><operator>-&gt;</operator><name>second</name></name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>matches</name></expr></argument>, <argument><expr><name>nmatches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>REGEX_PROGRAM_OPCODE_JUMP</name></expr>:</case>
      <expr_stmt><expr><call><name>vm_add_thread</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>program</name></expr></argument>, <argument><expr><name><name>pc</name><operator>-&gt;</operator><name>target</name></name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>matches</name></expr></argument>, <argument><expr><name>nmatches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <comment type="block">/* Assertions */</comment>
    <case>case <expr><name>REGEX_PROGRAM_OPCODE_ASSERT_BEGIN</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>sp</name> <operator>==</operator> <name>string</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>vm_add_thread</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>program</name></expr></argument>, <argument><expr><name>pc</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>matches</name></expr></argument>, <argument><expr><name>nmatches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    <case>case <expr><name>REGEX_PROGRAM_OPCODE_ASSERT_END</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>sp</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>vm_add_thread</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>program</name></expr></argument>, <argument><expr><name>pc</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>matches</name></expr></argument>, <argument><expr><name>nmatches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>

    <comment type="block">/* Saving */</comment>
    <case>case <expr><name>REGEX_PROGRAM_OPCODE_SAVE</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name><name>pc</name><operator>-&gt;</operator><name>save</name></name> <operator>&lt;</operator> <name>nmatches</name> <operator>&amp;&amp;</operator> <name><name>pc</name><operator>-&gt;</operator><name>save</name></name> <operator>&lt;</operator> <name>REGEX_VM_MAX_MATCHES</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>saved</name> <init>= <expr><name><name>matches</name><index>[<expr><name><name>pc</name><operator>-&gt;</operator><name>save</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>matches</name><index>[<expr><name><name>pc</name><operator>-&gt;</operator><name>save</name></name></expr>]</index></name> <operator>=</operator> <name>sp</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>vm_add_thread</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>program</name></expr></argument>, <argument><expr><name>pc</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>matches</name></expr></argument>, <argument><expr><name>nmatches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>matches</name><index>[<expr><name><name>pc</name><operator>-&gt;</operator><name>save</name></name></expr>]</index></name> <operator>=</operator> <name>saved</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>vm_add_thread</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>program</name></expr></argument>, <argument><expr><name>pc</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>matches</name></expr></argument>, <argument><expr><name>nmatches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>
  </block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/* Upper bound of number of threads required to run program */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vm_estimate_threads</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cregex_program_t</name> <modifier>*</modifier></type><name>program</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name><name>program</name><operator>-&gt;</operator><name>ninstructions</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vm_run</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>cregex_program_t</name> <modifier>*</modifier></type><name>program</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name>             <modifier>*</modifier></type><name>string</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name>            <modifier>*</modifier><modifier>*</modifier></type><name>matches</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type>                     <name>nmatches</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>vm_thread</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <call><name>vm_estimate_threads</name><argument_list>(<argument><expr><name>program</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>vm_thread</name> <modifier>*</modifier></type><name>threads</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>matched</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>threads</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>matched</name> <operator>=</operator> <call><name>vm_run_with_threads</name><argument_list>(<argument><expr><name>program</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>matches</name></expr></argument>, <argument><expr><name>nmatches</name></expr></argument>, <argument><expr><name>threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>matched</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vm_run_with_threads</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>cregex_program_t</name> <modifier>*</modifier></type><name>program</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name>             <modifier>*</modifier></type><name>string</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name>            <modifier>*</modifier><modifier>*</modifier></type><name>matches</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type>                     <name>nmatches</name></decl></parameter>,
  <parameter><decl><type><name>vm_thread</name>              <modifier>*</modifier></type><name>threads</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>vm_thread_list</name> <modifier>*</modifier></type><name>current</name>
    <init>= <expr><operator>&amp;</operator><operator>(</operator><name>vm_thread_list</name><operator>)</operator> <block>{
    <expr><operator>.</operator><name>nthreads</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>threads</name> <operator>=</operator> <name>threads</name></expr>
    }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>vm_thread_list</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name>vm_thread_list</name><operator>)</operator> <block>{
    <expr><operator>.</operator><name>nthreads</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>threads</name> <operator>=</operator> <name>threads</name> <operator>+</operator> <name><name>program</name><operator>-&gt;</operator><name>ninstructions</name></name></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>matched</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>threads</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vm_thread</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>program</name><operator>-&gt;</operator><name>ninstructions</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>vm_add_thread</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>program</name></expr></argument>, <argument><expr><name><name>program</name><operator>-&gt;</operator><name>instructions</name></name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>string</name></expr></argument>,
                <argument><expr><name>matches</name></expr></argument>, <argument><expr><name>nmatches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sp</name> <init>= <expr><name>string</name></expr></init></decl>;</init> <condition>;</condition> <incr><expr><operator>++</operator><name>sp</name></expr></incr>)</control> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>current</name><operator>-&gt;</operator><name>nthreads</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>vm_thread</name> <modifier>*</modifier></type><name>thread</name> <init>= <expr><name><name>current</name><operator>-&gt;</operator><name>threads</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
      <switch>switch <condition>(<expr><name><name>thread</name><operator>-&gt;</operator><name>pc</name><operator>-&gt;</operator><name>opcode</name></name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>REGEX_PROGRAM_OPCODE_MATCH</name></expr>:</case>
          <expr_stmt><expr><name>matched</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>nthreads</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>matches</name></expr></argument>, <argument><expr><name><name>thread</name><operator>-&gt;</operator><name>matches</name></name></expr></argument>,
                 <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>matches</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>nmatches</name> <operator>&lt;=</operator> <name>REGEX_VM_MAX_MATCHES</name><operator>)</operator></expr>
                                       ?</condition><then> <expr><name>nmatches</name></expr>
                                       </then><else>: <expr><name>REGEX_VM_MAX_MATCHES</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <continue>continue;</continue>

        <comment type="block">/* Characters */</comment>
        <case>case <expr><name>REGEX_PROGRAM_OPCODE_CHARACTER</name></expr>:</case>
          <if_stmt><if>if <condition>(<expr><operator>*</operator><name>sp</name> <operator>==</operator> <name><name>thread</name><operator>-&gt;</operator><name>pc</name><operator>-&gt;</operator><name>ch</name></name></expr>)</condition> <block>{<block_content>
            <break>break;</break>
          </block_content>}</block></if></if_stmt>
          <continue>continue;</continue>
        <case>case <expr><name>REGEX_PROGRAM_OPCODE_ANY_CHARACTER</name></expr>:</case>
          <if_stmt><if>if <condition>(<expr><operator>*</operator><name>sp</name></expr>)</condition> <block>{<block_content>
            <break>break;</break>
          </block_content>}</block></if></if_stmt>
          <continue>continue;</continue>
        <case>case <expr><name>REGEX_PROGRAM_OPCODE_CHARACTER_CLASS</name></expr>:</case>
          <if_stmt><if>if <condition>(<expr><call><name>cregex_char_class_contains</name><argument_list>(<argument><expr><name><name>thread</name><operator>-&gt;</operator><name>pc</name><operator>-&gt;</operator><name>klass</name></name></expr></argument>, <argument><expr><operator>*</operator><name>sp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <break>break;</break>
          </block_content>}</block></if></if_stmt>
          <continue>continue;</continue>
        <case>case <expr><name>REGEX_PROGRAM_OPCODE_CHARACTER_CLASS_NEGATED</name></expr>:</case>
          <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cregex_char_class_contains</name><argument_list>(<argument><expr><name><name>thread</name><operator>-&gt;</operator><name>pc</name><operator>-&gt;</operator><name>klass</name></name></expr></argument>, <argument><expr><operator>*</operator><name>sp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <break>break;</break>
          </block_content>}</block></if></if_stmt>
          <continue>continue;</continue>

        <comment type="block">/* Control-flow */</comment>
        <case>case <expr><name>REGEX_PROGRAM_OPCODE_SPLIT</name></expr>:</case>
        <case>case <expr><name>REGEX_PROGRAM_OPCODE_JUMP</name></expr>:</case>
        <comment type="block">/* fall-through */</comment>

        <comment type="block">/* Assertions */</comment>
        <case>case <expr><name>REGEX_PROGRAM_OPCODE_ASSERT_BEGIN</name></expr>:</case>
        <case>case <expr><name>REGEX_PROGRAM_OPCODE_ASSERT_END</name></expr>:</case>
        <comment type="block">/* fall-through */</comment>

        <comment type="block">/* Saving */</comment>
        <case>case <expr><name>REGEX_PROGRAM_OPCODE_SAVE</name></expr>:</case>
          <comment type="block">/* handled in vm_add_thread() */</comment>
          <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></switch>

      <expr_stmt><expr><call><name>vm_add_thread</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name>program</name></expr></argument>, <argument><expr><name><name>thread</name><operator>-&gt;</operator><name>pc</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>sp</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
                    <argument><expr><name><name>thread</name><operator>-&gt;</operator><name>matches</name></name></expr></argument>, <argument><expr><name>nmatches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="block">/* swap current and next thread list */</comment>
    <decl_stmt><decl><type><name>vm_thread_list</name> <modifier>*</modifier></type><name>swap</name> <init>= <expr><name>current</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>current</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>next</name> <operator>=</operator> <name>swap</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>nthreads</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="block">/* done if no more threads are running or end of string reached */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>nthreads</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><operator>*</operator><name>sp</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>matched</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>cregex_program_run</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>cregex_program_t</name> <modifier>*</modifier></type><name>program</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name>             <modifier>*</modifier></type><name>string</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name>            <modifier>*</modifier><modifier>*</modifier></type><name>matches</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type>                     <name>nmatches</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>vm_run</name><argument_list>(<argument><expr><name>program</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>matches</name></expr></argument>, <argument><expr><name>nmatches</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
