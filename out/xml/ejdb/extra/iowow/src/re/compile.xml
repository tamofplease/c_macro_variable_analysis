<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/extra/iowow/src/re/compile.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cregex.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>cregex_program_instr_t</name> <modifier>*</modifier></type><name>pc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ncaptures</name></decl>;</decl_stmt>
}</block></struct></type> <name>regex_compile_context</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>count_instructions</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cregex_node_t</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>REGEX_NODE_TYPE_EPSILON</name></expr>:</case>
      <return>return <expr><literal type="number">0</literal></expr>;</return>

    <comment type="block">/* Characters */</comment>
    <case>case <expr><name>REGEX_NODE_TYPE_CHARACTER</name></expr>:</case>
    <case>case <expr><name>REGEX_NODE_TYPE_ANY_CHARACTER</name></expr>:</case>
    <case>case <expr><name>REGEX_NODE_TYPE_CHARACTER_CLASS</name></expr>:</case>
    <case>case <expr><name>REGEX_NODE_TYPE_CHARACTER_CLASS_NEGATED</name></expr>:</case>
      <return>return <expr><literal type="number">1</literal></expr>;</return>

    <comment type="block">/* Composites */</comment>
    <case>case <expr><name>REGEX_NODE_TYPE_CONCATENATION</name></expr>:</case>
      <return>return <expr><call><name>count_instructions</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>left</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>count_instructions</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>right</name></name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>REGEX_NODE_TYPE_ALTERNATION</name></expr>:</case>
      <return>return <expr><literal type="number">2</literal> <operator>+</operator> <call><name>count_instructions</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>left</name></name></expr></argument>)</argument_list></call>
             <operator>+</operator> <call><name>count_instructions</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>right</name></name></expr></argument>)</argument_list></call></expr>;</return>

    <comment type="block">/* Quantifiers */</comment>
    <case>case <expr><name>REGEX_NODE_TYPE_QUANTIFIER</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><call><name>count_instructions</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>quantified</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>nmax</name></name> <operator>&gt;=</operator> <name><name>node</name><operator>-&gt;</operator><name>nmin</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name><name>node</name><operator>-&gt;</operator><name>nmin</name></name> <operator>*</operator> <name>num</name> <operator>+</operator> <operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>nmax</name></name> <operator>-</operator> <name><name>node</name><operator>-&gt;</operator><name>nmin</name></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>num</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name><name>node</name><operator>-&gt;</operator><name>nmin</name></name></expr> ?</condition><then> <expr><name><name>node</name><operator>-&gt;</operator><name>nmin</name></name> <operator>*</operator> <name>num</name></expr> </then><else>: <expr><name>num</name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</return>
    </block_content>}</block>

    <comment type="block">/* Anchors */</comment>
    <case>case <expr><name>REGEX_NODE_TYPE_ANCHOR_BEGIN</name></expr>:</case>
    <case>case <expr><name>REGEX_NODE_TYPE_ANCHOR_END</name></expr>:</case>
      <return>return <expr><literal type="number">1</literal></expr>;</return>

    <comment type="block">/* Captures */</comment>
    <case>case <expr><name>REGEX_NODE_TYPE_CAPTURE</name></expr>:</case>
      <return>return <expr><literal type="number">2</literal> <operator>+</operator> <call><name>count_instructions</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>captured</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></switch>

  <comment type="block">/* should not reach here */</comment>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>node_is_anchored</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cregex_node_t</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>REGEX_NODE_TYPE_EPSILON</name></expr>:</case>
      <return>return <expr><name>false</name></expr>;</return>

    <comment type="block">/* Characters */</comment>
    <case>case <expr><name>REGEX_NODE_TYPE_CHARACTER</name></expr>:</case>
    <case>case <expr><name>REGEX_NODE_TYPE_ANY_CHARACTER</name></expr>:</case>
    <case>case <expr><name>REGEX_NODE_TYPE_CHARACTER_CLASS</name></expr>:</case>
    <case>case <expr><name>REGEX_NODE_TYPE_CHARACTER_CLASS_NEGATED</name></expr>:</case>
      <return>return <expr><name>false</name></expr>;</return>

    <comment type="block">/* Composites */</comment>
    <case>case <expr><name>REGEX_NODE_TYPE_CONCATENATION</name></expr>:</case>
      <return>return <expr><call><name>node_is_anchored</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>left</name></name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>REGEX_NODE_TYPE_ALTERNATION</name></expr>:</case>
      <return>return <expr><call><name>node_is_anchored</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>left</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>node_is_anchored</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>right</name></name></expr></argument>)</argument_list></call></expr>;</return>

    <comment type="block">/* Quantifiers */</comment>
    <case>case <expr><name>REGEX_NODE_TYPE_QUANTIFIER</name></expr>:</case>
      <return>return <expr><call><name>node_is_anchored</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>quantified</name></name></expr></argument>)</argument_list></call></expr>;</return>

    <comment type="block">/* Anchors */</comment>
    <case>case <expr><name>REGEX_NODE_TYPE_ANCHOR_BEGIN</name></expr>:</case>
      <return>return <expr><name>true</name></expr>;</return>
    <case>case <expr><name>REGEX_NODE_TYPE_ANCHOR_END</name></expr>:</case>
      <return>return <expr><name>false</name></expr>;</return>

    <comment type="block">/* Captures */</comment>
    <case>case <expr><name>REGEX_NODE_TYPE_CAPTURE</name></expr>:</case>
      <return>return <expr><call><name>node_is_anchored</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>captured</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></switch>

  <comment type="block">/* should not reach here */</comment>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>cregex_program_instr_t</name><modifier>*</modifier></type> <name>emit</name><parameter_list>(
  <parameter><decl><type><name>regex_compile_context</name>        <modifier>*</modifier></type><name>context</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>cregex_program_instr_t</name> <modifier>*</modifier></type><name>instruction</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name><name>context</name><operator>-&gt;</operator><name>pc</name></name> <operator>=</operator> <operator>*</operator><name>instruction</name></expr>;</expr_stmt>
  <return>return <expr><name><name>context</name><operator>-&gt;</operator><name>pc</name></name><operator>++</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>cregex_program_instr_t</name><modifier>*</modifier></type> <name>compile_char_class</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>cregex_node_t</name>    <modifier>*</modifier></type><name>node</name></decl></parameter>,
  <parameter><decl><type><name>cregex_program_instr_t</name> <modifier>*</modifier></type><name>instruction</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sp</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>from</name></name></expr></init></decl>;</decl_stmt>

  <for>for <control>( <init>;</init> <condition>;</condition> <incr/>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ch</name> <init>= <expr><operator>*</operator><name>sp</name><operator>++</operator></expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><literal type="char">']'</literal></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name>sp</name> <operator>-</operator> <literal type="number">1</literal> <operator>==</operator> <name><name>node</name><operator>-&gt;</operator><name>from</name></name></expr>)</condition> <block>{<block_content>
          <goto>goto <name>CHARACTER</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>instruction</name></expr>;</return>
      <case>case <expr><literal type="char">'\\'</literal></expr>:</case>
        <expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt>
      <comment type="block">/* fall-through */</comment>
      <default>default:</default>
<label><name>CHARACTER</name>:</label>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>sp</name> <operator>==</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <name><name>sp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">']'</literal></expr>)</condition> <block>{<block_content>
          <for>for <control>( <init>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name><name>sp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>ch</name></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name>cregex_char_class_add</name><argument_list>(<argument><expr><name><name>instruction</name><operator>-&gt;</operator><name>klass</name></name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></for>
          <expr_stmt><expr><name>sp</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>cregex_char_class_add</name><argument_list>(<argument><expr><name><name>instruction</name><operator>-&gt;</operator><name>klass</name></name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>cregex_program_instr_t</name><modifier>*</modifier></type> <name>compile_context</name><parameter_list>(
  <parameter><decl><type><name>regex_compile_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>cregex_node_t</name>   <modifier>*</modifier></type><name>node</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>cregex_program_instr_t</name> <modifier>*</modifier></type><name>bottom</name> <init>= <expr><name><name>context</name><operator>-&gt;</operator><name>pc</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>split</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>jump</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ncaptures</name> <init>= <expr><name><name>context</name><operator>-&gt;</operator><name>ncaptures</name></name></expr></init></decl>, <decl><type ref="prev"/><name>capture</name></decl>;</decl_stmt>

  <switch>switch <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>REGEX_NODE_TYPE_EPSILON</name></expr>:</case>
      <break>break;</break>

    <comment type="block">/* Characters */</comment>
    <case>case <expr><name>REGEX_NODE_TYPE_CHARACTER</name></expr>:</case>
      <macro><name>emit</name><argument_list>(<argument>context</argument>,
           <argument>&amp;(cregex_program_instr_t) { .opcode = REGEX_PROGRAM_OPCODE_CHARACTER</argument>,
                                       <argument>.ch = node-&gt;ch }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
      <break>break;</break>
    <case>case <expr><name>REGEX_NODE_TYPE_ANY_CHARACTER</name></expr>:</case>
      <macro><name>emit</name><argument_list>(<argument>context</argument>, <argument>&amp;(cregex_program_instr_t) {
      .opcode = REGEX_PROGRAM_OPCODE_ANY_CHARACTER
    }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
      <break>break;</break>
    <case>case <expr><name>REGEX_NODE_TYPE_CHARACTER_CLASS</name></expr>:</case>
      <macro><name>compile_char_class</name><argument_list>(
        <argument>node</argument>,
        <argument>emit(context, &amp;(cregex_program_instr_t) {
      .opcode = REGEX_PROGRAM_OPCODE_CHARACTER_CLASS
    })</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
      <break>break;</break>
    <case>case <expr><name>REGEX_NODE_TYPE_CHARACTER_CLASS_NEGATED</name></expr>:</case>
      <macro><name>compile_char_class</name><argument_list>(
        <argument>node</argument>,
        <argument>emit(context,
             &amp;(cregex_program_instr_t) {
      .opcode = REGEX_PROGRAM_OPCODE_CHARACTER_CLASS_NEGATED
    })</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
      <break>break;</break>

    <comment type="block">/* Composites */</comment>
    <case>case <expr><name>REGEX_NODE_TYPE_CONCATENATION</name></expr>:</case>
      <expr_stmt><expr><call><name>compile_context</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>compile_context</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>REGEX_NODE_TYPE_ALTERNATION</name></expr>:</case>
      <expr_stmt><expr><name>split</name> <operator>=</operator> <macro><name>emit</name><argument_list>(<argument>context</argument>, <argument>&amp;(cregex_program_instr_t) {
      .opcode = REGEX_PROGRAM_OPCODE_SPLIT
    }</argument>)</argument_list></macro></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>split</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <call><name>compile_context</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>jump</name> <operator>=</operator> <macro><name>emit</name><argument_list>(<argument>context</argument>, <argument>&amp;(cregex_program_instr_t) {
      .opcode = REGEX_PROGRAM_OPCODE_JUMP
    }</argument>)</argument_list></macro></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>split</name><operator>-&gt;</operator><name>second</name></name> <operator>=</operator> <call><name>compile_context</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>target</name></name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>pc</name></name></expr>;</expr_stmt>
      <break>break;</break>

    <comment type="block">/* Quantifiers */</comment>
    <case>case <expr><name>REGEX_NODE_TYPE_QUANTIFIER</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>cregex_program_instr_t</name> <modifier>*</modifier></type><name>last</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>nmin</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>ncaptures</name></name> <operator>=</operator> <name>ncaptures</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>last</name> <operator>=</operator> <call><name>compile_context</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>quantified</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>nmax</name></name> <operator>&gt;</operator> <name><name>node</name><operator>-&gt;</operator><name>nmin</name></name></expr>)</condition> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>nmax</name></name> <operator>-</operator> <name><name>node</name><operator>-&gt;</operator><name>nmin</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
          <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>ncaptures</name></name> <operator>=</operator> <name>ncaptures</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>split</name>
            <operator>=</operator> <macro><name>emit</name><argument_list>(<argument>context</argument>, <argument>&amp;(cregex_program_instr_t) {
            .opcode = REGEX_PROGRAM_OPCODE_SPLIT
          }</argument>)</argument_list></macro></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>split</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <call><name>compile_context</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>quantified</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>split</name><operator>-&gt;</operator><name>second</name></name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>pc</name></name></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>node</name><operator>-&gt;</operator><name>greedy</name></name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>cregex_program_instr_t</name> <modifier>*</modifier></type><name>swap</name> <init>= <expr><name><name>split</name><operator>-&gt;</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>split</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name><name>split</name><operator>-&gt;</operator><name>second</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>split</name><operator>-&gt;</operator><name>second</name></name> <operator>=</operator> <name>swap</name></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>nmax</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>split</name> <operator>=</operator> <macro><name>emit</name><argument_list>(<argument>context</argument>, <argument>&amp;(cregex_program_instr_t) {
          .opcode = REGEX_PROGRAM_OPCODE_SPLIT
        }</argument>)</argument_list></macro></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>nmin</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>split</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <call><name>compile_context</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>quantified</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>jump</name> <operator>=</operator> <macro><name>emit</name><argument_list>(<argument>context</argument>, <argument>&amp;(cregex_program_instr_t) {
            .opcode = REGEX_PROGRAM_OPCODE_JUMP
          }</argument>)</argument_list></macro></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>split</name><operator>-&gt;</operator><name>second</name></name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>pc</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>target</name></name> <operator>=</operator> <name>split</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name><name>split</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name>last</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>split</name><operator>-&gt;</operator><name>second</name></name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>pc</name></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>node</name><operator>-&gt;</operator><name>greedy</name></name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>cregex_program_instr_t</name> <modifier>*</modifier></type><name>swap</name> <init>= <expr><name><name>split</name><operator>-&gt;</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name><name>split</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name><name>split</name><operator>-&gt;</operator><name>second</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>split</name><operator>-&gt;</operator><name>second</name></name> <operator>=</operator> <name>swap</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>

    <comment type="block">/* Anchors */</comment>
    <case>case <expr><name>REGEX_NODE_TYPE_ANCHOR_BEGIN</name></expr>:</case>
      <macro><name>emit</name><argument_list>(<argument>context</argument>, <argument>&amp;(cregex_program_instr_t) {
      .opcode = REGEX_PROGRAM_OPCODE_ASSERT_BEGIN
    }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
      <break>break;</break>
    <case>case <expr><name>REGEX_NODE_TYPE_ANCHOR_END</name></expr>:</case>
      <macro><name>emit</name><argument_list>(<argument>context</argument>, <argument>&amp;(cregex_program_instr_t) {
      .opcode = REGEX_PROGRAM_OPCODE_ASSERT_END
    }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
      <break>break;</break>

    <comment type="block">/* Captures */</comment>
    <case>case <expr><name>REGEX_NODE_TYPE_CAPTURE</name></expr>:</case>
      <expr_stmt><expr><name>capture</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>ncaptures</name></name><operator>++</operator> <operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>
      <macro><name>emit</name><argument_list>(<argument>context</argument>,
           <argument>&amp;(cregex_program_instr_t) { .opcode = REGEX_PROGRAM_OPCODE_SAVE</argument>,
                                       <argument>.save = capture }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
      <expr_stmt><expr><call><name>compile_context</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>captured</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <macro><name>emit</name><argument_list>(<argument>context</argument>,
           <argument>&amp;(cregex_program_instr_t) { .opcode = REGEX_PROGRAM_OPCODE_SAVE</argument>,
                                       <argument>.save = capture + <literal type="number">1</literal> }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
      <break>break;</break>
  </block_content>}</block></switch>

  <return>return <expr><name>bottom</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Compile a parsed pattern (using a previously allocated program with at least
 * estimate_instructions(root) instructions).
 */</comment>
<function><type><specifier>static</specifier> <name>cregex_program_t</name><modifier>*</modifier></type> <name>compile_node_with_program</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>cregex_node_t</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,
  <parameter><decl><type><name>cregex_program_t</name>    <modifier>*</modifier></type><name>program</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <comment type="block">/* add capture node for entire match */</comment>
  <expr_stmt><expr><name>root</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name>cregex_node_t</name><operator>)</operator> <block>{
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>REGEX_NODE_TYPE_CAPTURE</name></expr>,
    <expr><operator>.</operator><name>captured</name> <operator>=</operator> <operator>(</operator><name>cregex_node_t</name><operator>*</operator><operator>)</operator> <name>root</name></expr>
  }</block></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>cregex_node_t</name></type> <name>naroot</name> <init>= <expr><operator>(</operator><name>cregex_node_t</name><operator>)</operator> <block>{
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>REGEX_NODE_TYPE_CONCATENATION</name></expr>,
    <expr><operator>.</operator><name>left</name>
      <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name>cregex_node_t</name><operator>)</operator> <block>{
      <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>REGEX_NODE_TYPE_QUANTIFIER</name></expr>,
      <expr><operator>.</operator><name>nmin</name> <operator>=</operator> <literal type="number">0</literal></expr>,
      <expr><operator>.</operator><name>nmax</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>,
      <expr><operator>.</operator><name>greedy</name> <operator>=</operator> <literal type="number">0</literal></expr>,
      <expr><operator>.</operator><name>quantified</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator>
        <name>cregex_node_t</name><operator>)</operator> <block>{
        <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>REGEX_NODE_TYPE_ANY_CHARACTER</name></expr>
      }</block></expr>
      }</block></expr>,
    <expr><operator>.</operator><name>right</name> <operator>=</operator> <operator>(</operator><name>cregex_node_t</name><operator>*</operator><operator>)</operator> <name>root</name></expr>
  }</block></expr></init></decl>;</decl_stmt>

  <comment type="block">/* add .*? unless pattern starts with ^ */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>node_is_anchored</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>root</name> <operator>=</operator> <operator>&amp;</operator><name>naroot</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* compile */</comment>
  <decl_stmt><decl><type><name>regex_compile_context</name> <modifier>*</modifier></type><name>context</name>
    <init>= <expr><operator>&amp;</operator><operator>(</operator><name>regex_compile_context</name><operator>)</operator> <block>{
    <expr><operator>.</operator><name>pc</name> <operator>=</operator> <name><name>program</name><operator>-&gt;</operator><name>instructions</name></name></expr>, <expr><operator>.</operator><name>ncaptures</name> <operator>=</operator> <literal type="number">0</literal></expr>
    }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>compile_context</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* emit final match instruction */</comment>
  <macro><name>emit</name><argument_list>(<argument>context</argument>,
       <argument>&amp;(cregex_program_instr_t) { .opcode = REGEX_PROGRAM_OPCODE_MATCH }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

  <comment type="block">/* set total number of instructions */</comment>
  <expr_stmt><expr><name><name>program</name><operator>-&gt;</operator><name>ninstructions</name></name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>pc</name></name> <operator>-</operator> <name><name>program</name><operator>-&gt;</operator><name>instructions</name></name></expr>;</expr_stmt>
  <return>return <expr><name>program</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Upper bound of number of instructions required to compile parsed pattern. */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>estimate_instructions</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cregex_node_t</name> <modifier>*</modifier></type><name>root</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>count_instructions</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call>
         <comment type="block">/* .*? is added unless pattern starts with ^,
          * save instructions are added for beginning and end of match,
          * a final match instruction is added to the end of the program
          */</comment>
         <operator>+</operator> <operator>!</operator><call><name>node_is_anchored</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>cregex_program_t</name><modifier>*</modifier></type> <name>cregex_compile_node</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cregex_node_t</name> <modifier>*</modifier></type><name>root</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>cregex_program_t</name></expr></argument>)</argument_list></sizeof>
                <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>cregex_program_instr_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <call><name>estimate_instructions</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>cregex_program_t</name> <modifier>*</modifier></type><name>program</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>program</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>compile_node_with_program</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>program</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>program</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>program</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Free a compiled program */</comment>
<function><type><name>void</name></type> <name>cregex_compile_free</name><parameter_list>(<parameter><decl><type><name>cregex_program_t</name> <modifier>*</modifier></type><name>program</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>program</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
