<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/ejdb/extra/iowow/src/re/parse.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cregex.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>    <modifier>*</modifier></type><name>sp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>cregex_node_t</name> <modifier>*</modifier></type><name>stack</name></decl>, <modifier>*</modifier><name>output</name>;</decl_stmt>
}</block></struct></type> <name>regex_parse_context</name>;</typedef>

<comment type="block">/* Shunting-yard algorithm
 * See https://en.wikipedia.org/wiki/Shunting-yard_algorithm
 */</comment>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>cregex_node_t</name><modifier>*</modifier></type> <name>push</name><parameter_list>(
  <parameter><decl><type><name>regex_parse_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>cregex_node_t</name> <modifier>*</modifier></type><name>node</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>stack</name></name> <operator>&lt;=</operator> <name><name>context</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name><name>context</name><operator>-&gt;</operator><name>stack</name></name> <operator>=</operator> <operator>*</operator><name>node</name></expr>;</expr_stmt>
  <return>return <expr><name><name>context</name><operator>-&gt;</operator><name>stack</name></name><operator>++</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>cregex_node_t</name><modifier>*</modifier></type> <name>drop</name><parameter_list>(<parameter><decl><type><name>regex_parse_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>--</operator><name><name>context</name><operator>-&gt;</operator><name>stack</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>cregex_node_t</name><modifier>*</modifier></type> <name>consume</name><parameter_list>(<parameter><decl><type><name>regex_parse_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><operator>--</operator><name><name>context</name><operator>-&gt;</operator><name>output</name></name> <operator>=</operator> <operator>*</operator><operator>--</operator><name><name>context</name><operator>-&gt;</operator><name>stack</name></name></expr>;</expr_stmt>
  <return>return <expr><name><name>context</name><operator>-&gt;</operator><name>output</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>cregex_node_t</name><modifier>*</modifier></type> <name>concatenate</name><parameter_list>(
  <parameter><decl><type><name>regex_parse_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>cregex_node_t</name> <modifier>*</modifier></type><name>bottom</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>stack</name></name> <operator>==</operator> <name>bottom</name></expr>)</condition> <block>{<block_content>
    <macro><name>push</name><argument_list>(<argument>context</argument>, <argument>&amp;(cregex_node_t) { .type = REGEX_NODE_TYPE_EPSILON }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <while>while <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>stack</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>bottom</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>cregex_node_t</name> <modifier>*</modifier></type><name>right</name> <init>= <expr><call><name>consume</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>cregex_node_t</name> <modifier>*</modifier></type><name>left</name> <init>= <expr><call><name>consume</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <macro><name>push</name><argument_list>(<argument>context</argument>,
           <argument>&amp;(cregex_node_t) { .type = REGEX_NODE_TYPE_CONCATENATION</argument>,
                              <argument>.left = left</argument>,
                              <argument>.right = right }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
    </block_content>}</block></while>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name><name>context</name><operator>-&gt;</operator><name>stack</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>cregex_node_t</name><modifier>*</modifier></type> <name>parse_char_class</name><parameter_list>(<parameter><decl><type><name>regex_parse_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>cregex_node_type</name></type> <name>type</name>
    <init>= <expr><ternary><condition><expr><operator>(</operator><operator>*</operator><name><name>context</name><operator>-&gt;</operator><name>sp</name></name> <operator>==</operator> <literal type="char">'^'</literal><operator>)</operator></expr>
      ?</condition><then> <expr><operator>(</operator><operator>++</operator><name><name>context</name><operator>-&gt;</operator><name>sp</name></name>, <name>REGEX_NODE_TYPE_CHARACTER_CLASS_NEGATED</name><operator>)</operator></expr>
      </then><else>: <expr><name>REGEX_NODE_TYPE_CHARACTER_CLASS</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>from</name> <init>= <expr><name><name>context</name><operator>-&gt;</operator><name>sp</name></name></expr></init></decl>;</decl_stmt>

  <for>for <control>( <init>;</init> <condition>;</condition> <incr/>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ch</name> <init>= <expr><operator>*</operator><name><name>context</name><operator>-&gt;</operator><name>sp</name></name><operator>++</operator></expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><literal type="char">'\0'</literal></expr>:</case>
        <comment type="block">/* premature end of character class */</comment>
        <return>return <expr><name>NULL</name></expr>;</return>
      <case>case <expr><literal type="char">']'</literal></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>sp</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>==</operator> <name>from</name></expr>)</condition> <block>{<block_content>
          <goto>goto <name>CHARACTER</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <return>return <macro><name>push</name><argument_list>(<argument>context</argument>,
                    <argument>&amp;(cregex_node_t) {
        .type = type</argument>, <argument>.from = from</argument>, <argument>.to = context-&gt;sp - <literal type="number">1</literal>
      }</argument>)</argument_list></macro>;</return>
      <case>case <expr><literal type="char">'\\'</literal></expr>:</case>
        <expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>*</operator><name><name>context</name><operator>-&gt;</operator><name>sp</name></name><operator>++</operator></expr>;</expr_stmt>
      <comment type="block">/* fall-through */</comment>
      <default>default:</default>
<label><name>CHARACTER</name>:</label>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>context</name><operator>-&gt;</operator><name>sp</name></name> <operator>==</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <name><name>context</name><operator>-&gt;</operator><name>sp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">']'</literal></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>sp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <name>ch</name></expr>)</condition> <block>{<block_content>
            <comment type="block">/* empty range in character class */</comment>
            <return>return <expr><name>NULL</name></expr>;</return>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>sp</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>cregex_node_t</name><modifier>*</modifier></type> <name>parse_interval</name><parameter_list>(<parameter><decl><type><name>regex_parse_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>from</name> <init>= <expr><name><name>context</name><operator>-&gt;</operator><name>sp</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nmin</name></decl>, <decl><type ref="prev"/><name>nmax</name></decl>;</decl_stmt>

  <for>for <control>(<init><expr><name>nmin</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>*</operator><name><name>context</name><operator>-&gt;</operator><name>sp</name></name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>context</name><operator>-&gt;</operator><name>sp</name></name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>;</condition> <incr><expr><operator>++</operator><name><name>context</name><operator>-&gt;</operator><name>sp</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name>nmin</name> <operator>=</operator> <operator>(</operator><name>nmin</name> <operator>*</operator> <literal type="number">10</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>*</operator><name><name>context</name><operator>-&gt;</operator><name>sp</name></name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

  <if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>context</name><operator>-&gt;</operator><name>sp</name></name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>++</operator><name><name>context</name><operator>-&gt;</operator><name>sp</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>from</name> <operator>!=</operator> <literal type="char">','</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>context</name><operator>-&gt;</operator><name>sp</name></name> <operator>==</operator> <literal type="char">'}'</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>nmax</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <for>for <control>(<init><expr><name>nmax</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>*</operator><name><name>context</name><operator>-&gt;</operator><name>sp</name></name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>context</name><operator>-&gt;</operator><name>sp</name></name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>;</condition>
           <incr><expr><operator>++</operator><name><name>context</name><operator>-&gt;</operator><name>sp</name></name></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name>nmax</name> <operator>=</operator> <operator>(</operator><name>nmax</name> <operator>*</operator> <literal type="number">10</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>*</operator><name><name>context</name><operator>-&gt;</operator><name>sp</name></name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
      <if_stmt><if>if <condition>(  <expr><operator>*</operator><operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>sp</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">','</literal> <operator>||</operator> <operator>*</operator><name><name>context</name><operator>-&gt;</operator><name>sp</name></name> <operator>!=</operator> <literal type="char">'}'</literal>
         <operator>||</operator> <name>nmax</name> <operator>&lt;</operator> <name>nmin</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>sp</name></name> <operator>=</operator> <name>from</name></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>from</name> <operator>!=</operator> <literal type="char">'}'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>context</name><operator>-&gt;</operator><name>sp</name></name> <operator>==</operator> <literal type="char">'}'</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>nmax</name> <operator>=</operator> <name>nmin</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>sp</name></name> <operator>=</operator> <name>from</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><operator>++</operator><name><name>context</name><operator>-&gt;</operator><name>sp</name></name></expr>;</expr_stmt>
  <return>return <macro><name>push</name><argument_list>(<argument>context</argument>,
              <argument>&amp;(cregex_node_t) {
    .type = REGEX_NODE_TYPE_QUANTIFIER</argument>,
    <argument>.nmin = nmin</argument>,
    <argument>.nmax = nmax</argument>,
    <argument>.greedy = (*context-&gt;sp == <literal type="char">'?'</literal>) ? (++context-&gt;sp, <literal type="number">0</literal>) : <literal type="number">1</literal></argument>,
    <argument>.quantified = consume(context)
  }</argument>)</argument_list></macro>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>cregex_node_t</name><modifier>*</modifier></type> <name>parse_context</name><parameter_list>(<parameter><decl><type><name>regex_parse_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>cregex_node_t</name> <modifier>*</modifier></type><name>bottom</name> <init>= <expr><name><name>context</name><operator>-&gt;</operator><name>stack</name></name></expr></init></decl>;</decl_stmt>

  <for>for <control>( <init>;</init> <condition>;</condition> <incr/>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ch</name> <init>= <expr><operator>*</operator><name><name>context</name><operator>-&gt;</operator><name>sp</name></name><operator>++</operator></expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>
      <comment type="block">/* Characters */</comment>
      <case>case <expr><literal type="char">'\\'</literal></expr>:</case>
        <expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>*</operator><name><name>context</name><operator>-&gt;</operator><name>sp</name></name><operator>++</operator></expr>;</expr_stmt>
      <comment type="block">/* fall-through */</comment>
      <default>default:</default>
<label><name>CHARACTER</name>:</label>
        <macro><name>push</name><argument_list>(<argument>context</argument>,
             <argument>&amp;(cregex_node_t) { .type = REGEX_NODE_TYPE_CHARACTER</argument>, <argument>.ch = ch }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <break>break;</break>
      <case>case <expr><literal type="char">'.'</literal></expr>:</case>
        <macro><name>push</name><argument_list>(<argument>context</argument>,
             <argument>&amp;(cregex_node_t) { .type = REGEX_NODE_TYPE_ANY_CHARACTER }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <break>break;</break>
      <case>case <expr><literal type="char">'['</literal></expr>:</case>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_char_class</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>

      <comment type="block">/* Composites */</comment>
      <case>case <expr><literal type="char">'|'</literal></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>cregex_node_t</name> <modifier>*</modifier></type><name>left</name> <init>= <expr><call><name>concatenate</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>bottom</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>right</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>right</name> <operator>=</operator> <call><name>parse_context</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(  <expr><name><name>left</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>REGEX_NODE_TYPE_EPSILON</name>
           <operator>&amp;&amp;</operator> <name><name>right</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name><name>left</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>drop</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>left</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>REGEX_NODE_TYPE_EPSILON</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>right</name> <operator>=</operator> <call><name>consume</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>drop</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <macro><name>push</name><argument_list>(<argument>context</argument>,
               <argument>&amp;(cregex_node_t) { .type = REGEX_NODE_TYPE_QUANTIFIER</argument>,
                                  <argument>.nmin = <literal type="number">0</literal></argument>,
                                  <argument>.nmax = <literal type="number">1</literal></argument>,
                                  <argument>.greedy = <literal type="number">1</literal></argument>,
                                  <argument>.quantified = right }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>right</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>REGEX_NODE_TYPE_EPSILON</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>drop</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>left</name> <operator>=</operator> <call><name>consume</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <macro><name>push</name><argument_list>(<argument>context</argument>,
               <argument>&amp;(cregex_node_t) { .type = REGEX_NODE_TYPE_QUANTIFIER</argument>,
                                  <argument>.nmin = <literal type="number">0</literal></argument>,
                                  <argument>.nmax = <literal type="number">1</literal></argument>,
                                  <argument>.greedy = <literal type="number">1</literal></argument>,
                                  <argument>.quantified = left }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>right</name> <operator>=</operator> <call><name>consume</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>left</name> <operator>=</operator> <call><name>consume</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <macro><name>push</name><argument_list>(<argument>context</argument>,
               <argument>&amp;(cregex_node_t) { .type = REGEX_NODE_TYPE_ALTERNATION</argument>,
                                  <argument>.left = left</argument>,
                                  <argument>.right = right }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><name>bottom</name></expr>;</return>
      </block_content>}</block>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUANTIFIER</name><parameter_list>(<parameter><type><name>ch</name></type></parameter>, <parameter><type><name>min</name></type></parameter>, <parameter><type><name>max</name></type></parameter>)</parameter_list></cpp:macro>                                           \
    <cpp:value>case ch:                                                               \
      if (context-&gt;stack == bottom)                                      \
      goto CHARACTER;                                                \
      push(context,                                                      \
           &amp;(cregex_node_t) {                                             \
    .type = REGEX_NODE_TYPE_QUANTIFIER,                       \
    .nmin = min,                                              \
    .nmax = max,                                              \
    .greedy = (*context-&gt;sp == '?') ? (++context-&gt;sp, 0) : 1, \
    .quantified = consume(context) \
  } \
           );                         \
      break</cpp:value></cpp:define>

        <comment type="block">/* clang-format off */</comment>
        <comment type="block">/* Quantifiers */</comment>
        <expr_stmt><expr><call><name>QUANTIFIER</name><argument_list>(<argument><expr><literal type="char">'?'</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QUANTIFIER</name><argument_list>(<argument><expr><literal type="char">'*'</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QUANTIFIER</name><argument_list>(<argument><expr><literal type="char">'+'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* clang-format on */</comment>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>QUANTIFIER</name></cpp:undef>

      <case>case <expr><literal type="char">'{'</literal></expr>:</case>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>stack</name></name> <operator>==</operator> <name>bottom</name><operator>)</operator> <operator>||</operator> <operator>!</operator><call><name>parse_interval</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <goto>goto <name>CHARACTER</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>

      <comment type="block">/* Anchors */</comment>
      <case>case <expr><literal type="char">'^'</literal></expr>:</case>
        <macro><name>push</name><argument_list>(<argument>context</argument>,
             <argument>&amp;(cregex_node_t) { .type = REGEX_NODE_TYPE_ANCHOR_BEGIN }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <break>break;</break>
      <case>case <expr><literal type="char">'$'</literal></expr>:</case>
        <macro><name>push</name><argument_list>(<argument>context</argument>, <argument>&amp;(cregex_node_t) { .type = REGEX_NODE_TYPE_ANCHOR_END }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <break>break;</break>

      <comment type="block">/* Captures */</comment>
      <case>case <expr><literal type="char">'('</literal></expr>:</case>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_context</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <macro><name>push</name><argument_list>(<argument>context</argument>, <argument>&amp;(cregex_node_t) { .type = REGEX_NODE_TYPE_CAPTURE</argument>,
                                         <argument>.captured = consume(context) }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <break>break;</break>
      <case>case <expr><literal type="char">')'</literal></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name>depth</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <return>return <expr><call><name>concatenate</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>bottom</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <comment type="block">/* unmatched close parenthesis */</comment>
        <return>return <expr><name>NULL</name></expr>;</return>

      <comment type="block">/* End of string */</comment>
      <case>case <expr><literal type="char">'\0'</literal></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name>depth</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <return>return <expr><call><name>concatenate</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>bottom</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <comment type="block">/* unmatched open parenthesis */</comment>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></switch>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>estimate_nodes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pattern</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>strlen</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Parse a pattern (using a previously allocated buffer of at least
 * estimate_nodes(pattern) nodes).
 */</comment>
<function><type><specifier>static</specifier> <name>cregex_node_t</name><modifier>*</modifier></type> <name>parse_with_nodes</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>char</name>    <modifier>*</modifier></type><name>pattern</name></decl></parameter>,
  <parameter><decl><type><name>cregex_node_t</name> <modifier>*</modifier></type><name>nodes</name></decl></parameter>
  )</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>regex_parse_context</name> <modifier>*</modifier></type><name>context</name>
    <init>= <expr><operator>&amp;</operator><operator>(</operator><name>regex_parse_context</name><operator>)</operator> <block>{
    <expr><operator>.</operator><name>sp</name> <operator>=</operator> <name>pattern</name></expr>,
    <expr><operator>.</operator><name>stack</name> <operator>=</operator> <name>nodes</name></expr>,
    <expr><operator>.</operator><name>output</name> <operator>=</operator> <name>nodes</name> <operator>+</operator> <macro><name>estimate_nodes</name><argument_list>(<argument>pattern</argument>)</argument_list></macro></expr>
    }</block></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>parse_context</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>cregex_node_t</name><modifier>*</modifier></type> <name>cregex_parse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pattern</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>cregex_node_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <call><name>estimate_nodes</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>cregex_node_t</name> <modifier>*</modifier></type><name>nodes</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>nodes</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_with_nodes</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>nodes</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>nodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>nodes</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cregex_parse_free</name><parameter_list>(<parameter><decl><type><name>cregex_node_t</name> <modifier>*</modifier></type><name>root</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
