<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/rlite/src/flock_posix.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/file.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/rlite.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>rl_flock</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>fileno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>locktype</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>RLITE_FLOCK_SH</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>locktype</name> <operator>=</operator> <name>LOCK_SH</name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>RLITE_FLOCK_EX</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>locktype</name> <operator>=</operator> <name>LOCK_EX</name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>RLITE_FLOCK_UN</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>locktype</name> <operator>=</operator> <name>LOCK_UN</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<return>return <expr><name>RL_UNEXPECTED</name></expr>;</return>
	</block_content>}</block></else></if_stmt>
	<comment type="line">// all documented error codes for flock do not apply</comment>
	<comment type="line">// EWOULDBLOCK because we are not using LOCK_NB</comment>
	<comment type="line">// ENOTSUP, EBADF and EINVAL because we received the fileno from a FILE*</comment>
	<if_stmt><if>if <condition>(<expr><call><name>flock</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>locktype</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>RL_OK</name></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<return>return <expr><name>RL_UNEXPECTED</name></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_is_flocked</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>, <decl><type ref="prev"/><name>oflags</name> <init>= <expr><name>O_NONBLOCK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>locktype</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>RLITE_FLOCK_SH</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>oflags</name> <operator>|=</operator> <name>O_RDONLY</name></expr>;</expr_stmt>
		<comment type="line">// we want to know if someone has a shared lock</comment>
		<comment type="line">// if we can get an exclusive, we know they do not</comment>
		<comment type="line">// if we cannot, we will try to get a shared to discard someone</comment>
		<comment type="line">// having an exclusive one</comment>
		<expr_stmt><expr><name>locktype</name> <operator>=</operator> <name>LOCK_EX</name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>RLITE_FLOCK_EX</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>oflags</name> <operator>|=</operator> <name>O_WRONLY</name></expr>;</expr_stmt>
		<comment type="line">// we'll get a shared lock iff nobody has an exclusive lock</comment>
		<expr_stmt><expr><name>locktype</name> <operator>=</operator> <name>LOCK_SH</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<return>return <expr><name>RL_UNEXPECTED</name></expr>;</return>
	</block_content>}</block></else></if_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>open</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>oflags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<comment type="line">// if the file does not exist, the lock is not found</comment>
		<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOENT</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>EACCES</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>RL_NOT_FOUND</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><name>RL_UNEXPECTED</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>flock</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>locktype</name> <operator>|</operator> <name>LOCK_NB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_NOT_FOUND</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EWOULDBLOCK</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>RLITE_FLOCK_SH</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>flock</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>LOCK_SH</name> <operator>|</operator> <name>LOCK_NB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<comment type="line">// can get a shared lock but not an exclusive</comment>
				<comment type="line">// thus someone has a shared lock</comment>
				<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_FOUND</name></expr>;</expr_stmt>
				<goto>goto <name>cleanup</name>;</goto>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_NOT_FOUND</name></expr>;</expr_stmt>
				<goto>goto <name>cleanup</name>;</goto>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_FOUND</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_UNEXPECTED</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>
</unit>
