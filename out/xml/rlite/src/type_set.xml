<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/rlite/src/type_set.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/rlite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/page_multi_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/type_set.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/page_btree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/util.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rl_set_create</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>btree_page</name></decl></parameter>, <parameter><decl><type><name>rl_btree</name> <modifier>*</modifier><modifier>*</modifier></type><name>btree</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>set</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_btree_create</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>set</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_btree_type_hash_sha1_long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_write</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_data_type_btree_hash_sha1_long</name></expr></argument>, <argument><expr><name>btree_page</name></expr></argument>, <argument><expr><name>set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>btree</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>btree</name> <operator>=</operator> <name>set</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rl_set_read</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>set_page_number</name></decl></parameter>, <parameter><decl><type><name>rl_btree</name> <modifier>*</modifier><modifier>*</modifier></type><name>btree</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_data_type_btree_hash_sha1_long</name></expr></argument>, <argument><expr><name>set_page_number</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_btree_type_hash_sha1_long</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>btree</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>btree</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_set_get_objects</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>_set_page_number</name></decl></parameter>, <parameter><decl><type><name>rl_btree</name> <modifier>*</modifier><modifier>*</modifier></type><name>btree</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>update_version</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>create</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name></type> <name>set_page_number</name></decl>, <decl><type ref="prev"/><name>version</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>expires</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>create</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_key_get_or_create</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>RL_TYPE_SET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>set_page_number</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_FOUND</name> <operator>&amp;&amp;</operator> <name>retval</name> <operator>!=</operator> <name>RL_NOT_FOUND</name></expr>)</condition> <block>{<block_content>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>retval</name> <operator>==</operator> <name>RL_NOT_FOUND</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_set_create</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>set_page_number</name></expr></argument>, <argument><expr><name>btree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_set_read</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>set_page_number</name></expr></argument>, <argument><expr><name>btree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>type</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_key_get</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>set_page_number</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_FOUND</name></expr>)</condition> <block>{<block_content>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>RL_TYPE_SET</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_WRONG_TYPE</name></expr>;</expr_stmt>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_set_read</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>set_page_number</name></expr></argument>, <argument><expr><name>btree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>update_version</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_key_set</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>RL_TYPE_SET</name></expr></argument>, <argument><expr><name>set_page_number</name></expr></argument>, <argument><expr><name>expires</name></expr></argument>, <argument><expr><name>version</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<label><name>cleanup</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>_set_page_number</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>_set_page_number</name> <operator>=</operator> <name>set_page_number</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>rl_sadd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>memberc</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>members</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>memberslen</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>added</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>set_page_number</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>set</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>digest</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <modifier>*</modifier></type><name>member</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_set_get_objects</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>set_page_number</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>set</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>memberc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>sha1</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name><name>members</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>memberslen</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_btree_find_score</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>set</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>RL_NOT_FOUND</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>member</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>member</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_multi_string_set</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>member</name></expr></argument>, <argument><expr><name><name>members</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>memberslen</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_btree_add_element</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>set</name></expr></argument>, <argument><expr><name>set_page_number</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><name>member</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>retval</name> <operator>==</operator> <name>RL_FOUND</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>digest</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>
	<if_stmt><if>if <condition>(<expr><name>added</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>added</name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>member</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_srem</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>membersc</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>members</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>memberslen</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>delcount</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>set_page_number</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>set</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>member</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>deleted</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>keydeleted</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_set_get_objects</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>set_page_number</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>set</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>membersc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>sha1</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name><name>members</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>memberslen</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_btree_find_score</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>set</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>RL_FOUND</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>deleted</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>member</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name>tmp</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>rl_multi_string_delete</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>member</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_btree_remove_element</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>set</name></expr></argument>, <argument><expr><name>set_page_number</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name> <operator>&amp;&amp;</operator> <name>retval</name> <operator>!=</operator> <name>RL_DELETED</name></expr>)</condition> <block>{<block_content>
				<goto>goto <name>cleanup</name>;</goto>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>RL_DELETED</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>keydeleted</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<if_stmt><if>if <condition>(<expr><name>delcount</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>delcount</name> <operator>=</operator> <name>deleted</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>keydeleted</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_key_delete</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_sismember</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>member</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>memberlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>set_page_number</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>set</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_set_get_objects</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>set_page_number</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>set</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>sha1</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>member</name></expr></argument>, <argument><expr><name>memberlen</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_btree_find_score</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>set</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_scard</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>card</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>set_page_number</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>set</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_set_get_objects</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>set_page_number</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>set</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>card</name> <operator>=</operator> <name><name>set</name><operator>-&gt;</operator><name>number_of_elements</name></name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_smove</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>sourcelen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>destination</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>destinationlen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>member</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>memberlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>source_hash</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>target_hash</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>target_page_number</name></decl>, <decl><type ref="prev"/><name>source_page_number</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>member_page_number</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>digest</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<comment type="line">// make sure the target key is a set or does not exist</comment>
	<expr_stmt><expr><call><name>RL_CALL2</name><argument_list>(<argument><expr><name>rl_set_get_objects</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>RL_NOT_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>destination</name></expr></argument>, <argument><expr><name>destinationlen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>sha1</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>member</name></expr></argument>, <argument><expr><name>memberlen</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_set_get_objects</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>sourcelen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>source_page_number</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>source_hash</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_btree_find_score</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>source_hash</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>RL_FOUND</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>rl_multi_string_delete</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_btree_remove_element</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>source_hash</name></expr></argument>, <argument><expr><name>source_page_number</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>RL_DELETED</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_key_delete</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>sourcelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_set_get_objects</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>destination</name></expr></argument>, <argument><expr><name>destinationlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>target_page_number</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>target_hash</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>RL_MALLOC</name><argument_list>(<argument>member_page_number</argument>, <argument>sizeof(*member_page_number)</argument>)</argument_list></macro>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_multi_string_set</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>member_page_number</name></expr></argument>, <argument><expr><name>member</name></expr></argument>, <argument><expr><name>memberlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_btree_add_element</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>target_hash</name></expr></argument>, <argument><expr><name>target_page_number</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><name>member_page_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_set_iterator_next</name><parameter_list>(<parameter><decl><type><name>rl_set_iterator</name> <modifier>*</modifier></type><name>iterator</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>_page</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>member</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>memberlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>page</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><call><name>rl_btree_iterator_next</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>page</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name>tmp</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>_page</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>_page</name> <operator>=</operator> <name>page</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_multi_string_get</name><argument_list>(<argument><expr><name><name>iterator</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>page</name></expr></argument>, <argument><expr><name>member</name></expr></argument>, <argument><expr><name>memberlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>rl_set_iterator_destroy</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_set_iterator_destroy</name><parameter_list>(<parameter><decl><type><name>rl_set_iterator</name> <modifier>*</modifier></type><name>iterator</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>rl_btree_iterator_destroy</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_smembers</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>rl_set_iterator</name> <modifier>*</modifier><modifier>*</modifier></type><name>iterator</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>keylen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>set</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_set_get_objects</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>set</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_btree_iterator_create</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>set</name></expr></argument>, <argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>contains</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>elements</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>element</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>element</name> <operator>==</operator> <name><name>elements</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
			<return>return <expr><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_srandmembers</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>repeat</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>memberc</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>_members</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier><modifier>*</modifier></type><name>_memberslen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <modifier>*</modifier></type><name>member</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <modifier>*</modifier></type><name>used_members</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>set</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>members</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <modifier>*</modifier></type><name>memberslen</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_set_get_objects</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>set</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>repeat</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>memberc</name> <operator>&gt;</operator> <name><name>set</name><operator>-&gt;</operator><name>number_of_elements</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>memberc</name> <operator>=</operator> <name><name>set</name><operator>-&gt;</operator><name>number_of_elements</name></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>used_members</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>*</operator><name>memberc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>members</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <operator>*</operator> <operator>*</operator><name>memberc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>memberslen</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>*</operator><name>memberc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>*</operator><name>memberc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_btree_random_element</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>set</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>member</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>repeat</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>contains</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>used_members</name></expr></argument>, <argument><expr><operator>*</operator><name>member</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if>
			<else>else <block>{<block_content>
				<expr_stmt><expr><name><name>used_members</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>member</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_multi_string_get</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>*</operator><name>member</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>members</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>memberslen</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><operator>*</operator><name>_members</name> <operator>=</operator> <name>members</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>_memberslen</name> <operator>=</operator> <name>memberslen</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>members</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>memberslen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>used_members</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_spop</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>member</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>memberlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>set_page_number</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>member_page</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>digest</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>set</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_set_get_objects</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>set_page_number</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>set</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_btree_random_element</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>set</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>digest</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>member_page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_multi_string_get</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>*</operator><name>member_page</name></expr></argument>, <argument><expr><name>member</name></expr></argument>, <argument><expr><name>memberlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_multi_string_delete</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>*</operator><name>member_page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_btree_remove_element</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>set</name></expr></argument>, <argument><expr><name>set_page_number</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>RL_DELETED</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_key_delete</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_sdiff</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keyc</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>keys</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>keyslen</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>_membersc</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>_members</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier><modifier>*</modifier></type><name>_memberslen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>, <decl><type ref="prev"/><name>found</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>source</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_btree</name> <modifier>*</modifier><modifier>*</modifier></type><name>sets</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_btree_iterator</name> <modifier>*</modifier></type><name>iterator</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>members</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>digest</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <modifier>*</modifier></type><name>memberslen</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>member_page</name></decl>, <decl><type ref="prev"/><name>setsc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>membersc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>keyc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_NOT_FOUND</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_set_get_objects</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>keyslen</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>source</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>members</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <operator>*</operator> <name><name>source</name><operator>-&gt;</operator><name>number_of_elements</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>memberslen</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>source</name><operator>-&gt;</operator><name>number_of_elements</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>sets</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rl_btree</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>keyc</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>keyc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_set_get_objects</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>keyslen</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sets</name><index>[<expr><name>setsc</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>setsc</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_NOT_FOUND</name></expr>)</condition> <block>{<block_content>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_btree_iterator_create</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>retval</name> <operator>=</operator> <call><name>rl_btree_iterator_next</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>digest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>setsc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_btree_find_score</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>sets</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>RL_FOUND</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>member_page</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name>tmp</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_multi_string_get</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>member_page</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>members</name><index>[<expr><name>membersc</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>memberslen</name><index>[<expr><name>membersc</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>membersc</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><name>iterator</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_END</name></expr>)</condition> <block>{<block_content>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>membersc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_NOT_FOUND</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>membersc</name> <operator>==</operator> <name><name>source</name><operator>-&gt;</operator><name>number_of_elements</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>_members</name> <operator>=</operator> <name>members</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>_memberslen</name> <operator>=</operator> <name>memberslen</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>_members</name> <operator>=</operator> <call><name>rl_realloc</name><argument_list>(<argument><expr><name>members</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <operator>*</operator> <name>membersc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>_members</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OUT_OF_MEMORY</name></expr>;</expr_stmt>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><operator>*</operator><name>_memberslen</name> <operator>=</operator> <call><name>rl_realloc</name><argument_list>(<argument><expr><name>memberslen</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>membersc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>_memberslen</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OUT_OF_MEMORY</name></expr>;</expr_stmt>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<expr_stmt><expr><operator>*</operator><name>_membersc</name> <operator>=</operator> <name>membersc</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>members</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>memberslen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>sets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_sdiffstore</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>targetlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keyc</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>keys</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>keyslen</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>added</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>members</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <modifier>*</modifier></type><name>memberslen</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>membersc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_key_delete_with_value</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>targetlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_NOT_FOUND</name> <operator>&amp;&amp;</operator> <name>retval</name> <operator>!=</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>added</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<comment type="line">// this might be done more efficiently since we don't really need to have all members in memory</comment>
	<comment type="line">// at the same time, but this is so easy to do...</comment>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_sdiff</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>keyc</name></expr></argument>, <argument><expr><name>keys</name></expr></argument>, <argument><expr><name>keyslen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>membersc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>members</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>memberslen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>membersc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_sadd</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>targetlen</name></expr></argument>, <argument><expr><name>membersc</name></expr></argument>, <argument><expr><name>members</name></expr></argument>, <argument><expr><name>memberslen</name></expr></argument>, <argument><expr><name>added</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<label><name>cleanup</name>:</label>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>membersc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>members</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>members</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>memberslen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_sinter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keyc</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>keys</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>keyslen</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>_membersc</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>_members</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier><modifier>*</modifier></type><name>_memberslen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>, <decl><type ref="prev"/><name>found</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_btree</name> <modifier>*</modifier><modifier>*</modifier></type><name>sets</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_btree_iterator</name> <modifier>*</modifier></type><name>iterator</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>members</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>digest</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <modifier>*</modifier></type><name>memberslen</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>member_page</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>membersc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>maxmemberc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>keyc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_NOT_FOUND</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>sets</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rl_btree</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>keyc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>keyc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_set_get_objects</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>keyslen</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sets</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>sets</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>number_of_elements</name> <operator>&lt;</operator> <name>maxmemberc</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>maxmemberc</name> <operator>=</operator> <name><name>sets</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>number_of_elements</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>sets</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>sets</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>sets</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>sets</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>maxmemberc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_NOT_FOUND</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>members</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <operator>*</operator> <name>maxmemberc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>memberslen</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>maxmemberc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_btree_iterator_create</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>sets</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>retval</name> <operator>=</operator> <call><name>rl_btree_iterator_next</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>digest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>keyc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_btree_find_score</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>sets</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>RL_NOT_FOUND</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
		<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>member_page</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name>tmp</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_multi_string_get</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>member_page</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>members</name><index>[<expr><name>membersc</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>memberslen</name><index>[<expr><name>membersc</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>membersc</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><name>iterator</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_END</name></expr>)</condition> <block>{<block_content>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>_membersc</name> <operator>=</operator> <name>membersc</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>membersc</name> <operator>==</operator> <name>maxmemberc</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>_members</name> <operator>=</operator> <name>members</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>_memberslen</name> <operator>=</operator> <name>memberslen</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>_members</name> <operator>=</operator> <call><name>rl_realloc</name><argument_list>(<argument><expr><name>members</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <operator>*</operator> <name>membersc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>_members</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OUT_OF_MEMORY</name></expr>;</expr_stmt>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><operator>*</operator><name>_memberslen</name> <operator>=</operator> <call><name>rl_realloc</name><argument_list>(<argument><expr><name>memberslen</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>membersc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>_memberslen</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OUT_OF_MEMORY</name></expr>;</expr_stmt>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>_membersc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>members</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>memberslen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>sets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_sinterstore</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>targetlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keyc</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>keys</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>keyslen</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>added</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>members</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <modifier>*</modifier></type><name>memberslen</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>membersc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_key_delete_with_value</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>targetlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_NOT_FOUND</name> <operator>&amp;&amp;</operator> <name>retval</name> <operator>!=</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>added</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<comment type="line">// this might be done more efficiently since we don't really need to have all members in memory</comment>
	<comment type="line">// at the same time, but this is so easy to do...</comment>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_sinter</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>keyc</name></expr></argument>, <argument><expr><name>keys</name></expr></argument>, <argument><expr><name>keyslen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>membersc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>members</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>memberslen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>membersc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_sadd</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>targetlen</name></expr></argument>, <argument><expr><name>membersc</name></expr></argument>, <argument><expr><name>members</name></expr></argument>, <argument><expr><name>memberslen</name></expr></argument>, <argument><expr><name>added</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<label><name>cleanup</name>:</label>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>membersc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>members</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>members</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>memberslen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_sunion</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keyc</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>keys</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>keyslen</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>_membersc</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>_members</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier><modifier>*</modifier></type><name>_memberslen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>, <decl><type ref="prev"/><name>found</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_btree</name> <modifier>*</modifier><modifier>*</modifier></type><name>sets</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_btree_iterator</name> <modifier>*</modifier></type><name>iterator</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>members</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <modifier>*</modifier></type><name>memberslen</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>member_page</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>membersc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>maxmemberc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>keyc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_NOT_FOUND</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>sets</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rl_btree</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>keyc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>keyc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_set_get_objects</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>keyslen</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sets</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>RL_NOT_FOUND</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>sets</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><name>maxmemberc</name> <operator>+=</operator> <name><name>sets</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>number_of_elements</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>maxmemberc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>_membersc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_NOT_FOUND</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>members</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <operator>*</operator> <name>maxmemberc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>memberslen</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>maxmemberc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>keyc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sets</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_btree_iterator_create</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>sets</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<while>while <condition>(<expr><operator>(</operator><name>retval</name> <operator>=</operator> <call><name>rl_btree_iterator_next</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>member_page</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name>tmp</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_multi_string_get</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>member_page</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>members</name><index>[<expr><name>membersc</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>memberslen</name><index>[<expr><name>membersc</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>membersc</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>memberslen</name><index>[<expr><name>membersc</name></expr>]</index></name> <operator>==</operator> <name><name>memberslen</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name><name>members</name><index>[<expr><name>membersc</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>members</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>memberslen</name><index>[<expr><name>membersc</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>
			<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>members</name><index>[<expr><name>membersc</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else <block>{<block_content>
				<expr_stmt><expr><name>membersc</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></while>
		<expr_stmt><expr><name>iterator</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_END</name></expr>)</condition> <block>{<block_content>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><operator>*</operator><name>_membersc</name> <operator>=</operator> <name>membersc</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>membersc</name> <operator>==</operator> <name>maxmemberc</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>_members</name> <operator>=</operator> <name>members</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>_memberslen</name> <operator>=</operator> <name>memberslen</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>_members</name> <operator>=</operator> <call><name>rl_realloc</name><argument_list>(<argument><expr><name>members</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <operator>*</operator> <name>membersc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>_members</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OUT_OF_MEMORY</name></expr>;</expr_stmt>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><operator>*</operator><name>_memberslen</name> <operator>=</operator> <call><name>rl_realloc</name><argument_list>(<argument><expr><name>memberslen</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>membersc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>_memberslen</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OUT_OF_MEMORY</name></expr>;</expr_stmt>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>members</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>memberslen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>sets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_sunionstore</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>targetlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keyc</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>keys</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>keyslen</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>added</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>target_set</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>set</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_btree_iterator</name> <modifier>*</modifier></type><name>iterator</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>digest</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>member</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>memberlen</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>member_page</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>target_page_number</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <modifier>*</modifier></type><name>member_object</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>added</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_key_delete_with_value</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>targetlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_NOT_FOUND</name> <operator>&amp;&amp;</operator> <name>retval</name> <operator>!=</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>keyc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_NOT_FOUND</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_set_get_objects</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>targetlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>target_page_number</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>target_set</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>keyc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_set_get_objects</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>keyslen</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>set</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>RL_NOT_FOUND</name></expr>)</condition> <block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_btree_iterator_create</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>set</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<while>while <condition>(<expr><operator>(</operator><name>retval</name> <operator>=</operator> <call><name>rl_btree_iterator_next</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>digest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>member_page</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name>tmp</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_btree_find_score</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>target_set</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>RL_NOT_FOUND</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_multi_string_get</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>member_page</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>member</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>memberlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>member_object</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>member_object</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_multi_string_set</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>member_object</name></expr></argument>, <argument><expr><name>member</name></expr></argument>, <argument><expr><name>memberlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_btree_add_element</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>target_set</name></expr></argument>, <argument><expr><name>target_page_number</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><name>member_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
					<goto>goto <name>cleanup</name>;</goto>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>member</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>retval</name> <operator>==</operator> <name>RL_FOUND</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>digest</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else <block>{<block_content>
				<goto>goto <name>cleanup</name>;</goto>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></while>
		<expr_stmt><expr><name>iterator</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_END</name></expr>)</condition> <block>{<block_content>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_key_delete_with_value</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>targetlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>added</name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_set_pages</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>page</name></decl></parameter>, <parameter><decl><type><name>short</name> <modifier>*</modifier></type><name>pages</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>btree</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_btree_iterator</name> <modifier>*</modifier></type><name>iterator</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>member</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_data_type_btree_hash_sha1_long</name></expr></argument>, <argument><expr><name>page</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_btree_type_hash_sha1_long</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>btree</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_btree_pages</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>btree</name></expr></argument>, <argument><expr><name>pages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_btree_iterator_create</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>btree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>retval</name> <operator>=</operator> <call><name>rl_btree_iterator_next</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>member</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name>tmp</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pages</name><index>[<expr><name>member</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_multi_string_pages</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>member</name></expr></argument>, <argument><expr><name>pages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><name>iterator</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_END</name></expr>)</condition> <block>{<block_content>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>iterator</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>rl_btree_iterator_destroy</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_set_delete</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>value_page</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>hash</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_btree_iterator</name> <modifier>*</modifier></type><name>iterator</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>member</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_data_type_btree_hash_sha1_long</name></expr></argument>, <argument><expr><name>value_page</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_btree_type_hash_sha1_long</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>hash</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>hash</name><operator>-&gt;</operator><name>number_of_elements</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL2</name><argument_list>(<argument><expr><name>rl_btree_iterator_create</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>RL_NOT_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
			<while>while <condition>(<expr><operator>(</operator><name>retval</name> <operator>=</operator> <call><name>rl_btree_iterator_next</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>member</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name>tmp</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>rl_multi_string_delete</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>member</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></while>
			<expr_stmt><expr><name>iterator</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_END</name></expr>)</condition> <block>{<block_content>
				<goto>goto <name>cleanup</name>;</goto>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_btree_delete</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_delete</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>value_page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>
</unit>
