<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/rlite/src/type_zset.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/rlite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/page_key.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/page_multi_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/type_zset.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/page_btree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/page_list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/page_skiplist.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/util.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rl_zset_create</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>levels_page_number</name></decl></parameter>, <parameter><decl><type><name>rl_btree</name> <modifier>*</modifier><modifier>*</modifier></type><name>btree</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>btree_page</name></decl></parameter>, <parameter><decl><type><name>rl_skiplist</name> <modifier>*</modifier><modifier>*</modifier></type><name>_skiplist</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>skiplist_page</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>rl_list</name> <modifier>*</modifier></type><name>levels</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>scores</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_skiplist</name> <modifier>*</modifier></type><name>skiplist</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>scores_page_number</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>skiplist_page_number</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_btree_create</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scores</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_btree_type_hash_sha1_double</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>scores_page_number</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>next_empty_page</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_write</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_data_type_btree_hash_sha1_double</name></expr></argument>, <argument><expr><name>scores_page_number</name></expr></argument>, <argument><expr><name>scores</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_skiplist_create</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skiplist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>skiplist_page_number</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>next_empty_page</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_write</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_data_type_skiplist</name></expr></argument>, <argument><expr><name>skiplist_page_number</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_list_create</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>levels</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_list_type_long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_write</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_data_type_list_long</name></expr></argument>, <argument><expr><name>levels_page_number</name></expr></argument>, <argument><expr><name>levels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>long</name> <modifier>*</modifier></type><name>scores_element</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>scores_element</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>scores_element</name> <operator>=</operator> <name>scores_page_number</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_list_add_element</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>levels</name></expr></argument>, <argument><expr><name>levels_page_number</name></expr></argument>, <argument><expr><name>scores_element</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>long</name> <modifier>*</modifier></type><name>skiplist_element</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>skiplist_element</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call>
	<operator>*</operator><name>skiplist_element</name> <operator>=</operator> <name>skiplist_page_number</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_list_add_element</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>levels</name></expr></argument>, <argument><expr><name>levels_page_number</name></expr></argument>, <argument><expr><name>skiplist_element</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>btree</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>btree</name> <operator>=</operator> <name>scores</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>btree_page</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>btree_page</name> <operator>=</operator> <name>scores_page_number</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>_skiplist</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>_skiplist</name> <operator>=</operator> <name>skiplist</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>skiplist_page</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>skiplist_page</name> <operator>=</operator> <name>skiplist_page_number</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rl_zset_read</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>levels_page_number</name></decl></parameter>, <parameter><decl><type><name>rl_btree</name> <modifier>*</modifier><modifier>*</modifier></type><name>btree</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>btree_page</name></decl></parameter>, <parameter><decl><type><name>rl_skiplist</name> <modifier>*</modifier><modifier>*</modifier></type><name>skiplist</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>skiplist_page</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>scores_page_number</name></decl>, <decl><type ref="prev"/><name>skiplist_page_number</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_list</name> <modifier>*</modifier></type><name>levels</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_data_type_list_long</name></expr></argument>, <argument><expr><name>levels_page_number</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_list_type_long</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>levels</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>btree</name> <operator>||</operator> <name>btree_page</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_list_get_element</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>levels</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>scores_page_number</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name>tmp</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>btree</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_data_type_btree_hash_sha1_double</name></expr></argument>, <argument><expr><name>scores_page_number</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_btree_type_hash_sha1_double</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>btree</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>btree_page</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>btree_page</name> <operator>=</operator> <name>scores_page_number</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>skiplist</name> <operator>||</operator> <name>skiplist_page</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_list_get_element</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>levels</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_FOUND</name></expr>)</condition> <block>{<block_content>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>skiplist_page_number</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name>tmp</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>skiplist</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_data_type_skiplist</name></expr></argument>, <argument><expr><name>skiplist_page_number</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>skiplist</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>skiplist_page</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>skiplist_page</name> <operator>=</operator> <name>skiplist_page_number</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rl_zset_get_objects</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>_levels_page_number</name></decl></parameter>, <parameter><decl><type><name>rl_btree</name> <modifier>*</modifier><modifier>*</modifier></type><name>btree</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>btree_page</name></decl></parameter>, <parameter><decl><type><name>rl_skiplist</name> <modifier>*</modifier><modifier>*</modifier></type><name>skiplist</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>skiplist_page</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>update_version</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>create</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name></type> <name>levels_page_number</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>version</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>expires</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>create</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_key_get_or_create</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>RL_TYPE_ZSET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>levels_page_number</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_FOUND</name> <operator>&amp;&amp;</operator> <name>retval</name> <operator>!=</operator> <name>RL_NOT_FOUND</name></expr>)</condition> <block>{<block_content>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>retval</name> <operator>==</operator> <name>RL_NOT_FOUND</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_zset_create</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>levels_page_number</name></expr></argument>, <argument><expr><name>btree</name></expr></argument>, <argument><expr><name>btree_page</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><name>skiplist_page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_zset_read</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>levels_page_number</name></expr></argument>, <argument><expr><name>btree</name></expr></argument>, <argument><expr><name>btree_page</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><name>skiplist_page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>type</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_key_get</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>levels_page_number</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>expires</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_FOUND</name></expr>)</condition> <block>{<block_content>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>RL_TYPE_ZSET</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_WRONG_TYPE</name></expr>;</expr_stmt>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_zset_read</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>levels_page_number</name></expr></argument>, <argument><expr><name>btree</name></expr></argument>, <argument><expr><name>btree_page</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><name>skiplist_page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>update_version</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_key_set</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>RL_TYPE_ZSET</name></expr></argument>, <argument><expr><name>levels_page_number</name></expr></argument>, <argument><expr><name>expires</name></expr></argument>, <argument><expr><name>version</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<label><name>cleanup</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>_levels_page_number</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>_levels_page_number</name> <operator>=</operator> <name>levels_page_number</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>remove_member_score_sha1</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>levels_page_number</name></decl></parameter>, <parameter><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>scores</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>scores_page</name></decl></parameter>, <parameter><decl><type><name>rl_skiplist</name> <modifier>*</modifier></type><name>skiplist</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>skiplist_page</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>member</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>member_len</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>score</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_btree_remove_element</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>scores</name></expr></argument>, <argument><expr><name>scores_page</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name> <operator>&amp;&amp;</operator> <name>retval</name> <operator>!=</operator> <name>RL_DELETED</name></expr>)</condition> <block>{<block_content>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_skiplist_delete</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><name>skiplist_page</name></expr></argument>, <argument><expr><name>score</name></expr></argument>, <argument><expr><name>member</name></expr></argument>, <argument><expr><name>member_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name> <operator>&amp;&amp;</operator> <name>retval</name> <operator>!=</operator> <name>RL_DELETED</name></expr>)</condition> <block>{<block_content>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>RL_DELETED</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_data_type_list_long</name></expr></argument>, <argument><expr><name>levels_page_number</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_list_type_long</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_list_delete</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_delete</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>levels_page_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_key_delete</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_DELETED</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>remove_member_score</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>levels_page_number</name></decl></parameter>, <parameter><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>scores</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>scores_page</name></decl></parameter>, <parameter><decl><type><name>rl_skiplist</name> <modifier>*</modifier></type><name>skiplist</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>skiplist_page</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>member</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>member_len</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>score</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>sha1</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>member</name></expr></argument>, <argument><expr><name>member_len</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>remove_member_score_sha1</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>levels_page_number</name></expr></argument>, <argument><expr><name>scores</name></expr></argument>, <argument><expr><name>scores_page</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><name>skiplist_page</name></expr></argument>, <argument><expr><name>member</name></expr></argument>, <argument><expr><name>member_len</name></expr></argument>, <argument><expr><name>score</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>remove_member</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>levels_page_number</name></decl></parameter>, <parameter><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>scores</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>scores_page</name></decl></parameter>, <parameter><decl><type><name>rl_skiplist</name> <modifier>*</modifier></type><name>skiplist</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>skiplist_page</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>member</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>member_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>double</name></type> <name>score</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>sha1</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>member</name></expr></argument>, <argument><expr><name>member_len</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_btree_find_score</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>scores</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_FOUND</name> <operator>&amp;&amp;</operator> <name>retval</name> <operator>!=</operator> <name>RL_NOT_FOUND</name></expr>)</condition> <block>{<block_content>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>RL_FOUND</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>score</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name>tmp</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>remove_member_score_sha1</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>levels_page_number</name></expr></argument>, <argument><expr><name>scores</name></expr></argument>, <argument><expr><name>scores_page</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><name>skiplist_page</name></expr></argument>, <argument><expr><name>member</name></expr></argument>, <argument><expr><name>member_len</name></expr></argument>, <argument><expr><name>score</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>add_member</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>scores</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>scores_page</name></decl></parameter>, <parameter><decl><type><name>rl_skiplist</name> <modifier>*</modifier></type><name>skiplist</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>skiplist_page</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>score</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>member</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>memberlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>digest</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>value_ptr</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>value_ptr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>digest</name> <operator>=</operator> <call><name>rl_malloc</name><argument_list>(<argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>digest</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>value_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OUT_OF_MEMORY</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name>value_ptr</name> <operator>=</operator> <name>score</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>sha1</name><argument_list>(<argument><expr><name>member</name></expr></argument>, <argument><expr><name>memberlen</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>value_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_btree_add_element</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>scores</name></expr></argument>, <argument><expr><name>scores_page</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><name>value_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_skiplist_add</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><name>skiplist_page</name></expr></argument>, <argument><expr><name>score</name></expr></argument>, <argument><expr><name>member</name></expr></argument>, <argument><expr><name>memberlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// This failure is critical. The btree already has the element, but</comment>
		<comment type="line">// the skiplist failed to add it. If left as is, it would be in an</comment>
		<comment type="line">// inconsistent state. Dropping all the transaction in progress.</comment>
		<expr_stmt><expr><call><name>rl_discard</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_zadd</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>score</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>member</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>memberlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>existed</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>scores</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_skiplist</name> <modifier>*</modifier></type><name>skiplist</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>scores_page</name></decl>, <decl><type ref="prev"/><name>skiplist_page</name></decl>, <decl><type ref="prev"/><name>levels_page_number</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_zset_get_objects</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>levels_page_number</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scores</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scores_page</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skiplist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skiplist_page</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>remove_member</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>levels_page_number</name></expr></argument>, <argument><expr><name>scores</name></expr></argument>, <argument><expr><name>scores_page</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><name>skiplist_page</name></expr></argument>, <argument><expr><name>member</name></expr></argument>, <argument><expr><name>memberlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name> <operator>&amp;&amp;</operator> <name>retval</name> <operator>!=</operator> <name>RL_NOT_FOUND</name> <operator>&amp;&amp;</operator> <name>retval</name> <operator>!=</operator> <name>RL_DELETED</name></expr>)</condition> <block>{<block_content>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>retval</name> <operator>==</operator> <name>RL_DELETED</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_zset_get_objects</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>levels_page_number</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scores</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scores_page</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skiplist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skiplist_page</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>existed</name> <operator>=</operator> <name>retval</name> <operator>!=</operator> <name>RL_NOT_FOUND</name></expr>;</expr_stmt> <comment type="line">// ok or deleted means there was a value</comment>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>add_member</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>scores</name></expr></argument>, <argument><expr><name>scores_page</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><name>skiplist_page</name></expr></argument>, <argument><expr><name>score</name></expr></argument>, <argument><expr><name>member</name></expr></argument>, <argument><expr><name>memberlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <ternary><condition><expr><name>existed</name></expr> ?</condition><then> <expr><name>RL_FOUND</name></expr> </then><else>: <expr><name>RL_OK</name></expr></else></ternary></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rl_get_zscore</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>scores</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>member</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>memberlen</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>score</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>digest</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>sha1</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>member</name></expr></argument>, <argument><expr><name>memberlen</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_btree_find_score</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>scores</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>score</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name>value</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_FOUND</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_zscore</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>member</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>memberlen</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>score</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>scores</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_zset_get_objects</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scores</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_get_zscore</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>scores</name></expr></argument>, <argument><expr><name>member</name></expr></argument>, <argument><expr><name>memberlen</name></expr></argument>, <argument><expr><name>score</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_zrank</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>member</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>memberlen</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>rank</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>double</name></type> <name>score</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>scores</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_skiplist</name> <modifier>*</modifier></type><name>skiplist</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_zset_get_objects</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scores</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skiplist</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_get_zscore</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>scores</name></expr></argument>, <argument><expr><name>member</name></expr></argument>, <argument><expr><name>memberlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>score</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_skiplist_first_node</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><name>score</name></expr></argument>, <argument><expr><name>RL_SKIPLIST_INCLUDE_SCORE</name></expr></argument>, <argument><expr><name>member</name></expr></argument>, <argument><expr><name>memberlen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>rank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_zrevrank</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>member</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>memberlen</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>revrank</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>double</name></type> <name>score</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>scores</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_skiplist</name> <modifier>*</modifier></type><name>skiplist</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_zset_get_objects</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scores</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skiplist</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_get_zscore</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>scores</name></expr></argument>, <argument><expr><name>member</name></expr></argument>, <argument><expr><name>memberlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>score</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_skiplist_first_node</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><name>score</name></expr></argument>, <argument><expr><name>RL_SKIPLIST_INCLUDE_SCORE</name></expr></argument>, <argument><expr><name>member</name></expr></argument>, <argument><expr><name>memberlen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>revrank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>revrank</name> <operator>=</operator> <name><name>skiplist</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <operator>(</operator><operator>*</operator><name>revrank</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_zcard</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>card</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>rl_skiplist</name> <modifier>*</modifier></type><name>skiplist</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_zset_get_objects</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skiplist</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>card</name> <operator>=</operator> <name><name>skiplist</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_zcount</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>rl_zrangespec</name> <modifier>*</modifier></type><name>range</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>rl_skiplist</name> <modifier>*</modifier></type><name>skiplist</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>maxrank</name></decl>, <decl><type ref="prev"/><name>minrank</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>range</name><operator>-&gt;</operator><name>max</name></name> <operator>&lt;</operator> <name><name>range</name><operator>-&gt;</operator><name>min</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_zset_get_objects</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skiplist</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_skiplist_first_node</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><name><name>range</name><operator>-&gt;</operator><name>max</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>range</name><operator>-&gt;</operator><name>maxex</name></name></expr> ?</condition><then> <expr><name>RL_SKIPLIST_BEFORE_SCORE</name></expr> </then><else>: <expr><name>RL_SKIPLIST_UPTO_SCORE</name></expr></else></ternary></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>maxrank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>RL_NOT_FOUND</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>maxrank</name> <operator>=</operator> <name><name>skiplist</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_FOUND</name></expr>)</condition> <block>{<block_content>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_skiplist_first_node</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><name><name>range</name><operator>-&gt;</operator><name>min</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>range</name><operator>-&gt;</operator><name>minex</name></name></expr> ?</condition><then> <expr><name>RL_SKIPLIST_EXCLUDE_SCORE</name></expr> </then><else>: <expr><name>RL_SKIPLIST_INCLUDE_SCORE</name></expr></else></ternary></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>minrank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_FOUND</name></expr>)</condition> <block>{<block_content>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>minrank</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>minrank</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>count</name> <operator>=</operator> <name>maxrank</name> <operator>-</operator> <name>minrank</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_rl_zrange</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>rl_skiplist</name> <modifier>*</modifier></type><name>skiplist</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>direction</name></decl></parameter>, <parameter><decl><type><name>rl_zset_iterator</name> <modifier>*</modifier><modifier>*</modifier></type><name>iterator</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>RL_OK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>node_page</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>card</name> <init>= <expr><name><name>skiplist</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>start</name> <operator>+=</operator> <name>card</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>end</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>end</name> <operator>+=</operator> <name>card</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&gt;</operator> <name>end</name> <operator>||</operator> <name>start</name> <operator>&gt;=</operator> <name>card</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_NOT_FOUND</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>end</name> <operator>&gt;=</operator> <name>card</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>end</name> <operator>=</operator> <name>card</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>size</name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>start</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_skiplist_node_by_rank</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><ternary><condition><expr><name>direction</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>start</name></expr> </then><else>: <expr><name>end</name></expr></else></ternary></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node_page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_skiplist_iterator_create</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>iterator</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><name>node_page</name></expr></argument>, <argument><expr><name>direction</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_rl_zrangebyscore</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>rl_skiplist</name> <modifier>*</modifier></type><name>skiplist</name></decl></parameter>, <parameter><decl><type><name>rl_zrangespec</name> <modifier>*</modifier></type><name>range</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>_start</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>_end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_skiplist_node</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_skiplist_first_node</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><name><name>range</name><operator>-&gt;</operator><name>min</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>range</name><operator>-&gt;</operator><name>minex</name></name></expr> ?</condition><then> <expr><name>RL_SKIPLIST_EXCLUDE_SCORE</name></expr> </then><else>: <expr><name>RL_SKIPLIST_INCLUDE_SCORE</name></expr></else></ternary></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_skiplist_first_node</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><name><name>range</name><operator>-&gt;</operator><name>max</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>range</name><operator>-&gt;</operator><name>maxex</name></name></expr> ?</condition><then> <expr><name>RL_SKIPLIST_BEFORE_SCORE</name></expr> </then><else>: <expr><name>RL_SKIPLIST_UPTO_SCORE</name></expr></else></ternary></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_FOUND</name> <operator>&amp;&amp;</operator> <name>retval</name> <operator>!=</operator> <name>RL_NOT_FOUND</name></expr>)</condition> <block>{<block_content>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>RL_FOUND</name> <operator>&amp;&amp;</operator> <name>end</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>range</name><operator>-&gt;</operator><name>maxex</name></name> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>score</name></name> <operator>==</operator> <name><name>range</name><operator>-&gt;</operator><name>max</name></name><operator>)</operator> <operator>||</operator> <name><name>node</name><operator>-&gt;</operator><name>score</name></name> <operator>&gt;</operator> <name><name>range</name><operator>-&gt;</operator><name>max</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_NOT_FOUND</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>end</name> <operator>&lt;</operator> <name>start</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_NOT_FOUND</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>_start</name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>_end</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_zrangebyscore</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>rl_zrangespec</name> <modifier>*</modifier></type><name>range</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>rl_zset_iterator</name> <modifier>*</modifier><modifier>*</modifier></type><name>iterator</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_skiplist</name> <modifier>*</modifier></type><name>skiplist</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_zset_get_objects</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skiplist</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>_rl_zrangebyscore</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><name>range</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>start</name> <operator>+=</operator> <name>offset</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>_rl_zrange</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><operator>(</operator><operator>*</operator><name>iterator</name><operator>)</operator><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <name>count</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>iterator</name><operator>)</operator><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_zrevrangebyscore</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>rl_zrangespec</name> <modifier>*</modifier></type><name>range</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>rl_zset_iterator</name> <modifier>*</modifier><modifier>*</modifier></type><name>iterator</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_skiplist</name> <modifier>*</modifier></type><name>skiplist</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_zset_get_objects</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skiplist</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>_rl_zrangebyscore</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><name>range</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>end</name> <operator>-=</operator> <name>offset</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>_rl_zrange</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><operator>(</operator><operator>*</operator><name>iterator</name><operator>)</operator><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <name>count</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>iterator</name><operator>)</operator><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>validate_lex_range</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>min</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>minlen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>max</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>maxlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>minlen</name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>min</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>min</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'('</literal> <operator>&amp;&amp;</operator> <name><name>min</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>RL_INVALID_PARAMETERS</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>maxlen</name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>max</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'+'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>max</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'('</literal> <operator>&amp;&amp;</operator> <name><name>max</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>RL_INVALID_PARAMETERS</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>RL_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lex_get_range</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>min</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>minlen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>max</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>maxlen</name></decl></parameter>, <parameter><decl><type><name>rl_skiplist</name> <modifier>*</modifier></type><name>skiplist</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>_start</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>_end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>validate_lex_range</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>minlen</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>rl_skiplist_node</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type> <name>score</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_skiplist_first_node</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><operator>-</operator><name>INFINITY</name></expr></argument>, <argument><expr><name>RL_SKIPLIST_EXCLUDE_SCORE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>score</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>score</name></name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>long</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>min</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_skiplist_first_node</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><name>score</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>min</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'('</literal></expr> ?</condition><then> <expr><name>RL_SKIPLIST_EXCLUDE_SCORE</name></expr> </then><else>: <expr><name>RL_SKIPLIST_INCLUDE_SCORE</name></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>min</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>minlen</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>max</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>end</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_skiplist_first_node</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><name>score</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>max</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'('</literal></expr> ?</condition><then> <expr><name>RL_SKIPLIST_BEFORE_SCORE</name></expr> </then><else>: <expr><name>RL_SKIPLIST_UPTO_SCORE</name></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>max</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>maxlen</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_FOUND</name></expr>)</condition> <block>{<block_content>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>end</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_NOT_FOUND</name></expr>;</expr_stmt>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>_start</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>_start</name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>_end</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>_end</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_zlexcount</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>min</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>minlen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>max</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>maxlen</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>lexcount</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_skiplist</name> <modifier>*</modifier></type><name>skiplist</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>validate_lex_range</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>minlen</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_zset_get_objects</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skiplist</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>lex_get_range</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>minlen</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>end</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>end</name> <operator>+=</operator> <name><name>skiplist</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>end</name> <operator>&gt;=</operator> <name>start</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>lexcount</name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>start</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>lexcount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_zrevrangebylex</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>max</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>maxlen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>min</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>minlen</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>rl_zset_iterator</name> <modifier>*</modifier><modifier>*</modifier></type><name>iterator</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_skiplist</name> <modifier>*</modifier></type><name>skiplist</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>validate_lex_range</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>minlen</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_zset_get_objects</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skiplist</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>lex_get_range</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>minlen</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>end</name> <operator>-=</operator> <name>offset</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>_rl_zrange</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><operator>(</operator><operator>*</operator><name>iterator</name><operator>)</operator><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <name>count</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>iterator</name><operator>)</operator><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_zrangebylex</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>min</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>minlen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>max</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>maxlen</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>rl_zset_iterator</name> <modifier>*</modifier><modifier>*</modifier></type><name>iterator</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_skiplist</name> <modifier>*</modifier></type><name>skiplist</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>validate_lex_range</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>minlen</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_zset_get_objects</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skiplist</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>lex_get_range</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>minlen</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>start</name> <operator>+=</operator> <name>offset</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>_rl_zrange</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><operator>(</operator><operator>*</operator><name>iterator</name><operator>)</operator><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <name>count</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>iterator</name><operator>)</operator><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_zrevrange</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>rl_zset_iterator</name> <modifier>*</modifier><modifier>*</modifier></type><name>iterator</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>rl_skiplist</name> <modifier>*</modifier></type><name>skiplist</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_zset_get_objects</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skiplist</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>_rl_zrange</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><operator>-</operator> <name>end</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator> <name>start</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_zrange</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>rl_zset_iterator</name> <modifier>*</modifier><modifier>*</modifier></type><name>iterator</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>rl_skiplist</name> <modifier>*</modifier></type><name>skiplist</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_zset_get_objects</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skiplist</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>_rl_zrange</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_zset_iterator_next</name><parameter_list>(<parameter><decl><type><name>rl_zset_iterator</name> <modifier>*</modifier></type><name>iterator</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>page</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>score</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>member</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>memberlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>member</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>memberlen</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"If member is provided, memberlen is required\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>RL_UNEXPECTED</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>rl_skiplist_node</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_skiplist_iterator_next</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>iterator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>page</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>page</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>memberlen</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_multi_string_get</name><argument_list>(<argument><expr><name><name>iterator</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>member</name></expr></argument>, <argument><expr><name>memberlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>rl_skiplist_iterator_destroy</name><argument_list>(<argument><expr><name><name>iterator</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>score</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>score</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>score</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_zset_iterator_destroy</name><parameter_list>(<parameter><decl><type><name>rl_zset_iterator</name> <modifier>*</modifier></type><name>iterator</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>rl_skiplist_iterator_destroy</name><argument_list>(<argument><expr><name><name>iterator</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_zrem</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>members_size</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>members</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>members_len</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>changed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>scores</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_skiplist</name> <modifier>*</modifier></type><name>skiplist</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>scores_page</name></decl>, <decl><type ref="prev"/><name>skiplist_page</name></decl>, <decl><type ref="prev"/><name>levels_page_number</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_zset_get_objects</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>levels_page_number</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scores</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scores_page</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skiplist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skiplist_page</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>_changed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>members_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>remove_member</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>levels_page_number</name></expr></argument>, <argument><expr><name>scores</name></expr></argument>, <argument><expr><name>scores_page</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><name>skiplist_page</name></expr></argument>, <argument><expr><name><name>members</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>members_len</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name> <operator>&amp;&amp;</operator> <name>retval</name> <operator>!=</operator> <name>RL_NOT_FOUND</name> <operator>&amp;&amp;</operator> <name>retval</name> <operator>!=</operator> <name>RL_DELETED</name></expr>)</condition> <block>{<block_content>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>retval</name> <operator>==</operator> <name>RL_OK</name> <operator>||</operator> <name>retval</name> <operator>==</operator> <name>RL_DELETED</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>_changed</name><operator>++</operator></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>RL_DELETED</name></expr>)</condition> <block>{<block_content>
				<comment type="line">// there is no any other element in the zset, nothing else to delete</comment>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><operator>*</operator><name>changed</name> <operator>=</operator> <name>_changed</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_zremiterator</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>levels_page_number</name></decl></parameter>, <parameter><decl><type><name>rl_zset_iterator</name> <modifier>*</modifier></type><name>iterator</name></decl></parameter>, <parameter><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>scores</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>scores_page</name></decl></parameter>, <parameter><decl><type><name>rl_skiplist</name> <modifier>*</modifier></type><name>skiplist</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>skiplist_page</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>changed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name></type> <name>_changed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type> <name>score</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>member</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>memberlen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>retval</name> <operator>=</operator> <call><name>rl_zset_iterator_next</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>score</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>member</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>memberlen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>remove_member_score</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>levels_page_number</name></expr></argument>, <argument><expr><name>scores</name></expr></argument>, <argument><expr><name>scores_page</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><name>skiplist_page</name></expr></argument>, <argument><expr><name>member</name></expr></argument>, <argument><expr><name>memberlen</name></expr></argument>, <argument><expr><name>score</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>member</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name> <operator>&amp;&amp;</operator> <name>retval</name> <operator>!=</operator> <name>RL_DELETED</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>rl_zset_iterator_destroy</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>_changed</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_END</name></expr>)</condition> <block>{<block_content>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>changed</name> <operator>=</operator> <name>_changed</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_zremrangebyrank</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>changed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>rl_zset_iterator</name> <modifier>*</modifier></type><name>iterator</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>scores</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_skiplist</name> <modifier>*</modifier></type><name>skiplist</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>scores_page</name></decl>, <decl><type ref="prev"/><name>skiplist_page</name></decl>, <decl><type ref="prev"/><name>levels_page_number</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_zset_get_objects</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>levels_page_number</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scores</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scores_page</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skiplist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skiplist_page</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>_rl_zrange</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>_zremiterator</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>levels_page_number</name></expr></argument>, <argument><expr><name>iterator</name></expr></argument>, <argument><expr><name>scores</name></expr></argument>, <argument><expr><name>scores_page</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><name>skiplist_page</name></expr></argument>, <argument><expr><name>changed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name> <operator>&amp;&amp;</operator> <name>changed</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>changed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_zremrangebyscore</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>rl_zrangespec</name> <modifier>*</modifier></type><name>range</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>changed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>rl_zset_iterator</name> <modifier>*</modifier></type><name>iterator</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>scores</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_skiplist</name> <modifier>*</modifier></type><name>skiplist</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>scores_page</name></decl>, <decl><type ref="prev"/><name>skiplist_page</name></decl>, <decl><type ref="prev"/><name>levels_page_number</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_zset_get_objects</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>levels_page_number</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scores</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scores_page</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skiplist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skiplist_page</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>long</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>_rl_zrangebyscore</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><name>range</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>_rl_zrange</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>_zremiterator</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>levels_page_number</name></expr></argument>, <argument><expr><name>iterator</name></expr></argument>, <argument><expr><name>scores</name></expr></argument>, <argument><expr><name>scores_page</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><name>skiplist_page</name></expr></argument>, <argument><expr><name>changed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name> <operator>&amp;&amp;</operator> <name>changed</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>changed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_zremrangebylex</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>min</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>minlen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>max</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>maxlen</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>changed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>rl_zset_iterator</name> <modifier>*</modifier></type><name>iterator</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>scores</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_skiplist</name> <modifier>*</modifier></type><name>skiplist</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>scores_page</name></decl>, <decl><type ref="prev"/><name>skiplist_page</name></decl>, <decl><type ref="prev"/><name>start</name></decl>, <decl><type ref="prev"/><name>end</name></decl>, <decl><type ref="prev"/><name>levels_page_number</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>validate_lex_range</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>minlen</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_zset_get_objects</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>levels_page_number</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scores</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scores_page</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skiplist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skiplist_page</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>lex_get_range</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>minlen</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>RL_NOT_FOUND</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>changed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>_rl_zrange</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>_zremiterator</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>levels_page_number</name></expr></argument>, <argument><expr><name>iterator</name></expr></argument>, <argument><expr><name>scores</name></expr></argument>, <argument><expr><name>scores_page</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><name>skiplist_page</name></expr></argument>, <argument><expr><name>changed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name> <operator>&amp;&amp;</operator> <name>changed</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>changed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>incrby</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>score</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>member</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>memberlen</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>newscore</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>clearnan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>scores</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_skiplist</name> <modifier>*</modifier></type><name>skiplist</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>scores_page</name></decl>, <decl><type ref="prev"/><name>skiplist_page</name></decl>, <decl><type ref="prev"/><name>levels_page_number</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type> <name>existing_score</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_zset_get_objects</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>levels_page_number</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scores</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scores_page</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skiplist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skiplist_page</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_get_zscore</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>scores</name></expr></argument>, <argument><expr><name>member</name></expr></argument>, <argument><expr><name>memberlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>existing_score</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_FOUND</name> <operator>&amp;&amp;</operator> <name>retval</name> <operator>!=</operator> <name>RL_NOT_FOUND</name></expr>)</condition> <block>{<block_content>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>retval</name> <operator>==</operator> <name>RL_FOUND</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>score</name> <operator>+=</operator> <name>existing_score</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>isnan</name><argument_list>(<argument><expr><name>score</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>clearnan</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>score</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else <block>{<block_content>
				<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_NAN</name></expr>;</expr_stmt>
				<goto>goto <name>cleanup</name>;</goto>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>remove_member</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>levels_page_number</name></expr></argument>, <argument><expr><name>scores</name></expr></argument>, <argument><expr><name>scores_page</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><name>skiplist_page</name></expr></argument>, <argument><expr><name>member</name></expr></argument>, <argument><expr><name>memberlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>RL_DELETED</name></expr>)</condition> <block>{<block_content>
			<comment type="line">// it would be nice if we could update the score without destroying the btree, maybe remove_member should have an int destroy?</comment>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_zset_get_objects</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scores</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scores_page</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skiplist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skiplist_page</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>add_member</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>scores</name></expr></argument>, <argument><expr><name>scores_page</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><name>skiplist_page</name></expr></argument>, <argument><expr><name>score</name></expr></argument>, <argument><expr><name>member</name></expr></argument>, <argument><expr><name>memberlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>newscore</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>newscore</name> <operator>=</operator> <name>score</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_zincrby</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>score</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>member</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>memberlen</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>newscore</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>incrby</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>score</name></expr></argument>, <argument><expr><name>member</name></expr></argument>, <argument><expr><name>memberlen</name></expr></argument>, <argument><expr><name>newscore</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_zinterstore</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>keys_size</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>keys</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>keys_len</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>_weights</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>aggregate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>member</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_btree</name> <modifier>*</modifier><modifier>*</modifier></type><name>btrees</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_skiplist</name> <modifier>*</modifier><modifier>*</modifier></type><name>skiplists</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type> <name>weight</name> <init>= <expr><literal type="number">1.0</literal></expr></init></decl>, <decl><type ref="prev"/><name>weight_tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>weights</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_skiplist_node</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_skiplist_iterator</name> <modifier>*</modifier></type><name>skiplist_iterator</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_btree_iterator</name> <modifier>*</modifier></type><name>btree_iterator</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>target_btree_page</name></decl>, <decl><type ref="prev"/><name>target_skiplist_page</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>multi_string_page</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>target_btree</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_skiplist</name> <modifier>*</modifier></type><name>target_skiplist</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>found</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type> <name>skiplist_score</name></decl>, <decl><type ref="prev"/><name>tmp_score</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>memberlen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>keys_size</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>btrees</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rl_btree</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>keys_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>skiplists</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rl_skiplist</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>keys_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_UNEXPECTED</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_key_delete_with_value</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>keys_len</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name> <operator>&amp;&amp;</operator> <name>retval</name> <operator>!=</operator> <name>RL_NOT_FOUND</name></expr>)</condition> <block>{<block_content>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<decl_stmt><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>btree</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>btree_tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_skiplist</name> <modifier>*</modifier></type><name>skiplist</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>skiplist_tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>
	<comment type="line">// key in position 0 is the target key</comment>
	<comment type="line">// we'll store a pivot skiplist in btree/skiplist and the others in btrees/skiplists</comment>
	<comment type="line">// TODO: qsort instead</comment>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>weights</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>keys_size</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>keys_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>weight_tmp</name> <operator>=</operator> <ternary><condition><expr><name>_weights</name></expr> ?</condition><then> <expr><name><name>_weights</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">1.0</literal></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL2</name><argument_list>(<argument><expr><name>rl_zset_get_objects</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>RL_WRONG_TYPE</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>keys_len</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>btree_tmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skiplist_tmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>RL_WRONG_TYPE</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>skiplist_tmp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_set_get_objects</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>keys_len</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>btree_tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>btree</name> <operator>=</operator> <name>btree_tmp</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>skiplist</name> <operator>=</operator> <name>skiplist_tmp</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>weight</name> <operator>=</operator> <name>weight_tmp</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name><name>btree_tmp</name><operator>-&gt;</operator><name>number_of_elements</name></name> <operator>&lt;</operator> <name><name>btree</name><operator>-&gt;</operator><name>number_of_elements</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>weights</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>weight</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>weight</name> <operator>=</operator> <name>weight_tmp</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>btrees</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>btree</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>btree</name> <operator>=</operator> <name>btree_tmp</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>skiplists</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>skiplist</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>skiplist</name> <operator>=</operator> <name>skiplist_tmp</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><name><name>weights</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>weight_tmp</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>btrees</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>btree_tmp</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>skiplists</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>skiplist_tmp</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_zset_get_objects</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>keys_len</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>target_btree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>target_btree_page</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>target_skiplist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>target_skiplist_page</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>skiplist</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_skiplist_iterator_create</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skiplist_iterator</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_btree_iterator_create</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>btree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>btree_iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>retval</name> <operator>=</operator> <ternary><condition><expr><name>skiplist</name></expr> ?</condition><then> <expr><call><name>rl_skiplist_iterator_next</name><argument_list>(<argument><expr><name>skiplist_iterator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>rl_btree_iterator_next</name><argument_list>(<argument><expr><name>btree_iterator</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator> <operator>==</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>skiplist</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>skiplist_score</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>score</name></name> <operator>*</operator> <name>weight</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>multi_string_page</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>skiplist_score</name> <operator>=</operator> <name>weight</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>multi_string_page</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name>tmp</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>keys_size</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_multi_string_sha1</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><name>multi_string_page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_btree_find_score</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>btrees</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>RL_NOT_FOUND</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>retval</name> <operator>==</operator> <name>RL_FOUND</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>tmp_score</name> <operator>=</operator> <ternary><condition><expr><name>skiplist</name></expr> ?</condition><then> <expr><operator>*</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name>tmp</name></expr> </then><else>: <expr><literal type="number">1.0</literal></expr></else></ternary></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>aggregate</name> <operator>==</operator> <name>RL_ZSET_AGGREGATE_SUM</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name>skiplist_score</name> <operator>+=</operator> <name>tmp_score</name> <operator>*</operator> <name><name>weights</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
				</block_content>}</block></if>
				<if type="elseif">else if <condition>(
				    <expr><operator>(</operator><name>aggregate</name> <operator>==</operator> <name>RL_ZSET_AGGREGATE_MIN</name> <operator>&amp;&amp;</operator> <name>tmp_score</name> <operator>*</operator> <name><name>weights</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <name>skiplist_score</name><operator>)</operator> <operator>||</operator>
				    <operator>(</operator><name>aggregate</name> <operator>==</operator> <name>RL_ZSET_AGGREGATE_MAX</name> <operator>&amp;&amp;</operator> <name>tmp_score</name> <operator>*</operator> <name><name>weights</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <name>skiplist_score</name><operator>)</operator></expr>
				)</condition> <block>{<block_content>
					<expr_stmt><expr><name>skiplist_score</name> <operator>=</operator> <name>tmp_score</name> <operator>*</operator> <name><name>weights</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if>
			<else>else <block>{<block_content>
				<goto>goto <name>cleanup</name>;</goto>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></for>
		<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_multi_string_get</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>multi_string_page</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>member</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>memberlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>add_member</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>target_btree</name></expr></argument>, <argument><expr><name>target_btree_page</name></expr></argument>, <argument><expr><name>target_skiplist</name></expr></argument>, <argument><expr><name>target_skiplist_page</name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>isnan</name><argument_list>(<argument><expr><name>skiplist_score</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0.0</literal></expr> </then><else>: <expr><name>skiplist_score</name></expr></else></ternary></expr></argument>, <argument><expr><name>member</name></expr></argument>, <argument><expr><name>memberlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>member</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>member</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><name>skiplist_iterator</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>btree_iterator</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_END</name></expr>)</condition> <block>{<block_content>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>member</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>skiplist_iterator</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>rl_zset_iterator_destroy</name><argument_list>(<argument><expr><name>skiplist_iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>btree_iterator</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>rl_btree_iterator_destroy</name><argument_list>(<argument><expr><name>btree_iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>weights</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>btrees</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>skiplists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>zunionstore_minmax</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>keys_size</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>keys</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>keys_len</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>weights</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>aggregate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>target_scores</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>target_scores_page</name></decl>, <decl><type ref="prev"/><name>target_skiplist_page</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_skiplist</name> <modifier>*</modifier></type><name>target_skiplist</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_skiplist_iterator</name> <modifier>*</modifier><modifier>*</modifier></type><name>iterators</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt><empty_stmt>;</empty_stmt>
	<decl_stmt><decl><type><name>rl_skiplist</name> <modifier>*</modifier></type><name>skiplist</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>scores</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>score</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>members</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <modifier>*</modifier></type><name>memberslen</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>position</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_zset_get_objects</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>keys_len</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>target_scores</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>target_scores_page</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>target_skiplist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>target_skiplist_page</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>scores</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>keys_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>members</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <operator>*</operator> <name>keys_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>keys_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>members</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>memberslen</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>keys_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>iterators</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rl_skiplist_iterator</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>keys_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>keys_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>iterators</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>keys_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_zset_get_objects</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>keys_len</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skiplist</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>RL_NOT_FOUND</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>iterators</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_skiplist_iterator_create</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>iterators</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>aggregate</name> <operator>==</operator> <name>RL_ZSET_AGGREGATE_MAX</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_zset_iterator_next</name><argument_list>(<argument><expr><name><name>iterators</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>scores</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>members</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>memberslen</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>iterators</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_END</name></expr>)</condition> <block>{<block_content>
				<goto>goto <name>cleanup</name>;</goto>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>position</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>keys_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>iterators</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>position</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>position</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>score</name> <operator>=</operator> <ternary><condition><expr><name>weights</name></expr> ?</condition><then> <expr><name><name>weights</name><index>[<expr><name>position</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>scores</name><index>[<expr><name>position</name></expr>]</index></name></expr> </then><else>: <expr><name><name>scores</name><index>[<expr><name>position</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>isnan</name><argument_list>(<argument><expr><name>score</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>score</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>aggregate</name> <operator>==</operator> <name>RL_ZSET_AGGREGATE_MAX</name> <operator>&amp;&amp;</operator> <name><name>scores</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>score</name><operator>)</operator> <operator>||</operator>
			        <operator>(</operator><name>aggregate</name> <operator>==</operator> <name>RL_ZSET_AGGREGATE_MIN</name> <operator>&amp;&amp;</operator> <name><name>scores</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name>score</name><operator>)</operator></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>position</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
		<if_stmt><if>if <condition>(<expr><name>position</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>score</name> <operator>=</operator> <ternary><condition><expr><name>weights</name></expr> ?</condition><then> <expr><name><name>weights</name><index>[<expr><name>position</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>scores</name><index>[<expr><name>position</name></expr>]</index></name></expr> </then><else>: <expr><name><name>scores</name><index>[<expr><name>position</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>isnan</name><argument_list>(<argument><expr><name>score</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>score</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>add_member</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>target_scores</name></expr></argument>, <argument><expr><name>target_scores_page</name></expr></argument>, <argument><expr><name>target_skiplist</name></expr></argument>, <argument><expr><name>target_skiplist_page</name></expr></argument>, <argument><expr><name>score</name></expr></argument>, <argument><expr><name><name>members</name><index>[<expr><name>position</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>memberslen</name><index>[<expr><name>position</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_FOUND</name> <operator>&amp;&amp;</operator> <name>retval</name> <operator>!=</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>members</name><index>[<expr><name>position</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>members</name><index>[<expr><name>position</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_zset_iterator_next</name><argument_list>(<argument><expr><name><name>iterators</name><index>[<expr><name>position</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>scores</name><index>[<expr><name>position</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>members</name><index>[<expr><name>position</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>memberslen</name><index>[<expr><name>position</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>iterators</name><index>[<expr><name>position</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_END</name></expr>)</condition> <block>{<block_content>
				<goto>goto <name>cleanup</name>;</goto>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>
	<if_stmt><if>if <condition>(<expr><name><name>target_scores</name><operator>-&gt;</operator><name>number_of_elements</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_key_delete_with_value</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>keys_len</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>iterators</name></expr>)</condition> <block>{<block_content>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>keys_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>iterators</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>rl_zset_iterator_destroy</name><argument_list>(<argument><expr><name><name>iterators</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>members</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>iterators</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>memberslen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>members</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>scores</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>zunionstore_sum</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>keys_size</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>keys</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>keys_len</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>weights</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>rl_skiplist_iterator</name> <modifier>*</modifier></type><name>iterator</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_skiplist</name> <modifier>*</modifier></type><name>skiplist</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type> <name>score</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>member</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>memberlen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>keys_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_zset_get_objects</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>keys_len</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skiplist</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>RL_NOT_FOUND</name></expr>)</condition> <block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_skiplist_iterator_create</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iterator</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<while>while <condition>(<expr><operator>(</operator><name>retval</name> <operator>=</operator> <call><name>rl_zset_iterator_next</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>score</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>member</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>memberlen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>weights</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>score</name> <operator>*=</operator> <name><name>weights</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>isnan</name><argument_list>(<argument><expr><name>score</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>score</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>incrby</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>keys_len</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>score</name></expr></argument>, <argument><expr><name>member</name></expr></argument>, <argument><expr><name>memberlen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>member</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
				<goto>goto <name>cleanup</name>;</goto>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></while>
		<expr_stmt><expr><name>iterator</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_END</name></expr>)</condition> <block>{<block_content>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>iterator</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>rl_zset_iterator_destroy</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_zunionstore</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>keys_size</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>keys</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>keys_len</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>weights</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>aggregate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_key_delete_with_value</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>keys_len</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name> <operator>&amp;&amp;</operator> <name>retval</name> <operator>!=</operator> <name>RL_NOT_FOUND</name></expr>)</condition> <block>{<block_content>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>aggregate</name> <operator>==</operator> <name>RL_ZSET_AGGREGATE_SUM</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>zunionstore_sum</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>keys_size</name></expr></argument>, <argument><expr><name>keys</name></expr></argument>, <argument><expr><name>keys_len</name></expr></argument>, <argument><expr><name>weights</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>zunionstore_minmax</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>keys_size</name></expr></argument>, <argument><expr><name>keys</name></expr></argument>, <argument><expr><name>keys_len</name></expr></argument>, <argument><expr><name>weights</name></expr></argument>, <argument><expr><name>aggregate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_zset_pages</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>page</name></decl></parameter>, <parameter><decl><type><name>short</name> <modifier>*</modifier></type><name>pages</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>scores</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_skiplist</name> <modifier>*</modifier></type><name>skiplist</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_skiplist_iterator</name> <modifier>*</modifier></type><name>iterator</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_skiplist_node</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>scores_page</name></decl>, <decl><type ref="prev"/><name>skiplist_page</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_list</name> <modifier>*</modifier></type><name>levels</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_data_type_list_long</name></expr></argument>, <argument><expr><name>page</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_list_type_long</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>levels</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_list_pages</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>levels</name></expr></argument>, <argument><expr><name>pages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_zset_read</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>page</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scores</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scores_page</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skiplist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skiplist_page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pages</name><index>[<expr><name>scores_page</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pages</name><index>[<expr><name>skiplist_page</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_btree_pages</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>scores</name></expr></argument>, <argument><expr><name>pages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_skiplist_pages</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><name>pages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_skiplist_iterator_create</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iterator</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>(</operator><call><name>rl_skiplist_iterator_next</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>pages</name><index>[<expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_multi_string_pages</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name><name>iterator</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>pages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><name>iterator</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_END</name></expr>)</condition> <block>{<block_content>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>iterator</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>rl_skiplist_iterator_destroy</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_zset_delete</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>value_page</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name></type> <name>skiplist_page</name></decl>, <decl><type ref="prev"/><name>scores_page</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_skiplist</name> <modifier>*</modifier></type><name>skiplist</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>scores</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_list</name> <modifier>*</modifier></type><name>levels</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_data_type_list_long</name></expr></argument>, <argument><expr><name>value_page</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_list_type_long</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>levels</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_list_get_element</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>levels</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>scores_page</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name>tmp</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_data_type_btree_hash_sha1_double</name></expr></argument>, <argument><expr><name>scores_page</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_btree_type_hash_sha1_double</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>scores</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_list_get_element</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>levels</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>skiplist_page</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name>tmp</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_data_type_skiplist</name></expr></argument>, <argument><expr><name>skiplist_page</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>skiplist</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_skiplist_delete_all</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_delete</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>skiplist_page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_btree_delete</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>scores</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_delete</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>scores_page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_data_type_list_long</name></expr></argument>, <argument><expr><name>value_page</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_list_type_long</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_list_delete</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_delete</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>value_page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>
</unit>
