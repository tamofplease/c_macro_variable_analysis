<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/rlite/src/page_skiplist.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/page_skiplist.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/page_multi_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/util.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rl_skiplist_random_level</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><operator>(</operator><call><name>rand</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFFFF</literal><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><name>RL_SKIPLIST_PROBABILITY</name> <operator>*</operator> <literal type="number">0xFFFF</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>level</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<return>return <expr><ternary><condition><expr><operator>(</operator><name>level</name> <operator>&lt;</operator> <name>RL_SKIPLIST_MAXLEVEL</name><operator>)</operator></expr> ?</condition><then> <expr><name>level</name></expr> </then><else>: <expr><name>RL_SKIPLIST_MAXLEVEL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_skiplist_malloc</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>rl_skiplist</name> <modifier>*</modifier><modifier>*</modifier></type><name>_skiplist</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>RL_OK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_skiplist</name> <modifier>*</modifier></type><name>skiplist</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>skiplist</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rl_skiplist</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>skiplist</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>skiplist</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>skiplist</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>_skiplist</name> <operator>=</operator> <name>skiplist</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>rl_skiplist_destroy</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_skiplist_create</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>rl_skiplist</name> <modifier>*</modifier><modifier>*</modifier></type><name>_skiplist</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_skiplist_malloc</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>_skiplist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>_skiplist</name><operator>)</operator><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>next_empty_page</name></name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>rl_skiplist_node</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_skiplist_node_create</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>, <argument><expr><name>RL_SKIPLIST_MAXLEVEL</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>long</name></type> <name>j</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>RL_SKIPLIST_MAXLEVEL</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>level</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>right</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>level</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>span</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_write</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_data_type_skiplist_node</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>next_empty_page</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_skiplist_destroy</name><parameter_list>(<parameter><function_decl><type><name>rlite</name> <modifier>*</modifier></type><name>UNUSED</name><parameter_list>(<parameter><decl><type><name>db</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>skiplist</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>skiplist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>RL_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_skiplist_node_create</name><parameter_list>(<parameter><function_decl><type><name>rlite</name> <modifier>*</modifier></type><name>UNUSED</name><parameter_list>(<parameter><decl><type><name>db</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>rl_skiplist_node</name> <modifier>*</modifier><modifier>*</modifier></type><name>_node</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>score</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>RL_OK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_skiplist_node</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rl_skiplist_node</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>level</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>rl_skiplist_node_level</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>num_levels</name></name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>score</name></name> <operator>=</operator> <name>score</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>level</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>level</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>right</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>level</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>span</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><operator>*</operator><name>_node</name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_skiplist_node_destroy</name><parameter_list>(<parameter><function_decl><type><name>rlite</name> <modifier>*</modifier></type><name>UNUSED</name><parameter_list>(<parameter><decl><type><name>db</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>RL_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_skiplist_iterator_create</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>rl_skiplist_iterator</name> <modifier>*</modifier><modifier>*</modifier></type><name>_iterator</name></decl></parameter>, <parameter><decl><type><name>rl_skiplist</name> <modifier>*</modifier></type><name>skiplist</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>next_node_page</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>direction</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_skiplist_iterator</name> <modifier>*</modifier></type><name>iterator</name></decl>;</decl_stmt>
	<macro><name>RL_MALLOC</name><argument_list>(<argument>iterator</argument>, <argument>sizeof(*iterator)</argument>)</argument_list></macro>
	<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>db</name></name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>skiplist</name></name> <operator>=</operator> <name>skiplist</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>direction</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>direction</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>direction</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>next_node_page</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>node_page</name></name> <operator>=</operator> <name>next_node_page</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>iterator</name><operator>-&gt;</operator><name>direction</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>node_page</name></name> <operator>=</operator> <name><name>skiplist</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>position</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<comment type="line">// first node_page is the index node, skip it</comment>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_skiplist_iterator_next</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>iterator</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>node_page</name></name> <operator>=</operator> <name><name>skiplist</name><operator>-&gt;</operator><name>right</name></name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></else></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>size</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>skiplist</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>position</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>_iterator</name> <operator>=</operator> <name>iterator</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_skiplist_iterator_destroy</name><parameter_list>(<parameter><function_decl><type><name>rlite</name> <modifier>*</modifier></type><name>UNUSED</name><parameter_list>(<parameter><decl><type><name>db</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>rl_skiplist_iterator</name> <modifier>*</modifier></type><name>iterator</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>RL_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>rl_skiplist_iterator_next</name><parameter_list>(<parameter><decl><type><name>rl_skiplist_iterator</name> <modifier>*</modifier></type><name>iterator</name></decl></parameter>, <parameter><decl><type><name>rl_skiplist_node</name> <modifier>*</modifier><modifier>*</modifier></type><name>retnode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>iterator</name><operator>-&gt;</operator><name>node_page</name></name> <operator>||</operator> <name><name>iterator</name><operator>-&gt;</operator><name>position</name></name> <operator>==</operator> <name><name>iterator</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_END</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>_node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_skiplist_node</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name><name>iterator</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_data_type_skiplist_node</name></expr></argument>, <argument><expr><name><name>iterator</name><operator>-&gt;</operator><name>node_page</name></name></expr></argument>, <argument><expr><name><name>iterator</name><operator>-&gt;</operator><name>skiplist</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_node</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>node</name> <operator>=</operator> <name>_node</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>iterator</name><operator>-&gt;</operator><name>direction</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>node_page</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>level</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>right</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>node_page</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>retnode</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>retnode</name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>position</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>rl_skiplist_iterator_destroy</name><argument_list>(<argument><expr><name><name>iterator</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rl_skiplist_get_update</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>rl_skiplist</name> <modifier>*</modifier></type><name>skiplist</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>score</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>exclude</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>valuelen</name></decl></parameter>, <parameter><decl><type><name>rl_skiplist_node</name> <modifier>*</modifier></type><name><name>update_node</name><index>[<expr><name>RL_SKIPLIST_MAXLEVEL</name></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name><name>update_node_page</name><index>[<expr><name>RL_SKIPLIST_MAXLEVEL</name></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name><name>rank</name><index>[<expr><name>RL_SKIPLIST_MAXLEVEL</name></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>_node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_skiplist_node</name> <modifier>*</modifier></type><name>node</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next_node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>node_page</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>update_node_page</name></expr>)</condition> <block>{<block_content>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>RL_SKIPLIST_MAXLEVEL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name><name>update_node_page</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>cmp</name></decl>, <decl><type ref="prev"/><name>retval</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_data_type_skiplist_node</name></expr></argument>, <argument><expr><name><name>skiplist</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_node</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>update_node_page</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>update_node_page</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>skiplist</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>node_page</name> <operator>=</operator> <name><name>skiplist</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>node</name> <operator>=</operator> <name>_node</name></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>skiplist</name><operator>-&gt;</operator><name>level</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>rank</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>rank</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>i</name> <operator>==</operator> <operator>(</operator><name><name>skiplist</name><operator>-&gt;</operator><name>level</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>rank</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>level</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>right</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_data_type_skiplist_node</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_node</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>next_node</name> <operator>=</operator> <name>_node</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>next_node</name><operator>-&gt;</operator><name>score</name></name> <operator>&gt;</operator> <name>score</name></expr>)</condition> <block>{<block_content>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>next_node</name><operator>-&gt;</operator><name>score</name></name> <operator>==</operator> <name>score</name></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name>exclude</name></expr>)</condition> <block>{<block_content>
						<break>break;</break>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></if>
				<else>else <block>{<block_content>
					<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_multi_string_cmp_str</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>next_node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>valuelen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>cmp</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>exclude</name><operator>)</operator></expr>)</condition> <block>{<block_content>
						<break>break;</break>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>rank</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>rank</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>node</name><operator>-&gt;</operator><name>level</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>span</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>node</name> <operator>=</operator> <name>next_node</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>node_page</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
		</block_content>}</block></while>
		<expr_stmt><expr><name><name>update_node</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>update_node_page</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>update_node_page</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>node_page</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_skiplist_add</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>rl_skiplist</name> <modifier>*</modifier></type><name>skiplist</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>skiplist_page</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>score</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>valuelen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>_node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_skiplist_node</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>node_page</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name><name>rank</name><index>[<expr><name>RL_SKIPLIST_MAXLEVEL</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_skiplist_node</name> <modifier>*</modifier></type><name><name>update_node</name><index>[<expr><name>RL_SKIPLIST_MAXLEVEL</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name><name>update_node_page</name><index>[<expr><name>RL_SKIPLIST_MAXLEVEL</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>value_page</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_multi_string_set</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value_page</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>valuelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_skiplist_get_update</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><name>score</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>valuelen</name></expr></argument>, <argument><expr><name>update_node</name></expr></argument>, <argument><expr><name>update_node_page</name></expr></argument>, <argument><expr><name>rank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>level</name> <init>= <expr><call><name>rl_skiplist_random_level</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&gt;</operator> <name><name>skiplist</name><operator>-&gt;</operator><name>level</name></name></expr>)</condition> <block>{<block_content>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>skiplist</name><operator>-&gt;</operator><name>level</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>level</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name><name>rank</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_data_type_skiplist_node</name></expr></argument>, <argument><expr><name><name>skiplist</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_node</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>update_node</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>_node</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>update_node</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>level</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>span</name> <operator>=</operator> <name><name>skiplist</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>update_node_page</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>skiplist</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><name><name>skiplist</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_skiplist_node_create</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>score</name></expr></argument>, <argument><expr><name>value_page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>node_page</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>next_empty_page</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_write</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_data_type_skiplist_node</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>next_empty_page</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>level</name> <operator>||</operator> <name>i</name> <operator>&lt;</operator> <name><name>skiplist</name><operator>-&gt;</operator><name>level</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>level</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>level</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>right</name> <operator>=</operator> <name><name>update_node</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>level</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>right</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>update_node</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>level</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>right</name> <operator>=</operator> <name>node_page</name></expr>;</expr_stmt>

			<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>level</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>span</name> <operator>=</operator> <name><name>update_node</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>level</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>span</name> <operator>-</operator> <operator>(</operator><name><name>rank</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>rank</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>update_node</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>level</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>span</name> <operator>=</operator> <operator>(</operator><name><name>rank</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>rank</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_write</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_data_type_skiplist_node</name></expr></argument>, <argument><expr><name><name>update_node_page</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>update_node</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>level</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>skiplist</name><operator>-&gt;</operator><name>level</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>update_node</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>level</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>span</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>update_node_page</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>skiplist</name><operator>-&gt;</operator><name>left</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>update_node_page</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>level</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>right</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>node_page</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>node_page</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>level</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>right</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_data_type_skiplist_node</name></expr></argument>, <argument><expr><name>node_page</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_node</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>node</name> <operator>=</operator> <name>_node</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_write</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_data_type_skiplist_node</name></expr></argument>, <argument><expr><name>node_page</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><name><name>skiplist</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <name>node_page</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name><name>skiplist</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_write</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_data_type_skiplist</name></expr></argument>, <argument><expr><name>skiplist_page</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 *
 * RL_SKIPLIST_BEFORE_SCORE is the last node before the score and value
 * RL_SKIPLIST_UPTO_SCORE is the last node before the range, including exact match
 * RL_SKIPLIST_INCLUDE_SCORE is the first node in the range, including exact match
 * RL_SKIPLIST_EXCLUDE_SCORE is the first node in the range, excluding exact match
 */</comment>
<function><type><name>int</name></type> <name>rl_skiplist_first_node</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>rl_skiplist</name> <modifier>*</modifier></type><name>skiplist</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>score</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>range_mode</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>valuelen</name></decl></parameter>, <parameter><decl><type><name>rl_skiplist_node</name> <modifier>*</modifier><modifier>*</modifier></type><name>retnode</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>_rank</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>rl_skiplist_node</name> <modifier>*</modifier></type><name><name>update_node</name><index>[<expr><name>RL_SKIPLIST_MAXLEVEL</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name><name>rank</name><index>[<expr><name>RL_SKIPLIST_MAXLEVEL</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>exclude</name> <init>= <expr><ternary><condition><expr><name>range_mode</name> <operator>==</operator> <name>RL_SKIPLIST_BEFORE_SCORE</name> <operator>||</operator> <name>range_mode</name> <operator>==</operator> <name>RL_SKIPLIST_UPTO_SCORE</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>cmp</name></decl>, <decl><type ref="prev"/><name>return_retnode</name> <init>= <expr><name>exclude</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_skiplist_get_update</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><name>score</name></expr></argument>, <argument><expr><name>exclude</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>valuelen</name></expr></argument>, <argument><expr><name>update_node</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>rank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>range_mode</name> <operator>==</operator> <name>RL_SKIPLIST_INCLUDE_SCORE</name> <operator>&amp;&amp;</operator> <name><name>update_node</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>value</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>update_node</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>score</name> <operator>==</operator> <name>score</name> <operator>||</operator> <name><name>update_node</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>score</name> <operator>&gt;</operator> <name>score</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name> <operator>||</operator> <operator>!</operator><name><name>update_node</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>value</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>cmp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else <block>{<block_content>
				<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_multi_string_cmp_str</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>update_node</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>value</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>valuelen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>return_retnode</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>range_mode</name> <operator>==</operator> <name>RL_SKIPLIST_UPTO_SCORE</name> <operator>&amp;&amp;</operator> <name><name>update_node</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>level</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>right</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_data_type_skiplist_node</name></expr></argument>, <argument><expr><name><name>update_node</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>level</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>right</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>update_node</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>update_node</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>score</name> <operator>==</operator> <name>score</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>cmp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else <block>{<block_content>
				<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_multi_string_cmp_str</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>update_node</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>value</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>valuelen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>return_retnode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>_rank</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>_rank</name> <operator>=</operator> <name><name>rank</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>return_retnode</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>return_retnode</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>retnode</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>retnode</name> <operator>=</operator> <name><name>update_node</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_FOUND</name></expr>;</expr_stmt>

		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>update_node</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>level</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>right</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>retnode</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_data_type_skiplist_node</name></expr></argument>, <argument><expr><name><name>update_node</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>level</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>right</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>retnode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_FOUND</name></expr>;</expr_stmt>

		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_NOT_FOUND</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_skiplist_delete</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>rl_skiplist</name> <modifier>*</modifier></type><name>skiplist</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>skiplist_page</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>score</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>valuelen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>rl_skiplist_node</name> <modifier>*</modifier></type><name><name>update_node</name><index>[<expr><name>RL_SKIPLIST_MAXLEVEL</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name><name>update_node_page</name><index>[<expr><name>RL_SKIPLIST_MAXLEVEL</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_skiplist_get_update</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><name>score</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>valuelen</name></expr></argument>, <argument><expr><name>update_node</name></expr></argument>, <argument><expr><name>update_node_page</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>_node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_skiplist_node</name> <modifier>*</modifier></type><name>node</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next_node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>node_page</name> <init>= <expr><name><name>update_node</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>level</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>right</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_data_type_skiplist_node</name></expr></argument>, <argument><expr><name>node_page</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_node</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>node</name> <operator>=</operator> <name>_node</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>cmp</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_multi_string_cmp_str</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>valuelen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>score</name></name> <operator>!=</operator> <name>score</name> <operator>||</operator> <name>cmp</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_NOT_FOUND</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>skiplist</name><operator>-&gt;</operator><name>level</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>update_node</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>level</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>right</name> <operator>==</operator> <name>node_page</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>update_node</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>level</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>span</name> <operator>+=</operator> <name><name>node</name><operator>-&gt;</operator><name>level</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>span</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>update_node</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>level</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>right</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>level</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>right</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><name><name>update_node</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>level</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>span</name><operator>--</operator></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_write</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_data_type_skiplist_node</name></expr></argument>, <argument><expr><name><name>update_node_page</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>update_node</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<decl_stmt><decl><type><name>long</name></type> <name>next_node_page</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>level</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>right</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>next_node_page</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_data_type_skiplist_node</name></expr></argument>, <argument><expr><name>next_node_page</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_node</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>next_node</name> <operator>=</operator> <name>_node</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>next_node</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_write</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_data_type_skiplist_node</name></expr></argument>, <argument><expr><name>next_node_page</name></expr></argument>, <argument><expr><name>next_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><name><name>skiplist</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_multi_string_delete</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_delete</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>node_page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>node_page</name> <operator>=</operator> <name><name>skiplist</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_data_type_skiplist_node</name></expr></argument>, <argument><expr><name><name>skiplist</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_node</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>node</name> <operator>=</operator> <name>_node</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name><name>skiplist</name><operator>-&gt;</operator><name>level</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>level</name><index>[<expr><name><name>skiplist</name><operator>-&gt;</operator><name>level</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>right</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>skiplist</name><operator>-&gt;</operator><name>level</name></name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<if_stmt><if>if <condition>(<expr><name><name>skiplist</name><operator>-&gt;</operator><name>size</name></name><operator>--</operator> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_write</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_data_type_skiplist</name></expr></argument>, <argument><expr><name>skiplist_page</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_delete</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>node_page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_delete</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>skiplist_page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_DELETED</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_skiplist_delete_all</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>rl_skiplist</name> <modifier>*</modifier></type><name>skiplist</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>RL_OK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>page</name> <init>= <expr><name><name>skiplist</name><operator>-&gt;</operator><name>left</name></name></expr></init></decl>, <decl><type ref="prev"/><name>next_page</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>_node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_skiplist_node</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
	<while>while <condition>(<expr><name>page</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_data_type_skiplist_node</name></expr></argument>, <argument><expr><name>page</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_node</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>node</name> <operator>=</operator> <name>_node</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>next_page</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>level</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>right</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_multi_string_delete</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_delete</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>page</name> <operator>=</operator> <name>next_page</name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>RL_DEBUG</name></cpp:ifdef>
<function><type><name>int</name></type> <name>rl_skiplist_print</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>rl_skiplist</name> <modifier>*</modifier></type><name>skiplist</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"left: %ld, right: %ld, size: %ld, level: %ld\n"</literal></expr></argument>, <argument><expr><name><name>skiplist</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>skiplist</name><operator>-&gt;</operator><name>right</name></name></expr></argument>, <argument><expr><name><name>skiplist</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>skiplist</name><operator>-&gt;</operator><name>level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>page</name> <init>= <expr><name><name>skiplist</name><operator>-&gt;</operator><name>left</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>_node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_skiplist_node</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>page</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>j</name><operator>++</operator> <operator>&gt;</operator> <name><name>skiplist</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Too many nodes, expected %ld\n"</literal></expr></argument>, <argument><expr><name><name>skiplist</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>RL_UNEXPECTED</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_data_type_skiplist_node</name></expr></argument>, <argument><expr><name>page</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_node</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>node</name> <operator>=</operator> <name>_node</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"page: %ld, value: %ld, score: %lf, left: %ld"</literal></expr></argument>, <argument><expr><name>page</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>score</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>num_levels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>level</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>right</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">", level[%ld].right: %ld, level[%ld].span: %ld"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>level</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>right</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>level</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>span</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>page</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>level</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>right</name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>rl_skiplist_is_balanced</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>rl_skiplist</name> <modifier>*</modifier></type><name>skiplist</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name></type> <name>page</name> <init>= <expr><name><name>skiplist</name><operator>-&gt;</operator><name>left</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>_node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_skiplist_node</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_skiplist_node</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <modifier>*</modifier></type><name>nodes_page</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>nodes</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rl_skiplist_node</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>skiplist</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>nodes_page</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>skiplist</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>page</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <name><name>skiplist</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Too many nodes, expected %ld\n"</literal></expr></argument>, <argument><expr><name><name>skiplist</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_UNEXPECTED</name></expr>;</expr_stmt>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>nodes_page</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>page</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_data_type_skiplist_node</name></expr></argument>, <argument><expr><name>page</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_node</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>node</name> <operator>=</operator> <name>_node</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>nodes</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>page</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>level</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>right</name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name><name>skiplist</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Number of nodes (%ld) doesn't match skiplist size (%ld)\n"</literal></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>skiplist</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_UNEXPECTED</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>cmp</name></decl>;</decl_stmt>

	<comment type="line">// node 0 is not really a value node, ignore it</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>skiplist</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>nodes</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>score</name> <operator>&gt;</operator> <name><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>score</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"skiplist score is not sorted at position %ld (%lf &gt; %lf)\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>nodes</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>score</name></expr></argument>, <argument><expr><name><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>score</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_UNEXPECTED</name></expr>;</expr_stmt>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name><name>nodes</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>score</name> <operator>==</operator> <name><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>score</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_multi_string_cmp</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>nodes</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>value</name></expr></argument>, <argument><expr><name><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"skiplist score is not sorted at position %ld (same score, cmp is %d)\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_UNEXPECTED</name></expr>;</expr_stmt>
				<goto>goto <name>cleanup</name>;</goto>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>skiplist</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>left</name> <operator>!=</operator> <name><name>nodes_page</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"expected skiplist node[%ld] left page to be %ld, got %ld\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>nodes_page</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_UNEXPECTED</name></expr>;</expr_stmt>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<decl_stmt><decl><type><name>long</name></type> <name>pos</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>skiplist</name><operator>-&gt;</operator><name>level</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>nodes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>level</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>right</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"There has to be at least one node in level %ld\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_UNEXPECTED</name></expr>;</expr_stmt>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name><name>node</name><operator>-&gt;</operator><name>level</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>span</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>page</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>level</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>right</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>page</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>nodes_page</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>!=</operator> <name>page</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"expected skiplist at level %ld node page to be %ld, got %ld\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>nodes_page</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>, <argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_UNEXPECTED</name></expr>;</expr_stmt>
				<goto>goto <name>cleanup</name>;</goto>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>nodes</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></for>

	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>nodes_page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>nodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name>rl_skiplist_serialize</name><argument_list>(<argument><expr>struct <name>rlite</name> <operator>*</operator><call><name>UNUSED</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>obj</name></expr></argument>, <argument><expr><name>unsigned</name> <name>char</name> <operator>*</operator><name>data</name></expr></argument>)</argument_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>rl_skiplist</name> <modifier>*</modifier></type><name>skiplist</name> <init>= <expr><name>obj</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>put_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>skiplist</name><operator>-&gt;</operator><name>left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>put_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>skiplist</name><operator>-&gt;</operator><name>right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>put_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>skiplist</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>put_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>skiplist</name><operator>-&gt;</operator><name>level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>RL_OK</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<function><type><name>int</name></type> <name>rl_skiplist_deserialize</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><function_decl><type><name>void</name> <modifier>*</modifier></type><name>UNUSED</name><parameter_list>(<parameter><decl><type><name>context</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>rl_skiplist</name> <modifier>*</modifier></type><name>skiplist</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_skiplist_malloc</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skiplist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>skiplist</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <call><name>get_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>skiplist</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <call><name>get_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>skiplist</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>get_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>skiplist</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <call><name>get_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>obj</name> <operator>=</operator> <name>skiplist</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name>rl_skiplist_node_serialize</name><argument_list>(<argument><expr>struct <name>rlite</name> <operator>*</operator><call><name>UNUSED</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>obj</name></expr></argument>, <argument><expr><name>unsigned</name> <name>char</name> <operator>*</operator><name>data</name></expr></argument>)</argument_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>rl_skiplist_node</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name>obj</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>put_4bytes</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>put_double</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>score</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>put_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>put_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>num_levels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>pos</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>num_levels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>put_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>level</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>put_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>level</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>span</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pos</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>RL_OK</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>int</name></type> <name>rl_skiplist_node_deserialize</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><function_decl><type><name>void</name> <modifier>*</modifier></type><name>UNUSED</name><parameter_list>(<parameter><decl><type><name>context</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>rl_skiplist_node</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>value</name> <init>= <expr><call><name>get_4bytes</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type> <name>score</name> <init>= <expr><call><name>get_double</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>left</name> <init>= <expr><call><name>get_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>level</name> <init>= <expr><call><name>get_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><empty_stmt>;</empty_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_skiplist_node_create</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>score</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <name>left</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>pos</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>num_levels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>level</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>right</name> <operator>=</operator> <call><name>get_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>level</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>span</name> <operator>=</operator> <call><name>get_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pos</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><operator>*</operator><name>obj</name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_skiplist_node_by_rank</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>rl_skiplist</name> <modifier>*</modifier></type><name>skiplist</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>rank</name></decl></parameter>, <parameter><decl><type><name>rl_skiplist_node</name> <modifier>*</modifier><modifier>*</modifier></type><name>retnode</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>retnode_page</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>_node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_skiplist_node</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>node_page</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="line">// increment the rank in 1 to ignore the first node thats not actually a data node</comment>
	<expr_stmt><expr><name>rank</name><operator>++</operator></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_data_type_skiplist_node</name></expr></argument>, <argument><expr><name><name>skiplist</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_node</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>node</name> <operator>=</operator> <name>_node</name></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>skiplist</name><operator>-&gt;</operator><name>level</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <name>rank</name></expr>)</condition> <block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>level</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>right</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>pos</name> <operator>+</operator> <name><name>node</name><operator>-&gt;</operator><name>level</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>span</name> <operator>&gt;</operator> <name>rank</name></expr>)</condition> <block>{<block_content>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name><name>node</name><operator>-&gt;</operator><name>level</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>span</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>node_page</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>level</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>right</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_data_type_skiplist_node</name></expr></argument>, <argument><expr><name>node_page</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_node</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>node</name> <operator>=</operator> <name>_node</name></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></for>
	<if_stmt><if>if <condition>(<expr><name>rank</name> <operator>!=</operator> <name>pos</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_NOT_FOUND</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>retnode</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>retnode</name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>retnode_page</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>retnode_page</name> <operator>=</operator> <name>node_page</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_skiplist_pages</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>rl_skiplist</name> <modifier>*</modifier></type><name>skiplist</name></decl></parameter>, <parameter><decl><type><name>short</name> <modifier>*</modifier></type><name>pages</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_skiplist_iterator</name> <modifier>*</modifier></type><name>iterator</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_skiplist_iterator_create</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iterator</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pages</name><index>[<expr><name><name>skiplist</name><operator>-&gt;</operator><name>right</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pages</name><index>[<expr><name><name>skiplist</name><operator>-&gt;</operator><name>left</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<do>do <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>iterator</name><operator>-&gt;</operator><name>node_page</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>pages</name><index>[<expr><name><name>iterator</name><operator>-&gt;</operator><name>node_page</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>
	while <condition>(<expr><operator>(</operator><name>retval</name> <operator>=</operator> <call><name>rl_skiplist_iterator_next</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>RL_OK</name></expr>)</condition>;</do>
	<expr_stmt><expr><name>iterator</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_END</name></expr>)</condition> <block>{<block_content>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>rl_skiplist_iterator_destroy</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>
</unit>
