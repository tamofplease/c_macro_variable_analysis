<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/rlite/src/page_list.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/rlite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/status.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/page_list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/page_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/util.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>RL_DEBUG</name></cpp:ifdef>
<function_decl><type><name>int</name></type> <name>rl_print_list_node</name><parameter_list>(<parameter><decl><type><name>rl_list</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>rl_list_node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><name>int</name></type> <name>rl_list_node_create</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>rl_list</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>rl_list_node</name> <modifier>*</modifier><modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>rl_list_type</name></type> <name>rl_list_type_long</name> <init>= <expr><block>{
	<expr><operator>&amp;</operator><name>rl_data_type_list_long</name></expr>,
	<expr><operator>&amp;</operator><name>rl_data_type_list_node_long</name></expr>,
	<expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr>,
	<expr><name>long_cmp</name></expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>RL_DEBUG</name></cpp:ifdef>
	<expr><name>long_formatter</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>rl_list_serialize</name><parameter_list>(<parameter><function_decl><type><name>rlite</name> <modifier>*</modifier></type><name>UNUSED</name><parameter_list>(<parameter><decl><type><name>db</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>rl_list</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name>obj</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>put_4bytes</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>put_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>put_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>max_node_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>put_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>RL_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_list_deserialize</name><parameter_list>(<parameter><function_decl><type><name>rlite</name> <modifier>*</modifier></type><name>UNUSED</name><parameter_list>(<parameter><decl><type><name>db</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>rl_list</name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>RL_OK</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>list</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <call><name>get_4bytes</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <call><name>get_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>max_node_size</name></name> <operator>=</operator> <call><name>get_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>get_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>obj</name> <operator>=</operator> <name>list</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_list_node_serialize_long</name><parameter_list>(<parameter><function_decl><type><name>rlite</name> <modifier>*</modifier></type><name>UNUSED</name><parameter_list>(<parameter><decl><type><name>db</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>rl_list_node</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name>obj</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>put_4bytes</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>put_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>put_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>pos</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>put_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pos</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>RL_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_list_node_deserialize_long</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>rl_list</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name>context</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_list_node</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>pos</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_list_node_create</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>get_4bytes</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>get_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>get_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call>
		<operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name><name>node</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pos</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><operator>*</operator><name>obj</name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name> <operator>&amp;&amp;</operator> <name>node</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rl_list_node_destroy</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_list_node_create</name><parameter_list>(<parameter><function_decl><type><name>rlite</name> <modifier>*</modifier></type><name>UNUSED</name><parameter_list>(<parameter><decl><type><name>db</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>rl_list</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>rl_list_node</name> <modifier>*</modifier><modifier>*</modifier></type><name>_node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_list_node</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rl_list_node</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>elements</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>list</name><operator>-&gt;</operator><name>max_node_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>_node</name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>node</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>elements</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_list_node_destroy</name><parameter_list>(<parameter><function_decl><type><name>rlite</name> <modifier>*</modifier></type><name>UNUSED</name><parameter_list>(<parameter><decl><type><name>db</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>rl_list_node</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name>_node</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>elements</name></name></expr>)</condition> <block>{<block_content>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>elements</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_list_create</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>rl_list</name> <modifier>*</modifier><modifier>*</modifier></type><name>_list</name></decl></parameter>, <parameter><decl><type><name>rl_list_type</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_list</name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>
	<macro><name>RL_MALLOC</name><argument_list>(<argument>list</argument>, <argument>sizeof(rl_list)</argument>)</argument_list></macro>
	<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>max_node_size</name></name> <operator>=</operator> <operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>page_size</name></name> <operator>-</operator> <literal type="number">12</literal><operator>)</operator> <operator>/</operator> <name><name>type</name><operator>-&gt;</operator><name>element_size</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>rl_list_node</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_list_node_create</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>next_empty_page</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_write</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>list_node_type</name></name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>next_empty_page</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>_list</name> <operator>=</operator> <name>list</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>rl_list_destroy</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_list_destroy</name><parameter_list>(<parameter><function_decl><type><name>rlite</name> <modifier>*</modifier></type><name>UNUSED</name><parameter_list>(<parameter><decl><type><name>db</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>RL_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_list_find_element</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>rl_list</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>element</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>found_element</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>position</name></decl></parameter>, <parameter><decl><type><name>rl_list_node</name> <modifier>*</modifier><modifier>*</modifier></type><name>found_node</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>found_node_page</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>list</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>cmp</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Trying to find an element without cmp\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>RL_UNEXPECTED</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>_node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_list_node</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>number</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>left</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>RL_OK</name></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name>number</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>list_node_type</name></name></expr></argument>, <argument><expr><name>number</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_node</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>node</name> <operator>=</operator> <name>_node</name></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name><name>list</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>cmp</name></name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>element</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>found_node_page</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><operator>*</operator><name>found_node_page</name> <operator>=</operator> <name>number</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><name>found_node</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><operator>*</operator><name>found_node</name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><name>found_element</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><operator>*</operator><name>found_element</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><name>position</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><operator>*</operator><name>position</name> <operator>=</operator> <name>pos</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_FOUND</name></expr>;</expr_stmt>
				<goto>goto <name>cleanup</name>;</goto>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name><name>node</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>number</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>right</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_NOT_FOUND</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rl_find_element_by_position</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>rl_list</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>position</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>_pos</name></decl></parameter>, <parameter><decl><type><name>rl_list_node</name> <modifier>*</modifier><modifier>*</modifier></type><name>_node</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>_number</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>add</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>rl_list_node</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tmp_node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>number</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>position</name> <operator>&gt;=</operator> <name><name>list</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <name>add</name> <operator>||</operator> <operator>*</operator><name>position</name> <operator>&lt;=</operator> <operator>-</operator> <name><name>list</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>add</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>RL_INVALID_PARAMETERS</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>RL_OK</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>position</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>number</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt>
		<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>list_node_type</name></name></expr></argument>, <argument><expr><name>number</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_node</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>node</name> <operator>=</operator> <name>tmp_node</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>+</operator> <name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <operator>*</operator><name>position</name></expr>)</condition> <block>{<block_content>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>right</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>number</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>right</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name><name>node</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else <block>{<block_content>
				<break>break;</break>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></while>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>position</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <operator>*</operator><name>position</name> <operator>+</operator> <name>add</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>number</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>right</name></name></expr>;</expr_stmt>
		<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>list_node_type</name></name></expr></argument>, <argument><expr><name>number</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_node</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>node</name> <operator>=</operator> <name>tmp_node</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>pos</name> <operator>-=</operator> <name><name>node</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;=</operator> <operator>*</operator><name>position</name></expr>)</condition> <block>{<block_content>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>left</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>number</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else <block>{<block_content>
				<break>break;</break>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></while>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>_pos</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>_node</name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>_number</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>_number</name> <operator>=</operator> <name>number</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_list_get_element</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>rl_list</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>element</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>position</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name></type> <name>pos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_list_node</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_find_element_by_position</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>position</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>element</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name>position</name> <operator>-</operator> <name>pos</name></expr>]</index></name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_list_add_element</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>rl_list</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>list_page</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>element</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>position</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>rl_list_node</name> <modifier>*</modifier></type><name>node</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sibling_node</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>new_node</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>old_node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>pos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>number</name></decl>, <decl><type ref="prev"/><name>sibling_number</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>_node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_find_element_by_position</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>position</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>number</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>!=</operator> <name><name>list</name><operator>-&gt;</operator><name>max_node_size</name></name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>position</name> <operator>-</operator> <name>pos</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>list</name><operator>-&gt;</operator><name>max_node_size</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name>position</name> <operator>-</operator> <name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name>position</name> <operator>-</operator> <name>pos</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <operator>(</operator><name>position</name> <operator>-</operator> <name>pos</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name>position</name> <operator>-</operator> <name>pos</name></expr>]</index></name> <operator>=</operator> <name>element</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>element</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_write</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>list_node_type</name></name></expr></argument>, <argument><expr><name>number</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>left</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>sibling_number</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>list_node_type</name></name></expr></argument>, <argument><expr><name>sibling_number</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_node</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>sibling_node</name> <operator>=</operator> <name>_node</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>sibling_node</name><operator>-&gt;</operator><name>size</name></name> <operator>!=</operator> <name><name>list</name><operator>-&gt;</operator><name>max_node_size</name></name></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>position</name> <operator>==</operator> <name>pos</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name><name>sibling_node</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name><name>sibling_node</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name> <operator>=</operator> <name>element</name></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else <block>{<block_content>
					<expr_stmt><expr><name><name>sibling_node</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name><name>sibling_node</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>elements</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>elements</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>elements</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>position</name> <operator>-</operator> <name>pos</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name>position</name> <operator>-</operator> <name>pos</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>element</name></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
				<expr_stmt><expr><name>element</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>sibling_node</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_write</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>list_node_type</name></name></expr></argument>, <argument><expr><name>number</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_write</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>list_node_type</name></name></expr></argument>, <argument><expr><name>sibling_number</name></expr></argument>, <argument><expr><name>sibling_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<goto>goto <name>succeeded</name>;</goto>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>right</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>sibling_number</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>right</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>list_node_type</name></name></expr></argument>, <argument><expr><name>sibling_number</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_node</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>sibling_node</name> <operator>=</operator> <name>_node</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>sibling_node</name><operator>-&gt;</operator><name>size</name></name> <operator>!=</operator> <name><name>list</name><operator>-&gt;</operator><name>max_node_size</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sibling_node</name><operator>-&gt;</operator><name>elements</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sibling_node</name><operator>-&gt;</operator><name>elements</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>sibling_node</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>position</name> <operator>-</operator> <name>pos</name> <operator>==</operator> <name><name>node</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name><name>sibling_node</name><operator>-&gt;</operator><name>elements</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>element</name></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else <block>{<block_content>
					<expr_stmt><expr><name><name>sibling_node</name><operator>-&gt;</operator><name>elements</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name>position</name> <operator>-</operator> <name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name>position</name> <operator>-</operator> <name>pos</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>position</name> <operator>+</operator> <name>pos</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name>position</name> <operator>-</operator> <name>pos</name></expr>]</index></name> <operator>=</operator> <name>element</name></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
				<expr_stmt><expr><name>element</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>sibling_node</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_write</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>list_node_type</name></name></expr></argument>, <argument><expr><name>number</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_write</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>list_node_type</name></name></expr></argument>, <argument><expr><name>sibling_number</name></expr></argument>, <argument><expr><name>sibling_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<goto>goto <name>succeeded</name>;</goto>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_list_node_create</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>position</name> <operator>-</operator> <name>pos</name> <operator>==</operator> <name><name>node</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>new_node</name><operator>-&gt;</operator><name>elements</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>element</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><name><name>new_node</name><operator>-&gt;</operator><name>elements</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name>position</name> <operator>-</operator> <name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name>position</name> <operator>-</operator> <name>pos</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>position</name> <operator>+</operator> <name>pos</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name>position</name> <operator>-</operator> <name>pos</name></expr>]</index></name> <operator>=</operator> <name>element</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name>element</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>new_node</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>new_node</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <name>number</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>new_node</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>right</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>next_empty_page</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_write</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>list_node_type</name></name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>next_empty_page</name></name></expr></argument>, <argument><expr><name>new_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_write</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>list_node_type</name></name></expr></argument>, <argument><expr><name>number</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>new_node</name><operator>-&gt;</operator><name>right</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>list_node_type</name></name></expr></argument>, <argument><expr><name><name>new_node</name><operator>-&gt;</operator><name>right</name></name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_node</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>old_node</name> <operator>=</operator> <name>_node</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>old_node</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>right</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_write</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>list_node_type</name></name></expr></argument>, <argument><expr><name><name>new_node</name><operator>-&gt;</operator><name>right</name></name></expr></argument>, <argument><expr><name>old_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>right</name></name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></else></if_stmt>

<label><name>succeeded</name>:</label>
	<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_write</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>list_type</name></name></expr></argument>, <argument><expr><name>list_page</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_list_remove_element</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>rl_list</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>list_page</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>position</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>rl_list_node</name> <modifier>*</modifier></type><name>node</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sibling_node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>pos</name></decl>, <decl><type ref="prev"/><name>number</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>_node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_find_element_by_position</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>position</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>number</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <operator>(</operator><name>position</name> <operator>-</operator> <name>pos</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name>position</name> <operator>-</operator> <name>pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name>position</name> <operator>-</operator> <name>pos</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name>position</name> <operator>-</operator> <name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <operator>(</operator><name>position</name> <operator>-</operator> <name>pos</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>list</name><operator>-&gt;</operator><name>left</name></name> <operator>==</operator> <name>number</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>right</name></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>list</name><operator>-&gt;</operator><name>right</name></name> <operator>==</operator> <name>number</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>left</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>list_node_type</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_node</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>sibling_node</name> <operator>=</operator> <name>_node</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>sibling_node</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>right</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_write</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>list_node_type</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><name>sibling_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>right</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>list_node_type</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>right</name></name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_node</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>sibling_node</name> <operator>=</operator> <name>_node</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>sibling_node</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_write</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>list_node_type</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>right</name></name></expr></argument>, <argument><expr><name>sibling_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_delete</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>left</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>list_node_type</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_node</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>sibling_node</name> <operator>=</operator> <name>_node</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>sibling_node</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;=</operator> <name><name>list</name><operator>-&gt;</operator><name>max_node_size</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sibling_node</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name><name>sibling_node</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>elements</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>node</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>sibling_node</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>right</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>sibling_node</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <name><name>node</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_write</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>list_node_type</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><name>sibling_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>right</name></name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>list_node_type</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>right</name></name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_node</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>sibling_node</name> <operator>=</operator> <name>_node</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>sibling_node</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_write</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>list_node_type</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>right</name></name></expr></argument>, <argument><expr><name>sibling_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else <block>{<block_content>
					<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
				<comment type="line">// don't rl_free each element</comment>
				<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>elements</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>elements</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_delete</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<goto>goto <name>succeeded</name>;</goto>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>right</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>list_node_type</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>right</name></name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_node</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>sibling_node</name> <operator>=</operator> <name>_node</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>sibling_node</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;=</operator> <name><name>list</name><operator>-&gt;</operator><name>max_node_size</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sibling_node</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>sibling_node</name><operator>-&gt;</operator><name>elements</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>sibling_node</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>sibling_node</name><operator>-&gt;</operator><name>elements</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>elements</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>node</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>sibling_node</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>sibling_node</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <name><name>node</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_write</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>list_node_type</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>right</name></name></expr></argument>, <argument><expr><name>sibling_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>left</name></name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>list_node_type</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_node</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>sibling_node</name> <operator>=</operator> <name>_node</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>sibling_node</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>right</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_write</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>list_node_type</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><name>sibling_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else <block>{<block_content>
					<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>right</name></name></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
				<comment type="line">// don't rl_free each element</comment>
				<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>elements</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>elements</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_delete</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<goto>goto <name>succeeded</name>;</goto>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_write</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>list_node_type</name></name></expr></argument>, <argument><expr><name>number</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
<label><name>succeeded</name>:</label>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>size</name></name><operator>--</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>list</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_delete</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>list_page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_DELETED</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_write</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>list_type</name></name></expr></argument>, <argument><expr><name>list_page</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_list_is_balanced</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>rl_list</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>rl_list_iterator</name> <modifier>*</modifier></type><name>iterator</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>number</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>left</name></name></expr></init></decl>, <decl><type ref="prev"/><name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>prev_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>max_node</name> <init>= <expr><operator>(</operator><name><name>list</name><operator>-&gt;</operator><name>size</name></name> <operator>/</operator> <name><name>list</name><operator>-&gt;</operator><name>max_node_size</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>RL_OK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <modifier>*</modifier></type><name>left</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <modifier>*</modifier></type><name>right</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>right</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>max_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>max_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>rl_list_node</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>_node</name></decl>;</decl_stmt>
	<while>while <condition>(<expr><name>number</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>list_node_type</name></name></expr></argument>, <argument><expr><name>number</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_node</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>node</name> <operator>=</operator> <name>_node</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>size</name> <operator>+=</operator> <name><name>node</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>left</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>right</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>right</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <name>prev_size</name> <operator>&lt;</operator> <name><name>list</name><operator>-&gt;</operator><name>max_node_size</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Two continous node could be merged\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_INVALID_STATE</name></expr>;</expr_stmt>
				<goto>goto <name>cleanup</name>;</goto>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Empty node in list\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_INVALID_STATE</name></expr>;</expr_stmt>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>prev_size</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>number</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>right</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>right</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <name><name>left</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Left and right pointers mismatch at position %ld\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_INVALID_STATE</name></expr>;</expr_stmt>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>size</name> <operator>!=</operator> <name><name>list</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Expected size %ld, got %ld\n"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_UNEXPECTED</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_list_iterator_create</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iterator</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>retval</name> <operator>=</operator> <call><name>rl_list_iterator_next</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_END</name></expr>)</condition> <block>{<block_content>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>size</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Expected to iterate %ld times but only did %ld\n"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_UNEXPECTED</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_list_iterator_create</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iterator</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>retval</name> <operator>=</operator> <call><name>rl_list_iterator_next</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_END</name></expr>)</condition> <block>{<block_content>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>size</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Expected to iterate %ld times but only did %ld\n"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_UNEXPECTED</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>RL_DEBUG</name></cpp:ifdef>
<function><type><name>int</name></type> <name>rl_print_list</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>rl_list</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>list</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>formatter</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Trying to print an element without formatter\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>RL_UNEXPECTED</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>rl_list_node</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>_node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>element</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>number</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>left</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>RL_OK</name></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name>number</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>list_node_type</name></name></expr></argument>, <argument><expr><name>number</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_node</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>node</name> <operator>=</operator> <name>_node</name></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>formatter</name></name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>element</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>element</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><name>number</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>right</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>rl_flatten_list</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>rl_list</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>scores</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>number</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>left</name></name></expr></init></decl>, <decl><type ref="prev"/><name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_list_node</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>_node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>RL_OK</name></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name>number</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>list_node_type</name></name></expr></argument>, <argument><expr><name>number</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_node</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>node</name> <operator>=</operator> <name>_node</name></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name><name>scores</name><index>[<expr><name>pos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><name>number</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>right</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_list_iterator_create</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>rl_list_iterator</name> <modifier>*</modifier><modifier>*</modifier></type><name>_iterator</name></decl></parameter>, <parameter><decl><type><name>rl_list</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>direction</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>_node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_list_iterator</name> <modifier>*</modifier></type><name>iterator</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>iterator</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>db</name></name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>list</name></name> <operator>=</operator> <name>list</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>direction</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>direction</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>list_node_type</name></name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>right</name></name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_node</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <name>_node</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>node_position</name></name> <operator>=</operator> <name><name>iterator</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>direction</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>list_node_type</name></name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_node</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <name>_node</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>node_position</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>_iterator</name> <operator>=</operator> <name>iterator</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>iterator</name> <operator>&amp;&amp;</operator> <name>retval</name> <operator>!=</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>rl_list_iterator_destroy</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_list_iterator_destroy</name><parameter_list>(<parameter><function_decl><type><name>rlite</name> <modifier>*</modifier></type><name>UNUSED</name><parameter_list>(<parameter><decl><type><name>db</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>rl_list_iterator</name> <modifier>*</modifier></type><name>iterator</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>iterator</name><operator>-&gt;</operator><name>node</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>rl_list_node_nocache_destroy</name><argument_list>(<argument><expr><name><name>iterator</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>iterator</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>RL_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_list_iterator_next</name><parameter_list>(<parameter><decl><type><name>rl_list_iterator</name> <modifier>*</modifier></type><name>iterator</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>element</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>iterator</name><operator>-&gt;</operator><name>node</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_END</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>element</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><operator>*</operator><name>element</name></expr></argument>, <argument><expr><name><name>iterator</name><operator>-&gt;</operator><name>list</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>element_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>element</name></expr></argument>, <argument><expr><name><name>iterator</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>elements</name><index>[<expr><name><name>iterator</name><operator>-&gt;</operator><name>node_position</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>iterator</name><operator>-&gt;</operator><name>list</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>element_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>node_position</name></name> <operator>+=</operator> <name><name>iterator</name><operator>-&gt;</operator><name>direction</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>iterator</name><operator>-&gt;</operator><name>node_position</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>iterator</name><operator>-&gt;</operator><name>node_position</name></name> <operator>==</operator> <name><name>iterator</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>long</name></type> <name>next_node_page</name> <init>= <expr><ternary><condition><expr><name><name>iterator</name><operator>-&gt;</operator><name>direction</name></name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name><name>iterator</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>right</name></name></expr> </then><else>: <expr><name><name>iterator</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>left</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_list_node_nocache_destroy</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name><name>iterator</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>iterator</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>next_node_page</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>_node</name></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name><name>iterator</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>iterator</name><operator>-&gt;</operator><name>list</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>list_node_type</name></name></expr></argument>, <argument><expr><name>next_node_page</name></expr></argument>, <argument><expr><name><name>iterator</name><operator>-&gt;</operator><name>list</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_node</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <name>_node</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>node_position</name></name> <operator>=</operator> <ternary><condition><expr><name><name>iterator</name><operator>-&gt;</operator><name>direction</name></name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><name><name>iterator</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>iterator</name><operator>-&gt;</operator><name>node</name></name> <operator>&amp;&amp;</operator> <name><name>iterator</name><operator>-&gt;</operator><name>node_position</name></name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_UNEXPECTED</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>rl_list_iterator_destroy</name><argument_list>(<argument><expr><name><name>iterator</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_list_pages</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>rl_list</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>short</name> <modifier>*</modifier></type><name>pages</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>rl_list_node</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>_node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>number</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>left</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>RL_OK</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>pages</name><index>[<expr><name>number</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>number</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>list_node_type</name></name></expr></argument>, <argument><expr><name>number</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_node</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>node</name> <operator>=</operator> <name>_node</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>number</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>right</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>number</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>pages</name><index>[<expr><name>number</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_list_delete</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>rl_list</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>rl_list_node</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>_node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>number</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>left</name></name></expr></init></decl>, <decl><type ref="prev"/><name>new_number</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>RL_OK</name></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name>number</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>list_node_type</name></name></expr></argument>, <argument><expr><name>number</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_node</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>node</name> <operator>=</operator> <name>_node</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>new_number</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>right</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_delete</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>number</name> <operator>=</operator> <name>new_number</name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>
</unit>
