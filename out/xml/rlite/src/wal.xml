<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/rlite/src/wal.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/rlite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/flock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/sha1.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>RL_DEBUG</name></cpp:ifdef>
<function_decl><type><name>int</name></type> <name>rl_search_cache</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>rl_data_type</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>page_number</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>position</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>rl_page</name> <modifier>*</modifier><modifier>*</modifier></type><name>pages</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>page_len</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>identifier</name> <init>= <expr><literal type="string">"rlwal0.0"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>get_wal_filename</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>rl_get_filename_with_suffix</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">".wal"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rl_delete_wal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>wal_path</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>wal_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>RL_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rl_read_wal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>wal_path</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>_datalen</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>RL_OK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>datalen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name>wal_path</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// file does not exist! empty data, retval=ok are set</comment>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_flock</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>RLITE_FLOCK_EX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>datalen</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>ftell</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>rl_malloc</name><argument_list>(<argument><expr><name>datalen</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fread</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>datalen</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>_data</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>data</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>_datalen</name> <operator>=</operator> <name>datalen</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rl_apply_wal_data</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>datalen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>skip_check</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>skip_check</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>datalen</name> <operator>&lt;</operator> <literal type="number">36</literal> <operator>+</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>db</name><operator>-&gt;</operator><name>page_size</name></name></expr>)</condition> <block>{<block_content>
			<comment type="line">// too short to be a valid wal file</comment>
			<return>return <expr><name>RL_UNEXPECTED</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>identifier</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>identifier</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<comment type="line">// expected identifier</comment>
			<return>return <expr><name>RL_UNEXPECTED</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>SHA1_CTX</name></type> <name>sha</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>SHA1Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SHA1Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sha</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></argument>, <argument><expr><name>datalen</name> <operator>-</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SHA1Final</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<comment type="line">// digest mismatch</comment>
			<return>return <expr><name>RL_UNEXPECTED</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_file_driver</name> <modifier>*</modifier></type><name>driver</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>driver</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>written</name></decl>, <decl><type ref="prev"/><name>position</name> <init>= <expr><literal type="number">28</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>page_number</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>write_pages_len</name> <init>= <expr><call><name>get_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>position</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>position</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>readwrite</name> <init>= <expr><operator>(</operator><name><name>driver</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>RLITE_OPEN_READWRITE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_page</name> <modifier>*</modifier></type><name>page_obj</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>write_pages_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>page_number</name> <operator>=</operator> <call><name>get_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>position</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>position</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>readwrite</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><name>page_number</name> <operator>*</operator> <name><name>db</name><operator>-&gt;</operator><name>page_size</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>written</name> <operator>=</operator> <call><name>fwrite</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>position</name></expr>]</index></name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>page_size</name></name></expr></argument>, <argument><expr><name><name>driver</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>db</name><operator>-&gt;</operator><name>page_size</name></name> <operator>!=</operator> <name>written</name></expr>)</condition> <block>{<block_content>
				<comment type="line">// at this point we have corrupted the database</comment>
				<comment type="line">// we have written something, but not all of it</comment>
				<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_UNEXPECTED</name></expr>;</expr_stmt>
				<goto>goto <name>cleanup</name>;</goto>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<comment type="block" format="doxygen">/**
			 * Since we are in read-only mode, but the wal is fully written,
			 * we need to store its information as if it was written in the
			 * file, since it might be partially updated.
			 * We don't want to modify the file as a side effect when we are
			 * in a read only mode.
			 */</comment>

			<comment type="line">// TODO: better cleanup on OOM</comment>
			<expr_stmt><expr><call><name>rl_ensure_pages</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>page_obj</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>page_obj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>RL_DEBUG</name></cpp:ifdef>
			<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>page_obj</name><operator>-&gt;</operator><name>serialized_data</name></name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>page_size</name></name> <operator>*</operator> sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>page_obj</name><operator>-&gt;</operator><name>serialized_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>position</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>page_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<expr_stmt><expr><name><name>page_obj</name><operator>-&gt;</operator><name>page_number</name></name> <operator>=</operator> <name>page_number</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>page_obj</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>page_obj</name><operator>-&gt;</operator><name>obj</name></name> <operator>=</operator> <call><name>rl_malloc</name><argument_list>(<argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator> <name><name>db</name><operator>-&gt;</operator><name>page_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>page_obj</name><operator>-&gt;</operator><name>obj</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>page_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>RL_OUT_OF_MEMORY</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>page_obj</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>position</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>page_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>read_pages</name><index>[<expr><name><name>db</name><operator>-&gt;</operator><name>read_pages_len</name></name></expr>]</index></name> <operator>=</operator> <name>page_obj</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>read_pages_len</name></name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>page_number</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<comment type="line">// header has changed! need to parse it before using db-&gt;page_size</comment>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_header_deserialize</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>position</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>position</name> <operator>+=</operator> <name><name>db</name><operator>-&gt;</operator><name>page_size</name></name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>create_wal_data</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>_datalen</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// 20 (sha1) + 8 (header) + 4 (number of pages)</comment>
	<decl_stmt><decl><type><name>size_t</name></type> <name>datalen</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>write_pages_len</name></name> <operator>*</operator> <operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>page_size</name></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <literal type="number">32</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>retval</name> <init>= <expr><name>RL_OK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_page</name> <modifier>*</modifier></type><name>page</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SHA1_CTX</name></type> <name>sha</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>SHA1Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>datalen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>position</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>identifier</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>identifier</name></expr></argument>, <argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>position</name> <operator>+=</operator> <literal type="number">20</literal></expr>;</expr_stmt> <comment type="line">// leaving space blank for sha1</comment>
	<expr_stmt><expr><call><name>put_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>position</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>write_pages_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>position</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>db</name><operator>-&gt;</operator><name>write_pages_len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>page</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>write_pages</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>put_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>position</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>page</name><operator>-&gt;</operator><name>page_number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>position</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>position</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>page_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>page</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name><name>page</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>serialize</name></name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>page</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>position</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>position</name> <operator>+=</operator> <name><name>db</name><operator>-&gt;</operator><name>page_size</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SHA1Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sha</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>position</name> <operator>-</operator> <name><name>db</name><operator>-&gt;</operator><name>page_size</name></name> <operator>-</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>page_size</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>SHA1Final</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>identifier</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>_data</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>_datalen</name> <operator>=</operator> <name>datalen</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rl_write_wal_file</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>_datalen</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>datalen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>create_wal_data</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>datalen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>datalen</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>RL_OK</name> <operator>&amp;&amp;</operator> <name>_data</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>_data</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>_datalen</name> <operator>=</operator> <name>datalen</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>rl_write_wal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>wal_path</name></decl></parameter>, <parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>_datalen</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>wal_path</name></expr></argument>, <argument><expr><literal type="string">"wb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_flock</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>RLITE_FLOCK_EX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_write_wal_file</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>_data</name></expr></argument>, <argument><expr><name>_datalen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>fp</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_write_apply_wal</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>RL_OK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>page_number</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_page</name> <modifier>*</modifier></type><name>page</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>wal_path</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>datalen</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>RL_DEBUG</name></cpp:ifdef>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>db</name><operator>-&gt;</operator><name>read_pages_len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>page_size</name></name> <operator>*</operator> sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>page</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>read_pages</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>page_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name><name>page</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>serialize</name></name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>page</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>page</name><operator>-&gt;</operator><name>serialized_data</name></name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>page_size</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Read page %ld (%s) has changed\n"</literal></expr></argument>, <argument><expr><name><name>page</name><operator>-&gt;</operator><name>page_number</name></name></expr></argument>, <argument><expr><name><name>page</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>db</name><operator>-&gt;</operator><name>page_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>page</name><operator>-&gt;</operator><name>serialized_data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Different data in position %ld (expected %d, got %d)\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>page</name><operator>-&gt;</operator><name>serialized_data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_search_cache</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>page</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>page</name><operator>-&gt;</operator><name>page_number</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>write_pages</name></name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>write_pages_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>RL_FOUND</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Page found in write_pages\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else <block>{<block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Page not found in write_pages\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>data</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>driver_type</name></name> <operator>==</operator> <name>RL_FILE_DRIVER</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>rl_file_driver</name> <modifier>*</modifier></type><name>driver</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>driver</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>wal_path</name> <operator>=</operator> <call><name>get_wal_filename</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>wal_path</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OUT_OF_MEMORY</name></expr>;</expr_stmt>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>wal_path</name></expr></argument>, <argument><expr><literal type="string">"wb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_UNEXPECTED</name></expr>;</expr_stmt>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_flock</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>RLITE_FLOCK_EX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_write_wal_file</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>datalen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_apply_wal_data</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>datalen</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ftruncate</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>fp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_delete_wal</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>wal_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>write_pages_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>data</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>driver_type</name></name> <operator>==</operator> <name>RL_MEMORY_DRIVER</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>rl_memory_driver</name> <modifier>*</modifier></type><name>driver</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>driver</name></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>write_pages_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>page</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>write_pages</name><index>[<expr><name><name>db</name><operator>-&gt;</operator><name>write_pages_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>page</name><operator>-&gt;</operator><name>page_number</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>db</name><operator>-&gt;</operator><name>page_size</name></name> <operator>&gt;</operator> <name><name>driver</name><operator>-&gt;</operator><name>datalen</name></name></expr>)</condition> <block>{<block_content>
				<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>rl_realloc</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>page</name><operator>-&gt;</operator><name>page_number</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>db</name><operator>-&gt;</operator><name>page_size</name></name> <operator>*</operator> sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OUT_OF_MEMORY</name></expr>;</expr_stmt>
					<goto>goto <name>cleanup</name>;</goto>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>datalen</name></name> <operator>=</operator> <operator>(</operator><name><name>page</name><operator>-&gt;</operator><name>page_number</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>db</name><operator>-&gt;</operator><name>page_size</name></name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>db</name><operator>-&gt;</operator><name>write_pages_len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>page</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>write_pages</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>page_number</name> <operator>=</operator> <name><name>page</name><operator>-&gt;</operator><name>page_number</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>driver</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>page_number</name> <operator>*</operator> <name><name>db</name><operator>-&gt;</operator><name>page_size</name></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>page_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>page</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name><name>page</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>serialize</name></name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>page</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>driver</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>page_number</name> <operator>*</operator> <name><name>db</name><operator>-&gt;</operator><name>page_size</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>
<label><name>cleanup</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>fp</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>wal_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_apply_wal</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>rl_file_driver</name> <modifier>*</modifier></type><name>driver</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>driver</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>datalen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>wal_path</name> <init>= <expr><call><name>get_wal_filename</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>wal_path</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OUT_OF_MEMORY</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>access</name><argument_list>(<argument><expr><name>wal_path</name></expr></argument>, <argument><expr><name>F_OK</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read_wal</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>wal_path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>datalen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>data</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<comment type="line">// regardless the data applies or not, the wal file needs to go away</comment>
		<comment type="line">// do not goto cleanup if it fails!</comment>
		<expr_stmt><expr><call><name>rl_apply_wal_data</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>datalen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>driver</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>RLITE_OPEN_READWRITE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_delete_wal</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>wal_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>wal_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>
</unit>
