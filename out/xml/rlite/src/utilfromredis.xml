<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/rlite/src/utilfromredis.c"><comment type="block">/*
 * Copyright (c) 2009-2012, Salvatore Sanfilippo &lt;antirez at gmail dot com&gt;
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *   * Neither the name of Redis nor the names of its contributors may be used
 *     to endorse or promote products derived from this software without
 *     specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/utilfromredis.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<comment type="line">// https://github.com/antirez/redis/blob/unstable/src/util.c#L45</comment>
<comment type="line">//</comment>
<comment type="block">/* Glob-style pattern matching. */</comment>
<function><type><name>int</name></type> <name>rl_stringmatchlen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pattern</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>patternLen</name></decl></parameter>,
        <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stringLen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nocase</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <while>while<condition>(<expr><name>patternLen</name></expr>)</condition> <block>{<block_content>
        <switch>switch<condition>(<expr><name><name>pattern</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="char">'*'</literal></expr>:</case>
            <while>while <condition>(<expr><name><name>pattern</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>pattern</name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>patternLen</name><operator>--</operator></expr>;</expr_stmt>
            </block_content>}</block></while>
            <if_stmt><if>if <condition>(<expr><name>patternLen</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* match */</comment>
            <while>while<condition>(<expr><name>stringLen</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>rl_stringmatchlen</name><argument_list>(<argument><expr><name>pattern</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>patternLen</name><operator>-</operator><literal type="number">1</literal></expr></argument>,
                            <argument><expr><name>string</name></expr></argument>, <argument><expr><name>stringLen</name></expr></argument>, <argument><expr><name>nocase</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* match */</comment>
                <expr_stmt><expr><name>string</name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>stringLen</name><operator>--</operator></expr>;</expr_stmt>
            </block_content>}</block></while>
            <return>return <expr><literal type="number">0</literal></expr>;</return> <comment type="block">/* no match */</comment>
            <break>break;</break>
        <case>case <expr><literal type="char">'?'</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>stringLen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* no match */</comment>
            <expr_stmt><expr><name>string</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>stringLen</name><operator>--</operator></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><literal type="char">'['</literal></expr>:</case>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>not</name></decl>, <decl><type ref="prev"/><name>match</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>pattern</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>patternLen</name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>not</name> <operator>=</operator> <name><name>pattern</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'^'</literal></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>not</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>pattern</name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>patternLen</name><operator>--</operator></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>match</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>pattern</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>pattern</name><operator>++</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>patternLen</name><operator>--</operator></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name><name>pattern</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>match</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pattern</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition> <block>{<block_content>
                    <break>break;</break>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>patternLen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>pattern</name><operator>--</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>patternLen</name><operator>++</operator></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pattern</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <name>patternLen</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><name><name>pattern</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>end</name> <init>= <expr><name><name>pattern</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>start</name> <operator>&gt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
                        <decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><name>start</name></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name>start</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>end</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name>nocase</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>tolower</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>tolower</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>tolower</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name>pattern</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>patternLen</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <name>start</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>match</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>nocase</name></expr>)</condition> <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name><name>pattern</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><name>match</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><call><name>tolower</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pattern</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>tolower</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><name>match</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></else></if_stmt>
                <expr_stmt><expr><name>pattern</name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>patternLen</name><operator>--</operator></expr>;</expr_stmt>
            </block_content>}</block></while>
            <if_stmt><if>if <condition>(<expr><name>not</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>match</name> <operator>=</operator> <operator>!</operator><name>match</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>match</name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* no match */</comment>
            <expr_stmt><expr><name>string</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>stringLen</name><operator>--</operator></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><literal type="char">'\\'</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>patternLen</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>pattern</name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>patternLen</name><operator>--</operator></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <comment type="block">/* fall through */</comment>
        <default>default:</default>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>nocase</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>pattern</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* no match */</comment>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>tolower</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pattern</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>tolower</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* no match */</comment>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><name>string</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>stringLen</name><operator>--</operator></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></switch>
        <expr_stmt><expr><name>pattern</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>patternLen</name><operator>--</operator></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>stringLen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <while>while<condition>(<expr><operator>*</operator><name>pattern</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>pattern</name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>patternLen</name><operator>--</operator></expr>;</expr_stmt>
            </block_content>}</block></while>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <if_stmt><if>if <condition>(<expr><name>patternLen</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>stringLen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Adapted from https://github.com/antirez/redis/blob/unstable/src/bitops.c#L287</comment>
<comment type="block">/* BITOP op_name target_key src_key1 src_key2 src_key3 ... src_keyN */</comment>
<function><type><name>void</name></type> <name>rl_internal_bitop</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>numkeys</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>objects</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>objectslen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>resultlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>j</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>maxlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* Array of length of src strings, and max len. */</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>minlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* Min len among the input keys. */</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> <comment type="block">/* Resulting string. */</comment>


    <comment type="block">/* Lookup keys, and store pointers to the string objects into an array. */</comment>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>numkeys</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>objectslen</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;</operator> <name>maxlen</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>maxlen</name> <operator>=</operator> <name><name>objectslen</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>objectslen</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;</operator> <name>minlen</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>minlen</name> <operator>=</operator> <name><name>objectslen</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="block">/* Compute the bit operation, if at least one string is not empty. */</comment>
    <if_stmt><if>if <condition>(<expr><name>maxlen</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>rl_malloc</name><argument_list>(<argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator> <name>maxlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>output</name></decl>, <decl><type ref="prev"/><name>byte</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>i</name></decl>;</decl_stmt>

        <comment type="block">/* Fast path: as far as we have data for all the input bitmaps we
         * can take a fast path that performs much better than the
         * vanilla algorithm. */</comment>
        <expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>minlen</name> <operator>&amp;&amp;</operator> <name>numkeys</name> <operator>&lt;=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name><name>lp</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>lres</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>*</operator><operator>)</operator> <name>res</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>lp</name></expr></argument>, <argument><expr><name>objects</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>long</name><operator>*</operator><operator>)</operator> <operator>*</operator> <name>numkeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>objects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>minlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/* Different branches per different operations for speed (sorry). */</comment>
            <if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>BITOP_AND</name></expr>)</condition> <block>{<block_content>
                <while>while<condition>(<expr><name>minlen</name> <operator>&gt;=</operator> sizeof<operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><operator>*</operator><literal type="number">4</literal></expr>)</condition> <block>{<block_content>
                    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numkeys</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                        <expr_stmt><expr><name><name>lres</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;=</operator> <name><name>lp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>lres</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;=</operator> <name><name>lp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>lres</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;=</operator> <name><name>lp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>lres</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;=</operator> <name><name>lp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>lp</name><index>[<expr><name>i</name></expr>]</index></name><operator>+=</operator><literal type="number">4</literal></expr>;</expr_stmt>
                    </block_content>}</block></for>
                    <expr_stmt><expr><name>lres</name><operator>+=</operator><literal type="number">4</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>j</name> <operator>+=</operator> sizeof<operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><operator>*</operator><literal type="number">4</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>minlen</name> <operator>-=</operator> sizeof<operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><operator>*</operator><literal type="number">4</literal></expr>;</expr_stmt>
                </block_content>}</block></while>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>op</name> <operator>==</operator> <name>BITOP_OR</name></expr>)</condition> <block>{<block_content>
                <while>while<condition>(<expr><name>minlen</name> <operator>&gt;=</operator> sizeof<operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><operator>*</operator><literal type="number">4</literal></expr>)</condition> <block>{<block_content>
                    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numkeys</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                        <expr_stmt><expr><name><name>lres</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <name><name>lp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>lres</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|=</operator> <name><name>lp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>lres</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|=</operator> <name><name>lp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>lres</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>|=</operator> <name><name>lp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>lp</name><index>[<expr><name>i</name></expr>]</index></name><operator>+=</operator><literal type="number">4</literal></expr>;</expr_stmt>
                    </block_content>}</block></for>
                    <expr_stmt><expr><name>lres</name><operator>+=</operator><literal type="number">4</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>j</name> <operator>+=</operator> sizeof<operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><operator>*</operator><literal type="number">4</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>minlen</name> <operator>-=</operator> sizeof<operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><operator>*</operator><literal type="number">4</literal></expr>;</expr_stmt>
                </block_content>}</block></while>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>op</name> <operator>==</operator> <name>BITOP_XOR</name></expr>)</condition> <block>{<block_content>
                <while>while<condition>(<expr><name>minlen</name> <operator>&gt;=</operator> sizeof<operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><operator>*</operator><literal type="number">4</literal></expr>)</condition> <block>{<block_content>
                    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numkeys</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                        <expr_stmt><expr><name><name>lres</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^=</operator> <name><name>lp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>lres</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^=</operator> <name><name>lp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>lres</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>^=</operator> <name><name>lp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>lres</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>^=</operator> <name><name>lp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>lp</name><index>[<expr><name>i</name></expr>]</index></name><operator>+=</operator><literal type="number">4</literal></expr>;</expr_stmt>
                    </block_content>}</block></for>
                    <expr_stmt><expr><name>lres</name><operator>+=</operator><literal type="number">4</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>j</name> <operator>+=</operator> sizeof<operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><operator>*</operator><literal type="number">4</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>minlen</name> <operator>-=</operator> sizeof<operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><operator>*</operator><literal type="number">4</literal></expr>;</expr_stmt>
                </block_content>}</block></while>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>op</name> <operator>==</operator> <name>BITOP_NOT</name></expr>)</condition> <block>{<block_content>
                <while>while<condition>(<expr><name>minlen</name> <operator>&gt;=</operator> sizeof<operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><operator>*</operator><literal type="number">4</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>lres</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>~</operator><name><name>lres</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>lres</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>~</operator><name><name>lres</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>lres</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>~</operator><name><name>lres</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>lres</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>~</operator><name><name>lres</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>lres</name><operator>+=</operator><literal type="number">4</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>j</name> <operator>+=</operator> sizeof<operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><operator>*</operator><literal type="number">4</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>minlen</name> <operator>-=</operator> sizeof<operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><operator>*</operator><literal type="number">4</literal></expr>;</expr_stmt>
                </block_content>}</block></while>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* j is set to the next byte to process by the previous loop. */</comment>
        <for>for <control>(<init>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>maxlen</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name>output</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>objectslen</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <name>j</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>objects</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>BITOP_NOT</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>output</name> <operator>=</operator> <operator>~</operator><name>output</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numkeys</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><name>byte</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>objectslen</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <name>j</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>objects</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
                <switch>switch<condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
                <case>case <expr><name>BITOP_AND</name></expr>:</case> <expr_stmt><expr><name>output</name> <operator>&amp;=</operator> <name>byte</name></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><name>BITOP_OR</name></expr>:</case>  <expr_stmt><expr><name>output</name> <operator>|=</operator> <name>byte</name></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><name>BITOP_XOR</name></expr>:</case> <expr_stmt><expr><name>output</name> <operator>^=</operator> <name>byte</name></expr>;</expr_stmt> <break>break;</break>
                </block_content>}</block></switch>
            </block_content>}</block></for>
            <expr_stmt><expr><name><name>res</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>output</name></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>resultlen</name> <operator>=</operator> <name>maxlen</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// https://github.com/antirez/redis/blob/unstable/src/bitops.c#L61</comment>
<comment type="block">/* Count number of bits set in the binary array pointed by 's' and long
 * 'count' bytes. The implementation of this function is required to
 * work with a input string length up to 512 MB. */</comment>
<function><type><name>size_t</name></type> <name>rl_redisPopcount</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>bits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>s</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>p4</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>bitsinbyte</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">8</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Count initial bytes not aligned to 32 bit. */</comment>
    <while>while<condition>(<expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>p</name> <operator>&amp;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>count</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>bits</name> <operator>+=</operator> <name><name>bitsinbyte</name><index>[<expr><operator>*</operator><name>p</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>count</name><operator>--</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <comment type="block">/* Count bits 16 bytes at a time */</comment>
    <expr_stmt><expr><name>p4</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><name>p</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>count</name><operator>&gt;=</operator><literal type="number">16</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>uint32_t</name></type> <name>aux1</name></decl>, <decl><type ref="prev"/><name>aux2</name></decl>, <decl><type ref="prev"/><name>aux3</name></decl>, <decl><type ref="prev"/><name>aux4</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>aux1</name> <operator>=</operator> <operator>*</operator><name>p4</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>aux2</name> <operator>=</operator> <operator>*</operator><name>p4</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>aux3</name> <operator>=</operator> <operator>*</operator><name>p4</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>aux4</name> <operator>=</operator> <operator>*</operator><name>p4</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>count</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name>aux1</name> <operator>=</operator> <name>aux1</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>aux1</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x55555555</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>aux1</name> <operator>=</operator> <operator>(</operator><name>aux1</name> <operator>&amp;</operator> <literal type="number">0x33333333</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>aux1</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x33333333</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>aux2</name> <operator>=</operator> <name>aux2</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>aux2</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x55555555</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>aux2</name> <operator>=</operator> <operator>(</operator><name>aux2</name> <operator>&amp;</operator> <literal type="number">0x33333333</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>aux2</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x33333333</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>aux3</name> <operator>=</operator> <name>aux3</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>aux3</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x55555555</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>aux3</name> <operator>=</operator> <operator>(</operator><name>aux3</name> <operator>&amp;</operator> <literal type="number">0x33333333</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>aux3</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x33333333</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>aux4</name> <operator>=</operator> <name>aux4</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>aux4</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x55555555</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>aux4</name> <operator>=</operator> <operator>(</operator><name>aux4</name> <operator>&amp;</operator> <literal type="number">0x33333333</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>aux4</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x33333333</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>bits</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>aux1</name> <operator>+</operator> <operator>(</operator><name>aux1</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F0F0F0F</literal><operator>)</operator> <operator>*</operator> <literal type="number">0x01010101</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>+</operator>
                <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>aux2</name> <operator>+</operator> <operator>(</operator><name>aux2</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F0F0F0F</literal><operator>)</operator> <operator>*</operator> <literal type="number">0x01010101</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>+</operator>
                <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>aux3</name> <operator>+</operator> <operator>(</operator><name>aux3</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F0F0F0F</literal><operator>)</operator> <operator>*</operator> <literal type="number">0x01010101</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>+</operator>
                <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>aux4</name> <operator>+</operator> <operator>(</operator><name>aux4</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F0F0F0F</literal><operator>)</operator> <operator>*</operator> <literal type="number">0x01010101</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <comment type="block">/* Count the remaining bytes. */</comment>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>p4</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>count</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>bits</name> <operator>+=</operator> <name><name>bitsinbyte</name><index>[<expr><operator>*</operator><name>p</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></while>
    <return>return <expr><name>bits</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// https://github.com/antirez/redis/blob/unstable/src/bitops.c#L110</comment>
<comment type="block">/* Return the position of the first bit set to one (if 'bit' is 1) or
 * zero (if 'bit' is 0) in the bitmap starting at 's' and long 'count' bytes.
 *
 * The function is guaranteed to return a value &gt;= 0 if 'bit' is 0 since if
 * no zero bit is found, it returns count*8 assuming the string is zero
 * padded on the right. However if 'bit' is 1 it is possible that there is
 * not a single set bit in the bitmap. In this special case -1 is returned. */</comment>
<function><type><name>long</name></type> <name>rl_internal_bitpos</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bit</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>skipval</name></decl>, <decl><type ref="prev"/><name>word</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>one</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* Position of bit, to return to the caller. */</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>j</name></decl>;</decl_stmt>

    <comment type="block">/* Process whole words first, seeking for first word that is not
     * all ones or all zeros respectively if we are lookig for zeros
     * or ones. This is much faster with large strings having contiguous
     * blocks of 1 or 0 bits compared to the vanilla bit per bit processing.
     *
     * Note that if we start from an address that is not aligned
     * to sizeof(unsigned long) we consume it byte by byte until it is
     * aligned. */</comment>

    <comment type="block">/* Skip initial bits not aligned to sizeof(unsigned long) byte by byte. */</comment>
    <expr_stmt><expr><name>skipval</name> <operator>=</operator> <ternary><condition><expr><name>bit</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>UCHAR_MAX</name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <name>s</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>c</name> <operator>&amp;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>l</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>count</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>c</name> <operator>!=</operator> <name>skipval</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>c</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>count</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>pos</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
    </block_content>}</block></while>

    <comment type="block">/* Skip bits with full word step. */</comment>
    <expr_stmt><expr><name>skipval</name> <operator>=</operator> <ternary><condition><expr><name>bit</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>ULONG_MAX</name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name>l</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>*</operator><operator>)</operator> <name>c</name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>count</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>l</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>l</name> <operator>!=</operator> <name>skipval</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>count</name> <operator>-=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>l</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
        <expr_stmt><expr><name>pos</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>l</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">8</literal></expr>;</expr_stmt>
    </block_content>}</block></while>

    <comment type="block">/* Load bytes into "word" considering the first byte as the most significant
     * (we basically consider it as written in big endian, since we consider the
     * string as a set of bits from left to right, with the first bit at position
     * zero.
     *
     * Note that the loading is designed to work even when the bytes left
     * (count) are less than a full word. We pad it with zero on the right. */</comment>
    <expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>l</name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>l</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>word</name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>count</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>word</name> <operator>|=</operator> <operator>*</operator><name>c</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>c</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>count</name><operator>--</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="block">/* Special case:
     * If bits in the string are all zero and we are looking for one,
     * return -1 to signal that there is not a single "1" in the whole
     * string. This can't happen when we are looking for "0" as we assume
     * that the right of the string is zero padded. */</comment>
    <if_stmt><if>if <condition>(<expr><name>bit</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>word</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Last word left, scan bit by bit. The first thing we need is to
     * have a single "1" set in the most significant position in an
     * unsigned long. We don't know the size of the long so we use a
     * simple trick. */</comment>
    <expr_stmt><expr><name>one</name> <operator>=</operator> <name>ULONG_MAX</name></expr>;</expr_stmt> <comment type="block">/* All bits set to 1.*/</comment>
    <expr_stmt><expr><name>one</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>       <comment type="block">/* All bits set to 1 but the MSB. */</comment>
    <expr_stmt><expr><name>one</name> <operator>=</operator> <operator>~</operator><name>one</name></expr>;</expr_stmt>      <comment type="block">/* All bits set to 0 but the MSB. */</comment>

    <while>while<condition>(<expr><name>one</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>one</name> <operator>&amp;</operator> <name>word</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>==</operator> <name>bit</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>pos</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>one</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></while>

    <comment type="block">/* If we reached this point, there is a bug in the algorithm, since
     * the case of no match is handled as a special case before. */</comment>
    <return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>
</unit>
