<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/rlite/src/util.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/sha1.h"</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>RL_DEBUG</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;execinfo.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;valgrind/valgrind.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/status.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>_sha1_formatter</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name><name>formatted</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hex_lookup</name> <init>= <expr><literal type="string">"0123456789ABCDEF"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>formatted</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>hex_lookup</name><index>[<expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>formatted</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>hex_lookup</name><index>[<expr><operator>(</operator><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>RL_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>RL_DEBUG</name></cpp:ifdef>

<decl_stmt><decl><type><name>int</name></type> <name>test_mode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>test_mode_counter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>failed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>expect_fail</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<return>return <expr><name>failed</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>rl_malloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>rl_realloc</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>rl_realloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>test_mode</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><call><name>realloc</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nptrs</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name><name>buffer</name><index>[<expr><name>SIZE</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>strings</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>nptrs</name> <operator>=</operator> <call><name>backtrace</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>strings</name> <operator>=</operator> <call><name>backtrace_symbols</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>nptrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>strings</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nptrs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>--</operator><name>test_mode_counter</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>test_mode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<comment type="line">// for (i = 1; i &lt; nptrs; i++) { fprintf(stderr, "%s\n", strings[i]); }</comment>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>strings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>NULL</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>strings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>realloc</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>rl_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><name>void</name></type> <name>put_4bytes</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>v</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>get_4bytes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>get_8bytes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>retval</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>retval</name> <operator>|=</operator> <operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">56</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>retval</name> <operator>|=</operator> <operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">48</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>retval</name> <operator>|=</operator> <operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">40</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>retval</name> <operator>|=</operator> <operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>retval</name> <operator>|=</operator> <operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>retval</name> <operator>|=</operator> <operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name><name>p</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>retval</name> <operator>|=</operator> <operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name><name>p</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>retval</name> <operator>|=</operator> <operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name><name>p</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>put_8bytes</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">56</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">48</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">40</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>v</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>long_cmp</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name></type> <name>a</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name>v1</name><operator>)</operator></expr></init></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name>v2</name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>b</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><ternary><condition><expr><name>a</name> <operator>&gt;</operator> <name>b</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sha1_cmp</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>memcmp</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>RL_DEBUG</name></cpp:ifdef>
<function><type><name>int</name></type> <name>long_formatter</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v2</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>formatted</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><operator>*</operator><name>formatted</name> <operator>=</operator> <call><name>rl_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">22</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>formatted</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>RL_OUT_OF_MEMORY</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><operator>*</operator><name>formatted</name></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>, <argument><expr><literal type="string">"%ld"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name>v2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>RL_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>sha1_formatter</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v2</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>formatted</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>v2</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>*</operator><name>formatted</name> <operator>=</operator> <call><name>rl_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">41</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>formatted</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>RL_OUT_OF_MEMORY</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><operator>(</operator><operator>*</operator><name>formatted</name><operator>)</operator><index>[<expr><literal type="number">40</literal></expr>]</index> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>_sha1_formatter</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>*</operator><name>formatted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>size</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <literal type="number">40</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>RL_OK</name></expr>;</return>
</block_content>}</block></function>


<comment type="line">// Code for serialize/deserialize double comes from</comment>
<comment type="line">// http://beej.us/guide/bgnet/output/html/singlepage/bgnet.html#serialization</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pack754_32</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(pack754((f), 32, 8))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pack754_64</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(pack754((f), 64, 11))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>unpack754_32</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(unpack754((i), 32, 8))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>unpack754_64</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(unpack754((i), 64, 11))</cpp:value></cpp:define>

<function><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>pack754</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>bits</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>expbits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name> <name>double</name></type> <name>fnorm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>shift</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>sign</name></decl>, <decl><type ref="prev"/><name>exp</name></decl>, <decl><type ref="prev"/><name>significand</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>significandbits</name> <init>= <expr><name>bits</name> <operator>-</operator> <name>expbits</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt> <comment type="line">// -1 for sign bit</comment>

	<if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <literal type="number">0.0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>    <comment type="line">// get this special case out of the way</comment>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// This doesn't look very formal, but the values for +inf and -inf were</comment>
	<comment type="line">// calculated using the formula described in</comment>
	<comment type="line">// http://stackoverflow.com/a/3421923/551548</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>double</name><operator>)</operator><name>f</name> <operator>==</operator> <operator>(</operator><name>double</name><operator>)</operator> <operator>-</operator> <name>INFINITY</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">140737360872672</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>double</name><operator>)</operator><name>f</name> <operator>==</operator> <operator>(</operator><name>double</name><operator>)</operator><name>INFINITY</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">140737151196432</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// check sign and begin normalization</comment>
	<if_stmt><if>if <condition>(<expr><name>f</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>fnorm</name> <operator>=</operator> <operator>-</operator><name>f</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>fnorm</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="line">// get the normalized form of f and track the exponent</comment>
	<expr_stmt><expr><name>shift</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>fnorm</name> <operator>&gt;=</operator> <literal type="number">2.0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>fnorm</name> <operator>/=</operator> <literal type="number">2.0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>shift</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<while>while<condition>(<expr><name>fnorm</name> <operator>&lt;</operator> <literal type="number">1.0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>fnorm</name> <operator>*=</operator> <literal type="number">2.0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>shift</name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><name>fnorm</name> <operator>=</operator> <name>fnorm</name> <operator>-</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>

	<comment type="line">// calculate the binary form (non-float) of the significand data</comment>
	<expr_stmt><expr><name>significand</name> <operator>=</operator> <name>fnorm</name> <operator>*</operator> <operator>(</operator><operator>(</operator><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <name>significandbits</name><operator>)</operator> <operator>+</operator> <literal type="number">0.5f</literal><operator>)</operator></expr>;</expr_stmt>

	<comment type="line">// get the biased exponent</comment>
	<expr_stmt><expr><name>exp</name> <operator>=</operator> <name>shift</name> <operator>+</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>expbits</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt> <comment type="line">// shift + bias</comment>

	<comment type="line">// return the final answer</comment>
	<return>return <expr><operator>(</operator><name>sign</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>bits</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>|</operator> <operator>(</operator><name>exp</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>bits</name> <operator>-</operator> <name>expbits</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>|</operator> <name>significand</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>long</name> <name>double</name></type> <name>unpack754</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>bits</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>expbits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name> <name>double</name></type> <name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>shift</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>bias</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>significandbits</name> <init>= <expr><name>bits</name> <operator>-</operator> <name>expbits</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt> <comment type="line">// -1 for sign bit</comment>

	<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0.0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">140737360872672</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>-</operator><name>INFINITY</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">140737151196432</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>INFINITY</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// pull the significand</comment>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <name>significandbits</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt> <comment type="line">// mask</comment>
	<expr_stmt><expr><name>result</name> <operator>/=</operator> <operator>(</operator><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <name>significandbits</name><operator>)</operator></expr>;</expr_stmt> <comment type="line">// convert back to float</comment>
	<expr_stmt><expr><name>result</name> <operator>+=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt> <comment type="line">// add the one back on</comment>

	<comment type="line">// deal with the exponent</comment>
	<expr_stmt><expr><name>bias</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>expbits</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>shift</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <name>significandbits</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <name>expbits</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <name>bias</name></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>shift</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>result</name> <operator>*=</operator> <literal type="number">2.0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>shift</name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<while>while<condition>(<expr><name>shift</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>result</name> <operator>/=</operator> <literal type="number">2.0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>shift</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="line">// sign it</comment>
	<expr_stmt><expr><name>result</name> <operator>*=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>bits</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1.0</literal></expr> </then><else>: <expr><literal type="number">1.0</literal></expr></else></ternary></expr>;</expr_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>double</name></type> <name>get_double</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name> <init>= <expr><call><name>get_8bytes</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>unpack754_64</name><argument_list>(<argument><expr><name>ull</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>put_double</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name> <init>= <expr><call><name>pack754_64</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>put_8bytes</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>ull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sha1</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>datalen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SHA1_CTX</name></type> <name>sha</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>SHA1Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SHA1Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sha</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>datalen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SHA1Final</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>RL_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>rl_mstime</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tp</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>tp</name><operator>.</operator><name>tv_sec</name></name> <operator>*</operator> <literal type="number">1000</literal> <operator>+</operator> <name><name>tp</name><operator>.</operator><name>tv_usec</name></name> <operator>/</operator> <literal type="number">1000</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>double</name></type> <name>rl_strtod</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>_str</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>strlen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>_eptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>eptr</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>strlen</name> <operator>&gt;</operator> <literal type="number">39</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>strlen</name> <operator>=</operator> <literal type="number">39</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>_str</name></expr></argument>, <argument><expr><name>strlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>str</name><index>[<expr><name>strlen</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>strtod</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>_eptr</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>_eptr</name> <operator>=</operator> <name>_str</name> <operator>+</operator> <operator>(</operator><name>eptr</name> <operator>-</operator> <name>str</name><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>d</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>rl_get_filename_with_suffix</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>suffix</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>RL_OK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_path</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>last_slash</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>filenamelen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>suffixlen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">// Adding "." to the beginning of the filename, and null termination</comment>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>new_path</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>filenamelen</name> <operator>+</operator> <name>suffixlen</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>filenamelen</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>filename</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>last_slash</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>new_path</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>last_slash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new_path</name><index>[<expr><name>last_slash</name></expr>]</index></name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>new_path</name><index>[<expr><name>last_slash</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>filename</name><index>[<expr><name>last_slash</name></expr>]</index></name></expr></argument>, <argument><expr><name>filenamelen</name> <operator>-</operator> <name>last_slash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>new_path</name><index>[<expr><name>filenamelen</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>suffix</name></expr></argument>, <argument><expr><name>suffixlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>new_path</name></expr>;</return>
</block_content>}</block></function>
</unit>
