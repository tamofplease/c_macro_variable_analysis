<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/rlite/src/rlite.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/file.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/page_btree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/page_list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/page_long.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/page_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/page_skiplist.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/page_multi_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/type_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/type_zset.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/type_hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/rlite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/sha1.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/flock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/pubsub.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/wal.h"</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>RL_DEBUG</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;valgrind/valgrind.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_READ_PAGES_LEN</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_WRITE_PAGES_LEN</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_PAGE_SIZE</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEADER_SIZE</name></cpp:macro> <cpp:value>200</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>rl_header_serialize</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>rl_has_flag</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>rl_data_type</name></type> <name>rl_data_type_btree_hash_sha1_long</name> <init>= <expr><block>{
	<expr><literal type="string">"rl_data_type_btree_hash_sha1_long"</literal></expr>,
	<expr><name>rl_btree_serialize</name></expr>,
	<expr><name>rl_btree_deserialize</name></expr>,
	<expr><name>rl_btree_destroy</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rl_data_type</name></type> <name>rl_data_type_btree_node_hash_sha1_long</name> <init>= <expr><block>{
	<expr><literal type="string">"rl_data_type_btree_node_hash_sha1_long"</literal></expr>,
	<expr><name>rl_btree_node_serialize_hash_sha1_long</name></expr>,
	<expr><name>rl_btree_node_deserialize_hash_sha1_long</name></expr>,
	<expr><name>rl_btree_node_destroy</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rl_data_type</name></type> <name>rl_data_type_btree_hash_sha1_double</name> <init>= <expr><block>{
	<expr><literal type="string">"rl_data_type_btree_hash_sha1_double"</literal></expr>,
	<expr><name>rl_btree_serialize</name></expr>,
	<expr><name>rl_btree_deserialize</name></expr>,
	<expr><name>rl_btree_destroy</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rl_data_type</name></type> <name>rl_data_type_btree_node_hash_sha1_double</name> <init>= <expr><block>{
	<expr><literal type="string">"rl_data_type_btree_node_hash_sha1_double"</literal></expr>,
	<expr><name>rl_btree_node_serialize_hash_sha1_double</name></expr>,
	<expr><name>rl_btree_node_deserialize_hash_sha1_double</name></expr>,
	<expr><name>rl_btree_node_destroy</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rl_data_type</name></type> <name>rl_data_type_btree_hash_sha1_key</name> <init>= <expr><block>{
	<expr><literal type="string">"rl_data_type_btree_hash_sha1_key"</literal></expr>,
	<expr><name>rl_btree_serialize</name></expr>,
	<expr><name>rl_btree_deserialize</name></expr>,
	<expr><name>rl_btree_destroy</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rl_data_type</name></type> <name>rl_data_type_btree_node_hash_sha1_key</name> <init>= <expr><block>{
	<expr><literal type="string">"rl_data_type_btree_node_hash_sha1_key"</literal></expr>,
	<expr><name>rl_btree_node_serialize_hash_sha1_key</name></expr>,
	<expr><name>rl_btree_node_deserialize_hash_sha1_key</name></expr>,
	<expr><name>rl_btree_node_destroy</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rl_data_type</name></type> <name>rl_data_type_btree_hash_sha1_hashkey</name> <init>= <expr><block>{
	<expr><literal type="string">"rl_data_type_btree_hash_sha1_hashkey"</literal></expr>,
	<expr><name>rl_btree_serialize</name></expr>,
	<expr><name>rl_btree_deserialize</name></expr>,
	<expr><name>rl_btree_destroy</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rl_data_type</name></type> <name>rl_data_type_btree_node_hash_sha1_hashkey</name> <init>= <expr><block>{
	<expr><literal type="string">"rl_data_type_btree_node_hash_sha1_hashkey"</literal></expr>,
	<expr><name>rl_btree_node_serialize_hash_sha1_hashkey</name></expr>,
	<expr><name>rl_btree_node_deserialize_hash_sha1_hashkey</name></expr>,
	<expr><name>rl_btree_node_destroy</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rl_data_type</name></type> <name>rl_data_type_header</name> <init>= <expr><block>{
	<expr><literal type="string">"rl_data_type_header"</literal></expr>,
	<expr><name>rl_header_serialize</name></expr>,
	<expr><name>rl_header_deserialize</name></expr>,
	<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rl_data_type</name></type> <name>rl_data_type_btree_hash_long_long</name> <init>= <expr><block>{
	<expr><literal type="string">"rl_data_type_btree_hash_long_long"</literal></expr>,
	<expr><name>rl_btree_serialize</name></expr>,
	<expr><name>rl_btree_deserialize</name></expr>,
	<expr><name>rl_btree_destroy</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rl_data_type</name></type> <name>rl_data_type_btree_node_hash_long_long</name> <init>= <expr><block>{
	<expr><literal type="string">"rl_data_type_btree_node_hash_long_long"</literal></expr>,
	<expr><name>rl_btree_node_serialize_hash_long_long</name></expr>,
	<expr><name>rl_btree_node_deserialize_hash_long_long</name></expr>,
	<expr><name>rl_btree_node_destroy</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rl_data_type</name></type> <name>rl_data_type_btree_hash_double_long</name> <init>= <expr><block>{
	<expr><literal type="string">"rl_data_type_btree_hash_double_long"</literal></expr>,
	<expr><name>rl_btree_serialize</name></expr>,
	<expr><name>rl_btree_deserialize</name></expr>,
	<expr><name>rl_btree_destroy</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rl_data_type</name></type> <name>rl_data_type_list_long</name> <init>= <expr><block>{
	<expr><literal type="string">"rl_data_type_list_long"</literal></expr>,
	<expr><name>rl_list_serialize</name></expr>,
	<expr><name>rl_list_deserialize</name></expr>,
	<expr><name>rl_list_destroy</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rl_data_type</name></type> <name>rl_data_type_list_node_long</name> <init>= <expr><block>{
	<expr><literal type="string">"rl_data_type_list_node_long"</literal></expr>,
	<expr><name>rl_list_node_serialize_long</name></expr>,
	<expr><name>rl_list_node_deserialize_long</name></expr>,
	<expr><name>rl_list_node_destroy</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rl_data_type</name></type> <name>rl_data_type_string</name> <init>= <expr><block>{
	<expr><literal type="string">"rl_data_type_string"</literal></expr>,
	<expr><name>rl_string_serialize</name></expr>,
	<expr><name>rl_string_deserialize</name></expr>,
	<expr><name>rl_string_destroy</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rl_data_type</name></type> <name>rl_data_type_skiplist</name> <init>= <expr><block>{
	<expr><literal type="string">"rl_data_type_skiplist"</literal></expr>,
	<expr><name>rl_skiplist_serialize</name></expr>,
	<expr><name>rl_skiplist_deserialize</name></expr>,
	<expr><name>rl_skiplist_destroy</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rl_data_type</name></type> <name>rl_data_type_skiplist_node</name> <init>= <expr><block>{
	<expr><literal type="string">"rl_data_type_skiplist_node"</literal></expr>,
	<expr><name>rl_skiplist_node_serialize</name></expr>,
	<expr><name>rl_skiplist_node_deserialize</name></expr>,
	<expr><name>rl_skiplist_node_destroy</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rl_data_type</name></type> <name>rl_data_type_long</name> <init>= <expr><block>{
	<expr><literal type="string">"rl_data_type_long"</literal></expr>,
	<expr><name>rl_long_serialize</name></expr>,
	<expr><name>rl_long_deserialize</name></expr>,
	<expr><name>rl_long_destroy</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rl_data_type</name></type> <name>rl_data_type_skiplist_node</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>identifier</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"rlite0.0"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>file_driver_fp</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>RL_OK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_file_driver</name> <modifier>*</modifier></type><name>driver</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>driver</name></name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>driver</name><operator>-&gt;</operator><name>fp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mode</name></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>access</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name>F_OK</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>mode</name> <operator>=</operator> <literal type="string">"r+"</literal></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>driver</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>RLITE_OPEN_READWRITE</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Opening unexisting file in readonly mode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_INVALID_PARAMETERS</name></expr>;</expr_stmt>
				<goto>goto <name>cleanup</name>;</goto>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>mode</name> <operator>=</operator> <literal type="string">"w+"</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>fp</name></name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>driver</name><operator>-&gt;</operator><name>fp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Cannot open file %s, errno %d, mode %s\n"</literal></expr></argument>, <argument><expr><name><name>driver</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_UNEXPECTED</name></expr>;</expr_stmt>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_flock</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>driver</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>RLITE_OPEN_READWRITE</name><operator>)</operator></expr> ?</condition><then> <expr><name>RLITE_FLOCK_EX</name></expr> </then><else>: <expr><name>RLITE_FLOCK_SH</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>fp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_header_serialize</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><function_decl><type><name>void</name> <modifier>*</modifier></type><name>UNUSED</name><parameter_list>(<parameter><decl><type><name>obj</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>identifier_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>identifier</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>identifier</name></expr></argument>, <argument><expr><name>identifier_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>put_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>identifier_len</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>page_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>put_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>identifier_len</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>next_empty_page</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>put_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>identifier_len</name> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>number_of_pages</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>put_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>identifier_len</name> <operator>+</operator> <literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>number_of_databases</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>pos</name> <init>= <expr><name>identifier_len</name> <operator>+</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>db</name><operator>-&gt;</operator><name>number_of_databases</name></name> <operator>+</operator> <name>RLITE_INTERNAL_DB_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>databases</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>put_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>databases</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>pos</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>RL_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_header_deserialize</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><function_decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>UNUSED</name><parameter_list>(<parameter><decl><type><name>obj</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><function_decl><type><name>void</name> <modifier>*</modifier></type><name>UNUSED</name><parameter_list>(<parameter><decl><type><name>context</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>RL_OK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>identifier_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>identifier</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>identifier</name></expr></argument>, <argument><expr><name>identifier_len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Unexpected header, expecting %s\n"</literal></expr></argument>, <argument><expr><name>identifier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>RL_INVALID_STATE</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>page_size</name></name> <operator>=</operator> <call><name>get_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>identifier_len</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>initial_next_empty_page</name></name> <operator>=</operator>
	<name><name>db</name><operator>-&gt;</operator><name>next_empty_page</name></name> <operator>=</operator> <call><name>get_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>identifier_len</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>initial_number_of_pages</name></name> <operator>=</operator>
	<name><name>db</name><operator>-&gt;</operator><name>number_of_pages</name></name> <operator>=</operator> <call><name>get_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>identifier_len</name> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>initial_number_of_databases</name></name> <operator>=</operator>
	<name><name>db</name><operator>-&gt;</operator><name>number_of_databases</name></name> <operator>=</operator> <call><name>get_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>identifier_len</name> <operator>+</operator> <literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>databases</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>initial_databases</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>databases</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>number_of_databases</name></name> <operator>+</operator> <name>RLITE_INTERNAL_DB_COUNT</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>initial_databases</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>number_of_databases</name></name> <operator>+</operator> <name>RLITE_INTERNAL_DB_COUNT</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>pos</name> <init>= <expr><name>identifier_len</name> <operator>+</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>db</name><operator>-&gt;</operator><name>number_of_databases</name></name> <operator>+</operator> <name>RLITE_INTERNAL_DB_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>initial_databases</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>
		<name><name>db</name><operator>-&gt;</operator><name>databases</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pos</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_ensure_pages</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>RL_OK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>rl_has_flag</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>RLITE_OPEN_READWRITE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>write_pages_len</name></name> <operator>==</operator> <name><name>db</name><operator>-&gt;</operator><name>write_pages_alloc</name></name></expr>)</condition> <block>{<block_content>
			<macro><name>RL_REALLOC</name><argument_list>(<argument>db-&gt;write_pages</argument>, <argument>sizeof(rl_page *) * db-&gt;write_pages_alloc * <literal type="number">2</literal></argument>)</argument_list></macro>
			<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>write_pages_alloc</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>read_pages_len</name></name> <operator>==</operator> <name><name>db</name><operator>-&gt;</operator><name>read_pages_alloc</name></name></expr>)</condition> <block>{<block_content>
		<macro><name>RL_REALLOC</name><argument_list>(<argument>db-&gt;read_pages</argument>, <argument>sizeof(rl_page *) * db-&gt;read_pages_alloc * <literal type="number">2</literal></argument>)</argument_list></macro>
		<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>read_pages_alloc</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>rlite</name> <modifier>*</modifier><modifier>*</modifier></type><name>_db</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>RL_OK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>db</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>subscriber_lock_filename</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>subscriber_id</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>databases</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>initial_databases</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>selected_database</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>selected_internal</name></name> <operator>=</operator> <name>RLITE_INTERNAL_DB_NO</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>page_size</name></name> <operator>=</operator> <name>DEFAULT_PAGE_SIZE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>read_pages</name></name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>write_pages</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>read_pages_alloc</name></name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>read_pages_len</name></name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>write_pages_len</name></name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>write_pages_alloc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>initial_number_of_pages</name></name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>number_of_pages</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>initial_number_of_databases</name></name> <operator>=</operator>
	<name><name>db</name><operator>-&gt;</operator><name>number_of_databases</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>driver</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>driver_type</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

	<macro><name>RL_MALLOC</name><argument_list>(<argument>db-&gt;read_pages</argument>, <argument>sizeof(rl_page *) * DEFAULT_READ_PAGES_LEN</argument>)</argument_list></macro>
	<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>read_pages_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>read_pages_alloc</name></name> <operator>=</operator> <name>DEFAULT_READ_PAGES_LEN</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>write_pages_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>RLITE_OPEN_READWRITE</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>write_pages_alloc</name></name> <operator>=</operator> <name>DEFAULT_WRITE_PAGES_LEN</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>write_pages</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rl_page</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>DEFAULT_WRITE_PAGES_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>write_pages_alloc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">":memory:"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>rl_memory_driver</name> <modifier>*</modifier></type><name>driver</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>driver</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>driver</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>driver_type</name></name> <operator>=</operator> <name>RL_MEMORY_DRIVER</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>driver</name></name> <operator>=</operator> <name>driver</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>datalen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>RLITE_OPEN_CREATE</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type> <name>_access_flags</name></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>RLITE_OPEN_READWRITE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>_access_flags</name> <operator>=</operator> <name>W_OK</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else <block>{<block_content>
				<expr_stmt><expr><name>_access_flags</name> <operator>=</operator> <name>R_OK</name> <operator>|</operator> <name>F_OK</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>access</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>_access_flags</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_INVALID_PARAMETERS</name></expr>;</expr_stmt>
				<goto>goto <name>cleanup</name>;</goto>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<decl_stmt><decl><type><name>rl_file_driver</name> <modifier>*</modifier></type><name>driver</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>driver</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>driver</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>fp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>filename</name></name> <operator>=</operator> <call><name>rl_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>driver</name><operator>-&gt;</operator><name>filename</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>driver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OUT_OF_MEMORY</name></expr>;</expr_stmt>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>driver</name></name> <operator>=</operator> <name>driver</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>driver_type</name></name> <operator>=</operator> <name>RL_FILE_DRIVER</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read_header</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>_db</name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name> <operator>&amp;&amp;</operator> <name>db</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>rl_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_refresh</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>RL_OK</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>driver_type</name></name> <operator>==</operator> <name>RL_FILE_DRIVER</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_discard</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read_header</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_close</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>db</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>RL_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>driver_type</name></name> <operator>==</operator> <name>RL_FILE_DRIVER</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>rl_unsubscribe_all</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="line">// discard before removing the driver, since we need to release locks</comment>
	<expr_stmt><expr><call><name>rl_discard</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>driver_type</name></name> <operator>==</operator> <name>RL_FILE_DRIVER</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>rl_file_driver</name> <modifier>*</modifier></type><name>driver</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>driver</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>driver_type</name></name> <operator>==</operator> <name>RL_MEMORY_DRIVER</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>rl_memory_driver</name><modifier>*</modifier></type> <name>driver</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>driver</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>subscriber_lock_filename</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>remove</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>subscriber_lock_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>subscriber_lock_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>driver</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>subscriber_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>read_pages</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>write_pages</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>databases</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>initial_databases</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>RL_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_has_flag</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>driver_type</name></name> <operator>==</operator> <name>RL_FILE_DRIVER</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>rl_file_driver</name> <operator>*</operator><operator>)</operator><name><name>db</name><operator>-&gt;</operator><name>driver</name></name><operator>)</operator><operator>-&gt;</operator><name>mode</name> <operator>&amp;</operator> <name>flag</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>driver_type</name></name> <operator>==</operator> <name>RL_MEMORY_DRIVER</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Unknown driver_type %d\n"</literal></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>driver_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>RL_UNEXPECTED</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_create_db</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_ensure_pages</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>initial_next_empty_page</name></name> <operator>=</operator>
	<name><name>db</name><operator>-&gt;</operator><name>next_empty_page</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>initial_number_of_pages</name></name> <operator>=</operator>
	<name><name>db</name><operator>-&gt;</operator><name>number_of_pages</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>selected_database</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>selected_internal</name></name> <operator>=</operator> <name>RLITE_INTERNAL_DB_NO</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>initial_number_of_databases</name></name> <operator>=</operator>
	<name><name>db</name><operator>-&gt;</operator><name>number_of_databases</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>databases</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>number_of_databases</name></name> <operator>+</operator> <name>RLITE_INTERNAL_DB_COUNT</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>initial_databases</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>number_of_databases</name></name> <operator>+</operator> <name>RLITE_INTERNAL_DB_COUNT</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>db</name><operator>-&gt;</operator><name>number_of_databases</name></name> <operator>+</operator> <name>RLITE_INTERNAL_DB_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>initial_databases</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>
		<name><name>db</name><operator>-&gt;</operator><name>databases</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_get_selected_db</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>selected_internal</name></name> <operator>==</operator> <name>RLITE_INTERNAL_DB_NO</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name><name>db</name><operator>-&gt;</operator><name>selected_database</name></name></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<return>return <expr><name><name>db</name><operator>-&gt;</operator><name>number_of_databases</name></name> <operator>+</operator> <name><name>db</name><operator>-&gt;</operator><name>selected_internal</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_get_key_btree</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>rl_btree</name> <modifier>*</modifier><modifier>*</modifier></type><name>retbtree</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>create</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>_btree</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>selected_database</name> <init>= <expr><call><name>rl_get_selected_db</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><empty_stmt>;</empty_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>db</name><operator>-&gt;</operator><name>databases</name><index>[<expr><name>selected_database</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>create</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>RL_NOT_FOUND</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<decl_stmt><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>btree</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_btree_create</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>btree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_btree_type_hash_sha1_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>databases</name><index>[<expr><name>selected_database</name></expr>]</index></name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>next_empty_page</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_write</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_data_type_btree_hash_sha1_key</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>databases</name><index>[<expr><name>selected_database</name></expr>]</index></name></expr></argument>, <argument><expr><name>btree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_data_type_btree_hash_sha1_key</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>databases</name><index>[<expr><name>selected_database</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_btree_type_hash_sha1_key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_btree</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>retbtree</name> <operator>=</operator> <name>_btree</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_read_header</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>page_size</name></name> <operator>=</operator> <name>HEADER_SIZE</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>driver_type</name></name> <operator>==</operator> <name>RL_MEMORY_DRIVER</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>page_size</name></name> <operator>=</operator> <name>DEFAULT_PAGE_SIZE</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_create_db</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>driver_type</name></name> <operator>==</operator> <name>RL_FILE_DRIVER</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>file_driver_fp</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_apply_wal</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_read</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_data_type_header</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>RL_NOT_FOUND</name> <operator>&amp;&amp;</operator> <call><name>rl_has_flag</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>RLITE_OPEN_CREATE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>page_size</name></name> <operator>=</operator> <name>DEFAULT_PAGE_SIZE</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_create_db</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_write</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_data_type_header</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_FOUND</name></expr>)</condition> <block>{<block_content>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Unknown driver type %d\n"</literal></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>driver_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_UNEXPECTED</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>RL_DEBUG</name></cpp:ifdef>
<function><type><name>void</name></type> <name>print_cache</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Cache read pages:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_page</name> <modifier>*</modifier></type><name>page</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>db</name><operator>-&gt;</operator><name>read_pages_len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>page</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>read_pages</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%ld, "</literal></expr></argument>, <argument><expr><name><name>page</name><operator>-&gt;</operator><name>page_number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nCache write pages:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>db</name><operator>-&gt;</operator><name>write_pages_len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>page</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>write_pages</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%ld, "</literal></expr></argument>, <argument><expr><name><name>page</name><operator>-&gt;</operator><name>page_number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>RL_DEBUG</name></cpp:ifdef>
<decl_stmt><decl><type><name>int</name></type> <name>rl_search_cache</name><argument_list>(<argument><expr><name>rlite</name> <operator>*</operator><name>db</name></expr></argument>, <argument><expr><name>rl_data_type</name> <operator>*</operator><name>type</name></expr></argument>, <argument><expr><name>long</name> <name>page_number</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><operator>*</operator><name>obj</name></expr></argument>, <argument><expr><name>long</name> <operator>*</operator><name>position</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>context</name></expr></argument>, <argument><expr><name>rl_page</name> <operator>*</operator><operator>*</operator><name>pages</name></expr></argument>, <argument><expr><name>long</name> <name>page_len</name></expr></argument>)</argument_list>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
static <name>int</name> <name>rl_search_cache</name><argument_list>(<argument><expr><name>rlite</name> <operator>*</operator><name>db</name></expr></argument>, <argument><expr><name>rl_data_type</name> <operator>*</operator><name>type</name></expr></argument>, <argument><expr><name>long</name> <name>page_number</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><operator>*</operator><name>obj</name></expr></argument>, <argument><expr><name>long</name> <operator>*</operator><name>position</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>context</name></expr></argument>, <argument><expr><name>rl_page</name> <operator>*</operator><operator>*</operator><name>pages</name></expr></argument>, <argument><expr><name>long</name> <name>page_len</name></expr></argument>)</argument_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name></type> <name>pos</name></decl>, <decl><type ref="prev"/><name>min</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>max</name> <init>= <expr><name>page_len</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_page</name> <modifier>*</modifier></type><name>page</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>max</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<do>do <block>{<block_content>
			<expr_stmt><expr><name>pos</name> <operator>=</operator> <name>min</name> <operator>+</operator> <operator>(</operator><name>max</name> <operator>-</operator> <name>min</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>page</name> <operator>=</operator> <name><name>pages</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>page</name><operator>-&gt;</operator><name>page_number</name></name> <operator>==</operator> <name>page_number</name></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>obj</name></expr>)</condition> <block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name><name>page</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
						<comment type="line">// This happens when we are in read-only mode, and have a wal file</comment>
						<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>serialize_data</name> <init>= <expr><name><name>page</name><operator>-&gt;</operator><name>obj</name></name></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><call><name><name>type</name><operator>-&gt;</operator><name>deserialize</name></name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>page</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><name>serialize_data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
							<return>return <expr><name>retval</name></expr>;</return>
						</block_content>}</block></if></if_stmt>
						<expr_stmt><expr><name><name>page</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>serialize_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
					<expr_stmt><expr><operator>*</operator><name>obj</name> <operator>=</operator> <name><name>page</name><operator>-&gt;</operator><name>obj</name></name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>RL_DEBUG</name></cpp:ifdef>
				<if_stmt><if>if <condition>(<expr><name><name>page</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <operator>&amp;</operator><name>rl_data_type_long</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>!=</operator> <operator>&amp;</operator><name>rl_data_type_long</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>page</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>type</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Type of page in cache (%s) doesn't match the asked one (%s)\n"</literal></expr></argument>, <argument><expr><name><name>page</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>type</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return <expr><name>RL_UNEXPECTED</name></expr>;</return>
				</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
				</block_content>}</block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><name>position</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><operator>*</operator><name>position</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<return>return <expr><name>RL_FOUND</name></expr>;</return>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name><name>page</name><operator>-&gt;</operator><name>page_number</name></name> <operator>&gt;</operator> <name>page_number</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>max</name> <operator>=</operator> <name>pos</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else <block>{<block_content>
				<expr_stmt><expr><name>min</name> <operator>=</operator> <name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block>
		while <condition>(<expr><name>max</name> <operator>&gt;=</operator> <name>min</name></expr>)</condition>;</do>
		<if_stmt><if>if <condition>(<expr><name>position</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>pages</name><index>[<expr><name>pos</name></expr>]</index></name><operator>-&gt;</operator><name>page_number</name> <operator>&gt;</operator> <name>page_number</name> <operator>&amp;&amp;</operator> <name>pos</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>pos</name><operator>--</operator></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>pages</name><index>[<expr><name>pos</name></expr>]</index></name><operator>-&gt;</operator><name>page_number</name> <operator>&lt;</operator> <name>page_number</name> <operator>&amp;&amp;</operator> <name>pos</name> <operator>&lt;</operator> <name>page_len</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>RL_DEBUG</name></cpp:ifdef>
			<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>prev</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>rl_page</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>db</name><operator>-&gt;</operator><name>read_pages_len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>read_pages</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name>prev</name> <operator>&gt;=</operator> <name><name>p</name><operator>-&gt;</operator><name>page_number</name></name></expr>)</condition> <block>{<block_content>
						<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Reading cache is broken\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>print_cache</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<return>return <expr><name>RL_UNEXPECTED</name></expr>;</return>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>prev</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>page_number</name></name></expr>;</expr_stmt>
			</block_content>}</block></for>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>db</name><operator>-&gt;</operator><name>write_pages_len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>write_pages</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name>prev</name> <operator>&gt;=</operator> <name><name>p</name><operator>-&gt;</operator><name>page_number</name></name></expr>)</condition> <block>{<block_content>
						<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Writing cache is broken\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>print_cache</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<return>return <expr><name>RL_UNEXPECTED</name></expr>;</return>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>prev</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>page_number</name></name></expr>;</expr_stmt>
			</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<expr_stmt><expr><operator>*</operator><name>position</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>position</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>position</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>RL_NOT_FOUND</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>int</name></type> <name>rl_read_from_cache</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>rl_data_type</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>page_number</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><call><name>rl_search_cache</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>page_number</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>write_pages</name></name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>write_pages_len</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>RL_NOT_FOUND</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_search_cache</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>page_number</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>read_pages</name></name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>read_pages_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_read</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>rl_data_type</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>page</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cache</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// fprintf(stderr, "r %ld %s\n", page, type-&gt;name);</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>RL_DEBUG</name></cpp:ifdef>
	<decl_stmt><decl><type><name>int</name></type> <name>keep</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>initial_page_size</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>page_size</name></name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>page</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>type</name> <operator>!=</operator> <operator>&amp;</operator><name>rl_data_type_header</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>VALGRIND_PRINTF_BACKTRACE</name><argument_list>(<argument><expr><literal type="string">"Unexpected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>RL_UNEXPECTED</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>serialize_data</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_read_from_cache</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>page</name></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_NOT_FOUND</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cache</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>serialize_data</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>page_size</name></name> <operator>*</operator> sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name><name>type</name><operator>-&gt;</operator><name>serialize</name></name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>*</operator><name>obj</name></expr></argument>, <argument><expr><name>serialize_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>serialize_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>retval</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name><name>type</name><operator>-&gt;</operator><name>deserialize</name></name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><name>serialize_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>serialize_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
				<return>return <expr><name>retval</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_FOUND</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><name>retval</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>page_size</name></name> <operator>*</operator> sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>driver_type</name></name> <operator>==</operator> <name>RL_FILE_DRIVER</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>rl_file_driver</name> <modifier>*</modifier></type><name>driver</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>driver</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>file_driver_fp</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><name>page</name> <operator>*</operator> <name><name>db</name><operator>-&gt;</operator><name>page_size</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>size_t</name></type> <name>read</name> <init>= <expr><call><name>fread</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>page_size</name></name></expr></argument>, <argument><expr><name><name>driver</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>read</name> <operator>!=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>db</name><operator>-&gt;</operator><name>page_size</name></name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>page</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>RL_DEBUG</name></cpp:ifdef>
				<expr_stmt><expr><call><name>print_cache</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Unable to read page %ld on line %d\n"</literal></expr></argument>, <argument><expr><name>page</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_NOT_FOUND</name></expr>;</expr_stmt>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>driver_type</name></name> <operator>==</operator> <name>RL_MEMORY_DRIVER</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>rl_memory_driver</name> <modifier>*</modifier></type><name>driver</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>driver</name></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>page</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>db</name><operator>-&gt;</operator><name>page_size</name></name> <operator>&gt;</operator> <name><name>driver</name><operator>-&gt;</operator><name>datalen</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Unable to read page %ld on line %d\n"</literal></expr></argument>, <argument><expr><name>page</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_NOT_FOUND</name></expr>;</expr_stmt>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>driver</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>page</name> <operator>*</operator> <name><name>db</name><operator>-&gt;</operator><name>page_size</name></name></expr>]</index></name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator> <name><name>db</name><operator>-&gt;</operator><name>page_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Unexpected driver %d when asking for page %ld\n"</literal></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>driver_type</name></name></expr></argument>, <argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_UNEXPECTED</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></else></if_stmt>

	<decl_stmt><decl><type><name>long</name></type> <name>pos</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_search_cache</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>page</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>read_pages</name></name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>read_pages_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_NOT_FOUND</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Unexpectedly found page in cache\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_UNEXPECTED</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name><name>type</name><operator>-&gt;</operator><name>deserialize</name></name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><ternary><condition><expr><name>context</name></expr> ?</condition><then> <expr><name>context</name></expr> </then><else>: <expr><name>type</name></expr></else></ternary></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>cache</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>rl_ensure_pages</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>rl_page</name> <modifier>*</modifier></type><name>page_obj</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>page_obj</name> <operator>=</operator> <call><name>rl_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>page_obj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>page_obj</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>obj</name></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>type</name><operator>-&gt;</operator><name>destroy</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name>obj</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name><name>type</name><operator>-&gt;</operator><name>destroy</name></name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>*</operator><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><operator>*</operator><name>obj</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OUT_OF_MEMORY</name></expr>;</expr_stmt>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>page_obj</name><operator>-&gt;</operator><name>page_number</name></name> <operator>=</operator> <name>page</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>page_obj</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>page_obj</name><operator>-&gt;</operator><name>obj</name></name> <operator>=</operator> <ternary><condition><expr><name>obj</name></expr> ?</condition><then> <expr><operator>*</operator><name>obj</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>RL_DEBUG</name></cpp:ifdef>
		<expr_stmt><expr><name>keep</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>initial_page_size</name> <operator>!=</operator> <name><name>db</name><operator>-&gt;</operator><name>page_size</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>page_obj</name><operator>-&gt;</operator><name>serialized_data</name></name> <operator>=</operator> <call><name>rl_realloc</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>page_size</name></name> <operator>*</operator> sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>page_obj</name><operator>-&gt;</operator><name>serialized_data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>page_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OUT_OF_MEMORY</name></expr>;</expr_stmt>
				<goto>goto <name>cleanup</name>;</goto>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>data</name> <operator>=</operator> <name><name>page_obj</name><operator>-&gt;</operator><name>serialized_data</name></name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>page_size</name></name> <operator>&gt;</operator> <name>initial_page_size</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>initial_page_size</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>page_size</name></name> <operator>-</operator> <name>initial_page_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><name><name>page_obj</name><operator>-&gt;</operator><name>serialized_data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><name>serialize_data</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>page_size</name></name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>serialize_data</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>page_obj</name><operator>-&gt;</operator><name>serialized_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>page_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name><name>type</name><operator>-&gt;</operator><name>serialize</name></name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><ternary><condition><expr><name>obj</name></expr> ?</condition><then> <expr><operator>*</operator><name>obj</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><name>serialize_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>serialize_data</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>page_size</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"serialize unserialized data mismatch\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>db</name><operator>-&gt;</operator><name>page_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>serialize_data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"at position %ld expected %d, got %d\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>serialize_data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>serialize_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <name><name>db</name><operator>-&gt;</operator><name>read_pages_len</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>read_pages</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>read_pages</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rl_page</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>read_pages_len</name></name> <operator>-</operator> <name>pos</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>read_pages</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <name>page_obj</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>read_pages_len</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_FOUND</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<label><name>cleanup</name>:</label>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>RL_DEBUG</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_FOUND</name> <operator>||</operator> <operator>!</operator><name>keep</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RL_DEBUG</name></cpp:ifndef>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_alloc_page_number</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>_page_number</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>RL_OK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>page_number</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>next_empty_page</name></name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>page_number</name> <operator>==</operator> <name><name>db</name><operator>-&gt;</operator><name>number_of_pages</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>next_empty_page</name></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>number_of_pages</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_long_get</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>next_empty_page</name></name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>next_empty_page</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>_page_number</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>_page_number</name> <operator>=</operator> <name>page_number</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>rl_data_type</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>page_number</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// fprintf(stderr, "w %ld %s\n", page_number, type-&gt;name);</comment>
	<decl_stmt><decl><type><name>rl_page</name> <modifier>*</modifier></type><name>page</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>pos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>page_number</name> <operator>==</operator> <name><name>db</name><operator>-&gt;</operator><name>next_empty_page</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_alloc_page_number</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_write</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_data_type_header</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_search_cache</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>page_number</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>write_pages</name></name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>write_pages_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>RL_FOUND</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>!=</operator> <name><name>db</name><operator>-&gt;</operator><name>write_pages</name><index>[<expr><name>pos</name></expr>]</index></name><operator>-&gt;</operator><name>obj</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>write_pages</name><index>[<expr><name>pos</name></expr>]</index></name><operator>-&gt;</operator><name>obj</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>write_pages</name><index>[<expr><name>pos</name></expr>]</index></name><operator>-&gt;</operator><call><name><name>type</name><operator>-&gt;</operator><name>destroy</name></name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>write_pages</name><index>[<expr><name>pos</name></expr>]</index></name><operator>-&gt;</operator><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>write_pages</name><index>[<expr><name>pos</name></expr>]</index></name><operator>-&gt;</operator><name>obj</name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>write_pages</name><index>[<expr><name>pos</name></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>retval</name> <operator>==</operator> <name>RL_NOT_FOUND</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>driver_type</name></name> <operator>==</operator> <name>RL_FILE_DRIVER</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>file_driver_fp</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>rl_ensure_pages</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>page</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>page</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>RL_DEBUG</name></cpp:ifdef>
		<expr_stmt><expr><name><name>page</name><operator>-&gt;</operator><name>serialized_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><name><name>page</name><operator>-&gt;</operator><name>page_number</name></name> <operator>=</operator> <name>page_number</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>page</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>page</name><operator>-&gt;</operator><name>obj</name></name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <name><name>db</name><operator>-&gt;</operator><name>write_pages_len</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>write_pages</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>write_pages</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rl_page</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>write_pages_len</name></name> <operator>-</operator> <name>pos</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>write_pages</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <name>page</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>write_pages_len</name></name><operator>++</operator></expr>;</expr_stmt>

		<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_search_cache</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>page_number</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>read_pages</name></name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>read_pages_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>RL_FOUND</name></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>RL_DEBUG</name></cpp:ifdef>
			<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>read_pages</name><index>[<expr><name>pos</name></expr>]</index></name><operator>-&gt;</operator><name>serialized_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>read_pages</name><index>[<expr><name>pos</name></expr>]</index></name><operator>-&gt;</operator><name>obj</name> <operator>!=</operator> <name>obj</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>read_pages</name><index>[<expr><name>pos</name></expr>]</index></name><operator>-&gt;</operator><call><name><name>type</name><operator>-&gt;</operator><name>destroy</name></name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>read_pages</name><index>[<expr><name>pos</name></expr>]</index></name><operator>-&gt;</operator><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>read_pages</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>read_pages</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>read_pages</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rl_page</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>read_pages_len</name></name> <operator>-</operator> <name>pos</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>read_pages_len</name></name><operator>--</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_NOT_FOUND</name></expr>)</condition> <block>{<block_content>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

<label><name>cleanup</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>obj</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>type</name><operator>-&gt;</operator><name>destroy</name></name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>rl_purge_cache</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>page_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>page_number</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>rl_discard</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_purge_cache</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>page_number</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name></type> <name>pos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_search_cache</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>page_number</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>write_pages</name></name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>write_pages_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>RL_FOUND</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>write_pages</name><index>[<expr><name>pos</name></expr>]</index></name><operator>-&gt;</operator><name>obj</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_NOT_FOUND</name></expr>)</condition> <block>{<block_content>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_search_cache</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>page_number</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>read_pages</name></name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>read_pages_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>RL_FOUND</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>read_pages</name><index>[<expr><name>pos</name></expr>]</index></name><operator>-&gt;</operator><name>obj</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_NOT_FOUND</name></expr>)</condition> <block>{<block_content>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_delete</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>page_number</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>db</name><operator>-&gt;</operator><name>number_of_databases</name></name> <operator>+</operator> <name>RLITE_INTERNAL_DB_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>databases</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>page_number</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>databases</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_write</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_data_type_header</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_long_set</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>next_empty_page</name></name></expr></argument>, <argument><expr><name>page_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>next_empty_page</name></name> <operator>=</operator> <name>page_number</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_dirty_hash</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>RL_OK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_page</name> <modifier>*</modifier></type><name>page</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SHA1_CTX</name></type> <name>sha</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>write_pages_len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>hash</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>page_size</name></name> <operator>*</operator> sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><operator>*</operator><name>hash</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SHA1Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>db</name><operator>-&gt;</operator><name>write_pages_len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>page</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>write_pages</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>page_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>page</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name><name>page</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>serialize</name></name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>page</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>SHA1Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sha</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>page_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>SHA1Final</name><argument_list>(<argument><expr><operator>*</operator><name>hash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><operator>*</operator><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>hash</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_commit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_write_apply_wal</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>initial_next_empty_page</name></name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>next_empty_page</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>initial_number_of_pages</name></name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>number_of_pages</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>initial_number_of_databases</name></name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>number_of_databases</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>initial_databases</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>initial_databases</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>number_of_databases</name></name> <operator>+</operator> <name>RLITE_INTERNAL_DB_COUNT</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>initial_databases</name></name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>databases</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>number_of_databases</name></name> <operator>+</operator> <name>RLITE_INTERNAL_DB_COUNT</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_discard</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_discard</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>RL_OK</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>rl_page</name> <modifier>*</modifier></type><name>page</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>driver_type</name></name> <operator>==</operator> <name>RL_FILE_DRIVER</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>rl_file_driver</name> <modifier>*</modifier></type><name>driver</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>driver</name></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>driver</name><operator>-&gt;</operator><name>fp</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_flock</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name><name>driver</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><name>RLITE_FLOCK_UN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>fp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>db</name><operator>-&gt;</operator><name>read_pages_len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>page</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>read_pages</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>page</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<comment type="line">// read only, from wal</comment>
			<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>page</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>page</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>destroy</name></name> <operator>&amp;&amp;</operator> <name><name>page</name><operator>-&gt;</operator><name>obj</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>page</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>destroy</name></name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>page</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>RL_DEBUG</name></cpp:ifdef>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>page</name><operator>-&gt;</operator><name>serialized_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>db</name><operator>-&gt;</operator><name>write_pages_len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>page</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>write_pages</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>page</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;&amp;</operator> <name><name>page</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>destroy</name></name> <operator>&amp;&amp;</operator> <name><name>page</name><operator>-&gt;</operator><name>obj</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>page</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>destroy</name></name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>page</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>RL_DEBUG</name></cpp:ifdef>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>page</name><operator>-&gt;</operator><name>serialized_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>read_pages_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>write_pages_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>next_empty_page</name></name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>initial_next_empty_page</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>number_of_pages</name></name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>initial_number_of_pages</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>number_of_databases</name></name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>initial_number_of_databases</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>databases</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>databases</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>number_of_databases</name></name> <operator>+</operator> <name>RLITE_INTERNAL_DB_COUNT</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// ?</comment>
	<if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>initial_databases</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>databases</name></name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>initial_databases</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> <operator>*</operator>  <operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>number_of_databases</name></name> <operator>+</operator> <name>RLITE_INTERNAL_DB_COUNT</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>read_pages_alloc</name></name> <operator>!=</operator> <name>DEFAULT_READ_PAGES_LEN</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>rl_realloc</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>read_pages</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rl_page</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>DEFAULT_READ_PAGES_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OUT_OF_MEMORY</name></expr>;</expr_stmt>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>read_pages</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>read_pages_alloc</name></name> <operator>=</operator> <name>DEFAULT_READ_PAGES_LEN</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>write_pages_alloc</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>write_pages_alloc</name></name> <operator>!=</operator> <name>DEFAULT_WRITE_PAGES_LEN</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>write_pages_alloc</name></name> <operator>=</operator> <name>DEFAULT_WRITE_PAGES_LEN</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>rl_realloc</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>write_pages</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rl_page</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>DEFAULT_WRITE_PAGES_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OUT_OF_MEMORY</name></expr>;</expr_stmt>
				<goto>goto <name>cleanup</name>;</goto>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>write_pages</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_database_is_balanced</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>short</name> <modifier>*</modifier></type><name>pages</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_key</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>btree</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_btree_iterator</name> <modifier>*</modifier></type><name>iterator</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_get_key_btree</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>btree</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>RL_NOT_FOUND</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_btree_pages</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>btree</name></expr></argument>, <argument><expr><name>pages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_btree_iterator_create</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>btree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>retval</name> <operator>=</operator> <call><name>rl_btree_iterator_next</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>key</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pages</name><index>[<expr><name><name>key</name><operator>-&gt;</operator><name>string_page</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pages</name><index>[<expr><name><name>key</name><operator>-&gt;</operator><name>value_page</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_multi_string_pages</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>string_page</name></name></expr></argument>, <argument><expr><name>pages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>RL_TYPE_ZSET</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_zset_pages</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>value_page</name></name></expr></argument>, <argument><expr><name>pages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>RL_TYPE_HASH</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_hash_pages</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>value_page</name></name></expr></argument>, <argument><expr><name>pages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>RL_TYPE_SET</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_set_pages</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>value_page</name></name></expr></argument>, <argument><expr><name>pages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>RL_TYPE_LIST</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_llist_pages</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>value_page</name></name></expr></argument>, <argument><expr><name>pages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>RL_TYPE_STRING</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_string_pages</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>value_page</name></name></expr></argument>, <argument><expr><name>pages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Unknown type %d\n"</literal></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></else></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>iterator</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_END</name></expr>)</condition> <block>{<block_content>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>

<label><name>cleanup</name>:</label>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_btree_iterator_destroy</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_is_balanced</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>selected_database</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>selected_database</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name> <modifier>*</modifier></type><name>pages</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>missing_pages</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>pages</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>db</name><operator>-&gt;</operator><name>number_of_pages</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>db</name><operator>-&gt;</operator><name>number_of_pages</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>pages</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></for>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>db</name><operator>-&gt;</operator><name>number_of_databases</name></name> <operator>+</operator> <name>RLITE_INTERNAL_DB_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>databases</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>pages</name><index>[<expr><name><name>db</name><operator>-&gt;</operator><name>databases</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_select</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_database_is_balanced</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>pages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_select</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>selected_database</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>long</name></type> <name>page_number</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>next_empty_page</name></name></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name>page_number</name> <operator>!=</operator> <name><name>db</name><operator>-&gt;</operator><name>number_of_pages</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>pages</name><index>[<expr><name>page_number</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_long_get</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>page_number</name></expr></argument>, <argument><expr><name>page_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>db</name><operator>-&gt;</operator><name>number_of_pages</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>pages</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Found orphan page %ld\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>missing_pages</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>missing_pages</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Missing %ld pages\n"</literal></expr></argument>, <argument><expr><name>missing_pages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_UNEXPECTED</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<label><name>cleanup</name>:</label>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>pages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_select_internal</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>internal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>selected_internal</name></name> <operator>=</operator> <name>internal</name></expr>;</expr_stmt>
	<return>return <expr><name>RL_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_select</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>selected_database</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>selected_database</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>selected_database</name> <operator>&gt;=</operator> <name><name>db</name><operator>-&gt;</operator><name>number_of_databases</name></name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>RL_INVALID_PARAMETERS</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>selected_database</name></name> <operator>=</operator> <name>selected_database</name></expr>;</expr_stmt>
	<return>return <expr><name>RL_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_move</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>database</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>olddb</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>selected_database</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>expires</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>value_page</name></decl>;</decl_stmt>
	<comment type="line">// this could be more efficient, if we don't delete the value page</comment>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_key_get</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value_page</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>expires</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_select</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>database</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_key_get</name></expr></argument>, <argument><expr><name>RL_NOT_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_select</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>olddb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_key_delete</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_select</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>database</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_key_set</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>value_page</name></expr></argument>, <argument><expr><name>expires</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<expr_stmt><expr><call><name>rl_select</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>olddb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_rename</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>srclen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>targetlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>overwrite</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>expires</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>value_page</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>version</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>overwrite</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL2</name><argument_list>(<argument><expr><name>rl_key_get</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>RL_NOT_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>targetlen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>RL_FOUND</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_key_delete_with_value</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>targetlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>version</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_key_get</name></expr></argument>, <argument><expr><name>RL_NOT_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>targetlen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<comment type="line">// this could be more efficient, if we don't delete the value page</comment>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_key_get</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srclen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value_page</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>expires</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_key_delete</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srclen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_key_set</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>targetlen</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>value_page</name></expr></argument>, <argument><expr><name>expires</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_dbsize</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>btree</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_get_key_btree</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>btree</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>RL_NOT_FOUND</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <name><name>btree</name><operator>-&gt;</operator><name>number_of_elements</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_keys</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pattern</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>patternlen</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>_len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>_result</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier><modifier>*</modifier></type><name>_resultlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>btree</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_btree_iterator</name> <modifier>*</modifier></type><name>iterator</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_key</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>alloc</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>keystr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <modifier>*</modifier></type><name>resultlen</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>keystrlen</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_get_key_btree</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>btree</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>RL_NOT_FOUND</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>_result</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>_resultlen</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_btree_iterator_create</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>btree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>alloc</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <operator>*</operator> <name>alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>resultlen</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>allkeys</name> <init>= <expr><name>patternlen</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>pattern</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>retval</name> <operator>=</operator> <call><name>rl_btree_iterator_next</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>key</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_multi_string_get</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>string_page</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keystr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keystrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>allkeys</name> <operator>||</operator> <call><name>rl_stringmatchlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>pattern</name></expr></argument>, <argument><expr><name>patternlen</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>keystr</name></expr></argument>, <argument><expr><name>keystrlen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>len</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>alloc</name></expr>)</condition> <block>{<block_content>
				<macro><name>RL_REALLOC</name><argument_list>(<argument>result</argument>, <argument>sizeof(unsigned char *) * alloc * <literal type="number">2</literal></argument>)</argument_list></macro>
				<macro><name>RL_REALLOC</name><argument_list>(<argument>resultlen</argument>, <argument>sizeof(long) * alloc * <literal type="number">2</literal></argument>)</argument_list></macro>
				<expr_stmt><expr><name>alloc</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>result</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>keystr</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>resultlen</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>keystrlen</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_END</name></expr>)</condition> <block>{<block_content>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// TODO: should we realloc to shrink the result?</comment>
	<expr_stmt><expr><operator>*</operator><name>_len</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>_result</name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>_resultlen</name> <operator>=</operator> <name>resultlen</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>resultlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_randomkey</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>keylen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>btree</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_key</name> <modifier>*</modifier></type><name>key_obj</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_get_key_btree</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>btree</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_btree_random_element</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>btree</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>key_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_multi_string_get</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>key_obj</name><operator>-&gt;</operator><name>string_page</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_flushdb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>btree</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_btree_iterator</name> <modifier>*</modifier></type><name>iterator</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_key</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL2</name><argument_list>(<argument><expr><name>rl_get_key_btree</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>RL_NOT_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>btree</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>RL_NOT_FOUND</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_btree_iterator_create</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>btree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>retval</name> <operator>=</operator> <call><name>rl_btree_iterator_next</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>key</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_key_delete_value</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>value_page</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_multi_string_delete</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>string_page</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_END</name></expr>)</condition> <block>{<block_content>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_btree_delete</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>btree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_delete</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>databases</name><index>[<expr><name><name>db</name><operator>-&gt;</operator><name>selected_database</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>databases</name><index>[<expr><name><name>db</name><operator>-&gt;</operator><name>selected_database</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_write</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_data_type_header</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_flushall</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>selected_database</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>selected_database</name></name></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>db</name><operator>-&gt;</operator><name>number_of_databases</name></name> <operator>+</operator> <name>RLITE_INTERNAL_DB_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>selected_database</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_flushdb</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>selected_database</name></name> <operator>=</operator> <name>selected_database</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>
</unit>
