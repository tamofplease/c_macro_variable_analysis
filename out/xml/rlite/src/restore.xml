<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/rlite/src/restore.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/page_key.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/rlite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/crc64.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/endianconv.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/lzf.h"</cpp:file></cpp:include>

<struct>struct <name>stringwithlength</name> <block>{
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>string</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>stringlen</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>int</name></type> <name>ucread</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rl_restore_streamer</name></name> <modifier>*</modifier></type><name>streamer</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>stringwithlength</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>streamer</name><operator>-&gt;</operator><name>context</name></name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name><name>data</name><operator>-&gt;</operator><name>stringlen</name></name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>RL_UNEXPECTED</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>str</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>string</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>stringlen</name></name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
	<return>return <expr><name>RL_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>rl_restore_streamer</name><modifier>*</modifier></type> <name>init_string_streamer</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>datalen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_restore_streamer</name> <modifier>*</modifier></type><name>streamer</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>streamer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>streamer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>stringwithlength</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>rl_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>streamer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>string</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>stringlen</name></name> <operator>=</operator> <name>datalen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>streamer</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>streamer</name><operator>-&gt;</operator><name>read</name></name> <operator>=</operator> <operator>&amp;</operator><name>ucread</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>streamer</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_string_streamer</name><parameter_list>(<parameter><decl><type><name>rl_restore_streamer</name> <modifier>*</modifier></type><name>streamer</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>streamer</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>streamer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>rl_restore_streamer</name> <modifier>*</modifier></type><name>streamer</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name><name>streamer</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name>streamer</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>verify</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>datalen</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>footer</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint16_t</name></type> <name>rdbver</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>crc</name></decl>;</decl_stmt>

	<comment type="block">/* At least 2 bytes of RDB version and 8 of CRC64 should be present. */</comment>
	<if_stmt><if>if <condition>(<expr><name>datalen</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>RL_INVALID_PARAMETERS</name></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>footer</name> <operator>=</operator> <name>data</name><operator>+</operator><operator>(</operator><name>datalen</name><operator>-</operator><literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt>

	<comment type="block">/* Verify RDB version */</comment>
	<expr_stmt><expr><name>rdbver</name> <operator>=</operator> <operator>(</operator><name><name>footer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>footer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rdbver</name> <operator>!=</operator> <name>REDIS_RDB_VERSION</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>RL_INVALID_PARAMETERS</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Verify CRC64 */</comment>
	<expr_stmt><expr><name>crc</name> <operator>=</operator> <call><name>rl_crc64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>data</name></expr></argument>,<argument><expr><name>datalen</name><operator>-</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memrev64ifbe</name><argument_list>(<argument><expr><operator>&amp;</operator><name>crc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><ternary><condition><expr><operator>(</operator><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>crc</name></expr></argument>,<argument><expr><name>footer</name><operator>+</operator><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>RL_OK</name></expr> </then><else>: <expr><name>RL_INVALID_PARAMETERS</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_signed_int</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
	<return>return <expr><name>RL_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_signed_long</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>long</name></type> <name>tmp</name></decl>;</decl_stmt>
	<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>value</name> <operator>|=</operator> <name>tmp</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>data</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>value</name> <operator>|=</operator> <name>tmp</name> <operator>&lt;&lt;</operator> <literal type="number">40</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>data</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>value</name> <operator>|=</operator> <name>tmp</name> <operator>&lt;&lt;</operator> <literal type="number">48</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>data</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>value</name> <operator>|=</operator> <name>tmp</name> <operator>&lt;&lt;</operator> <literal type="number">56</literal></expr>;</expr_stmt>
	<return>return <expr><name>RL_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_unsigned_short</name><parameter_list>(<parameter><decl><type><name>rl_restore_streamer</name> <modifier>*</modifier></type><name>streamer</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>ucint</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>val</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>streamer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ucint</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>val</name> <operator>=</operator> <name>ucint</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>streamer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ucint</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>val</name> <operator>|=</operator> <name>ucint</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_unsigned_int</name><parameter_list>(<parameter><decl><type><name>rl_restore_streamer</name> <modifier>*</modifier></type><name>streamer</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>ucint</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>val</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>streamer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ucint</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>val</name> <operator>=</operator> <name>ucint</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>streamer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ucint</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>val</name> <operator>|=</operator> <name>ucint</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>streamer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ucint</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>val</name> <operator>|=</operator> <name>ucint</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>streamer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ucint</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>val</name> <operator>|=</operator> <name>ucint</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_unsigned_long</name><parameter_list>(<parameter><decl><type><name>rl_restore_streamer</name> <modifier>*</modifier></type><name>streamer</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>ucint</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>val</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>streamer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ucint</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>val</name> <operator>=</operator> <name>ucint</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>streamer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ucint</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>val</name> <operator>|=</operator> <name>ucint</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>streamer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ucint</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>val</name> <operator>|=</operator> <name>ucint</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>streamer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ucint</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>val</name> <operator>|=</operator> <name>ucint</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>streamer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ucint</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>val</name> <operator>|=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>ucint</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>streamer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ucint</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>val</name> <operator>|=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>ucint</name> <operator>&lt;&lt;</operator> <literal type="number">40</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>streamer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ucint</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>val</name> <operator>|=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>ucint</name> <operator>&lt;&lt;</operator> <literal type="number">48</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>streamer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ucint</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>val</name> <operator>|=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>ucint</name> <operator>&lt;&lt;</operator> <literal type="number">56</literal></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_length_with_encoding</name><parameter_list>(<parameter><decl><type><name>rl_restore_streamer</name> <modifier>*</modifier></type><name>streamer</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>length</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>is_encoded</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>f</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>f4</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>streamer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>enc_type</name> <init>= <expr><operator>(</operator><name>f</name> <operator>&amp;</operator> <literal type="number">0xC0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>enc_type</name> <operator>==</operator> <name>REDIS_RDB_ENCVAL</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>is_encoded</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>is_encoded</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><operator>*</operator><name>length</name> <operator>=</operator> <name>f</name> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>
		<return>return <expr><name>RL_OK</name></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>enc_type</name> <operator>==</operator> <name>REDIS_RDB_6BITLEN</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>is_encoded</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>is_encoded</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><operator>*</operator><name>length</name> <operator>=</operator> <name>f</name> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>
		<return>return <expr><name>RL_OK</name></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>enc_type</name> <operator>==</operator> <name>REDIS_RDB_14BITLEN</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>is_encoded</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>is_encoded</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><operator>*</operator><name>length</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>f</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>streamer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>length</name> <operator>|=</operator> <name>f</name></expr>;</expr_stmt>
		<return>return <expr><name>RL_OK</name></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>is_encoded</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>is_encoded</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>streamer</name></expr></argument>, <argument><expr><name>f4</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>length</name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><name>f4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>RL_OK</name></expr>;</return>
	</block_content>}</block></else></if_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_ziplist_entry</name><parameter_list>(<parameter><decl><type><name>rl_restore_streamer</name> <modifier>*</modifier></type><name>streamer</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>prev_length</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>_entry</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>_length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>RL_OK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>prev_length</name> <operator>==</operator> <literal type="number">254</literal></expr>)</condition> <block>{<block_content>
		<macro><name>RL_CALL</name><argument_list>(<argument>read_unsigned_int</argument>, <argument>RL_OK</argument>, <argument>streamer</argument>, <argument>&amp;prev_length</argument>)</argument_list></macro>
	</block_content>}</block></if></if_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>ucaux</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>entry_header</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>streamer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ucaux</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>entry_header</name> <operator>=</operator> <name>ucaux</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>entry_header</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>length</name> <operator>=</operator> <name>entry_header</name> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><operator>(</operator><name>entry_header</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>length</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>entry_header</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>streamer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ucaux</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>length</name> <operator>|=</operator> <name>ucaux</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><operator>(</operator><name>entry_header</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
		<comment type="line">// TODO: length = read_big_endian_unsigned_int(f)</comment>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_NOT_IMPLEMENTED</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>entry_header</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>==</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>length</name> <operator>=</operator> <name>entry_header</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>streamer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ucaux</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>length</name> <operator>|=</operator> <name>ucaux</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>entry_header</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>==</operator> <literal type="number">13</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>entry_header</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>streamer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read_signed_int</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>entry_header</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>==</operator> <literal type="number">14</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>b</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>entry_header</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>streamer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read_signed_long</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>entry_header</name> <operator>==</operator> <literal type="number">240</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>tmp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>entry_header</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>streamer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read_signed_int</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>entry_header</name> <operator>==</operator> <literal type="number">254</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>streamer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ucaux</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>length</name> <operator>=</operator> <name>ucaux</name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>entry_header</name> <operator>&gt;=</operator> <literal type="number">241</literal> <operator>&amp;&amp;</operator> <name>entry_header</name> <operator>&lt;=</operator> <literal type="number">253</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>entry</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>, <argument><expr><name>entry_header</name> <operator>-</operator> <literal type="number">241</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>ret</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator> <name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>streamer</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>ret</name>:</label>
	<expr_stmt><expr><operator>*</operator><name>_entry</name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>_length</name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_string</name><parameter_list>(<parameter><decl><type><name>rl_restore_streamer</name> <modifier>*</modifier></type><name>streamer</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>strlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>RL_OK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>length</name></decl>, <decl><type ref="prev"/><name>strdatalen</name></decl>, <decl><type ref="prev"/><name>cdatalen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>strdata</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>is_encoded</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>ucint</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int16_t</name></type> <name>i16int</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32_t</name></type> <name>i32int</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read_length_with_encoding</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>streamer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>length</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_encoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>is_encoded</name> <operator>&amp;&amp;</operator> <name>length</name> <operator>==</operator> <name>REDIS_RDB_ENC_INT8</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>strdatalen</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>strdata</name></expr></argument>, <argument><expr><name>strdatalen</name> <operator>*</operator> sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>streamer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ucint</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>strdatalen</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>strdata</name></expr></argument>, <argument><expr><name>strdatalen</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>signed</name> <name>char</name><operator>)</operator><name>ucint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>strdatalen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_UNEXPECTED</name></expr>;</expr_stmt>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>is_encoded</name> <operator>&amp;&amp;</operator> <name>length</name> <operator>==</operator> <name>REDIS_RDB_ENC_INT16</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>strdatalen</name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>strdata</name></expr></argument>, <argument><expr><name>strdatalen</name> <operator>*</operator> sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>streamer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ucint</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i16int</name> <operator>=</operator> <name>ucint</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>streamer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ucint</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i16int</name> <operator>|=</operator> <name>ucint</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

		<expr_stmt><expr><name>strdatalen</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>strdata</name></expr></argument>, <argument><expr><name>strdatalen</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>i16int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>strdatalen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_UNEXPECTED</name></expr>;</expr_stmt>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>is_encoded</name> <operator>&amp;&amp;</operator> <name>length</name> <operator>==</operator> <name>REDIS_RDB_ENC_INT32</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>strdatalen</name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>strdata</name></expr></argument>, <argument><expr><name>strdatalen</name> <operator>*</operator> sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>streamer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ucint</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i32int</name> <operator>=</operator> <name>ucint</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>streamer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ucint</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i32int</name> <operator>|=</operator> <name>ucint</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>streamer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ucint</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i32int</name> <operator>|=</operator> <name>ucint</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>streamer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ucint</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i32int</name> <operator>|=</operator> <name>ucint</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

		<expr_stmt><expr><name>strdatalen</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>strdata</name></expr></argument>, <argument><expr><name>strdatalen</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>i32int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>strdatalen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_UNEXPECTED</name></expr>;</expr_stmt>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>is_encoded</name> <operator>&amp;&amp;</operator> <name>length</name> <operator>==</operator> <name>REDIS_RDB_ENC_LZF</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read_length_with_encoding</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>streamer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cdatalen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read_length_with_encoding</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>streamer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>strdatalen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>strdata</name> <operator>=</operator> <call><name>rl_malloc</name><argument_list>(<argument><expr><name>strdatalen</name> <operator>*</operator> sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>cdata</name> <init>= <expr><call><name>rl_malloc</name><argument_list>(<argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator> <name>cdatalen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>streamer</name></expr></argument>, <argument><expr><name>cdata</name></expr></argument>, <argument><expr><name>cdatalen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rl_lzf_decompress</name><argument_list>(<argument><expr><name>cdata</name></expr></argument>, <argument><expr><name>cdatalen</name></expr></argument>, <argument><expr><name>strdata</name></expr></argument>, <argument><expr><name>strdatalen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>cdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>is_encoded</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>strdatalen</name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>strdata</name></expr></argument>, <argument><expr><name>strdatalen</name> <operator>*</operator> sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>streamer</name></expr></argument>, <argument><expr><name>strdata</name></expr></argument>, <argument><expr><name>strdatalen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_NOT_IMPLEMENTED</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>str</name> <operator>=</operator> <name>strdata</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>strlen</name> <operator>=</operator> <name>strdatalen</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>strdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_restore_stream</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>expires</name></decl></parameter>, <parameter><decl><type><name>rl_restore_streamer</name> <modifier>*</modifier></type><name>streamer</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>type</name></decl>, <decl><type ref="prev"/><name>ucaux</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>length</name></decl>, <decl><type ref="prev"/><name>length2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>strdata</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>strdata2</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>strdata3</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>strdatalen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>strdata2len</name></decl>, <decl><type ref="prev"/><name>strdata3len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>encoding</name></decl>, <decl><type ref="prev"/><name>numentries</name></decl>, <decl><type ref="prev"/><name>ulvalue</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>f</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_key_get</name></expr></argument>, <argument><expr><name>RL_NOT_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>streamer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>REDIS_RDB_TYPE_STRING</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read_string</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>streamer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>strdata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>strdatalen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_set</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>strdata</name></expr></argument>, <argument><expr><name>strdatalen</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>expires</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>REDIS_RDB_TYPE_LIST</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read_length_with_encoding</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>streamer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>length</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read_string</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>streamer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>strdata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>strdatalen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_push</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>strdata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>strdatalen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>strdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>strdata</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>REDIS_RDB_TYPE_SET</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read_length_with_encoding</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>streamer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>length</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read_string</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>streamer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>strdata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>strdatalen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_sadd</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>strdata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>strdatalen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>strdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>strdata</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>REDIS_RDB_TYPE_ZSET</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read_length_with_encoding</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>streamer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>length</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read_string</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>streamer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>strdata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>strdatalen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>streamer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ucaux</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>length2</name> <operator>=</operator> <name>ucaux</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>length2</name> <operator>&gt;</operator> <literal type="number">40</literal> <operator>||</operator> <name>length2</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_UNEXPECTED</name></expr>;</expr_stmt>
				<goto>goto <name>cleanup</name>;</goto>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>streamer</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>f</name></expr></argument>, <argument><expr><name>length2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>f</name><index>[<expr><name>length2</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>strtold</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_zadd</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>strdata</name></expr></argument>, <argument><expr><name>strdatalen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>strdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>strdata</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>REDIS_RDB_TYPE_HASH</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read_length_with_encoding</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>streamer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>length</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read_string</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>streamer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>strdata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>strdatalen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read_string</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>streamer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>strdata2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>length2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_hset</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>strdata</name></expr></argument>, <argument><expr><name>strdatalen</name></expr></argument>, <argument><expr><name>strdata2</name></expr></argument>, <argument><expr><name>length2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>strdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>strdata</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>strdata2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>strdata2</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>REDIS_RDB_TYPE_HASH_ZIPMAP</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_NOT_IMPLEMENTED</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>REDIS_RDB_TYPE_LIST_ZIPLIST</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read_string</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>streamer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>strdata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>strdatalen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>rl_restore_streamer</name> <modifier>*</modifier></type><name>substreamer</name> <init>= <expr><call><name>init_string_streamer</name><argument_list>(<argument><expr><name>strdata</name></expr></argument>, <argument><expr><name>strdatalen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>substreamer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>substreamer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ucaux</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>ucaux</name> <operator>==</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read_ziplist_entry</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>substreamer</name></expr></argument>, <argument><expr><name>ucaux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>strdata2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>strdata2len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_push</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>strdata2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>strdata2len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>strdata2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>strdata2</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></while>
		<expr_stmt><expr><call><name>free_string_streamer</name><argument_list>(<argument><expr><name>substreamer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>strdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>strdata</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>REDIS_RDB_TYPE_SET_INTSET</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read_string</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>streamer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>strdata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>strdatalen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>rl_restore_streamer</name> <modifier>*</modifier></type><name>substreamer</name> <init>= <expr><call><name>init_string_streamer</name><argument_list>(<argument><expr><name>strdata</name></expr></argument>, <argument><expr><name>strdatalen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read_unsigned_int</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>substreamer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read_unsigned_int</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>substreamer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numentries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>encoding</name> <operator>!=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>encoding</name> <operator>!=</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>encoding</name> <operator>!=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_UNEXPECTED</name></expr>;</expr_stmt>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>numentries</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>encoding</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read_unsigned_long</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>substreamer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ulvalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>encoding</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read_unsigned_int</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>substreamer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ulvalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>encoding</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read_unsigned_short</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>substreamer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ulvalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>length2</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>, <argument><expr><name>ulvalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_sadd</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>length2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>free_string_streamer</name><argument_list>(<argument><expr><name>substreamer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>REDIS_RDB_TYPE_ZSET_ZIPLIST</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read_string</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>streamer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>strdata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>strdatalen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>rl_restore_streamer</name> <modifier>*</modifier></type><name>substreamer</name> <init>= <expr><call><name>init_string_streamer</name><argument_list>(<argument><expr><name>strdata</name></expr></argument>, <argument><expr><name>strdatalen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>substreamer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>substreamer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ucaux</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>ucaux</name> <operator>==</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read_ziplist_entry</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>substreamer</name></expr></argument>, <argument><expr><name>ucaux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>strdata2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>strdata2len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>substreamer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read_ziplist_entry</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>substreamer</name></expr></argument>, <argument><expr><name>ucaux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>strdata3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>strdata3len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>strdata3len</name> <operator>&gt;</operator> <literal type="number">40</literal> <operator>||</operator> <name>strdata3len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_UNEXPECTED</name></expr>;</expr_stmt>
				<goto>goto <name>cleanup</name>;</goto>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>strdata3</name></expr></argument>, <argument><expr><name>strdata3len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>f</name><index>[<expr><name>strdata3len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>strtold</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_zadd</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>strdata2</name></expr></argument>, <argument><expr><name>strdata2len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>strdata2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>strdata2</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>strdata3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>strdata3</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></while>
		<expr_stmt><expr><call><name>free_string_streamer</name><argument_list>(<argument><expr><name>substreamer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>strdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>strdata</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>REDIS_RDB_TYPE_HASH_ZIPLIST</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read_string</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>streamer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>strdata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>strdatalen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>rl_restore_streamer</name> <modifier>*</modifier></type><name>substreamer</name> <init>= <expr><call><name>init_string_streamer</name><argument_list>(<argument><expr><name>strdata</name></expr></argument>, <argument><expr><name>strdatalen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>substreamer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>substreamer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ucaux</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>ucaux</name> <operator>==</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read_ziplist_entry</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>substreamer</name></expr></argument>, <argument><expr><name>ucaux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>strdata2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>strdata2len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>substreamer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>read_ziplist_entry</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>substreamer</name></expr></argument>, <argument><expr><name>ucaux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>strdata3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>strdata3len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_hset</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>strdata2</name></expr></argument>, <argument><expr><name>strdata2len</name></expr></argument>, <argument><expr><name>strdata3</name></expr></argument>, <argument><expr><name>strdata3len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>strdata2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>strdata2</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>strdata3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>strdata3</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></while>
		<expr_stmt><expr><call><name>free_string_streamer</name><argument_list>(<argument><expr><name>substreamer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>strdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>strdata</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_NOT_IMPLEMENTED</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>strdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>strdata2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>strdata3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_restore</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>expires</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>datalen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_restore_streamer</name><modifier>*</modifier></type> <name>streamer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>verify</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>datalen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>streamer</name> <operator>=</operator> <call><name>init_string_streamer</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>datalen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>streamer</name></expr>)</condition> <block>{<block_content>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_restore_stream</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>expires</name></expr></argument>, <argument><expr><name>streamer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>streamer</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>free_string_streamer</name><argument_list>(<argument><expr><name>streamer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>
</unit>
