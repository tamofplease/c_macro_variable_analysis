<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/rlite/src/sort.c"><comment type="block">/* SORT command and helper functions.
 *
 * Copyright (c) 2009-2012, Salvatore Sanfilippo &lt;antirez at gmail dot com&gt;
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *   * Neither the name of Redis nor the names of its contributors may be used
 *     to endorse or promote products derived from this software without
 *     specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/rlite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/sort.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/pqsort.h"</cpp:file></cpp:include> <comment type="block">/* Partial qsort for SORT+LIMIT */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include> <comment type="block">/* isnan() */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<function_decl><type><name>int</name></type> <name>strcoll</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>sort_desc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>sort_alpha</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>sort_bypattern</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>sort_store</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>compareString</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>obj1</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>obj1len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>obj2</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>obj2len</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>cmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>minlen</name> <init>= <expr><ternary><condition><expr><name>obj1len</name> <operator>&gt;</operator> <name>obj2len</name></expr> ?</condition><then> <expr><name>obj2len</name></expr> </then><else>: <expr><name>obj1len</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>cmp</name> <operator>=</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>obj1</name></expr></argument>, <argument><expr><name>obj2</name></expr></argument>, <argument><expr><name>minlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>obj1len</name> <operator>!=</operator> <name>obj2len</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>cmp</name> <operator>=</operator> <ternary><condition><expr><name>obj1len</name> <operator>&gt;</operator> <name>obj2len</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>cmp</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>compareObjectsAsString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rliteSortObject</name> <modifier>*</modifier></type><name>so1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rliteSortObject</name> <modifier>*</modifier></type><name>so2</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>compareString</name><argument_list>(<argument><expr><name><name>so1</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><name><name>so1</name><operator>-&gt;</operator><name>objlen</name></name></expr></argument>, <argument><expr><name><name>so2</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><name><name>so2</name><operator>-&gt;</operator><name>objlen</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>compareObjectsAsLongLong</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rliteSortObject</name> <modifier>*</modifier></type><name>so1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rliteSortObject</name> <modifier>*</modifier></type><name>so2</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>strcoll</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>so1</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>so2</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Return the value associated to the key with a name obtained using
 * the following rules:
 *
 * 1) The first occurrence of '*' in 'pattern' is substituted with 'subst'.
 *
 * 2) If 'pattern' matches the "-&gt;" string, everything on the left of
 *	the arrow is treated as the name of a hash field, and the part on the
 *	left as the key name containing a hash. The value of the specified
 *	field is returned.
 *
 * 3) If 'pattern' equals "#", the function simply returns 'subst' itself so
 *	that the SORT command can be used like: SORT key GET # to retrieve
 *	the Set/List elements directly.
 *
 * The returned object will always have its refcount increased by 1
 * when it is non-NULL. */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lookupKeyByPattern</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pattern</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>patternlen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>subst</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>sublen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>retobj</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>retobjlen</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>RL_OK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>keylen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>field</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>fieldlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>prefixlen</name></decl>, <decl><type ref="prev"/><name>postfixlen</name></decl>;</decl_stmt>

	<comment type="block">/* If the pattern is "#" return the substitution object itself in order
	 * to implement the "SORT ... GET #" feature. */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>pattern</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal> <operator>&amp;&amp;</operator> <name><name>pattern</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>retobj</name> <operator>=</operator> <call><name>rl_malloc</name><argument_list>(<argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator> <name>sublen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>retobj</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>RL_OUT_OF_MEMORY</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>retobj</name></expr></argument>, <argument><expr><name>subst</name></expr></argument>, <argument><expr><name>sublen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>retobjlen</name> <operator>=</operator> <name>sublen</name></expr>;</expr_stmt>
		<return>return <expr><name>RL_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* If we can't find '*' in the pattern we return NULL as to GET a
	 * fixed key does not make sense. */</comment>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>strchr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>pattern</name></expr></argument>,<argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_NOT_FOUND</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Find out if we're dealing with a hash dereference. */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>strstr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"-&gt;"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>f</name><operator>+</operator><literal type="number">2</literal><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>fieldlen</name> <operator>=</operator> <name>patternlen</name><operator>-</operator><operator>(</operator><name>f</name><operator>-</operator><name>pattern</name><operator>)</operator><operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>field</name> <operator>=</operator> <name>f</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>fieldlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* Perform the '*' substitution. */</comment>
	<expr_stmt><expr><name>prefixlen</name> <operator>=</operator> <name>p</name><operator>-</operator><name>pattern</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>postfixlen</name> <operator>=</operator> <name>patternlen</name><operator>-</operator><operator>(</operator><name>prefixlen</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>-</operator><operator>(</operator><ternary><condition><expr><name>fieldlen</name></expr> ?</condition><then> <expr><name>fieldlen</name><operator>+</operator><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>keylen</name> <operator>=</operator> <name>prefixlen</name><operator>+</operator><name>sublen</name><operator>+</operator><name>postfixlen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>rl_malloc</name><argument_list>(<argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator> <name>keylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>key</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OUT_OF_MEMORY</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>key</name></expr></argument>,<argument><expr><name>pattern</name></expr></argument>,<argument><expr><name>prefixlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>key</name><operator>+</operator><name>prefixlen</name></expr></argument>,<argument><expr><name>subst</name></expr></argument>,<argument><expr><name>sublen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>key</name><operator>+</operator><name>prefixlen</name><operator>+</operator><name>sublen</name></expr></argument>,<argument><expr><name>p</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>postfixlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Lookup substituted key */</comment>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_key_get</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>field</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>RL_TYPE_HASH</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_NOT_FOUND</name></expr>;</expr_stmt>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* Retrieve value from hash by the field name. This operation
		 * already increases the refcount of the returned object. */</comment>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_hget</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name>fieldlen</name></expr></argument>, <argument><expr><name>retobj</name></expr></argument>, <argument><expr><name>retobjlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>RL_TYPE_STRING</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_NOT_FOUND</name></expr>;</expr_stmt>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* Every object that this function returns needs to have its refcount
		 * increased. sortCommand decreases it again. */</comment>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_get</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>retobj</name></expr></argument>, <argument><expr><name>retobjlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>retobj</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>retobjlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* sortCompare() is used by qsort in sortCommand(). Given that qsort_r with
 * the additional parameter is not standard but a BSD-specific we have to
 * pass sorting parameters via the global 'server' structure */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>sortCompare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>rliteSortObject</name> <modifier>*</modifier></type><name>so1</name> <init>= <expr><name>s1</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>so2</name> <init>= <expr><name>s2</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>cmp</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sort_alpha</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Numeric sorting. Here it's trivial as we precomputed scores */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>so1</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>score</name></name> <operator>&gt;</operator> <name><name>so2</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>score</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>cmp</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>so1</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>score</name></name> <operator>&lt;</operator> <name><name>so2</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>score</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>cmp</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<comment type="block">/* Objects have the same score, but we don't want the comparison
			 * to be undefined, so we compare objects lexicographically.
			 * This way the result of SORT is deterministic. */</comment>
			<expr_stmt><expr><name>cmp</name> <operator>=</operator> <call><name>compareObjectsAsString</name><argument_list>(<argument><expr><name>so1</name></expr></argument>, <argument><expr><name>so2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="block">/* Alphanumeric sorting */</comment>
		<if_stmt><if>if <condition>(<expr><name>sort_bypattern</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>so1</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>cmpobj</name><operator>.</operator><name>obj</name></name> <operator>||</operator> <operator>!</operator><name><name>so2</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>cmpobj</name><operator>.</operator><name>obj</name></name></expr>)</condition> <block>{<block_content>
				<comment type="block">/* At least one compare object is NULL */</comment>
				<if_stmt><if>if <condition>(<expr><name><name>so1</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>cmpobj</name><operator>.</operator><name>obj</name></name> <operator>==</operator> <name><name>so2</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>cmpobj</name><operator>.</operator><name>obj</name></name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>cmp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
				<if type="elseif">else if <condition>(<expr><name><name>so1</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>cmpobj</name><operator>.</operator><name>obj</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>cmp</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>cmp</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<comment type="block">/* We have both the objects, compare them. */</comment>
				<if_stmt><if>if <condition>(<expr><name>sort_store</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name>cmp</name> <operator>=</operator> <call><name>compareString</name><argument_list>(<argument><expr><name><name>so1</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>cmpobj</name><operator>.</operator><name>obj</name></name></expr></argument>, <argument><expr><name><name>so1</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>cmpobj</name><operator>.</operator><name>objlen</name></name></expr></argument>, <argument><expr><name><name>so2</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>cmpobj</name><operator>.</operator><name>obj</name></name></expr></argument>, <argument><expr><name><name>so2</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>cmpobj</name><operator>.</operator><name>objlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if> <else>else <block>{<block_content>
					<comment type="block">/* Here we can use strcoll() directly as we are sure that
					 * the objects are decoded string objects. */</comment>
					<expr_stmt><expr><name>cmp</name> <operator>=</operator> <call><name>strcoll</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>so1</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>cmpobj</name><operator>.</operator><name>obj</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>so2</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>cmpobj</name><operator>.</operator><name>obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<comment type="block">/* Compare elements directly. */</comment>
			<if_stmt><if>if <condition>(<expr><name>sort_store</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>cmp</name> <operator>=</operator> <call><name>compareObjectsAsString</name><argument_list>(<argument><expr><name>so1</name></expr></argument>,<argument><expr><name>so2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><name>cmp</name> <operator>=</operator> <call><name>compareObjectsAsLongLong</name><argument_list>(<argument><expr><name>so1</name></expr></argument>,<argument><expr><name>so2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><ternary><condition><expr><name>sort_desc</name></expr> ?</condition><then> <expr><operator>-</operator><name>cmp</name></expr> </then><else>: <expr><name>cmp</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_sort</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sortby</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>sortbylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dontsort</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inLuaScript</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>desc</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>limit_start</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>limit_count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>getc</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>getv</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>getvlen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>storekey</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>storekeylen</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>retobjc</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>retobjv</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier><modifier>*</modifier></type><name>retobjvlen</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>vectorlen</name></decl>, <decl><type ref="prev"/><name>start</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>values</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <modifier>*</modifier></type><name>valueslen</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>valuelen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rliteSortObject</name> <modifier>*</modifier></type><name>vector</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<comment type="block">/* Lookup the key to sort. It must be of the right types */</comment>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>objc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>objv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <modifier>*</modifier></type><name>objvlen</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>storekey</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL2</name><argument_list>(<argument><expr><name>rl_key_delete_with_value</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>RL_NOT_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>storekey</name></expr></argument>, <argument><expr><name>storekeylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_key_get</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>RL_TYPE_SET</name> <operator>&amp;&amp;</operator>
		<name>type</name> <operator>!=</operator> <name>RL_TYPE_LIST</name> <operator>&amp;&amp;</operator>
		<name>type</name> <operator>!=</operator> <name>RL_TYPE_ZSET</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_WRONG_TYPE</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* When sorting a set with no sort specified, we must sort the output
	 * so the result is consistent across scripting and replication.
	 *
	 * The other types (list, sorted set) will retain their native order
	 * even if no sort order is requested, so they remain stable across
	 * scripting and replication. */</comment>
	<if_stmt><if>if <condition>(<expr><name>dontsort</name> <operator>&amp;&amp;</operator>
		<name>type</name> <operator>==</operator> <name>RL_TYPE_SET</name> <operator>&amp;&amp;</operator>
		<operator>(</operator><name>storekey</name> <operator>||</operator> <name>inLuaScript</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Force ALPHA sorting */</comment>
		<expr_stmt><expr><name>dontsort</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>alpha</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>sortby</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Obtain the length of the object to sort. */</comment>
	<switch>switch<condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>RL_TYPE_LIST</name></expr>:</case>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_llen</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vectorlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>RL_TYPE_SET</name></expr>:</case>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_scard</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vectorlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>RL_TYPE_ZSET</name></expr>:</case>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_zcard</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vectorlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<default>default:</default>
		<expr_stmt><expr><name>vectorlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_UNEXPECTED</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></switch>

	<comment type="block">/* Perform LIMIT start,count sanity checking. */</comment>
	<expr_stmt><expr><name>start</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>limit_start</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>limit_start</name></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><name>end</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>limit_count</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>vectorlen</name><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>start</name><operator>+</operator><name>limit_count</name><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&gt;=</operator> <name>vectorlen</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>start</name> <operator>=</operator> <name>vectorlen</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>end</name> <operator>=</operator> <name>vectorlen</name><operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>end</name> <operator>&gt;=</operator> <name>vectorlen</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>end</name> <operator>=</operator> <name>vectorlen</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Whenever possible, we load elements into the output array in a more
	 * direct way. This is possible if:
	 *
	 * 1) The object to sort is a sorted set or a list (internally sorted).
	 * 2) There is nothing to sort as dontsort is true (BY &lt;constant string&gt;).
	 *
	 * In this special case, if we have a LIMIT option that actually reduces
	 * the number of elements to fetch, we also optimize to just load the
	 * range we are interested in and allocating a vector that is big enough
	 * for the selected range length. */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>==</operator> <name>RL_TYPE_ZSET</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>RL_TYPE_LIST</name><operator>)</operator> <operator>&amp;&amp;</operator>
		<name>dontsort</name> <operator>&amp;&amp;</operator>
		<operator>(</operator><name>start</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>end</name> <operator>!=</operator> <name>vectorlen</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>vectorlen</name> <operator>=</operator> <name>end</name><operator>-</operator><name>start</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Load the sorting vector with all the objects to sort */</comment>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>vector</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rliteSortObject</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>vectorlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>RL_TYPE_LIST</name> <operator>&amp;&amp;</operator> <name>dontsort</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Special handling for a list, if 'dontsort' is true.
		 * This makes sure we return elements in the list original
		 * ordering, accordingly to DESC / ASC options.
		 *
		 * Note that in this case we also handle LIMIT here in a direct
		 * way, just getting the required range, as an optimization. */</comment>
		<if_stmt><if>if <condition>(<expr><name>end</name> <operator>&gt;=</operator> <name>start</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_lrange</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>values</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>valueslen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<expr_stmt><expr><name><name>vector</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>obj</name> <operator>=</operator> <name><name>values</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>vector</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>objlen</name> <operator>=</operator> <name><name>valueslen</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>vector</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>score</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>vector</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>cmpobj</name><operator>.</operator><name>obj</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>vector</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>cmpobj</name><operator>.</operator><name>objlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			</block_content>}</block></for>
			<comment type="block">/* Fix start/end: output code is not aware of this optimization. */</comment>
			<expr_stmt><expr><name>end</name> <operator>-=</operator> <name>start</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>RL_TYPE_LIST</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_lrange</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>values</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>valueslen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name><name>vector</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>obj</name> <operator>=</operator> <name><name>values</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>vector</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>objlen</name> <operator>=</operator> <name><name>valueslen</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>vector</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>score</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>vector</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>cmpobj</name><operator>.</operator><name>obj</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>vector</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>cmpobj</name><operator>.</operator><name>objlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>RL_TYPE_SET</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>rl_set_iterator</name> <modifier>*</modifier></type><name>siterator</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_smembers</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>siterator</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<while>while <condition>(<expr><operator>(</operator><name>retval</name> <operator>=</operator> <call><name>rl_set_iterator_next</name><argument_list>(<argument><expr><name>siterator</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>valuelen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>vector</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>obj</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>vector</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>objlen</name> <operator>=</operator> <name>valuelen</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>vector</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>score</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>vector</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>cmpobj</name><operator>.</operator><name>obj</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>vector</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>cmpobj</name><operator>.</operator><name>objlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></while>
		<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_END</name></expr>)</condition> <block>{<block_content>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>RL_TYPE_ZSET</name> <operator>&amp;&amp;</operator> <name>dontsort</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Special handling for a sorted set, if 'dontsort' is true.
		 * This makes sure we return elements in the sorted set original
		 * ordering, accordingly to DESC / ASC options.
		 *
		 * Note that in this case we also handle LIMIT here in a direct
		 * way, just getting the required range, as an optimization. */</comment>

		<decl_stmt><decl><type><name>rl_zset_iterator</name> <modifier>*</modifier></type><name>ziterator</name></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>desc</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_zrevrange</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ziterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_zrange</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ziterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<while>while <condition>(<expr><operator>(</operator><name>retval</name> <operator>=</operator> <call><name>rl_zset_iterator_next</name><argument_list>(<argument><expr><name>ziterator</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>valuelen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>vector</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>obj</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>vector</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>objlen</name> <operator>=</operator> <name>valuelen</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>vector</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>score</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>vector</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>cmpobj</name><operator>.</operator><name>obj</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>vector</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>cmpobj</name><operator>.</operator><name>objlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></while>
		<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_END</name></expr>)</condition> <block>{<block_content>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Fix start/end: output code is not aware of this optimization. */</comment>
		<expr_stmt><expr><name>end</name> <operator>-=</operator> <name>start</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>RL_TYPE_ZSET</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>rl_zset_iterator</name> <modifier>*</modifier></type><name>ziterator</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_zrange</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ziterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<while>while <condition>(<expr><operator>(</operator><name>retval</name> <operator>=</operator> <call><name>rl_zset_iterator_next</name><argument_list>(<argument><expr><name>ziterator</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>valuelen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>vector</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>obj</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>vector</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>objlen</name> <operator>=</operator> <name>valuelen</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>vector</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>score</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>vector</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>cmpobj</name><operator>.</operator><name>obj</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>vector</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>cmpobj</name><operator>.</operator><name>objlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></while>
		<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_END</name></expr>)</condition> <block>{<block_content>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_UNEXPECTED</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></else></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>j</name> <operator>!=</operator> <name>vectorlen</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_UNEXPECTED</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Now it's time to load the right scores in the sorting vector */</comment>
	<if_stmt><if>if <condition>(<expr><name>dontsort</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>vectorlen</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>byval</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>long</name></type> <name>byvallen</name></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name>sortby</name></expr>)</condition> <block>{<block_content>
				<comment type="block">/* lookup value to sort by */</comment>
				<expr_stmt><expr><call><name>RL_CALL2</name><argument_list>(<argument><expr><name>lookupKeyByPattern</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>RL_NOT_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>sortby</name></expr></argument>, <argument><expr><name>sortbylen</name></expr></argument>, <argument><expr><name><name>vector</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>obj</name></expr></argument>, <argument><expr><name><name>vector</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>objlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>byval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>byvallen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><name>byval</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<comment type="block">/* use object itself to sort by */</comment>
				<expr_stmt><expr><name>byval</name> <operator>=</operator> <name><name>vector</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>obj</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>byvallen</name> <operator>=</operator> <name><name>vector</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>objlen</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>alpha</name></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>sortby</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name><name>vector</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>cmpobj</name><operator>.</operator><name>obj</name></name> <operator>=</operator> <name>byval</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>vector</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>cmpobj</name><operator>.</operator><name>objlen</name></name> <operator>=</operator> <name>byvallen</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>eptr</name></decl>;</decl_stmt>
				<expr_stmt><expr><name><name>vector</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>score</name></name> <operator>=</operator> <call><name>rl_strtod</name><argument_list>(<argument><expr><name>byval</name></expr></argument>, <argument><expr><name>byvallen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>eptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>ERANGE</name> <operator>||</operator>
					<call><name>isnan</name><argument_list>(<argument><expr><name><name>vector</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>score</name></name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name>sortby</name></expr>)</condition> <block>{<block_content>
						<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>byval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
					<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_NAN</name></expr>;</expr_stmt>
					<goto>goto <name>cleanup</name>;</goto>
				</block_content>}</block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><name>sortby</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>byval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></for>

		<expr_stmt><expr><name>sort_desc</name> <operator>=</operator> <name>desc</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>sort_alpha</name> <operator>=</operator> <name>alpha</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>sort_bypattern</name> <operator>=</operator> <ternary><condition><expr><name>sortby</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><name>sort_store</name> <operator>=</operator> <ternary><condition><expr><name>storekey</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>sortby</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>start</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>end</name> <operator>!=</operator> <name>vectorlen</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>pqsort</name><argument_list>(<argument><expr><name>vector</name></expr></argument>,<argument><expr><name>vectorlen</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rliteSortObject</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>sortCompare</name></expr></argument>, <argument><expr><name>start</name></expr></argument>,<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>vector</name></expr></argument>,<argument><expr><name>vectorlen</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rliteSortObject</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>sortCompare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>sortby</name> <operator>&amp;&amp;</operator> <name>alpha</name></expr>)</condition> <block>{<block_content>
			<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>vectorlen</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>vector</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>cmpobj</name><operator>.</operator><name>obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>vector</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>cmpobj</name><operator>.</operator><name>obj</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			</block_content>}</block></for>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Send command output to the output buffer, performing the specified
	 * GET/DEL/INCR/DECR operations if any. */</comment>
	<expr_stmt><expr><name>objc</name> <operator>=</operator> <ternary><condition><expr><name>getc</name></expr> ?</condition><then> <expr><name>getc</name><operator>*</operator><operator>(</operator><name>end</name><operator>-</operator><name>start</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><name>end</name><operator>-</operator><name>start</name><operator>+</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>objv</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <operator>*</operator> <name>objc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>objvlen</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>objc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>end</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>getc</name></expr>)</condition> <block>{<block_content>
			<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>getc</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<expr_stmt><expr><call><name>RL_CALL2</name><argument_list>(<argument><expr><name>lookupKeyByPattern</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>RL_NOT_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>getv</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>getvlen</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>vector</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>obj</name></expr></argument>, <argument><expr><name><name>vector</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>objlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>objv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>objvlen</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></for>
			<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>vector</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name><name>objv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>vector</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>obj</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>objvlen</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>vector</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>objlen</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><operator>*</operator><name>retobjc</name> <operator>=</operator> <name>objc</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>storekey</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>objc</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_push</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>storekey</name></expr></argument>, <argument><expr><name>storekeylen</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>objc</name></expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr><name>objvlen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>vectorlen</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>vector</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>objv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>objvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>objv</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>objvlen</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>retobjv</name> <operator>=</operator> <name>objv</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>retobjvlen</name> <operator>=</operator> <name>objvlen</name></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>start</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>vector</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>

		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>end</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>vectorlen</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>vector</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>alpha</name></expr>)</condition> <block>{<block_content>
		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>vectorlen</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>vector</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>cmpobj</name><operator>.</operator><name>obj</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>vector</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>cmpobj</name><operator>.</operator><name>obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>vector</name></expr>)</condition> <block>{<block_content>
			<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>vectorlen</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>vector</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><operator>*</operator><name>retobjc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>objv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>objvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>vector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>valueslen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>
</unit>
