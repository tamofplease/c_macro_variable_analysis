<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/rlite/src/type_string.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/rlite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/page_multi_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/type_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/hyperloglog.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rl_string_get_objects</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>_page_number</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name> <modifier>*</modifier></type><name>expires</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>version</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name></type> <name>page_number</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>type</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_key_get</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>page_number</name></expr></argument>, <argument><expr><name>expires</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_FOUND</name></expr>)</condition> <block>{<block_content>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>RL_TYPE_STRING</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_WRONG_TYPE</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>_page_number</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>_page_number</name> <operator>=</operator> <name>page_number</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_set</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>valuelen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>expires</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>page_number</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>value_page</name></decl>, <decl><type ref="prev"/><name>version</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_key_get</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value_page</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>RL_FOUND</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>nx</name></expr>)</condition> <block>{<block_content>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_key_delete_with_value</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>version</name> <operator>=</operator> <call><name>rand</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_multi_string_set</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>page_number</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>valuelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_key_set</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>RL_TYPE_STRING</name></expr></argument>, <argument><expr><name>page_number</name></expr></argument>, <argument><expr><name>expires</name></expr></argument>, <argument><expr><name>version</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>valuelen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name></type> <name>page_number</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_string_get_objects</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>page_number</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>valuelen</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_multi_string_get</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>page_number</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>valuelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_get_cpy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>valuelen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name></type> <name>page_number</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_string_get_objects</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>page_number</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>value</name> <operator>||</operator> <name>valuelen</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_multi_string_cpy</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>page_number</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>valuelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_append</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>valuelen</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>newlength</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>page_number</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>version</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL2</name><argument_list>(<argument><expr><name>rl_string_get_objects</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>RL_NOT_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>page_number</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>RL_NOT_FOUND</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_multi_string_set</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>page_number</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>valuelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>version</name> <operator>=</operator> <call><name>rand</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_key_set</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>RL_TYPE_STRING</name></expr></argument>, <argument><expr><name>page_number</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>newlength</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>newlength</name> <operator>=</operator> <name>valuelen</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_key_set</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>RL_TYPE_STRING</name></expr></argument>, <argument><expr><name>page_number</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>version</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_multi_string_append</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>page_number</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>valuelen</name></expr></argument>, <argument><expr><name>newlength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_getrange</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>stop</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>valuelen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name></type> <name>page_number</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_string_get_objects</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>page_number</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_multi_string_getrange</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>page_number</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>valuelen</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>stop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_setrange</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>valuelen</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>newlength</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name></type> <name>page_number</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>version</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>expires</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>valuelen</name> <operator>+</operator> <name>index</name> <operator>&gt;</operator> <literal type="number">512</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_INVALID_PARAMETERS</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>RL_CALL2</name><argument_list>(<argument><expr><name>rl_string_get_objects</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>RL_NOT_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>page_number</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>expires</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>RL_NOT_FOUND</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>padding</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>padding</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator> <name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>padding</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_set</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>padding</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>padding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_append</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>valuelen</name></expr></argument>, <argument><expr><name>newlength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>retval</name> <operator>==</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_key_set</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>RL_TYPE_STRING</name></expr></argument>, <argument><expr><name>page_number</name></expr></argument>, <argument><expr><name>expires</name></expr></argument>, <argument><expr><name>version</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_multi_string_setrange</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>page_number</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>valuelen</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>newlength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_incr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>increment</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name> <modifier>*</modifier></type><name>newvalue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name></type> <name>page_number</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>valuelen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>lvalue</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>expires</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL2</name><argument_list>(<argument><expr><name>rl_string_get_objects</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>RL_NOT_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>page_number</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>expires</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>RL_NOT_FOUND</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator> <name>MAX_LLONG_DIGITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>valuelen</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>value</name></expr></argument>, <argument><expr><name>MAX_LLONG_DIGITS</name></expr></argument>, <argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><name>increment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>newvalue</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>newvalue</name> <operator>=</operator> <name>increment</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_set</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>valuelen</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_multi_string_getrange</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>page_number</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>valuelen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_LLONG_DIGITS</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>valuelen</name> <operator>==</operator> <name>MAX_LLONG_DIGITS</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_NAN</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>lvalue</name> <operator>=</operator> <call><name>strtoll</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>value</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>end</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>ERANGE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_NAN</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>value</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>increment</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>lvalue</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>increment</name> <operator>&lt;</operator> <operator>(</operator><name>LLONG_MIN</name> <operator>-</operator> <name>lvalue</name><operator>)</operator><operator>)</operator> <operator>||</operator>
	        <operator>(</operator><name>increment</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>lvalue</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>increment</name> <operator>&gt;</operator> <operator>(</operator><name>LLONG_MAX</name> <operator>-</operator> <name>lvalue</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OVERFLOW</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>lvalue</name> <operator>+=</operator> <name>increment</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>newvalue</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>newvalue</name> <operator>=</operator> <name>lvalue</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator> <name>MAX_LLONG_DIGITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>valuelen</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>value</name></expr></argument>, <argument><expr><name>MAX_LLONG_DIGITS</name></expr></argument>, <argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><name>lvalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_set</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>valuelen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>expires</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_incrbyfloat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>increment</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>newvalue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name></type> <name>page_number</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>valuelen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type> <name>dvalue</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>expires</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL2</name><argument_list>(<argument><expr><name>rl_string_get_objects</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>RL_NOT_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>page_number</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>expires</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>RL_NOT_FOUND</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator> <name>MAX_DOUBLE_DIGITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>valuelen</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>value</name></expr></argument>, <argument><expr><name>MAX_DOUBLE_DIGITS</name></expr></argument>, <argument><expr><literal type="string">"%lf"</literal></expr></argument>, <argument><expr><name>increment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>newvalue</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>newvalue</name> <operator>=</operator> <name>increment</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_set</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>valuelen</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_multi_string_getrange</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>page_number</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>valuelen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_DOUBLE_DIGITS</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>valuelen</name> <operator>==</operator> <name>MAX_DOUBLE_DIGITS</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_NAN</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>dvalue</name> <operator>=</operator> <call><name>strtold</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>value</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>end</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>ERANGE</name> <operator>||</operator> <call><name>isnan</name><argument_list>(<argument><expr><name>dvalue</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_NAN</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>value</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>dvalue</name> <operator>+=</operator> <name>increment</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>isinf</name><argument_list>(<argument><expr><name>dvalue</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isnan</name><argument_list>(<argument><expr><name>dvalue</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OVERFLOW</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>newvalue</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>newvalue</name> <operator>=</operator> <name>dvalue</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator> <name>MAX_DOUBLE_DIGITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>valuelen</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>value</name></expr></argument>, <argument><expr><name>MAX_DOUBLE_DIGITS</name></expr></argument>, <argument><expr><literal type="string">"%lf"</literal></expr></argument>, <argument><expr><name>dvalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_set</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>valuelen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>expires</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_getbit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>bitoffset</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>rangevalue</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>rangevaluelen</name></decl>, <decl><type ref="prev"/><name>start</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>start</name> <operator>=</operator> <name>bitoffset</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>bit</name> <init>= <expr><literal type="number">7</literal> <operator>-</operator> <operator>(</operator><name>bitoffset</name> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL2</name><argument_list>(<argument><expr><name>rl_getrange</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>RL_NOT_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rangevalue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rangevaluelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>RL_NOT_FOUND</name> <operator>||</operator> <name>rangevaluelen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>rangevalue</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>bit</name><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>rangevalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_setbit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>bitoffset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>on</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>previousvalue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>rangevalue</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>rangevaluelen</name></decl>, <decl><type ref="prev"/><name>start</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name>val</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>start</name> <operator>=</operator> <name>bitoffset</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>bit</name> <init>= <expr><literal type="number">7</literal> <operator>-</operator> <operator>(</operator><name>bitoffset</name> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Limit offset to 512MB in bytes */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>bitoffset</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>bitoffset</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&gt;=</operator> <operator>(</operator><literal type="number">512</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_INVALID_PARAMETERS</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>RL_CALL2</name><argument_list>(<argument><expr><name>rl_getrange</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>RL_NOT_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rangevalue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rangevaluelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>RL_NOT_FOUND</name> <operator>||</operator> <name>rangevaluelen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>val</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>bit</name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>val</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>on</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>bit</name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_setrange</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>previousvalue</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>previousvalue</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>bitval</name> <init>= <expr><name><name>rangevalue</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>bit</name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>previousvalue</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>previousvalue</name> <operator>=</operator> <ternary><condition><expr><name>bitval</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>rangevalue</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>bit</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rangevalue</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>on</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>bit</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_setrange</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>rangevalue</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>rangevalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_bitop</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>destlen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>keyc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>keys</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>keyslen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name></type> <name>ltmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>values</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>valueslen</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>resultlen</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>valueslen</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <operator>*</operator> <name>keyc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <operator>*</operator> <name>keyc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>keyc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL2</name><argument_list>(<argument><expr><name>rl_get</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>RL_NOT_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>keyslen</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ltmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>RL_NOT_FOUND</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>valueslen</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>retval</name> <operator>==</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>valueslen</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>ltmp</name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>rl_internal_bitop</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>keyc</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>valueslen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>resultlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_set</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>destlen</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>resultlen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>values</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<for>for <control>(<init><expr><name>i</name><operator>--</operator></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
				<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>valueslen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_bitcount</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>stop</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>bitcount</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>valuelen</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_getrange</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>stop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>valuelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>bitcount</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>rl_redisPopcount</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>valuelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_bitpos</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bit</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>stop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end_given</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>position</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>valuelen</name></decl>, <decl><type ref="prev"/><name>totalsize</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>bit</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>bit</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_INVALID_PARAMETERS</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_getrange</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>stop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>valuelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>valuelen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>position</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_get</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>totalsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_normalize_string_range</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>totalsize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>long</name></type> <name>bytes</name> <init>= <expr><name>stop</name> <operator>-</operator> <name>start</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<comment type="line">// stop may be after the end of the string and in that case it is treated</comment>
	<comment type="line">// as if it had 0 padding</comment>
	<comment type="line">//</comment>
	<comment type="line">// however, it can also be negative! the following check will handle</comment>
	<comment type="line">// the negative case (which cannot exceed the string size)</comment>
	<if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>&lt;</operator> <name>valuelen</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>bytes</name> <operator>=</operator> <name>valuelen</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>pos</name> <init>= <expr><call><name>rl_internal_bitpos</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>bit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* If we are looking for clear bits, and the user specified an exact
	 * range with start-end, we can't consider the right of the range as
	 * zero padded (as we do when no explicit end is given).
	 *
	 * So if rl_internal_bitpos() returns the first bit outside the range,
	 * we return -1 to the caller, to mean, in the specified range there
	 * is not a single "0" bit. */</comment>
	<if_stmt><if>if <condition>(<expr><name>end_given</name> <operator>&amp;&amp;</operator> <name>bit</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>pos</name> <operator>==</operator> <name>bytes</name> <operator>*</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>position</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>start</name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt> <comment type="block">/* Adjust for the bytes we skipped. */</comment>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>position</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_pfadd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>elementc</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>elements</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>elementslen</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>updated</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>valuelen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>expires</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>RL_CALL2</name><argument_list>(<argument><expr><name>rl_get</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>RL_NOT_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>valuelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_key_get</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>expires</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_str_pfadd</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>valuelen</name></expr></argument>, <argument><expr><name>elementc</name></expr></argument>, <argument><expr><name>elements</name></expr></argument>, <argument><expr><name>elementslen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>valuelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>retval</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_INVALID_STATE</name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_UNEXPECTED</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>updated</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>updated</name> <operator>=</operator> <name>retval</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> <comment type="line">// updated?</comment>
		<macro><name>RL_CALL</name><argument_list>(<argument>rl_set</argument>, <argument>RL_OK</argument>, <argument>db</argument>, <argument>key</argument>, <argument>keylen</argument>, <argument>value</argument>, <argument>valuelen</argument>, <argument><literal type="number">0</literal></argument>, <argument>expires</argument>)</argument_list></macro>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_pfcount</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keyc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>keys</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>keyslen</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <modifier>*</modifier></type><name>argvlen</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>newvalue</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>newvaluelen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>expires</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>argvlen</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <operator>*</operator> <name>keyc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <operator>*</operator> <name>keyc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>keyc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>keyc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL2</name><argument_list>(<argument><expr><name>rl_get</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>RL_NOT_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>keyslen</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>argvlen</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_str_pfcount</name><argument_list>(<argument><expr><name>keyc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newvalue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newvaluelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_INVALID_STATE</name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_UNEXPECTED</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>newvalue</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL2</name><argument_list>(<argument><expr><name>rl_key_get</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>RL_NOT_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>keyslen</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>expires</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_set</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>keyslen</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>newvalue</name></expr></argument>, <argument><expr><name>newvaluelen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>expires</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>keyc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_pfmerge</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>destkey</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>destkeylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keyc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>keys</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>keyslen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>newvalue</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <modifier>*</modifier></type><name>argvlen</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>newvaluelen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>argc</name> <init>= <expr><name>keyc</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>expires</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>argvlen</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <operator>*</operator> <name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <operator>*</operator> <name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>keyc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL2</name><argument_list>(<argument><expr><name>rl_get</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>RL_NOT_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>keyslen</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>argvlen</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>RL_CALL2</name><argument_list>(<argument><expr><name>rl_get</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>RL_NOT_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>destkey</name></expr></argument>, <argument><expr><name>destkeylen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>argv</name><index>[<expr><name>keyc</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>argvlen</name><index>[<expr><name>keyc</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_str_pfmerge</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newvalue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newvaluelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_INVALID_STATE</name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_UNEXPECTED</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>RL_CALL2</name><argument_list>(<argument><expr><name>rl_key_get</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>RL_NOT_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>destkey</name></expr></argument>, <argument><expr><name>destkeylen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>expires</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_set</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>destkey</name></expr></argument>, <argument><expr><name>destkeylen</name></expr></argument>, <argument><expr><name>newvalue</name></expr></argument>, <argument><expr><name>newvaluelen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>expires</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>newvalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_pfdebug_getreg</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>size</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier><modifier>*</modifier></type><name>elements</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>valuelen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_get</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>valuelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_str_pfdebug_getreg</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>valuelen</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>elements</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>valuelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_INVALID_STATE</name></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>retval</name> <operator>==</operator> <operator>-</operator><literal type="number">3</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OUT_OF_MEMORY</name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_UNEXPECTED</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_pfdebug_decode</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>valuelen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>strlen</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_get</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>strlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_str_pfdebug_decode</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>strlen</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>valuelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>retval</name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_INVALID_STATE</name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_UNEXPECTED</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_pfdebug_encoding</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>valuelen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>strlen</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_get</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>strlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_str_pfdebug_encoding</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>strlen</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>valuelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_INVALID_STATE</name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_UNEXPECTED</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_pfdebug_todense</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>converted</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>strlen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>expires</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_get</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>strlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_str_pfdebug_todense</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>strlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>strlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>retval</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_INVALID_STATE</name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_UNEXPECTED</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>converted</name> <operator>=</operator> <name>retval</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL2</name><argument_list>(<argument><expr><name>rl_key_get</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>RL_NOT_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>expires</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_set</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>strlen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>expires</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_string_pages</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>page</name></decl></parameter>, <parameter><decl><type><name>short</name> <modifier>*</modifier></type><name>pages</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>rl_multi_string_pages</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>page</name></expr></argument>, <argument><expr><name>pages</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_string_delete</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>value_page</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>rl_multi_string_delete</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>value_page</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
