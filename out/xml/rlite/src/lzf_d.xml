<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/rlite/src/lzf_d.c"><comment type="block">/*
 * Copyright (c) 2000-2007 Marc Alexander Lehmann &lt;schmorp@schmorp.de&gt;
 *
 * Redistribution and use in source and binary forms, with or without modifica-
 * tion, are permitted provided that the following conditions are met:
 *
 *   1.  Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *
 *   2.  Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MER-
 * CHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
 * EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPE-
 * CIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTH-
 * ERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Alternatively, the contents of this file may be used under the terms of
 * the GNU General Public License ("GPL") version 2 or any later version,
 * in which case the provisions of the GPL are applicable instead of
 * the above. If you wish to allow the use of your version of this file
 * only under the terms of the GPL and not to allow others to use your
 * version of this file under the BSD license, indicate your decision
 * by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL. If you do not delete the
 * provisions above, a recipient may use your version of this file under
 * either the BSD or the GPL.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/lzfP.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>AVOID_ERRNO</name></expr></cpp:if>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>SET_ERRNO</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>SET_ERRNO</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>errno = (n)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
#if (__i386 || __amd64) &amp;&amp; __GNUC__ &gt;= 3
# define lzf_movsb(dst, src, len)                \
   asm ("rep movsb"                              \
        : "=D" (dst), "=S" (src), "=c" (len)     \
        :  "0" (dst),  "1" (src),  "2" (len));
#endif
*/</comment>

<function><type><name>unsigned</name> <name>int</name></type>
<name>rl_lzf_decompress</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><specifier>const</specifier></type> <name>in_data</name></decl></parameter>,  <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>in_len</name></decl></parameter>,
                <parameter><decl><type><name>void</name>             <modifier>*</modifier></type><name>out_data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>out_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>u8</name> <specifier>const</specifier> <modifier>*</modifier></type><name>ip</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>u8</name> <operator>*</operator><operator>)</operator><name>in_data</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u8</name>       <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>u8</name> <operator>*</operator><operator>)</operator><name>out_data</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u8</name> <specifier>const</specifier> <modifier>*</modifier><specifier>const</specifier></type> <name>in_end</name>  <init>= <expr><name>ip</name> <operator>+</operator> <name>in_len</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u8</name>       <modifier>*</modifier><specifier>const</specifier></type> <name>out_end</name> <init>= <expr><name>op</name> <operator>+</operator> <name>out_len</name></expr></init></decl>;</decl_stmt>

  <do>do
    <block>{<block_content>
      <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ctrl</name> <init>= <expr><operator>*</operator><name>ip</name><operator>++</operator></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name>ctrl</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator></expr>)</condition> <comment type="block">/* literal run */</comment>
        <block>{<block_content>
          <expr_stmt><expr><name>ctrl</name><operator>++</operator></expr>;</expr_stmt>

          <if_stmt><if>if <condition>(<expr><name>op</name> <operator>+</operator> <name>ctrl</name> <operator>&gt;</operator> <name>out_end</name></expr>)</condition>
            <block>{<block_content>
              <expr_stmt><expr><call><name>SET_ERRNO</name> <argument_list>(<argument><expr><name>E2BIG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <return>return <expr><literal type="number">0</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CHECK_INPUT</name></expr></cpp:if>
          <if_stmt><if>if <condition>(<expr><name>ip</name> <operator>+</operator> <name>ctrl</name> <operator>&gt;</operator> <name>in_end</name></expr>)</condition>
            <block>{<block_content>
              <expr_stmt><expr><call><name>SET_ERRNO</name> <argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <return>return <expr><literal type="number">0</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>lzf_movsb</name></cpp:ifdef>
          <expr_stmt><expr><call><name>lzf_movsb</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>ctrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
          <do>do<block type="pseudo"><block_content>
            <expr_stmt><expr><operator>*</operator><name>op</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>ip</name><operator>++</operator></expr>;</expr_stmt></block_content></block>
          while <condition>(<expr><operator>--</operator><name>ctrl</name></expr>)</condition>;</do>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        </block_content>}</block></if>
      <else>else <comment type="block">/* back reference */</comment>
        <block>{<block_content>
          <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name> <init>= <expr><name>ctrl</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>

          <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>ref</name> <init>= <expr><name>op</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>ctrl</name> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CHECK_INPUT</name></expr></cpp:if>
          <if_stmt><if>if <condition>(<expr><name>ip</name> <operator>&gt;=</operator> <name>in_end</name></expr>)</condition>
            <block>{<block_content>
              <expr_stmt><expr><call><name>SET_ERRNO</name> <argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <return>return <expr><literal type="number">0</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
          <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">7</literal></expr>)</condition>
            <block>{<block_content>
              <expr_stmt><expr><name>len</name> <operator>+=</operator> <operator>*</operator><name>ip</name><operator>++</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CHECK_INPUT</name></expr></cpp:if>
              <if_stmt><if>if <condition>(<expr><name>ip</name> <operator>&gt;=</operator> <name>in_end</name></expr>)</condition>
                <block>{<block_content>
                  <expr_stmt><expr><call><name>SET_ERRNO</name> <argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <return>return <expr><literal type="number">0</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            </block_content>}</block></if></if_stmt>

          <expr_stmt><expr><name>ref</name> <operator>-=</operator> <operator>*</operator><name>ip</name><operator>++</operator></expr>;</expr_stmt>

          <if_stmt><if>if <condition>(<expr><name>op</name> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name>out_end</name></expr>)</condition>
            <block>{<block_content>
              <expr_stmt><expr><call><name>SET_ERRNO</name> <argument_list>(<argument><expr><name>E2BIG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <return>return <expr><literal type="number">0</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>

          <if_stmt><if>if <condition>(<expr><name>ref</name> <operator>&lt;</operator> <operator>(</operator><name>u8</name> <operator>*</operator><operator>)</operator><name>out_data</name></expr>)</condition>
            <block>{<block_content>
              <expr_stmt><expr><call><name>SET_ERRNO</name> <argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <return>return <expr><literal type="number">0</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>lzf_movsb</name></cpp:ifdef>
          <expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>lzf_movsb</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
          <expr_stmt><expr><operator>*</operator><name>op</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>ref</name><operator>++</operator></expr>;</expr_stmt>
          <expr_stmt><expr><operator>*</operator><name>op</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>ref</name><operator>++</operator></expr>;</expr_stmt>

          <do>do<block type="pseudo"><block_content>
            <expr_stmt><expr><operator>*</operator><name>op</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>ref</name><operator>++</operator></expr>;</expr_stmt></block_content></block>
          while <condition>(<expr><operator>--</operator><name>len</name></expr>)</condition>;</do>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block>
  while <condition>(<expr><name>ip</name> <operator>&lt;</operator> <name>in_end</name></expr>)</condition>;</do>

  <return>return <expr><name>op</name> <operator>-</operator> <operator>(</operator><name>u8</name> <operator>*</operator><operator>)</operator><name>out_data</name></expr>;</return>
</block_content>}</block></function>

</unit>
