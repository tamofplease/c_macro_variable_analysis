<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/rlite/src/lzf_c.c"><comment type="block">/*
 * Copyright (c) 2000-2008 Marc Alexander Lehmann &lt;schmorp@schmorp.de&gt;
 *
 * Redistribution and use in source and binary forms, with or without modifica-
 * tion, are permitted provided that the following conditions are met:
 *
 *   1.  Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *
 *   2.  Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MER-
 * CHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
 * EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPE-
 * CIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTH-
 * ERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Alternatively, the contents of this file may be used under the terms of
 * the GNU General Public License ("GPL") version 2 or any later version,
 * in which case the provisions of the GPL are applicable instead of
 * the above. If you wish to allow the use of your version of this file
 * only under the terms of the GPL and not to allow others to use your
 * version of this file under the BSD license, indicate your decision
 * by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL. If you do not delete the
 * provisions above, a recipient may use your version of this file under
 * either the BSD or the GPL.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/lzfP.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSIZE</name></cpp:macro> <cpp:value>(1 &lt;&lt; (HLOG))</cpp:value></cpp:define>

<comment type="block">/*
 * don't play with this unless you benchmark!
 * decompression is not dependent on the hash function
 * the hashing function might seem strange, just believe me
 * it works ;)
 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FRST</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>FRST</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((p[0]) &lt;&lt; 8) | p[1])</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>NEXT</name><parameter_list>(<parameter><type><name>v</name></type></parameter>,<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((v) &lt;&lt; 8) | p[2])</cpp:value></cpp:define>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><name>ULTRA_FAST</name></expr></cpp:if>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>IDX</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((( h             &gt;&gt; (3*8 - HLOG)) - h  ) &amp; (HSIZE - 1))</cpp:value></cpp:define>
<cpp:elif># <cpp:directive>elif</cpp:directive> <expr><name>VERY_FAST</name></expr></cpp:elif>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>IDX</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((( h             &gt;&gt; (3*8 - HLOG)) - h*5) &amp; (HSIZE - 1))</cpp:value></cpp:define>
<cpp:else># <cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>IDX</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((h ^ (h &lt;&lt; 5)) &gt;&gt; (3*8 - HLOG)) - h*5) &amp; (HSIZE - 1))</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/*
 * IDX works because it is very similar to a multiplicative hash, e.g.
 * ((h * 57321 &gt;&gt; (3*8 - HLOG)) &amp; (HSIZE - 1))
 * the latter is also quite fast on newer CPUs, and compresses similarly.
 *
 * the next one is also quite good, albeit slow ;)
 * (int)(cos(h &amp; 0xffffff) * 1e6)
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
<comment type="block">/* original lzv-like hash function, much worse and thus slower */</comment>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>FRST</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p[0] &lt;&lt; 5) ^ p[1]</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>NEXT</name><parameter_list>(<parameter><type><name>v</name></type></parameter>,<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((v) &lt;&lt; 5) ^ p[2]</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>IDX</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((h) &amp; (HSIZE - 1))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive>        <cpp:macro><name>MAX_LIT</name></cpp:macro>        <cpp:value>(1 &lt;&lt;  5)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>        <cpp:macro><name>MAX_OFF</name></cpp:macro>        <cpp:value>(1 &lt;&lt; 13)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>        <cpp:macro><name>MAX_REF</name></cpp:macro>        <cpp:value>((1 &lt;&lt; 8) + (1 &lt;&lt; 3))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__GNUC__</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr></cpp:if>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>expect</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>,<parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro>         <cpp:value>__builtin_expect ((expr),(value))</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>inline</name></cpp:macro>                     <cpp:value>inline</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>expect</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>,<parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro>         <cpp:value>(expr)</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>inline</name></cpp:macro>                     <cpp:value>static</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>expect_false</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>expect ((expr) != 0, 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>expect_true</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>expect ((expr) != 0, 1)</cpp:value></cpp:define>

<comment type="block">/*
 * compressed format
 *
 * 000LLLLL &lt;L+1&gt;    ; literal
 * LLLooooo oooooooo ; backref L
 * 111ooooo LLLLLLLL oooooooo ; backref L+7
 *
 */</comment>

<function><type><name>unsigned</name> <name>int</name></type>
<name>rl_lzf_compress</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><specifier>const</specifier></type> <name>in_data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>in_len</name></decl></parameter>,
	      <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out_data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>out_len</name></decl></parameter>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LZF_STATE_ARG</name></expr></cpp:if>
              , <parameter><decl><type><name>LZF_STATE</name></type> <name>htab</name></decl></parameter>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
              )</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>LZF_STATE_ARG</name></expr></cpp:if>
  <decl_stmt><decl><type><name>LZF_STATE</name></type> <name>htab</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <decl_stmt><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier><modifier>*</modifier></type><name>hslot</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>ip</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>u8</name> <operator>*</operator><operator>)</operator><name>in_data</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><name>u8</name> <operator>*</operator><operator>)</operator><name>out_data</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>in_end</name>  <init>= <expr><name>ip</name> <operator>+</operator> <name>in_len</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>out_end</name> <init>= <expr><name>op</name> <operator>+</operator> <name>out_len</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>ref</name></decl>;</decl_stmt>

  <comment type="block">/* off requires a type wide enough to hold a general pointer difference.
   * ISO C doesn't have that (size_t might not be enough and ptrdiff_t only
   * works for differences within a single object). We also assume that no
   * no bit pattern traps. Since the only platform that is both non-POSIX
   * and fails to support both assumptions is windows 64 bit, we make a
   * special workaround for it.
   */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>_M_X64</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>unsigned</name> <name>_int64</name></type> <name>off</name></decl>;</decl_stmt> <comment type="block">/* workaround for missing POSIX compliance */</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>off</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>hval</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>lit</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>in_len</name> <operator>||</operator> <operator>!</operator><name>out_len</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>INIT_HTAB</name></expr></cpp:if>
  <expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>htab</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>htab</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  for (hslot = htab; hslot &lt; htab + HSIZE; hslot++)
    *hslot++ = ip;
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><name>lit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name>op</name><operator>++</operator></expr>;</expr_stmt> <comment type="block">/* start run */</comment>

  <expr_stmt><expr><name>hval</name> <operator>=</operator> <call><name>FRST</name> <argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>ip</name> <operator>&lt;</operator> <name>in_end</name> <operator>-</operator> <literal type="number">2</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>hval</name> <operator>=</operator> <call><name>NEXT</name> <argument_list>(<argument><expr><name>hval</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>hslot</name> <operator>=</operator> <name>htab</name> <operator>+</operator> <call><name>IDX</name> <argument_list>(<argument><expr><name>hval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>ref</name> <operator>=</operator> <operator>*</operator><name>hslot</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>hslot</name> <operator>=</operator> <name>ip</name></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><literal type="number">1</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>INIT_HTAB</name></expr></cpp:if>
          <operator>&amp;&amp;</operator> <macro><name>ref</name></macro> <operator>&lt;</operator> <name>ip</name> <comment type="block">/* the next test will actually take care of this, but this is faster */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
          <operator>&amp;&amp;</operator> <operator>(</operator><name>off</name> <operator>=</operator> <name>ip</name> <operator>-</operator> <name>ref</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <name>MAX_OFF</name>
          <operator>&amp;&amp;</operator> <name>ip</name> <operator>+</operator> <literal type="number">4</literal> <operator>&lt;</operator> <name>in_end</name>
          <operator>&amp;&amp;</operator> <name>ref</name> <operator>&gt;</operator> <operator>(</operator><name>u8</name> <operator>*</operator><operator>)</operator><name>in_data</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>STRICT_ALIGN</name></expr></cpp:if>
          <operator>&amp;&amp;</operator> <name><name>ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>ip</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>
          <operator>&amp;&amp;</operator> <name><name>ref</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>ip</name><index>[<expr><literal type="number">1</literal></expr>]</index></name>
          <operator>&amp;&amp;</operator> <name><name>ref</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name><name>ip</name><index>[<expr><literal type="number">2</literal></expr>]</index></name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
          <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>u16</name> <operator>*</operator><operator>)</operator><name>ref</name> <operator>==</operator> <operator>*</operator><operator>(</operator><name>u16</name> <operator>*</operator><operator>)</operator><name>ip</name>
          <operator>&amp;&amp;</operator> <name><name>ref</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name><name>ip</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        )</condition>
        <block>{<block_content>
          <comment type="block">/* match found at *ref++ */</comment>
          <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>maxlen</name> <init>= <expr><name>in_end</name> <operator>-</operator> <name>ip</name> <operator>-</operator> <name>len</name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name>maxlen</name> <operator>=</operator> <ternary><condition><expr><name>maxlen</name> <operator>&gt;</operator> <name>MAX_REF</name></expr> ?</condition><then> <expr><name>MAX_REF</name></expr> </then><else>: <expr><name>maxlen</name></expr></else></ternary></expr>;</expr_stmt>

          <expr_stmt><expr><name><name>op</name> <index>[<expr><operator>-</operator> <name>lit</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>lit</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* stop run */</comment>
          <expr_stmt><expr><name>op</name> <operator>-=</operator> <operator>!</operator><name>lit</name></expr>;</expr_stmt> <comment type="block">/* undo run if length is zero */</comment>

          <if_stmt><if>if <condition>(<expr><call><name>expect_false</name> <argument_list>(<argument><expr><name>op</name> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>out_end</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

          <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
            <block>{<block_content>
              <if_stmt><if>if <condition>(<expr><call><name>expect_true</name> <argument_list>(<argument><expr><name>maxlen</name> <operator>&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                  <expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name><name>ref</name> <index>[<expr><name>len</name></expr>]</index></name> <operator>!=</operator> <name><name>ip</name> <index>[<expr><name>len</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
                  <expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name><name>ref</name> <index>[<expr><name>len</name></expr>]</index></name> <operator>!=</operator> <name><name>ip</name> <index>[<expr><name>len</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
                  <expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name><name>ref</name> <index>[<expr><name>len</name></expr>]</index></name> <operator>!=</operator> <name><name>ip</name> <index>[<expr><name>len</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
                  <expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name><name>ref</name> <index>[<expr><name>len</name></expr>]</index></name> <operator>!=</operator> <name><name>ip</name> <index>[<expr><name>len</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

                  <expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name><name>ref</name> <index>[<expr><name>len</name></expr>]</index></name> <operator>!=</operator> <name><name>ip</name> <index>[<expr><name>len</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
                  <expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name><name>ref</name> <index>[<expr><name>len</name></expr>]</index></name> <operator>!=</operator> <name><name>ip</name> <index>[<expr><name>len</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
                  <expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name><name>ref</name> <index>[<expr><name>len</name></expr>]</index></name> <operator>!=</operator> <name><name>ip</name> <index>[<expr><name>len</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
                  <expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name><name>ref</name> <index>[<expr><name>len</name></expr>]</index></name> <operator>!=</operator> <name><name>ip</name> <index>[<expr><name>len</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

                  <expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name><name>ref</name> <index>[<expr><name>len</name></expr>]</index></name> <operator>!=</operator> <name><name>ip</name> <index>[<expr><name>len</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
                  <expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name><name>ref</name> <index>[<expr><name>len</name></expr>]</index></name> <operator>!=</operator> <name><name>ip</name> <index>[<expr><name>len</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
                  <expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name><name>ref</name> <index>[<expr><name>len</name></expr>]</index></name> <operator>!=</operator> <name><name>ip</name> <index>[<expr><name>len</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
                  <expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name><name>ref</name> <index>[<expr><name>len</name></expr>]</index></name> <operator>!=</operator> <name><name>ip</name> <index>[<expr><name>len</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

                  <expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name><name>ref</name> <index>[<expr><name>len</name></expr>]</index></name> <operator>!=</operator> <name><name>ip</name> <index>[<expr><name>len</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
                  <expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name><name>ref</name> <index>[<expr><name>len</name></expr>]</index></name> <operator>!=</operator> <name><name>ip</name> <index>[<expr><name>len</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
                  <expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name><name>ref</name> <index>[<expr><name>len</name></expr>]</index></name> <operator>!=</operator> <name><name>ip</name> <index>[<expr><name>len</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
                  <expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name><name>ref</name> <index>[<expr><name>len</name></expr>]</index></name> <operator>!=</operator> <name><name>ip</name> <index>[<expr><name>len</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
                </block_content>}</block></if></if_stmt>

              <do>do<block type="pseudo"><block_content>
                <expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt></block_content></block>
              while <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>maxlen</name> <operator>&amp;&amp;</operator> <name><name>ref</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <name><name>ip</name><index>[<expr><name>len</name></expr>]</index></name></expr>)</condition>;</do>

              <break>break;</break>
            </block_content>}</block></for>

          <expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <comment type="block">/* len is now #octets - 1 */</comment>
          <expr_stmt><expr><name>ip</name><operator>++</operator></expr>;</expr_stmt>

          <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>)</condition>
            <block>{<block_content>
              <expr_stmt><expr><operator>*</operator><name>op</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>off</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>len</name> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>
            </block_content>}</block></if>
          <else>else
            <block>{<block_content>
              <expr_stmt><expr><operator>*</operator><name>op</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>off</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator>  <literal type="number">7</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>
              <expr_stmt><expr><operator>*</operator><name>op</name><operator>++</operator> <operator>=</operator> <name>len</name> <operator>-</operator> <literal type="number">7</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

          <expr_stmt><expr><operator>*</operator><name>op</name><operator>++</operator> <operator>=</operator> <name>off</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>lit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name>op</name><operator>++</operator></expr>;</expr_stmt> <comment type="block">/* start run */</comment>

          <expr_stmt><expr><name>ip</name> <operator>+=</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

          <if_stmt><if>if <condition>(<expr><call><name>expect_false</name> <argument_list>(<argument><expr><name>ip</name> <operator>&gt;=</operator> <name>in_end</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ULTRA_FAST</name> <operator>||</operator> <name>VERY_FAST</name></expr></cpp:if>
          <expr_stmt><expr><operator>--</operator><name>ip</name></expr>;</expr_stmt>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><name>VERY_FAST</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>ULTRA_FAST</name></expr></cpp:if>
          <expr_stmt><expr><operator>--</operator><name>ip</name></expr>;</expr_stmt>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
          <expr_stmt><expr><name>hval</name> <operator>=</operator> <call><name>FRST</name> <argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><name>hval</name> <operator>=</operator> <call><name>NEXT</name> <argument_list>(<argument><expr><name>hval</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>htab</name><index>[<expr><call><name>IDX</name> <argument_list>(<argument><expr><name>hval</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>ip</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>ip</name><operator>++</operator></expr>;</expr_stmt>

<cpp:if># <cpp:directive>if</cpp:directive> <expr><name>VERY_FAST</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>ULTRA_FAST</name></expr></cpp:if>
          <expr_stmt><expr><name>hval</name> <operator>=</operator> <call><name>NEXT</name> <argument_list>(<argument><expr><name>hval</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>htab</name><index>[<expr><call><name>IDX</name> <argument_list>(<argument><expr><name>hval</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>ip</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>ip</name><operator>++</operator></expr>;</expr_stmt>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
          <expr_stmt><expr><name>ip</name> <operator>-=</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

          <do>do
            <block>{<block_content>
              <expr_stmt><expr><name>hval</name> <operator>=</operator> <call><name>NEXT</name> <argument_list>(<argument><expr><name>hval</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>htab</name><index>[<expr><call><name>IDX</name> <argument_list>(<argument><expr><name>hval</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>ip</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>ip</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block>
          while <condition>(<expr><name>len</name><operator>--</operator></expr>)</condition>;</do>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        </block_content>}</block></if>
      <else>else
        <block>{<block_content>
          <comment type="block">/* one more literal byte we must copy */</comment>
          <if_stmt><if>if <condition>(<expr><call><name>expect_false</name> <argument_list>(<argument><expr><name>op</name> <operator>&gt;=</operator> <name>out_end</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

          <expr_stmt><expr><name>lit</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>op</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>ip</name><operator>++</operator></expr>;</expr_stmt>

          <if_stmt><if>if <condition>(<expr><call><name>expect_false</name> <argument_list>(<argument><expr><name>lit</name> <operator>==</operator> <name>MAX_LIT</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
              <expr_stmt><expr><name><name>op</name> <index>[<expr><operator>-</operator> <name>lit</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>lit</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* stop run */</comment>
              <expr_stmt><expr><name>lit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name>op</name><operator>++</operator></expr>;</expr_stmt> <comment type="block">/* start run */</comment>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><name>op</name> <operator>+</operator> <literal type="number">3</literal> <operator>&gt;</operator> <name>out_end</name></expr>)</condition><block type="pseudo"><block_content> <comment type="block">/* at most 3 bytes can be missing here */</comment>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <while>while <condition>(<expr><name>ip</name> <operator>&lt;</operator> <name>in_end</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>lit</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>op</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>ip</name><operator>++</operator></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>expect_false</name> <argument_list>(<argument><expr><name>lit</name> <operator>==</operator> <name>MAX_LIT</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><name><name>op</name> <index>[<expr><operator>-</operator> <name>lit</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>lit</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* stop run */</comment>
          <expr_stmt><expr><name>lit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name>op</name><operator>++</operator></expr>;</expr_stmt> <comment type="block">/* start run */</comment>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

  <expr_stmt><expr><name><name>op</name> <index>[<expr><operator>-</operator> <name>lit</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>lit</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* end run */</comment>
  <expr_stmt><expr><name>op</name> <operator>-=</operator> <operator>!</operator><name>lit</name></expr>;</expr_stmt> <comment type="block">/* undo run if length is zero */</comment>

  <return>return <expr><name>op</name> <operator>-</operator> <operator>(</operator><name>u8</name> <operator>*</operator><operator>)</operator><name>out_data</name></expr>;</return>
</block_content>}</block></function>

</unit>
