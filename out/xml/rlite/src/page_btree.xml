<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/rlite/src/page_btree.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/status.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/page_btree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/rlite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/util.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>rl_btree_type</name></type> <name>rl_btree_type_hash_sha1_key</name> <init>= <expr><block>{
	<expr><operator>&amp;</operator><name>rl_data_type_btree_hash_sha1_key</name></expr>,
	<expr><operator>&amp;</operator><name>rl_data_type_btree_node_hash_sha1_key</name></expr>,
	<expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator> <literal type="number">20</literal></expr>,
	<expr><sizeof>sizeof<argument_list>(<argument><expr><name>rl_key</name></expr></argument>)</argument_list></sizeof></expr>,
	<expr><name>sha1_cmp</name></expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>RL_DEBUG</name></cpp:ifdef>
	<expr><name>sha1_formatter</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rl_btree_type</name></type> <name>rl_btree_type_hash_sha1_hashkey</name> <init>= <expr><block>{
	<expr><operator>&amp;</operator><name>rl_data_type_btree_hash_sha1_hashkey</name></expr>,
	<expr><operator>&amp;</operator><name>rl_data_type_btree_node_hash_sha1_hashkey</name></expr>,
	<expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator> <literal type="number">20</literal></expr>,
	<expr><sizeof>sizeof<argument_list>(<argument><expr><name>rl_hashkey</name></expr></argument>)</argument_list></sizeof></expr>,
	<expr><name>sha1_cmp</name></expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>RL_DEBUG</name></cpp:ifdef>
	<expr><name>sha1_formatter</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rl_btree_type</name></type> <name>rl_btree_type_hash_long_long</name> <init>= <expr><block>{
	<expr><operator>&amp;</operator><name>rl_data_type_btree_hash_long_long</name></expr>,
	<expr><operator>&amp;</operator><name>rl_data_type_btree_node_hash_long_long</name></expr>,
	<expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr>,
	<expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr>,
	<expr><name>long_cmp</name></expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>RL_DEBUG</name></cpp:ifdef>
	<expr><name>long_formatter</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rl_btree_type</name></type> <name>rl_btree_type_hash_sha1_double</name> <init>= <expr><block>{
	<expr><operator>&amp;</operator><name>rl_data_type_btree_hash_sha1_double</name></expr>,
	<expr><operator>&amp;</operator><name>rl_data_type_btree_node_hash_sha1_double</name></expr>,
	<expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator> <literal type="number">20</literal></expr>,
	<expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr>,
	<expr><name>sha1_cmp</name></expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>RL_DEBUG</name></cpp:ifdef>
	<expr><name>sha1_formatter</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>rl_btree_type</name></type> <name>rl_btree_type_hash_sha1_long</name> <init>= <expr><block>{
	<expr><operator>&amp;</operator><name>rl_data_type_btree_hash_sha1_long</name></expr>,
	<expr><operator>&amp;</operator><name>rl_data_type_btree_node_hash_sha1_long</name></expr>,
	<expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator> <literal type="number">20</literal></expr>,
	<expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr>,
	<expr><name>sha1_cmp</name></expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>RL_DEBUG</name></cpp:ifdef>
	<expr><name>sha1_formatter</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>rl_btree_serialize</name><argument_list>(<argument><expr>struct <name>rlite</name> <operator>*</operator><call><name>UNUSED</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>obj</name></expr></argument>, <argument><expr><name>unsigned</name> <name>char</name> <operator>*</operator><name>data</name></expr></argument>)</argument_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>tree</name> <init>= <expr><name>obj</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>put_4bytes</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>tree</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>put_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tree</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>put_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tree</name><operator>-&gt;</operator><name>max_node_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>put_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tree</name><operator>-&gt;</operator><name>number_of_elements</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>RL_OK</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>int</name></type> <name>rl_btree_deserialize</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>btree</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>RL_OK</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>btree</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>btree</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>btree</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>btree</name><operator>-&gt;</operator><name>db</name></name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>btree</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <call><name>get_4bytes</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>btree</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <call><name>get_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>btree</name><operator>-&gt;</operator><name>max_node_size</name></name> <operator>=</operator> <call><name>get_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>btree</name><operator>-&gt;</operator><name>number_of_elements</name></name> <operator>=</operator> <call><name>get_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>obj</name> <operator>=</operator> <name>btree</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>RL_DEBUG</name></cpp:ifdef>
<function_decl><type><name>int</name></type> <name>rl_print_btree_node</name><parameter_list>(<parameter><function_decl><type><name>rlite</name> <modifier>*</modifier></type><name>UNUSED</name><parameter_list>(<parameter><decl><type><name>db</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>btree</name></decl></parameter>, <parameter><decl><type><name>rl_btree_node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>level</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><name>int</name></type> <name>rl_btree_node_create</name><parameter_list>(<parameter><function_decl><type><name>rlite</name> <modifier>*</modifier></type><name>UNUSED</name><parameter_list>(<parameter><decl><type><name>db</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>btree</name></decl></parameter>, <parameter><decl><type><name>rl_btree_node</name> <modifier>*</modifier><modifier>*</modifier></type><name>_node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>RL_OK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_btree_node</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rl_btree_node</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>scores</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>btree</name><operator>-&gt;</operator><name>max_node_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>children</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>values</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>btree</name><operator>-&gt;</operator><name>max_node_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>_node</name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name> <operator>&amp;&amp;</operator> <name>node</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>scores</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_btree_node_destroy</name><parameter_list>(<parameter><function_decl><type><name>rlite</name> <modifier>*</modifier></type><name>UNUSED</name><parameter_list>(<parameter><decl><type><name>db</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>rl_btree_node</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name>_node</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>RL_OK</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>scores</name></name></expr>)</condition> <block>{<block_content>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>scores</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>values</name></name></expr>)</condition> <block>{<block_content>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>values</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>RL_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_btree_create_size</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>rl_btree</name> <modifier>*</modifier><modifier>*</modifier></type><name>_btree</name></decl></parameter>, <parameter><decl><type><name>rl_btree_type</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>max_node_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>RL_OK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>btree</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_btree_node</name> <modifier>*</modifier></type><name>root</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>btree</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>btree</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>btree</name><operator>-&gt;</operator><name>number_of_elements</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>btree</name><operator>-&gt;</operator><name>max_node_size</name></name> <operator>=</operator> <name>max_node_size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>btree</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>btree</name><operator>-&gt;</operator><name>db</name></name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>btree</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>next_empty_page</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>btree</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_btree_node_create</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>btree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_write</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>type</name><operator>-&gt;</operator><name>btree_node_type</name></name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>next_empty_page</name></name></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>_btree</name> <operator>=</operator> <name>btree</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>rl_btree_destroy</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>btree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_btree_create</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>rl_btree</name> <modifier>*</modifier><modifier>*</modifier></type><name>_btree</name></decl></parameter>, <parameter><decl><type><name>rl_btree_type</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name></type> <name>size</name> <init>= <expr><operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>page_size</name></name> <operator>-</operator> <literal type="number">12</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>type</name><operator>-&gt;</operator><name>score_size</name></name> <operator>+</operator> <name><name>type</name><operator>-&gt;</operator><name>value_size</name></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
	<comment type="line">// TODO: make btree work with even number of elements</comment>
	<if_stmt><if>if <condition>(<expr><name>size</name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>size</name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><call><name>rl_btree_create_size</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>_btree</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_btree_destroy</name><parameter_list>(<parameter><function_decl><type><name>rlite</name> <modifier>*</modifier></type><name>UNUSED</name><parameter_list>(<parameter><decl><type><name>db</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>btree</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>btree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>RL_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_btree_find_score</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>btree</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>score</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>rl_btree_node</name> <modifier>*</modifier><modifier>*</modifier></type> <name>nodes</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>positions</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>nodes</name> <operator>&amp;&amp;</operator> <name>positions</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>nodes</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>positions</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>RL_INVALID_PARAMETERS</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>_node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>btree</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>btree_node_type</name></name></expr></argument>, <argument><expr><name><name>btree</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>btree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_node</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>rl_btree_node</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name>_node</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>pos</name></decl>, <decl><type ref="prev"/><name>min</name></decl>, <decl><type ref="prev"/><name>max</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>cmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>btree</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>nodes</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>min</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>max</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<while>while <condition>(<expr><name>min</name> <operator>&lt;=</operator> <name>max</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>pos</name> <operator>=</operator> <operator>(</operator><name>max</name> <operator>-</operator> <name>min</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <name>min</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>cmp</name> <operator>=</operator> <call><name><name>btree</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>cmp</name></name><argument_list>(<argument><expr><name>score</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><name>nodes</name></expr>)</condition> <block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name>positions</name></expr>)</condition> <block>{<block_content>
						<expr_stmt><expr><name><name>positions</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
					<for>for <control>(<init><expr><name>i</name><operator>++</operator></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>btree</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
						<expr_stmt><expr><name><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
					</block_content>}</block></for>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_FOUND</name></expr>;</expr_stmt>
				<goto>goto <name>cleanup</name>;</goto>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>cmp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>max</name> <operator>==</operator> <name>pos</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><name>min</name> <operator>==</operator> <name>pos</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name>min</name><operator>++</operator></expr>;</expr_stmt>
					<continue>continue;</continue>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>min</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>max</name> <operator>==</operator> <name>pos</name></expr>)</condition> <block>{<block_content>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>max</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></while>
		<if_stmt><if>if <condition>(<expr><name>positions</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <name>max</name> <operator>&amp;&amp;</operator> <call><name><name>btree</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>cmp</name></name><argument_list>(<argument><expr><name>score</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>positions</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>btree</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>btree_node_type</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>, <argument><expr><name>btree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_node</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>node</name> <operator>=</operator> <name>_node</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_NOT_FOUND</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_btree_random_element</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>btree</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>score</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>h</name> <init>= <expr><name><name>btree</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <modifier>*</modifier></type><name>acc</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>random</name></decl>, <decl><type ref="prev"/><name>pos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>_node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_btree_node</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>acc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>acc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>acc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>acc</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <call><name>ceil</name><argument_list>(<argument><expr><name><name>acc</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <literal type="number">0.75</literal> <operator>*</operator> <name><name>btree</name><operator>-&gt;</operator><name>max_node_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>random</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><call><name>rand</name><argument_list>()</argument_list></call> <operator>/</operator> <name>RAND_MAX</name><operator>)</operator> <operator>*</operator> <name><name>acc</name><index>[<expr><name>h</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>btree</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>btree_node_type</name></name></expr></argument>, <argument><expr><name><name>btree</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>btree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_node</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>node</name> <operator>=</operator> <name>_node</name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>random</name> <operator>&gt;</operator> <name><name>acc</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>pos</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><call><name>rand</name><argument_list>()</argument_list></call> <operator>/</operator> <name>RAND_MAX</name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name><name>node</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>btree</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>btree_node_type</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>, <argument><expr><name>btree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_node</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>node</name> <operator>=</operator> <name>_node</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><name>pos</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><call><name>rand</name><argument_list>()</argument_list></call> <operator>/</operator> <name>RAND_MAX</name><operator>)</operator> <operator>*</operator> <name><name>node</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>score</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><operator>*</operator><name>score</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>acc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_btree_add_element</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>btree</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>btree_page</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>score</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <modifier>*</modifier></type><name>positions</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_btree_node</name> <modifier>*</modifier></type><name>right</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_btree_node</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodes</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>nodes</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rl_btree_node</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>btree</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>positions</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>btree</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>pos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>node_page</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>child</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_btree_find_score</name></expr></argument>, <argument><expr><name>RL_NOT_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>btree</name></expr></argument>, <argument><expr><name>score</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>nodes</name></expr></argument>, <argument><expr><name>positions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>rl_btree_node</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>btree</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>node_page</name> <operator>=</operator> <name><name>btree</name><operator>-&gt;</operator><name>root</name></name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><name>node_page</name> <operator>=</operator> <name><name>nodes</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name><name>children</name><index>[<expr><name><name>positions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <name><name>btree</name><operator>-&gt;</operator><name>max_node_size</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name><name>positions</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name><name>positions</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name><name>positions</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>values</name><index>[<expr><name><name>positions</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>values</name><index>[<expr><name><name>positions</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name><name>positions</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>children</name><index>[<expr><name><name>positions</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>children</name><index>[<expr><name><name>positions</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name><name>positions</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name><name>positions</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>score</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>values</name><index>[<expr><name><name>positions</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>child</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Adding child, but children is not initialized\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>children</name><index>[<expr><name><name>positions</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>score</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>value</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_write</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>btree</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>btree_node_type</name></name></expr></argument>, <argument><expr><name>node_page</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>positions</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_btree_node_create</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>btree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>child</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>right</name><operator>-&gt;</operator><name>children</name></name> <operator>=</operator> <call><name>rl_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>btree</name><operator>-&gt;</operator><name>max_node_size</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>right</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>rl_btree_node_destroy</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OUT_OF_MEMORY</name></expr>;</expr_stmt>
					<goto>goto <name>cleanup</name>;</goto>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <name><name>btree</name><operator>-&gt;</operator><name>max_node_size</name></name> <operator>/</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>child</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>right</name><operator>-&gt;</operator><name>children</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>children</name><index>[<expr><name><name>btree</name><operator>-&gt;</operator><name>max_node_size</name></name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>btree</name><operator>-&gt;</operator><name>max_node_size</name></name> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>btree</name><operator>-&gt;</operator><name>max_node_size</name></name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>pos</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>

				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name><name>btree</name><operator>-&gt;</operator><name>max_node_size</name></name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>btree</name><operator>-&gt;</operator><name>max_node_size</name></name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>pos</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <name>score</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>score</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>right</name><operator>-&gt;</operator><name>scores</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name><name>btree</name><operator>-&gt;</operator><name>max_node_size</name></name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>btree</name><operator>-&gt;</operator><name>max_node_size</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>values</name><index>[<expr><name><name>btree</name><operator>-&gt;</operator><name>max_node_size</name></name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>btree</name><operator>-&gt;</operator><name>max_node_size</name></name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>pos</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>right</name><operator>-&gt;</operator><name>values</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>values</name><index>[<expr><name><name>btree</name><operator>-&gt;</operator><name>max_node_size</name></name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>btree</name><operator>-&gt;</operator><name>max_node_size</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>value</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <name><name>btree</name><operator>-&gt;</operator><name>max_node_size</name></name> <operator>/</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>child</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>right</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>children</name><index>[<expr><name><name>btree</name><operator>-&gt;</operator><name>max_node_size</name></name> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>btree</name><operator>-&gt;</operator><name>max_node_size</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>right</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>right</name><operator>-&gt;</operator><name>scores</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name><name>btree</name><operator>-&gt;</operator><name>max_node_size</name></name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>btree</name><operator>-&gt;</operator><name>max_node_size</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>right</name><operator>-&gt;</operator><name>values</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>values</name><index>[<expr><name><name>btree</name><operator>-&gt;</operator><name>max_node_size</name></name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>btree</name><operator>-&gt;</operator><name>max_node_size</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;</operator> <name><name>btree</name><operator>-&gt;</operator><name>max_node_size</name></name> <operator>/</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>child</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>right</name><operator>-&gt;</operator><name>children</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>children</name><index>[<expr><name><name>btree</name><operator>-&gt;</operator><name>max_node_size</name></name> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>pos</name> <operator>-</operator> <name><name>btree</name><operator>-&gt;</operator><name>max_node_size</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>right</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>pos</name> <operator>-</operator> <name><name>btree</name><operator>-&gt;</operator><name>max_node_size</name></name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>right</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>pos</name> <operator>-</operator> <name><name>btree</name><operator>-&gt;</operator><name>max_node_size</name></name> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>btree</name><operator>-&gt;</operator><name>max_node_size</name></name> <operator>-</operator> <name>pos</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name><name>btree</name><operator>-&gt;</operator><name>max_node_size</name></name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>right</name><operator>-&gt;</operator><name>scores</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name><name>btree</name><operator>-&gt;</operator><name>max_node_size</name></name> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>pos</name> <operator>-</operator> <name><name>btree</name><operator>-&gt;</operator><name>max_node_size</name></name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>right</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name>pos</name> <operator>-</operator> <name><name>btree</name><operator>-&gt;</operator><name>max_node_size</name></name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>score</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>right</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name>pos</name> <operator>-</operator> <name><name>btree</name><operator>-&gt;</operator><name>max_node_size</name></name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>btree</name><operator>-&gt;</operator><name>max_node_size</name></name> <operator>-</operator> <name>pos</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>score</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>values</name><index>[<expr><name><name>btree</name><operator>-&gt;</operator><name>max_node_size</name></name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>right</name><operator>-&gt;</operator><name>values</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>values</name><index>[<expr><name><name>btree</name><operator>-&gt;</operator><name>max_node_size</name></name> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>pos</name> <operator>-</operator> <name><name>btree</name><operator>-&gt;</operator><name>max_node_size</name></name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>right</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>pos</name> <operator>-</operator> <name><name>btree</name><operator>-&gt;</operator><name>max_node_size</name></name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>right</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>pos</name> <operator>-</operator> <name><name>btree</name><operator>-&gt;</operator><name>max_node_size</name></name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>btree</name><operator>-&gt;</operator><name>max_node_size</name></name> <operator>-</operator> <name>pos</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>value</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>right</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>btree</name><operator>-&gt;</operator><name>max_node_size</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>child</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>next_empty_page</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_write</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>btree</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>btree_node_type</name></name></expr></argument>, <argument><expr><name>node_page</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>rl_btree_node_destroy</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<goto>goto <name>cleanup</name>;</goto>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_write</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>btree</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>btree_node_type</name></name></expr></argument>, <argument><expr><name>child</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>
	<if_stmt><if>if <condition>(<expr><name>score</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>rl_btree_node</name> <modifier>*</modifier></type><name>old_root</name> <init>= <expr><name>node</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_btree_node_create</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>btree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>score</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
		<comment type="line">// too late to dereference them after this point, handed over</comment>
		<expr_stmt><expr><name>value</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>score</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>old_root</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>children</name></name> <operator>=</operator> <call><name>rl_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>btree</name><operator>-&gt;</operator><name>max_node_size</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OUT_OF_MEMORY</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>rl_btree_node_destroy</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<goto>goto <name>cleanup</name>;</goto>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>node_page</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>node_page</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>next_empty_page</name></name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>node_page</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_write</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>btree</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>btree_node_type</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>old_root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>rl_btree_node_destroy</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<goto>goto <name>cleanup</name>;</goto>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name><name>btree</name><operator>-&gt;</operator><name>root</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_delete</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>btree</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>btree</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>next_empty_page</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_write</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>btree</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>btree_node_type</name></name></expr></argument>, <argument><expr><name><name>btree</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>btree</name><operator>-&gt;</operator><name>height</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>btree</name><operator>-&gt;</operator><name>number_of_elements</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_write</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>btree</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>btree_type</name></name></expr></argument>, <argument><expr><name>btree_page</name></expr></argument>, <argument><expr><name>btree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>score</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>nodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>positions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_btree_update_element</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>btree</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>score</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <modifier>*</modifier></type><name>positions</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_btree_node</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodes</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>nodes</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rl_btree_node</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>btree</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>positions</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>btree</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>node_page</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_btree_find_score</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>btree</name></expr></argument>, <argument><expr><name>score</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>nodes</name></expr></argument>, <argument><expr><name>positions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>rl_btree_node</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>btree</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>node</name></expr>)</condition> <block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>node_page</name> <operator>=</operator> <name><name>btree</name><operator>-&gt;</operator><name>root</name></name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><name>node_page</name> <operator>=</operator> <name><name>nodes</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name><name>children</name><index>[<expr><name><name>positions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>values</name><index>[<expr><name><name>positions</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>!=</operator> <name>value</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>values</name><index>[<expr><name><name>positions</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>values</name><index>[<expr><name><name>positions</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_write</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>btree</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>btree_node_type</name></name></expr></argument>, <argument><expr><name>node_page</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></for>
<label><name>cleanup</name>:</label>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>nodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>positions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_btree_remove_element</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>btree</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>btree_page</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>score</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <modifier>*</modifier></type><name>positions</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_btree_node</name> <modifier>*</modifier><modifier>*</modifier></type><name>nodes</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>nodes</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rl_btree_node</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>btree</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>positions</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>btree</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>node_page</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>child_node_page</name></decl>, <decl><type ref="prev"/><name>sibling_node_page</name></decl>, <decl><type ref="prev"/><name>parent_node_page</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_btree_find_score</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>btree</name></expr></argument>, <argument><expr><name>score</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>nodes</name></expr></argument>, <argument><expr><name>positions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>rl_btree_node</name> <modifier>*</modifier></type><name>node</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>parent_node</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sibling_node</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>child_node</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>btree</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>node</name></expr>)</condition> <block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>node_page</name> <operator>=</operator> <name><name>btree</name><operator>-&gt;</operator><name>root</name></name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><name>node_page</name> <operator>=</operator> <name><name>nodes</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name><name>children</name><index>[<expr><name><name>positions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name><name>positions</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>values</name><index>[<expr><name><name>positions</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>child_node</name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>child_node_page</name> <operator>=</operator> <name>node_page</name></expr>;</expr_stmt>
			<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>btree</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<expr_stmt><expr><name>child_node_page</name> <operator>=</operator> <name><name>child_node</name><operator>-&gt;</operator><name>children</name><index>[<expr><name><name>positions</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>btree</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>btree_node_type</name></name></expr></argument>, <argument><expr><name><name>child_node</name><operator>-&gt;</operator><name>children</name><index>[<expr><name><name>positions</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><name>btree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>child_node</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>nodes</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>child_node</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>positions</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>child_node</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
			</block_content>}</block></for>

			<if_stmt><if>if <condition>(<expr><name><name>child_node</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"last child_node mustn't have children\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_UNEXPECTED</name></expr>;</expr_stmt>
				<goto>goto <name>cleanup</name>;</goto>
			</block_content>}</block></if></if_stmt>

			<comment type="line">// only the leaf node loses an element, to replace the deleted one</comment>
			<expr_stmt><expr><name><name>child_node</name><operator>-&gt;</operator><name>size</name></name><operator>--</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name><name>positions</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>child_node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name><name>child_node</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>values</name><index>[<expr><name><name>positions</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>child_node</name><operator>-&gt;</operator><name>values</name><index>[<expr><name><name>child_node</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_write</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>btree</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>btree_node_type</name></name></expr></argument>, <argument><expr><name>node_page</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_write</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>btree</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>btree_node_type</name></name></expr></argument>, <argument><expr><name>child_node_page</name></expr></argument>, <argument><expr><name>child_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name><name>positions</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name><name>positions</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name><name>positions</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>values</name><index>[<expr><name><name>positions</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>values</name><index>[<expr><name><name>positions</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name><name>positions</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_write</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>btree</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>btree_node_type</name></name></expr></argument>, <argument><expr><name>node_page</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition> <block>{<block_content>
					<comment type="line">// we have an empty root, promote the only child if any</comment>
					<expr_stmt><expr><name><name>btree</name><operator>-&gt;</operator><name>height</name></name><operator>--</operator></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>btree</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>btree_node_type</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>btree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>parent_node</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_write</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>btree</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>btree_node_type</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>parent_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_delete</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>node_page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></else></if_stmt>
			<break>break;</break>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

	<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>node_page</name> <operator>=</operator> <name><name>btree</name><operator>-&gt;</operator><name>root</name></name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><name>node_page</name> <operator>=</operator> <name><name>nodes</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name><name>children</name><index>[<expr><name><name>positions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>btree</name><operator>-&gt;</operator><name>height</name></name><operator>--</operator></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name><name>btree</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else <block>{<block_content>
					<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_delete</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>btree</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>btree</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <name><name>btree</name><operator>-&gt;</operator><name>max_node_size</name></name> <operator>/</operator> <literal type="number">2</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>parent_node_page</name> <operator>=</operator> <name><name>btree</name><operator>-&gt;</operator><name>root</name></name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else <block>{<block_content>
				<expr_stmt><expr><name>parent_node_page</name> <operator>=</operator> <name><name>nodes</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name><name>children</name><index>[<expr><name><name>positions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<expr_stmt><expr><name>parent_node</name> <operator>=</operator> <name><name>nodes</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>parent_node</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Empty parent\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_UNEXPECTED</name></expr>;</expr_stmt>
				<goto>goto <name>cleanup</name>;</goto>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>positions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>sibling_node_page</name> <operator>=</operator> <name><name>parent_node</name><operator>-&gt;</operator><name>children</name><index>[<expr><name><name>positions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>btree</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>btree_node_type</name></name></expr></argument>, <argument><expr><name><name>parent_node</name><operator>-&gt;</operator><name>children</name><index>[<expr><name><name>positions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>btree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>sibling_node</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>sibling_node</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <name><name>btree</name><operator>-&gt;</operator><name>max_node_size</name></name> <operator>/</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition> <block>{<block_content>
						<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>sibling_node</name><operator>-&gt;</operator><name>children</name><index>[<expr><name><name>sibling_node</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
					<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>parent_node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name><name>positions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>parent_node</name><operator>-&gt;</operator><name>values</name><index>[<expr><name><name>positions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

					<expr_stmt><expr><name><name>parent_node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name><name>positions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>sibling_node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name><name>sibling_node</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>parent_node</name><operator>-&gt;</operator><name>values</name><index>[<expr><name><name>positions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>sibling_node</name><operator>-&gt;</operator><name>values</name><index>[<expr><name><name>sibling_node</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

					<expr_stmt><expr><name><name>sibling_node</name><operator>-&gt;</operator><name>size</name></name><operator>--</operator></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_write</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>btree</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>btree_node_type</name></name></expr></argument>, <argument><expr><name>node_page</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_write</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>btree</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>btree_node_type</name></name></expr></argument>, <argument><expr><name>sibling_node_page</name></expr></argument>, <argument><expr><name>sibling_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_write</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>btree</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>btree_node_type</name></name></expr></argument>, <argument><expr><name>parent_node_page</name></expr></argument>, <argument><expr><name>parent_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>positions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>parent_node</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>sibling_node_page</name> <operator>=</operator> <name><name>parent_node</name><operator>-&gt;</operator><name>children</name><index>[<expr><name><name>positions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>btree</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>btree_node_type</name></name></expr></argument>, <argument><expr><name><name>parent_node</name><operator>-&gt;</operator><name>children</name><index>[<expr><name><name>positions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>btree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>sibling_node</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>sibling_node</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <name><name>btree</name><operator>-&gt;</operator><name>max_node_size</name></name> <operator>/</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name> <operator>=</operator> <name><name>parent_node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name><name>positions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>values</name><index>[<expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name> <operator>=</operator> <name><name>parent_node</name><operator>-&gt;</operator><name>values</name><index>[<expr><name><name>positions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

					<expr_stmt><expr><name><name>parent_node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name><name>positions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>sibling_node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>parent_node</name><operator>-&gt;</operator><name>values</name><index>[<expr><name><name>positions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>sibling_node</name><operator>-&gt;</operator><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sibling_node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sibling_node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>sibling_node</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sibling_node</name><operator>-&gt;</operator><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sibling_node</name><operator>-&gt;</operator><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>sibling_node</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition> <block>{<block_content>
						<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>children</name><index>[<expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>sibling_node</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sibling_node</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sibling_node</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>sibling_node</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>

					<expr_stmt><expr><name><name>sibling_node</name><operator>-&gt;</operator><name>size</name></name><operator>--</operator></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_write</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>btree</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>btree_node_type</name></name></expr></argument>, <argument><expr><name>sibling_node_page</name></expr></argument>, <argument><expr><name>sibling_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_write</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>btree</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>btree_node_type</name></name></expr></argument>, <argument><expr><name>node_page</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_write</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>btree</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>btree_node_type</name></name></expr></argument>, <argument><expr><name>parent_node_page</name></expr></argument>, <argument><expr><name>parent_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="line">// not taking from either slibing, need to merge with either</comment>
			<comment type="line">// if either of them exists, they have the minimum number of elements</comment>
			<if_stmt><if>if <condition>(<expr><name><name>positions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>sibling_node_page</name> <operator>=</operator> <name><name>parent_node</name><operator>-&gt;</operator><name>children</name><index>[<expr><name><name>positions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>btree</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>btree_node_type</name></name></expr></argument>, <argument><expr><name><name>parent_node</name><operator>-&gt;</operator><name>children</name><index>[<expr><name><name>positions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>btree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>sibling_node</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>sibling_node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name><name>sibling_node</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name> <operator>=</operator> <name><name>parent_node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name><name>positions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>sibling_node</name><operator>-&gt;</operator><name>values</name><index>[<expr><name><name>sibling_node</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name> <operator>=</operator> <name><name>parent_node</name><operator>-&gt;</operator><name>values</name><index>[<expr><name><name>positions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sibling_node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name><name>sibling_node</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sibling_node</name><operator>-&gt;</operator><name>values</name><index>[<expr><name><name>sibling_node</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>sibling_node</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sibling_node</name><operator>-&gt;</operator><name>children</name><index>[<expr><name><name>sibling_node</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><name><name>positions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>parent_node</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parent_node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name><name>positions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>parent_node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name><name>positions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>parent_node</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name><name>positions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parent_node</name><operator>-&gt;</operator><name>values</name><index>[<expr><name><name>positions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>parent_node</name><operator>-&gt;</operator><name>values</name><index>[<expr><name><name>positions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>parent_node</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name><name>positions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parent_node</name><operator>-&gt;</operator><name>children</name><index>[<expr><name><name>positions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>parent_node</name><operator>-&gt;</operator><name>children</name><index>[<expr><name><name>positions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>parent_node</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name><name>positions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name><name>parent_node</name><operator>-&gt;</operator><name>size</name></name><operator>--</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>sibling_node</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>node</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_write</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>btree</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>btree_node_type</name></name></expr></argument>, <argument><expr><name>sibling_node_page</name></expr></argument>, <argument><expr><name>sibling_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_write</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>btree</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>btree_node_type</name></name></expr></argument>, <argument><expr><name>parent_node_page</name></expr></argument>, <argument><expr><name>parent_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>scores</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>scores</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>values</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>values</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_delete</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>node_page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>positions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>parent_node</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>sibling_node_page</name> <operator>=</operator> <name><name>parent_node</name><operator>-&gt;</operator><name>children</name><index>[<expr><name><name>positions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>btree</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>btree_node_type</name></name></expr></argument>, <argument><expr><name><name>parent_node</name><operator>-&gt;</operator><name>children</name><index>[<expr><name><name>positions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>btree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>sibling_node</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name> <operator>=</operator> <name><name>parent_node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name><name>positions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>values</name><index>[<expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name> <operator>=</operator> <name><name>parent_node</name><operator>-&gt;</operator><name>values</name><index>[<expr><name><name>positions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sibling_node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>sibling_node</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>values</name><index>[<expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sibling_node</name><operator>-&gt;</operator><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>sibling_node</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>children</name><index>[<expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sibling_node</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>sibling_node</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>


				<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parent_node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name><name>positions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>parent_node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name><name>positions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>parent_node</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name><name>positions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parent_node</name><operator>-&gt;</operator><name>values</name><index>[<expr><name><name>positions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>parent_node</name><operator>-&gt;</operator><name>values</name><index>[<expr><name><name>positions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>parent_node</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name><name>positions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parent_node</name><operator>-&gt;</operator><name>children</name><index>[<expr><name><name>positions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>parent_node</name><operator>-&gt;</operator><name>children</name><index>[<expr><name><name>positions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>parent_node</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name><name>positions</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name><name>parent_node</name><operator>-&gt;</operator><name>size</name></name><operator>--</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>sibling_node</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_write</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>btree</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>btree_node_type</name></name></expr></argument>, <argument><expr><name>node_page</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_write</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>btree</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>btree_node_type</name></name></expr></argument>, <argument><expr><name>parent_node_page</name></expr></argument>, <argument><expr><name>parent_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="line">// rl_freeing manually scores before calling destroy to avoid deleting scores that were handed over to `node`</comment>
				<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>sibling_node</name><operator>-&gt;</operator><name>scores</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>sibling_node</name><operator>-&gt;</operator><name>scores</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>sibling_node</name><operator>-&gt;</operator><name>values</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>sibling_node</name><operator>-&gt;</operator><name>values</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_delete</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>sibling_node_page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>

			<comment type="line">// this shouldn't happen</comment>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"No sibling to borrow or merge\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_INVALID_STATE</name></expr>;</expr_stmt>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name><name>btree</name><operator>-&gt;</operator><name>number_of_elements</name></name><operator>--</operator> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_delete</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>btree_page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_DELETED</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_write</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>btree</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>btree_type</name></name></expr></argument>, <argument><expr><name>btree_page</name></expr></argument>, <argument><expr><name>btree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
<label><name>cleanup</name>:</label>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>nodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>positions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_btree_node_pages</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>btree</name></decl></parameter>, <parameter><decl><type><name>rl_btree_node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>short</name> <modifier>*</modifier></type><name>pages</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>retval</name> <init>= <expr><name>RL_OK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_btree_node</name> <modifier>*</modifier></type><name>child</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>pages</name><index>[<expr><name><name>node</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>btree</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>btree_node_type</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>btree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>child</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_btree_node_pages</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>btree</name></expr></argument>, <argument><expr><name>child</name></expr></argument>, <argument><expr><name>pages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_btree_pages</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>btree</name></decl></parameter>, <parameter><decl><type><name>short</name> <modifier>*</modifier></type><name>pages</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_btree_node</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>pages</name><index>[<expr><name><name>btree</name><operator>-&gt;</operator><name>root</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>btree</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>btree_node_type</name></name></expr></argument>, <argument><expr><name><name>btree</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>btree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>node</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_btree_node_pages</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>btree</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>pages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_btree_node_delete</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>btree</name></decl></parameter>, <parameter><decl><type><name>rl_btree_node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>retval</name> <init>= <expr><name>RL_OK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>page</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_btree_node</name> <modifier>*</modifier></type><name>child</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>page</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>btree</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>btree_node_type</name></name></expr></argument>, <argument><expr><name>page</name></expr></argument> , <argument><expr><name>btree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>child</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_btree_node_delete</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>btree</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_delete</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_btree_delete</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>btree</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_btree_node</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>btree</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>btree_node_type</name></name></expr></argument>, <argument><expr><name><name>btree</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>btree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>node</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_btree_node_delete</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>btree</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_delete</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>btree</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_btree_node_is_balanced</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>btree</name></decl></parameter>, <parameter><decl><type><name>rl_btree_node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_root</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_root</name> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <name><name>btree</name><operator>-&gt;</operator><name>max_node_size</name></name> <operator>/</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Non root node is below maximum\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>RL_INVALID_STATE</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>retval</name> <init>= <expr><name>RL_OK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_btree_node</name> <modifier>*</modifier></type><name>child</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>btree</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>btree_node_type</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>btree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>child</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_btree_node_is_balanced</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>btree</name></expr></argument>, <argument><expr><name>child</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Child is not balanced %p\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_btree_is_balanced</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>btree</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>scores</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_btree_node</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><call><name>rl_read</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>btree</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>btree_node_type</name></name></expr></argument>, <argument><expr><name><name>btree</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>btree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_FOUND</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Unable to read btree in page %ld (%d)\n"</literal></expr></argument>, <argument><expr><name><name>btree</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>node</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_btree_node_is_balanced</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>btree</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>long</name></type> <name>size</name> <init>= <expr><operator>(</operator><name>long</name><operator>)</operator><call><name>pow</name><argument_list>(<argument><expr><name><name>btree</name><operator>-&gt;</operator><name>max_node_size</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>btree</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>scores</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_flatten_btree</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>btree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scores</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name><name>btree</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>cmp</name></name><argument_list>(<argument><expr><name><name>scores</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>scores</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>RL_DEBUG</name></cpp:ifdef>
				<expr_stmt><expr><call><name>rl_print_btree</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>btree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"btree is not sorted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>RL_DEBUG</name></cpp:ifdef>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" ("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>int</name></type> <name>strlen</name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>btree</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>formatter</name></name><argument_list>(<argument><expr><name><name>scores</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>strlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>str</name><index>[<expr><name>strlen</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s &gt;= "</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>btree</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>formatter</name></name><argument_list>(<argument><expr><name><name>scores</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>strlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>str</name><index>[<expr><name>strlen</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s)\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
				<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_INVALID_STATE</name></expr>;</expr_stmt>
				<goto>goto <name>cleanup</name>;</goto>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></for>
<label><name>cleanup</name>:</label>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>scores</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>RL_DEBUG</name></cpp:ifdef>
<function><type><name>int</name></type> <name>rl_print_btree_node</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>btree</name></decl></parameter>, <parameter><decl><type><name>rl_btree_node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>RL_OK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_btree_node</name> <modifier>*</modifier></type><name>child</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>btree</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>btree_node_type</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>btree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>child</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_print_btree_node</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>btree</name></expr></argument>, <argument><expr><name>child</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>score</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>level</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name><name>btree</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>formatter</name></name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>score</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>score</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>score</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>level</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%p\n"</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>btree</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>btree_node_type</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>btree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>child</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_print_btree_node</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>btree</name></expr></argument>, <argument><expr><name>child</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_print_btree</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>btree</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>rl_btree_node</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>btree</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>btree_node_type</name></name></expr></argument>, <argument><expr><name><name>btree</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>btree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>node</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_print_btree_node</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>btree</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>rl_flatten_btree_node</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>btree</name></decl></parameter>, <parameter><decl><type><name>rl_btree_node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type> <name>scores</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>RL_OK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_btree_node</name> <modifier>*</modifier></type><name>child</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>btree</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>btree_node_type</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>btree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>child</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_flatten_btree_node</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>btree</name></expr></argument>, <argument><expr><name>child</name></expr></argument>, <argument><expr><name>scores</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><operator>(</operator><operator>*</operator><name>scores</name><operator>)</operator><index>[<expr><operator>*</operator><name>size</name></expr>]</index> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><operator>*</operator><name>size</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>btree</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>btree_node_type</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>btree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>child</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_flatten_btree_node</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>btree</name></expr></argument>, <argument><expr><name>child</name></expr></argument>, <argument><expr><name>scores</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_flatten_btree</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>btree</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type> <name>scores</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><call><name>rl_read</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>btree</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>btree_node_type</name></name></expr></argument>, <argument><expr><name><name>btree</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>btree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_FOUND</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>retval</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><call><name>rl_flatten_btree_node</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>btree</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>scores</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_btree_node_serialize_hash_sha1_key</name><parameter_list>(<parameter><function_decl><type><name>rlite</name> <modifier>*</modifier></type><name>UNUSED</name><parameter_list>(<parameter><decl><type><name>db</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>rl_btree_node</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>rl_btree_node</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>put_4bytes</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>pos</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_key</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>key</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>data</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">20</literal></expr>]</index></name> <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>put_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">21</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>string_page</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>put_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">25</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>value_page</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>put_8bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">29</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>expires</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>put_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">37</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>put_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">41</literal></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr> ?</condition><then> <expr><name><name>node</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pos</name> <operator>+=</operator> <literal type="number">45</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>put_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr> ?</condition><then> <expr><name><name>node</name><operator>-&gt;</operator><name>children</name><index>[<expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>RL_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_btree_node_deserialize_hash_sha1_key</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>rl_btree_node</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>btree</name> <init>= <expr><operator>(</operator><name>rl_btree</name> <operator>*</operator><operator>)</operator> <name>context</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_btree_node_create</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>btree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>get_4bytes</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>pos</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>, <decl><type ref="prev"/><name>child</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_key</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>rl_malloc</name><argument_list>(<argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OUT_OF_MEMORY</name></expr>;</expr_stmt>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>key</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>rl_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rl_key</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>node</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OUT_OF_MEMORY</name></expr>;</expr_stmt>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>data</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">20</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>string_page</name></name> <operator>=</operator> <call><name>get_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">21</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>value_page</name></name> <operator>=</operator> <call><name>get_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">25</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>expires</name></name> <operator>=</operator> <call><name>get_8bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">29</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <call><name>get_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">37</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>child</name> <operator>=</operator> <call><name>get_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">41</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>child</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>children</name></name> <operator>=</operator> <call><name>rl_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>btree</name><operator>-&gt;</operator><name>max_node_size</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OUT_OF_MEMORY</name></expr>;</expr_stmt>
					<goto>goto <name>cleanup</name>;</goto>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>pos</name> <operator>+=</operator> <literal type="number">45</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name>child</name> <operator>=</operator> <call><name>get_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>child</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>children</name><index>[<expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>obj</name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name> <operator>&amp;&amp;</operator> <name>node</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>rl_btree_node_destroy</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_btree_node_serialize_hash_sha1_hashkey</name><parameter_list>(<parameter><function_decl><type><name>rlite</name> <modifier>*</modifier></type><name>UNUSED</name><parameter_list>(<parameter><decl><type><name>db</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>rl_btree_node</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>rl_btree_node</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>put_4bytes</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>pos</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_hashkey</name> <modifier>*</modifier></type><name>hashkey</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>hashkey</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>put_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">20</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>hashkey</name><operator>-&gt;</operator><name>string_page</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>put_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">24</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>hashkey</name><operator>-&gt;</operator><name>value_page</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>put_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">28</literal></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr> ?</condition><then> <expr><name><name>node</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pos</name> <operator>+=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>put_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr> ?</condition><then> <expr><name><name>node</name><operator>-&gt;</operator><name>children</name><index>[<expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>RL_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_btree_node_deserialize_hash_sha1_hashkey</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>rl_btree_node</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>btree</name> <init>= <expr><operator>(</operator><name>rl_btree</name> <operator>*</operator><operator>)</operator> <name>context</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_btree_node_create</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>btree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>get_4bytes</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>pos</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>, <decl><type ref="prev"/><name>child</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_hashkey</name> <modifier>*</modifier></type><name>hashkey</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>rl_malloc</name><argument_list>(<argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OUT_OF_MEMORY</name></expr>;</expr_stmt>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>hashkey</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>rl_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rl_hashkey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>node</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OUT_OF_MEMORY</name></expr>;</expr_stmt>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>hashkey</name><operator>-&gt;</operator><name>string_page</name></name> <operator>=</operator> <call><name>get_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">20</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>hashkey</name><operator>-&gt;</operator><name>value_page</name></name> <operator>=</operator> <call><name>get_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">24</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>child</name> <operator>=</operator> <call><name>get_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">28</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>child</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>children</name></name> <operator>=</operator> <call><name>rl_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>btree</name><operator>-&gt;</operator><name>max_node_size</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OUT_OF_MEMORY</name></expr>;</expr_stmt>
					<goto>goto <name>cleanup</name>;</goto>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>pos</name> <operator>+=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name>child</name> <operator>=</operator> <call><name>get_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>child</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>children</name><index>[<expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>obj</name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name> <operator>&amp;&amp;</operator> <name>node</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>rl_btree_node_destroy</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name>rl_btree_node_serialize_hash_long_long</name><argument_list>(<argument><expr>struct <name>rlite</name> <operator>*</operator><call><name>UNUSED</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>obj</name></expr></argument>, <argument><expr><name>unsigned</name> <name>char</name> <operator>*</operator><name>data</name></expr></argument>)</argument_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>rl_btree_node</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name>obj</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>pos</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>put_4bytes</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>put_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>put_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr> ?</condition><then> <expr><name><name>node</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>put_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name><name>node</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pos</name> <operator>+=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>put_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr> ?</condition><then> <expr><name><name>node</name><operator>-&gt;</operator><name>children</name><index>[<expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>RL_OK</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>int</name></type> <name>rl_btree_node_deserialize_hash_long_long</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>btree</name> <init>= <expr><name>context</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_btree_node</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>pos</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>, <decl><type ref="prev"/><name>child</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_btree_node_create</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>btree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>get_4bytes</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>rl_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OUT_OF_MEMORY</name></expr>;</expr_stmt>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name><name>node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>child</name> <operator>=</operator> <call><name>get_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>child</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>children</name></name> <operator>=</operator> <call><name>rl_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>btree</name><operator>-&gt;</operator><name>max_node_size</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OUT_OF_MEMORY</name></expr>;</expr_stmt>
					<goto>goto <name>cleanup</name>;</goto>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>rl_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>node</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OUT_OF_MEMORY</name></expr>;</expr_stmt>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name><name>node</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pos</name> <operator>+=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name>child</name> <operator>=</operator> <call><name>get_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>child</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>children</name><index>[<expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>obj</name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name> <operator>&amp;&amp;</operator> <name>node</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>rl_btree_node_destroy</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name>rl_btree_node_serialize_hash_sha1_long</name><argument_list>(<argument><expr>struct <name>rlite</name> <operator>*</operator><call><name>UNUSED</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>obj</name></expr></argument>, <argument><expr><name>unsigned</name> <name>char</name> <operator>*</operator><name>data</name></expr></argument>)</argument_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>rl_btree_node</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name>obj</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>pos</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>put_4bytes</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>put_double</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">20</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>put_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">24</literal></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr> ?</condition><then> <expr><name><name>node</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pos</name> <operator>+=</operator> <literal type="number">28</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>put_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr> ?</condition><then> <expr><name><name>node</name><operator>-&gt;</operator><name>children</name><index>[<expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>RL_OK</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<function><type><name>int</name></type> <name>rl_btree_node_deserialize_hash_sha1_long</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>btree</name> <init>= <expr><name>context</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_btree_node</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>pos</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>, <decl><type ref="prev"/><name>child</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_btree_node_create</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>btree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>get_4bytes</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>rl_malloc</name><argument_list>(<argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OUT_OF_MEMORY</name></expr>;</expr_stmt>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>rl_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>node</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OUT_OF_MEMORY</name></expr>;</expr_stmt>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name><name>node</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_double</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">20</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>child</name> <operator>=</operator> <call><name>get_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">24</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>child</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>children</name></name> <operator>=</operator> <call><name>rl_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>btree</name><operator>-&gt;</operator><name>max_node_size</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OUT_OF_MEMORY</name></expr>;</expr_stmt>
					<goto>goto <name>cleanup</name>;</goto>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>pos</name> <operator>+=</operator> <literal type="number">28</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name>child</name> <operator>=</operator> <call><name>get_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>child</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>children</name><index>[<expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>obj</name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name> <operator>&amp;&amp;</operator> <name>node</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>rl_btree_node_destroy</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name>rl_btree_node_serialize_hash_sha1_double</name><argument_list>(<argument><expr>struct <name>rlite</name> <operator>*</operator><call><name>UNUSED</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>obj</name></expr></argument>, <argument><expr><name>unsigned</name> <name>char</name> <operator>*</operator><name>data</name></expr></argument>)</argument_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>rl_btree_node</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name>obj</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>pos</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>put_4bytes</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>put_double</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">20</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>put_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">28</literal></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr> ?</condition><then> <expr><name><name>node</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pos</name> <operator>+=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>put_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr> ?</condition><then> <expr><name><name>node</name><operator>-&gt;</operator><name>children</name><index>[<expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>RL_OK</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>int</name></type> <name>rl_btree_node_deserialize_hash_sha1_double</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlite</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>btree</name> <init>= <expr><name>context</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_btree_node</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>pos</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>, <decl><type ref="prev"/><name>child</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_btree_node_create</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>btree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><call><name>get_4bytes</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>rl_malloc</name><argument_list>(<argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OUT_OF_MEMORY</name></expr>;</expr_stmt>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>rl_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>node</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OUT_OF_MEMORY</name></expr>;</expr_stmt>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><operator>*</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name><name>node</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_double</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">20</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>child</name> <operator>=</operator> <call><name>get_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">28</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>child</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>children</name></name> <operator>=</operator> <call><name>rl_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>btree</name><operator>-&gt;</operator><name>max_node_size</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OUT_OF_MEMORY</name></expr>;</expr_stmt>
					<goto>goto <name>cleanup</name>;</goto>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>pos</name> <operator>+=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name>child</name> <operator>=</operator> <call><name>get_4bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>child</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>children</name><index>[<expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>obj</name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name> <operator>&amp;&amp;</operator> <name>node</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>rl_btree_node_destroy</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_btree_iterator_create</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>btree</name></decl></parameter>, <parameter><decl><type><name>rl_btree_iterator</name> <modifier>*</modifier><modifier>*</modifier></type><name>_iterator</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_btree_iterator</name> <modifier>*</modifier></type><name>iterator</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>btree</name><operator>-&gt;</operator><name>number_of_elements</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_NOT_FOUND</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rl_btree_iterator</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>rl_btree_iterator_nodes</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>btree</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>db</name></name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>btree</name></name> <operator>=</operator> <name>btree</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>position</name></name> <operator>=</operator> <name><name>btree</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>btree</name><operator>-&gt;</operator><name>number_of_elements</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>btree</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>btree_node_type</name></name></expr></argument>, <argument><expr><name><name>btree</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>btree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>btree</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>btree</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>btree_node_type</name></name></expr></argument>, <argument><expr><name><name>iterator</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>node</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>btree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>node</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><operator>*</operator><name>_iterator</name> <operator>=</operator> <name>iterator</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>rl_btree_iterator_destroy</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_btree_iterator_next</name><parameter_list>(<parameter><decl><type><name>rl_btree_iterator</name> <modifier>*</modifier></type><name>iterator</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>score</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_btree_node</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>iterator</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>iterator</name><operator>-&gt;</operator><name>position</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_END</name></expr>;</expr_stmt>
		<goto>goto <name>cleanup</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>position</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_btree</name> <modifier>*</modifier></type><name>btree</name> <init>= <expr><name><name>iterator</name><operator>-&gt;</operator><name>btree</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>iterator</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><name><name>iterator</name><operator>-&gt;</operator><name>position</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>node</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>position</name> <operator>=</operator> <name><name>iterator</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><name><name>iterator</name><operator>-&gt;</operator><name>position</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>position</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>score</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><operator>*</operator><name>score</name></expr></argument>, <argument><expr><name><name>iterator</name><operator>-&gt;</operator><name>btree</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>score_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>score</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>scores</name><index>[<expr><name>position</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>iterator</name><operator>-&gt;</operator><name>btree</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>score_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_MALLOC</name><argument_list>(<argument><expr><operator>*</operator><name>value</name></expr></argument>, <argument><expr><name><name>iterator</name><operator>-&gt;</operator><name>btree</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>value_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>value</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>position</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>iterator</name><operator>-&gt;</operator><name>btree</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>value_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><name><name>iterator</name><operator>-&gt;</operator><name>position</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>position</name><operator>++</operator></expr>;</expr_stmt>
		<while>while <condition>(<expr><name><name>iterator</name><operator>-&gt;</operator><name>position</name></name> <operator>&lt;</operator> <name><name>iterator</name><operator>-&gt;</operator><name>btree</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>position</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>children</name><index>[<expr><name><name>iterator</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><name><name>iterator</name><operator>-&gt;</operator><name>position</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>position</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name><name>iterator</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>btree</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>btree_node_type</name></name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><name>btree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><name><name>iterator</name><operator>-&gt;</operator><name>position</name></name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>iterator</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><name><name>iterator</name><operator>-&gt;</operator><name>position</name></name><operator>++</operator></expr>]</index></name><operator>.</operator><name>node</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <name><name>iterator</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><name><name>iterator</name><operator>-&gt;</operator><name>position</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>position</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<while>while <condition>(<expr><operator>--</operator><name><name>iterator</name><operator>-&gt;</operator><name>position</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_btree_node_nocache_destroy</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name><name>iterator</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>iterator</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><name><name>iterator</name><operator>-&gt;</operator><name>position</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>node</name></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>iterator</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><name><name>iterator</name><operator>-&gt;</operator><name>position</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>position</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></while>
			<if_stmt><if>if <condition>(<expr><name><name>iterator</name><operator>-&gt;</operator><name>position</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_btree_node_nocache_destroy</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name><name>iterator</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><name><name>iterator</name><operator>-&gt;</operator><name>position</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>position</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>RL_OK</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>rl_btree_iterator_destroy</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rl_btree_iterator_destroy</name><parameter_list>(<parameter><decl><type><name>rl_btree_iterator</name> <modifier>*</modifier></type><name>iterator</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><name>RL_OK</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>iterator</name> <operator>&amp;&amp;</operator> <name><name>iterator</name><operator>-&gt;</operator><name>nodes</name></name></expr>)</condition> <block>{<block_content>
		<while>while <condition>(<expr><operator>--</operator><name><name>iterator</name><operator>-&gt;</operator><name>position</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>RL_CALL</name><argument_list>(<argument><expr><name>rl_btree_node_nocache_destroy</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name><name>iterator</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>iterator</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><name><name>iterator</name><operator>-&gt;</operator><name>position</name></name></expr>]</index></name><operator>.</operator><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></if></if_stmt>
<label><name>cleanup</name>:</label>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>
</unit>
