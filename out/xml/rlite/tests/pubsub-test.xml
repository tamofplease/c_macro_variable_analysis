<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/rlite/tests/pubsub-test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"greatest.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../src/rlite/rlite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../src/rlite/pubsub.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DATA</name></cpp:macro> <cpp:value>"hello world!"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHANNEL</name></cpp:macro> <cpp:value>"mychannel"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHANNEL2</name></cpp:macro> <cpp:value>"other channel"</cpp:value></cpp:define>

<struct>struct <name>buf</name> <block>{
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>datalen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>channel</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>channellen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>read</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>recipients</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>sleep</name></decl>;</decl_stmt> <comment type="line">// in seconds</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>timeout</name></decl>;</decl_stmt> <comment type="line">// in seconds</comment>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_buffer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>buf</name></name><modifier>*</modifier></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>datalen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>channel</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>channellen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>DATA</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>datalen</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>DATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>datalen</name></name> <operator>=</operator> <name>datalen</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>channel</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>channel</name></name> <operator>=</operator> <name>CHANNEL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>channellen</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>CHANNEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>channel</name></name> <operator>=</operator> <name>channel</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>channellen</name></name> <operator>=</operator> <name>channellen</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>read</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>recipients</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>sleep</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>timeout</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>do_publish</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>buf</name></name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>rl_publish</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><call><name>UNSIGN</name><argument_list>(<argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>channel</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>channellen</name></name></expr></argument>, <argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>datalen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buffer</name><operator>-&gt;</operator><name>recipients</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Failed to publish\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>rl_commit</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Failed to commit\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>publish</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>_buffer</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>buf</name></name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><name>_buffer</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>buffer</name><operator>-&gt;</operator><name>sleep</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>sleep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>setup_db</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Failed to open database\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>do_publish</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>poll</name><parameter_list>(<parameter><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>buf</name></name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>elementc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>elements</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <modifier>*</modifier></type><name>elementslen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>testdata</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>testchannel</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>testdatalen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>testchannellen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>buffer</name><operator>-&gt;</operator><name>timeout</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<while>while <condition>(<expr><call><name>rl_poll</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elementc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elements</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elementslen</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RL_NOT_FOUND</name></expr>)</condition> <block>{<block_content>
			<comment type="line">// need to discard to release lock on file</comment>
			<expr_stmt><expr><call><name>rl_discard</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>rl_refresh</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>buffer</name><operator>-&gt;</operator><name>timeout</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_poll_wait</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elementc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elements</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elementslen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timeout</name></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>buffer</name><operator>-&gt;</operator><name>timeout</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>timeout</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_poll_wait</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elementc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elements</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elementslen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name>testchannel</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>elements</name><index>[<expr><name>elementc</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>testchannellen</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>elementslen</name><index>[<expr><name>elementc</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>testdata</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>elements</name><index>[<expr><name>elementc</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>testdatalen</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>elementslen</name><index>[<expr><name>elementc</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>buffer</name><operator>-&gt;</operator><name>channellen</name></name> <operator>==</operator> <name>testchannellen</name> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>channel</name></name></expr></argument>, <argument><expr><name>testchannel</name></expr></argument>, <argument><expr><name>testchannellen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
			<name><name>buffer</name><operator>-&gt;</operator><name>datalen</name></name> <operator>==</operator> <name>testdatalen</name> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>testdata</name></expr></argument>, <argument><expr><name>testdatalen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>read</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Data mismatch on secondary subscriber"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>elementc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>elements</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>elements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>elementslen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * This function intentionally lives data around to test clean up
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>subscribe_broken</name><parameter_list>()</parameter_list> <block>{<block_content>

	<decl_stmt><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>setup_db</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Failed to open database\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>channel</name> <init>= <expr><name>CHANNEL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>channellen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>CHANNEL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>rl_subscribe</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>channel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>channellen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Failed to subscribe\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>subscriber_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>subscriber_id</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>subscriber_lock_fp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>subscriber_lock_fp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>subscribe</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>_buffer</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>buf</name></name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><name>_buffer</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>setup_db</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Failed to open database\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>channel</name> <init>= <expr><name>CHANNEL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>channellen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>CHANNEL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>rl_subscribe</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>channel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>channellen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Failed to subscribe\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>poll</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_refresh</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>TEST</name></type> <name>basic_subscribe_publish</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>testdatalen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>recipients</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>channel</name> <init>= <expr><name>CHANNEL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>channellen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name><name>struct</name> <name>buf</name></name></type> <name>buffer</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>init_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>setup_db</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>rl_subscribe</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>channel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>channellen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Failed to subscribe\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>do_publish</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_refresh</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>poll</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_poll</name></expr></argument>, <argument><expr><name>RL_NOT_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><name><name>buffer</name><operator>.</operator><name>read</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><name><name>buffer</name><operator>.</operator><name>recipients</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PASS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>TEST</name></type> <name>basic_subscribe_publish_newdb</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>testdatalen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>channel</name> <init>= <expr><name>CHANNEL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>channellen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>CHANNEL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name><name>struct</name> <name>buf</name></name></type> <name>buffer</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>init_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>setup_db</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>rl_subscribe</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>channel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>channellen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Failed to subscribe\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>rl_discard</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>publish</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_refresh</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>poll</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><name><name>buffer</name><operator>.</operator><name>read</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><name><name>buffer</name><operator>.</operator><name>recipients</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PASS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>TEST</name></type> <name>basic_publish_no_subscriber</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name><name>struct</name> <name>buf</name></name></type> <name>buffer</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>init_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>setup_db</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>publish</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><name><name>buffer</name><operator>.</operator><name>recipients</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PASS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>TEST</name></type> <name>basic_publish_two_subscribers</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>channel</name> <init>= <expr><name>CHANNEL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>channellen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>CHANNEL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>pthread_t</name></type> <name>thread_w</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>buf</name></name></type> <name>buffer_w</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>init_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer_w</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>pthread_t</name></type> <name>thread_r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>buf</name></name></type> <name>buffer_r</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>init_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer_r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>pthread_t</name></type> <name>thread_r2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>buf</name></name></type> <name>buffer_r2</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>init_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer_r2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>setup_db</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thread_r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>subscribe</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffer_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thread_r2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>subscribe</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffer_r2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// need to make sure both subscribers are ready</comment>
	<expr_stmt><expr><call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thread_w</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>publish</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffer_w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pthread_join</name><argument_list>(<argument><expr><name>thread_w</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_join</name><argument_list>(<argument><expr><name>thread_r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_join</name><argument_list>(<argument><expr><name>thread_r2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><name><name>buffer_w</name><operator>.</operator><name>recipients</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><name><name>buffer_r</name><operator>.</operator><name>read</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><name><name>buffer_r2</name><operator>.</operator><name>read</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PASS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>TEST</name></type> <name>basic_subscribe2_publish</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>publish_channel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><literal type="string">"hello world!"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>datalen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pthread_t</name></type> <name>thread</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name><name>channels</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><call><name>UNSIGN</name><argument_list>(<argument><expr><name>CHANNEL</name></expr></argument>)</argument_list></call></expr>, <macro><name>UNSIGN</name><argument_list>(<argument>CHANNEL2</argument>)</argument_list></macro>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name><name>channelslen</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><call><name>strlen</name><argument_list>(<argument><expr><name>CHANNEL</name></expr></argument>)</argument_list></call></expr>, <macro><name>strlen</name><argument_list>(<argument>CHANNEL2</argument>)</argument_list></macro>}</block></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name><name>struct</name> <name>buf</name></name></type> <name>buffer</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>init_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>channels</name><index>[<expr><name>publish_channel</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>channelslen</name><index>[<expr><name>publish_channel</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>setup_db</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thread</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>publish</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_subscribe</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><name>channelslen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>poll</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><name><name>buffer</name><operator>.</operator><name>read</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_join</name><argument_list>(<argument><expr><name>thread</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PASS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>TEST</name></type> <name>basic_subscribe_timeout_publish</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__linux</name></expr></cpp:if>
	<comment type="line">// This test is flaky on linux; I could not find the root cause, it relates</comment>
	<comment type="line">// to flock and fifos, but I was not able to isolate.</comment>
	<expr_stmt><expr><call><name>PASS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>channel</name> <init>= <expr><name>CHANNEL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>channellen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>CHANNEL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>pthread_t</name></type> <name>thread_w</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>buf</name></name></type> <name>buffer_w</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>init_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer_w</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>buffer_w</name><operator>.</operator><name>sleep</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<decl_stmt><decl><type><name><name>struct</name> <name>buf</name></name></type> <name>buffer_r</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>init_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer_r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>buffer_r</name><operator>.</operator><name>timeout</name></name> <operator>=</operator> <name>timeout</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>setup_db</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>rl_subscribe</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>channel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>channellen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Failed to subscribe\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>rl_discard</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>before</name> <init>= <expr><call><name>rl_mstime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thread_w</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>publish</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffer_w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_refresh</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>poll</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffer_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>elapsed</name> <init>= <expr><call><name>rl_mstime</name><argument_list>()</argument_list></call> <operator>-</operator> <name>before</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>elapsed</name> <operator>&gt;=</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// if we waited more than 5 secs, we just timeouted, it should be close to 1s</comment>
	<expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>elapsed</name> <operator>&lt;</operator> <literal type="number">5000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><name><name>buffer_r</name><operator>.</operator><name>read</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><name><name>buffer_w</name><operator>.</operator><name>recipients</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_join</name><argument_list>(<argument><expr><name>thread_w</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PASS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>TEST</name></type> <name>basic_subscribe_timeout</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>channel</name> <init>= <expr><name>CHANNEL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>channellen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>CHANNEL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name><name>struct</name> <name>buf</name></name></type> <name>buffer_r</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>init_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer_r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>buffer_r</name><operator>.</operator><name>timeout</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>setup_db</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>rl_subscribe</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>channel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>channellen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Failed to subscribe\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>rl_refresh</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>before</name> <init>= <expr><call><name>rl_mstime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>poll</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffer_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><name><name>buffer_r</name><operator>.</operator><name>read</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PASS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>TEST</name></type> <name>basic_subscribe_unsubscribe_publish</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>testdatalen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>channel</name> <init>= <expr><name>CHANNEL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>channellen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name><name>struct</name> <name>buf</name></name></type> <name>buffer</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>init_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>setup_db</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>rl_subscribe</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>channel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>channellen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Failed to subscribe\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>rl_unsubscribe</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>channel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>channellen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Failed to unsubscribe\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>do_publish</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><name><name>buffer</name><operator>.</operator><name>recipients</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PASS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>TEST</name></type> <name>basic_subscribe_unsubscribe_all_publish</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>testdatalen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>channel</name> <init>= <expr><name>CHANNEL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>channellen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name><name>struct</name> <name>buf</name></name></type> <name>buffer</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>init_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>setup_db</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>rl_subscribe</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>channel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>channellen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Failed to subscribe\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>rl_unsubscribe_all</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Failed to unsubscribe all\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>do_publish</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><name><name>buffer</name><operator>.</operator><name>recipients</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PASS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>TEST</name></type> <name>basic_publish_cleans_broken_subscriber</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>testdatalen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>channel</name> <init>= <expr><name>CHANNEL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>channellen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name><name>struct</name> <name>buf</name></name></type> <name>buffer</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>init_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>setup_db</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>subscribe_broken</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>setup_db</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>do_publish</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><name><name>buffer</name><operator>.</operator><name>recipients</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PASS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>TEST</name></type> <name>basic_psubscribe_publish</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>testdatalen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>recipients</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pattern</name> <init>= <expr><literal type="string">"*"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>patternlen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name><name>struct</name> <name>buf</name></name></type> <name>buffer</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>init_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>setup_db</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>rl_psubscribe</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pattern</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>patternlen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Failed to subscribe\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>do_publish</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_refresh</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>poll</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><name><name>buffer</name><operator>.</operator><name>read</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><name><name>buffer</name><operator>.</operator><name>recipients</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PASS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>TEST</name></type> <name>basic_subscribe_pubsub_channels</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>testdatalen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>recipients</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>channel</name> <init>= <expr><name>CHANNEL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>channellen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>channel2</name> <init>= <expr><name>CHANNEL2</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>channel2len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>channel2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>long</name></type> <name>channelc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>channelv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <modifier>*</modifier></type><name>channelvlen</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>setup_db</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_pubsub_channels</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>channelc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>channelv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>channelvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><name>channelc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_subscribe</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>channel</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>channellen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_pubsub_channels</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>channelc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>channelv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>channelvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><name>channelc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><name><name>channelvlen</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>channellen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>channelv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>channel</name></expr></argument>, <argument><expr><name>channellen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>channelv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>channelvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>channelv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_subscribe</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>channel2</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>channel2len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_pubsub_channels</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>channelc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>channelv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>channelvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><name>channelc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><name><name>channelvlen</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>channellen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><name><name>channelvlen</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>channel2len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>channelv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>channel</name></expr></argument>, <argument><expr><name>channellen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>channelv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>channel2</name></expr></argument>, <argument><expr><name>channel2len</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>channelv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>channelv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>channelvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>channelv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_pubsub_channels</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"other *"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>channelc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>channelv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>channelvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><name>channelc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><name><name>channelvlen</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>channel2len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>channelv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>channel2</name></expr></argument>, <argument><expr><name>channel2len</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>channelv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>channelvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>channelv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>rl_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PASS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>TEST</name></type> <name>basic_subscribe_pubsub_numsub</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>testdatalen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>recipients</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>channel</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>CHANNEL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>channellen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>channel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>channel2</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>CHANNEL2</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>channel2len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>channel2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name><name>channels</name><index>[]</index></name> <init>= <expr><block>{<expr><name>channel</name></expr>, <expr><name>channel2</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name><name>channelslen</name><index>[]</index></name> <init>= <expr><block>{<expr><name>channellen</name></expr>, <expr><name>channel2len</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name><name>count</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>setup_db</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_pubsub_numsub</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><name>channelslen</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><name><name>count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><name><name>count</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_subscribe</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>channel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>channellen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_pubsub_numsub</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><name>channelslen</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><name><name>count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><name><name>count</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_subscribe</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>channel2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>channel2len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_pubsub_numsub</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><name>channelslen</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><name><name>count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><name><name>count</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_commit</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db2</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>setup_db</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_subscribe</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>channel2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>channel2len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_commit</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_pubsub_numsub</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><name>channelslen</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><name><name>count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><name><name>count</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_refresh</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_refresh</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_close</name><argument_list>(<argument><expr><name>db2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PASS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>TEST</name></type> <name>basic_subscribe_pubsub_numpat</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>testdatalen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>recipients</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pattern</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"pattern*"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>patternlen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>pattern</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>count</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>setup_db</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_pubsub_numpat</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_psubscribe</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pattern</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>patternlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_pubsub_numpat</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>rl_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PASS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>TEST</name></type> <name>basic_memory_test</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>channel</name> <init>= <expr><name>CHANNEL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>channellen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>setup_db</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>rl_subscribe</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>channel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>channellen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>rl_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PASS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>FAIL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>SUITE</name><argument_list>(<argument>pubsub_test</argument>)</argument_list></macro>
<block>{<block_content>
	<expr_stmt><expr><call><name>RUN_TEST</name><argument_list>(<argument><expr><name>basic_subscribe_publish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RUN_TEST</name><argument_list>(<argument><expr><name>basic_subscribe_publish_newdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RUN_TEST</name><argument_list>(<argument><expr><name>basic_publish_two_subscribers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RUN_TEST</name><argument_list>(<argument><expr><name>basic_publish_no_subscriber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RUN_TEST1</name><argument_list>(<argument><expr><name>basic_subscribe2_publish</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RUN_TEST1</name><argument_list>(<argument><expr><name>basic_subscribe2_publish</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RUN_TEST1</name><argument_list>(<argument><expr><name>basic_subscribe_timeout_publish</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RUN_TEST1</name><argument_list>(<argument><expr><name>basic_subscribe_timeout_publish</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RUN_TEST</name><argument_list>(<argument><expr><name>basic_subscribe_timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RUN_TEST</name><argument_list>(<argument><expr><name>basic_subscribe_unsubscribe_publish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RUN_TEST</name><argument_list>(<argument><expr><name>basic_subscribe_unsubscribe_all_publish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RUN_TEST</name><argument_list>(<argument><expr><name>basic_publish_cleans_broken_subscriber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RUN_TEST</name><argument_list>(<argument><expr><name>basic_psubscribe_publish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RUN_TEST</name><argument_list>(<argument><expr><name>basic_subscribe_pubsub_channels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RUN_TEST</name><argument_list>(<argument><expr><name>basic_subscribe_pubsub_numsub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RUN_TEST</name><argument_list>(<argument><expr><name>basic_subscribe_pubsub_numpat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RUN_TEST</name><argument_list>(<argument><expr><name>basic_memory_test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</unit>
