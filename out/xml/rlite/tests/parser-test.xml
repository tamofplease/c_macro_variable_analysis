<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/rlite/tests/parser-test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"greatest.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/hirlite.h"</cpp:file></cpp:include>

<function><type><name>TEST</name></type> <name>test_format_noparam</name><parameter_list>()</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>rliteClient</name></type> <name>client</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>rliteFormatCommand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>client</name></expr></argument>, <argument><expr><literal type="string">"ECHO helloworld"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><name><name>client</name><operator>.</operator><name>argc</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><name><name>client</name><operator>.</operator><name>argvlen</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>client</name><operator>.</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"ECHO"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><name><name>client</name><operator>.</operator><name>argvlen</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>client</name><operator>.</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"helloworld"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>client</name><operator>.</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>client</name><operator>.</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>client</name><operator>.</operator><name>argvlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>client</name><operator>.</operator><name>argv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PASS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>TEST</name></type> <name>test_format_sparam</name><parameter_list>()</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>rliteClient</name></type> <name>client</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>rliteFormatCommand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>client</name></expr></argument>, <argument><expr><literal type="string">"ECHO %s"</literal></expr></argument>, <argument><expr><literal type="string">"helloworld"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><name><name>client</name><operator>.</operator><name>argc</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><name><name>client</name><operator>.</operator><name>argvlen</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>client</name><operator>.</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"ECHO"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><name><name>client</name><operator>.</operator><name>argvlen</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>client</name><operator>.</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"helloworld"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>client</name><operator>.</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>client</name><operator>.</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>client</name><operator>.</operator><name>argvlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>client</name><operator>.</operator><name>argv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>TEST</name></type> <name>test_format_bparam</name><parameter_list>()</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>rliteClient</name></type> <name>client</name></decl>;</decl_stmt>
	<comment type="line">// extra 1 to test that's not being read</comment>
	<if_stmt><if>if <condition>(<expr><call><name>rliteFormatCommand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>client</name></expr></argument>, <argument><expr><literal type="string">"ECHO %b"</literal></expr></argument>, <argument><expr><literal type="string">"helloworld1"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><name><name>client</name><operator>.</operator><name>argc</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><name><name>client</name><operator>.</operator><name>argvlen</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>client</name><operator>.</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"ECHO"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><name><name>client</name><operator>.</operator><name>argvlen</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>client</name><operator>.</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"helloworld"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>client</name><operator>.</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>client</name><operator>.</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>client</name><operator>.</operator><name>argvlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>client</name><operator>.</operator><name>argv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>TEST</name></type> <name>test_format_bdparam</name><parameter_list>()</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>rliteClient</name></type> <name>client</name></decl>;</decl_stmt>
	<comment type="line">// extra 1 to test that's not being read</comment>
	<if_stmt><if>if <condition>(<expr><call><name>rliteFormatCommand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>client</name></expr></argument>, <argument><expr><literal type="string">"ECHO %b%d"</literal></expr></argument>, <argument><expr><literal type="string">"helloworld1"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><name><name>client</name><operator>.</operator><name>argc</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><name><name>client</name><operator>.</operator><name>argvlen</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>client</name><operator>.</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"ECHO"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><name><name>client</name><operator>.</operator><name>argvlen</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>client</name><operator>.</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"helloworld1"</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>client</name><operator>.</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>client</name><operator>.</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>client</name><operator>.</operator><name>argvlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>client</name><operator>.</operator><name>argv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>TEST</name></type> <name>test_format_dparam</name><parameter_list>()</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>rliteClient</name></type> <name>client</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><call><name>rliteFormatCommand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>client</name></expr></argument>, <argument><expr><literal type="string">"ECHO %d"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><name><name>client</name><operator>.</operator><name>argc</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><name><name>client</name><operator>.</operator><name>argvlen</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>client</name><operator>.</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"ECHO"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><name><name>client</name><operator>.</operator><name>argvlen</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>client</name><operator>.</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"10"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>client</name><operator>.</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>client</name><operator>.</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>client</name><operator>.</operator><name>argvlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>client</name><operator>.</operator><name>argv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>TEST</name></type> <name>test_append_sparam</name><parameter_list>()</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>rliteContext</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><call><name>rliteConnect</name><argument_list>(<argument><expr><literal type="string">":memory:"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rliteReply</name> <modifier>*</modifier></type><name>reply</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>_reply</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><call><name>rliteAppendCommand</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"ECHO %s"</literal></expr></argument>, <argument><expr><literal type="string">"helloworld"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><call><name>rliteGetReply</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_reply</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>reply</name> <operator>=</operator> <name>_reply</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>RLITE_REPLY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"helloworld"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rliteFree</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>TEST</name></type> <name>test_command_bparam</name><parameter_list>()</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>rliteContext</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><call><name>rliteConnect</name><argument_list>(<argument><expr><literal type="string">":memory:"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rliteReply</name> <modifier>*</modifier></type><name>reply</name> <init>= <expr><call><name>rliteCommand</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"ECHO %b"</literal></expr></argument>, <argument><expr><literal type="string">"helloworld"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>RLITE_REPLY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"helloworld"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rliteFree</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>TEST</name></type> <name>test_command_bdparam</name><parameter_list>()</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>rliteContext</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><call><name>rliteConnect</name><argument_list>(<argument><expr><literal type="string">":memory:"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rliteReply</name> <modifier>*</modifier></type><name>reply</name> <init>= <expr><call><name>rliteCommand</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"ECHO %b%d"</literal></expr></argument>, <argument><expr><literal type="string">"helloworld"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>RLITE_REPLY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"helloworld1"</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rliteFree</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>TEST</name></type> <name>test_command_lldparam</name><parameter_list>()</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>rliteContext</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><call><name>rliteConnect</name><argument_list>(<argument><expr><literal type="string">":memory:"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rliteReply</name> <modifier>*</modifier></type><name>reply</name> <init>= <expr><call><name>rliteCommand</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"ECHO %d"</literal></expr></argument>, <argument><expr><literal type="number">123</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>RLITE_REPLY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"123"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rliteFree</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>TEST</name></type> <name>test_hset_hmget_dparam</name><parameter_list>()</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>rliteContext</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><call><name>rliteConnect</name><argument_list>(<argument><expr><literal type="string">":memory:"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><call><name>rliteCommand</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"HSET a f1 %d"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>rliteReply</name><modifier>*</modifier></type> <name>reply</name> <init>= <expr><call><name>rliteCommand</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"HMGET a f1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>elements</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rliteFree</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>TEST</name></type> <name>test_zrange</name><parameter_list>()</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>rliteContext</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><call><name>rliteConnect</name><argument_list>(<argument><expr><literal type="string">":memory:"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><call><name>rliteCommand</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"ZRANGEBYLEX key + - LIMIT 0 30"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><call><name>rliteCommand</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"ZRANGEBYSCORE key -inf +inf"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rliteFree</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>TEST</name></type> <name>test_invalid_command</name><parameter_list>()</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>rliteContext</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><call><name>rliteConnect</name><argument_list>(<argument><expr><literal type="string">":memory:"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><call><name>rliteCommand</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"ASD ayy ayy"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rliteFree</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>TEST</name></type> <name>test_file_set_del_set</name><parameter_list>()</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><literal type="string">"user.db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>rliteContext</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><call><name>rliteConnect</name><argument_list>(<argument><expr><literal type="string">"user.db"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><call><name>rliteCommand</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"SET a b"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><call><name>rliteCommand</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"DEL a"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><call><name>rliteCommand</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"SET a b"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rliteFree</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<macro><name>SUITE</name><argument_list>(<argument>parser_test</argument>)</argument_list></macro>
<block>{<block_content>
	<expr_stmt><expr><call><name>RUN_TEST</name><argument_list>(<argument><expr><name>test_format_noparam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RUN_TEST</name><argument_list>(<argument><expr><name>test_format_sparam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RUN_TEST</name><argument_list>(<argument><expr><name>test_format_bparam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RUN_TEST</name><argument_list>(<argument><expr><name>test_format_bdparam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RUN_TEST</name><argument_list>(<argument><expr><name>test_append_sparam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RUN_TEST</name><argument_list>(<argument><expr><name>test_command_bparam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RUN_TEST</name><argument_list>(<argument><expr><name>test_command_bdparam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RUN_TEST</name><argument_list>(<argument><expr><name>test_command_lldparam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RUN_TEST</name><argument_list>(<argument><expr><name>test_hset_hmget_dparam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RUN_TEST</name><argument_list>(<argument><expr><name>test_zrange</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RUN_TEST</name><argument_list>(<argument><expr><name>test_invalid_command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RUN_TEST</name><argument_list>(<argument><expr><name>test_file_set_del_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</unit>
