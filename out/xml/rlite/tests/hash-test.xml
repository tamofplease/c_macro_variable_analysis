<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/rlite/tests/hash-test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/hirlite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util.h"</cpp:file></cpp:include>

<function><type><name>TEST</name></type> <name>test_hset</name><parameter_list>()</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>rliteContext</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><call><name>rliteConnect</name><argument_list>(<argument><expr><literal type="string">":memory:"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>rliteReply</name><modifier>*</modifier></type> <name>reply</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"hset"</literal></expr>, <expr><literal type="string">"mykey"</literal></expr>, <expr><literal type="string">"myfield"</literal></expr>, <expr><literal type="string">"mydata"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name><name>argvlen</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXPECT_REPLY_INTEGER</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXPECT_REPLY_INTEGER</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>rliteFree</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PASS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>TEST</name></type> <name>test_hsetnx</name><parameter_list>()</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>rliteContext</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><call><name>rliteConnect</name><argument_list>(<argument><expr><literal type="string">":memory:"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>rliteReply</name><modifier>*</modifier></type> <name>reply</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"hsetnx"</literal></expr>, <expr><literal type="string">"mykey"</literal></expr>, <expr><literal type="string">"myfield"</literal></expr>, <expr><literal type="string">"mydata"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name><name>argvlen</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXPECT_REPLY_INTEGER</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv2</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"hsetnx"</literal></expr>, <expr><literal type="string">"mykey"</literal></expr>, <expr><literal type="string">"myfield"</literal></expr>, <expr><literal type="string">"mydata2"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv2</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv2</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXPECT_REPLY_INTEGER</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv3</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"hget"</literal></expr>, <expr><literal type="string">"mykey"</literal></expr>, <expr><literal type="string">"myfield"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv3</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv3</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXPECT_REPLY_STR</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><literal type="string">"mydata"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>rliteFree</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PASS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>TEST</name></type> <name>test_hget</name><parameter_list>()</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>rliteContext</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><call><name>rliteConnect</name><argument_list>(<argument><expr><literal type="string">":memory:"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>rliteReply</name><modifier>*</modifier></type> <name>reply</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"hset"</literal></expr>, <expr><literal type="string">"mykey"</literal></expr>, <expr><literal type="string">"myfield"</literal></expr>, <expr><literal type="string">"mydata"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name><name>argvlen</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXPECT_REPLY_INTEGER</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv2</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"hget"</literal></expr>, <expr><literal type="string">"mykey"</literal></expr>, <expr><literal type="string">"myfield"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv2</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv2</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXPECT_REPLY_STR</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><literal type="string">"mydata"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv3</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"hget"</literal></expr>, <expr><literal type="string">"mykey"</literal></expr>, <expr><literal type="string">"non existing field"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv3</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv3</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXPECT_REPLY_NIL</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>rliteFree</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PASS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>TEST</name></type> <name>test_hexists</name><parameter_list>()</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>rliteContext</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><call><name>rliteConnect</name><argument_list>(<argument><expr><literal type="string">":memory:"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>rliteReply</name><modifier>*</modifier></type> <name>reply</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"hset"</literal></expr>, <expr><literal type="string">"mykey"</literal></expr>, <expr><literal type="string">"myfield"</literal></expr>, <expr><literal type="string">"mydata"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name><name>argvlen</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXPECT_REPLY_INTEGER</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv2</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"hexists"</literal></expr>, <expr><literal type="string">"mykey"</literal></expr>, <expr><literal type="string">"myfield"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv2</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv2</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXPECT_REPLY_INTEGER</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv3</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"hexists"</literal></expr>, <expr><literal type="string">"mykey"</literal></expr>, <expr><literal type="string">"non existing field"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv3</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv3</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXPECT_REPLY_INTEGER</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>rliteFree</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PASS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>TEST</name></type> <name>test_hdel</name><parameter_list>()</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>rliteContext</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><call><name>rliteConnect</name><argument_list>(<argument><expr><literal type="string">":memory:"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>rliteReply</name><modifier>*</modifier></type> <name>reply</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"hset"</literal></expr>, <expr><literal type="string">"mykey"</literal></expr>, <expr><literal type="string">"myfield"</literal></expr>, <expr><literal type="string">"mydata"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name><name>argvlen</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXPECT_REPLY_NO_ERROR</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv2</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"hset"</literal></expr>, <expr><literal type="string">"mykey"</literal></expr>, <expr><literal type="string">"myfield2"</literal></expr>, <expr><literal type="string">"mydata2"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv2</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv2</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXPECT_REPLY_NO_ERROR</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv3</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"hdel"</literal></expr>, <expr><literal type="string">"mykey"</literal></expr>, <expr><literal type="string">"myfield"</literal></expr>, <expr><literal type="string">"nonexistentfield"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv3</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv3</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXPECT_REPLY_INTEGER</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv4</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"hexists"</literal></expr>, <expr><literal type="string">"mykey"</literal></expr>, <expr><literal type="string">"myfield"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv4</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv4</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXPECT_REPLY_INTEGER</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv5</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"hexists"</literal></expr>, <expr><literal type="string">"mykey"</literal></expr>, <expr><literal type="string">"myfield2"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv5</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv5</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXPECT_REPLY_INTEGER</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>rliteFree</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PASS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>TEST</name></type> <name>test_hlen</name><parameter_list>()</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>rliteContext</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><call><name>rliteConnect</name><argument_list>(<argument><expr><literal type="string">":memory:"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>rliteReply</name><modifier>*</modifier></type> <name>reply</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"hset"</literal></expr>, <expr><literal type="string">"mykey"</literal></expr>, <expr><literal type="string">"myfield"</literal></expr>, <expr><literal type="string">"mydata"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name><name>argvlen</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXPECT_REPLY_NO_ERROR</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv2</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"hlen"</literal></expr>, <expr><literal type="string">"mykey"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv2</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv2</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXPECT_REPLY_INTEGER</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv3</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"hset"</literal></expr>, <expr><literal type="string">"mykey"</literal></expr>, <expr><literal type="string">"myfield2"</literal></expr>, <expr><literal type="string">"mydata2"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv3</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv3</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXPECT_REPLY_NO_ERROR</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv4</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"hlen"</literal></expr>, <expr><literal type="string">"mykey"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv4</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv4</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXPECT_REPLY_INTEGER</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv5</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"hdel"</literal></expr>, <expr><literal type="string">"mykey"</literal></expr>, <expr><literal type="string">"myfield"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv5</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv5</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXPECT_REPLY_INTEGER</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv6</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"hlen"</literal></expr>, <expr><literal type="string">"mykey"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv6</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv6</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXPECT_REPLY_INTEGER</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>rliteFree</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PASS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>TEST</name></type> <name>test_hmset</name><parameter_list>()</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>rliteContext</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><call><name>rliteConnect</name><argument_list>(<argument><expr><literal type="string">":memory:"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>rliteReply</name><modifier>*</modifier></type> <name>reply</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name><name>argvlen</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"hmset"</literal></expr>, <expr><literal type="string">"mykey"</literal></expr>, <expr><literal type="string">"myfield"</literal></expr>, <expr><literal type="string">"mydata"</literal></expr>, <expr><literal type="string">"myfield2"</literal></expr>, <expr><literal type="string">"mydata2"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXPECT_REPLY_STATUS</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><literal type="string">"OK"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv2</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"hlen"</literal></expr>, <expr><literal type="string">"mykey"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv2</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv2</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXPECT_REPLY_INTEGER</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv3</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"hmset"</literal></expr>, <expr><literal type="string">"mykey"</literal></expr>, <expr><literal type="string">"myfield3"</literal></expr>, <expr><literal type="string">"mydata3"</literal></expr>, <expr><literal type="string">"field2"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv3</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv3</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXPECT_REPLY_ERROR</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv4</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"hget"</literal></expr>, <expr><literal type="string">"mykey"</literal></expr>, <expr><literal type="string">"myfield"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv4</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv4</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXPECT_REPLY_STR</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><literal type="string">"mydata"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>rliteFree</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PASS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>TEST</name></type> <name>test_hincrby</name><parameter_list>()</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>rliteContext</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><call><name>rliteConnect</name><argument_list>(<argument><expr><literal type="string">":memory:"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>rliteReply</name><modifier>*</modifier></type> <name>reply</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name><name>argvlen</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"hincrby"</literal></expr>, <expr><literal type="string">"mykey"</literal></expr>, <expr><literal type="string">"myfield"</literal></expr>, <expr><literal type="string">"123"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXPECT_REPLY_INTEGER</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv2</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"hincrby"</literal></expr>, <expr><literal type="string">"mykey"</literal></expr>, <expr><literal type="string">"myfield"</literal></expr>, <expr><literal type="string">"345"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv2</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv2</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXPECT_REPLY_INTEGER</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><literal type="number">468</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv3</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"hincrby"</literal></expr>, <expr><literal type="string">"mykey"</literal></expr>, <expr><literal type="string">"myfield"</literal></expr>, <expr><literal type="string">"not a number"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv3</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv3</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXPECT_REPLY_ERROR</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv4</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"hset"</literal></expr>, <expr><literal type="string">"mykey"</literal></expr>, <expr><literal type="string">"myfield"</literal></expr>, <expr><literal type="string">"not a number"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv4</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv4</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXPECT_REPLY_NO_ERROR</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv5</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"hincrby"</literal></expr>, <expr><literal type="string">"mykey"</literal></expr>, <expr><literal type="string">"myfield"</literal></expr>, <expr><literal type="string">"1"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv5</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv5</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXPECT_REPLY_ERROR</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>rliteFree</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PASS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>TEST</name></type> <name>test_hincrbyfloat</name><parameter_list>()</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>rliteContext</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><call><name>rliteConnect</name><argument_list>(<argument><expr><literal type="string">":memory:"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>rliteReply</name><modifier>*</modifier></type> <name>reply</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name><name>argvlen</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"hincrbyfloat"</literal></expr>, <expr><literal type="string">"mykey"</literal></expr>, <expr><literal type="string">"myfield"</literal></expr>, <expr><literal type="string">"123.4"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>RLITE_REPLY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"123.4"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv2</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"hincrbyfloat"</literal></expr>, <expr><literal type="string">"mykey"</literal></expr>, <expr><literal type="string">"myfield"</literal></expr>, <expr><literal type="string">"345.7"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv2</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv2</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>RLITE_REPLY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"469.1"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv3</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"hincrbyfloat"</literal></expr>, <expr><literal type="string">"mykey"</literal></expr>, <expr><literal type="string">"myfield"</literal></expr>, <expr><literal type="string">"not a number"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv3</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv3</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXPECT_REPLY_ERROR</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv4</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"hset"</literal></expr>, <expr><literal type="string">"mykey"</literal></expr>, <expr><literal type="string">"myfield"</literal></expr>, <expr><literal type="string">"not a number"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv4</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv4</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXPECT_REPLY_NO_ERROR</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv5</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"hincrbyfloat"</literal></expr>, <expr><literal type="string">"mykey"</literal></expr>, <expr><literal type="string">"myfield"</literal></expr>, <expr><literal type="string">"1.2"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv5</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv5</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXPECT_REPLY_ERROR</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>rliteFree</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PASS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>TEST</name></type> <name>test_hgetall</name><parameter_list>()</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>rliteContext</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><call><name>rliteConnect</name><argument_list>(<argument><expr><literal type="string">":memory:"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>rliteReply</name><modifier>*</modifier></type> <name>reply</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name><name>argvlen</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"hgetall"</literal></expr>, <expr><literal type="string">"mykey"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXPECT_REPLY_LEN</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv2</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"hmset"</literal></expr>, <expr><literal type="string">"mykey"</literal></expr>, <expr><literal type="string">"myfield"</literal></expr>, <expr><literal type="string">"mydata"</literal></expr>, <expr><literal type="string">"myfield2"</literal></expr>, <expr><literal type="string">"mydata2"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv2</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv2</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>RLITE_REPLY_STATUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv3</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"hgetall"</literal></expr>, <expr><literal type="string">"mykey"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv3</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv3</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXPECT_REPLY_LEN</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>reply</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>!=</operator> <name>RLITE_REPLY_STRING</name> <operator>||</operator> <name><name>reply</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>!=</operator> <name>RLITE_REPLY_STRING</name> <operator>||</operator>
			 <name><name>reply</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>!=</operator> <name>RLITE_REPLY_STRING</name> <operator>||</operator> <name><name>reply</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>!=</operator> <name>RLITE_REPLY_STRING</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Expected reply-&gt;element[i] to be STRING, got %d,%d,%d,%d instead on line %d\n"</literal></expr></argument>,
				<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name></expr></argument>,
				<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name></expr></argument>,
				<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name></expr></argument>,
				<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name></expr></argument>,
				<argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>EXPECT_REPLY_STR</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"myfield"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXPECT_REPLY_STR</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"mydata"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXPECT_REPLY_STR</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"myfield2"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXPECT_REPLY_STR</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"mydata2"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>rliteFree</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PASS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>TEST</name></type> <name>test_hkeys</name><parameter_list>()</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>rliteContext</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><call><name>rliteConnect</name><argument_list>(<argument><expr><literal type="string">":memory:"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>rliteReply</name><modifier>*</modifier></type> <name>reply</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name><name>argvlen</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"hkeys"</literal></expr>, <expr><literal type="string">"mykey"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXPECT_REPLY_LEN</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv2</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"hmset"</literal></expr>, <expr><literal type="string">"mykey"</literal></expr>, <expr><literal type="string">"myfield"</literal></expr>, <expr><literal type="string">"mydata"</literal></expr>, <expr><literal type="string">"myfield2"</literal></expr>, <expr><literal type="string">"mydata2"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv2</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv2</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>RLITE_REPLY_STATUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv3</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"hkeys"</literal></expr>, <expr><literal type="string">"mykey"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv3</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv3</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXPECT_REPLY_LEN</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>reply</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>!=</operator> <name>RLITE_REPLY_STRING</name> <operator>||</operator> <name><name>reply</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>!=</operator> <name>RLITE_REPLY_STRING</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Expected reply-&gt;element[i] to be STRING, got %d,%d instead on line %d\n"</literal></expr></argument>,
				<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name></expr></argument>,
				<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name></expr></argument>,
				<argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>EXPECT_REPLY_STR</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"myfield"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXPECT_REPLY_STR</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"myfield2"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>rliteFree</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PASS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>TEST</name></type> <name>test_hvals</name><parameter_list>()</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>rliteContext</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><call><name>rliteConnect</name><argument_list>(<argument><expr><literal type="string">":memory:"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>rliteReply</name><modifier>*</modifier></type> <name>reply</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name><name>argvlen</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"hvals"</literal></expr>, <expr><literal type="string">"mykey"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXPECT_REPLY_LEN</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv2</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"hmset"</literal></expr>, <expr><literal type="string">"mykey"</literal></expr>, <expr><literal type="string">"myfield"</literal></expr>, <expr><literal type="string">"mydata"</literal></expr>, <expr><literal type="string">"myfield2"</literal></expr>, <expr><literal type="string">"mydata2"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv2</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv2</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>RLITE_REPLY_STATUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv3</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"hvals"</literal></expr>, <expr><literal type="string">"mykey"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv3</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv3</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXPECT_REPLY_LEN</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>reply</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>!=</operator> <name>RLITE_REPLY_STRING</name> <operator>||</operator> <name><name>reply</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>!=</operator> <name>RLITE_REPLY_STRING</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Expected reply-&gt;element[i] to be STRING, got %d,%d instead on line %d\n"</literal></expr></argument>,
				<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name></expr></argument>,
				<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name></expr></argument>,
				<argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>EXPECT_REPLY_STR</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"mydata"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXPECT_REPLY_STR</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"mydata2"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>rliteFree</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PASS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>TEST</name></type> <name>test_hmget</name><parameter_list>()</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>rliteContext</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><call><name>rliteConnect</name><argument_list>(<argument><expr><literal type="string">":memory:"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>rliteReply</name><modifier>*</modifier></type> <name>reply</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name><name>argvlen</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv2</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"hmset"</literal></expr>, <expr><literal type="string">"mykey"</literal></expr>, <expr><literal type="string">"myfield"</literal></expr>, <expr><literal type="string">"mydata"</literal></expr>, <expr><literal type="string">"myfield2"</literal></expr>, <expr><literal type="string">"mydata2"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv2</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv2</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>RLITE_REPLY_STATUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv3</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"hmget"</literal></expr>, <expr><literal type="string">"mykey2"</literal></expr>, <expr><literal type="string">"myfield"</literal></expr>, <expr><literal type="string">"myfield2"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv3</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv3</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXPECT_REPLY_LEN</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name></expr></argument>, <argument><expr><name>RLITE_REPLY_NIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name></expr></argument>, <argument><expr><name>RLITE_REPLY_NIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv4</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"hmget"</literal></expr>, <expr><literal type="string">"mykey"</literal></expr>, <expr><literal type="string">"myfield"</literal></expr>, <expr><literal type="string">"nofield"</literal></expr>, <expr><literal type="string">"myfield2"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv4</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv4</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXPECT_REPLY_LEN</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>reply</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>!=</operator> <name>RLITE_REPLY_STRING</name> <operator>||</operator> <name><name>reply</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>!=</operator> <name>RLITE_REPLY_STRING</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Expected reply-&gt;element[i] to be STRING, got %d,%d instead on line %d\n"</literal></expr></argument>,
				<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name></expr></argument>,
				<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name></expr></argument>,
				<argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>type</name></expr></argument>, <argument><expr><name>RLITE_REPLY_NIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXPECT_REPLY_STR</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"mydata"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXPECT_REPLY_STR</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"mydata2"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>rliteFree</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PASS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>SUITE</name><argument_list>(<argument>hash_test</argument>)</argument_list></macro>
<block>{<block_content>
	<expr_stmt><expr><call><name>RUN_TEST</name><argument_list>(<argument><expr><name>test_hset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RUN_TEST</name><argument_list>(<argument><expr><name>test_hsetnx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RUN_TEST</name><argument_list>(<argument><expr><name>test_hget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RUN_TEST</name><argument_list>(<argument><expr><name>test_hexists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RUN_TEST</name><argument_list>(<argument><expr><name>test_hdel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RUN_TEST</name><argument_list>(<argument><expr><name>test_hlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RUN_TEST</name><argument_list>(<argument><expr><name>test_hmset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RUN_TEST</name><argument_list>(<argument><expr><name>test_hincrby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RUN_TEST</name><argument_list>(<argument><expr><name>test_hincrbyfloat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RUN_TEST</name><argument_list>(<argument><expr><name>test_hgetall</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RUN_TEST</name><argument_list>(<argument><expr><name>test_hkeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RUN_TEST</name><argument_list>(<argument><expr><name>test_hvals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RUN_TEST</name><argument_list>(<argument><expr><name>test_hmget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</unit>
