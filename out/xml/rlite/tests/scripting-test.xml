<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/rlite/tests/scripting-test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/hirlite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util.h"</cpp:file></cpp:include>

<function><type><name>TEST</name></type> <name>test_types</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>rliteContext</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><call><name>rliteConnect</name><argument_list>(<argument><expr><literal type="string">":memory:"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>rliteReply</name><modifier>*</modifier></type> <name>reply</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name><name>argvlen</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>

	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"eval"</literal></expr>, <expr><literal type="string">"return 1"</literal></expr>, <expr><literal type="string">"0"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>EXPECT_REPLY_INTEGER</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"eval"</literal></expr>, <expr><literal type="string">"return '1'"</literal></expr>, <expr><literal type="string">"0"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>EXPECT_REPLY_STR</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"eval"</literal></expr>, <expr><literal type="string">"return true"</literal></expr>, <expr><literal type="string">"0"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>EXPECT_REPLY_INTEGER</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"eval"</literal></expr>, <expr><literal type="string">"return false"</literal></expr>, <expr><literal type="string">"0"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>EXPECT_REPLY_NIL</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"eval"</literal></expr>, <expr><literal type="string">"return {err='bad'}"</literal></expr>, <expr><literal type="string">"0"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>EXPECT_REPLY_ERROR_STR</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><literal type="string">"bad"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"eval"</literal></expr>, <expr><literal type="string">"return {ok='good'}"</literal></expr>, <expr><literal type="string">"0"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>EXPECT_REPLY_STATUS</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><literal type="string">"good"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"eval"</literal></expr>, <expr><literal type="string">"return {'ok','err'}"</literal></expr>, <expr><literal type="string">"0"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>EXPECT_REPLY_LEN</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>EXPECT_REPLY_STR</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"ok"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>EXPECT_REPLY_STR</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"err"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>rliteFree</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PASS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>TEST</name></type> <name>test_call_ok</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>rliteContext</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><call><name>rliteConnect</name><argument_list>(<argument><expr><literal type="string">":memory:"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>rliteReply</name><modifier>*</modifier></type> <name>reply</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name><name>argvlen</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>

	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"set"</literal></expr>, <expr><literal type="string">"key"</literal></expr>, <expr><literal type="string">"value"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>EXPECT_REPLY_STATUS</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><literal type="string">"OK"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"eval"</literal></expr>, <expr><literal type="string">"return redis.call('get', 'key')"</literal></expr>, <expr><literal type="string">"0"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>EXPECT_REPLY_STR</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><literal type="string">"value"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"eval"</literal></expr>, <expr><literal type="string">"return redis.call('get', KEYS[1])"</literal></expr>, <expr><literal type="string">"1"</literal></expr>, <expr><literal type="string">"key"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>EXPECT_REPLY_STR</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><literal type="string">"value"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"eval"</literal></expr>, <expr><literal type="string">"return redis.call('ping', ARGV[1])"</literal></expr>, <expr><literal type="string">"0"</literal></expr>, <expr><literal type="string">"value"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>EXPECT_REPLY_STATUS</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><literal type="string">"value"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"eval"</literal></expr>, <expr><literal type="string">"return redis.call('rpush', KEYS[1], ARGV[1], ARGV[2]) == 2"</literal></expr>, <expr><literal type="string">"1"</literal></expr>, <expr><literal type="string">"list"</literal></expr>, <expr><literal type="string">"1"</literal></expr>, <expr><literal type="string">"2"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>EXPECT_REPLY_INTEGER</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"eval"</literal></expr>, <expr><literal type="string">"return redis.call('set', KEYS[1], ARGV[1])['ok'] == 'OK'"</literal></expr>, <expr><literal type="string">"1"</literal></expr>, <expr><literal type="string">"string"</literal></expr>, <expr><literal type="string">"1"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>EXPECT_REPLY_INTEGER</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"eval"</literal></expr>,
			<expr><literal type="string">"local items = redis.call('lrange', KEYS[1], '0', '-1')\n"</literal>
			<literal type="string">"for i=1,#items do\n"</literal>
			<literal type="string">"if items[i] ~= string.format('%d', i) then\n"</literal>
				<literal type="string">"return {err=string.format('Element value is not what expected at position %d, got %s', i, items[i])}\n"</literal>
			<literal type="string">"end\n"</literal>
			<literal type="string">"if i &gt; 2 then\n"</literal>
				<literal type="string">"return {err='More than two elements'}\n"</literal>
			<literal type="string">"end\n"</literal>
			<literal type="string">"end\n"</literal>
			<literal type="string">"return 0\n"</literal>
			<literal type="string">""</literal></expr>, <expr><literal type="string">"1"</literal></expr>, <expr><literal type="string">"list"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>EXPECT_REPLY_INTEGER</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"type"</literal></expr>, <expr><literal type="string">"list"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>EXPECT_REPLY_STR</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><literal type="string">"list"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>rliteFree</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PASS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>TEST</name></type> <name>test_call_err</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>rliteContext</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><call><name>rliteConnect</name><argument_list>(<argument><expr><literal type="string">":memory:"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>rliteReply</name><modifier>*</modifier></type> <name>reply</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name><name>argvlen</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"lpush"</literal></expr>, <expr><literal type="string">"list"</literal></expr>, <expr><literal type="string">"1"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>EXPECT_REPLY_INTEGER</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"eval"</literal></expr>, <expr><literal type="string">"return redis.call('get', KEYS[1])['err']"</literal></expr>, <expr><literal type="string">"1"</literal></expr>, <expr><literal type="string">"list"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>EXPECT_REPLY_ERROR</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"eval"</literal></expr>, <expr><literal type="string">"return redis.pcall('get', KEYS[1])['err']"</literal></expr>, <expr><literal type="string">"1"</literal></expr>, <expr><literal type="string">"list"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>EXPECT_REPLY_STR</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><literal type="string">"WRONGTYPE Operation against a key holding the wrong kind of value"</literal></expr></argument>, <argument><expr><literal type="number">65</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"eval"</literal></expr>, <expr><literal type="string">"return {err='bad code'}"</literal></expr>, <expr><literal type="string">"0"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>EXPECT_REPLY_ERROR_STR</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><literal type="string">"bad code"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>rliteFree</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PASS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>TEST</name></type> <name>test_script_evalsha</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>rliteContext</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><call><name>rliteConnect</name><argument_list>(<argument><expr><literal type="string">":memory:"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sha</name> <init>= <expr><literal type="string">"30dc9ef2a8d563dced9a243ecd0cc449c2ea0144"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>invalidSha</name> <init>= <expr><literal type="string">"30dc9ef2a8d563dced9a243ecd0cc449c2ea0145"</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>rliteReply</name><modifier>*</modifier></type> <name>reply</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name><name>argvlen</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"script"</literal></expr>, <expr><literal type="string">"load"</literal></expr>, <expr><literal type="string">"return 123"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>EXPECT_REPLY_STR</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><name>sha</name></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"evalsha"</literal></expr>, <expr><name>sha</name></expr>, <expr><literal type="string">"0"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>EXPECT_REPLY_INTEGER</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"evalsha"</literal></expr>, <expr><name>invalidSha</name></expr>, <expr><literal type="string">"0"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>EXPECT_REPLY_ERROR</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>rliteFree</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PASS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>TEST</name></type> <name>test_multi</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>rliteContext</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><call><name>rliteConnect</name><argument_list>(<argument><expr><literal type="string">":memory:"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>rliteReply</name><modifier>*</modifier></type> <name>reply</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name><name>argvlen</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"MULTI"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>EXPECT_REPLY_STATUS</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><literal type="string">"OK"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"eval"</literal></expr>, <expr><literal type="string">"return {redis.call('incrby', 'key', 123), redis.call('incrby', 'key', 456)}"</literal></expr>, <expr><literal type="string">"0"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>EXPECT_REPLY_STATUS</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><literal type="string">"QUEUED"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"EXEC"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>EXPECT_REPLY_LEN</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>EXPECT_REPLY_LEN</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>EXPECT_REPLY_INTEGER</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>element</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>EXPECT_REPLY_INTEGER</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>element</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>element</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">579</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>rliteFree</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PASS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>SUITE</name><argument_list>(<argument>scripting_test</argument>)</argument_list></macro>
<block>{<block_content>
	<expr_stmt><expr><call><name>RUN_TEST</name><argument_list>(<argument><expr><name>test_types</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RUN_TEST</name><argument_list>(<argument><expr><name>test_call_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RUN_TEST</name><argument_list>(<argument><expr><name>test_call_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RUN_TEST</name><argument_list>(<argument><expr><name>test_script_evalsha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RUN_TEST</name><argument_list>(<argument><expr><name>test_multi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</unit>
