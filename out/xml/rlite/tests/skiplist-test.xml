<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/rlite/tests/skiplist-test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../src/rlite/rlite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../src/rlite/page_skiplist.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../src/rlite/page_multi_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_SIZE</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>

<function><type><name>TEST</name></type> <name>basic_skiplist_test</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>commit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>setup_db</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><name>commit</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>rl_skiplist</name> <modifier>*</modifier></type><name>skiplist</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_skiplist_create</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skiplist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>skiplist_page</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>next_empty_page</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_write</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_data_type_skiplist</name></expr></argument>, <argument><expr><name>skiplist_page</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TEST_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_skiplist_add</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><name>skiplist_page</name></expr></argument>, <argument><expr><literal type="number">5.2</literal> <operator>*</operator> <name>i</name> <operator>*</operator> <name>sign</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_skiplist_is_balanced</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>commit</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_commit</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_data_type_skiplist</name></expr></argument>, <argument><expr><name>skiplist_page</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>skiplist</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PASS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>TEST</name></type> <name>basic_skiplist_first_node_test</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>setup_db</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>rl_skiplist</name> <modifier>*</modifier></type><name>skiplist</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_skiplist_node</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>rank</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_skiplist_create</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skiplist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>skiplist_page</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>next_empty_page</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_write</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_data_type_skiplist</name></expr></argument>, <argument><expr><name>skiplist_page</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data2</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_skiplist_add</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><name>skiplist_page</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_skiplist_is_balanced</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_skiplist_first_node</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><ternary><condition><expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1.5</literal></expr> </then><else>: <expr><literal type="number">2.0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>RL_SKIPLIST_INCLUDE_SCORE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>EXPECT_DOUBLE</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>score</name></name></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>EXPECT_LONG</name><argument_list>(<argument><expr><name>rank</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_multi_string_get</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>EXPECT_LONG</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>EXPECT_INT</name><argument_list>(<argument><expr><name><name>data2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>data2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_skiplist_first_node</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>, <argument><expr><name>RL_SKIPLIST_EXCLUDE_SCORE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXPECT_DOUBLE</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>score</name></name></expr></argument>, <argument><expr><literal type="number">3.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXPECT_LONG</name><argument_list>(<argument><expr><name>rank</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_skiplist_first_node</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>, <argument><expr><name>RL_SKIPLIST_BEFORE_SCORE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXPECT_DOUBLE</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>score</name></name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXPECT_LONG</name><argument_list>(<argument><expr><name>rank</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_skiplist_first_node</name></expr></argument>, <argument><expr><name>RL_NOT_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><literal type="number">20.0</literal></expr></argument>, <argument><expr><name>RL_SKIPLIST_INCLUDE_SCORE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PASS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>TEST</name></type> <name>basic_skiplist_delete_node_test</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>commit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>setup_db</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>rl_skiplist</name> <modifier>*</modifier></type><name>skiplist</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_skiplist_create</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skiplist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>skiplist_page</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>next_empty_page</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_write</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_data_type_skiplist</name></expr></argument>, <argument><expr><name>skiplist_page</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name><name>data</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		<comment type="line">// using i / 2 to have some score collisions because i is int</comment>
		<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_skiplist_add</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><name>skiplist_page</name></expr></argument>, <argument><expr><name>i</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_skiplist_is_balanced</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>commit</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_commit</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_data_type_skiplist</name></expr></argument>, <argument><expr><name>skiplist_page</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>skiplist</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL2_VERBOSE</name><argument_list>(<argument><expr><name>rl_skiplist_delete</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>RL_DELETED</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><name>skiplist_page</name></expr></argument>, <argument><expr><name>i</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>!=</operator> <name>RL_DELETED</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_skiplist_is_balanced</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>commit</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_commit</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_data_type_skiplist</name></expr></argument>, <argument><expr><name>skiplist_page</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>skiplist</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>rl_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PASS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>TEST</name></type> <name>basic_skiplist_node_by_rank</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>setup_db</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>rl_skiplist</name> <modifier>*</modifier></type><name>skiplist</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_skiplist_node</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_skiplist_create</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skiplist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>skiplist_page</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>next_empty_page</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_write</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_data_type_skiplist</name></expr></argument>, <argument><expr><name>skiplist_page</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TEST_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_skiplist_add</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><name>skiplist_page</name></expr></argument>, <argument><expr><literal type="number">5.2</literal> <operator>*</operator> <name>i</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TEST_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_skiplist_node_by_rank</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<macro><name>EXPECT_DOUBLE</name><argument_list>(<argument>node-&gt;score</argument>, <argument><literal type="number">5.2</literal> * i</argument>)</argument_list></macro>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PASS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>TEST</name></type> <name>basic_skiplist_iterator_test</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>commit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>setup_db</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>rl_skiplist_iterator</name> <modifier>*</modifier></type><name>iterator</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_skiplist</name> <modifier>*</modifier></type><name>skiplist</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rl_skiplist_node</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_skiplist_create</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skiplist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>skiplist_page</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>next_empty_page</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_write</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_data_type_skiplist</name></expr></argument>, <argument><expr><name>skiplist_page</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>cmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TEST_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_skiplist_add</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><name>skiplist_page</name></expr></argument>, <argument><expr><literal type="number">5.2</literal> <operator>*</operator> <name>i</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_skiplist_iterator_create</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iterator</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>long</name></type> <name>random_node</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>retval</name> <operator>=</operator> <call><name>rl_skiplist_iterator_next</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>TEST_SIZE</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>random_node</name> <operator>=</operator> <name><name>iterator</name><operator>-&gt;</operator><name>node_page</name></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>EXPECT_DOUBLE</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>score</name></name></expr></argument>, <argument><expr><literal type="number">5.2</literal> <operator>*</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_multi_string_cmp_str</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>EXPECT_INT</name><argument_list>(<argument><expr><name>cmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>EXPECT_INT</name><argument_list>(<argument><expr><name>retval</name></expr></argument>, <argument><expr><name>RL_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXPECT_LONG</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>TEST_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_skiplist_iterator_create</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iterator</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>i</name> <operator>=</operator> <name>TEST_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>retval</name> <operator>=</operator> <call><name>rl_skiplist_iterator_next</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>EXPECT_DOUBLE</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>score</name></name></expr></argument>, <argument><expr><literal type="number">5.2</literal> <operator>*</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_multi_string_cmp_str</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>EXPECT_INT</name><argument_list>(<argument><expr><name>cmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>EXPECT_INT</name><argument_list>(<argument><expr><name>retval</name></expr></argument>, <argument><expr><name>RL_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXPECT_LONG</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_skiplist_iterator_create</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iterator</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>i</name> <operator>=</operator> <name>TEST_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>retval</name> <operator>=</operator> <call><name>rl_skiplist_iterator_next</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>EXPECT_DOUBLE</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>score</name></name></expr></argument>, <argument><expr><literal type="number">5.2</literal> <operator>*</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_multi_string_cmp_str</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>EXPECT_INT</name><argument_list>(<argument><expr><name>cmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>EXPECT_INT</name><argument_list>(<argument><expr><name>retval</name></expr></argument>, <argument><expr><name>RL_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXPECT_LONG</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>TEST_SIZE</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_skiplist_iterator_create</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iterator</name></expr></argument>, <argument><expr><name>skiplist</name></expr></argument>, <argument><expr><name>random_node</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>i</name> <operator>=</operator> <name>TEST_SIZE</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>retval</name> <operator>=</operator> <call><name>rl_skiplist_iterator_next</name><argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>EXPECT_DOUBLE</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>score</name></name></expr></argument>, <argument><expr><literal type="number">5.2</literal> <operator>*</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_multi_string_cmp_str</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>EXPECT_INT</name><argument_list>(<argument><expr><name>cmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>EXPECT_INT</name><argument_list>(<argument><expr><name>retval</name></expr></argument>, <argument><expr><name>RL_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXPECT_LONG</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>TEST_SIZE</name> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PASS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>SUITE</name><argument_list>(<argument>skiplist_test</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>RUN_TESTp</name><argument_list>(<argument><expr><name>basic_skiplist_test</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>RUN_TEST</name><argument_list>(<argument><expr><name>basic_skiplist_first_node_test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>RUN_TEST1</name><argument_list>(<argument><expr><name>basic_skiplist_delete_node_test</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RUN_TEST1</name><argument_list>(<argument><expr><name>basic_skiplist_iterator_test</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>RUN_TEST</name><argument_list>(<argument><expr><name>basic_skiplist_node_by_rank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</unit>
