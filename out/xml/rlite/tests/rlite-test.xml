<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/rlite/tests/rlite-test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../src/rlite/rlite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/util.h"</cpp:file></cpp:include>

<function><type><name>TEST</name></type> <name>test_rlite_page_cache</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rlite</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>driver_type</name></name> <operator>=</operator> <name>RL_MEMORY_DRIVER</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>write_pages_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>read_pages</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rl_page</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>read_pages_len</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>read_pages_alloc</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>read_pages</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rl_page</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>read_pages</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>page_number</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>read_pages</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>=</operator> <operator>&amp;</operator><name>rl_data_type_header</name></expr>;</expr_stmt>
		<comment type="line">// not a real life scenario, we just need any pointer</comment>
		<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>read_pages</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>obj</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>read_pages</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_read</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rl_data_type_header</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>obj</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<macro><name>EXPECT_PTR</name><argument_list>(<argument>obj</argument>, <argument>db-&gt;read_pages[i]</argument>)</argument_list></macro>
	</block_content>}</block></for>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>read_pages</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>read_pages</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_free</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PASS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>TEST</name></type> <name>test_has_key</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filepath</name> <init>= <expr><literal type="string">"rlite-test.rld"</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>access</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><name>F_OK</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_open</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>filepath</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><name>RLITE_OPEN_CREATE</name> <operator>|</operator> <name>RLITE_OPEN_READWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>type</name> <init>= <expr><literal type="char">'C'</literal></expr></init></decl>, <decl><type ref="prev"/><name>type2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"random key"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>keylen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>value</name> <init>= <expr><literal type="number">529</literal></expr></init></decl>, <decl><type ref="prev"/><name>value2</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_key_get</name></expr></argument>, <argument><expr><name>RL_NOT_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_key_set</name></expr></argument>, <argument><expr><name>RL_OK</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RL_CALL_VERBOSE</name><argument_list>(<argument><expr><name>rl_key_get</name></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXPECT_LONG</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>value2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EXPECT_INT</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>type2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rl_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PASS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>RL_DEBUG</name></cpp:ifdef>
<function><type><name>TEST</name></type> <name>rl_open_oom</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rlite</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>test_mode</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>test_mode_counter</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>rl_open</name><argument_list>(<argument><expr><ternary><condition><expr><name>j</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">":memory:"</literal></expr> </then><else>: <expr><literal type="string">"rlite-test.rld"</literal></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><name>RLITE_OPEN_CREATE</name> <operator>|</operator> <name>RLITE_OPEN_READWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>RL_OK</name></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"No OOM triggered\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>test_mode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>FAIL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><call><name>rl_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>EXPECT_INT</name><argument_list>(<argument><expr><name>retval</name></expr></argument>, <argument><expr><name>RL_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></for>
	<expr_stmt><expr><name>test_mode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PASS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>SUITE</name><argument_list>(<argument>rlite_test</argument>)</argument_list></macro>
<block>{<block_content>
	<expr_stmt><expr><call><name>RUN_TEST</name><argument_list>(<argument><expr><name>test_rlite_page_cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RUN_TEST</name><argument_list>(<argument><expr><name>test_has_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>RL_DEBUG</name></cpp:ifdef>
	<expr_stmt><expr><call><name>RUN_TEST</name><argument_list>(<argument><expr><name>rl_open_oom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block>
</unit>
