<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/rlite/tests/concurrency-test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"greatest.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rlite/hirlite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILEPATH</name></cpp:macro> <cpp:value>"rlite-test.rld"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INCREMENT_LIMIT</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>increment</name><parameter_list>(<parameter><function_decl><type><name>void</name> <modifier>*</modifier></type><name>UNUSED</name><parameter_list>(<parameter><decl><type><name>arg</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>rliteContext</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><call><name>rliteConnect</name><argument_list>(<argument><expr><name>FILEPATH</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rliteReply</name><modifier>*</modifier></type> <name>reply</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name><name>argvlen</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"INCR"</literal></expr>, <expr><literal type="string">"key"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>argc</name> <init>= <expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<do>do <block>{<block_content>
		<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>reply</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>RLITE_REPLY_INTEGER</name> <operator>||</operator> <name><name>reply</name><operator>-&gt;</operator><name>integer</name></name> <operator>&lt;</operator> <name>val</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Expected incremented value to be an integer greater than %lld, got %d (%lld) instead\n"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name><name>reply</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>reply</name><operator>-&gt;</operator><name>integer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>val</name> <operator>=</operator> <name>INCREMENT_LIMIT</name></expr>;</expr_stmt> <comment type="line">// break after free</comment>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>val</name> <operator>=</operator> <name><name>reply</name><operator>-&gt;</operator><name>integer</name></name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block> while <condition>(<expr><name>val</name> <operator>&lt;</operator> <name>INCREMENT_LIMIT</name></expr>)</condition>;</do>
	<expr_stmt><expr><call><name>rliteFree</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>delete_file</name><parameter_list>()</parameter_list> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>access</name><argument_list>(<argument><expr><name>FILEPATH</name></expr></argument>, <argument><expr><name>F_OK</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>FILEPATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>TEST</name></type> <name>simple_concurrency</name><parameter_list>()</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>delete_file</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>rliteContext</name> <modifier>*</modifier></type><name>context1</name> <init>= <expr><call><name>rliteConnect</name><argument_list>(<argument><expr><name>FILEPATH</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rliteContext</name> <modifier>*</modifier></type><name>context2</name> <init>= <expr><call><name>rliteConnect</name><argument_list>(<argument><expr><name>FILEPATH</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>rliteReply</name><modifier>*</modifier></type> <name>reply</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name><name>argvlen</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>

	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"GET"</literal></expr>, <expr><literal type="string">"key"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context1</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>EXPECT_REPLY_NIL</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"set"</literal></expr>, <expr><literal type="string">"key"</literal></expr>, <expr><literal type="string">"value"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context2</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>EXPECT_REPLY_STATUS</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><literal type="string">"OK"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"GET"</literal></expr>, <expr><literal type="string">"key"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context1</name></expr></argument>, <argument><expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>EXPECT_REPLY_STR</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><literal type="string">"value"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>rliteFree</name><argument_list>(<argument><expr><name>context1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rliteFree</name><argument_list>(<argument><expr><name>context2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>FILEPATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PASS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>TEST</name></type> <name>threads_concurrency</name><parameter_list>()</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>delete_file</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>rliteContext</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><call><name>rliteConnect</name><argument_list>(<argument><expr><name>FILEPATH</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>pthread_t</name></type> <name>thread</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thread</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>increment</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>rliteReply</name><modifier>*</modifier></type> <name>reply</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name><name>argvlen</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"GET"</literal></expr>, <expr><literal type="string">"key"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>argc</name> <init>= <expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>val</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>

	<do>do <block>{<block_content>
		<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>reply</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>RLITE_REPLY_NIL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else  if <condition>(<expr><name><name>reply</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>RLITE_REPLY_STRING</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Expected incremented value to be a string, got %d instead on line %d\n"</literal></expr></argument>, <argument><expr><name><name>reply</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>reply</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>reply</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tmp</name><index>[<expr><name><name>reply</name><operator>-&gt;</operator><name>len</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>strtoll</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block> while <condition>(<expr><name>val</name> <operator>&lt;</operator> <name>INCREMENT_LIMIT</name></expr>)</condition>;</do>

	<expr_stmt><expr><call><name>rliteFree</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_join</name><argument_list>(<argument><expr><name>thread</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PASS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>TEST</name></type> <name>multiple_writing_threads_concurrency</name><parameter_list>()</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>delete_file</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>rliteContext</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><call><name>rliteConnect</name><argument_list>(<argument><expr><name>FILEPATH</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>pthread_t</name></type> <name>thread1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pthread_t</name></type> <name>thread2</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thread1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>increment</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thread2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>increment</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>rliteReply</name><modifier>*</modifier></type> <name>reply</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name><name>argvlen</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"GET"</literal></expr>, <expr><literal type="string">"key"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>argc</name> <init>= <expr><call><name>populateArgvlen</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>val</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>

	<do>do <block>{<block_content>
		<expr_stmt><expr><name>reply</name> <operator>=</operator> <call><name>rliteCommandArgv</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argvlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>reply</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>RLITE_REPLY_NIL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else  if <condition>(<expr><name><name>reply</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>RLITE_REPLY_STRING</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Expected incremented value to be a string, got %d instead on line %d\n"</literal></expr></argument>, <argument><expr><name><name>reply</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>reply</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>reply</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tmp</name><index>[<expr><name><name>reply</name><operator>-&gt;</operator><name>len</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>strtoll</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><call><name>rliteFreeReplyObject</name><argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block> while <condition>(<expr><name>val</name> <operator>&lt;</operator> <name>INCREMENT_LIMIT</name></expr>)</condition>;</do>

	<expr_stmt><expr><call><name>rliteFree</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_join</name><argument_list>(<argument><expr><name>thread1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_join</name><argument_list>(<argument><expr><name>thread2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PASS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>SUITE</name><argument_list>(<argument>concurrency_test</argument>)</argument_list></macro> <block>{<block_content>
	<expr_stmt><expr><call><name>RUN_TEST</name><argument_list>(<argument><expr><name>simple_concurrency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RUN_TEST</name><argument_list>(<argument><expr><name>threads_concurrency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RUN_TEST</name><argument_list>(<argument><expr><name>multiple_writing_threads_concurrency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</unit>
