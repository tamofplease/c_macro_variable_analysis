<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/rlite/tests/flock-test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"greatest.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../src/rlite/rlite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../src/rlite/flock.h"</cpp:file></cpp:include>

<function><type><name>TEST</name></type> <name>basic_flock_check</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><literal type="string">"flock-test"</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>remove</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><call><name>rl_is_flocked</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>RLITE_FLOCK_SH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RL_NOT_FOUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><call><name>rl_is_flocked</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>RLITE_FLOCK_EX</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RL_NOT_FOUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><call><name>rl_is_flocked</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>RLITE_FLOCK_SH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RL_NOT_FOUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><call><name>rl_is_flocked</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>RLITE_FLOCK_EX</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RL_NOT_FOUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>rl_flock</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>RLITE_FLOCK_SH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><call><name>rl_is_flocked</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>RLITE_FLOCK_SH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><call><name>rl_is_flocked</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>RLITE_FLOCK_EX</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RL_NOT_FOUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>rl_flock</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>RLITE_FLOCK_EX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><call><name>rl_is_flocked</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>RLITE_FLOCK_SH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RL_NOT_FOUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASSERT_EQ</name><argument_list>(<argument><expr><call><name>rl_is_flocked</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>RLITE_FLOCK_EX</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RL_FOUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>remove</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PASS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>SUITE</name><argument_list>(<argument>flock_test</argument>)</argument_list></macro>
<block>{<block_content>
	<expr_stmt><expr><call><name>RUN_TEST</name><argument_list>(<argument><expr><name>basic_flock_check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

</unit>
