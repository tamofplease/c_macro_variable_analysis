<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/rlite/deps/lua/src/lundump.c"><comment type="block">/*
** $Id: lundump.c,v 2.7.1.4 2008/04/04 19:51:41 roberto Exp $
** load precompiled Lua chunks
** See Copyright Notice in lua.h
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lundump_c</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_CORE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lua.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ldebug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ldo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lfunc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lmem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lobject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lundump.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lzio.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{
 <decl_stmt><decl><type><name>lua_State</name><modifier>*</modifier></type> <name>L</name></decl>;</decl_stmt>
 <decl_stmt><decl><type><name>ZIO</name><modifier>*</modifier></type> <name>Z</name></decl>;</decl_stmt>
 <decl_stmt><decl><type><name>Mbuffer</name><modifier>*</modifier></type> <name>b</name></decl>;</decl_stmt>
 <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl>;</decl_stmt>
}</block></struct></type> <name>LoadState</name>;</typedef>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LUAC_TRUST_BINARIES</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IF</name><parameter_list>(<parameter><type><name>c</name></type></parameter>,<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>error</name><parameter_list>(<parameter><type><name>S</name></type></parameter>,<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IF</name><parameter_list>(<parameter><type><name>c</name></type></parameter>,<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>if (c) error(S,s)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>error</name><parameter_list>(<parameter><decl><type><name>LoadState</name><modifier>*</modifier></type> <name>S</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>why</name></decl></parameter>)</parameter_list>
<block>{<block_content>
 <expr_stmt><expr><call><name>luaO_pushfstring</name><argument_list>(<argument><expr><name><name>S</name><operator>-&gt;</operator><name>L</name></name></expr></argument>,<argument><expr><literal type="string">"%s: %s in precompiled chunk"</literal></expr></argument>,<argument><expr><name><name>S</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,<argument><expr><name>why</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <expr_stmt><expr><call><name>luaD_throw</name><argument_list>(<argument><expr><name><name>S</name><operator>-&gt;</operator><name>L</name></name></expr></argument>,<argument><expr><name>LUA_ERRSYNTAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LoadMem</name><parameter_list>(<parameter><type><name>S</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>n</name></type></parameter>,<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>LoadBlock(S,b,(n)*(size))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>LoadByte</name><parameter_list>(<parameter><type><name>S</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>(lu_byte)LoadChar(S)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LoadVar</name><parameter_list>(<parameter><type><name>S</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>LoadMem(S,&amp;x,1,sizeof(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LoadVector</name><parameter_list>(<parameter><type><name>S</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>n</name></type></parameter>,<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>LoadMem(S,b,n,size)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>LoadBlock</name><parameter_list>(<parameter><decl><type><name>LoadState</name><modifier>*</modifier></type> <name>S</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
 <decl_stmt><decl><type><name>size_t</name></type> <name>r</name><init>=<expr><call><name>luaZ_read</name><argument_list>(<argument><expr><name><name>S</name><operator>-&gt;</operator><name>Z</name></name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 <expr_stmt><expr><call><name>IF</name> <argument_list>(<argument><expr><name>r</name><operator>!=</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"unexpected end"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>LoadChar</name><parameter_list>(<parameter><decl><type><name>LoadState</name><modifier>*</modifier></type> <name>S</name></decl></parameter>)</parameter_list>
<block>{<block_content>
 <decl_stmt><decl><type><name>char</name></type> <name>x</name></decl>;</decl_stmt>
 <expr_stmt><expr><call><name>LoadVar</name><argument_list>(<argument><expr><name>S</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>LoadInt</name><parameter_list>(<parameter><decl><type><name>LoadState</name><modifier>*</modifier></type> <name>S</name></decl></parameter>)</parameter_list>
<block>{<block_content>
 <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
 <expr_stmt><expr><call><name>LoadVar</name><argument_list>(<argument><expr><name>S</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <expr_stmt><expr><call><name>IF</name> <argument_list>(<argument><expr><name>x</name><operator>&lt;</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"bad integer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>lua_Number</name></type> <name>LoadNumber</name><parameter_list>(<parameter><decl><type><name>LoadState</name><modifier>*</modifier></type> <name>S</name></decl></parameter>)</parameter_list>
<block>{<block_content>
 <decl_stmt><decl><type><name>lua_Number</name></type> <name>x</name></decl>;</decl_stmt>
 <expr_stmt><expr><call><name>LoadVar</name><argument_list>(<argument><expr><name>S</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>TString</name><modifier>*</modifier></type> <name>LoadString</name><parameter_list>(<parameter><decl><type><name>LoadState</name><modifier>*</modifier></type> <name>S</name></decl></parameter>)</parameter_list>
<block>{<block_content>
 <decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
 <expr_stmt><expr><call><name>LoadVar</name><argument_list>(<argument><expr><name>S</name></expr></argument>,<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <if_stmt><if>if <condition>(<expr><name>size</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
  <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if>
 <else>else
 <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>s</name><init>=<expr><call><name>luaZ_openspace</name><argument_list>(<argument><expr><name><name>S</name><operator>-&gt;</operator><name>L</name></name></expr></argument>,<argument><expr><name><name>S</name><operator>-&gt;</operator><name>b</name></name></expr></argument>,<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>LoadBlock</name><argument_list>(<argument><expr><name>S</name></expr></argument>,<argument><expr><name>s</name></expr></argument>,<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>luaS_newlstr</name><argument_list>(<argument><expr><name><name>S</name><operator>-&gt;</operator><name>L</name></name></expr></argument>,<argument><expr><name>s</name></expr></argument>,<argument><expr><name>size</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>		<comment type="block">/* remove trailing '\0' */</comment>
 </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>LoadCode</name><parameter_list>(<parameter><decl><type><name>LoadState</name><modifier>*</modifier></type> <name>S</name></decl></parameter>, <parameter><decl><type><name>Proto</name><modifier>*</modifier></type> <name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
 <decl_stmt><decl><type><name>int</name></type> <name>n</name><init>=<expr><call><name>LoadInt</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>code</name></name><operator>=</operator><call><name>luaM_newvector</name><argument_list>(<argument><expr><name><name>S</name><operator>-&gt;</operator><name>L</name></name></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><name>Instruction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>sizecode</name></name><operator>=</operator><name>n</name></expr>;</expr_stmt>
 <expr_stmt><expr><call><name>LoadVector</name><argument_list>(<argument><expr><name>S</name></expr></argument>,<argument><expr><name><name>f</name><operator>-&gt;</operator><name>code</name></name></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Instruction</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>Proto</name><modifier>*</modifier></type> <name>LoadFunction</name><parameter_list>(<parameter><decl><type><name>LoadState</name><modifier>*</modifier></type> <name>S</name></decl></parameter>, <parameter><decl><type><name>TString</name><modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>LoadConstants</name><parameter_list>(<parameter><decl><type><name>LoadState</name><modifier>*</modifier></type> <name>S</name></decl></parameter>, <parameter><decl><type><name>Proto</name><modifier>*</modifier></type> <name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
 <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
 <expr_stmt><expr><name>n</name><operator>=</operator><call><name>LoadInt</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>k</name></name><operator>=</operator><call><name>luaM_newvector</name><argument_list>(<argument><expr><name><name>S</name><operator>-&gt;</operator><name>L</name></name></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><name>TValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>sizek</name></name><operator>=</operator><name>n</name></expr>;</expr_stmt>
 <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>setnilvalue</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>k</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
 <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
 <block>{<block_content>
  <decl_stmt><decl><type><name>TValue</name><modifier>*</modifier></type> <name>o</name><init>=<expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>k</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>t</name><init>=<expr><call><name>LoadChar</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name>t</name></expr>)</condition>
  <block>{<block_content>
   <case>case <expr><name>LUA_TNIL</name></expr>:</case>
   	<expr_stmt><expr><call><name>setnilvalue</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>LUA_TBOOLEAN</name></expr>:</case>
   	<expr_stmt><expr><call><name>setbvalue</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><call><name>LoadChar</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call><operator>!=</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>LUA_TNUMBER</name></expr>:</case>
	<expr_stmt><expr><call><name>setnvalue</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><call><name>LoadNumber</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>LUA_TSTRING</name></expr>:</case>
	<expr_stmt><expr><call><name>setsvalue2n</name><argument_list>(<argument><expr><name><name>S</name><operator>-&gt;</operator><name>L</name></name></expr></argument>,<argument><expr><name>o</name></expr></argument>,<argument><expr><call><name>LoadString</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <default>default:</default>
	<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><name>S</name></expr></argument>,<argument><expr><literal type="string">"bad constant"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
  </block_content>}</block></switch>
 </block_content>}</block></for>
 <expr_stmt><expr><name>n</name><operator>=</operator><call><name>LoadInt</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>p</name></name><operator>=</operator><call><name>luaM_newvector</name><argument_list>(<argument><expr><name><name>S</name><operator>-&gt;</operator><name>L</name></name></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><name>Proto</name><operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>sizep</name></name><operator>=</operator><name>n</name></expr>;</expr_stmt>
 <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>NULL</name></expr>;</expr_stmt></block_content></block></for>
 <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>LoadFunction</name><argument_list>(<argument><expr><name>S</name></expr></argument>,<argument><expr><name><name>f</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>LoadDebug</name><parameter_list>(<parameter><decl><type><name>LoadState</name><modifier>*</modifier></type> <name>S</name></decl></parameter>, <parameter><decl><type><name>Proto</name><modifier>*</modifier></type> <name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
 <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
 <expr_stmt><expr><name>n</name><operator>=</operator><call><name>LoadInt</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>lineinfo</name></name><operator>=</operator><call><name>luaM_newvector</name><argument_list>(<argument><expr><name><name>S</name><operator>-&gt;</operator><name>L</name></name></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>sizelineinfo</name></name><operator>=</operator><name>n</name></expr>;</expr_stmt>
 <expr_stmt><expr><call><name>LoadVector</name><argument_list>(<argument><expr><name>S</name></expr></argument>,<argument><expr><name><name>f</name><operator>-&gt;</operator><name>lineinfo</name></name></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <expr_stmt><expr><name>n</name><operator>=</operator><call><name>LoadInt</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>locvars</name></name><operator>=</operator><call><name>luaM_newvector</name><argument_list>(<argument><expr><name><name>S</name><operator>-&gt;</operator><name>L</name></name></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><name>LocVar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>sizelocvars</name></name><operator>=</operator><name>n</name></expr>;</expr_stmt>
 <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>locvars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>varname</name><operator>=</operator><name>NULL</name></expr>;</expr_stmt></block_content></block></for>
 <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
 <block>{<block_content>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>locvars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>varname</name><operator>=</operator><call><name>LoadString</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>locvars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>startpc</name><operator>=</operator><call><name>LoadInt</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>locvars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>endpc</name><operator>=</operator><call><name>LoadInt</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 </block_content>}</block></for>
 <expr_stmt><expr><name>n</name><operator>=</operator><call><name>LoadInt</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>upvalues</name></name><operator>=</operator><call><name>luaM_newvector</name><argument_list>(<argument><expr><name><name>S</name><operator>-&gt;</operator><name>L</name></name></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><name>TString</name><operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>sizeupvalues</name></name><operator>=</operator><name>n</name></expr>;</expr_stmt>
 <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>upvalues</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>NULL</name></expr>;</expr_stmt></block_content></block></for>
 <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>upvalues</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>LoadString</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Proto</name><modifier>*</modifier></type> <name>LoadFunction</name><parameter_list>(<parameter><decl><type><name>LoadState</name><modifier>*</modifier></type> <name>S</name></decl></parameter>, <parameter><decl><type><name>TString</name><modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
 <decl_stmt><decl><type><name>Proto</name><modifier>*</modifier></type> <name>f</name></decl>;</decl_stmt>
 <if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>S</name><operator>-&gt;</operator><name>L</name><operator>-&gt;</operator><name>nCcalls</name></name> <operator>&gt;</operator> <name>LUAI_MAXCCALLS</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><name>S</name></expr></argument>,<argument><expr><literal type="string">"code too deep"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
 <expr_stmt><expr><name>f</name><operator>=</operator><call><name>luaF_newproto</name><argument_list>(<argument><expr><name><name>S</name><operator>-&gt;</operator><name>L</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <expr_stmt><expr><call><name>setptvalue2s</name><argument_list>(<argument><expr><name><name>S</name><operator>-&gt;</operator><name>L</name></name></expr></argument>,<argument><expr><name><name>S</name><operator>-&gt;</operator><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>incr_top</name><argument_list>(<argument><expr><name><name>S</name><operator>-&gt;</operator><name>L</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>source</name></name><operator>=</operator><call><name>LoadString</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>source</name></name><operator>==</operator><name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>source</name></name><operator>=</operator><name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
 <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>linedefined</name></name><operator>=</operator><call><name>LoadInt</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>lastlinedefined</name></name><operator>=</operator><call><name>LoadInt</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>nups</name></name><operator>=</operator><call><name>LoadByte</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>numparams</name></name><operator>=</operator><call><name>LoadByte</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>is_vararg</name></name><operator>=</operator><call><name>LoadByte</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>maxstacksize</name></name><operator>=</operator><call><name>LoadByte</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <expr_stmt><expr><call><name>LoadCode</name><argument_list>(<argument><expr><name>S</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <expr_stmt><expr><call><name>LoadConstants</name><argument_list>(<argument><expr><name>S</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <expr_stmt><expr><call><name>LoadDebug</name><argument_list>(<argument><expr><name>S</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <expr_stmt><expr><call><name>IF</name> <argument_list>(<argument><expr><operator>!</operator><call><name>luaG_checkcode</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"bad code"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>--</operator></expr>;</expr_stmt>
 <expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>L</name><operator>-&gt;</operator><name>nCcalls</name></name><operator>--</operator></expr>;</expr_stmt>
 <return>return <expr><name>f</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>LoadHeader</name><parameter_list>(<parameter><decl><type><name>LoadState</name><modifier>*</modifier></type> <name>S</name></decl></parameter>)</parameter_list>
<block>{<block_content>
 <decl_stmt><decl><type><name>char</name></type> <name><name>h</name><index>[<expr><name>LUAC_HEADERSIZE</name></expr>]</index></name></decl>;</decl_stmt>
 <decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>LUAC_HEADERSIZE</name></expr>]</index></name></decl>;</decl_stmt>
 <expr_stmt><expr><call><name>luaU_header</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <expr_stmt><expr><call><name>LoadBlock</name><argument_list>(<argument><expr><name>S</name></expr></argument>,<argument><expr><name>s</name></expr></argument>,<argument><expr><name>LUAC_HEADERSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <expr_stmt><expr><call><name>IF</name> <argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name>h</name></expr></argument>,<argument><expr><name>s</name></expr></argument>,<argument><expr><name>LUAC_HEADERSIZE</name></expr></argument>)</argument_list></call><operator>!=</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"bad header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** load precompiled chunk
*/</comment>
<function><type><name>Proto</name><modifier>*</modifier></type> <name>luaU_undump</name> <parameter_list>(<parameter><decl><type><name>lua_State</name><modifier>*</modifier></type> <name>L</name></decl></parameter>, <parameter><decl><type><name>ZIO</name><modifier>*</modifier></type> <name>Z</name></decl></parameter>, <parameter><decl><type><name>Mbuffer</name><modifier>*</modifier></type> <name>buff</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
 <decl_stmt><decl><type><name>LoadState</name></type> <name>S</name></decl>;</decl_stmt>
 <if_stmt><if>if <condition>(<expr><operator>*</operator><name>name</name><operator>==</operator><literal type="char">'@'</literal> <operator>||</operator> <operator>*</operator><name>name</name><operator>==</operator><literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content>
  <expr_stmt><expr><name><name>S</name><operator>.</operator><name>name</name></name><operator>=</operator><name>name</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
 <if type="elseif">else if <condition>(<expr><operator>*</operator><name>name</name><operator>==</operator><name><name>LUA_SIGNATURE</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
  <expr_stmt><expr><name><name>S</name><operator>.</operator><name>name</name></name><operator>=</operator><literal type="string">"binary string"</literal></expr>;</expr_stmt></block_content></block></if>
 <else>else<block type="pseudo"><block_content>
  <expr_stmt><expr><name><name>S</name><operator>.</operator><name>name</name></name><operator>=</operator><name>name</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
 <expr_stmt><expr><name><name>S</name><operator>.</operator><name>L</name></name><operator>=</operator><name>L</name></expr>;</expr_stmt>
 <expr_stmt><expr><name><name>S</name><operator>.</operator><name>Z</name></name><operator>=</operator><name>Z</name></expr>;</expr_stmt>
 <expr_stmt><expr><name><name>S</name><operator>.</operator><name>b</name></name><operator>=</operator><name>buff</name></expr>;</expr_stmt>
 <expr_stmt><expr><call><name>LoadHeader</name><argument_list>(<argument><expr><operator>&amp;</operator><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <return>return <expr><call><name>LoadFunction</name><argument_list>(<argument><expr><operator>&amp;</operator><name>S</name></expr></argument>,<argument><expr><call><name>luaS_newliteral</name><argument_list>(<argument><expr><name>L</name></expr></argument>,<argument><expr><literal type="string">"=?"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
* make header
*/</comment>
<function><type><name>void</name></type> <name>luaU_header</name> <parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
 <decl_stmt><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
 <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>h</name></expr></argument>,<argument><expr><name>LUA_SIGNATURE</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>LUA_SIGNATURE</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <expr_stmt><expr><name>h</name><operator>+=</operator><sizeof>sizeof<argument_list>(<argument><expr><name>LUA_SIGNATURE</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
 <expr_stmt><expr><operator>*</operator><name>h</name><operator>++</operator><operator>=</operator><operator>(</operator><name>char</name><operator>)</operator><name>LUAC_VERSION</name></expr>;</expr_stmt>
 <expr_stmt><expr><operator>*</operator><name>h</name><operator>++</operator><operator>=</operator><operator>(</operator><name>char</name><operator>)</operator><name>LUAC_FORMAT</name></expr>;</expr_stmt>
 <expr_stmt><expr><operator>*</operator><name>h</name><operator>++</operator><operator>=</operator><operator>(</operator><name>char</name><operator>)</operator><operator>*</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>x</name></expr>;</expr_stmt>				<comment type="block">/* endianness */</comment>
 <expr_stmt><expr><operator>*</operator><name>h</name><operator>++</operator><operator>=</operator><operator>(</operator><name>char</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
 <expr_stmt><expr><operator>*</operator><name>h</name><operator>++</operator><operator>=</operator><operator>(</operator><name>char</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
 <expr_stmt><expr><operator>*</operator><name>h</name><operator>++</operator><operator>=</operator><operator>(</operator><name>char</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>Instruction</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
 <expr_stmt><expr><operator>*</operator><name>h</name><operator>++</operator><operator>=</operator><operator>(</operator><name>char</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>lua_Number</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
 <expr_stmt><expr><operator>*</operator><name>h</name><operator>++</operator><operator>=</operator><operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>lua_Number</name><operator>)</operator><literal type="number">0.5</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>		<comment type="block">/* is lua_Number integral? */</comment>
</block_content>}</block></function>
</unit>
