<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/rlite/deps/lua/src/lstring.c"><comment type="block">/*
** $Id: lstring.c,v 2.8.1.1 2007/12/27 13:02:25 roberto Exp $
** String table (keeps all strings handled by Lua)
** See Copyright Notice in lua.h
*/</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lstring_c</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_CORE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lua.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lmem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lobject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lstate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lstring.h"</cpp:file></cpp:include>



<function><type><name>void</name></type> <name>luaS_resize</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>newsize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>GCObject</name> <modifier>*</modifier><modifier>*</modifier></type><name>newhash</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>stringtable</name> <modifier>*</modifier></type><name>tb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>gcstate</name> <operator>==</operator> <name>GCSsweepstring</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>  <comment type="block">/* cannot resize during GC traverse */</comment>
  <expr_stmt><expr><name>newhash</name> <operator>=</operator> <call><name>luaM_newvector</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>newsize</name></expr></argument>, <argument><expr><name>GCObject</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tb</name> <operator>=</operator> <operator>&amp;</operator><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>strt</name></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>newsize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>newhash</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></for>
  <comment type="block">/* rehash */</comment>
  <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>tb</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>GCObject</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>tb</name><operator>-&gt;</operator><name>hash</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* for each node in the list */</comment>
      <decl_stmt><decl><type><name>GCObject</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>gch</name><operator>.</operator><name>next</name></name></expr></init></decl>;</decl_stmt>  <comment type="block">/* save next */</comment>
      <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>h</name> <init>= <expr><call><name>gco2ts</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>hash</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>h1</name> <init>= <expr><call><name>lmod</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>newsize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* new position */</comment>
      <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>cast_int</name><argument_list>(<argument><expr><name>h</name><operator>%</operator><name>newsize</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>lmod</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>newsize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>gch</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name><name>newhash</name><index>[<expr><name>h1</name></expr>]</index></name></expr>;</expr_stmt>  <comment type="block">/* chain it */</comment>
      <expr_stmt><expr><name><name>newhash</name><index>[<expr><name>h1</name></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>p</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>luaM_freearray</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>tb</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><name><name>tb</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>TString</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tb</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>newsize</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tb</name><operator>-&gt;</operator><name>hash</name></name> <operator>=</operator> <name>newhash</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>TString</name> <modifier>*</modifier></type><name>newlstr</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>l</name></decl></parameter>,
                                       <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TString</name> <modifier>*</modifier></type><name>ts</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>stringtable</name> <modifier>*</modifier></type><name>tb</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>l</name><operator>+</operator><literal type="number">1</literal> <operator>&gt;</operator> <operator>(</operator><name>MAX_SIZET</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TString</name></expr></argument>)</argument_list></sizeof><operator>)</operator><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>luaM_toobig</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>ts</name> <operator>=</operator> <call><name>cast</name><argument_list>(<argument><expr><name>TString</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>luaM_malloc</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>(</operator><name>l</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof><operator>+</operator><sizeof>sizeof<argument_list>(<argument><expr><name>TString</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>tsv</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>tsv</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>tsv</name><operator>.</operator><name>marked</name></name> <operator>=</operator> <call><name>luaC_white</name><argument_list>(<argument><expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>tsv</name><operator>.</operator><name>tt</name></name> <operator>=</operator> <name>LUA_TSTRING</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>tsv</name><operator>.</operator><name>reserved</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ts</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>l</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>ts</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><index>[<expr><name>l</name></expr>]</index> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>  <comment type="block">/* ending 0 */</comment>
  <expr_stmt><expr><name>tb</name> <operator>=</operator> <operator>&amp;</operator><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>strt</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>lmod</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>tb</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>tsv</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name><name>tb</name><operator>-&gt;</operator><name>hash</name><index>[<expr><name>h</name></expr>]</index></name></expr>;</expr_stmt>  <comment type="block">/* chain new entry */</comment>
  <expr_stmt><expr><name><name>tb</name><operator>-&gt;</operator><name>hash</name><index>[<expr><name>h</name></expr>]</index></name> <operator>=</operator> <call><name>obj2gco</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tb</name><operator>-&gt;</operator><name>nuse</name></name><operator>++</operator></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>tb</name><operator>-&gt;</operator><name>nuse</name></name> <operator>&gt;</operator> <call><name>cast</name><argument_list>(<argument><expr><name>lu_int32</name></expr></argument>, <argument><expr><name><name>tb</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>tb</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;=</operator> <name>MAX_INT</name><operator>/</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>luaS_resize</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>tb</name><operator>-&gt;</operator><name>size</name></name><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* too crowded */</comment>
  <return>return <expr><name>ts</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>TString</name> <modifier>*</modifier></type><name>luaS_newlstr</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>l</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>GCObject</name> <modifier>*</modifier></type><name>o</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>h</name> <init>= <macro><name>cast</name><argument_list>(<argument>unsigned int</argument>, <argument>l</argument>)</argument_list></macro></init></decl>;</decl_stmt>  <comment type="block">/* seed */</comment>
  <decl_stmt><decl><type><name>size_t</name></type> <name>step</name> <init>= <expr><operator>(</operator><name>l</name><operator>&gt;&gt;</operator><literal type="number">5</literal><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* if string is too long, don't hash all its chars */</comment>
  <decl_stmt><decl><type><name>size_t</name></type> <name>l1</name></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>l1</name><operator>=</operator><name>l</name></expr>;</init> <condition><expr><name>l1</name><operator>&gt;=</operator><name>step</name></expr>;</condition> <incr><expr><name>l1</name><operator>-=</operator><name>step</name></expr></incr>)</control><block type="pseudo"><block_content>  <comment type="block">/* compute hash */</comment>
    <expr_stmt><expr><name>h</name> <operator>=</operator> <name>h</name> <operator>^</operator> <operator>(</operator><operator>(</operator><name>h</name><operator>&lt;&lt;</operator><literal type="number">5</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>h</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><macro><name>cast</name><argument_list>(<argument>unsigned char</argument>, <argument>str[l1-<literal type="number">1</literal>]</argument>)</argument_list></macro><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
  <for>for <control>(<init><expr><name>o</name> <operator>=</operator> <call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>strt</name><operator>.</operator><name>hash</name><index>[<expr><call><name>lmod</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>strt</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</init>
       <condition><expr><name>o</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
       <incr><expr><name>o</name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>gch</name><operator>.</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>TString</name> <modifier>*</modifier></type><name>ts</name> <init>= <expr><call><name>rawgco2ts</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ts</name><operator>-&gt;</operator><name>tsv</name><operator>.</operator><name>len</name></name> <operator>==</operator> <name>l</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>getstr</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <comment type="block">/* string may be dead */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>isdead</name><argument_list>(<argument><expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>changewhite</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <return>return <expr><name>ts</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><call><name>newlstr</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</return>  <comment type="block">/* not found */</comment>
</block_content>}</block></function>


<function><type><name>Udata</name> <modifier>*</modifier></type><name>luaS_newudata</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>Table</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>Udata</name> <modifier>*</modifier></type><name>u</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>s</name> <operator>&gt;</operator> <name>MAX_SIZET</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Udata</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>luaM_toobig</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>u</name> <operator>=</operator> <call><name>cast</name><argument_list>(<argument><expr><name>Udata</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>luaM_malloc</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>s</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Udata</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>uv</name><operator>.</operator><name>marked</name></name> <operator>=</operator> <call><name>luaC_white</name><argument_list>(<argument><expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* is not finalized */</comment>
  <expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>uv</name><operator>.</operator><name>tt</name></name> <operator>=</operator> <name>LUA_TUSERDATA</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>uv</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>uv</name><operator>.</operator><name>metatable</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>uv</name><operator>.</operator><name>env</name></name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
  <comment type="block">/* chain it on udata list (after main thread) */</comment>
  <expr_stmt><expr><name><name>u</name><operator>-&gt;</operator><name>uv</name><operator>.</operator><name>next</name></name> <operator>=</operator> <call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>mainthread</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>mainthread</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <call><name>obj2gco</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>u</name></expr>;</return>
</block_content>}</block></function>

</unit>
