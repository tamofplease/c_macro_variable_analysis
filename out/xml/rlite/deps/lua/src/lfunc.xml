<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/rlite/deps/lua/src/lfunc.c"><comment type="block">/*
** $Id: lfunc.c,v 2.12.1.2 2007/12/28 14:58:43 roberto Exp $
** Auxiliary functions to manipulate prototypes and closures
** See Copyright Notice in lua.h
*/</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lfunc_c</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_CORE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lua.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lfunc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lgc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lmem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lobject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lstate.h"</cpp:file></cpp:include>



<function><type><name>Closure</name> <modifier>*</modifier></type><name>luaF_newCclosure</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nelems</name></decl></parameter>, <parameter><decl><type><name>Table</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>Closure</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>cast</name><argument_list>(<argument><expr><name>Closure</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>luaM_malloc</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>sizeCclosure</name><argument_list>(<argument><expr><name>nelems</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>luaC_link</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>obj2gco</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LUA_TFUNCTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>isC</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>env</name></name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>nupvalues</name></name> <operator>=</operator> <call><name>cast_byte</name><argument_list>(<argument><expr><name>nelems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>Closure</name> <modifier>*</modifier></type><name>luaF_newLclosure</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nelems</name></decl></parameter>, <parameter><decl><type><name>Table</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>Closure</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>cast</name><argument_list>(<argument><expr><name>Closure</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>luaM_malloc</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>sizeLclosure</name><argument_list>(<argument><expr><name>nelems</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>luaC_link</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>obj2gco</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LUA_TFUNCTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>l</name><operator>.</operator><name>isC</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>l</name><operator>.</operator><name>env</name></name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>l</name><operator>.</operator><name>nupvalues</name></name> <operator>=</operator> <call><name>cast_byte</name><argument_list>(<argument><expr><name>nelems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>nelems</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>l</name><operator>.</operator><name>upvals</name><index>[<expr><name>nelems</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></while>
  <return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>UpVal</name> <modifier>*</modifier></type><name>luaF_newupval</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>UpVal</name> <modifier>*</modifier></type><name>uv</name> <init>= <expr><call><name>luaM_new</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>UpVal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>luaC_link</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>obj2gco</name><argument_list>(<argument><expr><name>uv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LUA_TUPVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>uv</name><operator>-&gt;</operator><name>v</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>uv</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>value</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setnilvalue</name><argument_list>(<argument><expr><name><name>uv</name><operator>-&gt;</operator><name>v</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>uv</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>UpVal</name> <modifier>*</modifier></type><name>luaF_findupval</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>StkId</name></type> <name>level</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GCObject</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name> <init>= <expr><operator>&amp;</operator><name><name>L</name><operator>-&gt;</operator><name>openupval</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>UpVal</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>UpVal</name> <modifier>*</modifier></type><name>uv</name></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>*</operator><name>pp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>p</name> <operator>=</operator> <call><name>ngcotouv</name><argument_list>(<argument><expr><operator>*</operator><name>pp</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>v</name> <operator>&gt;=</operator> <name>level</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>v</name></name> <operator>!=</operator> <operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>v</name></name> <operator>==</operator> <name>level</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* found a corresponding upvalue? */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>isdead</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><call><name>obj2gco</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* is it dead? */</comment>
        <expr_stmt><expr><call><name>changewhite</name><argument_list>(<argument><expr><call><name>obj2gco</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* ressurect it */</comment>
      <return>return <expr><name>p</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>pp</name> <operator>=</operator> <operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><name>uv</name> <operator>=</operator> <call><name>luaM_new</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>UpVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* not found: create a new one */</comment>
  <expr_stmt><expr><name><name>uv</name><operator>-&gt;</operator><name>tt</name></name> <operator>=</operator> <name>LUA_TUPVAL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>uv</name><operator>-&gt;</operator><name>marked</name></name> <operator>=</operator> <call><name>luaC_white</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>uv</name><operator>-&gt;</operator><name>v</name></name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>  <comment type="block">/* current value lives in the stack */</comment>
  <expr_stmt><expr><name><name>uv</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <operator>*</operator><name>pp</name></expr>;</expr_stmt>  <comment type="block">/* chain it in the proper position */</comment>
  <expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <call><name>obj2gco</name><argument_list>(<argument><expr><name>uv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>uv</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>l</name><operator>.</operator><name>prev</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>uvhead</name></name></expr>;</expr_stmt>  <comment type="block">/* double link it in `uvhead' list */</comment>
  <expr_stmt><expr><name><name>uv</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>l</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>uvhead</name><operator>.</operator><name>u</name><operator>.</operator><name>l</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>uv</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>l</name><operator>.</operator><name>next</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>l</name><operator>.</operator><name>prev</name></name> <operator>=</operator> <name>uv</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>uvhead</name><operator>.</operator><name>u</name><operator>.</operator><name>l</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>uv</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name><name>uv</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>l</name><operator>.</operator><name>next</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>l</name><operator>.</operator><name>prev</name></name> <operator>==</operator> <name>uv</name> <operator>&amp;&amp;</operator> <name><name>uv</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>l</name><operator>.</operator><name>prev</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>l</name><operator>.</operator><name>next</name></name> <operator>==</operator> <name>uv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>uv</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>unlinkupval</name> <parameter_list>(<parameter><decl><type><name>UpVal</name> <modifier>*</modifier></type><name>uv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name><name>uv</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>l</name><operator>.</operator><name>next</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>l</name><operator>.</operator><name>prev</name></name> <operator>==</operator> <name>uv</name> <operator>&amp;&amp;</operator> <name><name>uv</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>l</name><operator>.</operator><name>prev</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>l</name><operator>.</operator><name>next</name></name> <operator>==</operator> <name>uv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>uv</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>l</name><operator>.</operator><name>next</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>l</name><operator>.</operator><name>prev</name></name> <operator>=</operator> <name><name>uv</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>l</name><operator>.</operator><name>prev</name></name></expr>;</expr_stmt>  <comment type="block">/* remove from `uvhead' list */</comment>
  <expr_stmt><expr><name><name>uv</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>l</name><operator>.</operator><name>prev</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>l</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name><name>uv</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>l</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>luaF_freeupval</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>UpVal</name> <modifier>*</modifier></type><name>uv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>uv</name><operator>-&gt;</operator><name>v</name></name> <operator>!=</operator> <operator>&amp;</operator><name><name>uv</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>value</name></name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* is it open? */</comment>
    <expr_stmt><expr><call><name>unlinkupval</name><argument_list>(<argument><expr><name>uv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* remove from open list */</comment>
  <expr_stmt><expr><call><name>luaM_free</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>uv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* free upvalue */</comment>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>luaF_close</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>StkId</name></type> <name>level</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>UpVal</name> <modifier>*</modifier></type><name>uv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name><name>L</name><operator>-&gt;</operator><name>openupval</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>uv</name> <operator>=</operator> <call><name>ngcotouv</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>openupval</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>v</name> <operator>&gt;=</operator> <name>level</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>GCObject</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>obj2gco</name><argument_list>(<argument><expr><name>uv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>isblack</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>uv</name><operator>-&gt;</operator><name>v</name></name> <operator>!=</operator> <operator>&amp;</operator><name><name>uv</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>openupval</name></name> <operator>=</operator> <name><name>uv</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>  <comment type="block">/* remove from `open' list */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>isdead</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>luaF_freeupval</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>uv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>  <comment type="block">/* free upvalue */</comment>
    <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>unlinkupval</name><argument_list>(<argument><expr><name>uv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>setobj</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>uv</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>uv</name><operator>-&gt;</operator><name>v</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>uv</name><operator>-&gt;</operator><name>v</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>uv</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>value</name></name></expr>;</expr_stmt>  <comment type="block">/* now current value lives here */</comment>
      <expr_stmt><expr><call><name>luaC_linkupval</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>uv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* link upvalue into `gcroot' list */</comment>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>


<function><type><name>Proto</name> <modifier>*</modifier></type><name>luaF_newproto</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>Proto</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>luaM_new</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>Proto</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>luaC_link</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>obj2gco</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LUA_TPROTO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>k</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>sizek</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>sizep</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>sizecode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>sizelineinfo</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>sizeupvalues</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>nups</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>upvalues</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>numparams</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>is_vararg</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>maxstacksize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>lineinfo</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>sizelocvars</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>locvars</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>linedefined</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>lastlinedefined</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>source</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <return>return <expr><name>f</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>luaF_freeproto</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>Proto</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>luaM_freearray</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>sizecode</name></name></expr></argument>, <argument><expr><name>Instruction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaM_freearray</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>sizep</name></name></expr></argument>, <argument><expr><name>Proto</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaM_freearray</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>k</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>sizek</name></name></expr></argument>, <argument><expr><name>TValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaM_freearray</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>lineinfo</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>sizelineinfo</name></name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaM_freearray</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>locvars</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>sizelocvars</name></name></expr></argument>, <argument><expr>struct <name>LocVar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaM_freearray</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>upvalues</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>sizeupvalues</name></name></expr></argument>, <argument><expr><name>TString</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaM_free</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>luaF_freeclosure</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>Closure</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>isC</name></name><operator>)</operator></expr> ?</condition><then> <expr><call><name>sizeCclosure</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>nupvalues</name></name></expr></argument>)</argument_list></call></expr> </then><else>:
                          <expr><call><name>sizeLclosure</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>l</name><operator>.</operator><name>nupvalues</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>luaM_freemem</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Look for n-th local variable at line `line' in function `func'.
** Returns NULL if not found.
*/</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>luaF_getlocalname</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Proto</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>local_number</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>f</name><operator>-&gt;</operator><name>sizelocvars</name></name> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>locvars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>startpc</name> <operator>&lt;=</operator> <name>pc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>pc</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>locvars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>endpc</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* is variable active? */</comment>
      <expr_stmt><expr><name>local_number</name><operator>--</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>local_number</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>locvars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>varname</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>NULL</name></expr>;</return>  <comment type="block">/* not found */</comment>
</block_content>}</block></function>

</unit>
