<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/rlite/deps/lua/src/ldump.c"><comment type="block">/*
** $Id: ldump.c,v 2.8.1.1 2007/12/27 13:02:25 roberto Exp $
** save precompiled Lua chunks
** See Copyright Notice in lua.h
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ldump_c</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_CORE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lua.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lobject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lstate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lundump.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{
 <decl_stmt><decl><type><name>lua_State</name><modifier>*</modifier></type> <name>L</name></decl>;</decl_stmt>
 <decl_stmt><decl><type><name>lua_Writer</name></type> <name>writer</name></decl>;</decl_stmt>
 <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl>;</decl_stmt>
 <decl_stmt><decl><type><name>int</name></type> <name>strip</name></decl>;</decl_stmt>
 <decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
}</block></struct></type> <name>DumpState</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DumpMem</name><parameter_list>(<parameter><type><name>b</name></type></parameter>,<parameter><type><name>n</name></type></parameter>,<parameter><type><name>size</name></type></parameter>,<parameter><type><name>D</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>DumpBlock(b,(n)*(size),D)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DumpVar</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>D</name></type></parameter>)</parameter_list></cpp:macro>	 	<cpp:value>DumpMem(&amp;x,1,sizeof(x),D)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DumpBlock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>DumpState</name><modifier>*</modifier></type> <name>D</name></decl></parameter>)</parameter_list>
<block>{<block_content>
 <if_stmt><if>if <condition>(<expr><name><name>D</name><operator>-&gt;</operator><name>status</name></name><operator>==</operator><literal type="number">0</literal></expr>)</condition>
 <block>{<block_content>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name><name>D</name><operator>-&gt;</operator><name>L</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>D</name><operator>-&gt;</operator><name>status</name></name><operator>=</operator><call>(<modifier>*</modifier><name><name>D</name><operator>-&gt;</operator><name>writer</name></name>)<argument_list>(<argument><expr><name><name>D</name><operator>-&gt;</operator><name>L</name></name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>size</name></expr></argument>,<argument><expr><name><name>D</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name><name>D</name><operator>-&gt;</operator><name>L</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DumpChar</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>DumpState</name><modifier>*</modifier></type> <name>D</name></decl></parameter>)</parameter_list>
<block>{<block_content>
 <decl_stmt><decl><type><name>char</name></type> <name>x</name><init>=<expr><operator>(</operator><name>char</name><operator>)</operator><name>y</name></expr></init></decl>;</decl_stmt>
 <expr_stmt><expr><call><name>DumpVar</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DumpInt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>DumpState</name><modifier>*</modifier></type> <name>D</name></decl></parameter>)</parameter_list>
<block>{<block_content>
 <expr_stmt><expr><call><name>DumpVar</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DumpNumber</name><parameter_list>(<parameter><decl><type><name>lua_Number</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>DumpState</name><modifier>*</modifier></type> <name>D</name></decl></parameter>)</parameter_list>
<block>{<block_content>
 <expr_stmt><expr><call><name>DumpVar</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DumpVector</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>DumpState</name><modifier>*</modifier></type> <name>D</name></decl></parameter>)</parameter_list>
<block>{<block_content>
 <expr_stmt><expr><call><name>DumpInt</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <expr_stmt><expr><call><name>DumpMem</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><name>size</name></expr></argument>,<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DumpString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TString</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>DumpState</name><modifier>*</modifier></type> <name>D</name></decl></parameter>)</parameter_list>
<block>{<block_content>
 <if_stmt><if>if <condition>(<expr><name>s</name><operator>==</operator><name>NULL</name> <operator>||</operator> <call><name>getstr</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>==</operator><name>NULL</name></expr>)</condition>
 <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>size</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>DumpVar</name><argument_list>(<argument><expr><name>size</name></expr></argument>,<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 </block_content>}</block></if>
 <else>else
 <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>size</name><init>=<expr><name><name>s</name><operator>-&gt;</operator><name>tsv</name><operator>.</operator><name>len</name></name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>		<comment type="block">/* include trailing '\0' */</comment>
  <expr_stmt><expr><call><name>DumpVar</name><argument_list>(<argument><expr><name>size</name></expr></argument>,<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>DumpBlock</name><argument_list>(<argument><expr><call><name>getstr</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>size</name></expr></argument>,<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DumpCode</name><parameter_list>(<parameter><type><name>f</name></type></parameter>,<parameter><type><name>D</name></type></parameter>)</parameter_list></cpp:macro>	 <cpp:value>DumpVector(f-&gt;code,f-&gt;sizecode,sizeof(Instruction),D)</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DumpFunction</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Proto</name><modifier>*</modifier></type> <name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TString</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>DumpState</name><modifier>*</modifier></type> <name>D</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DumpConstants</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Proto</name><modifier>*</modifier></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>DumpState</name><modifier>*</modifier></type> <name>D</name></decl></parameter>)</parameter_list>
<block>{<block_content>
 <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>n</name><init>=<expr><name><name>f</name><operator>-&gt;</operator><name>sizek</name></name></expr></init></decl>;</decl_stmt>
 <expr_stmt><expr><call><name>DumpInt</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
 <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>TValue</name><modifier>*</modifier></type> <name>o</name><init>=<expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>k</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>DumpChar</name><argument_list>(<argument><expr><call><name>ttype</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <switch>switch <condition>(<expr><call><name>ttype</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
   <case>case <expr><name>LUA_TNIL</name></expr>:</case>
	<break>break;</break>
   <case>case <expr><name>LUA_TBOOLEAN</name></expr>:</case>
	<expr_stmt><expr><call><name>DumpChar</name><argument_list>(<argument><expr><call><name>bvalue</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>LUA_TNUMBER</name></expr>:</case>
	<expr_stmt><expr><call><name>DumpNumber</name><argument_list>(<argument><expr><call><name>nvalue</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <case>case <expr><name>LUA_TSTRING</name></expr>:</case>
	<expr_stmt><expr><call><name>DumpString</name><argument_list>(<argument><expr><call><name>rawtsvalue</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
   <default>default:</default>
	<expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>			<comment type="block">/* cannot happen */</comment>
	<break>break;</break>
  </block_content>}</block></switch>
 </block_content>}</block></for>
 <expr_stmt><expr><name>n</name><operator>=</operator><name><name>f</name><operator>-&gt;</operator><name>sizep</name></name></expr>;</expr_stmt>
 <expr_stmt><expr><call><name>DumpInt</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DumpFunction</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>f</name><operator>-&gt;</operator><name>source</name></name></expr></argument>,<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DumpDebug</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Proto</name><modifier>*</modifier></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>DumpState</name><modifier>*</modifier></type> <name>D</name></decl></parameter>)</parameter_list>
<block>{<block_content>
 <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
 <expr_stmt><expr><name>n</name><operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>D</name><operator>-&gt;</operator><name>strip</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>f</name><operator>-&gt;</operator><name>sizelineinfo</name></name></expr></else></ternary></expr>;</expr_stmt>
 <expr_stmt><expr><call><name>DumpVector</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>lineinfo</name></name></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <expr_stmt><expr><name>n</name><operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>D</name><operator>-&gt;</operator><name>strip</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>f</name><operator>-&gt;</operator><name>sizelocvars</name></name></expr></else></ternary></expr>;</expr_stmt>
 <expr_stmt><expr><call><name>DumpInt</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
 <block>{<block_content>
  <expr_stmt><expr><call><name>DumpString</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>locvars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>varname</name></expr></argument>,<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>DumpInt</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>locvars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>startpc</name></expr></argument>,<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>DumpInt</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>locvars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>endpc</name></expr></argument>,<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 </block_content>}</block></for>
 <expr_stmt><expr><name>n</name><operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>D</name><operator>-&gt;</operator><name>strip</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>f</name><operator>-&gt;</operator><name>sizeupvalues</name></name></expr></else></ternary></expr>;</expr_stmt>
 <expr_stmt><expr><call><name>DumpInt</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DumpString</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>upvalues</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DumpFunction</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Proto</name><modifier>*</modifier></type> <name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TString</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>DumpState</name><modifier>*</modifier></type> <name>D</name></decl></parameter>)</parameter_list>
<block>{<block_content>
 <expr_stmt><expr><call><name>DumpString</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>source</name></name><operator>==</operator><name>p</name> <operator>||</operator> <name><name>D</name><operator>-&gt;</operator><name>strip</name></name><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name><name>f</name><operator>-&gt;</operator><name>source</name></name></expr></else></ternary></expr></argument>,<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <expr_stmt><expr><call><name>DumpInt</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>linedefined</name></name></expr></argument>,<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <expr_stmt><expr><call><name>DumpInt</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>lastlinedefined</name></name></expr></argument>,<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <expr_stmt><expr><call><name>DumpChar</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>nups</name></name></expr></argument>,<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <expr_stmt><expr><call><name>DumpChar</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>numparams</name></name></expr></argument>,<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <expr_stmt><expr><call><name>DumpChar</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>is_vararg</name></name></expr></argument>,<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <expr_stmt><expr><call><name>DumpChar</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>maxstacksize</name></name></expr></argument>,<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <expr_stmt><expr><call><name>DumpCode</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <expr_stmt><expr><call><name>DumpConstants</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <expr_stmt><expr><call><name>DumpDebug</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DumpHeader</name><parameter_list>(<parameter><decl><type><name>DumpState</name><modifier>*</modifier></type> <name>D</name></decl></parameter>)</parameter_list>
<block>{<block_content>
 <decl_stmt><decl><type><name>char</name></type> <name><name>h</name><index>[<expr><name>LUAC_HEADERSIZE</name></expr>]</index></name></decl>;</decl_stmt>
 <expr_stmt><expr><call><name>luaU_header</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <expr_stmt><expr><call><name>DumpBlock</name><argument_list>(<argument><expr><name>h</name></expr></argument>,<argument><expr><name>LUAC_HEADERSIZE</name></expr></argument>,<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** dump Lua function as precompiled chunk
*/</comment>
<function><type><name>int</name></type> <name>luaU_dump</name> <parameter_list>(<parameter><decl><type><name>lua_State</name><modifier>*</modifier></type> <name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Proto</name><modifier>*</modifier></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>lua_Writer</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>strip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
 <decl_stmt><decl><type><name>DumpState</name></type> <name>D</name></decl>;</decl_stmt>
 <expr_stmt><expr><name><name>D</name><operator>.</operator><name>L</name></name><operator>=</operator><name>L</name></expr>;</expr_stmt>
 <expr_stmt><expr><name><name>D</name><operator>.</operator><name>writer</name></name><operator>=</operator><name>w</name></expr>;</expr_stmt>
 <expr_stmt><expr><name><name>D</name><operator>.</operator><name>data</name></name><operator>=</operator><name>data</name></expr>;</expr_stmt>
 <expr_stmt><expr><name><name>D</name><operator>.</operator><name>strip</name></name><operator>=</operator><name>strip</name></expr>;</expr_stmt>
 <expr_stmt><expr><name><name>D</name><operator>.</operator><name>status</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
 <expr_stmt><expr><call><name>DumpHeader</name><argument_list>(<argument><expr><operator>&amp;</operator><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <expr_stmt><expr><call><name>DumpFunction</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <return>return <expr><name><name>D</name><operator>.</operator><name>status</name></name></expr>;</return>
</block_content>}</block></function>
</unit>
