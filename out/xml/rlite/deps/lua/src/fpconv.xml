<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/rlite/deps/lua/src/fpconv.c"><comment type="block">/* fpconv - Floating point conversion routines
 *
 * Copyright (c) 2011-2012  Mark Pulford &lt;mark@kyne.com.au&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */</comment>

<comment type="block">/* JSON uses a '.' decimal separator. strtod() / sprintf() under C libraries
 * with locale support will break when the decimal separator is a comma.
 *
 * fpconv_* will around these issues with a translation buffer if required.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fpconv.h"</cpp:file></cpp:include>

<comment type="block">/* Lua CJSON assumes the locale is the same for all threads within a
 * process and doesn't change after initialisation.
 *
 * This avoids the need for per thread storage or expensive checks
 * for call. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name>locale_decimal_point</name> <init>= <expr><literal type="char">'.'</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/* In theory multibyte decimal_points are possible, but
 * Lua CJSON only supports UTF-8 and known locales only have
 * single byte decimal points ([.,]).
 *
 * localconv() may not be thread safe (=&gt;crash), and nl_langinfo() is
 * not supported on some platforms. Use sprintf() instead - if the
 * locale does change, at least Lua CJSON won't crash. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fpconv_update_locale</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%g"</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Failing this test might imply the platform has a buggy dtoa
     * implementation or wide characters */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'0'</literal> <operator>||</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'5'</literal> <operator>||</operator> <name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error: wide characters found or printf() bug."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>locale_decimal_point</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Check for a valid number character: [-+0-9a-yA-Y.]
 * Eg: -0.6e+5, infinity, 0xF0.F0pF0
 *
 * Used to find the probable end of a number. It doesn't matter if
 * invalid characters are counted - strtod() will find the valid
 * number if it exists.  The risk is that slightly more memory might
 * be allocated before a parse error occurs. */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>valid_number_character</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name>lower_ch</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><literal type="char">'0'</literal> <operator>&lt;=</operator> <name>ch</name> <operator>&amp;&amp;</operator> <name>ch</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'+'</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Hex digits, exponent (e), base (p), "infinity",.. */</comment>
    <expr_stmt><expr><name>lower_ch</name> <operator>=</operator> <name>ch</name> <operator>|</operator> <literal type="number">0x20</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="char">'a'</literal> <operator>&lt;=</operator> <name>lower_ch</name> <operator>&amp;&amp;</operator> <name>lower_ch</name> <operator>&lt;=</operator> <literal type="char">'y'</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Calculate the size of the buffer required for a strtod locale
 * conversion. */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>strtod_buffer_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>s</name></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><call><name>valid_number_character</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

    <return>return <expr><name>p</name> <operator>-</operator> <name>s</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Similar to strtod(), but must be passed the current locale's decimal point
 * character. Guaranteed to be called at the start of any valid number in a string */</comment>
<function><type><name>double</name></type> <name>fpconv_strtod</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nptr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>endptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>localbuf</name><index>[<expr><name>FPCONV_G_FMT_BUFSIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>endbuf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>buflen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>value</name></decl>;</decl_stmt>

    <comment type="block">/* System strtod() is fine when decimal point is '.' */</comment>
    <if_stmt><if>if <condition>(<expr><name>locale_decimal_point</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>strtod</name><argument_list>(<argument><expr><name>nptr</name></expr></argument>, <argument><expr><name>endptr</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>buflen</name> <operator>=</operator> <call><name>strtod_buffer_size</name><argument_list>(<argument><expr><name>nptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>buflen</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* No valid characters found, standard strtod() return */</comment>
        <expr_stmt><expr><operator>*</operator><name>endptr</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>nptr</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Duplicate number into buffer */</comment>
    <if_stmt><if>if <condition>(<expr><name>buflen</name> <operator>&gt;=</operator> <name>FPCONV_G_FMT_BUFSIZE</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Handle unusually large numbers */</comment>
        <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>buflen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="block">/* This is the common case.. */</comment>
        <expr_stmt><expr><name>buf</name> <operator>=</operator> <name>localbuf</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>nptr</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>buf</name><index>[<expr><name>buflen</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="block">/* Update decimal point character if found */</comment>
    <expr_stmt><expr><name>dp</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>dp</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><operator>*</operator><name>dp</name> <operator>=</operator> <name>locale_decimal_point</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>strtod</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>endptr</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>nptr</name><index>[<expr><name>endbuf</name> <operator>-</operator> <name>buf</name></expr>]</index></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>buflen</name> <operator>&gt;=</operator> <name>FPCONV_G_FMT_BUFSIZE</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* "fmt" must point to a buffer of at least 6 characters */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>set_number_format</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>precision</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>d1</name></decl>, <decl><type ref="prev"/><name>d2</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>&lt;=</operator> <name>precision</name> <operator>&amp;&amp;</operator> <name>precision</name> <operator>&lt;=</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Create printf format (%.14g) from precision */</comment>
    <expr_stmt><expr><name>d1</name> <operator>=</operator> <name>precision</name> <operator>/</operator> <literal type="number">10</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>d2</name> <operator>=</operator> <name>precision</name> <operator>%</operator> <literal type="number">10</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>fmt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'%'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>fmt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>d1</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>fmt</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal> <operator>+</operator> <name>d1</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>fmt</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal> <operator>+</operator> <name>d2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>fmt</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'g'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>fmt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Assumes there is always at least 32 characters available in the target buffer */</comment>
<function><type><name>int</name></type> <name>fpconv_g_fmt</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>precision</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>FPCONV_G_FMT_BUFSIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>fmt</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>set_number_format</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Pass through when decimal point character is dot. */</comment>
    <if_stmt><if>if <condition>(<expr><name>locale_decimal_point</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>FPCONV_G_FMT_BUFSIZE</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* snprintf() to a buffer then translate for other decimal point characters */</comment>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>FPCONV_G_FMT_BUFSIZE</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Copy into target location. Translate decimal point if required */</comment>
    <expr_stmt><expr><name>b</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
    <do>do <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>str</name><operator>++</operator> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>*</operator><name>b</name> <operator>==</operator> <name>locale_decimal_point</name></expr> ?</condition><then> <expr><literal type="char">'.'</literal></expr> </then><else>: <expr><operator>*</operator><name>b</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block> while<condition>(<expr><operator>*</operator><name>b</name><operator>++</operator></expr>)</condition>;</do>

    <return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>fpconv_init</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>fpconv_update_locale</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* vi:ai et sw=4 ts=4:
 */</comment>
</unit>
