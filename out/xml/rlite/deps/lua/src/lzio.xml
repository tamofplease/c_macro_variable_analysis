<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/rlite/deps/lua/src/lzio.c"><comment type="block">/*
** $Id: lzio.c,v 1.31.1.1 2007/12/27 13:02:25 roberto Exp $
** a generic input stream interface
** See Copyright Notice in lua.h
*/</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lzio_c</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_CORE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lua.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"llimits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lmem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lstate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lzio.h"</cpp:file></cpp:include>


<function><type><name>int</name></type> <name>luaZ_fill</name> <parameter_list>(<parameter><decl><type><name>ZIO</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>L</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buff</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>buff</name> <operator>=</operator> <call><name><name>z</name><operator>-&gt;</operator><name>reader</name></name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>buff</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>EOZ</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name>buff</name></expr>;</expr_stmt>
  <return>return <expr><call><name>char2int</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name><name>z</name><operator>-&gt;</operator><name>p</name></name><operator>++</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>luaZ_lookahead</name> <parameter_list>(<parameter><decl><type><name>ZIO</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>n</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>luaZ_fill</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOZ</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>EOZ</name></expr>;</return></block_content></block></if>
    <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>n</name></name><operator>++</operator></expr>;</expr_stmt>  <comment type="block">/* luaZ_fill removed first byte; put back it */</comment>
      <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name><operator>--</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>char2int</name><argument_list>(<argument><expr><operator>*</operator><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>luaZ_init</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>ZIO</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><name>lua_Reader</name></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>L</name></name> <operator>=</operator> <name>L</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>reader</name></name> <operator>=</operator> <name>reader</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/* --------------------------------------------------------------- read --- */</comment>
<function><type><name>size_t</name></type> <name>luaZ_read</name> <parameter_list>(<parameter><decl><type><name>ZIO</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <while>while <condition>(<expr><name>n</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>m</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>luaZ_lookahead</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOZ</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>n</name></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* return number of missing bytes */</comment>
    <expr_stmt><expr><name>m</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>n</name> <operator>&lt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>n</name></name><operator>)</operator></expr> ?</condition><then> <expr><name>n</name></expr> </then><else>: <expr><name><name>z</name><operator>-&gt;</operator><name>n</name></name></expr></else></ternary></expr>;</expr_stmt>  <comment type="block">/* min. between n and z-&gt;n */</comment>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>n</name></name> <operator>-=</operator> <name>m</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name> <operator>+=</operator> <name>m</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>b</name> <operator>+</operator> <name>m</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>-=</operator> <name>m</name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ------------------------------------------------------------------------ */</comment>
<function><type><name>char</name> <modifier>*</modifier></type><name>luaZ_openspace</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>Mbuffer</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name><name>buff</name><operator>-&gt;</operator><name>buffsize</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <name>LUA_MINBUFFER</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name> <operator>=</operator> <name>LUA_MINBUFFER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>luaZ_resizebuffer</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name><name>buff</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</return>
</block_content>}</block></function>


</unit>
