<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/rlite/deps/lua/src/print.c"><comment type="block">/*
** $Id: print.c,v 1.55a 2006/05/31 13:30:05 lhf Exp $
** print bytecodes
** See Copyright Notice in lua.h
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>luac_c</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_CORE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ldebug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lobject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lopcodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lundump.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PrintFunction</name></cpp:macro>	<cpp:value>luaU_print</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Sizeof</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>((int)sizeof(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VOID</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>((const void*)(p))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PrintString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TString</name><modifier>*</modifier></type> <name>ts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
 <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>s</name><init>=<expr><call><name>getstr</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>n</name><init>=<expr><name><name>ts</name><operator>-&gt;</operator><name>tsv</name><operator>.</operator><name>len</name></name></expr></init></decl>;</decl_stmt>
 <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'"'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
 <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>c</name><init>=<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name>c</name></expr>)</condition>
  <block>{<block_content>
   <case>case <expr><literal type="char">'"'</literal></expr>:</case> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\\\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
   <case>case <expr><literal type="char">'\\'</literal></expr>:</case> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\\\\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
   <case>case <expr><literal type="char">'\a'</literal></expr>:</case> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\\a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
   <case>case <expr><literal type="char">'\b'</literal></expr>:</case> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\\b"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
   <case>case <expr><literal type="char">'\f'</literal></expr>:</case> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\\f"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
   <case>case <expr><literal type="char">'\n'</literal></expr>:</case> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
   <case>case <expr><literal type="char">'\r'</literal></expr>:</case> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\\r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
   <case>case <expr><literal type="char">'\t'</literal></expr>:</case> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
   <case>case <expr><literal type="char">'\v'</literal></expr>:</case> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\\v"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
   <default>default:</default>	<if_stmt><if>if <condition>(<expr><call><name>isprint</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
   			<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\\%03u"</literal></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
  </block_content>}</block></switch>
 </block_content>}</block></for>
 <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'"'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PrintConstant</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Proto</name><modifier>*</modifier></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
 <decl_stmt><decl><type><specifier>const</specifier> <name>TValue</name><modifier>*</modifier></type> <name>o</name><init>=<expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>k</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
 <switch>switch <condition>(<expr><call><name>ttype</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition>
 <block>{<block_content>
  <case>case <expr><name>LUA_TNIL</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"nil"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
  <case>case <expr><name>LUA_TBOOLEAN</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>bvalue</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
  <case>case <expr><name>LUA_TNUMBER</name></expr>:</case>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>LUA_NUMBER_FMT</name></expr></argument>,<argument><expr><call><name>nvalue</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
  <case>case <expr><name>LUA_TSTRING</name></expr>:</case>
	<expr_stmt><expr><call><name>PrintString</name><argument_list>(<argument><expr><call><name>rawtsvalue</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
  <default>default:</default>				<comment type="block">/* cannot happen */</comment>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"? type=%d"</literal></expr></argument>,<argument><expr><call><name>ttype</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
 </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PrintCode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Proto</name><modifier>*</modifier></type> <name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
 <decl_stmt><decl><type><specifier>const</specifier> <name>Instruction</name><modifier>*</modifier></type> <name>code</name><init>=<expr><name><name>f</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl>;</decl_stmt>
 <decl_stmt><decl><type><name>int</name></type> <name>pc</name></decl>,<decl><type ref="prev"/><name>n</name><init>=<expr><name><name>f</name><operator>-&gt;</operator><name>sizecode</name></name></expr></init></decl>;</decl_stmt>
 <for>for <control>(<init><expr><name>pc</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>pc</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>pc</name><operator>++</operator></expr></incr>)</control>
 <block>{<block_content>
  <decl_stmt><decl><type><name>Instruction</name></type> <name>i</name><init>=<expr><name><name>code</name><index>[<expr><name>pc</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>OpCode</name></type> <name>o</name><init>=<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>a</name><init>=<expr><call><name>GETARG_A</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>b</name><init>=<expr><call><name>GETARG_B</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>c</name><init>=<expr><call><name>GETARG_C</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>bx</name><init>=<expr><call><name>GETARG_Bx</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>sbx</name><init>=<expr><call><name>GETARG_sBx</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>line</name><init>=<expr><call><name>getline</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t%d\t"</literal></expr></argument>,<argument><expr><name>pc</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>line</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[%d]\t"</literal></expr></argument>,<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[-]\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%-9s\t"</literal></expr></argument>,<argument><expr><name><name>luaP_opnames</name><index>[<expr><name>o</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <switch>switch <condition>(<expr><call><name>getOpMode</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
   <case>case <expr><name>iABC</name></expr>:</case>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>getBMode</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call><operator>!=</operator><name>OpArgN</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %d"</literal></expr></argument>,<argument><expr><ternary><condition><expr><call><name>ISK</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>-</operator><call><name>INDEXK</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>)</operator></expr> </then><else>: <expr><name>b</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>getCMode</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call><operator>!=</operator><name>OpArgN</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %d"</literal></expr></argument>,<argument><expr><ternary><condition><expr><call><name>ISK</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>-</operator><call><name>INDEXK</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator></expr> </then><else>: <expr><name>c</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <break>break;</break>
   <case>case <expr><name>iABx</name></expr>:</case>
    <if_stmt><if>if <condition>(<expr><call><name>getBMode</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call><operator>==</operator><name>OpArgK</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>bx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>bx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <break>break;</break>
   <case>case <expr><name>iAsBx</name></expr>:</case>
    <if_stmt><if>if <condition>(<expr><name>o</name><operator>==</operator><name>OP_JMP</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><name>sbx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>sbx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <break>break;</break>
  </block_content>}</block></switch>
  <switch>switch <condition>(<expr><name>o</name></expr>)</condition>
  <block>{<block_content>
   <case>case <expr><name>OP_LOADK</name></expr>:</case>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>PrintConstant</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name>bx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
   <case>case <expr><name>OP_GETUPVAL</name></expr>:</case>
   <case>case <expr><name>OP_SETUPVAL</name></expr>:</case>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t; %s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>sizeupvalues</name></name><operator>&gt;</operator><literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>upvalues</name><index>[<expr><name>b</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">"-"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
   <case>case <expr><name>OP_GETGLOBAL</name></expr>:</case>
   <case>case <expr><name>OP_SETGLOBAL</name></expr>:</case>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t; %s"</literal></expr></argument>,<argument><expr><call><name>svalue</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>k</name><index>[<expr><name>bx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
   <case>case <expr><name>OP_GETTABLE</name></expr>:</case>
   <case>case <expr><name>OP_SELF</name></expr>:</case>
    <if_stmt><if>if <condition>(<expr><call><name>ISK</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>PrintConstant</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><call><name>INDEXK</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
    <break>break;</break>
   <case>case <expr><name>OP_SETTABLE</name></expr>:</case>
   <case>case <expr><name>OP_ADD</name></expr>:</case>
   <case>case <expr><name>OP_SUB</name></expr>:</case>
   <case>case <expr><name>OP_MUL</name></expr>:</case>
   <case>case <expr><name>OP_DIV</name></expr>:</case>
   <case>case <expr><name>OP_POW</name></expr>:</case>
   <case>case <expr><name>OP_EQ</name></expr>:</case>
   <case>case <expr><name>OP_LT</name></expr>:</case>
   <case>case <expr><name>OP_LE</name></expr>:</case>
    <if_stmt><if>if <condition>(<expr><call><name>ISK</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>ISK</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
     <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <if_stmt><if>if <condition>(<expr><call><name>ISK</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>PrintConstant</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><call><name>INDEXK</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
     <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <if_stmt><if>if <condition>(<expr><call><name>ISK</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>PrintConstant</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><call><name>INDEXK</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <break>break;</break>
   <case>case <expr><name>OP_JMP</name></expr>:</case>
   <case>case <expr><name>OP_FORLOOP</name></expr>:</case>
   <case>case <expr><name>OP_FORPREP</name></expr>:</case>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t; to %d"</literal></expr></argument>,<argument><expr><name>sbx</name><operator>+</operator><name>pc</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
   <case>case <expr><name>OP_CLOSURE</name></expr>:</case>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t; %p"</literal></expr></argument>,<argument><expr><call><name>VOID</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>bx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
   <case>case <expr><name>OP_SETLIST</name></expr>:</case>
    <if_stmt><if>if <condition>(<expr><name>c</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t; %d"</literal></expr></argument>,<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>code</name><index>[<expr><operator>++</operator><name>pc</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t; %d"</literal></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <break>break;</break>
   <default>default:</default>
    <break>break;</break>
  </block_content>}</block></switch>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 </block_content>}</block></for>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>(x==1)?"":"s"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>x,SS(x)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PrintHeader</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Proto</name><modifier>*</modifier></type> <name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
 <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>s</name><init>=<expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 <if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name><operator>==</operator><literal type="char">'@'</literal> <operator>||</operator> <operator>*</operator><name>s</name><operator>==</operator><literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content>
  <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
 <if type="elseif">else if <condition>(<expr><operator>*</operator><name>s</name><operator>==</operator><name><name>LUA_SIGNATURE</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
  <expr_stmt><expr><name>s</name><operator>=</operator><literal type="string">"(bstring)"</literal></expr>;</expr_stmt></block_content></block></if>
 <else>else<block type="pseudo"><block_content>
  <expr_stmt><expr><name>s</name><operator>=</operator><literal type="string">"(string)"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
 <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n%s &lt;%s:%d,%d&gt; (%d instruction%s, %d bytes at %p)\n"</literal></expr></argument>,
 	<argument><expr><ternary><condition><expr><operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>linedefined</name></name><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"main"</literal></expr></then><else>:<expr><literal type="string">"function"</literal></expr></else></ternary></expr></argument>,<argument><expr><name>s</name></expr></argument>,
	<argument><expr><name><name>f</name><operator>-&gt;</operator><name>linedefined</name></name></expr></argument>,<argument><expr><name><name>f</name><operator>-&gt;</operator><name>lastlinedefined</name></name></expr></argument>,
	<argument><expr><call><name>S</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>sizecode</name></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name><name>f</name><operator>-&gt;</operator><name>sizecode</name></name><operator>*</operator><call><name>Sizeof</name><argument_list>(<argument><expr><name>Instruction</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>VOID</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d%s param%s, %d slot%s, %d upvalue%s, "</literal></expr></argument>,
	<argument><expr><name><name>f</name><operator>-&gt;</operator><name>numparams</name></name></expr></argument>,<argument><expr><ternary><condition><expr><name><name>f</name><operator>-&gt;</operator><name>is_vararg</name></name></expr>?</condition><then><expr><literal type="string">"+"</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,<argument><expr><call><name>SS</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>numparams</name></name></expr></argument>)</argument_list></call></expr></argument>,
	<argument><expr><call><name>S</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>maxstacksize</name></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>S</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>nups</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d local%s, %d constant%s, %d function%s\n"</literal></expr></argument>,
	<argument><expr><call><name>S</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>sizelocvars</name></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>S</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>sizek</name></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>S</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>sizep</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PrintConstants</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Proto</name><modifier>*</modifier></type> <name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
 <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>n</name><init>=<expr><name><name>f</name><operator>-&gt;</operator><name>sizek</name></name></expr></init></decl>;</decl_stmt>
 <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"constants (%d) for %p:\n"</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><call><name>VOID</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
 <block>{<block_content>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t%d\t"</literal></expr></argument>,<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>PrintConstant</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PrintLocals</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Proto</name><modifier>*</modifier></type> <name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
 <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>n</name><init>=<expr><name><name>f</name><operator>-&gt;</operator><name>sizelocvars</name></name></expr></init></decl>;</decl_stmt>
 <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"locals (%d) for %p:\n"</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><call><name>VOID</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
 <block>{<block_content>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t%d\t%s\t%d\t%d\n"</literal></expr></argument>,
  <argument><expr><name>i</name></expr></argument>,<argument><expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>locvars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>varname</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name><name>f</name><operator>-&gt;</operator><name>locvars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>startpc</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name><name>f</name><operator>-&gt;</operator><name>locvars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>endpc</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PrintUpvalues</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Proto</name><modifier>*</modifier></type> <name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
 <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>n</name><init>=<expr><name><name>f</name><operator>-&gt;</operator><name>sizeupvalues</name></name></expr></init></decl>;</decl_stmt>
 <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"upvalues (%d) for %p:\n"</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><call><name>VOID</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>upvalues</name></name><operator>==</operator><name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
 <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
 <block>{<block_content>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t%d\t%s\n"</literal></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>upvalues</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>PrintFunction</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Proto</name><modifier>*</modifier></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>full</name></decl></parameter>)</parameter_list>
<block>{<block_content>
 <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>n</name><init>=<expr><name><name>f</name><operator>-&gt;</operator><name>sizep</name></name></expr></init></decl>;</decl_stmt>
 <expr_stmt><expr><call><name>PrintHeader</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <expr_stmt><expr><call><name>PrintCode</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <if_stmt><if>if <condition>(<expr><name>full</name></expr>)</condition>
 <block>{<block_content>
  <expr_stmt><expr><call><name>PrintConstants</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>PrintLocals</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>PrintUpvalues</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 </block_content>}</block></if></if_stmt>
 <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>PrintFunction</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name>full</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>
</unit>
