<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/rlite/deps/lua/src/ldebug.c"><comment type="block">/*
** $Id: ldebug.c,v 2.29.1.6 2008/05/08 16:56:26 roberto Exp $
** Debug Interface
** See Copyright Notice in lua.h
*/</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ldebug_c</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_CORE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lua.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lcode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ldebug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ldo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lfunc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lobject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lopcodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lstate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ltable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ltm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lvm.h"</cpp:file></cpp:include>



<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>getfuncname</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>CallInfo</name> <modifier>*</modifier></type><name>ci</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><specifier>static</specifier> <name>int</name></type> <name>currentpc</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>CallInfo</name> <modifier>*</modifier></type><name>ci</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isLua</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* function is not a Lua function? */</comment>
  <if_stmt><if>if <condition>(<expr><name>ci</name> <operator>==</operator> <name><name>L</name><operator>-&gt;</operator><name>ci</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>savedpc</name></name> <operator>=</operator> <name><name>L</name><operator>-&gt;</operator><name>savedpc</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><call><name>pcRel</name><argument_list>(<argument><expr><name><name>ci</name><operator>-&gt;</operator><name>savedpc</name></name></expr></argument>, <argument><expr><call><name>ci_func</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>l</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>currentline</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>CallInfo</name> <modifier>*</modifier></type><name>ci</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>pc</name> <init>= <expr><call><name>currentpc</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>  <comment type="block">/* only active lua functions have current-line information */</comment>
  <else>else<block type="pseudo"><block_content>
    <return>return <expr><call><name>getline</name><argument_list>(<argument><expr><call><name>ci_func</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>l</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
** this function can be called asynchronous (e.g. during a signal)
*/</comment>
<function><type><name>LUA_API</name> <name>int</name></type> <name>lua_sethook</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>lua_Hook</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>func</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>mask</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* turn off hooks? */</comment>
    <expr_stmt><expr><name>mask</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>func</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>hook</name></name> <operator>=</operator> <name>func</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>basehookcount</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>resethookcount</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>hookmask</name></name> <operator>=</operator> <call><name>cast_byte</name><argument_list>(<argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>lua_Hook</name></type> <name>lua_gethook</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name><name>L</name><operator>-&gt;</operator><name>hook</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>int</name></type> <name>lua_gethookmask</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name><name>L</name><operator>-&gt;</operator><name>hookmask</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>int</name></type> <name>lua_gethookcount</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name><name>L</name><operator>-&gt;</operator><name>basehookcount</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>int</name></type> <name>lua_getstack</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>lua_Debug</name> <modifier>*</modifier></type><name>ar</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CallInfo</name> <modifier>*</modifier></type><name>ci</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>ci</name> <operator>=</operator> <name><name>L</name><operator>-&gt;</operator><name>ci</name></name></expr>;</init> <condition><expr><name>level</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ci</name> <operator>&gt;</operator> <name><name>L</name><operator>-&gt;</operator><name>base_ci</name></name></expr>;</condition> <incr><expr><name>ci</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>level</name><operator>--</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>f_isLua</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* Lua function? */</comment>
      <expr_stmt><expr><name>level</name> <operator>-=</operator> <name><name>ci</name><operator>-&gt;</operator><name>tailcalls</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* skip lost tail calls */</comment>
  </block_content>}</block></for>
  <if_stmt><if>if <condition>(<expr><name>level</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ci</name> <operator>&gt;</operator> <name><name>L</name><operator>-&gt;</operator><name>base_ci</name></name></expr>)</condition> <block>{<block_content>  <comment type="block">/* level found? */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>i_ci</name></name> <operator>=</operator> <call><name>cast_int</name><argument_list>(<argument><expr><name>ci</name> <operator>-</operator> <name><name>L</name><operator>-&gt;</operator><name>base_ci</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name>level</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* level is of a lost tail call? */</comment>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>i_ci</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>status</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>  <comment type="block">/* no such level */</comment>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>Proto</name> <modifier>*</modifier></type><name>getluaproto</name> <parameter_list>(<parameter><decl><type><name>CallInfo</name> <modifier>*</modifier></type><name>ci</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><ternary><condition><expr><call><name>isLua</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>ci_func</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>l</name><operator>.</operator><name>p</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>findlocal</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>CallInfo</name> <modifier>*</modifier></type><name>ci</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Proto</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><call><name>getluaproto</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>fp</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>name</name> <operator>=</operator> <call><name>luaF_getlocalname</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><call><name>currentpc</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>name</name></expr>;</return></block_content></block></if>  <comment type="block">/* is a local variable in a Lua function */</comment>
  <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>StkId</name></type> <name>limit</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>ci</name> <operator>==</operator> <name><name>L</name><operator>-&gt;</operator><name>ci</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr> </then><else>: <expr><operator>(</operator><name>ci</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>-&gt;</operator><name>func</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>limit</name> <operator>-</operator> <name><name>ci</name><operator>-&gt;</operator><name>base</name></name> <operator>&gt;=</operator> <name>n</name> <operator>&amp;&amp;</operator> <name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* is 'n' inside 'ci' stack? */</comment>
      <return>return <expr><literal type="string">"(*temporary)"</literal></expr>;</return></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
      <return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lua_getlocal</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lua_Debug</name> <modifier>*</modifier></type><name>ar</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>CallInfo</name> <modifier>*</modifier></type><name>ci</name> <init>= <expr><name><name>L</name><operator>-&gt;</operator><name>base_ci</name></name> <operator>+</operator> <name><name>ar</name><operator>-&gt;</operator><name>i_ci</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>findlocal</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>ci</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>luaA_pushobject</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>ci</name><operator>-&gt;</operator><name>base</name></name> <operator>+</operator> <operator>(</operator><name>n</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>name</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lua_setlocal</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lua_Debug</name> <modifier>*</modifier></type><name>ar</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>CallInfo</name> <modifier>*</modifier></type><name>ci</name> <init>= <expr><name><name>L</name><operator>-&gt;</operator><name>base_ci</name></name> <operator>+</operator> <name><name>ar</name><operator>-&gt;</operator><name>i_ci</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>findlocal</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>ci</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>setobjs2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>ci</name><operator>-&gt;</operator><name>base</name></name> <operator>+</operator> <operator>(</operator><name>n</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>--</operator></expr>;</expr_stmt>  <comment type="block">/* pop value */</comment>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>name</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>funcinfo</name> <parameter_list>(<parameter><decl><type><name>lua_Debug</name> <modifier>*</modifier></type><name>ar</name></decl></parameter>, <parameter><decl><type><name>Closure</name> <modifier>*</modifier></type><name>cl</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>cl</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>isC</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>source</name></name> <operator>=</operator> <literal type="string">"=[C]"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>linedefined</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>lastlinedefined</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>what</name></name> <operator>=</operator> <literal type="string">"C"</literal></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>source</name></name> <operator>=</operator> <call><name>getstr</name><argument_list>(<argument><expr><name><name>cl</name><operator>-&gt;</operator><name>l</name><operator>.</operator><name>p</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>linedefined</name></name> <operator>=</operator> <name><name>cl</name><operator>-&gt;</operator><name>l</name><operator>.</operator><name>p</name><operator>-&gt;</operator><name>linedefined</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>lastlinedefined</name></name> <operator>=</operator> <name><name>cl</name><operator>-&gt;</operator><name>l</name><operator>.</operator><name>p</name><operator>-&gt;</operator><name>lastlinedefined</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>what</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>ar</name><operator>-&gt;</operator><name>linedefined</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"main"</literal></expr> </then><else>: <expr><literal type="string">"Lua"</literal></expr></else></ternary></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>luaO_chunkid</name><argument_list>(<argument><expr><name><name>ar</name><operator>-&gt;</operator><name>short_src</name></name></expr></argument>, <argument><expr><name><name>ar</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name>LUA_IDSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>info_tailcall</name> <parameter_list>(<parameter><decl><type><name>lua_Debug</name> <modifier>*</modifier></type><name>ar</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name><name>ar</name><operator>-&gt;</operator><name>namewhat</name></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>what</name></name> <operator>=</operator> <literal type="string">"tail"</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>lastlinedefined</name></name> <operator>=</operator> <name><name>ar</name><operator>-&gt;</operator><name>linedefined</name></name> <operator>=</operator> <name><name>ar</name><operator>-&gt;</operator><name>currentline</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>source</name></name> <operator>=</operator> <literal type="string">"=(tail call)"</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaO_chunkid</name><argument_list>(<argument><expr><name><name>ar</name><operator>-&gt;</operator><name>short_src</name></name></expr></argument>, <argument><expr><name><name>ar</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name>LUA_IDSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>nups</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>collectvalidlines</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>Closure</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>f</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>isC</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>setnilvalue</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>Table</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><call><name>luaH_new</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>lineinfo</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>l</name><operator>.</operator><name>p</name><operator>-&gt;</operator><name>lineinfo</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>f</name><operator>-&gt;</operator><name>l</name><operator>.</operator><name>p</name><operator>-&gt;</operator><name>sizelineinfo</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>setbvalue</name><argument_list>(<argument><expr><call><name>luaH_setnum</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name><name>lineinfo</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <expr_stmt><expr><call><name>sethvalue</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>incr_top</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>auxgetinfo</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>what</name></decl></parameter>, <parameter><decl><type><name>lua_Debug</name> <modifier>*</modifier></type><name>ar</name></decl></parameter>,
                    <parameter><decl><type><name>Closure</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>CallInfo</name> <modifier>*</modifier></type><name>ci</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>info_tailcall</name><argument_list>(<argument><expr><name>ar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>status</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>what</name></expr>;</condition> <incr><expr><name>what</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <switch>switch <condition>(<expr><operator>*</operator><name>what</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><literal type="char">'S'</literal></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>funcinfo</name><argument_list>(<argument><expr><name>ar</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><literal type="char">'l'</literal></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>currentline</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>ci</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>currentline</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><literal type="char">'u'</literal></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>nups</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>nupvalues</name></name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><literal type="char">'n'</literal></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>namewhat</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>ci</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>getfuncname</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>ci</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ar</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>ar</name><operator>-&gt;</operator><name>namewhat</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>namewhat</name></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>  <comment type="block">/* not found */</comment>
          <expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><literal type="char">'L'</literal></expr>:</case>
      <case>case <expr><literal type="char">'f'</literal></expr>:</case>  <comment type="block">/* handled by lua_getinfo */</comment>
        <break>break;</break>
      <default>default:</default> <expr_stmt><expr><name>status</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>  <comment type="block">/* invalid option */</comment>
    </block_content>}</block></switch>
  </block_content>}</block></for>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>LUA_API</name> <name>int</name></type> <name>lua_getinfo</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>what</name></decl></parameter>, <parameter><decl><type><name>lua_Debug</name> <modifier>*</modifier></type><name>ar</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Closure</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CallInfo</name> <modifier>*</modifier></type><name>ci</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>what</name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>StkId</name></type> <name>func</name> <init>= <expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>luai_apicheck</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>ttisfunction</name><argument_list>(<argument><expr><name>func</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>what</name><operator>++</operator></expr>;</expr_stmt>  <comment type="block">/* skip the '&gt;' */</comment>
    <expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>clvalue</name><argument_list>(<argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>--</operator></expr>;</expr_stmt>  <comment type="block">/* pop function */</comment>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name><name>ar</name><operator>-&gt;</operator><name>i_ci</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* no tail call? */</comment>
    <expr_stmt><expr><name>ci</name> <operator>=</operator> <name><name>L</name><operator>-&gt;</operator><name>base_ci</name></name> <operator>+</operator> <name><name>ar</name><operator>-&gt;</operator><name>i_ci</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>ttisfunction</name><argument_list>(<argument><expr><name><name>ci</name><operator>-&gt;</operator><name>func</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>clvalue</name><argument_list>(<argument><expr><name><name>ci</name><operator>-&gt;</operator><name>func</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>auxgetinfo</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>what</name></expr></argument>, <argument><expr><name>ar</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>what</name></expr></argument>, <argument><expr><literal type="char">'f'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>setnilvalue</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>setclvalue</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <expr_stmt><expr><call><name>incr_top</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>what</name></expr></argument>, <argument><expr><literal type="char">'L'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>collectvalidlines</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** {======================================================
** Symbolic Execution and code checker
** =======================================================
*/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>check</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>if (!(x)) return 0;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>checkjump</name><parameter_list>(<parameter><type><name>pt</name></type></parameter>,<parameter><type><name>pc</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>check(0 &lt;= pc &amp;&amp; pc &lt; pt-&gt;sizecode)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>checkreg</name><parameter_list>(<parameter><type><name>pt</name></type></parameter>,<parameter><type><name>reg</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>check((reg) &lt; (pt)-&gt;maxstacksize)</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>int</name></type> <name>precheck</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Proto</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><name><name>pt</name><operator>-&gt;</operator><name>maxstacksize</name></name> <operator>&lt;=</operator> <name>MAXSTACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><name><name>pt</name><operator>-&gt;</operator><name>numparams</name></name><operator>+</operator><operator>(</operator><name><name>pt</name><operator>-&gt;</operator><name>is_vararg</name></name> <operator>&amp;</operator> <name>VARARG_HASARG</name><operator>)</operator> <operator>&lt;=</operator> <name><name>pt</name><operator>-&gt;</operator><name>maxstacksize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name><name>pt</name><operator>-&gt;</operator><name>is_vararg</name></name> <operator>&amp;</operator> <name>VARARG_NEEDSARG</name><operator>)</operator> <operator>||</operator>
              <operator>(</operator><name><name>pt</name><operator>-&gt;</operator><name>is_vararg</name></name> <operator>&amp;</operator> <name>VARARG_HASARG</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><name><name>pt</name><operator>-&gt;</operator><name>sizeupvalues</name></name> <operator>&lt;=</operator> <name><name>pt</name><operator>-&gt;</operator><name>nups</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><name><name>pt</name><operator>-&gt;</operator><name>sizelineinfo</name></name> <operator>==</operator> <name><name>pt</name><operator>-&gt;</operator><name>sizecode</name></name> <operator>||</operator> <name><name>pt</name><operator>-&gt;</operator><name>sizelineinfo</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><name><name>pt</name><operator>-&gt;</operator><name>sizecode</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>GET_OPCODE</name><argument_list>(<argument><expr><name><name>pt</name><operator>-&gt;</operator><name>code</name><index>[<expr><name><name>pt</name><operator>-&gt;</operator><name>sizecode</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OP_RETURN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>checkopenop</name><parameter_list>(<parameter><type><name>pt</name></type></parameter>,<parameter><type><name>pc</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>luaG_checkopenop((pt)-&gt;code[(pc)+1])</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>luaG_checkopenop</name> <parameter_list>(<parameter><decl><type><name>Instruction</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>OP_CALL</name></expr>:</case>
    <case>case <expr><name>OP_TAILCALL</name></expr>:</case>
    <case>case <expr><name>OP_RETURN</name></expr>:</case>
    <case>case <expr><name>OP_SETLIST</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><call><name>GETARG_B</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block>
    <default>default:</default> <return>return <expr><literal type="number">0</literal></expr>;</return>  <comment type="block">/* invalid instruction after an open call */</comment>
  </block_content>}</block></switch>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>checkArgMode</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Proto</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>OpArgMask</name></name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>mode</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>OpArgN</name></expr>:</case> <expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>OpArgU</name></expr>:</case> <break>break;</break>
    <case>case <expr><name>OpArgR</name></expr>:</case> <expr_stmt><expr><call><name>checkreg</name><argument_list>(<argument><expr><name>pt</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>OpArgK</name></expr>:</case>
      <expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>ISK</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>INDEXK</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>pt</name><operator>-&gt;</operator><name>sizek</name></name></expr> </then><else>: <expr><name>r</name> <operator>&lt;</operator> <name><name>pt</name><operator>-&gt;</operator><name>maxstacksize</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>Instruction</name></type> <name>symbexec</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Proto</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lastpc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>reg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>pc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>last</name></decl>;</decl_stmt>  <comment type="block">/* stores position of last instruction that changed `reg' */</comment>
  <expr_stmt><expr><name>last</name> <operator>=</operator> <name><name>pt</name><operator>-&gt;</operator><name>sizecode</name></name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>  <comment type="block">/* points to final return (a `neutral' instruction) */</comment>
  <expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><call><name>precheck</name><argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>pc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pc</name> <operator>&lt;</operator> <name>lastpc</name></expr>;</condition> <incr><expr><name>pc</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>Instruction</name></type> <name>i</name> <init>= <expr><name><name>pt</name><operator>-&gt;</operator><name>code</name><index>[<expr><name>pc</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>OpCode</name></type> <name>op</name> <init>= <expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><call><name>GETARG_A</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><name>op</name> <operator>&lt;</operator> <name>NUM_OPCODES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>checkreg</name><argument_list>(<argument><expr><name>pt</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <switch>switch <condition>(<expr><call><name>getOpMode</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>iABC</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>GETARG_B</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>GETARG_C</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><call><name>checkArgMode</name><argument_list>(<argument><expr><name>pt</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><call><name>getBMode</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><call><name>checkArgMode</name><argument_list>(<argument><expr><name>pt</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>getCMode</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>iABx</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>GETARG_Bx</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>getBMode</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OpArgK</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><name>b</name> <operator>&lt;</operator> <name><name>pt</name><operator>-&gt;</operator><name>sizek</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>iAsBx</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>GETARG_sBx</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>getBMode</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OpArgR</name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>int</name></type> <name>dest</name> <init>= <expr><name>pc</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><name>b</name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>dest</name> <operator>&amp;&amp;</operator> <name>dest</name> <operator>&lt;</operator> <name><name>pt</name><operator>-&gt;</operator><name>sizecode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>dest</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
            <comment type="block">/* check that it does not jump to a setlist count; this
               is tricky, because the count from a previous setlist may
               have the same value of an invalid setlist; so, we must
               go all the way back to the first of them (if any) */</comment>
            <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>dest</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
              <decl_stmt><decl><type><name>Instruction</name></type> <name>d</name> <init>= <expr><name><name>pt</name><operator>-&gt;</operator><name>code</name><index>[<expr><name>dest</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
              <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OP_SETLIST</name> <operator>&amp;&amp;</operator> <call><name>GETARG_C</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
            </block_content>}</block></for>
            <comment type="block">/* if 'j' is even, previous value is not a setlist (even if
               it looks like one) */</comment>
            <expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><operator>(</operator><name>j</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
      </block_content>}</block>
    </block_content>}</block></switch>
    <if_stmt><if>if <condition>(<expr><call><name>testAMode</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>reg</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>last</name> <operator>=</operator> <name>pc</name></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* change register `a' */</comment>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>testTMode</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><name>pc</name><operator>+</operator><literal type="number">2</literal> <operator>&lt;</operator> <name><name>pt</name><operator>-&gt;</operator><name>sizecode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* check skip */</comment>
      <expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name><name>pt</name><operator>-&gt;</operator><name>code</name><index>[<expr><name>pc</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OP_JMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>OP_LOADBOOL</name></expr>:</case> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* does it jump? */</comment>
          <expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><name>pc</name><operator>+</operator><literal type="number">2</literal> <operator>&lt;</operator> <name><name>pt</name><operator>-&gt;</operator><name>sizecode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* check its jump */</comment>
          <expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name><name>pt</name><operator>-&gt;</operator><name>code</name><index>[<expr><name>pc</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OP_SETLIST</name> <operator>||</operator>
                <call><name>GETARG_C</name><argument_list>(<argument><expr><name><name>pt</name><operator>-&gt;</operator><name>code</name><index>[<expr><name>pc</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>OP_LOADNIL</name></expr>:</case> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>a</name> <operator>&lt;=</operator> <name>reg</name> <operator>&amp;&amp;</operator> <name>reg</name> <operator>&lt;=</operator> <name>b</name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><name>last</name> <operator>=</operator> <name>pc</name></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* set registers from `a' to `b' */</comment>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>OP_GETUPVAL</name></expr>:</case>
      <case>case <expr><name>OP_SETUPVAL</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><name>b</name> <operator>&lt;</operator> <name><name>pt</name><operator>-&gt;</operator><name>nups</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>OP_GETGLOBAL</name></expr>:</case>
      <case>case <expr><name>OP_SETGLOBAL</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><call><name>ttisstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pt</name><operator>-&gt;</operator><name>k</name><index>[<expr><name>b</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>OP_SELF</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>checkreg</name><argument_list>(<argument><expr><name>pt</name></expr></argument>, <argument><expr><name>a</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>reg</name> <operator>==</operator> <name>a</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>last</name> <operator>=</operator> <name>pc</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>OP_CONCAT</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><name>b</name> <operator>&lt;</operator> <name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* at least two operands */</comment>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>OP_TFORLOOP</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><name>c</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* at least one result (control variable) */</comment>
        <expr_stmt><expr><call><name>checkreg</name><argument_list>(<argument><expr><name>pt</name></expr></argument>, <argument><expr><name>a</name><operator>+</operator><literal type="number">2</literal><operator>+</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* space for results */</comment>
        <if_stmt><if>if <condition>(<expr><name>reg</name> <operator>&gt;=</operator> <name>a</name><operator>+</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>last</name> <operator>=</operator> <name>pc</name></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* affect all regs above its base */</comment>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>OP_FORLOOP</name></expr>:</case>
      <case>case <expr><name>OP_FORPREP</name></expr>:</case>
        <expr_stmt><expr><call><name>checkreg</name><argument_list>(<argument><expr><name>pt</name></expr></argument>, <argument><expr><name>a</name><operator>+</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* go through */</comment>
      <case>case <expr><name>OP_JMP</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>dest</name> <init>= <expr><name>pc</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><name>b</name></expr></init></decl>;</decl_stmt>
        <comment type="block">/* not full check and jump is forward and do not skip `lastpc'? */</comment>
        <if_stmt><if>if <condition>(<expr><name>reg</name> <operator>!=</operator> <name>NO_REG</name> <operator>&amp;&amp;</operator> <name>pc</name> <operator>&lt;</operator> <name>dest</name> <operator>&amp;&amp;</operator> <name>dest</name> <operator>&lt;=</operator> <name>lastpc</name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><name>pc</name> <operator>+=</operator> <name>b</name></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* do the jump */</comment>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>OP_CALL</name></expr>:</case>
      <case>case <expr><name>OP_TAILCALL</name></expr>:</case> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>b</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>checkreg</name><argument_list>(<argument><expr><name>pt</name></expr></argument>, <argument><expr><name>a</name><operator>+</operator><name>b</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>c</name><operator>--</operator></expr>;</expr_stmt>  <comment type="block">/* c = num. returns */</comment>
        <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>LUA_MULTRET</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><call><name>checkopenop</name><argument_list>(<argument><expr><name>pt</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><call><name>checkreg</name><argument_list>(<argument><expr><name>pt</name></expr></argument>, <argument><expr><name>a</name><operator>+</operator><name>c</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>reg</name> <operator>&gt;=</operator> <name>a</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>last</name> <operator>=</operator> <name>pc</name></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* affect all registers above base */</comment>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>OP_RETURN</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><name>b</name><operator>--</operator></expr>;</expr_stmt>  <comment type="block">/* b = num. returns */</comment>
        <if_stmt><if>if <condition>(<expr><name>b</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>checkreg</name><argument_list>(<argument><expr><name>pt</name></expr></argument>, <argument><expr><name>a</name><operator>+</operator><name>b</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>OP_SETLIST</name></expr>:</case> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>b</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>checkreg</name><argument_list>(<argument><expr><name>pt</name></expr></argument>, <argument><expr><name>a</name> <operator>+</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>pc</name><operator>++</operator></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><name>pc</name> <operator>&lt;</operator> <name><name>pt</name><operator>-&gt;</operator><name>sizecode</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>OP_CLOSURE</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>nup</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><name>b</name> <operator>&lt;</operator> <name><name>pt</name><operator>-&gt;</operator><name>sizep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nup</name> <operator>=</operator> <name><name>pt</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>b</name></expr>]</index></name><operator>-&gt;</operator><name>nups</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><name>pc</name> <operator>+</operator> <name>nup</name> <operator>&lt;</operator> <name><name>pt</name><operator>-&gt;</operator><name>sizecode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>nup</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
          <decl_stmt><decl><type><name>OpCode</name></type> <name>op1</name> <init>= <expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name><name>pt</name><operator>-&gt;</operator><name>code</name><index>[<expr><name>pc</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><name>op1</name> <operator>==</operator> <name>OP_GETUPVAL</name> <operator>||</operator> <name>op1</name> <operator>==</operator> <name>OP_MOVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><name>reg</name> <operator>!=</operator> <name>NO_REG</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* tracing? */</comment>
          <expr_stmt><expr><name>pc</name> <operator>+=</operator> <name>nup</name></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* do not 'execute' these pseudo-instructions */</comment>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>OP_VARARG</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><operator>(</operator><name><name>pt</name><operator>-&gt;</operator><name>is_vararg</name></name> <operator>&amp;</operator> <name>VARARG_ISVARARG</name><operator>)</operator> <operator>&amp;&amp;</operator>
             <operator>!</operator><operator>(</operator><name><name>pt</name><operator>-&gt;</operator><name>is_vararg</name></name> <operator>&amp;</operator> <name>VARARG_NEEDSARG</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name><operator>--</operator></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <name>LUA_MULTRET</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><call><name>checkopenop</name><argument_list>(<argument><expr><name>pt</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>checkreg</name><argument_list>(<argument><expr><name>pt</name></expr></argument>, <argument><expr><name>a</name><operator>+</operator><name>b</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <default>default:</default> <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></for>
  <return>return <expr><name><name>pt</name><operator>-&gt;</operator><name>code</name><index>[<expr><name>last</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>check</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>checkjump</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>checkreg</name></cpp:undef>

<comment type="block">/* }====================================================== */</comment>


<function><type><name>int</name></type> <name>luaG_checkcode</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Proto</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><call><name>symbexec</name><argument_list>(<argument><expr><name>pt</name></expr></argument>, <argument><expr><name><name>pt</name><operator>-&gt;</operator><name>sizecode</name></name></expr></argument>, <argument><expr><name>NO_REG</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>kname</name> <parameter_list>(<parameter><decl><type><name>Proto</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>ISK</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>ttisstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>k</name><index>[<expr><call><name>INDEXK</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>svalue</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>k</name><index>[<expr><call><name>INDEXK</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <return>return <expr><literal type="string">"?"</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>getobjname</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>CallInfo</name> <modifier>*</modifier></type><name>ci</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stackpos</name></decl></parameter>,
                               <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>isLua</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="block">/* a Lua function? */</comment>
    <decl_stmt><decl><type><name>Proto</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>ci_func</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>l</name><operator>.</operator><name>p</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>pc</name> <init>= <expr><call><name>currentpc</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Instruction</name></type> <name>i</name></decl>;</decl_stmt>
    <expr_stmt><expr><operator>*</operator><name>name</name> <operator>=</operator> <call><name>luaF_getlocalname</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>stackpos</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>name</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* is a local? */</comment>
      <return>return <expr><literal type="string">"local"</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>symbexec</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><name>stackpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* try symbolic execution */</comment>
    <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name>pc</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <switch>switch <condition>(<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>OP_GETGLOBAL</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>g</name> <init>= <expr><call><name>GETARG_Bx</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* global index */</comment>
        <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>ttisstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>k</name><index>[<expr><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>name</name> <operator>=</operator> <call><name>svalue</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>k</name><index>[<expr><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="string">"global"</literal></expr>;</return>
      </block_content>}</block>
      <case>case <expr><name>OP_MOVE</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><call><name>GETARG_A</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><call><name>GETARG_B</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* move from `b' to `a' */</comment>
        <if_stmt><if>if <condition>(<expr><name>b</name> <operator>&lt;</operator> <name>a</name></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><call><name>getobjname</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>ci</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* get name for `b' */</comment>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>OP_GETTABLE</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><call><name>GETARG_C</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* key index */</comment>
        <expr_stmt><expr><operator>*</operator><name>name</name> <operator>=</operator> <call><name>kname</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="string">"field"</literal></expr>;</return>
      </block_content>}</block>
      <case>case <expr><name>OP_GETUPVAL</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>u</name> <init>= <expr><call><name>GETARG_B</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* upvalue index */</comment>
        <expr_stmt><expr><operator>*</operator><name>name</name> <operator>=</operator> <ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>upvalues</name></name></expr> ?</condition><then> <expr><call><name>getstr</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>upvalues</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">"?"</literal></expr></else></ternary></expr>;</expr_stmt>
        <return>return <expr><literal type="string">"upvalue"</literal></expr>;</return>
      </block_content>}</block>
      <case>case <expr><name>OP_SELF</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><call><name>GETARG_C</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* key index */</comment>
        <expr_stmt><expr><operator>*</operator><name>name</name> <operator>=</operator> <call><name>kname</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="string">"method"</literal></expr>;</return>
      </block_content>}</block>
      <default>default:</default> <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>  <comment type="block">/* no useful name found */</comment>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>getfuncname</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>CallInfo</name> <modifier>*</modifier></type><name>ci</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>Instruction</name></type> <name>i</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>isLua</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>ci</name><operator>-&gt;</operator><name>tailcalls</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>!</operator><call><name>isLua</name><argument_list>(<argument><expr><name>ci</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* calling function is not Lua (or is unknown) */</comment>
  <expr_stmt><expr><name>ci</name><operator>--</operator></expr>;</expr_stmt>  <comment type="block">/* calling function */</comment>
  <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>ci_func</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>l</name><operator>.</operator><name>p</name><operator>-&gt;</operator><name>code</name><index>[<expr><call><name>currentpc</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OP_CALL</name> <operator>||</operator> <call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OP_TAILCALL</name> <operator>||</operator>
      <call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OP_TFORLOOP</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>getobjname</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>ci</name></expr></argument>, <argument><expr><call><name>GETARG_A</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>  <comment type="block">/* no useful name can be found */</comment>
</block_content>}</block></function>


<comment type="block">/* only ANSI way to check whether a pointer points to an array */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>isinstack</name> <parameter_list>(<parameter><decl><type><name>CallInfo</name> <modifier>*</modifier></type><name>ci</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>StkId</name></type> <name>p</name></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>ci</name><operator>-&gt;</operator><name>base</name></name></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>ci</name><operator>-&gt;</operator><name>top</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name>o</name> <operator>==</operator> <name>p</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>luaG_typeerror</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name><name>luaT_typenames</name><index>[<expr><call><name>ttype</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>kind</name> <init>= <expr><ternary><condition><expr><operator>(</operator><call><name>isinstack</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>ci</name></name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then>
                         <expr><call><name>getobjname</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>ci</name></name></expr></argument>, <argument><expr><call><name>cast_int</name><argument_list>(<argument><expr><name>o</name> <operator>-</operator> <name><name>L</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr> </then><else>:
                         <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>kind</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>luaG_runerror</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"attempt to %s %s "</literal> <name>LUA_QS</name> <literal type="string">" (a %s value)"</literal></expr></argument>,
                <argument><expr><name>op</name></expr></argument>, <argument><expr><name>kind</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>luaG_runerror</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"attempt to %s a %s value"</literal></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>luaG_concaterror</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>StkId</name></type> <name>p1</name></decl></parameter>, <parameter><decl><type><name>StkId</name></type> <name>p2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>ttisstring</name><argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>ttisnumber</name><argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p1</name> <operator>=</operator> <name>p2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>ttisstring</name><argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ttisnumber</name><argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaG_typeerror</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><literal type="string">"concatenate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>luaG_aritherror</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TValue</name></type> <name>temp</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>luaV_tonumber</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>p2</name> <operator>=</operator> <name>p1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* first operand is wrong */</comment>
  <expr_stmt><expr><call><name>luaG_typeerror</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><literal type="string">"perform arithmetic on"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>luaG_ordererror</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TValue</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>t1</name> <init>= <expr><name><name>luaT_typenames</name><index>[<expr><call><name>ttype</name><argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>t2</name> <init>= <expr><name><name>luaT_typenames</name><index>[<expr><call><name>ttype</name><argument_list>(<argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>t1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name><name>t2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>luaG_runerror</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"attempt to compare two %s values"</literal></expr></argument>, <argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>luaG_runerror</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"attempt to compare %s with %s"</literal></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>addinfo</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>CallInfo</name> <modifier>*</modifier></type><name>ci</name> <init>= <expr><name><name>L</name><operator>-&gt;</operator><name>ci</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>isLua</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="block">/* is Lua code? */</comment>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buff</name><index>[<expr><name>LUA_IDSIZE</name></expr>]</index></name></decl>;</decl_stmt>  <comment type="block">/* add file:line information */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>line</name> <init>= <expr><call><name>currentline</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>luaO_chunkid</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><call><name>getstr</name><argument_list>(<argument><expr><call><name>getluaproto</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>source</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LUA_IDSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaO_pushfstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"%s:%d: %s"</literal></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>luaG_errormsg</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>L</name><operator>-&gt;</operator><name>errfunc</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* is there an error handling function? */</comment>
    <decl_stmt><decl><type><name>StkId</name></type> <name>errfunc</name> <init>= <expr><call><name>restorestack</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>errfunc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ttisfunction</name><argument_list>(<argument><expr><name>errfunc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>luaD_throw</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LUA_ERRERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>setobjs2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* move argument */</comment>
    <expr_stmt><expr><call><name>setobjs2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>errfunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* push function */</comment>
    <expr_stmt><expr><call><name>incr_top</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>luaD_call</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* call it */</comment>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>luaD_throw</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LUA_ERRRUN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>luaG_runerror</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>va_list</name></type> <name>argp</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>argp</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>addinfo</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>luaO_pushvfstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>argp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>argp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaG_errormsg</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
