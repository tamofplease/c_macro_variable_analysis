<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/rlite/deps/lua/src/luac.c"><comment type="block">/*
** $Id: luac.c,v 1.54 2006/06/02 17:37:11 lhf Exp $
** Lua compiler (saves bytecodes to files; also list bytecodes)
** See Copyright Notice in lua.h
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>luac_c</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_CORE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lua.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lauxlib.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ldo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lfunc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lmem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lobject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lopcodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lundump.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROGNAME</name></cpp:macro>	<cpp:value>"luac"</cpp:value></cpp:define>		<comment type="block">/* default program name */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>OUTPUT</name></cpp:macro>		<cpp:value>PROGNAME ".out"</cpp:value></cpp:define>	<comment type="block">/* default output file */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>listing</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>			<comment type="block">/* list bytecodes? */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>dumping</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>			<comment type="block">/* dump bytecodes? */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>stripping</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>			<comment type="block">/* strip debug information? */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>Output</name><index>[]</index></name><init>=<expr><block>{ <expr><name>OUTPUT</name></expr> }</block></expr></init></decl>;</decl_stmt>	<comment type="block">/* default output file name */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>output</name><init>=<expr><name>Output</name></expr></init></decl>;</decl_stmt>	<comment type="block">/* actual output file name */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>progname</name><init>=<expr><name>PROGNAME</name></expr></init></decl>;</decl_stmt>	<comment type="block">/* actual program name */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fatal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content>
 <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"%s: %s\n"</literal></expr></argument>,<argument><expr><name>progname</name></expr></argument>,<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cannot</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>what</name></decl></parameter>)</parameter_list>
<block>{<block_content>
 <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"%s: cannot %s %s: %s\n"</literal></expr></argument>,<argument><expr><name>progname</name></expr></argument>,<argument><expr><name>what</name></expr></argument>,<argument><expr><name>output</name></expr></argument>,<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>usage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content>
 <if_stmt><if>if <condition>(<expr><operator>*</operator><name>message</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"%s: unrecognized option "</literal> <name>LUA_QS</name> <literal type="string">"\n"</literal></expr></argument>,<argument><expr><name>progname</name></expr></argument>,<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
 <else>else<block type="pseudo"><block_content>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"%s: %s\n"</literal></expr></argument>,<argument><expr><name>progname</name></expr></argument>,<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
 <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
 <argument><expr><literal type="string">"usage: %s [options] [filenames].\n"</literal>
 <literal type="string">"Available options are:\n"</literal>
 <literal type="string">"  -        process stdin\n"</literal>
 <literal type="string">"  -l       list\n"</literal>
 <literal type="string">"  -o name  output to file "</literal> <call><name>LUA_QL</name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call> <literal type="string">" (default is \"%s\")\n"</literal>
 <literal type="string">"  -p       parse only\n"</literal>
 <literal type="string">"  -s       strip debug information\n"</literal>
 <literal type="string">"  -v       show version information\n"</literal>
 <literal type="string">"  --       stop handling options\n"</literal></expr></argument>,
 <argument><expr><name>progname</name></expr></argument>,<argument><expr><name>Output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>IS</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>(strcmp(argv[i],s)==0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>doargs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
 <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
 <decl_stmt><decl><type><name>int</name></type> <name>version</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
 <if_stmt><if>if <condition>(<expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>!=</operator><name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>progname</name><operator>=</operator><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
 <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
 <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>			<comment type="block">/* end of options; keep it */</comment>
   <break>break;</break></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><call><name>IS</name><argument_list>(<argument><expr><literal type="string">"--"</literal></expr></argument>)</argument_list></call></expr>)</condition>			<comment type="block">/* end of options; skip it */</comment>
  <block>{<block_content>
   <expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
   <if_stmt><if>if <condition>(<expr><name>version</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>++</operator><name>version</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
   <break>break;</break>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><call><name>IS</name><argument_list>(<argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>			<comment type="block">/* end of options; use stdin */</comment>
   <break>break;</break></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><call><name>IS</name><argument_list>(<argument><expr><literal type="string">"-l"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>			<comment type="block">/* list */</comment>
   <expr_stmt><expr><operator>++</operator><name>listing</name></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><call><name>IS</name><argument_list>(<argument><expr><literal type="string">"-o"</literal></expr></argument>)</argument_list></call></expr>)</condition>			<comment type="block">/* output file */</comment>
  <block>{<block_content>
   <expr_stmt><expr><name>output</name><operator>=</operator><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt>
   <if_stmt><if>if <condition>(<expr><name>output</name><operator>==</operator><name>NULL</name> <operator>||</operator> <operator>*</operator><name>output</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><call><name>LUA_QL</name><argument_list>(<argument><expr><literal type="string">"-o"</literal></expr></argument>)</argument_list></call> <literal type="string">" needs argument"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
   <if_stmt><if>if <condition>(<expr><call><name>IS</name><argument_list>(<argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>output</name><operator>=</operator><name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><call><name>IS</name><argument_list>(<argument><expr><literal type="string">"-p"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>			<comment type="block">/* parse only */</comment>
   <expr_stmt><expr><name>dumping</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><call><name>IS</name><argument_list>(<argument><expr><literal type="string">"-s"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>			<comment type="block">/* strip debug information */</comment>
   <expr_stmt><expr><name>stripping</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><call><name>IS</name><argument_list>(<argument><expr><literal type="string">"-v"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>			<comment type="block">/* show version */</comment>
   <expr_stmt><expr><operator>++</operator><name>version</name></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>					<comment type="block">/* unknown option */</comment>
   <expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
 </block_content>}</block></for>
 <if_stmt><if>if <condition>(<expr><name>i</name><operator>==</operator><name>argc</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>listing</name> <operator>||</operator> <operator>!</operator><name>dumping</name><operator>)</operator></expr>)</condition>
 <block>{<block_content>
  <expr_stmt><expr><name>dumping</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>argv</name><index>[<expr><operator>--</operator><name>i</name></expr>]</index></name><operator>=</operator><name>Output</name></expr>;</expr_stmt>
 </block_content>}</block></if></if_stmt>
 <if_stmt><if>if <condition>(<expr><name>version</name></expr>)</condition>
 <block>{<block_content>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s  %s\n"</literal></expr></argument>,<argument><expr><name>LUA_RELEASE</name></expr></argument>,<argument><expr><name>LUA_COPYRIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>version</name><operator>==</operator><name>argc</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
 </block_content>}</block></if></if_stmt>
 <return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>toproto</name><parameter_list>(<parameter><type><name>L</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(clvalue(L-&gt;top+(i))-&gt;l.p)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>Proto</name><modifier>*</modifier></type> <name>combine</name><parameter_list>(<parameter><decl><type><name>lua_State</name><modifier>*</modifier></type> <name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
 <if_stmt><if>if <condition>(<expr><name>n</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
  <return>return <expr><call><name>toproto</name><argument_list>(<argument><expr><name>L</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
 <else>else
 <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>pc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Proto</name><modifier>*</modifier></type> <name>f</name><init>=<expr><call><name>luaF_newproto</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>setptvalue2s</name><argument_list>(<argument><expr><name>L</name></expr></argument>,<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>incr_top</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>source</name></name><operator>=</operator><call><name>luaS_newliteral</name><argument_list>(<argument><expr><name>L</name></expr></argument>,<argument><expr><literal type="string">"=("</literal> <name>PROGNAME</name> <literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>maxstacksize</name></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>pc</name><operator>=</operator><literal type="number">2</literal><operator>*</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>code</name></name><operator>=</operator><call><name>luaM_newvector</name><argument_list>(<argument><expr><name>L</name></expr></argument>,<argument><expr><name>pc</name></expr></argument>,<argument><expr><name>Instruction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>sizecode</name></name><operator>=</operator><name>pc</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>p</name></name><operator>=</operator><call><name>luaM_newvector</name><argument_list>(<argument><expr><name>L</name></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><name>Proto</name><operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>sizep</name></name><operator>=</operator><name>n</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>pc</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
   <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>toproto</name><argument_list>(<argument><expr><name>L</name></expr></argument>,<argument><expr><name>i</name><operator>-</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>code</name><index>[<expr><name>pc</name><operator>++</operator></expr>]</index></name><operator>=</operator><call><name>CREATE_ABx</name><argument_list>(<argument><expr><name>OP_CLOSURE</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>code</name><index>[<expr><name>pc</name><operator>++</operator></expr>]</index></name><operator>=</operator><call><name>CREATE_ABC</name><argument_list>(<argument><expr><name>OP_CALL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>code</name><index>[<expr><name>pc</name><operator>++</operator></expr>]</index></name><operator>=</operator><call><name>CREATE_ABC</name><argument_list>(<argument><expr><name>OP_RETURN</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>f</name></expr>;</return>
 </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>writer</name><parameter_list>(<parameter><decl><type><name>lua_State</name><modifier>*</modifier></type> <name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>u</name></decl></parameter>)</parameter_list>
<block>{<block_content>
 <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <return>return <expr><operator>(</operator><call><name>fwrite</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>size</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>FILE</name><operator>*</operator><operator>)</operator><name>u</name></expr></argument>)</argument_list></call><operator>!=</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>size</name><operator>!=</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>Smain</name> <block>{
 <decl_stmt><decl><type><name>int</name></type> <name>argc</name></decl>;</decl_stmt>
 <decl_stmt><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>argv</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pmain</name><parameter_list>(<parameter><decl><type><name>lua_State</name><modifier>*</modifier></type> <name>L</name></decl></parameter>)</parameter_list>
<block>{<block_content>
 <decl_stmt><decl><type><name><name>struct</name> <name>Smain</name></name><modifier>*</modifier></type> <name>s</name> <init>= <expr><operator>(</operator>struct <name>Smain</name><operator>*</operator><operator>)</operator><call><name>lua_touserdata</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 <decl_stmt><decl><type><name>int</name></type> <name>argc</name><init>=<expr><name><name>s</name><operator>-&gt;</operator><name>argc</name></name></expr></init></decl>;</decl_stmt>
 <decl_stmt><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>argv</name><init>=<expr><name><name>s</name><operator>-&gt;</operator><name>argv</name></name></expr></init></decl>;</decl_stmt>
 <decl_stmt><decl><type><specifier>const</specifier> <name>Proto</name><modifier>*</modifier></type> <name>f</name></decl>;</decl_stmt>
 <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
 <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lua_checkstack</name><argument_list>(<argument><expr><name>L</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fatal</name><argument_list>(<argument><expr><literal type="string">"too many input files"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
 <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
 <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name><init>=<expr><ternary><condition><expr><call><name>IS</name><argument_list>(<argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>luaL_loadfile</name><argument_list>(<argument><expr><name>L</name></expr></argument>,<argument><expr><name>filename</name></expr></argument>)</argument_list></call><operator>!=</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fatal</name><argument_list>(<argument><expr><call><name>lua_tostring</name><argument_list>(<argument><expr><name>L</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
 </block_content>}</block></for>
 <expr_stmt><expr><name>f</name><operator>=</operator><call><name>combine</name><argument_list>(<argument><expr><name>L</name></expr></argument>,<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <if_stmt><if>if <condition>(<expr><name>listing</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>luaU_print</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name>listing</name><operator>&gt;</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
 <if_stmt><if>if <condition>(<expr><name>dumping</name></expr>)</condition>
 <block>{<block_content>
  <decl_stmt><decl><type><name>FILE</name><modifier>*</modifier></type> <name>D</name><init>= <expr><ternary><condition><expr><operator>(</operator><name>output</name><operator>==</operator><name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>stdout</name></expr> </then><else>: <expr><call><name>fopen</name><argument_list>(<argument><expr><name>output</name></expr></argument>,<argument><expr><literal type="string">"wb"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>D</name><operator>==</operator><name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>cannot</name><argument_list>(<argument><expr><literal type="string">"open"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>lua_lock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaU_dump</name><argument_list>(<argument><expr><name>L</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>writer</name></expr></argument>,<argument><expr><name>D</name></expr></argument>,<argument><expr><name>stripping</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_unlock</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>ferror</name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>cannot</name><argument_list>(<argument><expr><literal type="string">"write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>fclose</name><argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>cannot</name><argument_list>(<argument><expr><literal type="string">"close"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
 </block_content>}</block></if></if_stmt>
 <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
 <decl_stmt><decl><type><name>lua_State</name><modifier>*</modifier></type> <name>L</name></decl>;</decl_stmt>
 <decl_stmt><decl><type><name><name>struct</name> <name>Smain</name></name></type> <name>s</name></decl>;</decl_stmt>
 <decl_stmt><decl><type><name>int</name></type> <name>i</name><init>=<expr><call><name>doargs</name><argument_list>(<argument><expr><name>argc</name></expr></argument>,<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 <expr_stmt><expr><name>argc</name><operator>-=</operator><name>i</name></expr>;</expr_stmt> <expr_stmt><expr><name>argv</name><operator>+=</operator><name>i</name></expr>;</expr_stmt>
 <if_stmt><if>if <condition>(<expr><name>argc</name><operator>&lt;=</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><literal type="string">"no input files given"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
 <expr_stmt><expr><name>L</name><operator>=</operator><call><name>lua_open</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
 <if_stmt><if>if <condition>(<expr><name>L</name><operator>==</operator><name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fatal</name><argument_list>(<argument><expr><literal type="string">"not enough memory for state"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
 <expr_stmt><expr><name><name>s</name><operator>.</operator><name>argc</name></name><operator>=</operator><name>argc</name></expr>;</expr_stmt>
 <expr_stmt><expr><name><name>s</name><operator>.</operator><name>argv</name></name><operator>=</operator><name>argv</name></expr>;</expr_stmt>
 <if_stmt><if>if <condition>(<expr><call><name>lua_cpcall</name><argument_list>(<argument><expr><name>L</name></expr></argument>,<argument><expr><name>pmain</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call><operator>!=</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fatal</name><argument_list>(<argument><expr><call><name>lua_tostring</name><argument_list>(<argument><expr><name>L</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
 <expr_stmt><expr><call><name>lua_close</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <return>return <expr><name>EXIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
</unit>
