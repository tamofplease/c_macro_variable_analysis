<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/tools/fakefsify.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libgen.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISH_INTERNAL</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fs/fake.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tools/fakefs.h"</cpp:file></cpp:include>

<enum>enum <name>cmd</name> <block>{
    <decl><name>cmd_import</name></decl>,
    <decl><name>cmd_export</name></decl>,
}</block>;</enum>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>enum</name> <name>cmd</name></name></type> <name>cmd</name> <init>= <expr><name>cmd_import</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>basename</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"unfakefsify"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>cmd</name> <operator>=</operator> <name>cmd_export</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"wrong number of arguments\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <switch>switch <condition>(<expr><name>cmd</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>cmd_import</name></expr>:</case>
                <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"usage: %s &lt;rootfs.tar.gz&gt; &lt;fakefs&gt;\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>cmd_export</name></expr>:</case>
                <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"usage: %s &lt;fakefs&gt; &lt;rootfs.tar.gz&gt;\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </block_content>}</block></switch>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>fakefsify_error</name></name></type> <name>err</name></decl>;</decl_stmt>
    <function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>fakefsify_error</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>progress</name></name></type></decl></parameter>)</parameter_list> <init>= <expr><name>NULL</name></expr></init>;</function_decl>
    <if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>==</operator> <name>cmd_import</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>func</name> <operator>=</operator> <name>fakefs_import</name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>cmd</name> <operator>==</operator> <name>cmd_export</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>func</name> <operator>=</operator> <name>fakefs_export</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>func</name><operator>)</operator><operator>(</operator><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>,</operator> <name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>,</operator> <operator>&amp;</operator><name>err</name><operator>,</operator> <operator>(</operator>struct <name>progress</name><operator>)</operator></expr></condition> <block>{<block_content/>}</block></if></if_stmt>)</block_content></block></function>) <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"error!!1! %d %d %s\n"</literal></expr></argument>, <argument><expr><name><name>err</name><operator>.</operator><name>line</name></name></expr></argument>, <argument><expr><name><name>err</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>err</name><operator>.</operator><name>message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block>
}
</unit>
