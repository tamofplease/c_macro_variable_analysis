<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/tools/vdso-transplant.c"><comment type="line">// Uses ptrace to overwrite the vdso of a running process.</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/user.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ptrace.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kernel/elf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tools/ptutil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"misc.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>addr_t</name></type> <name>aux_addr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>user_regs_struct</name></name></type> <name>regs</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>trycall</name><argument_list>(<argument><expr><call><name>ptrace</name><argument_list>(<argument><expr><name>PTRACE_GETREGS</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>regs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ptrace get sp for aux"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>dword_t</name></type> <name>sp</name> <init>= <expr><operator>(</operator><name>dword_t</name><operator>)</operator> <name><name>regs</name><operator>.</operator><name>rsp</name></name></expr></init></decl>;</decl_stmt>
    <comment type="line">// skip argc</comment>
    <expr_stmt><expr><name>sp</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    <comment type="line">// skip argv</comment>
    <while>while <condition>(<expr><call><name>pt_read</name><argument_list>(<argument><expr><name>pid</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>sp</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></while>
    <expr_stmt><expr><name>sp</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    <comment type="line">// skip envp</comment>
    <while>while <condition>(<expr><call><name>pt_read</name><argument_list>(<argument><expr><name>pid</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>sp</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></while>
    <expr_stmt><expr><name>sp</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    <comment type="line">// dig through auxv</comment>
    <decl_stmt><decl><type><name>dword_t</name></type> <name>aux_type</name></decl>;</decl_stmt>
    <while>while <condition>(<expr><operator>(</operator><name>aux_type</name> <operator>=</operator> <call><name>pt_read</name><argument_list>(<argument><expr><name>pid</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>sp</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>aux_type</name> <operator>==</operator> <name>type</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>sp</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>sp</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>aux_write</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>dword_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>pt_write</name><argument_list>(<argument><expr><name>pid</name></expr></argument>, <argument><expr><call><name>aux_addr</name><argument_list>(<argument><expr><name>pid</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>transplant_vdso</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>new_vdso</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>new_vdso_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="line">// get the vdso address and size from /proc/pid/maps</comment>
    <decl_stmt><decl><type><name>char</name></type> <name><name>maps_file</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>maps_file</name></expr></argument>, <argument><expr><literal type="string">"/proc/%d/maps"</literal></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>maps</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name>maps_file</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name><name>line</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dword_t</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
    <while>while <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>maps</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>map_type</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"%8x-%8x %*s %*s %*s %*s %ms\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>map_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>map_type</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>map_type</name></expr></argument>, <argument><expr><literal type="string">"[vdso]"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>map_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>map_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>maps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// copy the new vdso in</comment>
    <for>for <control>(<init><decl><type><name>dword_t</name></type> <name>addr</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>addr</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>addr</name> <operator>+=</operator> sizeof<operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>new_vdso_data</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>addr</name> <operator>-</operator> <name>start</name> <operator>&lt;</operator> <name>new_vdso_size</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>new_vdso_data</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>unsigned</name> <name>long</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>new_vdso</name> <operator>+</operator> <name>addr</name> <operator>-</operator> <name>start</name><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>ptrace</name><argument_list>(<argument><expr><name>PTRACE_POKEDATA</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>new_vdso_data</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"ptrace vdso poke"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="line">// find the entry point</comment>
    <decl_stmt><decl><type><name>dword_t</name></type> <name>entry</name> <init>= <expr><operator>*</operator><operator>(</operator><name>dword_t</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>new_vdso</name> <operator>+</operator> <literal type="number">24</literal><operator>)</operator> <operator>+</operator> <name>start</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>aux_write</name><argument_list>(<argument><expr><name>pid</name></expr></argument>, <argument><expr><name>AX_SYSINFO</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>aux_write</name><argument_list>(<argument><expr><name>pid</name></expr></argument>, <argument><expr><name>AX_SYSINFO_EHDR</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
