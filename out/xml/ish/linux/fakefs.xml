<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/linux/fakefs.c"><comment type="block">/* Based on hostfs to a significant extent */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;asm/fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/dcache.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/fs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/fs_context.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/init.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/mount.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/pagemap.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/statfs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;user/fs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sqlite3.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fs/fake-db.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../fs/hostfs/hostfs.h"</cpp:file></cpp:include> <comment type="line">// just a quick way to get stat without typing too much</comment>

<struct>struct <name>fakefs_super</name> <block>{
    <decl_stmt><decl><type><name><name>struct</name> <name>fakefs_db</name></name></type> <name>db</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>root_fd</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="line">// free with __putname</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>dentry_name</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dentry</name></name> <modifier>*</modifier></type><name>dentry</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>__getname</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>ERR_PTR</name><argument_list>(<argument><expr><operator>-</operator><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>dentry_path_raw</name><argument_list>(<argument><expr><name>dentry</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>PATH_MAX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IS_ERR</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>path</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>BUG_ON</name><argument_list>(<argument><expr><name><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>name</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***** inode *****/</comment>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>restat_inode</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>inode</name></name> <modifier>*</modifier></type><name>ino</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>read_inode</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>inode</name></name> <modifier>*</modifier></type><name>ino</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INODE_FD</name><parameter_list>(<parameter><type><name>ino</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*((uintptr_t *) &amp;(ino)-&gt;i_private))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>open_fd_for_dentry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>inode</name></name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dentry</name></name> <modifier>*</modifier></type><name>dentry</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>host_openat</name><argument_list>(<argument><expr><call><name>INODE_FD</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>dentry</name><operator>-&gt;</operator><name>d_name</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><name>EISDIR</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>host_openat</name><argument_list>(<argument><expr><call><name>INODE_FD</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>dentry</name><operator>-&gt;</operator><name>d_name</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>fd</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>dentry</name></name> <modifier>*</modifier></type><name>fakefs_lookup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>inode</name></name> <modifier>*</modifier></type><name>ino</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dentry</name></name> <modifier>*</modifier></type><name>dentry</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>fakefs_super</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><name><name>ino</name><operator>-&gt;</operator><name>i_sb</name><operator>-&gt;</operator><name>s_fs_info</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>inode</name></name> <modifier>*</modifier></type><name>child</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>dentry_name</name><argument_list>(<argument><expr><name>dentry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IS_ERR</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>ERR_PTR</name><argument_list>(<argument><expr><call><name>PTR_ERR</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>db_begin</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>inode_t</name></type> <name>child_ino</name> <init>= <expr><call><name>path_get_inode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>__putname</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>child_ino</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>child</name> <operator>=</operator> <call><name>ilookup</name><argument_list>(<argument><expr><name><name>ino</name><operator>-&gt;</operator><name>i_sb</name></name></expr></argument>, <argument><expr><name>child_ino</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>child</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>open_fd_for_dentry</name><argument_list>(<argument><expr><name>ino</name></expr></argument>, <argument><expr><name>dentry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>child</name> <operator>=</operator> <call><name>ERR_PTR</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>out</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>child</name> <operator>=</operator> <call><name>new_inode</name><argument_list>(<argument><expr><name><name>ino</name><operator>-&gt;</operator><name>i_sb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>child</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>child</name> <operator>=</operator> <call><name>ERR_PTR</name><argument_list>(<argument><expr><operator>-</operator><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>host_close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>out</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>i_ino</name></name> <operator>=</operator> <name>child_ino</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>INODE_FD</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>read_inode</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>iput</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* TODO: check whether iput manages to close the FD by calling evict_inode */</comment>
        <expr_stmt><expr><name>child</name> <operator>=</operator> <call><name>ERR_PTR</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>out</name>;</goto>
    </block_content>}</block></if></if_stmt>

<label><name>out</name>:</label>
    <if_stmt><if>if <condition>(<expr><call><name>IS_ERR</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>db_rollback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>printk</name><argument_list>(<argument><expr><literal type="string">"fakefs_lookup failed: %pe\n"</literal></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>db_commit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><call><name>d_splice_alias</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>dentry</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__finish_make_node</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>user_namespace</name></name> <modifier>*</modifier></type><name>mnt_userns</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>inode</name></name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dentry</name></name> <modifier>*</modifier></type><name>dentry</name></decl></parameter>, <parameter><decl><type><name>umode_t</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>dev_t</name></type> <name>rdev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>fakefs_super</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><name><name>dir</name><operator>-&gt;</operator><name>i_sb</name><operator>-&gt;</operator><name>s_fs_info</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>inode</name></name> <modifier>*</modifier></type><name>child</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open_fd_for_dentry</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>dentry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
        <goto>goto <name>fail</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>child</name> <operator>=</operator> <call><name>new_inode</name><argument_list>(<argument><expr><name><name>dir</name><operator>-&gt;</operator><name>i_sb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> <operator>=</operator> <operator>-</operator><name>ENOMEM</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>child</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>host_close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>fail</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>inode_init_owner</name><argument_list>(<argument><expr><name>mnt_userns</name></expr></argument>, <argument><expr><name>child</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>INODE_FD</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>dentry_name</name><argument_list>(<argument><expr><name>dentry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IS_ERR</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>PTR_ERR</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>fail</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>db_begin</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>ish_stat</name></name></type> <name>ishstat</name> <init>= <expr><block>{
        <expr><operator>.</operator><name>mode</name> <operator>=</operator> <name>mode</name></expr>,
        <expr><operator>.</operator><name>uid</name> <operator>=</operator> <call><name>i_uid_read</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>,
        <expr><operator>.</operator><name>gid</name> <operator>=</operator> <call><name>i_gid_read</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>,
        <expr><operator>.</operator><name>rdev</name> <operator>=</operator> <name>rdev</name></expr>,
    }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>i_ino</name></name> <operator>=</operator> <call><name>path_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ishstat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>__putname</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>read_inode</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>db_rollback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>fail</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>db_commit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>d_instantiate</name><argument_list>(<argument><expr><name>dentry</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>
    <if_stmt><if>if <condition>(<expr><name>child</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>iput</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>host_unlinkat</name><argument_list>(<argument><expr><call><name>INODE_FD</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>dentry</name><operator>-&gt;</operator><name>d_name</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>finish_make_node</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>user_namespace</name></name> <modifier>*</modifier></type><name>mnt_userns</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>inode</name></name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dentry</name></name> <modifier>*</modifier></type><name>dentry</name></decl></parameter>, <parameter><decl><type><name>umode_t</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>__finish_make_node</name><argument_list>(<argument><expr><name>mnt_userns</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>dentry</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fakefs_create</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>user_namespace</name></name> <modifier>*</modifier></type><name>mnt_userns</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>inode</name></name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dentry</name></name> <modifier>*</modifier></type><name>dentry</name></decl></parameter>, <parameter><decl><type><name>umode_t</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>excl</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>host_openat</name><argument_list>(<argument><expr><call><name>INODE_FD</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>dentry</name><operator>-&gt;</operator><name>d_name</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>O_CREAT</name> <operator>|</operator> <name>O_RDWR</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>excl</name></expr> ?</condition><then> <expr><name>O_EXCL</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0666</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>fd</name></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><call><name>finish_make_node</name><argument_list>(<argument><expr><name>mnt_userns</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>dentry</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fakefs_rename</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>user_namespace</name></name> <modifier>*</modifier></type><name>mnt_userns</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>inode</name></name> <modifier>*</modifier></type><name>from_dir</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dentry</name></name> <modifier>*</modifier></type><name>from_dentry</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>inode</name></name> <modifier>*</modifier></type><name>to_dir</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dentry</name></name> <modifier>*</modifier></type><name>to_dentry</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><name>EINVAL</name></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>fakefs_super</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><name><name>from_dir</name><operator>-&gt;</operator><name>i_sb</name><operator>-&gt;</operator><name>s_fs_info</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>from_path</name> <init>= <expr><call><name>dentry_name</name><argument_list>(<argument><expr><name>from_dentry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IS_ERR</name><argument_list>(<argument><expr><name>from_path</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>PTR_ERR</name><argument_list>(<argument><expr><name>from_path</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>to_path</name> <init>= <expr><call><name>dentry_name</name><argument_list>(<argument><expr><name>to_dentry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IS_ERR</name><argument_list>(<argument><expr><name>to_path</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>__putname</name><argument_list>(<argument><expr><name>from_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>PTR_ERR</name><argument_list>(<argument><expr><name>to_path</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>db_begin</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>path_rename</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>from_path</name></expr></argument>, <argument><expr><name>to_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>__putname</name><argument_list>(<argument><expr><name>from_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>__putname</name><argument_list>(<argument><expr><name>to_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>host_renameat</name><argument_list>(<argument><expr><call><name>INODE_FD</name><argument_list>(<argument><expr><name>from_dir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>from_dentry</name><operator>-&gt;</operator><name>d_name</name><operator>.</operator><name>name</name></name></expr></argument>,
                            <argument><expr><call><name>INODE_FD</name><argument_list>(<argument><expr><name>to_dir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>to_dentry</name><operator>-&gt;</operator><name>d_name</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>db_rollback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>err</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>db_commit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fakefs_link</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dentry</name></name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>inode</name></name> <modifier>*</modifier></type><name>ino</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dentry</name></name> <modifier>*</modifier></type><name>to</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>fakefs_super</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><name><name>ino</name><operator>-&gt;</operator><name>i_sb</name><operator>-&gt;</operator><name>s_fs_info</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>inode</name></name> <modifier>*</modifier></type><name>inode</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>from_path</name> <init>= <expr><call><name>dentry_name</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IS_ERR</name><argument_list>(<argument><expr><name>from_path</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>PTR_ERR</name><argument_list>(<argument><expr><name>from_path</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>to_path</name> <init>= <expr><call><name>dentry_name</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IS_ERR</name><argument_list>(<argument><expr><name>to_path</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>__putname</name><argument_list>(<argument><expr><name>from_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>PTR_ERR</name><argument_list>(<argument><expr><name>to_path</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>db_begin</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>path_link</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>from_path</name></expr></argument>, <argument><expr><name>to_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>__putname</name><argument_list>(<argument><expr><name>from_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>__putname</name><argument_list>(<argument><expr><name>to_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>host_linkat</name><argument_list>(<argument><expr><call><name>INODE_FD</name><argument_list>(<argument><expr><call><name>d_inode</name><argument_list>(<argument><expr><name><name>from</name><operator>-&gt;</operator><name>d_parent</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>d_name</name><operator>.</operator><name>name</name></name></expr></argument>,
                          <argument><expr><call><name>INODE_FD</name><argument_list>(<argument><expr><call><name>d_inode</name><argument_list>(<argument><expr><name><name>to</name><operator>-&gt;</operator><name>d_parent</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>to</name><operator>-&gt;</operator><name>d_name</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>db_rollback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>err</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>db_commit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>inode</name> <operator>=</operator> <call><name>d_inode</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ihold</name><argument_list>(<argument><expr><name>inode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>d_instantiate</name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><name>inode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>unlink_common</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>inode</name></name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dentry</name></name> <modifier>*</modifier></type><name>dentry</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_dir</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>fakefs_super</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><name><name>dir</name><operator>-&gt;</operator><name>i_sb</name><operator>-&gt;</operator><name>s_fs_info</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>dentry_name</name><argument_list>(<argument><expr><name>dentry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IS_ERR</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>PTR_ERR</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>db_begin</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>path_unlink</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>__putname</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>is_dir</name></expr> ?</condition><then> <expr><name>host_rmdirat</name></expr> </then><else>: <expr><name>host_unlinkat</name></expr></else></ternary><operator>)</operator><operator>(</operator><call><name>INODE_FD</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call>, <name><name>dentry</name><operator>-&gt;</operator><name>d_name</name><operator>.</operator><name>name</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>db_rollback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>err</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>db_commit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fakefs_unlink</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>inode</name></name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dentry</name></name> <modifier>*</modifier></type><name>dentry</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>unlink_common</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>dentry</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fakefs_rmdir</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>inode</name></name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dentry</name></name> <modifier>*</modifier></type><name>dentry</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>unlink_common</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>dentry</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fakefs_symlink</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>user_namespace</name></name> <modifier>*</modifier></type><name>mnt_userns</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>inode</name></name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dentry</name></name> <modifier>*</modifier></type><name>dentry</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>target</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>host_openat</name><argument_list>(<argument><expr><call><name>INODE_FD</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>dentry</name><operator>-&gt;</operator><name>d_name</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>O_RDWR</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_TRUNC</name></expr></argument>, <argument><expr><literal type="number">0666</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>fd</name></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>ssize_t</name></type> <name>res</name> <init>= <expr><call><name>host_write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>host_close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>host_unlinkat</name><argument_list>(<argument><expr><call><name>INODE_FD</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>dentry</name><operator>-&gt;</operator><name>d_name</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>res</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name>finish_make_node</name><argument_list>(<argument><expr><name>mnt_userns</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>dentry</name></expr></argument>, <argument><expr><name>S_IFLNK</name> <operator>|</operator> <literal type="number">0777</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fakefs_mkdir</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>user_namespace</name></name> <modifier>*</modifier></type><name>mnt_userns</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>inode</name></name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dentry</name></name> <modifier>*</modifier></type><name>dentry</name></decl></parameter>, <parameter><decl><type><name>umode_t</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>host_mkdirat</name><argument_list>(<argument><expr><call><name>INODE_FD</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>dentry</name><operator>-&gt;</operator><name>d_name</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="number">0777</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>finish_make_node</name><argument_list>(<argument><expr><name>mnt_userns</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>dentry</name></expr></argument>, <argument><expr><name>S_IFDIR</name> <operator>|</operator> <name>mode</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>host_rmdirat</name><argument_list>(<argument><expr><call><name>INODE_FD</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>dentry</name><operator>-&gt;</operator><name>d_name</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fakefs_mknod</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>user_namespace</name></name> <modifier>*</modifier></type><name>mnt_userns</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>inode</name></name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dentry</name></name> <modifier>*</modifier></type><name>dentry</name></decl></parameter>, <parameter><decl><type><name>umode_t</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>dev_t</name></type> <name>dev</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>host_openat</name><argument_list>(<argument><expr><call><name>INODE_FD</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>dentry</name><operator>-&gt;</operator><name>d_name</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>O_RDWR</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_TRUNC</name></expr></argument>, <argument><expr><literal type="number">0666</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>fd</name></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><call><name>__finish_make_node</name><argument_list>(<argument><expr><name>mnt_userns</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>dentry</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>dev</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fakefs_setattr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>user_namespace</name></name> <modifier>*</modifier></type><name>mnt_userns</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dentry</name></name> <modifier>*</modifier></type><name>dentry</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>iattr</name></name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>setattr_prepare</name><argument_list>(<argument><expr><name>mnt_userns</name></expr></argument>, <argument><expr><name>dentry</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>inode</name></name> <modifier>*</modifier></type><name>inode</name> <init>= <expr><call><name>d_inode</name><argument_list>(<argument><expr><name>dentry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// attributes of ishstat</comment>
    <decl_stmt><decl><type><name><name>struct</name> <name>fakefs_super</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><name><name>inode</name><operator>-&gt;</operator><name>i_sb</name><operator>-&gt;</operator><name>s_fs_info</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>attr</name><operator>-&gt;</operator><name>ia_valid</name></name> <operator>&amp;</operator> <operator>(</operator><name>ATTR_MODE</name> <operator>|</operator> <name>ATTR_UID</name> <operator>|</operator> <name>ATTR_GID</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>db_begin</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>struct</name> <name>ish_stat</name></name></type> <name>stat</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>inode_read_stat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>inode</name><operator>-&gt;</operator><name>i_ino</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>attr</name><operator>-&gt;</operator><name>ia_valid</name></name> <operator>&amp;</operator> <name>ATTR_MODE</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>stat</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <name><name>attr</name><operator>-&gt;</operator><name>ia_mode</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>attr</name><operator>-&gt;</operator><name>ia_valid</name></name> <operator>&amp;</operator> <name>ATTR_UID</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>stat</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <call><name>from_kuid</name><argument_list>(<argument><expr><name>mnt_userns</name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>ia_uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>attr</name><operator>-&gt;</operator><name>ia_valid</name></name> <operator>&amp;</operator> <name>ATTR_GID</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>stat</name><operator>.</operator><name>gid</name></name> <operator>=</operator> <call><name>from_kgid</name><argument_list>(<argument><expr><name>mnt_userns</name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>ia_gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>inode_write_stat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>inode</name><operator>-&gt;</operator><name>i_ino</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>db_commit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// size</comment>
    <if_stmt><if>if <condition>(<expr><name><name>attr</name><operator>-&gt;</operator><name>ia_valid</name></name> <operator>&amp;</operator> <name>ATTR_SIZE</name> <operator>&amp;&amp;</operator> <name><name>attr</name><operator>-&gt;</operator><name>ia_size</name></name> <operator>!=</operator> <call><name>i_size_read</name><argument_list>(<argument><expr><name>inode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>host_ftruncate</name><argument_list>(<argument><expr><call><name>INODE_FD</name><argument_list>(<argument><expr><name>inode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>ia_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>truncate_setsize</name><argument_list>(<argument><expr><name>inode</name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>ia_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// time</comment>
    <if_stmt><if>if <condition>(<expr><name><name>attr</name><operator>-&gt;</operator><name>ia_valid</name></name> <operator>&amp;</operator> <operator>(</operator><name>ATTR_ATIME</name> <operator>|</operator> <name>ATTR_ATIME_SET</name> <operator>|</operator> <name>ATTR_MTIME</name> <operator>|</operator> <name>ATTR_MTIME_SET</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>timespec64</name></name></type> <name>atime</name> <init>= <expr><block>{<expr><operator>.</operator><name>tv_nsec</name> <operator>=</operator> <name>UTIME_OMIT</name></expr>}</block></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>attr</name><operator>-&gt;</operator><name>ia_valid</name></name> <operator>&amp;</operator> <name>ATTR_ATIME_SET</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>atime</name> <operator>=</operator> <name><name>attr</name><operator>-&gt;</operator><name>ia_atime</name></name></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name><name>attr</name><operator>-&gt;</operator><name>ia_valid</name></name> <operator>&amp;</operator> <name>ATTR_ATIME</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>atime</name><operator>.</operator><name>tv_nsec</name></name> <operator>=</operator> <name>UTIME_NOW</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name><name>struct</name> <name>timespec64</name></name></type> <name>mtime</name> <init>= <expr><block>{<expr><operator>.</operator><name>tv_nsec</name> <operator>=</operator> <name>UTIME_OMIT</name></expr>}</block></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>attr</name><operator>-&gt;</operator><name>ia_valid</name></name> <operator>&amp;</operator> <name>ATTR_MTIME_SET</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>mtime</name> <operator>=</operator> <name><name>attr</name><operator>-&gt;</operator><name>ia_mtime</name></name></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name><name>attr</name><operator>-&gt;</operator><name>ia_valid</name></name> <operator>&amp;</operator> <name>ATTR_MTIME</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>mtime</name><operator>.</operator><name>tv_nsec</name></name> <operator>=</operator> <name>UTIME_NOW</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name><name>struct</name> <name>host_timespec</name></name></type> <name><name>times</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{
            <expr><block>{<expr><operator>.</operator><name>tv_sec</name> <operator>=</operator> <name><name>atime</name><operator>.</operator><name>tv_sec</name></name></expr>, <expr><operator>.</operator><name>tv_nsec</name> <operator>=</operator> <name><name>atime</name><operator>.</operator><name>tv_nsec</name></name></expr>}</block></expr>,
            <expr><block>{<expr><operator>.</operator><name>tv_sec</name> <operator>=</operator> <name><name>mtime</name><operator>.</operator><name>tv_sec</name></name></expr>, <expr><operator>.</operator><name>tv_nsec</name> <operator>=</operator> <name><name>mtime</name><operator>.</operator><name>tv_nsec</name></name></expr>}</block></expr>,
        }</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>host_futimens</name><argument_list>(<argument><expr><call><name>INODE_FD</name><argument_list>(<argument><expr><name>inode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>times</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>restat_inode</name><argument_list>(<argument><expr><name>inode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>setattr_copy</name><argument_list>(<argument><expr><name>mnt_userns</name></expr></argument>, <argument><expr><name>inode</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mark_inode_dirty</name><argument_list>(<argument><expr><name>inode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// TODO: is this actually necessary?</comment>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>inode_operations</name></name></type> <name>fakefs_iops</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>setattr</name> <operator>=</operator> <name>fakefs_setattr</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>inode_operations</name></name></type> <name>fakefs_dir_iops</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>lookup</name> <operator>=</operator> <name>fakefs_lookup</name></expr>,
    <expr><operator>.</operator><name>create</name> <operator>=</operator> <name>fakefs_create</name></expr>,
    <expr><operator>.</operator><name>link</name> <operator>=</operator> <name>fakefs_link</name></expr>,
    <expr><operator>.</operator><name>unlink</name> <operator>=</operator> <name>fakefs_unlink</name></expr>,
    <expr><operator>.</operator><name>symlink</name> <operator>=</operator> <name>fakefs_symlink</name></expr>,
    <expr><operator>.</operator><name>mkdir</name> <operator>=</operator> <name>fakefs_mkdir</name></expr>,
    <expr><operator>.</operator><name>rmdir</name> <operator>=</operator> <name>fakefs_rmdir</name></expr>,
    <expr><operator>.</operator><name>mknod</name> <operator>=</operator> <name>fakefs_mknod</name></expr>,
    <expr><operator>.</operator><name>rename</name> <operator>=</operator> <name>fakefs_rename</name></expr>,
    <expr><operator>.</operator><name>setattr</name> <operator>=</operator> <name>fakefs_setattr</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>inode_operations</name></name></type> <name>fakefs_link_iops</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>get_link</name> <operator>=</operator> <name>page_get_link</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<comment type="block" format="doxygen">/***** file *****/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_DIR</name><parameter_list>(<parameter><type><name>file</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((file)-&gt;private_data)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fakefs_file_release</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>inode</name></name> <modifier>*</modifier></type><name>inode</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>file</name></name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>filemap_write_and_wait</name><argument_list>(<argument><expr><name><name>inode</name><operator>-&gt;</operator><name>i_mapping</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fakefs_fsync</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>file</name></name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>loff_t</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>loff_t</name></type> <name>end</name></decl></parameter>,
                        <parameter><decl><type><name>int</name></type> <name>datasync</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>file_write_and_wait_range</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><call><name>host_fsync</name><argument_list>(<argument><expr><call><name>INODE_FD</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>f_inode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>datasync</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fakefs_iterate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>file</name></name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dir_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>fakefs_super</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><name><name>file</name><operator>-&gt;</operator><name>f_inode</name><operator>-&gt;</operator><name>i_sb</name><operator>-&gt;</operator><name>s_fs_info</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>FILE_DIR</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>host_dup_opendir</name><argument_list>(<argument><expr><call><name>INODE_FD</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>f_inode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>FILE_DIR</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>dir</name> <init>= <expr><call><name>FILE_DIR</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>pos</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>host_rewinddir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>host_seekdir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pos</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dir_path</name> <init>= <expr><call><name>dentry_name</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>f_path</name><operator>.</operator><name>dentry</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IS_ERR</name><argument_list>(<argument><expr><name>dir_path</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>PTR_ERR</name><argument_list>(<argument><expr><name>dir_path</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>dir_path_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>dir_path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


    <decl_stmt><decl><type><name><name>struct</name> <name>host_dirent</name></name></type> <name>ent</name></decl>;</decl_stmt>
    <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>host_readdir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>
        <comment type="line">// Get the inode number by constructing the file path and looking it up in the database</comment>
        <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ent</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>ent</name><operator>.</operator><name>ino</name></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>f_inode</name><operator>-&gt;</operator><name>i_ino</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ent</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">".."</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>ent</name><operator>.</operator><name>ino</name></name> <operator>=</operator> <call><name>d_inode</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>f_path</name><operator>.</operator><name>dentry</name><operator>-&gt;</operator><name>d_parent</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_ino</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>db_begin</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>dir_path_len</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>ent</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>PATH_MAX</name></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt> <comment type="line">// a</comment>
            <expr_stmt><expr><name><name>dir_path</name><index>[<expr><name>dir_path_len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dir_path</name><index>[<expr><name>dir_path_len</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ent</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ent</name><operator>.</operator><name>ino</name></name> <operator>=</operator> <call><name>path_get_inode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>dir_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>db_commit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dir_emit</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ent</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>ent</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ent</name><operator>.</operator><name>ino</name></name></expr></argument>, <argument><expr><name><name>ent</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <call><name>host_telldir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fakefs_dir_release</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>inode</name></name> <modifier>*</modifier></type><name>ino</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>file</name></name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>FILE_DIR</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>host_closedir</name><argument_list>(<argument><expr><call><name>FILE_DIR</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>file_operations</name></name></type> <name>fakefs_file_fops</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>llseek</name> <operator>=</operator> <name>generic_file_llseek</name></expr>,
    <expr><operator>.</operator><name>splice_read</name> <operator>=</operator> <name>generic_file_splice_read</name></expr>,
    <expr><operator>.</operator><name>read_iter</name> <operator>=</operator> <name>generic_file_read_iter</name></expr>,
    <expr><operator>.</operator><name>write_iter</name> <operator>=</operator> <name>generic_file_write_iter</name></expr>,
    <expr><operator>.</operator><name>mmap</name> <operator>=</operator> <name>generic_file_mmap</name></expr>,
    <expr><operator>.</operator><name>release</name> <operator>=</operator> <name>fakefs_file_release</name></expr>,
    <expr><operator>.</operator><name>fsync</name> <operator>=</operator> <name>fakefs_fsync</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>file_operations</name></name></type> <name>fakefs_dir_fops</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>iterate</name> <operator>=</operator> <name>fakefs_iterate</name></expr>,
    <expr><operator>.</operator><name>release</name> <operator>=</operator> <name>fakefs_dir_release</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<comment type="block" format="doxygen">/***** address space *****/</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fakefs_readpage</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>file</name></name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>page</name></name> <modifier>*</modifier></type><name>page</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>inode</name></name> <modifier>*</modifier></type><name>inode</name> <init>= <expr><ternary><condition><expr><name>file</name></expr> ?</condition><then> <expr><name><name>file</name><operator>-&gt;</operator><name>f_inode</name></name></expr> </then><else>: <expr><name><name>page</name><operator>-&gt;</operator><name>mapping</name><operator>-&gt;</operator><name>host</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><call><name>kmap</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ssize_t</name></type> <name>res</name> <init>= <expr><call><name>host_pread</name><argument_list>(<argument><expr><call><name>INODE_FD</name><argument_list>(<argument><expr><name>inode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>PAGE_SIZE</name></expr></argument>, <argument><expr><call><name>page_offset</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>ClearPageUptodate</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SetPageError</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>out</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PAGE_SIZE</name> <operator>-</operator> <name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ClearPageError</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SetPageUptodate</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>out</name>:</label>
    <expr_stmt><expr><call><name>flush_dcache_page</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>kunmap</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>unlock_page</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fakefs_writepage</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>page</name></name> <modifier>*</modifier></type><name>page</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>writeback_control</name></name> <modifier>*</modifier></type><name>wbc</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>inode</name></name> <modifier>*</modifier></type><name>inode</name> <init>= <expr><name><name>page</name><operator>-&gt;</operator><name>mapping</name><operator>-&gt;</operator><name>host</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>loff_t</name></type> <name>start</name> <init>= <expr><call><name>page_offset</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name>PAGE_SIZE</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>page</name><operator>-&gt;</operator><name>index</name></name> <operator>&gt;</operator> <operator>(</operator><name><name>inode</name><operator>-&gt;</operator><name>i_size</name></name> <operator>&gt;&gt;</operator> <name>PAGE_SHIFT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>inode</name><operator>-&gt;</operator><name>i_size</name></name> <operator>&amp;</operator> <operator>(</operator><name>PAGE_SIZE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><call><name>kmap</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ssize_t</name></type> <name>res</name> <init>= <expr><call><name>host_pwrite</name><argument_list>(<argument><expr><call><name>INODE_FD</name><argument_list>(<argument><expr><name>inode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>kunmap</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>len</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>ClearPageUptodate</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>out</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>start</name> <operator>+</operator> <name>len</name> <operator>&gt;</operator> <name><name>inode</name><operator>-&gt;</operator><name>i_size</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>inode</name><operator>-&gt;</operator><name>i_size</name></name> <operator>=</operator> <name>start</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>ClearPageError</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>out</name>:</label>
    <expr_stmt><expr><call><name>unlock_page</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fakefs_write_begin</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>file</name></name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>address_space</name></name> <modifier>*</modifier></type><name>mapping</name></decl></parameter>,
                              <parameter><decl><type><name>loff_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>,
                              <parameter><decl><type><name><name>struct</name> <name>page</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>pagep</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>fsdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>pgoff_t</name></type> <name>index</name> <init>= <expr><name>pos</name> <operator>&gt;&gt;</operator> <name>PAGE_SHIFT</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>*</operator><name>pagep</name> <operator>=</operator> <call><name>grab_cache_page_write_begin</name><argument_list>(<argument><expr><name>mapping</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>pagep</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><name>ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* copied from hostfs, I don't really know what it does or how it works */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fakefs_write_end</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>file</name></name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>address_space</name></name> <modifier>*</modifier></type><name>mapping</name></decl></parameter>,
                            <parameter><decl><type><name>loff_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>copied</name></decl></parameter>,
                            <parameter><decl><type><name><name>struct</name> <name>page</name></name> <modifier>*</modifier></type><name>page</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>fsdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>inode</name></name> <modifier>*</modifier></type><name>inode</name> <init>= <expr><name><name>mapping</name><operator>-&gt;</operator><name>host</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>from</name> <init>= <expr><name>pos</name> <operator>&amp;</operator> <operator>(</operator><name>PAGE_SIZE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><call><name>kmap</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ssize_t</name></type> <name>res</name> <init>= <expr><call><name>host_pwrite</name><argument_list>(<argument><expr><call><name>INODE_FD</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>f_inode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buffer</name> <operator>+</operator> <name>from</name></expr></argument>, <argument><expr><name>copied</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>kunmap</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PageUptodate</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>res</name> <operator>==</operator> <name>PAGE_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>SetPageUptodate</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>res</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;</operator> <name><name>inode</name><operator>-&gt;</operator><name>i_size</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>inode</name><operator>-&gt;</operator><name>i_size</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>out</name>:</label>
    <expr_stmt><expr><call><name>unlock_page</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>put_page</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>address_space_operations</name></name></type> <name>fakefs_aops</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>readpage</name> <operator>=</operator> <name>fakefs_readpage</name></expr>,
    <expr><operator>.</operator><name>writepage</name> <operator>=</operator> <name>fakefs_writepage</name></expr>,
    <expr><operator>.</operator><name>set_page_dirty</name> <operator>=</operator> <name>__set_page_dirty_nobuffers</name></expr>,
    <expr><operator>.</operator><name>write_begin</name> <operator>=</operator> <name>fakefs_write_begin</name></expr>,
    <expr><operator>.</operator><name>write_end</name> <operator>=</operator> <name>fakefs_write_end</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>restat_inode</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>inode</name></name> <modifier>*</modifier></type><name>ino</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>hostfs_stat</name></name></type> <name>host_stat</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>stat_file</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>host_stat</name></expr></argument>, <argument><expr><call><name>INODE_FD</name><argument_list>(<argument><expr><name>ino</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>set_nlink</name><argument_list>(<argument><expr><name>ino</name></expr></argument>, <argument><expr><name><name>host_stat</name><operator>.</operator><name>nlink</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ino</name><operator>-&gt;</operator><name>i_size</name></name> <operator>=</operator> <name><name>host_stat</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ino</name><operator>-&gt;</operator><name>i_blocks</name></name> <operator>=</operator> <name><name>host_stat</name><operator>.</operator><name>blocks</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ino</name><operator>-&gt;</operator><name>i_atime</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>host_stat</name><operator>.</operator><name>atime</name><operator>.</operator><name>tv_sec</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ino</name><operator>-&gt;</operator><name>i_atime</name><operator>.</operator><name>tv_nsec</name></name> <operator>=</operator> <name><name>host_stat</name><operator>.</operator><name>atime</name><operator>.</operator><name>tv_nsec</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ino</name><operator>-&gt;</operator><name>i_ctime</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>host_stat</name><operator>.</operator><name>ctime</name><operator>.</operator><name>tv_sec</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ino</name><operator>-&gt;</operator><name>i_ctime</name><operator>.</operator><name>tv_nsec</name></name> <operator>=</operator> <name><name>host_stat</name><operator>.</operator><name>ctime</name><operator>.</operator><name>tv_nsec</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ino</name><operator>-&gt;</operator><name>i_mtime</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>host_stat</name><operator>.</operator><name>mtime</name><operator>.</operator><name>tv_sec</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ino</name><operator>-&gt;</operator><name>i_mtime</name><operator>.</operator><name>tv_nsec</name></name> <operator>=</operator> <name><name>host_stat</name><operator>.</operator><name>mtime</name><operator>.</operator><name>tv_nsec</name></name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_inode</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>inode</name></name> <modifier>*</modifier></type><name>ino</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>fakefs_super</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><name><name>ino</name><operator>-&gt;</operator><name>i_sb</name><operator>-&gt;</operator><name>s_fs_info</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>ish_stat</name></name></type> <name>ishstat</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>inode_read_stat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>ino</name><operator>-&gt;</operator><name>i_ino</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ishstat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ino</name><operator>-&gt;</operator><name>i_mode</name></name> <operator>=</operator> <name><name>ishstat</name><operator>.</operator><name>mode</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>i_uid_write</name><argument_list>(<argument><expr><name>ino</name></expr></argument>, <argument><expr><name><name>ishstat</name><operator>.</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>i_gid_write</name><argument_list>(<argument><expr><name>ino</name></expr></argument>, <argument><expr><name><name>ishstat</name><operator>.</operator><name>gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>restat_inode</name><argument_list>(<argument><expr><name>ino</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

    <switch>switch <condition>(<expr><name><name>ino</name><operator>-&gt;</operator><name>i_mode</name></name> <operator>&amp;</operator> <name>S_IFMT</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>S_IFREG</name></expr>:</case>
        <expr_stmt><expr><name><name>ino</name><operator>-&gt;</operator><name>i_op</name></name> <operator>=</operator> <operator>&amp;</operator><name>fakefs_iops</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ino</name><operator>-&gt;</operator><name>i_fop</name></name> <operator>=</operator> <operator>&amp;</operator><name>fakefs_file_fops</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ino</name><operator>-&gt;</operator><name>i_mapping</name><operator>-&gt;</operator><name>a_ops</name></name> <operator>=</operator> <operator>&amp;</operator><name>fakefs_aops</name></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>S_IFDIR</name></expr>:</case>
        <expr_stmt><expr><name><name>ino</name><operator>-&gt;</operator><name>i_op</name></name> <operator>=</operator> <operator>&amp;</operator><name>fakefs_dir_iops</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ino</name><operator>-&gt;</operator><name>i_fop</name></name> <operator>=</operator> <operator>&amp;</operator><name>fakefs_dir_fops</name></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>S_IFLNK</name></expr>:</case>
        <expr_stmt><expr><name><name>ino</name><operator>-&gt;</operator><name>i_op</name></name> <operator>=</operator> <operator>&amp;</operator><name>fakefs_link_iops</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ino</name><operator>-&gt;</operator><name>i_mapping</name><operator>-&gt;</operator><name>a_ops</name></name> <operator>=</operator> <operator>&amp;</operator><name>fakefs_aops</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>inode_nohighmem</name><argument_list>(<argument><expr><name>ino</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>S_IFCHR</name></expr>:</case>
    <case>case <expr><name>S_IFBLK</name></expr>:</case>
    <case>case <expr><name>S_IFIFO</name></expr>:</case>
    <case>case <expr><name>S_IFSOCK</name></expr>:</case>
        <expr_stmt><expr><call><name>init_special_inode</name><argument_list>(<argument><expr><name>ino</name></expr></argument>, <argument><expr><name><name>ino</name><operator>-&gt;</operator><name>i_mode</name></name> <operator>&amp;</operator> <name>S_IFMT</name></expr></argument>, <argument><expr><name><name>ishstat</name><operator>.</operator><name>rdev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ino</name><operator>-&gt;</operator><name>i_op</name></name> <operator>=</operator> <operator>&amp;</operator><name>fakefs_iops</name></expr>;</expr_stmt>
        <break>break;</break>
    <default>default:</default>
        <expr_stmt><expr><call><name>printk</name><argument_list>(<argument><expr><literal type="string">"read_inode: unexpected S_IFMT: %o\n"</literal></expr></argument>, <argument><expr><name><name>ino</name><operator>-&gt;</operator><name>i_mode</name></name> <operator>&amp;</operator> <name>S_IFMT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><name>EIO</name></expr>;</return>
    </block_content>}</block></switch>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>dentry_operations</name></name></type> <name>fakefs_dops</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>d_delete</name> <operator>=</operator> <name>always_delete_dentry</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<comment type="block" format="doxygen">/***** superblock *****/</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fakefs_evict_inode</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>inode</name></name> <modifier>*</modifier></type><name>ino</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>fakefs_super</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><name><name>ino</name><operator>-&gt;</operator><name>i_sb</name><operator>-&gt;</operator><name>s_fs_info</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>INODE_FD</name><argument_list>(<argument><expr><name>ino</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>info</name><operator>-&gt;</operator><name>root_fd</name></name> <operator>&amp;&amp;</operator> <call><name>INODE_FD</name><argument_list>(<argument><expr><name>ino</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>host_close</name><argument_list>(<argument><expr><call><name>INODE_FD</name><argument_list>(<argument><expr><name>ino</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>INODE_FD</name><argument_list>(<argument><expr><name>ino</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>truncate_inode_pages_final</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ino</name><operator>-&gt;</operator><name>i_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>clear_inode</name><argument_list>(<argument><expr><name>ino</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fakefs_statfs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dentry</name></name> <modifier>*</modifier></type><name>dentry</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>kstatfs</name></name> <modifier>*</modifier></type><name>kstat</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>host_statfs</name></name></type> <name>stat</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>host_fstatfs</name><argument_list>(<argument><expr><call><name>INODE_FD</name><argument_list>(<argument><expr><call><name>d_inode</name><argument_list>(<argument><expr><name>dentry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>kstat</name><operator>-&gt;</operator><name>f_type</name></name> <operator>=</operator> <literal type="number">0x66616b65</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>kstat</name><operator>-&gt;</operator><name>f_bsize</name></name> <operator>=</operator> <name><name>stat</name><operator>.</operator><name>bsize</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>kstat</name><operator>-&gt;</operator><name>f_frsize</name></name> <operator>=</operator> <name><name>stat</name><operator>.</operator><name>frsize</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>kstat</name><operator>-&gt;</operator><name>f_blocks</name></name> <operator>=</operator> <name><name>stat</name><operator>.</operator><name>blocks</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>kstat</name><operator>-&gt;</operator><name>f_bfree</name></name> <operator>=</operator> <name><name>stat</name><operator>.</operator><name>bfree</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>kstat</name><operator>-&gt;</operator><name>f_bavail</name></name> <operator>=</operator> <name><name>stat</name><operator>.</operator><name>bavail</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>kstat</name><operator>-&gt;</operator><name>f_files</name></name> <operator>=</operator> <name><name>stat</name><operator>.</operator><name>files</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>kstat</name><operator>-&gt;</operator><name>f_ffree</name></name> <operator>=</operator> <name><name>stat</name><operator>.</operator><name>ffree</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>kstat</name><operator>-&gt;</operator><name>f_fsid</name></name> <operator>=</operator> <call><name>u64_to_fsid</name><argument_list>(<argument><expr><name><name>stat</name><operator>.</operator><name>fsid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>kstat</name><operator>-&gt;</operator><name>f_namelen</name></name> <operator>=</operator> <name><name>stat</name><operator>.</operator><name>namemax</name></name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>super_operations</name></name></type> <name>fakefs_super_ops</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>drop_inode</name> <operator>=</operator> <name>generic_delete_inode</name></expr>,
    <expr><operator>.</operator><name>evict_inode</name> <operator>=</operator> <name>fakefs_evict_inode</name></expr>,
    <expr><operator>.</operator><name>statfs</name> <operator>=</operator> <name>fakefs_statfs</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fakefs_fill_super</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>super_block</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>fs_context</name></name> <modifier>*</modifier></type><name>fc</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>fakefs_super</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><name><name>sb</name><operator>-&gt;</operator><name>s_fs_info</name></name></expr></init></decl>;</decl_stmt>

    <comment type="line">// https://lore.kernel.org/all/d9bcb237-39e1-29b1-9718-b720a7e7540b@collabora.com/T/</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>super_setup_bdi</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>inode</name></name> <modifier>*</modifier></type><name>root</name> <init>= <expr><call><name>new_inode</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>root</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><name>ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>db_begin</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>i_ino</name></name> <operator>=</operator> <call><name>path_get_inode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>root</name><operator>-&gt;</operator><name>i_ino</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printk</name><argument_list>(<argument><expr><literal type="string">"fakefs: could not find root inode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>db_rollback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>iput</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><name>EINVAL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>INODE_FD</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>root_fd</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>read_inode</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>db_rollback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>iput</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>err</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>db_commit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>s_op</name></name> <operator>=</operator> <operator>&amp;</operator><name>fakefs_super_ops</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>s_d_op</name></name> <operator>=</operator> <operator>&amp;</operator><name>fakefs_dops</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sb</name><operator>-&gt;</operator><name>s_root</name></name> <operator>=</operator> <call><name>d_make_root</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>sb</name><operator>-&gt;</operator><name>s_root</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>iput</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><name>ENOMEM</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***** context/init *****/</comment>

<struct>struct <name>fakefs_context</name> <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fakefs_fc_parse_param</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fs_context</name></name> <modifier>*</modifier></type><name>fc</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>fs_parameter</name></name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>fakefs_context</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>fc</name><operator>-&gt;</operator><name>fs_private</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><literal type="string">"source"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>kstrdup</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><name>GFP_KERNEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>path</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>-</operator><name>ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fakefs_fc_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fs_context</name></name> <modifier>*</modifier></type><name>fc</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>fakefs_context</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>fc</name><operator>-&gt;</operator><name>fs_private</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>kfree</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>kfree</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fakefs_get_tree</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fs_context</name></name> <modifier>*</modifier></type><name>fc</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>fc</name><operator>-&gt;</operator><name>s_fs_info</name></name> <operator>=</operator> <call><name>kzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>fakefs_super</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>GFP_KERNEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>fc</name><operator>-&gt;</operator><name>s_fs_info</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><name>ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>fakefs_super</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><name><name>fc</name><operator>-&gt;</operator><name>s_fs_info</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>fakefs_context</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>fc</name><operator>-&gt;</operator><name>fs_private</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>kmalloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><name>GFP_KERNEL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"/data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>root_fd</name></name> <operator>=</operator> <call><name>host_open</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>root_fd</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>kfree</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name><name>info</name><operator>-&gt;</operator><name>root_fd</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"/meta.db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>fake_db_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>root_fd</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>kfree</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>err</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>kfree</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vfs_get_super</name><argument_list>(<argument><expr><name>fc</name></expr></argument>, <argument><expr><name>vfs_get_keyed_super</name></expr></argument>, <argument><expr><name>fakefs_fill_super</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>fs_context_operations</name></name></type> <name>fakefs_context_ops</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>parse_param</name> <operator>=</operator> <name>fakefs_fc_parse_param</name></expr>,
    <expr><operator>.</operator><name>free</name> <operator>=</operator> <name>fakefs_fc_free</name></expr>,
    <expr><operator>.</operator><name>get_tree</name> <operator>=</operator> <name>fakefs_get_tree</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fakefs_init_fs_context</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fs_context</name></name> <modifier>*</modifier></type><name>fc</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>fc</name><operator>-&gt;</operator><name>ops</name></name> <operator>=</operator> <operator>&amp;</operator><name>fakefs_context_ops</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>fc</name><operator>-&gt;</operator><name>fs_private</name></name> <operator>=</operator> <call><name>kzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>fakefs_context</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>GFP_KERNEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>fc</name><operator>-&gt;</operator><name>fs_private</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><name>ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fakefs_kill_sb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>super_block</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>fakefs_super</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><name><name>sb</name><operator>-&gt;</operator><name>s_fs_info</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>fake_db_deinit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>host_close</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>root_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>kill_anon_super</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>kfree</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>file_system_type</name></name></type> <name>fakefs_type</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"fakefs"</literal></expr>,
    <expr><operator>.</operator><name>init_fs_context</name> <operator>=</operator> <name>fakefs_init_fs_context</name></expr>,
    <expr><operator>.</operator><name>kill_sb</name> <operator>=</operator> <name>fakefs_kill_sb</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fakefs_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>register_filesystem</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fakefs_type</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><call><name>fs_initcall</name><argument_list>(<argument><expr><name>fakefs_init</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</unit>
