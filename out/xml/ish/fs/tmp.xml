<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/fs/tmp.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kernel/task.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kernel/errno.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kernel/fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fs/path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util/refcount.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"debug.h"</cpp:file></cpp:include>

<comment type="line">// ========================</comment>
<comment type="line">// ======== INODES ========</comment>
<comment type="line">// ========================</comment>

<struct>struct <name>tmp_inode</name> <block>{
    <decl_stmt><decl><type><name><name>struct</name> <name>refcount</name></name></type> <name>refcount</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>lock_t</name></type> <name>lock</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>statbuf</name></name></type> <name>stat</name></decl>;</decl_stmt>
    <union>union <block>{
        <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>file_data</name></decl>;</decl_stmt>
        <comment type="line">//char *symlink_data;</comment>
    }</block>;</union>
}</block>;</struct>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>tmp_inode</name></name> <modifier>*</modifier></type><name>tmp_inode_new</name><parameter_list>(<parameter><decl><type><name>mode_t_</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>tmp_inode</name></name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>tmp_inode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>refcount_init</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lock_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>stat</name></name> <operator>=</operator> <operator>(</operator>struct <name>statbuf</name><operator>)</operator> <block>{}</block></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>_Atomic</specifier> <name>ino_t</name></type> <name>next_inode</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>inode</name></name> <operator>=</operator> <name>next_inode</name><operator>++</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>euid</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>gid</name></name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>egid</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>S_ISREG</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>file_data</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>file_data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></function>

<macro><name>DEFINE_REFCOUNT_STATIC</name><argument_list>(<argument>tmp_inode</argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tmp_inode_cleanup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tmp_inode</name></name> <modifier>*</modifier></type><name>inode</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>S_ISREG</name><argument_list>(<argument><expr><name><name>inode</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>inode</name><operator>-&gt;</operator><name>file_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>inode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// ===================================</comment>
<comment type="line">// ======== DIRECTORY ENTRIES ========</comment>
<comment type="line">// ===================================</comment>

<struct>struct <name>tmp_dirent</name> <block>{
    <decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>MAX_NAME</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>tmp_inode</name></name> <modifier>*</modifier></type><name>inode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>index</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>tmp_dirent</name></name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>list</name></name></type> <name>children</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>next_index</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>refcount</name></name></type> <name>refcount</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>lock_t</name></type> <name>lock</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>list</name></name></type> <name>dir</name></decl>;</decl_stmt>
}</block>;</struct>

<macro><name>DEFINE_REFCOUNT_STATIC</name><argument_list>(<argument>tmp_dirent</argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tmp_dirent_cleanup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tmp_dirent</name></name> <modifier>*</modifier></type><name>dirent</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>list_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dirent</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// TODO locking thinking emoji</comment>
    <expr_stmt><expr><call><name>tmp_inode_release</name><argument_list>(<argument><expr><name><name>dirent</name><operator>-&gt;</operator><name>inode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>dirent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tmp_dirent_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tmp_dirent</name></name> <modifier>*</modifier></type><name>dirent</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>refcount_init</name><argument_list>(<argument><expr><name>dirent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dirent</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dirent</name><operator>-&gt;</operator><name>next_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lock_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dirent</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Frees the child inode on failure, so you don't need to! But be careful you don't free it yourself.</comment>
<comment type="line">// In other words: Takes ownership of `child`</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>tmpfs_dir_link</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tmp_dirent</name></name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tmp_inode</name></name> <modifier>*</modifier></type><name>child</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tmp_dirent</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>dirent_out</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>dir</name><operator>-&gt;</operator><name>inode</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tmp_inode_release</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>_ENOTDIR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>tmp_dirent</name></name> <modifier>*</modifier></type><name>new_dirent</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>tmp_dirent</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>new_dirent</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tmp_inode_release</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>_ENOMEM</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>tmp_dirent_init</name><argument_list>(<argument><expr><name>new_dirent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>new_dirent</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>new_dirent</name><operator>-&gt;</operator><name>inode</name></name> <operator>=</operator> <call><name>tmp_inode_retain</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>new_dirent</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name><name>dir</name><operator>-&gt;</operator><name>next_index</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>new_dirent</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <call><name>tmp_dirent_retain</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>list_add_tail</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dir</name><operator>-&gt;</operator><name>children</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new_dirent</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>dirent_out</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><operator>*</operator><name>dirent_out</name> <operator>=</operator> <call><name>tmp_dirent_retain</name><argument_list>(<argument><expr><name>new_dirent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tmpfs_fd_seekdir</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tmp_dirent</name></name> <modifier>*</modifier></type><name>dirent</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>dirent</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>tmp_dirent_retain</name><argument_list>(<argument><expr><name>dirent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>fd</name><operator>-&gt;</operator><name>tmpfs</name><operator>.</operator><name>dir_pos</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>tmp_dirent_release</name><argument_list>(<argument><expr><name><name>fd</name><operator>-&gt;</operator><name>tmpfs</name><operator>.</operator><name>dir_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>fd</name><operator>-&gt;</operator><name>tmpfs</name><operator>.</operator><name>dir_pos</name></name> <operator>=</operator> <name>dirent</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>tmp_dirent</name></name> <modifier>*</modifier></type><name>tmpfs_dir_lookup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tmp_dirent</name></name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>dir</name><operator>-&gt;</operator><name>inode</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>ERR_PTR</name><argument_list>(<argument><expr><name>_ENOTDIR</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>tmp_dirent</name></name> <modifier>*</modifier></type><name>dirent</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>tmp_dirent</name></name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
    <macro><name>list_for_each_entry</name><argument_list>(<argument>&amp;dir-&gt;children</argument>, <argument>d</argument>, <argument>dir</argument>)</argument_list></macro> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>inode</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>dirent</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block>
    <if_stmt><if>if <condition>(<expr><name>dirent</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>ERR_PTR</name><argument_list>(<argument><expr><name>_ENOENT</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><call><name>tmp_dirent_retain</name><argument_list>(<argument><expr><name>dirent</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// TODO: should this function even exist? can't tmpfs_dir_link check for existence?</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>tmpfs_dir_lookup_existence</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tmp_dirent</name></name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>tmp_dirent</name></name> <modifier>*</modifier></type><name>dirent</name> <init>= <expr><call><name>tmpfs_dir_lookup</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>dirent</name> <operator>==</operator> <call><name>ERR_PTR</name><argument_list>(<argument><expr><name>_ENOENT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IS_ERR</name><argument_list>(<argument><expr><name>dirent</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>PTR_ERR</name><argument_list>(<argument><expr><name>dirent</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>tmp_dirent_release</name><argument_list>(<argument><expr><name>dirent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>_EEXIST</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>tmp_dirent</name></name> <modifier>*</modifier></type><name>__tmpfs_lookup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mount</name></name> <modifier>*</modifier></type><name>mount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>filename_out</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>tmp_dirent</name></name> <modifier>*</modifier></type><name>root</name> <init>= <expr><name><name>mount</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>tmp_dirent</name></name> <modifier>*</modifier></type><name>dirent</name> <init>= <expr><call><name>tmp_dirent_retain</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// strong reference</comment>

    <decl_stmt><decl><type><name>char</name></type> <name><name>component</name><index>[<expr><name>MAX_NAME</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><call><name>path_next_component</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><name>component</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>parent</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>path</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dirent</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>struct</name> <name>tmp_dirent</name></name> <modifier>*</modifier></type><name>child</name> <init>= <expr><call><name>tmpfs_dir_lookup</name><argument_list>(<argument><expr><name>dirent</name></expr></argument>, <argument><expr><name>component</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dirent</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>tmp_dirent_release</name><argument_list>(<argument><expr><name>dirent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>IS_ERR</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>child</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>dirent</name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if <condition>(<expr><name>parent</name> <operator>&amp;&amp;</operator> <name>filename_out</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><operator>*</operator><name>filename_out</name> <operator>=</operator> <name>path</name> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>component</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>ERR_PTR</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><name>dirent</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name><name>struct</name> <name>tmp_dirent</name></name> <modifier>*</modifier></type><name>tmpfs_lookup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mount</name></name> <modifier>*</modifier></type><name>mount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>__tmpfs_lookup</name><argument_list>(<argument><expr><name>mount</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name><name>struct</name> <name>tmp_dirent</name></name> <modifier>*</modifier></type><name>tmpfs_lookup_parent</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mount</name></name> <modifier>*</modifier></type><name>mount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>filename_out</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><call><name>__tmpfs_lookup</name><argument_list>(<argument><expr><name>mount</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>filename_out</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tmpfs_file_resize</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tmp_inode</name></name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>S_ISREG</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>old_size</name> <init>= <expr><name><name>file</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>new_data</name> <init>= <expr><call><name>realloc</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>file_data</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>new_data</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>file_data</name></name> <operator>=</operator> <name>new_data</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>file</name><operator>-&gt;</operator><name>file_data</name></name> <operator>+</operator> <name>old_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>size</name></name> <operator>-</operator> <name>old_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// ========================</comment>
<comment type="line">// ======== FS OPS ========</comment>
<comment type="line">// ========================</comment>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>fd_ops</name></name></type> <name>tmpfs_fdops</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tmpfs_mount</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mount</name></name> <modifier>*</modifier></type><name>mount</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>tmp_inode</name></name> <modifier>*</modifier></type><name>root_inode</name> <init>= <expr><call><name>tmp_inode_new</name><argument_list>(<argument><expr><name>S_IFDIR</name> <operator>|</operator> <literal type="number">0777</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>root_inode</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>tmp_dirent</name></name> <modifier>*</modifier></type><name>root</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>tmp_dirent</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>root</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>root_inode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>_ENOMEM</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>tmp_dirent_init</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>inode</name></name> <operator>=</operator> <name>root_inode</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>mount</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>root</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
<comment type="line">// This is the only place where a tmpfs directory tree is recursively freed.</comment>
static void tmpfs_unmount_tree(struct tmp_inode *tree) {
    assert(refcount_get(tree) == 1); <comment type="line">// otherwise mount_remove should have returned EBUSY</comment>
    if (S_ISDIR(tree-&gt;stat.mode)) {
        struct tmp_dirent *dirent, *tmp;
        list_for_each_entry_safe(&amp;tree-&gt;dir.entries, dirent, tmp, dir) {
            if (dirent-&gt;inode != NULL)
                tmpfs_unmount_tree(dirent-&gt;inode);
            tmp_dirent_release(dirent);
        }
    }
    tmp_inode_release(tree);
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>tmpfs_umount</name><argument_list>(<argument><expr>struct <name>mount</name> <operator>*</operator><call><name>UNUSED</name><argument_list>(<argument><expr><name>mount</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list> <block>{<block_content>
    <comment type="line">// big fat fuckin TODO</comment>
    <comment type="line">// struct tmp_inode *root = mount-&gt;data;</comment>
    <comment type="line">// tmpfs_unmount_tree(root);</comment>
    <expr_stmt><expr><call><name>TODO</name><argument_list>(<argument><expr><literal type="string">"tmpfs umount"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>tmpfs_open</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mount</name></name> <modifier>*</modifier></type><name>mount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>tmp_dirent</name></name> <modifier>*</modifier></type><name>dirent</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>O_CREAT_</name></expr>)</condition> <block>{<block_content>
        <comment type="line">// FIXME: will create a file when given a path that ends with a slash</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>struct</name> <name>tmp_dirent</name></name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><call><name>tmpfs_lookup_parent</name><argument_list>(<argument><expr><name>mount</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>IS_ERR</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name>ERR_PTR</name><argument_list>(<argument><expr><call><name>PTR_ERR</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parent</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>dirent</name> <operator>=</operator> <call><name>tmpfs_dir_lookup</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>O_EXCL_</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_ERR</name><argument_list>(<argument><expr><name>dirent</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>err</name> <operator>=</operator> <name>_EEXIST</name></expr>;</expr_stmt>
            <goto>goto <name>out_creat</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>dirent</name> <operator>==</operator> <call><name>ERR_PTR</name><argument_list>(<argument><expr><name>_ENOENT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>struct</name> <name>tmp_inode</name></name> <modifier>*</modifier></type><name>inode</name> <init>= <expr><call><name>tmp_inode_new</name><argument_list>(<argument><expr><name>S_IFREG</name> <operator>|</operator> <name>mode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>inode</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>err</name> <operator>=</operator> <name>_ENOMEM</name></expr>;</expr_stmt>
                <goto>goto <name>out_creat</name>;</goto>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>tmpfs_dir_link</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>inode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dirent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>tmp_inode_release</name><argument_list>(<argument><expr><name>inode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <goto>goto <name>out_creat</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

<label><name>out_creat</name>:</label>
        <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>tmp_dirent_release</name><argument_list>(<argument><expr><name>dirent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>dirent</name> <operator>=</operator> <call><name>ERR_PTR</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parent</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>tmp_dirent_release</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>dirent</name> <operator>=</operator> <call><name>tmpfs_lookup</name><argument_list>(<argument><expr><name>mount</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IS_ERR</name><argument_list>(<argument><expr><name>dirent</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>ERR_PTR</name><argument_list>(<argument><expr><call><name>PTR_ERR</name><argument_list>(<argument><expr><name>dirent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name> <init>= <expr><call><name>fd_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmpfs_fdops</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tmp_dirent_release</name><argument_list>(<argument><expr><name>dirent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>ERR_PTR</name><argument_list>(<argument><expr><name>_ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>fd</name><operator>-&gt;</operator><name>tmpfs</name><operator>.</operator><name>dirent</name></name> <operator>=</operator> <name>dirent</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>fd</name><operator>-&gt;</operator><name>tmpfs</name><operator>.</operator><name>dir_pos</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dirent</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>list_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dirent</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tmpfs_fd_seekdir</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><call><name>list_first_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dirent</name><operator>-&gt;</operator><name>children</name></name></expr></argument>, <argument><expr>struct <name>tmp_dirent</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dirent</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>fd</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tmpfs_stat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mount</name></name> <modifier>*</modifier></type><name>mount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>statbuf</name></name> <modifier>*</modifier></type><name>stat</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>tmp_dirent</name></name> <modifier>*</modifier></type><name>dirent</name> <init>= <expr><call><name>tmpfs_lookup</name><argument_list>(<argument><expr><name>mount</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IS_ERR</name><argument_list>(<argument><expr><name>dirent</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>PTR_ERR</name><argument_list>(<argument><expr><name>dirent</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>tmp_inode</name></name> <modifier>*</modifier></type><name>inode</name> <init>= <expr><name><name>dirent</name><operator>-&gt;</operator><name>inode</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>inode</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>stat</name> <operator>=</operator> <name><name>dirent</name><operator>-&gt;</operator><name>inode</name><operator>-&gt;</operator><name>stat</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>inode</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tmp_dirent_release</name><argument_list>(<argument><expr><name>dirent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tmpfs_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="line">// shouldn't need locking as this is the last reference to the fd</comment>
    <expr_stmt><expr><call><name>tmp_dirent_release</name><argument_list>(<argument><expr><name><name>fd</name><operator>-&gt;</operator><name>tmpfs</name><operator>.</operator><name>dirent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>fd</name><operator>-&gt;</operator><name>tmpfs</name><operator>.</operator><name>dirent</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tmpfs_mkdir</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mount</name></name> <modifier>*</modifier></type><name>mount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>mode_t_</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>tmp_dirent</name></name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><call><name>tmpfs_lookup_parent</name><argument_list>(<argument><expr><name>mount</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IS_ERR</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>PTR_ERR</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parent</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>tmpfs_dir_lookup_existence</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>tmp_inode</name></name> <modifier>*</modifier></type><name>inode</name> <init>= <expr><call><name>tmp_inode_new</name><argument_list>(<argument><expr><name>S_IFDIR</name> <operator>|</operator> <name>mode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>_ENOMEM</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>inode</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>tmpfs_dir_link</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>inode</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>out</name>:</label>
    <expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parent</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tmp_dirent_release</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// ========================</comment>
<comment type="line">// ======== FD OPS ========</comment>
<comment type="line">// ========================</comment>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>tmp_inode</name></name> <modifier>*</modifier></type><name>tmpfs_fd_inode</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>fd</name><operator>-&gt;</operator><name>tmpfs</name><operator>.</operator><name>dirent</name><operator>-&gt;</operator><name>inode</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tmpfs_getpath</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>tmp_dirent</name></name> <modifier>*</modifier></type><name>dirent</name> <init>= <expr><name><name>fd</name><operator>-&gt;</operator><name>tmpfs</name><operator>.</operator><name>dirent</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>tmp_dirent</name></name> <modifier>*</modifier></type><name>root_dirent</name> <init>= <expr><name><name>fd</name><operator>-&gt;</operator><name>mount</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>buf</name> <operator>+</operator> <name>MAX_PATH</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>dirent</name> <operator>!=</operator> <name>root_dirent</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>size_t</name></type> <name>name_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>dirent</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>p</name> <operator>-=</operator> <name>name_len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>buf</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>_ENAMETOOLONG</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dirent</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tmpfs_fstat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>statbuf</name></name> <modifier>*</modifier></type><name>stat</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>tmp_inode</name></name> <modifier>*</modifier></type><name>inode</name> <init>= <expr><call><name>tmpfs_fd_inode</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>inode</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>stat</name> <operator>=</operator> <name><name>inode</name><operator>-&gt;</operator><name>stat</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>inode</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>tmpfs_read</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bufsize</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>ssize_t</name></type> <name>res</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>tmp_inode</name></name> <modifier>*</modifier></type><name>inode</name> <init>= <expr><call><name>tmpfs_fd_inode</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>inode</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <name>_EISDIR</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>inode</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>S_ISREG</name><argument_list>(<argument><expr><name><name>inode</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>bufsize</name> <operator>&gt;</operator> <name><name>inode</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>size</name></name> <operator>-</operator> <name><name>fd</name><operator>-&gt;</operator><name>offset</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>bufsize</name> <operator>=</operator> <name><name>inode</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>size</name></name> <operator>-</operator> <name><name>fd</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>fd</name><operator>-&gt;</operator><name>offset</name></name> <operator>&gt;=</operator> <name><name>inode</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>bufsize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>inode</name><operator>-&gt;</operator><name>file_data</name></name> <operator>+</operator> <name><name>fd</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>fd</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <name>bufsize</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <name>bufsize</name></expr>;</expr_stmt>

<label><name>out</name>:</label>
    <expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>inode</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>tmpfs_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bufsize</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>ssize_t</name></type> <name>res</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>tmp_inode</name></name> <modifier>*</modifier></type><name>inode</name> <init>= <expr><call><name>tmpfs_fd_inode</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>inode</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <name>_EISDIR</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>inode</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>S_ISREG</name><argument_list>(<argument><expr><name><name>inode</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>inode</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>size</name></name> <operator>&lt;</operator> <name><name>fd</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name>bufsize</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>tmpfs_file_resize</name><argument_list>(<argument><expr><name>inode</name></expr></argument>, <argument><expr><name><name>fd</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name>bufsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>inode</name><operator>-&gt;</operator><name>file_data</name></name> <operator>+</operator> <name><name>fd</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>fd</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <name>bufsize</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <name>bufsize</name></expr>;</expr_stmt>

<label><name>out</name>:</label>
    <expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>inode</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>off_t_</name></type> <name>tmpfs_lseek</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>off_t_</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>qword_t</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>whence</name> <operator>==</operator> <name>LSEEK_END</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>tmp_inode</name></name> <modifier>*</modifier></type><name>inode</name> <init>= <expr><call><name>tmpfs_fd_inode</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>inode</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>inode</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>inode</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>generic_seek</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>whence</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><name><name>fd</name><operator>-&gt;</operator><name>offset</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tmpfs_readdir</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dir_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>tmp_dirent</name></name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><name><name>fd</name><operator>-&gt;</operator><name>tmpfs</name><operator>.</operator><name>dirent</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name>_ENOTDIR</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>inode</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fd</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parent</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>tmp_dirent</name></name> <modifier>*</modifier></type><name>dirent</name> <init>= <expr><name><name>fd</name><operator>-&gt;</operator><name>tmpfs</name><operator>.</operator><name>dir_pos</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>dirent</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <goto>goto <name>out</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>tmp_dirent</name></name> <modifier>*</modifier></type><name>next_dirent</name> <init>= <expr><call><name>list_next_entry</name><argument_list>(<argument><expr><name>dirent</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>&amp;</operator><name><name>next_dirent</name><operator>-&gt;</operator><name>dir</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>parent</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition><block type="pseudo"><block_content> <comment type="line">// end of list</comment>
        <expr_stmt><expr><name>next_dirent</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>tmpfs_fd_seekdir</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>next_dirent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>inode</name></name> <operator>=</operator> <name><name>dirent</name><operator>-&gt;</operator><name>inode</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>inode</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>dirent</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<label><name>out</name>:</label>
    <expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parent</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fd</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type> <name>tmpfs_telldir</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>fd</name><operator>-&gt;</operator><name>tmpfs</name><operator>.</operator><name>dir_pos</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><name><name>fd</name><operator>-&gt;</operator><name>tmpfs</name><operator>.</operator><name>dir_pos</name><operator>-&gt;</operator><name>index</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tmpfs_seekdir</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>tmp_dirent</name></name> <modifier>*</modifier></type><name>dir</name> <init>= <expr><name><name>fd</name><operator>-&gt;</operator><name>tmpfs</name><operator>.</operator><name>dirent</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dir</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>dir</name><operator>-&gt;</operator><name>inode</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>tmp_dirent</name></name> <modifier>*</modifier></type><name>child</name></decl>;</decl_stmt>
    <macro><name>list_for_each_entry</name><argument_list>(<argument>&amp;dir-&gt;children</argument>, <argument>child</argument>, <argument>dir</argument>)</argument_list></macro> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>child</name><operator>-&gt;</operator><name>index</name></name> <operator>&gt;=</operator> <name>ptr</name></expr>)</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block>
    <if_stmt><if>if <condition>(<expr><operator>&amp;</operator><name><name>child</name><operator>-&gt;</operator><name>dir</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>dir</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>child</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>tmpfs_fd_seekdir</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dir</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fs_ops</name></name></type> <name>tmpfs</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"tmpfs"</literal></expr>, <expr><operator>.</operator><name>magic</name> <operator>=</operator> <literal type="number">0x01021994</literal></expr>,
    <expr><operator>.</operator><name>mount</name> <operator>=</operator> <name>tmpfs_mount</name></expr>,
    <expr><operator>.</operator><name>umount</name> <operator>=</operator> <name>tmpfs_umount</name></expr>,
    <expr><operator>.</operator><name>open</name> <operator>=</operator> <name>tmpfs_open</name></expr>,
    <expr><operator>.</operator><name>close</name> <operator>=</operator> <name>tmpfs_close</name></expr>,
    <expr><operator>.</operator><name>stat</name> <operator>=</operator> <name>tmpfs_stat</name></expr>,
    <expr><operator>.</operator><name>fstat</name> <operator>=</operator> <name>tmpfs_fstat</name></expr>,
    <expr><operator>.</operator><name>getpath</name> <operator>=</operator> <name>tmpfs_getpath</name></expr>,
    <expr><operator>.</operator><name>mkdir</name> <operator>=</operator> <name>tmpfs_mkdir</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fd_ops</name></name></type> <name>tmpfs_fdops</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>read</name> <operator>=</operator> <name>tmpfs_read</name></expr>,
    <expr><operator>.</operator><name>write</name> <operator>=</operator> <name>tmpfs_write</name></expr>,
    <expr><operator>.</operator><name>lseek</name> <operator>=</operator> <name>tmpfs_lseek</name></expr>,
    <expr><operator>.</operator><name>readdir</name> <operator>=</operator> <name>tmpfs_readdir</name></expr>,
    <expr><operator>.</operator><name>telldir</name> <operator>=</operator> <name>tmpfs_telldir</name></expr>,
    <expr><operator>.</operator><name>seekdir</name> <operator>=</operator> <name>tmpfs_seekdir</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
