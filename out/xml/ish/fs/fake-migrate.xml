<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/fs/fake-migrate.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kernel/fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kernel/errno.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fs/fake-db.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fs/sqlutil.h"</cpp:file></cpp:include>

<comment type="line">// The value of the user_version pragma is used to decide what needs migrating.</comment>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>ignored</name> <cpp:literal>"-Wmissing-field-initializers"</cpp:literal></cpp:pragma>
<struct><specifier>static</specifier> struct <name>migration</name> <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sql</name></decl>;</decl_stmt>
    <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>migrate</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fakefs_db</name></name> <modifier>*</modifier></type><name>fs</name></decl></parameter>)</parameter_list>;</function_decl>
}</block> <decl><name><name>migrations</name><index>[]</index></name> <init>= <expr><block>{
    <comment type="line">// version 1: add another index</comment>
    <expr><block>{
        <expr><literal type="string">"create index inode_to_path on paths (inode, path);"</literal></expr>
    }</block></expr>,
    <comment type="line">// version 2: add foreign key constraint on paths, create trigger to automatically cleanup stats</comment>
    <expr><block>{
        <expr><literal type="string">"create table paths_new (path blob primary key, inode integer references stats(inode));"</literal>
        <literal type="string">"insert into paths_new select * from paths where exists (select 1 from stats where inode = paths.inode);"</literal>
        <literal type="string">"drop table paths; alter table paths_new rename to paths;"</literal>
        <literal type="string">"create index inode_to_path on paths (inode, path);"</literal>
        <literal type="string">"delete from stats where not exists (select 1 from paths where inode = stats.inode);"</literal>
        <literal type="string">"create trigger delete_path after delete on paths "</literal>
        <literal type="string">"when not exists (select 1 from paths where inode = old.inode) "</literal>
        <literal type="string">"begin "</literal>
            <literal type="string">"delete from stats where not exists (select 1 from paths where inode = old.inode) and inode = old.inode; "</literal>
        <literal type="string">"end;"</literal></expr>
    }</block></expr>,
    <comment type="line">// version 3: the trigger was a mistake</comment>
    <expr><block>{
        <expr><literal type="string">"drop trigger delete_path"</literal></expr>
    }</block></expr>,
}</block></expr></init></decl>;</struct>

<function><type><name>int</name></type> <name>fakefs_migrate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fakefs_db</name></name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> <name>UNUSED</name><parameter_list>(<parameter><decl><type><name>root_fd</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name><name>fs</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>user_version</name> <init>= <expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"pragma user_version"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>STEP</name><argument_list>(<argument><expr><name>user_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>version</name> <init>= <expr><call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name>user_version</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>FINALIZE</name><argument_list>(<argument><expr><name>user_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"begin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>versions</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>migrations</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>migrations</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>version</name> <operator>&lt;</operator> <name>versions</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>migration</name></name></type> <name>m</name> <init>= <expr><name><name>migrations</name><index>[<expr><name>version</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>m</name><operator>.</operator><name>sql</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name><name>m</name><operator>.</operator><name>sql</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>m</name><operator>.</operator><name>migrate</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>migrate</name></name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>version</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <comment type="line">// for some reason placeholders aren't allowed in pragmas</comment>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pragma_user_version</name> <init>= <expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"pragma user_version = %d"</literal></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><name>pragma_user_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pragma_user_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"commit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
