<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/fs/pipe.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kernel/calls.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fs/fd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fs/real.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"debug.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>fd_t</name></type> <name>pipe_f_create</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pipe_fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name> <init>= <expr><call><name>adhoc_fd_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>realfs_fdops</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>fd</name><operator>-&gt;</operator><name>real_fd</name></name> <operator>=</operator> <name>pipe_fd</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>fd</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <name>S_IFIFO</name> <operator>|</operator> <literal type="number">0660</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>fd</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>fd</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>gid</name></name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>gid</name></name></expr>;</expr_stmt>
    <return>return <expr><call><name>f_install</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int_t</name></type> <name>sys_pipe2</name><parameter_list>(<parameter><decl><type><name>addr_t</name></type> <name>pipe_addr</name></decl></parameter>, <parameter><decl><type><name>int_t</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>STRACE</name><argument_list>(<argument><expr><literal type="string">"pipe2(%#x, %#x)"</literal></expr></argument>, <argument><expr><name>pipe_addr</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>O_CLOEXEC_</name><operator>|</operator><name>O_NONBLOCK_</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>FIXME</name><argument_list>(<argument><expr><literal type="string">"unsupported pipe2 flags"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>_EINVAL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>pipe</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name><name>fp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><name>err</name> <operator>=</operator> <name><name>fp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>pipe_f_create</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>fp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>close_pipe</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>err</name> <operator>=</operator> <name><name>fp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>pipe_f_create</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>fp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>close_fake_0</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>_EFAULT</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>user_put</name><argument_list>(<argument><expr><name>pipe_addr</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>close_fake_1</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>STRACE</name><argument_list>(<argument><expr><literal type="string">" [%d %d]"</literal></expr></argument>, <argument><expr><name><name>fp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>fp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>close_fake_1</name>:</label>
    <expr_stmt><expr><call><name>f_close</name><argument_list>(<argument><expr><name><name>fp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>close_fake_0</name>:</label>
    <expr_stmt><expr><call><name>f_close</name><argument_list>(<argument><expr><name><name>fp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>close_pipe</name>:</label>
    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int_t</name></type> <name>sys_pipe</name><parameter_list>(<parameter><decl><type><name>addr_t</name></type> <name>pipe_addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>sys_pipe2</name><argument_list>(<argument><expr><name>pipe_addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
