<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/fs/pty.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kernel/task.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kernel/errno.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fs/tty.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fs/devices.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>tty_driver</name></name></type> <name>pty_slave</name></decl>;</decl_stmt>

<comment type="line">// the master holds a reference to the slave, so the slave will always be cleaned up second</comment>
<comment type="line">// when the master cleans up it hangs up the slave, making any operation that references the master unreachable</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pty_slave_init_inode</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tty</name></name> <modifier>*</modifier></type><name>tty</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>tty</name><operator>-&gt;</operator><name>pty</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>euid</name></name></expr>;</expr_stmt>
    <comment type="line">// TODO make these mount options</comment>
    <expr_stmt><expr><name><name>tty</name><operator>-&gt;</operator><name>pty</name><operator>.</operator><name>gid</name></name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>egid</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tty</name><operator>-&gt;</operator><name>pty</name><operator>.</operator><name>perms</name></name> <operator>=</operator> <literal type="number">0620</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pty_master_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tty</name></name> <modifier>*</modifier></type><name>tty</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>tty</name><operator>-&gt;</operator><name>termios</name><operator>.</operator><name>iflags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tty</name><operator>-&gt;</operator><name>termios</name><operator>.</operator><name>oflags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tty</name><operator>-&gt;</operator><name>termios</name><operator>.</operator><name>lflags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>tty</name></name> <modifier>*</modifier></type><name>slave</name> <init>= <expr><call><name>tty_alloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pty_slave</name></expr></argument>, <argument><expr><name>TTY_PSEUDO_SLAVE_MAJOR</name></expr></argument>, <argument><expr><name><name>tty</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>slave</name><operator>-&gt;</operator><name>refcount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pty_slave</name><operator>.</operator><name>ttys</name><index>[<expr><name><name>tty</name><operator>-&gt;</operator><name>num</name></name></expr>]</index></name> <operator>=</operator> <name>slave</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tty</name><operator>-&gt;</operator><name>pty</name><operator>.</operator><name>other</name></name> <operator>=</operator> <name>slave</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>slave</name><operator>-&gt;</operator><name>pty</name><operator>.</operator><name>other</name></name> <operator>=</operator> <name>tty</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>slave</name><operator>-&gt;</operator><name>pty</name><operator>.</operator><name>locked</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pty_slave_init_inode</name><argument_list>(<argument><expr><name>slave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pty_master_cleanup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tty</name></name> <modifier>*</modifier></type><name>tty</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>tty</name></name> <modifier>*</modifier></type><name>slave</name> <init>= <expr><name><name>tty</name><operator>-&gt;</operator><name>pty</name><operator>.</operator><name>other</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>slave</name><operator>-&gt;</operator><name>pty</name><operator>.</operator><name>other</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>slave</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tty_hangup</name><argument_list>(<argument><expr><name>slave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>slave</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tty_release</name><argument_list>(<argument><expr><name>slave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pty_slave_open</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tty</name></name> <modifier>*</modifier></type><name>tty</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>tty</name><operator>-&gt;</operator><name>pty</name><operator>.</operator><name>other</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_EIO</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>tty</name><operator>-&gt;</operator><name>pty</name><operator>.</operator><name>locked</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_EIO</name></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pty_master_ioctl</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tty</name></name> <modifier>*</modifier></type><name>tty</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>tty</name></name> <modifier>*</modifier></type><name>slave</name> <init>= <expr><name><name>tty</name><operator>-&gt;</operator><name>pty</name><operator>.</operator><name>other</name></name></expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><name>cmd</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>TIOCSPTLCK_</name></expr>:</case>
            <expr_stmt><expr><name><name>slave</name><operator>-&gt;</operator><name>pty</name><operator>.</operator><name>locked</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>*</operator><operator>(</operator><name>dword_t</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>TIOCGPTN_</name></expr>:</case>
            <expr_stmt><expr><operator>*</operator><operator>(</operator><name>dword_t</name> <operator>*</operator><operator>)</operator> <name>arg</name> <operator>=</operator> <name><name>slave</name><operator>-&gt;</operator><name>num</name></name></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>TIOCPKT_</name></expr>:</case>
            <expr_stmt><expr><name><name>tty</name><operator>-&gt;</operator><name>pty</name><operator>.</operator><name>packet_mode</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>*</operator><operator>(</operator><name>dword_t</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>TIOCGPKT_</name></expr>:</case>
            <expr_stmt><expr><operator>*</operator><operator>(</operator><name>dword_t</name> <operator>*</operator><operator>)</operator> <name>arg</name> <operator>=</operator> <name><name>tty</name><operator>-&gt;</operator><name>pty</name><operator>.</operator><name>packet_mode</name></name></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <return>return <expr><name>_ENOTTY</name></expr>;</return>
    </block_content>}</block></switch>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pty_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tty</name></name> <modifier>*</modifier></type><name>tty</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>blocking</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>tty_input</name><argument_list>(<argument><expr><name><name>tty</name><operator>-&gt;</operator><name>pty</name><operator>.</operator><name>other</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>blocking</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>pty_return_eio</name><argument_list>(<argument><expr>struct <name>tty</name> <operator>*</operator><call><name>UNUSED</name><argument_list>(<argument><expr><name>tty</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list> <block>{<block_content>
    <return>return <expr><name>_EIO</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_PTYS</name></cpp:macro> <cpp:value>(1 &lt;&lt; 12)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>tty_driver_ops</name></name></type> <name>pty_master_ops</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>init</name> <operator>=</operator> <name>pty_master_init</name></expr>,
    <expr><operator>.</operator><name>open</name> <operator>=</operator> <name>pty_return_eio</name></expr>,
    <expr><operator>.</operator><name>write</name> <operator>=</operator> <name>pty_write</name></expr>,
    <expr><operator>.</operator><name>ioctl</name> <operator>=</operator> <name>pty_master_ioctl</name></expr>,
    <expr><operator>.</operator><name>cleanup</name> <operator>=</operator> <name>pty_master_cleanup</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DEFINE_TTY_DRIVER</name><argument_list>(<argument><expr><name>pty_master</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pty_master_ops</name></expr></argument>, <argument><expr><name>TTY_PSEUDO_MASTER_MAJOR</name></expr></argument>, <argument><expr><name>MAX_PTYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>tty_driver_ops</name></name></type> <name>pty_slave_ops</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>init</name> <operator>=</operator> <name>pty_return_eio</name></expr>,
    <expr><operator>.</operator><name>open</name> <operator>=</operator> <name>pty_slave_open</name></expr>,
    <expr><operator>.</operator><name>write</name> <operator>=</operator> <name>pty_write</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DEFINE_TTY_DRIVER</name><argument_list>(<argument><expr><name>pty_slave</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pty_slave_ops</name></expr></argument>, <argument><expr><name>TTY_PSEUDO_SLAVE_MAJOR</name></expr></argument>, <argument><expr><name>MAX_PTYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pty_reserve_next</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>pty_num</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ttys_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>pty_num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pty_num</name> <operator>&lt;</operator> <name>MAX_PTYS</name></expr>;</condition> <incr><expr><name>pty_num</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pty_slave</name><operator>.</operator><name>ttys</name><index>[<expr><name>pty_num</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name><name>pty_slave</name><operator>.</operator><name>ttys</name><index>[<expr><name>pty_num</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="line">// anything non-null to reserve it</comment>
    <expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ttys_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>pty_num</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ptmx_open</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>pty_num</name> <init>= <expr><call><name>pty_reserve_next</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pty_num</name> <operator>==</operator> <name>MAX_PTYS</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_ENOSPC</name></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>tty</name></name> <modifier>*</modifier></type><name>master</name> <init>= <expr><call><name>tty_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pty_master</name></expr></argument>, <argument><expr><name>TTY_PSEUDO_MASTER_MAJOR</name></expr></argument>, <argument><expr><name>pty_num</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IS_ERR</name><argument_list>(<argument><expr><name>master</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>PTR_ERR</name><argument_list>(<argument><expr><name>master</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><call><name>tty_open</name><argument_list>(<argument><expr><name>master</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>tty</name></name> <modifier>*</modifier></type><name>pty_open_fake</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tty_driver</name></name> <modifier>*</modifier></type><name>driver</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>pty_num</name> <init>= <expr><call><name>pty_reserve_next</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pty_num</name> <operator>==</operator> <name>MAX_PTYS</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>ERR_PTR</name><argument_list>(<argument><expr><name>_ENOSPC</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <comment type="line">// TODO this is a bit of a hack</comment>
    <expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>ttys</name></name> <operator>=</operator> <name><name>pty_slave</name><operator>.</operator><name>ttys</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>limit</name></name> <operator>=</operator> <name><name>pty_slave</name><operator>.</operator><name>limit</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>major</name></name> <operator>=</operator> <name>TTY_PSEUDO_SLAVE_MAJOR</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>tty</name></name> <modifier>*</modifier></type><name>tty</name> <init>= <expr><call><name>tty_get</name><argument_list>(<argument><expr><name>driver</name></expr></argument>, <argument><expr><name>TTY_PSEUDO_SLAVE_MAJOR</name></expr></argument>, <argument><expr><name>pty_num</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IS_ERR</name><argument_list>(<argument><expr><name>tty</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>tty</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>pty_slave_init_inode</name><argument_list>(<argument><expr><name>tty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>tty</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>isdigits</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
    <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>fd_ops</name></name></type> <name>devpts_fdops</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>devpts_pty_exists</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pty_num</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pty_num</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>pty_num</name></expr></argument> &gt;</argument_list></name> <name>MAX_PTYS</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ttys_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>exists</name> <init>= <expr><name><name>pty_slave</name><operator>.</operator><name>ttys</name><index>[<expr><name>pty_num</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ttys_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>exists</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// this has a slightly weird error returning convention</comment>
<comment type="line">// I'm lucky that ENOENT is -2 and not -1</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>devpts_get_pty_num</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="line">// root</comment>
    <if_stmt><if>if <condition>(<expr><name><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'/'</literal> <operator>||</operator> <name><name>path</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>path</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_ENOENT</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="line">// there's one path component here, which had better be a pty number</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>path</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt> <comment type="line">// skip the initial /</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isdigits</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_ENOENT</name></expr>;</return></block_content></block></if></if_stmt>
    <comment type="line">// it's not possible to correctly use atoi</comment>
    <decl_stmt><decl><type><name>long</name></type> <name>pty_long</name> <init>= <expr><call><name>atol</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pty_long</name> <operator>&gt;</operator> <name>INT_MAX</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_ENOENT</name></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>pty_num</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <name>pty_long</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>devpts_pty_exists</name><argument_list>(<argument><expr><name>pty_num</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_ENOENT</name></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><name>pty_num</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>devpts_open</name><argument_list>(<argument><expr>struct <name>mount</name> <operator>*</operator><call><name>UNUSED</name><argument_list>(<argument><expr><name>mount</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>path</name></expr></argument>, <argument><expr><name>int</name> <call><name>UNUSED</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>int</name> <call><name>UNUSED</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>pty_num</name> <init>= <expr><call><name>devpts_get_pty_num</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pty_num</name> <operator>==</operator> <name>_ENOENT</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>ERR_PTR</name><argument_list>(<argument><expr><name>_ENOENT</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name> <init>= <expr><call><name>fd_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>devpts_fdops</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>fd</name><operator>-&gt;</operator><name>devpts</name><operator>.</operator><name>num</name></name> <operator>=</operator> <name>pty_num</name></expr>;</expr_stmt>
    <return>return <expr><name>fd</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>devpts_getpath</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>fd</name><operator>-&gt;</operator><name>devpts</name><operator>.</operator><name>num</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"/%d"</literal></expr></argument>, <argument><expr><name><name>fd</name><operator>-&gt;</operator><name>devpts</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>devpts_stat_num</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pty_num</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>statbuf</name></name> <modifier>*</modifier></type><name>stat</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>pty_num</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">// root</comment>
        <expr_stmt><expr><name><name>stat</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>S_IFDIR</name> <operator>|</operator> <literal type="number">0755</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>stat</name><operator>-&gt;</operator><name>inode</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ttys_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>struct</name> <name>tty</name></name> <modifier>*</modifier></type><name>tty</name> <init>= <expr><name><name>pty_slave</name><operator>.</operator><name>ttys</name><index>[<expr><name>pty_num</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>tty</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tty</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>stat</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>S_IFCHR</name> <operator>|</operator> <name><name>tty</name><operator>-&gt;</operator><name>pty</name><operator>.</operator><name>perms</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>stat</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <name><name>tty</name><operator>-&gt;</operator><name>pty</name><operator>.</operator><name>uid</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>stat</name><operator>-&gt;</operator><name>gid</name></name> <operator>=</operator> <name><name>tty</name><operator>-&gt;</operator><name>pty</name><operator>.</operator><name>gid</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>stat</name><operator>-&gt;</operator><name>inode</name></name> <operator>=</operator> <name>pty_num</name> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>stat</name><operator>-&gt;</operator><name>rdev</name></name> <operator>=</operator> <call><name>dev_make</name><argument_list>(<argument><expr><name>TTY_PSEUDO_SLAVE_MAJOR</name></expr></argument>, <argument><expr><name>pty_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tty</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ttys_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>devpts_setattr_num</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pty_num</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>attr</name></name></type> <name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>pty_num</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_EROFS</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>attr</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>attr_size</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_EINVAL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ttys_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>tty</name></name> <modifier>*</modifier></type><name>tty</name> <init>= <expr><name><name>pty_slave</name><operator>.</operator><name>ttys</name><index>[<expr><name>pty_num</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>tty</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tty</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch>switch <condition>(<expr><name><name>attr</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>attr_uid</name></expr>:</case>
            <expr_stmt><expr><name><name>tty</name><operator>-&gt;</operator><name>pty</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <name><name>attr</name><operator>.</operator><name>uid</name></name></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>attr_gid</name></expr>:</case>
            <expr_stmt><expr><name><name>tty</name><operator>-&gt;</operator><name>pty</name><operator>.</operator><name>gid</name></name> <operator>=</operator> <name><name>attr</name><operator>.</operator><name>gid</name></name></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>attr_mode</name></expr>:</case>
            <expr_stmt><expr><name><name>tty</name><operator>-&gt;</operator><name>pty</name><operator>.</operator><name>perms</name></name> <operator>=</operator> <name><name>attr</name><operator>.</operator><name>mode</name></name></expr>;</expr_stmt>
            <break>break;</break>
    </block_content>}</block></switch>

    <expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tty</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ttys_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>devpts_fstat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>statbuf</name></name> <modifier>*</modifier></type><name>stat</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>devpts_stat_num</name><argument_list>(<argument><expr><name><name>fd</name><operator>-&gt;</operator><name>devpts</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name>stat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>devpts_stat</name><argument_list>(<argument><expr>struct <name>mount</name> <operator>*</operator><call><name>UNUSED</name><argument_list>(<argument><expr><name>mount</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>path</name></expr></argument>, <argument><expr>struct <name>statbuf</name> <operator>*</operator><name>stat</name></expr></argument>)</argument_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>pty_num</name> <init>= <expr><call><name>devpts_get_pty_num</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pty_num</name> <operator>==</operator> <name>_ENOENT</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_ENOENT</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>devpts_stat_num</name><argument_list>(<argument><expr><name>pty_num</name></expr></argument>, <argument><expr><name>stat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>devpts_setattr</name><argument_list>(<argument><expr>struct <name>mount</name> <operator>*</operator><call><name>UNUSED</name><argument_list>(<argument><expr><name>mount</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>path</name></expr></argument>, <argument><expr>struct <name>attr</name> <name>attr</name></expr></argument>)</argument_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>pty_num</name> <init>= <expr><call><name>devpts_get_pty_num</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pty_num</name> <operator>==</operator> <name>_ENOENT</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_ENOENT</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>devpts_setattr_num</name><argument_list>(<argument><expr><name>pty_num</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>devpts_fsetattr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>attr</name></name></type> <name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>devpts_setattr_num</name><argument_list>(<argument><expr><name><name>fd</name><operator>-&gt;</operator><name>devpts</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>devpts_readdir</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dir_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>fd</name><operator>-&gt;</operator><name>devpts</name><operator>.</operator><name>num</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// there shouldn't be anything to list but the root</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>pty_num</name> <init>= <expr><name><name>fd</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>pty_num</name> <operator>&lt;</operator> <name>MAX_PTYS</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>devpts_pty_exists</name><argument_list>(<argument><expr><name>pty_num</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>pty_num</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
    <if_stmt><if>if <condition>(<expr><name>pty_num</name> <operator>&gt;=</operator> <name>MAX_PTYS</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>fd</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>pty_num</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>pty_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>inode</name></name> <operator>=</operator> <name>pty_num</name> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fs_ops</name></name></type> <name>devptsfs</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"devpts"</literal></expr>, <expr><operator>.</operator><name>magic</name> <operator>=</operator> <literal type="number">0x1cd1</literal></expr>,
    <expr><operator>.</operator><name>open</name> <operator>=</operator> <name>devpts_open</name></expr>,
    <expr><operator>.</operator><name>getpath</name> <operator>=</operator> <name>devpts_getpath</name></expr>,
    <expr><operator>.</operator><name>stat</name> <operator>=</operator> <name>devpts_stat</name></expr>,
    <expr><operator>.</operator><name>fstat</name> <operator>=</operator> <name>devpts_fstat</name></expr>,
    <expr><operator>.</operator><name>setattr</name> <operator>=</operator> <name>devpts_setattr</name></expr>,
    <expr><operator>.</operator><name>fsetattr</name> <operator>=</operator> <name>devpts_fsetattr</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>fd_ops</name></name></type> <name>devpts_fdops</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>readdir</name> <operator>=</operator> <name>devpts_readdir</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
