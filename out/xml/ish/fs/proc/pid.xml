<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/fs/proc/pid.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"emu/memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kernel/calls.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fs/proc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fs/fd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fs/tty.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kernel/fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kernel/vdso.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util/sync.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>proc_pid_getname</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>proc_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>task</name></name> <modifier>*</modifier></type><name>proc_get_task</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>proc_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pids_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>task</name></name> <modifier>*</modifier></type><name>task</name> <init>= <expr><call><name>pid_get_task</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>task</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pids_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>task</name></expr>;</return>
</block_content>}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>proc_put_task</name><argument_list>(<argument><expr>struct <name>task</name> <operator>*</operator><call><name>UNUSED</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list> <block>{<block_content>
    <expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pids_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>proc_pid_stat_show</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>proc_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>proc_data</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>task</name></name> <modifier>*</modifier></type><name>task</name> <init>= <expr><call><name>proc_get_task</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>task</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_ESRCH</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>general_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>group</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>sighand</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>proc_printf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%d "</literal></expr></argument>, <argument><expr><name><name>task</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>proc_printf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"(%.16s) "</literal></expr></argument>, <argument><expr><name><name>task</name><operator>-&gt;</operator><name>comm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>proc_printf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%c "</literal></expr></argument>,
            <argument><expr><ternary><condition><expr><name><name>task</name><operator>-&gt;</operator><name>zombie</name></name></expr> ?</condition><then> <expr><literal type="char">'Z'</literal></expr> </then><else>:
            <expr><ternary><condition><expr><name><name>task</name><operator>-&gt;</operator><name>group</name><operator>-&gt;</operator><name>stopped</name></name></expr> ?</condition><then> <expr><literal type="char">'T'</literal></expr> </then><else>:
            <expr><literal type="char">'R'</literal></expr></else></ternary></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// I have no visibility into sleep state at the moment</comment>
    <expr_stmt><expr><call><name>proc_printf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%d "</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>task</name><operator>-&gt;</operator><name>parent</name></name></expr> ?</condition><then> <expr><name><name>task</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>pid</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>proc_printf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%d "</literal></expr></argument>, <argument><expr><name><name>task</name><operator>-&gt;</operator><name>group</name><operator>-&gt;</operator><name>pgid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>proc_printf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%d "</literal></expr></argument>, <argument><expr><name><name>task</name><operator>-&gt;</operator><name>group</name><operator>-&gt;</operator><name>sid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>tty</name></name> <modifier>*</modifier></type><name>tty</name> <init>= <expr><name><name>task</name><operator>-&gt;</operator><name>group</name><operator>-&gt;</operator><name>tty</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>proc_printf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%d "</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>tty</name></expr> ?</condition><then> <expr><call><name>dev_make</name><argument_list>(<argument><expr><name><name>tty</name><operator>-&gt;</operator><name>driver</name><operator>-&gt;</operator><name>major</name></name></expr></argument>, <argument><expr><name><name>tty</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>proc_printf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%d "</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>tty</name></expr> ?</condition><then> <expr><name><name>tty</name><operator>-&gt;</operator><name>fg_group</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>proc_printf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%u "</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// flags</comment>

    <comment type="line">// page faults (no data available)</comment>
    <expr_stmt><expr><call><name>proc_printf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%lu "</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// minor faults</comment>
    <expr_stmt><expr><call><name>proc_printf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%lu "</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// children minor faults</comment>
    <expr_stmt><expr><call><name>proc_printf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%lu "</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// major faults</comment>
    <expr_stmt><expr><call><name>proc_printf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%lu "</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// children major faults</comment>

    <comment type="line">// values that would be returned from getrusage</comment>
    <comment type="line">// finding these for a given process isn't too easy</comment>
    <expr_stmt><expr><call><name>proc_printf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%lu "</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// user time</comment>
    <expr_stmt><expr><call><name>proc_printf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%lu "</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// system time</comment>
    <expr_stmt><expr><call><name>proc_printf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%ld "</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// children user time</comment>
    <expr_stmt><expr><call><name>proc_printf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%ld "</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// children system time</comment>

    <expr_stmt><expr><call><name>proc_printf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%ld "</literal></expr></argument>, <argument><expr><literal type="number">20l</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// priority (not adjustable)</comment>
    <expr_stmt><expr><call><name>proc_printf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%ld "</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// nice (also not adjustable)</comment>
    <expr_stmt><expr><call><name>proc_printf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%ld "</literal></expr></argument>, <argument><expr><call><name>list_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>group</name><operator>-&gt;</operator><name>threads</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>proc_printf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%ld "</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// itimer value (deprecated, always 0)</comment>
    <expr_stmt><expr><call><name>proc_printf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%lld "</literal></expr></argument>, <argument><expr><literal type="number">0ll</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// jiffies on process start</comment>

    <expr_stmt><expr><call><name>proc_printf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%lu "</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// vsize</comment>
    <expr_stmt><expr><call><name>proc_printf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%ld "</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// rss</comment>
    <expr_stmt><expr><call><name>proc_printf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%lu "</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// rss limit</comment>

    <comment type="line">// bunch of shit that can only be accessed by a debugger</comment>
    <expr_stmt><expr><call><name>proc_printf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%lu "</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// startcode</comment>
    <expr_stmt><expr><call><name>proc_printf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%lu "</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// endcode</comment>
    <expr_stmt><expr><call><name>proc_printf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%lu "</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>task</name><operator>-&gt;</operator><name>mm</name></name></expr> ?</condition><then> <expr><name><name>task</name><operator>-&gt;</operator><name>mm</name><operator>-&gt;</operator><name>stack_start</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>proc_printf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%lu "</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// kstkesp</comment>
    <expr_stmt><expr><call><name>proc_printf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%lu "</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// kstkeip</comment>

    <expr_stmt><expr><call><name>proc_printf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%lu "</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>task</name><operator>-&gt;</operator><name>pending</name></name> <operator>&amp;</operator> <literal type="number">0xffffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>proc_printf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%lu "</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>task</name><operator>-&gt;</operator><name>blocked</name></name> <operator>&amp;</operator> <literal type="number">0xffffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>ignored</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>caught</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>task</name><operator>-&gt;</operator><name>sighand</name><operator>-&gt;</operator><name>action</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>handler</name> <operator>==</operator> <name>SIG_IGN_</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>ignored</name> <operator>|=</operator> <literal type="number">1l</literal> <operator>&lt;&lt;</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name><name>task</name><operator>-&gt;</operator><name>sighand</name><operator>-&gt;</operator><name>action</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>handler</name> <operator>!=</operator> <name>SIG_DFL_</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>caught</name> <operator>|=</operator> <literal type="number">1l</literal> <operator>&lt;&lt;</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>proc_printf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%lu "</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>ignored</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>proc_printf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%lu "</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>caught</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>proc_printf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%lu "</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// wchan (wtf)</comment>
    <expr_stmt><expr><call><name>proc_printf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%lu "</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// nswap</comment>
    <expr_stmt><expr><call><name>proc_printf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%lu "</literal></expr></argument>, <argument><expr><literal type="number">0l</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// cnswap</comment>
    <expr_stmt><expr><call><name>proc_printf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>task</name><operator>-&gt;</operator><name>exit_signal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// that's enough for now</comment>
    <expr_stmt><expr><call><name>proc_printf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>sighand</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>group</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>general_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>proc_put_task</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>proc_pid_auxv_show</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>proc_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>proc_data</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>task</name></name> <modifier>*</modifier></type><name>task</name> <init>= <expr><call><name>proc_get_task</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>task</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_ESRCH</name></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>general_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>task</name><operator>-&gt;</operator><name>mm</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>out_free_task</name>;</goto></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><name><name>task</name><operator>-&gt;</operator><name>mm</name><operator>-&gt;</operator><name>auxv_end</name></name> <operator>-</operator> <name><name>task</name><operator>-&gt;</operator><name>mm</name><operator>-&gt;</operator><name>auxv_start</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>_ENOMEM</name></expr>;</expr_stmt>
        <goto>goto <name>out_free_task</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>user_read_task</name><argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><name><name>task</name><operator>-&gt;</operator><name>mm</name><operator>-&gt;</operator><name>auxv_start</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>proc_buf_append</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>out_free_task</name>:</label>
    <expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>general_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>proc_put_task</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>proc_pid_cmdline_show</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>proc_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>proc_data</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>task</name></name> <modifier>*</modifier></type><name>task</name> <init>= <expr><call><name>proc_get_task</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>task</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_ESRCH</name></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>general_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>task</name><operator>-&gt;</operator><name>mm</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>out_free_task</name>;</goto></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><name><name>task</name><operator>-&gt;</operator><name>mm</name><operator>-&gt;</operator><name>argv_end</name></name> <operator>-</operator> <name><name>task</name><operator>-&gt;</operator><name>mm</name><operator>-&gt;</operator><name>argv_start</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>_ENOMEM</name></expr>;</expr_stmt>
        <goto>goto <name>out_free_task</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>user_read_task</name><argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><name><name>task</name><operator>-&gt;</operator><name>mm</name><operator>-&gt;</operator><name>argv_start</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>proc_buf_append</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>out_free_task</name>:</label>
    <expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>general_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>proc_put_task</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>proc_maps_dump</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>task</name></name> <modifier>*</modifier></type><name>task</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>proc_data</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>mem</name></name> <modifier>*</modifier></type><name>mem</name> <init>= <expr><name><name>task</name><operator>-&gt;</operator><name>mem</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>mem</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>read_wrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mem</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>page_t</name></type> <name>page</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>page</name> <operator>&lt;</operator> <name>MEM_PAGES</name></expr>)</condition> <block>{<block_content>
        <comment type="line">// find a region</comment>
        <while>while <condition>(<expr><name>page</name> <operator>&lt;</operator> <name>MEM_PAGES</name> <operator>&amp;&amp;</operator> <call><name>mem_pt</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><name>page</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>mem_next_page</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <if_stmt><if>if <condition>(<expr><name>page</name> <operator>&gt;=</operator> <name>MEM_PAGES</name></expr>)</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>page_t</name></type> <name>start</name> <init>= <expr><name>page</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>struct</name> <name>pt_entry</name></name> <modifier>*</modifier></type><name>start_pt</name> <init>= <expr><call><name>mem_pt</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>struct</name> <name>data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>start_pt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

        <comment type="line">// find the end of said region</comment>
        <while>while <condition>(<expr><name>page</name> <operator>&lt;</operator> <name>MEM_PAGES</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>struct</name> <name>pt_entry</name></name> <modifier>*</modifier></type><name>pt</name> <init>= <expr><call><name>mem_pt</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><name>page</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>pt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                <break>break;</break></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>P_RWX</name><operator>)</operator> <operator>!=</operator> <operator>(</operator><name><name>start_pt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>P_RWX</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <break>break;</break></block_content></block></if></if_stmt>
            <comment type="line">// region continues if data is the same or both are anonymous</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>pt</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>data</name> <operator>||</operator> <operator>(</operator><name><name>pt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>P_ANONYMOUS</name> <operator>&amp;&amp;</operator> <name><name>start_pt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>P_ANONYMOUS</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <break>break;</break></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>mem_next_page</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <decl_stmt><decl><type><name>page_t</name></type> <name>end</name> <init>= <expr><name>page</name></expr></init></decl>;</decl_stmt>

        <comment type="line">// output info</comment>
        <decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>start_pt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>P_GROWSDOWN</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"[stack]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>fd</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>generic_getpath</name><argument_list>(<argument><expr><name><name>start_pt</name><operator>-&gt;</operator><name>data</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>proc_printf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%08x-%08x %c%c%c%c %08lx 00:00 %-10d %s\n"</literal></expr></argument>,
                <argument><expr><name>start</name> <operator>&lt;&lt;</operator> <name>PAGE_BITS</name></expr></argument>, <argument><expr><name>end</name> <operator>&lt;&lt;</operator> <name>PAGE_BITS</name></expr></argument>,
                <argument><expr><ternary><condition><expr><name><name>start_pt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>P_READ</name></expr> ?</condition><then> <expr><literal type="char">'r'</literal></expr> </then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr></argument>,
                <argument><expr><ternary><condition><expr><name><name>start_pt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>P_WRITE</name></expr> ?</condition><then> <expr><literal type="char">'w'</literal></expr> </then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr></argument>,
                <argument><expr><ternary><condition><expr><name><name>start_pt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>P_EXEC</name></expr> ?</condition><then> <expr><literal type="char">'x'</literal></expr> </then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr></argument>,
                <argument><expr><ternary><condition><expr><name><name>start_pt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>P_SHARED</name></expr> ?</condition><then> <expr><literal type="char">'-'</literal></expr> </then><else>: <expr><literal type="char">'p'</literal></expr></else></ternary></expr></argument>,
                <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>data</name><operator>-&gt;</operator><name>file_offset</name></name></expr></argument>, <comment type="line">// offset</comment>
                <argument><expr><literal type="number">0</literal></expr></argument>, <comment type="line">// inode</comment>
                <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>read_wrunlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mem</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>proc_pid_maps_show</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>proc_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>proc_data</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>task</name></name> <modifier>*</modifier></type><name>task</name> <init>= <expr><call><name>proc_get_task</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>task</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_ESRCH</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>proc_maps_dump</name><argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>proc_put_task</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>proc_pid_mem_pread</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>proc_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>proc_data</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>task</name></name> <modifier>*</modifier></type><name>task</name> <init>= <expr><call><name>proc_get_task</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>task</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_ESRCH</name></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>user_read_task</name><argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><operator>(</operator><name>addr_t</name><operator>)</operator><name>offset</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>proc_put_task</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><ternary><condition><expr><name>result</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name><name>buf</name><operator>-&gt;</operator><name>size</name></name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>proc_pid_mem_pwrite</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>proc_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>proc_data</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>task</name></name> <modifier>*</modifier></type><name>task</name> <init>= <expr><call><name>proc_get_task</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>task</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_ESRCH</name></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>user_write_task_ptrace</name><argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><operator>(</operator><name>addr_t</name><operator>)</operator><name>offset</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>proc_put_task</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><ternary><condition><expr><name>result</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name><name>buf</name><operator>-&gt;</operator><name>size</name></name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>proc_dir_entry</name></name></type> <name>proc_pid_fd</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>proc_pid_fd_readdir</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>proc_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>index</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>proc_entry</name></name> <modifier>*</modifier></type><name>next_entry</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>task</name></name> <modifier>*</modifier></type><name>task</name> <init>= <expr><call><name>proc_get_task</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>task</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_ESRCH</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>files</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><operator>*</operator><name>index</name> <operator>&lt;</operator> <name><name>task</name><operator>-&gt;</operator><name>files</name><operator>-&gt;</operator><name>size</name></name> <operator>&amp;&amp;</operator> <name><name>task</name><operator>-&gt;</operator><name>files</name><operator>-&gt;</operator><name>files</name><index>[<expr><operator>*</operator><name>index</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>index</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
    <decl_stmt><decl><type><name>fd_t</name></type> <name>f</name> <init>= <expr><operator>(</operator><operator>*</operator><name>index</name><operator>)</operator><operator>++</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>any_left</name> <init>= <expr><operator>(</operator><name>unsigned</name><operator>)</operator> <name>f</name> <operator>&lt;</operator> <name><name>task</name><operator>-&gt;</operator><name>files</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>files</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>proc_put_task</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>next_entry</name> <operator>=</operator> <operator>(</operator>struct <name>proc_entry</name><operator>)</operator> <block>{<expr><operator>&amp;</operator><name>proc_pid_fd</name></expr>, <expr><operator>.</operator><name>pid</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>pid</name></name></expr>, <expr><operator>.</operator><name>fd</name> <operator>=</operator> <name>f</name></expr>}</block></expr>;</expr_stmt>
    <return>return <expr><name>any_left</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>proc_pid_fd_getname</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>proc_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>proc_pid_fd_readlink</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>proc_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>task</name></name> <modifier>*</modifier></type><name>task</name> <init>= <expr><call><name>proc_get_task</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>task</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_ESRCH</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>files</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name> <init>= <expr><call><name>fdtable_get</name><argument_list>(<argument><expr><name><name>task</name><operator>-&gt;</operator><name>files</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>generic_getpath</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>files</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>proc_put_task</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>proc_pid_exe_readlink</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>proc_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>task</name></name> <modifier>*</modifier></type><name>task</name> <init>= <expr><call><name>proc_get_task</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>task</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_ESRCH</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>general_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>generic_getpath</name><argument_list>(<argument><expr><name><name>task</name><operator>-&gt;</operator><name>mm</name><operator>-&gt;</operator><name>exefile</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>general_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>proc_put_task</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>proc_pid_task_getname</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>proc_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>proc_pid_task_readlink</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>proc_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"/proc/%d"</literal></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>proc_dir_entry</name></name></type> <name>proc_pid_task</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>proc_pid_task_readdir</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>proc_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>index</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>proc_entry</name></name> <modifier>*</modifier></type><name>next_entry</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="line">// TODO: Expose all threads</comment>
    <expr_stmt><expr><operator>*</operator><name>next_entry</name> <operator>=</operator> <operator>(</operator>struct <name>proc_entry</name><operator>)</operator> <block>{<expr><operator>&amp;</operator><name>proc_pid_task</name></expr>, <expr><operator>.</operator><name>pid</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>pid</name></name></expr>}</block></expr>;</expr_stmt>
    <return>return <expr><operator>!</operator><operator>(</operator><operator>*</operator><name>index</name><operator>)</operator><operator>++</operator></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><name><name>struct</name> <name>proc_children</name></name></type> <name>proc_pid_children</name> <init>= <macro><name>PROC_CHILDREN</name><argument_list>(<argument>{
    {<literal type="string">"auxv"</literal></argument>, <argument>.show = proc_pid_auxv_show}</argument>,
    <argument>{<literal type="string">"cmdline"</literal></argument>, <argument>.show = proc_pid_cmdline_show}</argument>,
    <argument>{<literal type="string">"exe"</literal></argument>, <argument>S_IFLNK</argument>, <argument>.readlink = proc_pid_exe_readlink}</argument>,
    <argument>{<literal type="string">"fd"</literal></argument>, <argument>S_IFDIR</argument>, <argument>.readdir = proc_pid_fd_readdir}</argument>,
    <argument>{<literal type="string">"maps"</literal></argument>, <argument>.show = proc_pid_maps_show}</argument>,
    <argument>{<literal type="string">"mem"</literal></argument>, <argument>.pread = proc_pid_mem_pread</argument>, <argument>.pwrite = proc_pid_mem_pwrite}</argument>,
    <argument>{<literal type="string">"stat"</literal></argument>, <argument>.show = proc_pid_stat_show}</argument>,
    <argument>{<literal type="string">"task"</literal></argument>, <argument>S_IFDIR</argument>, <argument>.readdir = proc_pid_task_readdir}</argument>,
<argument>}</argument>)</argument_list></macro></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>proc_dir_entry</name></name></type> <name>proc_pid</name> <init>= <expr><block>{<expr><name>NULL</name></expr>, <expr><name>S_IFDIR</name></expr>,
    <expr><operator>.</operator><name>children</name> <operator>=</operator> <operator>&amp;</operator><name>proc_pid_children</name></expr>, <expr><operator>.</operator><name>getname</name> <operator>=</operator> <name>proc_pid_getname</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>proc_dir_entry</name></name></type> <name>proc_pid_fd</name> <init>= <expr><block>{<expr><name>NULL</name></expr>, <expr><name>S_IFLNK</name></expr>,
    <expr><operator>.</operator><name>getname</name> <operator>=</operator> <name>proc_pid_fd_getname</name></expr>, <expr><operator>.</operator><name>readlink</name> <operator>=</operator> <name>proc_pid_fd_readlink</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>proc_dir_entry</name></name></type> <name>proc_pid_task</name> <init>= <expr><block>{<expr><name>NULL</name></expr>, <expr><name>S_IFLNK</name></expr>,
    <expr><operator>.</operator><name>getname</name> <operator>=</operator> <name>proc_pid_task_getname</name></expr>, <expr><operator>.</operator><name>readlink</name> <operator>=</operator> <name>proc_pid_task_readlink</name></expr>}</block></expr></init></decl>;</decl_stmt>
</unit>
