<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/fs/proc/entry.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fs/stat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fs/proc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kernel/task.h"</cpp:file></cpp:include>

<function><type><name>mode_t_</name></type> <name>proc_entry_mode</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>proc_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>mode_t_</name></type> <name>mode</name> <init>= <expr><name><name>entry</name><operator>-&gt;</operator><name>meta</name><operator>-&gt;</operator><name>mode</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>mode</name> <operator>&amp;</operator> <name>S_IFMT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>mode</name> <operator>|=</operator> <name>S_IFREG</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>mode</name> <operator>&amp;</operator> <literal type="number">0777</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>S_ISREG</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>mode</name> <operator>|=</operator> <literal type="number">0444</literal></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>mode</name> <operator>|=</operator> <literal type="number">0555</literal></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><call><name>S_ISLNK</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>mode</name> <operator>|=</operator> <literal type="number">0777</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>mode</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>proc_entry_stat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>proc_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>statbuf</name></name> <modifier>*</modifier></type><name>stat</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>stat</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>stat</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>stat</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <call><name>proc_entry_mode</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pids_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>task</name></name> <modifier>*</modifier></type><name>task</name> <init>= <expr><call><name>pid_get_task</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>task</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>stat</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <name><name>task</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>stat</name><operator>-&gt;</operator><name>gid</name></name> <operator>=</operator> <name><name>task</name><operator>-&gt;</operator><name>gid</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt> <comment type="line">// else the memset above will have initialized memory to zero, which is the root uid/gid</comment>

    <expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pids_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>stat</name><operator>-&gt;</operator><name>inode</name></name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>meta</name><operator>-&gt;</operator><name>inode</name></name> <operator>|</operator> <name><name>entry</name><operator>-&gt;</operator><name>pid</name></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>|</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <name><name>entry</name><operator>-&gt;</operator><name>fd</name></name> <operator>&lt;&lt;</operator> <literal type="number">48</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>proc_entry_getname</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>proc_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>meta</name><operator>-&gt;</operator><name>getname</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>entry</name><operator>-&gt;</operator><name>meta</name><operator>-&gt;</operator><name>getname</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>meta</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>meta</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><literal type="string">"missing name in proc entry"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>proc_dir_read</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>proc_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>index</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>proc_entry</name></name> <modifier>*</modifier></type><name>next_entry</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>meta</name><operator>-&gt;</operator><name>readdir</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name><name>entry</name><operator>-&gt;</operator><name>meta</name><operator>-&gt;</operator><name>readdir</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>next_entry</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>meta</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>index</name> <operator>&gt;=</operator> <name><name>entry</name><operator>-&gt;</operator><name>meta</name><operator>-&gt;</operator><name>children</name><operator>-&gt;</operator><name>count</name></name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>next_entry</name><operator>-&gt;</operator><name>meta</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>meta</name><operator>-&gt;</operator><name>children</name><operator>-&gt;</operator><name>entries</name><index>[<expr><operator>*</operator><name>index</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>next_entry</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>pid</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>index</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
        <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><literal type="string">"read from invalid proc directory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>free_string_array</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>array</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>proc_entry_cleanup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>proc_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>child_names</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>free_string_array</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>child_names</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>entry</name> <operator>=</operator> <operator>(</operator>struct <name>proc_entry</name><operator>)</operator> <block>{<expr><literal type="number">0</literal></expr>}</block></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
