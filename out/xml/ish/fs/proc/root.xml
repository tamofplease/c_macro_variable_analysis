<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/fs/proc/root.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kernel/calls.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fs/proc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"platform/platform.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>proc_show_version</name><argument_list>(<argument><expr>struct <name>proc_entry</name> <operator>*</operator><call><name>UNUSED</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>struct <name>proc_data</name> <operator>*</operator><name>buf</name></expr></argument>)</argument_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>uname</name></name></type> <name>uts</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>do_uname</name><argument_list>(<argument><expr><operator>&amp;</operator><name>uts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>proc_printf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s version %s %s\n"</literal></expr></argument>, <argument><expr><name><name>uts</name><operator>.</operator><name>system</name></name></expr></argument>, <argument><expr><name><name>uts</name><operator>.</operator><name>release</name></name></expr></argument>, <argument><expr><name><name>uts</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>proc_show_stat</name><argument_list>(<argument><expr>struct <name>proc_entry</name> <operator>*</operator><call><name>UNUSED</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>struct <name>proc_data</name> <operator>*</operator><name>buf</name></expr></argument>)</argument_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>cpu_usage</name></name></type> <name>usage</name> <init>= <expr><call><name>get_cpu_usage</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>proc_printf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"cpu  %"</literal><name>PRIu64</name><literal type="string">" %"</literal><name>PRIu64</name><literal type="string">" %"</literal><name>PRIu64</name><literal type="string">" %"</literal><name>PRIu64</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>usage</name><operator>.</operator><name>user_ticks</name></name></expr></argument>, <argument><expr><name><name>usage</name><operator>.</operator><name>nice_ticks</name></name></expr></argument>, <argument><expr><name><name>usage</name><operator>.</operator><name>system_ticks</name></name></expr></argument>, <argument><expr><name><name>usage</name><operator>.</operator><name>idle_ticks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>proc_show_cpuinfo</name><argument_list>(<argument><expr>struct <name>proc_entry</name> <operator>*</operator><call><name>UNUSED</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>struct <name>proc_data</name> <operator>*</operator><name>buf</name></expr></argument>)</argument_list> <block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>cpus</name> <init>= <expr><call><name>sysconf</name><argument_list>(<argument><expr><name>_SC_NPROCESSORS_ONLN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cpus</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>proc_printf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"processor\t: %u\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>proc_printf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"vendor_id\t: iSH\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>proc_printf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_kb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>proc_data</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>proc_printf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s%8"</literal><name>PRIu64</name><literal type="string">" kB\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name> <operator>/</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>proc_show_meminfo</name><argument_list>(<argument><expr>struct <name>proc_entry</name> <operator>*</operator><call><name>UNUSED</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>struct <name>proc_data</name> <operator>*</operator><name>buf</name></expr></argument>)</argument_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>mem_usage</name></name></type> <name>usage</name> <init>= <expr><call><name>get_mem_usage</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>show_kb</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"MemTotal:       "</literal></expr></argument>, <argument><expr><name><name>usage</name><operator>.</operator><name>total</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>show_kb</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"MemFree:        "</literal></expr></argument>, <argument><expr><name><name>usage</name><operator>.</operator><name>free</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>show_kb</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"MemShared:      "</literal></expr></argument>, <argument><expr><name><name>usage</name><operator>.</operator><name>free</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// a bunch of crap busybox top needs to see or else it gets stack garbage</comment>
    <expr_stmt><expr><call><name>show_kb</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"Shmem:          "</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>show_kb</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"Buffers:        "</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>show_kb</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"Cached:         "</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>show_kb</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"SwapTotal:      "</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>show_kb</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"SwapFree:       "</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>show_kb</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"Dirty:          "</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>show_kb</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"Writeback:      "</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>show_kb</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"AnonPages:      "</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>show_kb</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"Mapped:         "</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>show_kb</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"Slab:           "</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>proc_show_uptime</name><argument_list>(<argument><expr>struct <name>proc_entry</name> <operator>*</operator><call><name>UNUSED</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>struct <name>proc_data</name> <operator>*</operator><name>buf</name></expr></argument>)</argument_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>uptime_info</name></name></type> <name>uptime_info</name> <init>= <expr><call><name>get_uptime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>uptime</name> <init>= <expr><name><name>uptime_info</name><operator>.</operator><name>uptime_ticks</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>proc_printf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%u.%u %u.%u\n"</literal></expr></argument>, <argument><expr><name>uptime</name> <operator>/</operator> <literal type="number">100</literal></expr></argument>, <argument><expr><name>uptime</name> <operator>%</operator> <literal type="number">100</literal></expr></argument>, <argument><expr><name>uptime</name> <operator>/</operator> <literal type="number">100</literal></expr></argument>, <argument><expr><name>uptime</name> <operator>%</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>proc_readlink_self</name><argument_list>(<argument><expr>struct <name>proc_entry</name> <operator>*</operator><call><name>UNUSED</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>char</name> <operator>*</operator><name>buf</name></expr></argument>)</argument_list> <block>{<block_content>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%d/"</literal></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>proc_print_escaped</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>proc_data</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <switch>switch <condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
            <case>case <expr><literal type="char">'\t'</literal></expr>:</case> <case>case <expr><literal type="char">' '</literal></expr>:</case> <case>case <expr><literal type="char">'\\'</literal></expr>:</case>
                <expr_stmt><expr><call><name>proc_printf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\\%03o"</literal></expr></argument>, <argument><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <default>default:</default>
                <expr_stmt><expr><call><name>proc_printf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></switch>
    </block_content>}</block></for>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>proc_printf_comma</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>, <parameter><type><name>at_start</name></type></parameter>, <parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { \
    proc_printf((buf), "%s" format, *(at_start) ? "" : ",", ##__VA_ARGS__); \
    *(at_start) = false; \
} while (0)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>proc_show_mounts</name><argument_list>(<argument><expr>struct <name>proc_entry</name> <operator>*</operator><call><name>UNUSED</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>struct <name>proc_data</name> <operator>*</operator><name>buf</name></expr></argument>)</argument_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>mount</name></name> <modifier>*</modifier></type><name>mount</name></decl>;</decl_stmt>
    <macro><name>list_for_each_entry</name><argument_list>(<argument>&amp;mounts</argument>, <argument>mount</argument>, <argument>mounts</argument>)</argument_list></macro> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>point</name> <init>= <expr><name><name>mount</name><operator>-&gt;</operator><name>point</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>point</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>point</name> <operator>=</operator> <literal type="string">"/"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>proc_print_escaped</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>mount</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>proc_printf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>proc_print_escaped</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>proc_printf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" %s "</literal></expr></argument>, <argument><expr><name><name>mount</name><operator>-&gt;</operator><name>fs</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>at_start</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>proc_printf_comma</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>at_start</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>mount</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MS_READONLY_</name></expr> ?</condition><then> <expr><literal type="string">"ro"</literal></expr> </then><else>: <expr><literal type="string">"rw"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>mount</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MS_NOSUID_</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>proc_printf_comma</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>at_start</name></expr></argument>, <argument><expr><literal type="string">"nosuid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>mount</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MS_NODEV_</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>proc_printf_comma</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>at_start</name></expr></argument>, <argument><expr><literal type="string">"nodev"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>mount</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MS_NOEXEC_</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>proc_printf_comma</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>at_start</name></expr></argument>, <argument><expr><literal type="string">"noexec"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>mount</name><operator>-&gt;</operator><name>info</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>proc_printf_comma</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>at_start</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>mount</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>proc_printf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" 0 0\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block><empty_stmt>;</empty_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<comment type="line">// in alphabetical order</comment>
<decl_stmt><decl><type><name><name>struct</name> <name>proc_dir_entry</name></name></type> <name><name>proc_root_entries</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><literal type="string">"cpuinfo"</literal></expr>, <expr><operator>.</operator><name>show</name> <operator>=</operator> <name>proc_show_cpuinfo</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"ish"</literal></expr>, <expr><name>S_IFDIR</name></expr>, <expr><operator>.</operator><name>children</name> <operator>=</operator> <operator>&amp;</operator><name>proc_ish_children</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"meminfo"</literal></expr>, <expr><operator>.</operator><name>show</name> <operator>=</operator> <name>proc_show_meminfo</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"mounts"</literal></expr>, <expr><operator>.</operator><name>show</name> <operator>=</operator> <name>proc_show_mounts</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"self"</literal></expr>, <expr><name>S_IFLNK</name></expr>, <expr><operator>.</operator><name>readlink</name> <operator>=</operator> <name>proc_readlink_self</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"stat"</literal></expr>, <expr><operator>.</operator><name>show</name> <operator>=</operator> <name>proc_show_stat</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"uptime"</literal></expr>, <expr><operator>.</operator><name>show</name> <operator>=</operator> <name>proc_show_uptime</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"version"</literal></expr>, <expr><operator>.</operator><name>show</name> <operator>=</operator> <name>proc_show_version</name></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROC_ROOT_LEN</name></cpp:macro> <cpp:value>sizeof(proc_root_entries)/sizeof(proc_root_entries[0])</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>proc_root_readdir</name><argument_list>(<argument><expr>struct <name>proc_entry</name> <operator>*</operator><call><name>UNUSED</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>unsigned</name> <name>long</name> <operator>*</operator><name>index</name></expr></argument>, <argument><expr>struct <name>proc_entry</name> <operator>*</operator><name>next_entry</name></expr></argument>)</argument_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>index</name> <operator>&lt;</operator> <name>PROC_ROOT_LEN</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>next_entry</name> <operator>=</operator> <operator>(</operator>struct <name>proc_entry</name><operator>)</operator> <block>{<expr><operator>&amp;</operator><name><name>proc_root_entries</name><index>[<expr><operator>*</operator><name>index</name></expr>]</index></name></expr>, <expr><operator>*</operator><name>index</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>index</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
        <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>pid_t_</name></type> <name>pid</name> <init>= <expr><operator>*</operator><name>index</name> <operator>-</operator> <name>PROC_ROOT_LEN</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pid</name> <operator>&lt;=</operator> <name>MAX_PID</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pids_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <do>do <block>{<block_content>
            <expr_stmt><expr><name>pid</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block> while <condition>(<expr><name>pid</name> <operator>&lt;=</operator> <name>MAX_PID</name> <operator>&amp;&amp;</operator> <call><name>pid_get_task</name><argument_list>(<argument><expr><name>pid</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition>;</do>
        <expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pids_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>pid</name> <operator>&gt;</operator> <name>MAX_PID</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><operator>*</operator><name>next_entry</name> <operator>=</operator> <operator>(</operator>struct <name>proc_entry</name><operator>)</operator> <block>{<expr><operator>&amp;</operator><name>proc_pid</name></expr>, <expr><operator>.</operator><name>pid</name> <operator>=</operator> <name>pid</name></expr>}</block></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>index</name> <operator>=</operator> <name>pid</name> <operator>+</operator> <name>PROC_ROOT_LEN</name></expr>;</expr_stmt>
        <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>proc_dir_entry</name></name></type> <name>proc_root</name> <init>= <expr><block>{<expr><name>NULL</name></expr>, <expr><name>S_IFDIR</name></expr>, <expr><operator>.</operator><name>readdir</name> <operator>=</operator> <name>proc_root_readdir</name></expr>}</block></expr></init></decl>;</decl_stmt>
</unit>
