<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/fs/tty-real.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;termios.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kernel/calls.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fs/tty.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fs/devices.h"</cpp:file></cpp:include>

<comment type="line">// Only /dev/tty1 will be connected, the rest will go to a black hole.</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REAL_TTY_NUM</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<function_decl><type><name>void</name></type> <name>real_tty_reset_term</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>real_tty_read_thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_tty</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>tty</name></name> <modifier>*</modifier></type><name>tty</name> <init>= <expr><name>_tty</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>ch</name></decl>;</decl_stmt>
    <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>read</name><argument_list>(<argument><expr><name>STDIN_FILENO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ch</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>printk</name><argument_list>(<argument><expr><literal type="string">"tty read returned %d\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>printk</name><argument_list>(<argument><expr><literal type="string">"error: %s\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\x1c'</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// ^\ (so ^C still works for emulated SIGINT)</comment>
            <expr_stmt><expr><call><name>real_tty_reset_term</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>raise</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>tty_input</name><argument_list>(<argument><expr><name>tty</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ch</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>termios_</name></name></type> <name>termios_from_real</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>termios</name></name></type> <name>real</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>termios_</name></name></type> <name>fake</name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAG</name><parameter_list>(<parameter><type><name>t</name></type></parameter>, <parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>if (real.c_##t##flag &amp; x) \
        fake.t##flags |= x##_</cpp:value></cpp:define>
    <expr_stmt><expr><call><name>FLAG</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>OPOST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FLAG</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>ONLCR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FLAG</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>OCRNL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FLAG</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>ONOCR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FLAG</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>ONLRET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FLAG</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>INLCR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FLAG</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>IGNCR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FLAG</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>ICRNL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FLAG</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>ISIG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FLAG</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>ICANON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FLAG</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>ECHO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FLAG</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>ECHOE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FLAG</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>ECHOK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FLAG</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>NOFLSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FLAG</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>ECHOCTL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FLAG</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>fake.cc[V##x##_] = real.c_cc[V##x]</cpp:value></cpp:define>
    <expr_stmt><expr><call><name>CC</name><argument_list>(<argument><expr><name>INTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CC</name><argument_list>(<argument><expr><name>QUIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CC</name><argument_list>(<argument><expr><name>ERASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CC</name><argument_list>(<argument><expr><name>KILL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CC</name><argument_list>(<argument><expr><name>EOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CC</name><argument_list>(<argument><expr><name>TIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CC</name><argument_list>(<argument><expr><name>MIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CC</name><argument_list>(<argument><expr><name>START</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CC</name><argument_list>(<argument><expr><name>STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CC</name><argument_list>(<argument><expr><name>SUSP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CC</name><argument_list>(<argument><expr><name>EOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CC</name><argument_list>(<argument><expr><name>REPRINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CC</name><argument_list>(<argument><expr><name>DISCARD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CC</name><argument_list>(<argument><expr><name>WERASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CC</name><argument_list>(<argument><expr><name>LNEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CC</name><argument_list>(<argument><expr><name>EOL2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CC</name></cpp:undef>
    <return>return <expr><name>fake</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>termios</name></name></type> <name>old_termios</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>real_tty_is_open</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>int</name></type> <name>real_tty_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tty</name></name> <modifier>*</modifier></type><name>tty</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>tty</name><operator>-&gt;</operator><name>num</name></name> <operator>!=</operator> <name>REAL_TTY_NUM</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>winsize</name></name></type> <name>winsz</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>STDIN_FILENO</name></expr></argument>, <argument><expr><name>TIOCGWINSZ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>winsz</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOTTY</name></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>notty</name>;</goto></block_content></block></if></if_stmt>
        <return>return <expr><call><name>errno_map</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>tty</name><operator>-&gt;</operator><name>winsize</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name><name>winsz</name><operator>.</operator><name>ws_col</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tty</name><operator>-&gt;</operator><name>winsize</name><operator>.</operator><name>row</name></name> <operator>=</operator> <name><name>winsz</name><operator>.</operator><name>ws_row</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tty</name><operator>-&gt;</operator><name>winsize</name><operator>.</operator><name>xpixel</name></name> <operator>=</operator> <name><name>winsz</name><operator>.</operator><name>ws_xpixel</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tty</name><operator>-&gt;</operator><name>winsize</name><operator>.</operator><name>ypixel</name></name> <operator>=</operator> <name><name>winsz</name><operator>.</operator><name>ws_ypixel</name></name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>termios</name></name></type> <name>termios</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>tcgetattr</name><argument_list>(<argument><expr><name>STDIN_FILENO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>termios</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>errno_map</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>tty</name><operator>-&gt;</operator><name>termios</name></name> <operator>=</operator> <call><name>termios_from_real</name><argument_list>(<argument><expr><name>termios</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>old_termios</name> <operator>=</operator> <name>termios</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cfmakeraw</name><argument_list>(<argument><expr><operator>&amp;</operator><name>termios</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>NO_CRLF</name></cpp:ifdef>
    <expr_stmt><expr><name><name>termios</name><operator>.</operator><name>c_oflag</name></name> <operator>|=</operator> <name>OPOST</name> <operator>|</operator> <name>ONLCR</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <if_stmt><if>if <condition>(<expr><call><name>tcsetattr</name><argument_list>(<argument><expr><name>STDIN_FILENO</name></expr></argument>, <argument><expr><name>TCSANOW</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>termios</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ERRNO_DIE</name><argument_list>(<argument><expr><literal type="string">"failed to set terminal to raw mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<label><name>notty</name>:</label>

    <if_stmt><if>if <condition>(<expr><call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tty</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <argument><expr><name>real_tty_read_thread</name></expr></argument>, <argument><expr><name>tty</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <comment type="line">// ok if this actually happened it would be weird AF</comment>
        <return>return <expr><name>_EIO</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>pthread_detach</name><argument_list>(<argument><expr><name><name>tty</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>real_tty_is_open</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>real_tty_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tty</name></name> <modifier>*</modifier></type><name>tty</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><function_decl><type><name>bool</name></type> <name>UNUSED</name><parameter_list>(<parameter><decl><type><name>blocking</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>tty</name><operator>-&gt;</operator><name>num</name></name> <operator>!=</operator> <name>REAL_TTY_NUM</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>len</name></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><call><name>write</name><argument_list>(<argument><expr><name>STDOUT_FILENO</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>real_tty_reset_term</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>real_tty_is_open</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>tcsetattr</name><argument_list>(<argument><expr><name>STDIN_FILENO</name></expr></argument>, <argument><expr><name>TCSANOW</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>old_termios</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>ENOTTY</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printk</name><argument_list>(<argument><expr><literal type="string">"failed to reset terminal: %s\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>real_tty_cleanup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tty</name></name> <modifier>*</modifier></type><name>tty</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>tty</name><operator>-&gt;</operator><name>num</name></name> <operator>!=</operator> <name>REAL_TTY_NUM</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>real_tty_reset_term</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_cancel</name><argument_list>(<argument><expr><name><name>tty</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name><name>struct</name> <name>tty_driver_ops</name></name></type> <name>real_tty_ops</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>init</name> <operator>=</operator> <name>real_tty_init</name></expr>,
    <expr><operator>.</operator><name>write</name> <operator>=</operator> <name>real_tty_write</name></expr>,
    <expr><operator>.</operator><name>cleanup</name> <operator>=</operator> <name>real_tty_cleanup</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DEFINE_TTY_DRIVER</name><argument_list>(<argument><expr><name>real_tty_driver</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>real_tty_ops</name></expr></argument>, <argument><expr><name>TTY_CONSOLE_MAJOR</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</unit>
