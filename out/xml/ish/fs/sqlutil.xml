<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/fs/sqlutil.h"><cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FS_SQLUTIL_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FS_SQLUTIL_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sqlite3.h&gt;</cpp:file></cpp:include>

<comment type="line">// Some nice sqlite macros for anything outside of fs/fake.c</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>#__VA_ARGS__</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HANDLE_ERR</name><parameter_list>(<parameter><type><name>db</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>die("sqlite error while rebuilding: %s\n", sqlite3_errmsg(db))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_ERR</name><parameter_list>()</parameter_list></cpp:macro> \
    <cpp:value>if (err != SQLITE_OK &amp;&amp; err != SQLITE_ROW &amp;&amp; err != SQLITE_DONE) \
        HANDLE_ERR(db)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXEC</name><parameter_list>(<parameter><type><name>sql</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>err = sqlite3_exec(db, sql, NULL, NULL, NULL); \
    CHECK_ERR();</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREPARE</name><parameter_list>(<parameter><type><name>sql</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>({ \
    sqlite3_stmt *stmt; \
    err = sqlite3_prepare_v2(db, sql, -1, &amp;stmt, NULL); \
    CHECK_ERR(); \
    stmt; \
})</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STEP</name><parameter_list>(<parameter><type><name>stmt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>({ \
    err = sqlite3_step(stmt); \
    CHECK_ERR(); \
    err == SQLITE_ROW; \
})</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESET</name><parameter_list>(<parameter><type><name>stmt</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>err = sqlite3_reset(stmt); \
    CHECK_ERR()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STEP_RESET</name><parameter_list>(<parameter><type><name>stmt</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>STEP(stmt); \
    RESET(stmt)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FINALIZE</name><parameter_list>(<parameter><type><name>stmt</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>err = sqlite3_finalize(stmt); \
    CHECK_ERR()</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
