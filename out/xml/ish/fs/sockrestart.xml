<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/fs/sockrestart.h"><comment type="line">// Hack to work around the idiotic way iOS handles suspending apps that have</comment>
<comment type="line">// listening sockets.</comment>
<comment type="line">// Basically the actual socket part of the file just gets freed, and the socket</comment>
<comment type="line">// ceases to be a socket. Any attempt to do socket things with it will just</comment>
<comment type="line">// immediately fail, and anyone blocked on accept will never wake up.</comment>
<comment type="line">// Solution: keep track of all the listening sockets, and the threads that are</comment>
<comment type="line">// blocked on them. On suspend, make a record of the names and configuration of</comment>
<comment type="line">// all the listening sockets. On resume, open new sockets, reconfigure them,</comment>
<comment type="line">// use dup2 to replace the original sockets, and get any thread waiting on them</comment>
<comment type="line">// to restart the wait.</comment>
<comment type="line">// This file contains hooks into various other places to do all that.</comment>
<comment type="line">// https://developer.apple.com/library/archive/technotes/tn2277/_index.html</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FS_SOCKRESTART_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FS_SOCKRESTART_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util/list.h"</cpp:file></cpp:include>
<struct_decl>struct <name>fd</name>;</struct_decl>

<function_decl><type><name>void</name></type> <name>sockrestart_begin_listen</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>sock</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sockrestart_end_listen</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>sock</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sockrestart_begin_listen_wait</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>sock</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sockrestart_end_listen_wait</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>sock</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>sockrestart_should_restart_listen_wait</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sockrestart_on_suspend</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sockrestart_on_resume</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>fd_sockrestart</name> <block>{
    <decl_stmt><decl><type><name><name>struct</name> <name>list</name></name></type> <name>listen</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>task_sockrestart</name> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>punt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>list</name></name></type> <name>listen</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
