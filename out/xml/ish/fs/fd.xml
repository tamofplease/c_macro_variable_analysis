<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/fs/fd.h"><cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FD_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FD_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dirent.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"emu/memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util/list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util/sync.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util/bits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fs/stat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fs/proc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fs/sockrestart.h"</cpp:file></cpp:include>

<comment type="line">// FIXME almost everything that uses the structs in this file does so without any kind of sane locking</comment>

<struct>struct <name>fd</name> <block>{
    <decl_stmt><decl><type><name>atomic_uint</name></type> <name>refcount</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>flags</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mode_t_</name></type> <name>type</name></decl>;</decl_stmt> <comment type="line">// just the S_IFMT part, it can't change</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fd_ops</name></name> <modifier>*</modifier></type><name>ops</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>list</name></name></type> <name>poll_fds</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>lock_t</name></type> <name>poll_lock</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>offset</name></decl>;</decl_stmt>

    <comment type="line">// fd data</comment>
    <union>union <block>{
        <comment type="line">// tty</comment>
        <struct>struct <block>{
            <decl_stmt><decl><type><name><name>struct</name> <name>tty</name></name> <modifier>*</modifier></type><name>tty</name></decl>;</decl_stmt>
            <comment type="line">// links together fds pointing to the same tty</comment>
            <comment type="line">// locked by the tty</comment>
            <decl_stmt><decl><type><name><name>struct</name> <name>list</name></name></type> <name>tty_other_fds</name></decl>;</decl_stmt>
        }</block>;</struct>
        <struct>struct <block>{
            <decl_stmt><decl><type><name><name>struct</name> <name>poll</name></name> <modifier>*</modifier></type><name>poll</name></decl>;</decl_stmt>
        }</block> <decl><name>epollfd</name></decl>;</struct>
        <struct>struct <block>{
            <decl_stmt><decl><type><name>uint64_t</name></type> <name>val</name></decl>;</decl_stmt>
        }</block> <decl><name>eventfd</name></decl>;</struct>
        <struct>struct <block>{
            <decl_stmt><decl><type><name><name>struct</name> <name>timer</name></name> <modifier>*</modifier></type><name>timer</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>uint64_t</name></type> <name>expirations</name></decl>;</decl_stmt>
        }</block> <decl><name>timerfd</name></decl>;</struct>
        <struct>struct <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>domain</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>protocol</name></decl>;</decl_stmt>

            <comment type="line">// These are only used as strong references, to keep the inode</comment>
            <comment type="line">// alive while there is a listener.</comment>
            <decl_stmt><decl><type><name><name>struct</name> <name>inode_data</name></name> <modifier>*</modifier></type><name>unix_name_inode</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>struct</name> <name>unix_abstract</name></name> <modifier>*</modifier></type><name>unix_name_abstract</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>uint8_t</name></type> <name>unix_name_len</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>char</name></type> <name><name>unix_name</name><index>[<expr><literal type="number">108</literal></expr>]</index></name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>unix_peer</name></decl>;</decl_stmt> <comment type="line">// locked by peer_lock, for simplicity</comment>
            <decl_stmt><decl><type><name>cond_t</name></type> <name>unix_got_peer</name></decl>;</decl_stmt>
            <comment type="line">// Queue of struct scm for sending file descriptors</comment>
            <comment type="line">// locked by fd-&gt;lock</comment>
            <decl_stmt><decl><type><name><name>struct</name> <name>list</name></name></type> <name>unix_scm</name></decl>;</decl_stmt>
            <struct>struct <name>ucred_</name> <block>{
                <decl_stmt><decl><type><name>pid_t_</name></type> <name>pid</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>uid_t_</name></type> <name>uid</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>uid_t_</name></type> <name>gid</name></decl>;</decl_stmt>
            }</block> <decl><name>unix_cred</name></decl>;</struct>
        }</block> <decl><name>socket</name></decl>;</struct>

        <comment type="line">// See app/Pasteboard.m</comment>
        <struct>struct <block>{
            <comment type="line">// UIPasteboard.changeCount</comment>
            <decl_stmt><decl><type><name>uint64_t</name></type> <name>generation</name></decl>;</decl_stmt>
            <comment type="line">// Buffer for written data</comment>
            <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>buffer</name></decl>;</decl_stmt>
            <comment type="line">// its capacity</comment>
            <decl_stmt><decl><type><name>size_t</name></type> <name>buffer_cap</name></decl>;</decl_stmt>
            <comment type="line">// length of actual data stored in the buffer</comment>
            <decl_stmt><decl><type><name>size_t</name></type> <name>buffer_len</name></decl>;</decl_stmt>
        }</block> <decl><name>clipboard</name></decl>;</struct>

        <comment type="line">// can fit anything in here</comment>
        <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
    }</block>;</union>
    <comment type="line">// fs data</comment>
    <union>union <block>{
        <struct>struct <block>{
            <decl_stmt><decl><type><name><name>struct</name> <name>proc_entry</name></name></type> <name>entry</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>unsigned</name></type> <name>dir_index</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>struct</name> <name>proc_data</name></name></type> <name>data</name></decl>;</decl_stmt>
        }</block> <decl><name>proc</name></decl>;</struct>
        <struct>struct <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt>
        }</block> <decl><name>devpts</name></decl>;</struct>
        <struct>struct <block>{
            <decl_stmt><decl><type><name><name>struct</name> <name>tmp_dirent</name></name> <modifier>*</modifier></type><name>dirent</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>struct</name> <name>tmp_dirent</name></name> <modifier>*</modifier></type><name>dir_pos</name></decl>;</decl_stmt>
        }</block> <decl><name>tmpfs</name></decl>;</struct>
        <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>fs_data</name></decl>;</decl_stmt>
    }</block>;</union>

    <comment type="line">// fs/inode data</comment>
    <decl_stmt><decl><type><name><name>struct</name> <name>mount</name></name> <modifier>*</modifier></type><name>mount</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>real_fd</name></decl>;</decl_stmt> <comment type="line">// seeks on this fd require the lock TODO think about making a special lock just for that</comment>
    <decl_stmt><decl><type><name>DIR</name> <modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>inode_data</name></name> <modifier>*</modifier></type><name>inode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ino_t</name></type> <name>fake_inode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>statbuf</name></name></type> <name>stat</name></decl>;</decl_stmt> <comment type="line">// for adhoc fs</comment>
    <decl_stmt><decl><type><name><name>struct</name> <name>fd_sockrestart</name></name></type> <name>sockrestart</name></decl>;</decl_stmt> <comment type="line">// argh</comment>

    <comment type="line">// these are used for a variety of things related to the fd</comment>
    <decl_stmt><decl><type><name>lock_t</name></type> <name>lock</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cond_t</name></type> <name>cond</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><name>sdword_t</name></type> <name>fd_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_FDCWD_</name></cpp:macro> <cpp:value>-100</cpp:value></cpp:define>

<function_decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fd_ops</name></name> <modifier>*</modifier></type><name>ops</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd_retain</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>fd_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>fd_getflags</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>fd_setflags</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAME_MAX</name></cpp:macro> <cpp:value>255</cpp:value></cpp:define>
<struct>struct <name>dir_entry</name> <block>{
    <decl_stmt><decl><type><name>qword_t</name></type> <name>inode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>NAME_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSEEK_SET</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSEEK_CUR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSEEK_END</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<struct>struct <name>fd_ops</name> <block>{
    <comment type="line">// required for files</comment>
    <comment type="line">// TODO make optional for non-files</comment>
    <function_decl><type><name>ssize_t</name></type> (<modifier>*</modifier><name>read</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bufsize</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>ssize_t</name></type> (<modifier>*</modifier><name>write</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bufsize</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>ssize_t</name></type> (<modifier>*</modifier><name>pread</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bufsize</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>off</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>ssize_t</name></type> (<modifier>*</modifier><name>pwrite</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bufsize</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>off</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>off_t_</name></type> (<modifier>*</modifier><name>lseek</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>off_t_</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="line">// Reads a directory entry from the stream</comment>
    <comment type="line">// required for directories</comment>
    <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>readdir</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dir_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>;</function_decl>
    <comment type="line">// Return an opaque value representing the current point in the directory stream</comment>
    <comment type="line">// optional, fd-&gt;offset will be used instead</comment>
    <function_decl><type><name>unsigned</name> <name>long</name></type> (<modifier>*</modifier><name>telldir</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>)</parameter_list>;</function_decl>
    <comment type="line">// Seek to the location represented by a pointer returned from telldir</comment>
    <comment type="line">// optional, fd-&gt;offset will be used instead</comment>
    <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>seekdir</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="line">// map the file</comment>
    <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>mmap</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>mem</name></name> <modifier>*</modifier></type><name>mem</name></decl></parameter>, <parameter><decl><type><name>page_t</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>pages_t</name></type> <name>pages</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prot</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="line">// returns a bitmask of operations that won't block</comment>
    <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>poll</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="line">// returns the size needed for the output of ioctl, 0 if the arg is not a</comment>
    <comment type="line">// pointer, -1 for invalid command</comment>
    <function_decl><type><name>ssize_t</name></type> (<modifier>*</modifier><name>ioctl_size</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>
    <comment type="line">// if ioctl_size returns non-zero, arg must point to ioctl_size valid bytes</comment>
    <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>ioctl</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>fsync</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>close</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="line">// handle F_GETFL, i.e. return open flags for this fd</comment>
    <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>getflags</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>)</parameter_list>;</function_decl>
    <comment type="line">// handle F_SETFL, i.e. set O_NONBLOCK</comment>
    <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>setflags</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>dword_t</name></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>

<struct>struct <name>fdtable</name> <block>{
    <decl_stmt><decl><type><name>atomic_uint</name></type> <name>refcount</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>files</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bits_t</name> <modifier>*</modifier></type><name>cloexec</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>lock_t</name></type> <name>lock</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><name><name>struct</name> <name>fdtable</name></name> <modifier>*</modifier></type><name>fdtable_new</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>fdtable_release</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fdtable</name></name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>fdtable</name></name> <modifier>*</modifier></type><name>fdtable_copy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fdtable</name></name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>fdtable_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fdtable</name></name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>fdtable_do_cloexec</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fdtable</name></name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fdtable_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fdtable</name></name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>fd_t</name></type> <name>f</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>f_get</name><parameter_list>(<parameter><decl><type><name>fd_t</name></type> <name>f</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="line">// steals a reference to the fd, gives it to the table on success and destroys it on error</comment>
<comment type="line">// flags is checked for O_CLOEXEC and O_NONBLOCK</comment>
<function_decl><type><name>fd_t</name></type> <name>f_install</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>f_close</name><parameter_list>(<parameter><decl><type><name>fd_t</name></type> <name>f</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
