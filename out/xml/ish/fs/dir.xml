<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/fs/dir.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kernel/calls.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kernel/errno.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kernel/fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fs/fd.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type> <name>fd_telldir</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>off</name> <init>= <expr><name><name>fd</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>fd</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>telldir</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>off</name> <operator>=</operator> <call><name><name>fd</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>telldir</name></name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>off</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fd_seekdir</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>off</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>fd</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>off</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>fd</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>seekdir</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>fd</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>seekdir</name></name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<struct>struct <name>linux_dirent_</name> <block>{
    <decl_stmt><decl><type><name>dword_t</name></type> <name>inode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dword_t</name></type> <name>offset</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>word_t</name></type> <name>reclen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[]</index></name></decl>;</decl_stmt>
}</block> <decl><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>packed</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>

<struct>struct <name>linux_dirent64_</name> <block>{
    <decl_stmt><decl><type><name>qword_t</name></type> <name>inode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>qword_t</name></type> <name>offset</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>word_t</name></type> <name>reclen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>byte_t</name></type> <name>type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[]</index></name></decl>;</decl_stmt>
}</block> <decl><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>packed</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>

<function><type><name>size_t</name></type> <name>fill_dirent_32</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dirent_data</name></decl></parameter>, <parameter><decl><type><name>ino_t</name></type> <name>inode</name></decl></parameter>, <parameter><decl><type><name>off_t_</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>linux_dirent_</name></name> <modifier>*</modifier></type><name>dirent</name> <init>= <expr><name>dirent_data</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>dirent</name><operator>-&gt;</operator><name>inode</name></name> <operator>=</operator> <name>inode</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dirent</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dirent</name><operator>-&gt;</operator><name>reclen</name></name> <operator>=</operator> <call><name>offsetof</name><argument_list>(<argument><expr>struct <name>linux_dirent_</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator>
        <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt> <comment type="line">// name, null terminator, type</comment>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>dirent</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>dirent</name> <operator>+</operator> <name><name>dirent</name><operator>-&gt;</operator><name>reclen</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
    <return>return <expr><name><name>dirent</name><operator>-&gt;</operator><name>reclen</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>fill_dirent_64</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dirent_data</name></decl></parameter>, <parameter><decl><type><name>ino_t</name></type> <name>inode</name></decl></parameter>, <parameter><decl><type><name>off_t_</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>linux_dirent64_</name></name> <modifier>*</modifier></type><name>dirent</name> <init>= <expr><name>dirent_data</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>dirent</name><operator>-&gt;</operator><name>inode</name></name> <operator>=</operator> <name>inode</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dirent</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dirent</name><operator>-&gt;</operator><name>reclen</name></name> <operator>=</operator> <call><name>offsetof</name><argument_list>(<argument><expr>struct <name>linux_dirent64_</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator>
        <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="line">// name, null terminator</comment>
    <expr_stmt><expr><name><name>dirent</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>dirent</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name><name>dirent</name><operator>-&gt;</operator><name>reclen</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int_t</name></type> <name>sys_getdents_common</name><parameter_list>(<parameter><decl><type><name>fd_t</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>dirents</name></decl></parameter>, <parameter><decl><type><name>dword_t</name></type> <name>count</name></decl></parameter>,
        <parameter><function_decl><type><name>size_t</name></type> (<modifier>*</modifier><name>fill_dirent</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ino_t</name></type></decl></parameter>, <parameter><decl><type><name>off_t_</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>STRACE</name><argument_list>(<argument><expr><literal type="string">"getdents(%d, %#x, %#x)"</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>dirents</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name> <init>= <expr><call><name>f_get</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_EBADF</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>fd</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>fd</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>readdir</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_ENOTDIR</name></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>dword_t</name></type> <name>orig_count</name> <init>= <expr><name>count</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>long</name></type> <name>ptr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>printed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>fd_telldir</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>struct</name> <name>dir_entry</name></name></type> <name>entry</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name><name>fd</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>readdir</name></name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>size_t</name></type> <name>max_reclen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>linux_dirent64_</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name><name>dirent_data</name><index>[<expr><name>max_reclen</name></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ino_t</name></type> <name>inode</name> <init>= <expr><name><name>entry</name><operator>.</operator><name>inode</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>off_t_</name></type> <name>offset</name> <init>= <expr><call><name>fd_telldir</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name><name>entry</name><operator>.</operator><name>name</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>reclen</name> <init>= <expr><call><name>fill_dirent</name><argument_list>(<argument><expr><name>dirent_data</name></expr></argument>, <argument><expr><name>inode</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>printed</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>STRACE</name><argument_list>(<argument><expr><literal type="string">" {inode=%d, offset=%d, name=%s, type=%d, reclen=%d}"</literal></expr></argument>,
                    <argument><expr><name>inode</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>reclen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>printed</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>reclen</name> <operator>&gt;</operator> <name>count</name></expr>)</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>user_write</name><argument_list>(<argument><expr><name>dirents</name></expr></argument>, <argument><expr><name>dirent_data</name></expr></argument>, <argument><expr><name>reclen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>_EFAULT</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>dirents</name> <operator>+=</operator> <name>reclen</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>count</name> <operator>-=</operator> <name>reclen</name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>fd_seekdir</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>orig_count</name> <operator>-</operator> <name>count</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int_t</name></type> <name>sys_getdents</name><parameter_list>(<parameter><decl><type><name>fd_t</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>dirents</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>sys_getdents_common</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>dirents</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>fill_dirent_32</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int_t</name></type> <name>sys_getdents64</name><parameter_list>(<parameter><decl><type><name>fd_t</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>dirents</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>sys_getdents_common</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>dirents</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>fill_dirent_64</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

</unit>
