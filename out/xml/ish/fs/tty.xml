<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/fs/tty.h"><cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>TTY_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TTY_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kernel/fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fs/dev.h"</cpp:file></cpp:include>

<struct>struct <name>winsize_</name> <block>{
    <decl_stmt><decl><type><name>word_t</name></type> <name>row</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>word_t</name></type> <name>col</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>word_t</name></type> <name>xpixel</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>word_t</name></type> <name>ypixel</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="line">// This is the definition of __kernel_termios from glibc</comment>
<struct>struct <name>termios_</name> <block>{
    <decl_stmt><decl><type><name>dword_t</name></type> <name>iflags</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dword_t</name></type> <name>oflags</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dword_t</name></type> <name>cflags</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dword_t</name></type> <name>lflags</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>byte_t</name></type> <name>line</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>byte_t</name></type> <name><name>cc</name><index>[<expr><literal type="number">19</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VINTR_</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VQUIT_</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VERASE_</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VKILL_</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VEOF_</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VTIME_</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VMIN_</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VSWTC_</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VSTART_</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VSTOP_</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VSUSP_</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VEOL_</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VREPRINT_</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VDISCARD_</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VWERASE_</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLNEXT_</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VEOL2_</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISIG_</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ICANON_</name></cpp:macro> <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECHO_</name></cpp:macro> <cpp:value>(1 &lt;&lt; 3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECHOE_</name></cpp:macro> <cpp:value>(1 &lt;&lt; 4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECHOK_</name></cpp:macro> <cpp:value>(1 &lt;&lt; 5)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECHOKE_</name></cpp:macro> <cpp:value>(1 &lt;&lt; 6)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOFLSH_</name></cpp:macro> <cpp:value>(1 &lt;&lt; 7)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECHOCTL_</name></cpp:macro> <cpp:value>(1 &lt;&lt; 9)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEXTEN_</name></cpp:macro> <cpp:value>(1 &lt;&lt; 15)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INLCR_</name></cpp:macro> <cpp:value>(1 &lt;&lt; 6)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IGNCR_</name></cpp:macro> <cpp:value>(1 &lt;&lt; 7)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ICRNL_</name></cpp:macro> <cpp:value>(1 &lt;&lt; 8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IXON_</name></cpp:macro> <cpp:value>(1 &lt;&lt; 10)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPOST_</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONLCR_</name></cpp:macro> <cpp:value>(1 &lt;&lt; 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OCRNL_</name></cpp:macro> <cpp:value>(1 &lt;&lt; 3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONOCR_</name></cpp:macro> <cpp:value>(1 &lt;&lt; 4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONLRET_</name></cpp:macro> <cpp:value>(1 &lt;&lt; 5)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCGETS_</name></cpp:macro> <cpp:value>0x5401</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCSETS_</name></cpp:macro> <cpp:value>0x5402</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCSETSW_</name></cpp:macro> <cpp:value>0x5403</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCSETSF_</name></cpp:macro> <cpp:value>0x5404</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCFLSH_</name></cpp:macro> <cpp:value>0x540b</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCSCTTY_</name></cpp:macro> <cpp:value>0x540e</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCGPRGP_</name></cpp:macro> <cpp:value>0x540f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCSPGRP_</name></cpp:macro> <cpp:value>0x5410</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCGWINSZ_</name></cpp:macro> <cpp:value>0x5413</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCSWINSZ_</name></cpp:macro> <cpp:value>0x5414</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCPKT_</name></cpp:macro> <cpp:value>0x5420</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCGPTN_</name></cpp:macro> <cpp:value>0x80045430</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCSPTLCK_</name></cpp:macro> <cpp:value>0x40045431</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIOCGPKT_</name></cpp:macro> <cpp:value>0x80045438</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCIFLUSH_</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCOFLUSH_</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCIOFLUSH_</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<struct>struct <name>tty_driver</name> <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>tty_driver_ops</name></name> <modifier>*</modifier></type><name>ops</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>major</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>tty</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>ttys</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>limit</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFINE_TTY_DRIVER</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>driver_ops</name></type></parameter>, <parameter><type><name>_major</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>static struct tty *name##_ttys[size]; \
    struct tty_driver name = {.ops = driver_ops, .major = _major, .ttys = name##_ttys, .limit = size}</cpp:value></cpp:define>

<struct>struct <name>tty_driver_ops</name> <block>{
    <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>init</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tty</name></name> <modifier>*</modifier></type><name>tty</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>open</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tty</name></name> <modifier>*</modifier></type><name>tty</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>write</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tty</name></name> <modifier>*</modifier></type><name>tty</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>blocking</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>ioctl</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tty</name></name> <modifier>*</modifier></type><name>tty</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cleanup</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tty</name></name> <modifier>*</modifier></type><name>tty</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>

<comment type="line">// indexed by major number</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>tty_driver</name></name> <modifier>*</modifier></type><name><name>tty_drivers</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>tty_driver</name></name></type> <name>real_tty_driver</name></decl>;</decl_stmt>

<struct>struct <name>tty</name> <block>{
    <decl_stmt><decl><type><name>unsigned</name></type> <name>refcount</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>tty_driver</name></name> <modifier>*</modifier></type><name>driver</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>hung_up</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>ever_opened</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TTY_BUF_SIZE</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>TTY_BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <comment type="line">// A flag is a marker indicating the end of a canonical mode input. Flags</comment>
    <comment type="line">// are created by EOL and EOF characters. You can't backspace past a flag.</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name><name>buf_flag</name><index>[<expr><name>TTY_BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>bufsize</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>packet_flags</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cond_t</name></type> <name>produced</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cond_t</name></type> <name>consumed</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>winsize_</name></name></type> <name>winsize</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>termios_</name></name></type> <name>termios</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>pid_t_</name></type> <name>session</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>pid_t_</name></type> <name>fg_group</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>list</name></name></type> <name>fds</name></decl>;</decl_stmt>
    <comment type="line">// only locks fds, to keep the lock order</comment>
    <decl_stmt><decl><type><name>lock_t</name></type> <name>fds_lock</name></decl>;</decl_stmt>

    <comment type="line">// this never nests with itself, except in pty_is_half_closed_master</comment>
    <decl_stmt><decl><type><name>lock_t</name></type> <name>lock</name></decl>;</decl_stmt>

    <union>union <block>{
        <decl_stmt><decl><type><name>pthread_t</name></type> <name>thread</name></decl>;</decl_stmt> <comment type="line">// for real tty driver</comment>
        <struct>struct <block>{
            <decl_stmt><decl><type><name><name>struct</name> <name>tty</name></name> <modifier>*</modifier></type><name>other</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>mode_t_</name></type> <name>perms</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>uid_t_</name></type> <name>uid</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>uid_t_</name></type> <name>gid</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>locked</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>packet_mode</name></decl>;</decl_stmt>
        }</block> <decl><name>pty</name></decl>;</struct>
        <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
    }</block>;</union>
}</block>;</struct>

<comment type="line">// if blocking, may return _EINTR, otherwise, may return _EAGAIN</comment>
<function_decl><type><name>ssize_t</name></type> <name>tty_input</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tty</name></name> <modifier>*</modifier></type><name>tty</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>blocking</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>tty_set_winsize</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tty</name></name> <modifier>*</modifier></type><name>tty</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>winsize_</name></name></type> <name>winsize</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>tty_hangup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tty</name></name> <modifier>*</modifier></type><name>tty</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// public for the benefit of ptys</comment>
<function_decl><type><name><name>struct</name> <name>tty</name></name> <modifier>*</modifier></type><name>tty_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tty_driver</name></name> <modifier>*</modifier></type><name>driver</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>tty</name></name> <modifier>*</modifier></type><name>tty_alloc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tty_driver</name></name> <modifier>*</modifier></type><name>driver</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>tty_open</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tty</name></name> <modifier>*</modifier></type><name>tty</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>extern</specifier> <name>lock_t</name></type> <name>ttys_lock</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> <name>tty_release</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tty</name></name> <modifier>*</modifier></type><name>tty</name></decl></parameter>)</parameter_list>;</function_decl> <comment type="line">// must be called with ttys_lock</comment>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>dev_ops</name></name></type> <name>tty_dev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>dev_ops</name></name></type> <name>ptmx_dev</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> <name>ptmx_open</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="line">// Should call with a driver declared *without* DEFINE_TTY_DRIVER, as it overwrites the ttys field.</comment>
<function_decl><type><name><name>struct</name> <name>tty</name></name> <modifier>*</modifier></type><name>pty_open_fake</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tty_driver</name></name> <modifier>*</modifier></type><name>driver</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
