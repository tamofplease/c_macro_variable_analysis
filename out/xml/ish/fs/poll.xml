<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/fs/poll.h"><cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FS_POLL_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FS_POLL_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kernel/fs.h"</cpp:file></cpp:include>

<struct>struct <name>real_poll</name> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>poll</name> <block>{
    <decl_stmt><decl><type><name><name>struct</name> <name>list</name></name></type> <name>poll_fds</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>real_poll</name></name></type> <name>real</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name><name>notify_pipe</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>waiters</name></decl>;</decl_stmt> <comment type="line">// if nonzero, notify_pipe exists</comment>

    <comment type="line">// This is used to solve the race/UaF described here: https://lwn.net/Articles/520012/</comment>
    <comment type="line">// thread 1: calls poll_wait, real_poll_wait returns an event with a pointer to a poll_fd</comment>
    <comment type="line">// thread 2: calls poll_del_fd which frees the same poll_fd</comment>
    <comment type="line">//</comment>
    <comment type="line">// This can't be solved by adding locks because thread 1 could get</comment>
    <comment type="line">// suspended after real_poll_wait returns but before it has a chance to</comment>
    <comment type="line">// lock anything.</comment>
    <comment type="line">//</comment>
    <comment type="line">// An attempt was made to solve this with a Linux kernel patch, which</comment>
    <comment type="line">// almost went in 3.7 but was backed out after discussion at</comment>
    <comment type="line">// https://lkml.org/lkml/2012/10/16/302, and anyway wouldn't have solved</comment>
    <comment type="line">// the problem on Darwin. My solution is to just not free poll_fds, and</comment>
    <comment type="line">// instead move them to a freelist where they can be reused.</comment>
    <decl_stmt><decl><type><name><name>struct</name> <name>list</name></name></type> <name>pollfd_freelist</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>lock_t</name></type> <name>lock</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>poll_fd</name> <block>{
    <comment type="line">// locked by containing struct poll</comment>
    <decl_stmt><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>list</name></name></type> <name>fds</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>types</name></decl>;</decl_stmt>
    <union>union <name>poll_fd_info</name> <block>{
        <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>num</name></decl>;</decl_stmt>
    }</block> <decl><name>info</name></decl>;</union>
    <comment type="line">// Used to implement edge-triggered notifications. When an event is</comment>
    <comment type="line">// returned its bits are set here, and those bits are ignored on the next</comment>
    <comment type="line">// call to poll_wait. The bits are cleared by poll_wakeup.</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>triggered_types</name></decl>;</decl_stmt>

    <comment type="line">// locked by containing struct fd</comment>
    <decl_stmt><decl><type><name><name>struct</name> <name>poll</name></name> <modifier>*</modifier></type><name>poll</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>list</name></name></type> <name>polls</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="line">// these are defined in system headers somewhere</comment>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>POLL_IN</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>POLL_OUT</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>POLL_MSG</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>POLL_ERR</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>POLL_PRI</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>POLL_HUP</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLL_READ</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLL_PRI</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLL_WRITE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLL_ERR</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLL_HUP</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLL_NVAL</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLL_ONESHOT</name></cpp:macro> <cpp:value>(1 &lt;&lt; 30)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLL_EDGETRIGGERED</name></cpp:macro> <cpp:value>(1ul &lt;&lt; 31)</cpp:value></cpp:define>
<struct>struct <name>poll_event</name> <block>{
    <decl_stmt><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>types</name></decl>;</decl_stmt>
}</block>;</struct>
<function_decl><type><name><name>struct</name> <name>poll</name></name> <modifier>*</modifier></type><name>poll_create</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>poll_has_fd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>poll</name></name> <modifier>*</modifier></type><name>poll</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>poll_add_fd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>poll</name></name> <modifier>*</modifier></type><name>poll</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>types</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>poll_fd_info</name></name></type> <name>info</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>poll_mod_fd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>poll</name></name> <modifier>*</modifier></type><name>poll</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>types</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>poll_fd_info</name></name></type> <name>info</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>poll_del_fd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>poll</name></name> <modifier>*</modifier></type><name>poll</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="line">// Indicates that the specified events have been triggered. Each call will</comment>
<comment type="line">// generate a new edge-triggered notification.</comment>
<comment type="line">// please do not call this while holding any locks you would acquire in your poll operation</comment>
<function_decl><type><name>void</name></type> <name>poll_wakeup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>events</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="line">// Waits for events on the fds in this poll, and calls the callback for each one found.</comment>
<comment type="line">// Returns the number of times the callback returned 1, or negative for error.</comment>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>poll_callback_t</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>types</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>poll_fd_info</name></name></type> <name>info</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<function_decl><type><name>int</name></type> <name>poll_wait</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>poll</name></name> <modifier>*</modifier></type><name>poll</name></decl></parameter>, <parameter><decl><type><name>poll_callback_t</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timespec</name></name> <modifier>*</modifier></type><name>timeout</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="line">// does not lock the poll because lock ordering, you must ensure no other</comment>
<comment type="line">// thread will add or remove fds from this poll</comment>
<function_decl><type><name>void</name></type> <name>poll_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>poll</name></name> <modifier>*</modifier></type><name>poll</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// for fd_close</comment>
<function_decl><type><name>void</name></type> <name>poll_cleanup_fd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
