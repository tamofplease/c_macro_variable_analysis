<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/fs/generic.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kernel/fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fs/fd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fs/inode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fs/path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fs/dev.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kernel/task.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kernel/errno.h"</cpp:file></cpp:include>

<function><type><name><name>struct</name> <name>mount</name></name> <modifier>*</modifier></type><name>find_mount_and_trim_path</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>mount</name></name> <modifier>*</modifier></type><name>mount</name> <init>= <expr><call><name>mount_find</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name>path</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name>path</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>mount</name><operator>-&gt;</operator><name>point</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><operator>*</operator><name>src</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
    <expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <return>return <expr><name>mount</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>contains_mount_point</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>mount</name></name> <modifier>*</modifier></type><name>mount</name></decl>;</decl_stmt>
    <macro><name>list_for_each_entry</name><argument_list>(<argument>&amp;mounts</argument>, <argument>mount</argument>, <argument>mounts</argument>)</argument_list></macro> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>mount</name><operator>-&gt;</operator><name>point</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
                <operator>(</operator><name><name>mount</name><operator>-&gt;</operator><name>point</name><index>[<expr><name>n</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <name><name>mount</name><operator>-&gt;</operator><name>point</name><index>[<expr><name>n</name></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>generic_openat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>at</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path_raw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>O_RDWR_</name> <operator>&amp;&amp;</operator> <name>flags</name> <operator>&amp;</operator> <name>O_WRONLY_</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>ERR_PTR</name><argument_list>(<argument><expr><name>_EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <comment type="line">// TODO really, really, seriously reconsider what I'm doing with the strings</comment>
    <decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>path_normalize</name><argument_list>(<argument><expr><name>at</name></expr></argument>, <argument><expr><name>path_raw</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>N_SYMLINK_FOLLOW</name> <operator>|</operator>
            <operator>(</operator><ternary><condition><expr><name>flags</name> <operator>&amp;</operator> <name>O_CREAT_</name></expr> ?</condition><then> <expr><name>N_PARENT_DIR_WRITE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>ERR_PTR</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>mount</name></name> <modifier>*</modifier></type><name>mount</name> <init>= <expr><call><name>find_mount_and_trim_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inodes_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// TODO: don't do this</comment>
    <decl_stmt><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name> <init>= <expr><call><name><name>mount</name><operator>-&gt;</operator><name>fs</name><operator>-&gt;</operator><name>open</name></name><argument_list>(<argument><expr><name>mount</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IS_ERR</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inodes_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// if an error happens after this point, fd_close will release the</comment>
        <comment type="line">// mount, but right now we need to do it manually</comment>
        <expr_stmt><expr><call><name>mount_release</name><argument_list>(<argument><expr><name>mount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>fd</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>fd</name><operator>-&gt;</operator><name>mount</name></name> <operator>=</operator> <name>mount</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>statbuf</name></name></type> <name>stat</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name><name>fd</name><operator>-&gt;</operator><name>mount</name><operator>-&gt;</operator><name>fs</name><operator>-&gt;</operator><name>fstat</name></name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inodes_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>error</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>fd</name><operator>-&gt;</operator><name>inode</name></name> <operator>=</operator> <call><name>inode_get_unlocked</name><argument_list>(<argument><expr><name>mount</name></expr></argument>, <argument><expr><name><name>stat</name><operator>.</operator><name>inode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inodes_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>fd</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>stat</name><operator>.</operator><name>mode</name></name> <operator>&amp;</operator> <name>S_IFMT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>fd</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>accmode</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>O_RDWR_</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>accmode</name> <operator>=</operator> <name>AC_R</name> <operator>|</operator> <name>AC_W</name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>O_WRONLY_</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>accmode</name> <operator>=</operator> <name>AC_W</name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>accmode</name> <operator>=</operator> <name>AC_R</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>access_check</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stat</name></expr></argument>, <argument><expr><name>accmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>S_ISLNK</name><argument_list>(<argument><expr><name><name>fd</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// would mean path_normalize didn't do its job</comment>
    <if_stmt><if>if <condition>(<expr><call><name>S_ISBLK</name><argument_list>(<argument><expr><name><name>fd</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>S_ISCHR</name><argument_list>(<argument><expr><name><name>fd</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>S_ISBLK</name><argument_list>(<argument><expr><name><name>fd</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>type</name> <operator>=</operator> <name>DEV_BLOCK</name></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name>type</name> <operator>=</operator> <name>DEV_CHAR</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>dev_open</name><argument_list>(<argument><expr><call><name>dev_major</name><argument_list>(<argument><expr><name><name>stat</name><operator>.</operator><name>rdev</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>dev_minor</name><argument_list>(<argument><expr><name><name>stat</name><operator>.</operator><name>rdev</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>_ENXIO</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>S_ISSOCK</name><argument_list>(<argument><expr><name><name>fd</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>_EISDIR</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>fd</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>O_RDWR_</name> <operator>|</operator> <name>O_WRONLY_</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>_ENOTDIR</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>fd</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>flags</name> <operator>&amp;</operator> <name>O_DIRECTORY_</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
    <return>return <expr><name>fd</name></expr>;</return>

<label><name>error</name>:</label>
    <expr_stmt><expr><call><name>fd_close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>ERR_PTR</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>generic_open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>generic_openat</name><argument_list>(<argument><expr><name>AT_PWD</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>generic_getpath</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name><name>fd</name><operator>-&gt;</operator><name>mount</name><operator>-&gt;</operator><name>fs</name><operator>-&gt;</operator><name>getpath</name></name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>fd</name><operator>-&gt;</operator><name>mount</name><operator>-&gt;</operator><name>point</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>MAX_PATH</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_ENAMETOOLONG</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>fd</name><operator>-&gt;</operator><name>mount</name><operator>-&gt;</operator><name>point</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>fd</name><operator>-&gt;</operator><name>mount</name><operator>-&gt;</operator><name>point</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>fd</name><operator>-&gt;</operator><name>mount</name><operator>-&gt;</operator><name>point</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>generic_accessat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>dirfd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path_raw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>path_normalize</name><argument_list>(<argument><expr><name>dirfd</name></expr></argument>, <argument><expr><name>path_raw</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>N_SYMLINK_FOLLOW</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>mount</name></name> <modifier>*</modifier></type><name>mount</name> <init>= <expr><call><name>find_mount_and_trim_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>statbuf</name></name></type> <name>stat</name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name><name>mount</name><operator>-&gt;</operator><name>fs</name><operator>-&gt;</operator><name>stat</name></name><argument_list>(<argument><expr><name>mount</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mount_release</name><argument_list>(<argument><expr><name>mount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><call><name>access_check</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stat</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>generic_linkat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>src_at</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src_raw</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>dst_at</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dst_raw</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>src</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>path_normalize</name><argument_list>(<argument><expr><name>src_at</name></expr></argument>, <argument><expr><name>src_raw</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>N_SYMLINK_NOFOLLOW</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>dst</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>path_normalize</name><argument_list>(<argument><expr><name>dst_at</name></expr></argument>, <argument><expr><name>dst_raw</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>N_SYMLINK_NOFOLLOW</name> <operator>|</operator> <name>N_PARENT_DIR_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>mount</name></name> <modifier>*</modifier></type><name>mount</name> <init>= <expr><call><name>find_mount_and_trim_path</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>mount</name></name> <modifier>*</modifier></type><name>dst_mount</name> <init>= <expr><call><name>find_mount_and_trim_path</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>mount</name> <operator>!=</operator> <name>dst_mount</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>_EXDEV</name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name><name>mount</name><operator>-&gt;</operator><name>fs</name><operator>-&gt;</operator><name>link</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>_EPERM</name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name><name>mount</name><operator>-&gt;</operator><name>fs</name><operator>-&gt;</operator><name>link</name></name><argument_list>(<argument><expr><name>mount</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <expr_stmt><expr><call><name>mount_release</name><argument_list>(<argument><expr><name>mount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mount_release</name><argument_list>(<argument><expr><name>dst_mount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>generic_unlinkat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>at</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path_raw</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>path_normalize</name><argument_list>(<argument><expr><name>at</name></expr></argument>, <argument><expr><name>path_raw</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>N_SYMLINK_NOFOLLOW</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>mount</name></name> <modifier>*</modifier></type><name>mount</name> <init>= <expr><call><name>find_mount_and_trim_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>_EPERM</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>mount</name><operator>-&gt;</operator><name>fs</name><operator>-&gt;</operator><name>unlink</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name><name>mount</name><operator>-&gt;</operator><name>fs</name><operator>-&gt;</operator><name>unlink</name></name><argument_list>(<argument><expr><name>mount</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>mount_release</name><argument_list>(<argument><expr><name>mount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>generic_renameat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>src_at</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src_raw</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>dst_at</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dst_raw</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>src</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>path_normalize</name><argument_list>(<argument><expr><name>src_at</name></expr></argument>, <argument><expr><name>src_raw</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>N_SYMLINK_NOFOLLOW</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>dst</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>path_normalize</name><argument_list>(<argument><expr><name>dst_at</name></expr></argument>, <argument><expr><name>dst_raw</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>N_SYMLINK_NOFOLLOW</name> <operator>|</operator> <name>N_PARENT_DIR_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>contains_mount_point</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_EBUSY</name></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>mount</name></name> <modifier>*</modifier></type><name>mount</name> <init>= <expr><call><name>find_mount_and_trim_path</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>mount</name></name> <modifier>*</modifier></type><name>dst_mount</name> <init>= <expr><call><name>find_mount_and_trim_path</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>mount</name> <operator>!=</operator> <name>dst_mount</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>_EXDEV</name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name><name>mount</name><operator>-&gt;</operator><name>fs</name><operator>-&gt;</operator><name>rename</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>_EPERM</name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name><name>mount</name><operator>-&gt;</operator><name>fs</name><operator>-&gt;</operator><name>rename</name></name><argument_list>(<argument><expr><name>mount</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <expr_stmt><expr><call><name>mount_release</name><argument_list>(<argument><expr><name>mount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mount_release</name><argument_list>(<argument><expr><name>dst_mount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>generic_symlinkat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>at</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>link_raw</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>link</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>path_normalize</name><argument_list>(<argument><expr><name>at</name></expr></argument>, <argument><expr><name>link_raw</name></expr></argument>, <argument><expr><name>link</name></expr></argument>, <argument><expr><name>N_SYMLINK_NOFOLLOW</name> <operator>|</operator> <name>N_PARENT_DIR_WRITE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>mount</name></name> <modifier>*</modifier></type><name>mount</name> <init>= <expr><call><name>find_mount_and_trim_path</name><argument_list>(<argument><expr><name>link</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>_EPERM</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>mount</name><operator>-&gt;</operator><name>fs</name><operator>-&gt;</operator><name>symlink</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name><name>mount</name><operator>-&gt;</operator><name>fs</name><operator>-&gt;</operator><name>symlink</name></name><argument_list>(<argument><expr><name>mount</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>mount_release</name><argument_list>(<argument><expr><name>mount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>generic_mknodat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>at</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path_raw</name></decl></parameter>, <parameter><decl><type><name>mode_t_</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>dev_t_</name></type> <name>dev</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>S_ISLNK</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_EINVAL</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>superuser</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>S_ISBLK</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>S_ISCHR</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_EPERM</name></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>path_normalize</name><argument_list>(<argument><expr><name>at</name></expr></argument>, <argument><expr><name>path_raw</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>N_SYMLINK_NOFOLLOW</name> <operator>|</operator> <name>N_PARENT_DIR_WRITE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>mount</name></name> <modifier>*</modifier></type><name>mount</name> <init>= <expr><call><name>find_mount_and_trim_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>_EPERM</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>mount</name><operator>-&gt;</operator><name>fs</name><operator>-&gt;</operator><name>mknod</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name><name>mount</name><operator>-&gt;</operator><name>fs</name><operator>-&gt;</operator><name>mknod</name></name><argument_list>(<argument><expr><name>mount</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>mount_release</name><argument_list>(<argument><expr><name>mount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>generic_setattrat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>at</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path_raw</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>attr</name></name></type> <name>attr</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>follow_links</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>path_normalize</name><argument_list>(<argument><expr><name>at</name></expr></argument>, <argument><expr><name>path_raw</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><ternary><condition><expr><name>follow_links</name></expr> ?</condition><then> <expr><name>N_SYMLINK_FOLLOW</name></expr> </then><else>: <expr><name>N_SYMLINK_NOFOLLOW</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>mount</name></name> <modifier>*</modifier></type><name>mount</name> <init>= <expr><call><name>find_mount_and_trim_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>_EPERM</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>mount</name><operator>-&gt;</operator><name>fs</name><operator>-&gt;</operator><name>setattr</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name><name>mount</name><operator>-&gt;</operator><name>fs</name><operator>-&gt;</operator><name>setattr</name></name><argument_list>(<argument><expr><name>mount</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>mount_release</name><argument_list>(<argument><expr><name>mount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>generic_utime</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>at</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path_raw</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>atime</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>mtime</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>follow_links</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>path_normalize</name><argument_list>(<argument><expr><name>at</name></expr></argument>, <argument><expr><name>path_raw</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><ternary><condition><expr><name>follow_links</name></expr> ?</condition><then> <expr><name>N_SYMLINK_FOLLOW</name></expr> </then><else>: <expr><name>N_SYMLINK_NOFOLLOW</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>mount</name></name> <modifier>*</modifier></type><name>mount</name> <init>= <expr><call><name>find_mount_and_trim_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>_EPERM</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>mount</name><operator>-&gt;</operator><name>fs</name><operator>-&gt;</operator><name>utime</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name><name>mount</name><operator>-&gt;</operator><name>fs</name><operator>-&gt;</operator><name>utime</name></name><argument_list>(<argument><expr><name>mount</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>atime</name></expr></argument>, <argument><expr><name>mtime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>mount_release</name><argument_list>(<argument><expr><name>mount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ssize_t</name></type> <name>generic_readlinkat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>at</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path_raw</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bufsize</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>path_normalize</name><argument_list>(<argument><expr><name>at</name></expr></argument>, <argument><expr><name>path_raw</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>N_SYMLINK_NOFOLLOW</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>mount</name></name> <modifier>*</modifier></type><name>mount</name> <init>= <expr><call><name>find_mount_and_trim_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>_EINVAL</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>mount</name><operator>-&gt;</operator><name>fs</name><operator>-&gt;</operator><name>readlink</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name><name>mount</name><operator>-&gt;</operator><name>fs</name><operator>-&gt;</operator><name>readlink</name></name><argument_list>(<argument><expr><name>mount</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>mount_release</name><argument_list>(<argument><expr><name>mount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>generic_mkdirat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>at</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path_raw</name></decl></parameter>, <parameter><decl><type><name>mode_t_</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>path_normalize</name><argument_list>(<argument><expr><name>at</name></expr></argument>, <argument><expr><name>path_raw</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>N_SYMLINK_FOLLOW</name> <operator>|</operator> <name>N_PARENT_DIR_WRITE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>mount</name></name> <modifier>*</modifier></type><name>mount</name> <init>= <expr><call><name>find_mount_and_trim_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>_EPERM</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>mount</name><operator>-&gt;</operator><name>fs</name><operator>-&gt;</operator><name>mkdir</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name><name>mount</name><operator>-&gt;</operator><name>fs</name><operator>-&gt;</operator><name>mkdir</name></name><argument_list>(<argument><expr><name>mount</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>mount_release</name><argument_list>(<argument><expr><name>mount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>generic_rmdirat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>at</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path_raw</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>path_normalize</name><argument_list>(<argument><expr><name>at</name></expr></argument>, <argument><expr><name>path_raw</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>N_SYMLINK_FOLLOW</name> <operator>|</operator> <name>N_PARENT_DIR_WRITE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>contains_mount_point</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_EBUSY</name></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>mount</name></name> <modifier>*</modifier></type><name>mount</name> <init>= <expr><call><name>find_mount_and_trim_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>_EPERM</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>mount</name><operator>-&gt;</operator><name>fs</name><operator>-&gt;</operator><name>rmdir</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name><name>mount</name><operator>-&gt;</operator><name>fs</name><operator>-&gt;</operator><name>rmdir</name></name><argument_list>(<argument><expr><name>mount</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>mount_release</name><argument_list>(<argument><expr><name>mount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>generic_seek</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>off_t_</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>off_t_</name></type> <name>new_off</name> <init>= <expr><name><name>fd</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>whence</name> <operator>==</operator> <name>LSEEK_SET</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>fd</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>off</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>whence</name> <operator>==</operator> <name>LSEEK_CUR</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>__builtin_add_overflow</name><argument_list>(<argument><expr><name>new_off</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_off</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>new_off</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>_EINVAL</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>fd</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>new_off</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>whence</name> <operator>==</operator> <name>LSEEK_END</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>new_off</name> <operator>=</operator> <name>size</name> <operator>+</operator> <name>off</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>new_off</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>_EINVAL</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>fd</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>new_off</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><name>_EINVAL</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
