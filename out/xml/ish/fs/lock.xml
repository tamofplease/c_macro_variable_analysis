<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/fs/lock.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kernel/calls.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kernel/fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fs/inode.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>file_locks_overlap</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>file_lock</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>file_lock</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>a</name><operator>-&gt;</operator><name>end</name></name> <operator>&gt;=</operator> <name><name>b</name><operator>-&gt;</operator><name>start</name></name> <operator>&amp;&amp;</operator> <name><name>b</name><operator>-&gt;</operator><name>end</name></name> <operator>&gt;=</operator> <name><name>a</name><operator>-&gt;</operator><name>start</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>file_locks_conflict</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>file_lock</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>file_lock</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>owner</name></name> <operator>==</operator> <name><name>b</name><operator>-&gt;</operator><name>owner</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>file_locks_overlap</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
    <comment type="line">// write locks are incompatible with other types of locks</comment>
    <if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>F_WRLCK_</name> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>F_WRLCK_</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>file_locks_adjacent</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>file_lock</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>file_lock</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>a</name><operator>-&gt;</operator><name>end</name></name> <operator>==</operator> <name><name>b</name><operator>-&gt;</operator><name>start</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>end</name></name> <operator>==</operator> <name><name>a</name><operator>-&gt;</operator><name>start</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>file_lock</name></name> <modifier>*</modifier></type><name>file_lock_test</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>inode_data</name></name> <modifier>*</modifier></type><name>inode</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>file_lock</name></name> <modifier>*</modifier></type><name>request</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>file_lock</name></name> <modifier>*</modifier></type><name>lock</name></decl>;</decl_stmt>
    <macro><name>list_for_each_entry</name><argument_list>(<argument>&amp;inode-&gt;posix_locks</argument>, <argument>lock</argument>, <argument>locks</argument>)</argument_list></macro> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>file_locks_conflict</name><argument_list>(<argument><expr><name>lock</name></expr></argument>, <argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>lock</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>file_lock</name></name> <modifier>*</modifier></type><name>file_lock_copy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>file_lock</name></name> <modifier>*</modifier></type><name>request</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>file_lock</name></name> <modifier>*</modifier></type><name>lock</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>file_lock</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>lock</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name><name>request</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>lock</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name><name>request</name><operator>-&gt;</operator><name>end</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>lock</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>request</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>lock</name><operator>-&gt;</operator><name>owner</name></name> <operator>=</operator> <name><name>request</name><operator>-&gt;</operator><name>owner</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>lock</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <name><name>request</name><operator>-&gt;</operator><name>pid</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>locks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>lock</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>file_lock_delete</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>file_lock</name></name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>list_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>locks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>file_lock_acquire</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>inode_data</name></name> <modifier>*</modifier></type><name>inode</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>file_lock</name></name> <modifier>*</modifier></type><name>request</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>file_lock</name></name> <modifier>*</modifier></type><name>lock</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>request</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>F_UNLCK_</name></expr>)</condition> <block>{<block_content>
        <macro><name>list_for_each_entry</name><argument_list>(<argument>&amp;inode-&gt;posix_locks</argument>, <argument>lock</argument>, <argument>locks</argument>)</argument_list></macro> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>file_locks_conflict</name><argument_list>(<argument><expr><name>lock</name></expr></argument>, <argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>_EAGAIN</name></expr>;</return></block_content></block></if></if_stmt>
            <comment type="line">// TODO check for deadlocks</comment>
        </block_content>}</block>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// If the loop above succeeded, the lock can be placed. Now we just need to</comment>
    <comment type="line">// add it into our existing set of locks. This is complicated because it</comment>
    <comment type="line">// might need to:</comment>
    <comment type="line">// - merge with an adjacent or overlapping lock of the same type</comment>
    <comment type="line">// - override an existing overlapping lock of a different type</comment>
    <comment type="line">// - split an existing lock into two, if it overlaps just the middle</comment>
    <comment type="line">// - do any or all of the above at the same time</comment>

    <decl_stmt><decl><type><name>bool</name></type> <name>found_our_locks</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>file_lock</name></name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
    <macro><name>list_for_each_entry_safe</name><argument_list>(<argument>&amp;inode-&gt;posix_locks</argument>, <argument>lock</argument>, <argument>tmp</argument>, <argument>locks</argument>)</argument_list></macro> <block>{<block_content>
        <comment type="line">// To speed up looping over all of our locks, the locks are grouped by owner.</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>found_our_locks</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>lock</name><operator>-&gt;</operator><name>owner</name></name> <operator>!=</operator> <name><name>request</name><operator>-&gt;</operator><name>owner</name></name></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>found_our_locks</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>lock</name><operator>-&gt;</operator><name>owner</name></name> <operator>!=</operator> <name><name>request</name><operator>-&gt;</operator><name>owner</name></name></expr>)</condition><block type="pseudo"><block_content>
                <break>break;</break></block_content></block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>lock</name><operator>-&gt;</operator><name>owner</name></name> <operator>==</operator> <name><name>request</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>request</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name><name>lock</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>file_locks_overlap</name><argument_list>(<argument><expr><name>lock</name></expr></argument>, <argument><expr><name>request</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>file_locks_adjacent</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>
            <comment type="line">// merge request with lock</comment>
            <comment type="line">// extend request until it covers lock, then delete lock</comment>
            <if_stmt><if>if <condition>(<expr><name><name>lock</name><operator>-&gt;</operator><name>start</name></name> <operator>&lt;</operator> <name><name>request</name><operator>-&gt;</operator><name>start</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>request</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name><name>lock</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>lock</name><operator>-&gt;</operator><name>end</name></name> <operator>&gt;</operator> <name><name>request</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>request</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name><name>lock</name><operator>-&gt;</operator><name>end</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>file_lock_delete</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>file_locks_overlap</name><argument_list>(<argument><expr><name>lock</name></expr></argument>, <argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>
            <comment type="line">// request must subtract from the lock</comment>
            <comment type="line">// the main thing to worry about here is if the lock is larger than</comment>
            <comment type="line">// the request on both ends, in which case it needs to be split</comment>
            <comment type="line">// into two locks</comment>
            <comment type="line">//</comment>
            <comment type="line">// test cases to think about: request on the top, lock on the bottom</comment>
            <comment type="line">// ..::'' ''::.. ..::.. ''::'' :::... ...::: '''::: :::''' ::::::</comment>

            <comment type="line">// every case here has the possibility of reducing the locking on some region</comment>
            <expr_stmt><expr><call><name>notify</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>inode</name><operator>-&gt;</operator><name>posix_unlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>request</name><operator>-&gt;</operator><name>start</name></name> <operator>&gt;</operator> <name><name>lock</name><operator>-&gt;</operator><name>start</name></name> <operator>&amp;&amp;</operator> <name><name>request</name><operator>-&gt;</operator><name>end</name></name> <operator>&lt;</operator> <name><name>lock</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
                <comment type="line">// lock sticks out on both ends, split</comment>
                <decl_stmt><decl><type><name><name>struct</name> <name>file_lock</name></name> <modifier>*</modifier></type><name>lock2</name> <init>= <expr><call><name>file_lock_copy</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <comment type="line">// see below for why these can't overflow</comment>
                <expr_stmt><expr><name><name>lock</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name><name>request</name><operator>-&gt;</operator><name>start</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>lock2</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name><name>request</name><operator>-&gt;</operator><name>end</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>list_add_after</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>locks</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>lock2</name><operator>-&gt;</operator><name>locks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>request</name><operator>-&gt;</operator><name>start</name></name> <operator>&lt;=</operator> <name><name>lock</name><operator>-&gt;</operator><name>start</name></name> <operator>&amp;&amp;</operator> <name><name>request</name><operator>-&gt;</operator><name>end</name></name> <operator>&gt;=</operator> <name><name>lock</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
                <comment type="line">// lock doesn't stick out at all, so just remove it</comment>
                <expr_stmt><expr><call><name>file_lock_delete</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>lock</name><operator>-&gt;</operator><name>start</name></name> <operator>&lt;</operator> <name><name>request</name><operator>-&gt;</operator><name>start</name></name></expr>)</condition> <block>{<block_content>
                <comment type="line">// lock sticks out on the start, so move the end down</comment>
                <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>lock</name><operator>-&gt;</operator><name>end</name></name> <operator>&gt;=</operator> <name><name>request</name><operator>-&gt;</operator><name>start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">// subtract can't overflow since the comparision above would fail if request-&gt;start is 0</comment>
                <expr_stmt><expr><name><name>lock</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name><name>request</name><operator>-&gt;</operator><name>start</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>lock</name><operator>-&gt;</operator><name>end</name></name> <operator>&gt;</operator> <name><name>request</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
                <comment type="line">// lock sticks out on the end, so move the start up</comment>
                <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>lock</name><operator>-&gt;</operator><name>start</name></name> <operator>&lt;=</operator> <name><name>request</name><operator>-&gt;</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">// add can't overflow since the comparision above would fail if request-&gt;start is OFF_T_MAX</comment>
                <expr_stmt><expr><name><name>lock</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name><name>request</name><operator>-&gt;</operator><name>end</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block>

    <if_stmt><if>if <condition>(<expr><name><name>request</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>F_UNLCK_</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>file_lock</name></name> <modifier>*</modifier></type><name>new_lock</name> <init>= <expr><call><name>file_lock_copy</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>list_add_before</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>locks</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new_lock</name><operator>-&gt;</operator><name>locks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFF_T_MAX</name></cpp:macro> <cpp:value>~(1l &lt;&lt; (sizeof(off_t) * 8 - 1))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>file_lock_from_flock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>flock_</name></name> <modifier>*</modifier></type><name>flock</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>file_lock</name></name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>off_t_</name></type> <name>offset</name></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><name><name>flock</name><operator>-&gt;</operator><name>whence</name></name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>LSEEK_SET</name></expr>:</case>
            <expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>LSEEK_CUR</name></expr>:</case>
            <expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fd</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name><name>fd</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>lseek</name></name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LSEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fd</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>offset</name></expr>;</return></block_content></block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><name>LSEEK_END</name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name><name>struct</name> <name>statbuf</name></name></type> <name>stat</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name><name>fd</name><operator>-&gt;</operator><name>mount</name><operator>-&gt;</operator><name>fs</name><operator>-&gt;</operator><name>fstat</name></name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>stat</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <default>default:</default>
            <return>return <expr><name>_EINVAL</name></expr>;</return>
    </block_content>}</block></switch>

    <expr_stmt><expr><name><name>lock</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name><name>flock</name><operator>-&gt;</operator><name>start</name></name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>flock</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>lock</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name><name>lock</name><operator>-&gt;</operator><name>start</name></name> <operator>+</operator> <name><name>flock</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>flock</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>lock</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name><name>lock</name><operator>-&gt;</operator><name>start</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>lock</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name><name>lock</name><operator>-&gt;</operator><name>end</name></name> <operator>+</operator> <name><name>flock</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>lock</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name>OFF_T_MAX</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name><name>lock</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>flock</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>lock</name><operator>-&gt;</operator><name>owner</name></name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>files</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>lock</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>pid</name></name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>flock_from_file_lock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>file_lock</name></name> <modifier>*</modifier></type><name>lock</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>flock_</name></name> <modifier>*</modifier></type><name>flock</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>flock</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>lock</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>flock</name><operator>-&gt;</operator><name>whence</name></name> <operator>=</operator> <name>LSEEK_SET</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>flock</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name><name>lock</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>lock</name><operator>-&gt;</operator><name>end</name></name> <operator>!=</operator> <name>OFF_T_MAX</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>flock</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name><name>lock</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name><name>lock</name><operator>-&gt;</operator><name>start</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>flock</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <expr_stmt><expr><name><name>flock</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <name><name>lock</name><operator>-&gt;</operator><name>pid</name></name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>fcntl_getlk</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>flock_</name></name> <modifier>*</modifier></type><name>flock</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>flock</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>F_RDLCK_</name> <operator>&amp;&amp;</operator> <name><name>flock</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>F_WRLCK_</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_EINVAL</name></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>inode_data</name></name> <modifier>*</modifier></type><name>inode</name> <init>= <expr><name><name>fd</name><operator>-&gt;</operator><name>inode</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>inode</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>file_lock</name></name></type> <name>request</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>file_lock_from_flock</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>flock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>file_lock</name></name> <modifier>*</modifier></type><name>lock</name> <init>= <expr><call><name>file_lock_test</name><argument_list>(<argument><expr><name>inode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>lock</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>flock_from_file_lock</name><argument_list>(<argument><expr><name>lock</name></expr></argument>, <argument><expr><name>flock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>flock</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>F_UNLCK_</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<label><name>out</name>:</label>
    <expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>inode</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>fcntl_setlk</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>flock_</name></name> <modifier>*</modifier></type><name>flock</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>blocking</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>flock</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>F_RDLCK_</name> <operator>&amp;&amp;</operator> <name><name>flock</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>F_WRLCK_</name> <operator>&amp;&amp;</operator> <name><name>flock</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>F_UNLCK_</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_EINVAL</name></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>fd_mode</name> <init>= <expr><call><name>fd_getflags</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>O_ACCMODE_</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>flock</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>F_RDLCK_</name> <operator>&amp;&amp;</operator> <name>fd_mode</name> <operator>==</operator> <name>O_WRONLY_</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_EBADF</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>flock</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>F_WRLCK_</name> <operator>&amp;&amp;</operator> <name>fd_mode</name> <operator>==</operator> <name>O_RDONLY_</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_EBADF</name></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>inode_data</name></name> <modifier>*</modifier></type><name>inode</name> <init>= <expr><name><name>fd</name><operator>-&gt;</operator><name>inode</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>inode</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>file_lock</name></name></type> <name>request</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>file_lock_from_flock</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>flock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
    <while>while <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>file_lock_acquire</name><argument_list>(<argument><expr><name>inode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>request</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>_EAGAIN</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>blocking</name></expr>)</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>wait_for</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>inode</name><operator>-&gt;</operator><name>posix_unlock</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>inode</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block></while>
<label><name>out</name>:</label>
    <expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>inode</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>file_lock_remove_owned_by</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>owner</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>inode_data</name></name> <modifier>*</modifier></type><name>inode</name> <init>= <expr><name><name>fd</name><operator>-&gt;</operator><name>inode</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>inode</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>file_lock</name></name> <modifier>*</modifier></type><name>lock</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
    <macro><name>list_for_each_entry_safe</name><argument_list>(<argument>&amp;inode-&gt;posix_locks</argument>, <argument>lock</argument>, <argument>tmp</argument>, <argument>locks</argument>)</argument_list></macro> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>lock</name><operator>-&gt;</operator><name>owner</name></name> <operator>==</operator> <name>owner</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>file_lock_delete</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>inode</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
