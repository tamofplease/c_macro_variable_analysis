<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/fs/path.h"><cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PATH_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATH_H</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_PWD</name></cpp:macro> <cpp:value>(struct fd *) -2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_SYMLINK_FOLLOW</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_SYMLINK_NOFOLLOW</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_PARENT_DIR_WRITE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<comment type="line">// Normalizes the path specified and writes the result into the out buffer.</comment>
<comment type="line">//</comment>
<comment type="line">// Normalization means:</comment>
<comment type="line">//  - prepending the current or root directory</comment>
<comment type="line">//  - converting multiple slashes into one</comment>
<comment type="line">//  - resolving . and ..</comment>
<comment type="line">//  - resolving symlinks, skipping the last path component if the follow_links</comment>
<comment type="line">//    argument is true</comment>
<comment type="line">// The result will always begin with a slash or be empty.</comment>
<comment type="line">//</comment>
<comment type="line">// If the normalized path plus the null terminator would be longer than</comment>
<comment type="line">// MAX_PATH, _ENAMETOOLONG is returned. The out buffer is expected to be at</comment>
<comment type="line">// least MAX_PATH in size.</comment>
<comment type="line">//</comment>
<comment type="line">// at is the file descriptor to use as a base to interpret relative paths. If</comment>
<comment type="line">// at is AT_PWD, uses current-&gt;pwd (with appropriate locking).</comment>
<function_decl><type><name>int</name></type> <name>path_normalize</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>at</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>path_is_normalized</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// Helper function for iterating through a normalized path.</comment>
<comment type="line">//</comment>
<comment type="line">// The *path pointer is advanced to point to the next /, and the next path</comment>
<comment type="line">// component is copied to component. component must point to a buffer large</comment>
<comment type="line">// enough to hold a string of MAX_NAME characters.</comment>
<comment type="line">//</comment>
<comment type="line">// If the next path component was successfully copied, returns true; otherwise</comment>
<comment type="line">// returns false. If an error occurred, *err is set to the error code.</comment>
<comment type="line">// Otherwise, the end of the path has been reached.</comment>
<function_decl><type><name>bool</name></type> <name>path_next_component</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>component</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
