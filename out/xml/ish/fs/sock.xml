<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/fs/sock.h"><cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SYS_SOCK_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYS_SOCK_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/tcp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kernel/errno.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fs/fd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"misc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"debug.h"</cpp:file></cpp:include>

<function_decl><type><name>int_t</name></type> <name>sys_socketcall</name><parameter_list>(<parameter><decl><type><name>dword_t</name></type> <name>call_num</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>args_addr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int_t</name></type> <name>sys_socket</name><parameter_list>(<parameter><decl><type><name>dword_t</name></type> <name>domain</name></decl></parameter>, <parameter><decl><type><name>dword_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>dword_t</name></type> <name>protocol</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int_t</name></type> <name>sys_bind</name><parameter_list>(<parameter><decl><type><name>fd_t</name></type> <name>sock_fd</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>sockaddr_addr</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>sockaddr_len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int_t</name></type> <name>sys_connect</name><parameter_list>(<parameter><decl><type><name>fd_t</name></type> <name>sock_fd</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>sockaddr_addr</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>sockaddr_len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int_t</name></type> <name>sys_listen</name><parameter_list>(<parameter><decl><type><name>fd_t</name></type> <name>sock_fd</name></decl></parameter>, <parameter><decl><type><name>int_t</name></type> <name>backlog</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int_t</name></type> <name>sys_accept</name><parameter_list>(<parameter><decl><type><name>fd_t</name></type> <name>sock_fd</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>sockaddr_addr</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>sockaddr_len_addr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int_t</name></type> <name>sys_getsockname</name><parameter_list>(<parameter><decl><type><name>fd_t</name></type> <name>sock_fd</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>sockaddr_addr</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>sockaddr_len_addr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int_t</name></type> <name>sys_getpeername</name><parameter_list>(<parameter><decl><type><name>fd_t</name></type> <name>sock_fd</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>sockaddr_addr</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>sockaddr_len_addr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int_t</name></type> <name>sys_socketpair</name><parameter_list>(<parameter><decl><type><name>dword_t</name></type> <name>domain</name></decl></parameter>, <parameter><decl><type><name>dword_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>dword_t</name></type> <name>protocol</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>sockets_addr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int_t</name></type> <name>sys_sendto</name><parameter_list>(<parameter><decl><type><name>fd_t</name></type> <name>sock_fd</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>buffer_addr</name></decl></parameter>, <parameter><decl><type><name>dword_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>dword_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>sockaddr_addr</name></decl></parameter>, <parameter><decl><type><name>dword_t</name></type> <name>sockaddr_len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int_t</name></type> <name>sys_recvfrom</name><parameter_list>(<parameter><decl><type><name>fd_t</name></type> <name>sock_fd</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>buffer_addr</name></decl></parameter>, <parameter><decl><type><name>dword_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>dword_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>sockaddr_addr</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>sockaddr_len_addr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int_t</name></type> <name>sys_shutdown</name><parameter_list>(<parameter><decl><type><name>fd_t</name></type> <name>sock_fd</name></decl></parameter>, <parameter><decl><type><name>dword_t</name></type> <name>how</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int_t</name></type> <name>sys_setsockopt</name><parameter_list>(<parameter><decl><type><name>fd_t</name></type> <name>sock_fd</name></decl></parameter>, <parameter><decl><type><name>dword_t</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>dword_t</name></type> <name>option</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>value_addr</name></decl></parameter>, <parameter><decl><type><name>dword_t</name></type> <name>value_len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int_t</name></type> <name>sys_getsockopt</name><parameter_list>(<parameter><decl><type><name>fd_t</name></type> <name>sock_fd</name></decl></parameter>, <parameter><decl><type><name>dword_t</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>dword_t</name></type> <name>option</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>value_addr</name></decl></parameter>, <parameter><decl><type><name>dword_t</name></type> <name>len_addr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int_t</name></type> <name>sys_sendmsg</name><parameter_list>(<parameter><decl><type><name>fd_t</name></type> <name>sock_fd</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>msghdr_addr</name></decl></parameter>, <parameter><decl><type><name>int_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int_t</name></type> <name>sys_recvmsg</name><parameter_list>(<parameter><decl><type><name>fd_t</name></type> <name>sock_fd</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>msghdr_addr</name></decl></parameter>, <parameter><decl><type><name>int_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int_t</name></type> <name>sys_sendmmsg</name><parameter_list>(<parameter><decl><type><name>fd_t</name></type> <name>sock_fd</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>msgvec_addr</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>msgvec_len</name></decl></parameter>, <parameter><decl><type><name>int_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOCKADDR_DATA_MAX</name></cpp:macro> <cpp:value>108</cpp:value></cpp:define>

<struct>struct <name>sockaddr_</name> <block>{
    <decl_stmt><decl><type><name>uint16_t</name></type> <name>family</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>data</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <name>sockaddr_max_</name> <block>{
    <decl_stmt><decl><type><name>uint16_t</name></type> <name>family</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>data</name><index>[<expr><name>SOCKADDR_DATA_MAX</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><name>size_t</name></type> <name>sockaddr_size</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="line">// result comes from malloc</comment>
<function_decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sockaddr_to_real</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>msghdr_</name> <block>{
    <decl_stmt><decl><type><name>addr_t</name></type> <name>msg_name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint_t</name></type> <name>msg_namelen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>addr_t</name></type> <name>msg_iov</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint_t</name></type> <name>msg_iovlen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>addr_t</name></type> <name>msg_control</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint_t</name></type> <name>msg_controllen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int_t</name></type> <name>msg_flags</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>cmsghdr_</name> <block>{
    <decl_stmt><decl><type><name>dword_t</name></type> <name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int_t</name></type> <name>level</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int_t</name></type> <name>type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>data</name><index>[]</index></name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCM_RIGHTS_</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<comment type="line">// copied and ported from musl</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMSG_LEN_</name><parameter_list>(<parameter><type><name>cmsg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((cmsg)-&gt;len + sizeof(dword_t) - 1) &amp; ~(dword_t)(sizeof(dword_t) - 1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMSG_NEXT_</name><parameter_list>(<parameter><type><name>cmsg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uint8_t *)(cmsg) + CMSG_LEN_(cmsg))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMSG_NXTHDR_</name><parameter_list>(<parameter><type><name>cmsg</name></type></parameter>, <parameter><type><name>mhdr_end</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((cmsg)-&gt;len &lt; sizeof (struct cmsghdr_) || \
        CMSG_LEN_(cmsg) + sizeof(struct cmsghdr_) &gt;= (size_t) (mhdr_end - (uint8_t *)(cmsg)) \
        ? NULL : (struct cmsghdr_ *)CMSG_NEXT_(cmsg))</cpp:value></cpp:define>

<struct>struct <name>scm</name> <block>{
    <decl_stmt><decl><type><name><name>struct</name> <name>list</name></name></type> <name>queue</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>num_fds</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name><name>fds</name><index>[]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PF_LOCAL_</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PF_INET_</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PF_INET6_</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AF_LOCAL_</name></cpp:macro> <cpp:value>PF_LOCAL_</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AF_INET_</name></cpp:macro> <cpp:value>PF_INET_</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AF_INET6_</name></cpp:macro> <cpp:value>PF_INET6_</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>sock_family_to_real</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fake</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <switch>switch <condition>(<expr><name>fake</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>PF_LOCAL_</name></expr>:</case> <return>return <expr><name>PF_LOCAL</name></expr>;</return>
        <case>case <expr><name>PF_INET_</name></expr>:</case> <return>return <expr><name>PF_INET</name></expr>;</return>
        <case>case <expr><name>PF_INET6_</name></expr>:</case> <return>return <expr><name>PF_INET6</name></expr>;</return>
    </block_content>}</block></switch>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>sock_family_from_real</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fake</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <switch>switch <condition>(<expr><name>fake</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>PF_LOCAL</name></expr>:</case> <return>return <expr><name>PF_LOCAL_</name></expr>;</return>
        <case>case <expr><name>PF_INET</name></expr>:</case> <return>return <expr><name>PF_INET_</name></expr>;</return>
        <case>case <expr><name>PF_INET6</name></expr>:</case> <return>return <expr><name>PF_INET6_</name></expr>;</return>
    </block_content>}</block></switch>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOCK_STREAM_</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOCK_DGRAM_</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOCK_RAW_</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOCK_NONBLOCK_</name></cpp:macro> <cpp:value>0x800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOCK_CLOEXEC_</name></cpp:macro> <cpp:value>0x80000</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>sock_type_to_real</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>protocol</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <switch>switch <condition>(<expr><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>SOCK_STREAM_</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>protocol</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>protocol</name> <operator>!=</operator> <name>IPPROTO_TCP</name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
            <return>return <expr><name>SOCK_STREAM</name></expr>;</return>
        <case>case <expr><name>SOCK_DGRAM_</name></expr>:</case>
            <switch>switch <condition>(<expr><name>protocol</name></expr>)</condition> <block>{<block_content>
                <default>default:</default>
                    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
                <case>case <expr><literal type="number">0</literal></expr>:</case>
                <case>case <expr><name>IPPROTO_UDP</name></expr>:</case>
                <case>case <expr><name>IPPROTO_ICMP</name></expr>:</case>
                <case>case <expr><name>IPPROTO_ICMPV6</name></expr>:</case>
                    <break>break;</break>
            </block_content>}</block></switch>
            <return>return <expr><name>SOCK_DGRAM</name></expr>;</return>
        <case>case <expr><name>SOCK_RAW_</name></expr>:</case>
            <switch>switch <condition>(<expr><name>protocol</name></expr>)</condition> <block>{<block_content>
                <default>default:</default>
                    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
                <case>case <expr><name>IPPROTO_RAW</name></expr>:</case>
                <case>case <expr><name>IPPROTO_UDP</name></expr>:</case>
                <case>case <expr><name>IPPROTO_ICMP</name></expr>:</case>
                <case>case <expr><name>IPPROTO_ICMPV6</name></expr>:</case>
                    <break>break;</break>
            </block_content>}</block></switch>
            <return>return <expr><name>SOCK_DGRAM</name></expr>;</return>
    </block_content>}</block></switch>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSG_OOB_</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSG_PEEK_</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSG_CTRUNC_</name></cpp:macro>  <cpp:value>0x8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSG_TRUNC_</name></cpp:macro>  <cpp:value>0x20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSG_DONTWAIT_</name></cpp:macro> <cpp:value>0x40</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSG_EOR_</name></cpp:macro>    <cpp:value>0x80</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSG_WAITALL_</name></cpp:macro> <cpp:value>0x100</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>sock_flags_to_real</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fake</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>real</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>fake</name> <operator>&amp;</operator> <name>MSG_OOB_</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>real</name> <operator>|=</operator> <name>MSG_OOB</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>fake</name> <operator>&amp;</operator> <name>MSG_PEEK_</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>real</name> <operator>|=</operator> <name>MSG_PEEK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>fake</name> <operator>&amp;</operator> <name>MSG_CTRUNC_</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>real</name> <operator>|=</operator> <name>MSG_CTRUNC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>fake</name> <operator>&amp;</operator> <name>MSG_TRUNC_</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>real</name> <operator>|=</operator> <name>MSG_TRUNC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>fake</name> <operator>&amp;</operator> <name>MSG_DONTWAIT_</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>real</name> <operator>|=</operator> <name>MSG_DONTWAIT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>fake</name> <operator>&amp;</operator> <name>MSG_EOR_</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>real</name> <operator>|=</operator> <name>MSG_EOR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>fake</name> <operator>&amp;</operator> <name>MSG_WAITALL_</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>real</name> <operator>|=</operator> <name>MSG_WAITALL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>fake</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>MSG_OOB_</name><operator>|</operator><name>MSG_PEEK_</name><operator>|</operator><name>MSG_CTRUNC_</name><operator>|</operator><name>MSG_TRUNC_</name><operator>|</operator><name>MSG_DONTWAIT_</name><operator>|</operator><name>MSG_EOR_</name><operator>|</operator><name>MSG_WAITALL_</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"unimplemented socket flags %d\n"</literal></expr></argument>, <argument><expr><name>fake</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>real</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>sock_flags_from_real</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>real</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>fake</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>real</name> <operator>&amp;</operator> <name>MSG_OOB</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>fake</name> <operator>|=</operator> <name>MSG_OOB_</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>real</name> <operator>&amp;</operator> <name>MSG_PEEK</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>fake</name> <operator>|=</operator> <name>MSG_PEEK_</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>real</name> <operator>&amp;</operator> <name>MSG_CTRUNC</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>fake</name> <operator>|=</operator> <name>MSG_CTRUNC_</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>real</name> <operator>&amp;</operator> <name>MSG_TRUNC</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>fake</name> <operator>|=</operator> <name>MSG_TRUNC_</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>real</name> <operator>&amp;</operator> <name>MSG_DONTWAIT</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>fake</name> <operator>|=</operator> <name>MSG_DONTWAIT_</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>real</name> <operator>&amp;</operator> <name>MSG_EOR</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>fake</name> <operator>|=</operator> <name>MSG_EOR_</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>real</name> <operator>&amp;</operator> <name>MSG_WAITALL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>fake</name> <operator>|=</operator> <name>MSG_WAITALL_</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>real</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>MSG_OOB</name><operator>|</operator><name>MSG_PEEK</name><operator>|</operator><name>MSG_CTRUNC</name><operator>|</operator><name>MSG_TRUNC</name><operator>|</operator><name>MSG_DONTWAIT</name><operator>|</operator><name>MSG_EOR</name><operator>|</operator><name>MSG_WAITALL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"unimplemented socket flags %d\n"</literal></expr></argument>, <argument><expr><name>real</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>fake</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOL_SOCKET_</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SO_REUSEADDR_</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SO_TYPE_</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SO_ERROR_</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SO_BROADCAST_</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SO_SNDBUF_</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SO_RCVBUF_</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SO_KEEPALIVE_</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SO_LINGER_</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SO_PEERCRED_</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SO_TIMESTAMP_</name></cpp:macro> <cpp:value>29</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SO_PROTOCOL_</name></cpp:macro> <cpp:value>38</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SO_DOMAIN_</name></cpp:macro> <cpp:value>39</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IP_TOS_</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IP_TTL_</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IP_HDRINCL_</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IP_RETOPTS_</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IP_MTU_DISCOVER_</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IP_RECVTTL_</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IP_RECVTOS_</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCP_NODELAY_</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCP_DEFER_ACCEPT_</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCP_INFO_</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCP_CONGESTION_</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IPV6_UNICAST_HOPS_</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IPV6_V6ONLY_</name></cpp:macro> <cpp:value>26</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IPV6_TCLASS_</name></cpp:macro> <cpp:value>67</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ICMP6_FILTER_</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>sock_opt_to_real</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fake</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <switch>switch <condition>(<expr><name>level</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>SOL_SOCKET_</name></expr>:</case> <switch>switch <condition>(<expr><name>fake</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>SO_REUSEADDR_</name></expr>:</case> <return>return <expr><name>SO_REUSEADDR</name></expr>;</return>
            <case>case <expr><name>SO_TYPE_</name></expr>:</case> <return>return <expr><name>SO_TYPE</name></expr>;</return>
            <case>case <expr><name>SO_ERROR_</name></expr>:</case> <return>return <expr><name>SO_ERROR</name></expr>;</return>
            <case>case <expr><name>SO_BROADCAST_</name></expr>:</case> <return>return <expr><name>SO_BROADCAST</name></expr>;</return>
            <case>case <expr><name>SO_KEEPALIVE_</name></expr>:</case> <return>return <expr><name>SO_KEEPALIVE</name></expr>;</return>
            <case>case <expr><name>SO_LINGER_</name></expr>:</case> <return>return <expr><name>SO_LINGER</name></expr>;</return>
            <case>case <expr><name>SO_SNDBUF_</name></expr>:</case> <return>return <expr><name>SO_SNDBUF</name></expr>;</return>
            <case>case <expr><name>SO_RCVBUF_</name></expr>:</case> <return>return <expr><name>SO_RCVBUF</name></expr>;</return>
            <case>case <expr><name>SO_TIMESTAMP_</name></expr>:</case> <return>return <expr><name>SO_TIMESTAMP</name></expr>;</return>
        </block_content>}</block></switch> <break>break;</break>
        <case>case <expr><name>IPPROTO_TCP</name></expr>:</case> <switch>switch <condition>(<expr><name>fake</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>TCP_NODELAY_</name></expr>:</case> <return>return <expr><name>TCP_NODELAY</name></expr>;</return>
            <case>case <expr><name>TCP_DEFER_ACCEPT_</name></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return> <comment type="line">// unimplemented</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <case>case <expr><name>TCP_INFO_</name></expr>:</case> <return>return <expr><name>TCP_INFO</name></expr>;</return>
            <case>case <expr><name>TCP_CONGESTION_</name></expr>:</case> <return>return <expr><name>TCP_CONGESTION</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        </block_content>}</block></switch> <break>break;</break>
        <case>case <expr><name>IPPROTO_IP</name></expr>:</case> <switch>switch <condition>(<expr><name>fake</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>IP_TOS_</name></expr>:</case> <return>return <expr><name>IP_TOS</name></expr>;</return>
            <case>case <expr><name>IP_TTL_</name></expr>:</case> <return>return <expr><name>IP_TTL</name></expr>;</return>
            <case>case <expr><name>IP_HDRINCL_</name></expr>:</case> <return>return <expr><name>IP_HDRINCL</name></expr>;</return>
            <case>case <expr><name>IP_RETOPTS_</name></expr>:</case> <return>return <expr><name>IP_RETOPTS</name></expr>;</return>
            <case>case <expr><name>IP_RECVTTL_</name></expr>:</case> <return>return <expr><name>IP_RECVTTL</name></expr>;</return>
            <case>case <expr><name>IP_RECVTOS_</name></expr>:</case> <return>return <expr><name>IP_RECVTOS</name></expr>;</return>
        </block_content>}</block></switch> <break>break;</break>
        <case>case <expr><name>IPPROTO_IPV6</name></expr>:</case> <switch>switch <condition>(<expr><name>fake</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>IPV6_UNICAST_HOPS_</name></expr>:</case> <return>return <expr><name>IPV6_UNICAST_HOPS</name></expr>;</return>
            <case>case <expr><name>IPV6_TCLASS_</name></expr>:</case> <return>return <expr><name>IPV6_TCLASS</name></expr>;</return>
            <case>case <expr><name>IPV6_V6ONLY_</name></expr>:</case> <return>return <expr><name>IPV6_V6ONLY</name></expr>;</return>
        </block_content>}</block></switch> <break>break;</break>
    </block_content>}</block></switch>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>sock_level_to_real</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fake</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>fake</name> <operator>==</operator> <name>SOL_SOCKET_</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>SOL_SOCKET</name></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><name>fake</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sock_tmp_prefix</name></decl>;</decl_stmt>

<struct>struct <name>tcp_info_</name> <block>{
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>state</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>ca_state</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>retransmits</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>probes</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>backoff</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>options</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>snd_wscale</name><range>:<expr><literal type="number">4</literal></expr></range></decl>, <decl><type ref="prev"/><name>rcv_wscale</name><range>:<expr><literal type="number">4</literal></expr></range></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>uint32_t</name></type> <name>rto</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>ato</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>snd_mss</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>rcv_mss</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>uint32_t</name></type> <name>unacked</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>sacked</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>lost</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>retrans</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>fackets</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>uint32_t</name></type> <name>last_data_sent</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>last_ack_sent</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>last_data_recv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>last_ack_recv</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>uint32_t</name></type> <name>pmtu</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>rcv_ssthresh</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>rtt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>rttvar</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>snd_ssthresh</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>snd_cwnd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>advmss</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>reordering</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>uint32_t</name></type> <name>rcv_rtt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>rcv_space</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>uint32_t</name></type> <name>total_retrans</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
