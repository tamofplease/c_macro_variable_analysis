<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/fs/fake-rebuild.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fs/sqlutil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fs/fake-db.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kernel/errno.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util/list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"debug.h"</cpp:file></cpp:include>

<comment type="line">// rebuild process in pseudocode:</comment>
<comment type="line">//</comment>
<comment type="line">// table = {}</comment>
<comment type="line">// for each path, inode:</comment>
<comment type="line">//     real_inode = stat(path).st_ino</comment>
<comment type="line">//     if inode in table:</comment>
<comment type="line">//         unlink(path)</comment>
<comment type="line">//         link(table[inode], path)</comment>
<comment type="line">//     else:</comment>
<comment type="line">//         table[inode] = path</comment>
<comment type="line">//     stat = db['stat ' + inode]</comment>
<comment type="line">//     new_db['inode ' + path] = real_inode</comment>
<comment type="line">//     new_db['stat ' + real_inode] = stat</comment>

<comment type="line">// ad hoc hashtable</comment>
<struct>struct <name>entry</name> <block>{
    <decl_stmt><decl><type><name>ino_t</name></type> <name>inode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>list</name></name></type> <name>chain</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>int</name></type> <name>fakefs_rebuild</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fakefs_db</name></name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>root_fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name><name>fs</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"begin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"create table paths_old (path blob primary key, inode integer)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"create table stats_old (inode integer primary key, stat blob)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"insert into paths_old select * from paths"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"insert into stats_old select * from stats"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"delete from paths"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"delete from stats"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>get_paths</name> <init>= <expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"select path, inode from paths_old"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>read_stat</name> <init>= <expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"select stat from stats_old where inode = ?"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>write_path</name> <init>= <expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"insert into paths (path, inode) values (?, ?)"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>write_stat</name> <init>= <expr><call><name>PREPARE</name><argument_list>(<argument><expr><literal type="string">"replace into stats (inode, stat) values (?, ?)"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>list</name></name></type> <name><name>hashtable</name><index>[<expr><literal type="number">2000</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASH_SIZE</name></cpp:macro> <cpp:value>(sizeof(hashtable)/sizeof(hashtable[0]))</cpp:value></cpp:define>
    <for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>HASH_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hashtable</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <while>while <condition>(<expr><call><name>STEP</name><argument_list>(<argument><expr><name>get_paths</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>get_paths</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ino_t</name></type> <name>inode</name> <init>= <expr><call><name>sqlite3_column_int64</name><argument_list>(<argument><expr><name>get_paths</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// grab real inode</comment>
        <decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>stat</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>fstatat</name><argument_list>(<argument><expr><name>root_fd</name></expr></argument>, <argument><expr><call><name>fix_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>ino_t</name></type> <name>real_inode</name> <init>= <expr><name><name>stat</name><operator>.</operator><name>st_ino</name></name></expr></init></decl>;</decl_stmt>

        <comment type="line">// restore hardlinks</comment>
        <decl_stmt><decl><type><name><name>struct</name> <name>list</name></name> <modifier>*</modifier></type><name>bucket</name> <init>= <expr><operator>&amp;</operator><name><name>hashtable</name><index>[<expr><name>inode</name> <operator>%</operator> <name>HASH_SIZE</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>struct</name> <name>entry</name></name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
        <macro><name>list_for_each_entry</name><argument_list>(<argument>bucket</argument>, <argument>entry</argument>, <argument>chain</argument>)</argument_list></macro> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>inode</name></name> <operator>==</operator> <name>inode</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>unlinkat</name><argument_list>(<argument><expr><name>root_fd</name></expr></argument>, <argument><expr><call><name>fix_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>linkat</name><argument_list>(<argument><expr><name>root_fd</name></expr></argument>, <argument><expr><call><name>fix_path</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>root_fd</name></expr></argument>, <argument><expr><call><name>fix_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>inode</name></name> <operator>=</operator> <name>inode</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>list_add</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>chain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// extract the stat so we can copy it</comment>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>sqlite3_bind_int64</name><argument_list>(<argument><expr><name>read_stat</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>inode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>CHECK_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>STEP</name><argument_list>(<argument><expr><name>read_stat</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>RESET</name><argument_list>(<argument><expr><name>read_stat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>stat_data</name> <init>= <expr><call><name>sqlite3_column_blob</name><argument_list>(<argument><expr><name>read_stat</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>stat_data_size</name> <init>= <expr><call><name>sqlite3_column_bytes</name><argument_list>(<argument><expr><name>read_stat</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// store all the information in the new database</comment>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>sqlite3_bind_int64</name><argument_list>(<argument><expr><name>write_stat</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>real_inode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>CHECK_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>sqlite3_bind_blob</name><argument_list>(<argument><expr><name>write_stat</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>stat_data</name></expr></argument>, <argument><expr><name>stat_data_size</name></expr></argument>, <argument><expr><name>SQLITE_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>CHECK_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>STEP</name><argument_list>(<argument><expr><name>write_stat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>RESET</name><argument_list>(<argument><expr><name>write_stat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>sqlite3_bind_blob</name><argument_list>(<argument><expr><name>write_path</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SQLITE_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>CHECK_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>sqlite3_bind_int64</name><argument_list>(<argument><expr><name>write_path</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>real_inode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>CHECK_ERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>STEP</name><argument_list>(<argument><expr><name>write_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>RESET</name><argument_list>(<argument><expr><name>write_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>RESET</name><argument_list>(<argument><expr><name>read_stat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>HASH_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>entry</name></name> <modifier>*</modifier></type><name>entry</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
        <macro><name>list_for_each_entry_safe</name><argument_list>(<argument>&amp;hashtable[i]</argument>, <argument>entry</argument>, <argument>tmp</argument>, <argument>chain</argument>)</argument_list></macro> <block>{<block_content>
            <expr_stmt><expr><call><name>list_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>chain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"drop table paths_old"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"drop table stats_old"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXEC</name><argument_list>(<argument><expr><literal type="string">"commit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FINALIZE</name><argument_list>(<argument><expr><name>get_paths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FINALIZE</name><argument_list>(<argument><expr><name>read_stat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FINALIZE</name><argument_list>(<argument><expr><name>write_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FINALIZE</name><argument_list>(<argument><expr><name>write_stat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
