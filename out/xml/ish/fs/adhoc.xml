<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/fs/adhoc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kernel/fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fs/fd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kernel/errno.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>mount</name></name></type> <name>adhoc_mount</name></decl>;</decl_stmt>

<function><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>adhoc_fd_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fd_ops</name></name> <modifier>*</modifier></type><name>ops</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name> <init>= <expr><call><name>fd_create</name><argument_list>(<argument><expr><name>ops</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>mount_retain</name><argument_list>(<argument><expr><operator>&amp;</operator><name>adhoc_mount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>fd</name><operator>-&gt;</operator><name>mount</name></name> <operator>=</operator> <operator>&amp;</operator><name>adhoc_mount</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>fd</name><operator>-&gt;</operator><name>stat</name></name> <operator>=</operator> <operator>(</operator>struct <name>statbuf</name><operator>)</operator> <block>{}</block></expr>;</expr_stmt>
    <return>return <expr><name>fd</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>adhoc_fstat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>statbuf</name></name> <modifier>*</modifier></type><name>stat</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>stat</name> <operator>=</operator> <name><name>fd</name><operator>-&gt;</operator><name>stat</name></name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>adhoc_fsetattr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>attr</name></name></type> <name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <switch>switch <condition>(<expr><name><name>attr</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>attr_uid</name></expr>:</case>
            <expr_stmt><expr><name><name>fd</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <name><name>attr</name><operator>.</operator><name>uid</name></name></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>attr_gid</name></expr>:</case>
            <expr_stmt><expr><name><name>fd</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>gid</name></name> <operator>=</operator> <name><name>attr</name><operator>.</operator><name>gid</name></name></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>attr_mode</name></expr>:</case>
            <expr_stmt><expr><name><name>fd</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <operator>(</operator><name><name>fd</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>mode</name></name> <operator>&amp;</operator> <name>S_IFMT</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>attr</name><operator>.</operator><name>mode</name></name> <operator>&amp;</operator> <operator>~</operator><name>S_IFMT</name><operator>)</operator></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>attr_size</name></expr>:</case>
            <return>return <expr><name>_EINVAL</name></expr>;</return>
    </block_content>}</block></switch>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>adhoc_getpath</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name> <init>= <expr><literal type="string">"unknown"</literal></expr></init></decl>;</decl_stmt> <comment type="line">// TODO allow this to be customized</comment>
    <if_stmt><if>if <condition>(<expr><name><name>fd</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>inode</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"anon_inode:[%s]"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s:[%lu]"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>fd</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>inode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>is_adhoc_fd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>fd</name><operator>-&gt;</operator><name>mount</name></name> <operator>==</operator> <operator>&amp;</operator><name>adhoc_mount</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>fs_ops</name></name></type> <name>adhoc_fs</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>magic</name> <operator>=</operator> <literal type="number">0x09041934</literal></expr>, <comment type="line">// FIXME wrong for pipes and sockets</comment>
    <expr><operator>.</operator><name>fstat</name> <operator>=</operator> <name>adhoc_fstat</name></expr>,
    <expr><operator>.</operator><name>fsetattr</name> <operator>=</operator> <name>adhoc_fsetattr</name></expr>,
    <expr><operator>.</operator><name>getpath</name> <operator>=</operator> <name>adhoc_getpath</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>mount</name></name></type> <name>adhoc_mount</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>fs</name> <operator>=</operator> <operator>&amp;</operator><name>adhoc_fs</name></expr>,
    <expr><operator>.</operator><name>point</name> <operator>=</operator> <literal type="string">""</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
