<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/fs/dev.h"><cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>DEV_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEV_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__linux__</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sysmacros.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fs/fd.h"</cpp:file></cpp:include>

<comment type="line">// a dev_t is encoded like this in hex, where M is major and m is minor:</comment>
<comment type="line">// mmmMMMmm</comment>
<comment type="line">// (legacy I guess)</comment>

<typedef>typedef <type><name>uint32_t</name></type> <name>dev_t_</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>dev_t_</name></type> <name>dev_make</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>major</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minor</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>(</operator><operator>(</operator><name>minor</name> <operator>&amp;</operator> <literal type="number">0xfff00</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>major</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>minor</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>dev_major</name><parameter_list>(<parameter><decl><type><name>dev_t_</name></type> <name>dev</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>(</operator><name>dev</name> <operator>&amp;</operator> <literal type="number">0xfff00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>dev_minor</name><parameter_list>(<parameter><decl><type><name>dev_t_</name></type> <name>dev</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>(</operator><operator>(</operator><name>dev</name> <operator>&amp;</operator> <literal type="number">0xfff00000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>dev</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>dev_t</name></type> <name>dev_real_from_fake</name><parameter_list>(<parameter><decl><type><name>dev_t_</name></type> <name>dev</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>makedev</name><argument_list>(<argument><expr><call><name>dev_major</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>dev_minor</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>dev_t_</name></type> <name>dev_fake_from_real</name><parameter_list>(<parameter><decl><type><name>dev_t</name></type> <name>dev</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>dev_make</name><argument_list>(<argument><expr><call><name>major</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>minor</name><argument_list>(<argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEV_BLOCK</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEV_CHAR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<struct>struct <name>dev_ops</name> <block>{
    <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>open</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>major</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minor</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>)</parameter_list>;</function_decl>
    <decl_stmt><decl><type><name><name>struct</name> <name>fd_ops</name></name></type> <name>fd</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>dev_ops</name></name> <modifier>*</modifier></type><name><name>block_devs</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>dev_ops</name></name> <modifier>*</modifier></type><name><name>char_devs</name><index>[]</index></name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> <name>dev_open</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>major</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minor</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>dev_ops</name></name></type> <name>null_dev</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
