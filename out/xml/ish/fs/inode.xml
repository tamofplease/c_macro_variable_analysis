<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/fs/inode.h"><cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FS_INODE_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FS_INODE_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"misc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util/list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util/sync.h"</cpp:file></cpp:include>
<struct_decl>struct <name>mount</name>;</struct_decl>
<struct_decl>struct <name>fd</name>;</struct_decl>

<struct>struct <name>inode_data</name> <block>{
    <decl_stmt><decl><type><name>unsigned</name></type> <name>refcount</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ino_t</name></type> <name>number</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>mount</name></name> <modifier>*</modifier></type><name>mount</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>list</name></name></type> <name>chain</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>list</name></name></type> <name>posix_locks</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cond_t</name></type> <name>posix_unlock</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>uint32_t</name></type> <name>socket_id</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>lock_t</name></type> <name>lock</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><name><name>struct</name> <name>inode_data</name></name> <modifier>*</modifier></type><name>inode_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mount</name></name> <modifier>*</modifier></type><name>mount</name></decl></parameter>, <parameter><decl><type><name>ino_t</name></type> <name>inode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>inode_retain</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>inode_data</name></name> <modifier>*</modifier></type><name>inode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>inode_release</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>inode_data</name></name> <modifier>*</modifier></type><name>inode</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// generic_open must lock out anything trying to destroy an inode between</comment>
<comment type="line">// opening the file and acquiring a reference to its inode. For this purpose</comment>
<comment type="line">// only, the inodes_lock and inode_get_unlocked are made available. Think</comment>
<comment type="line">// carefully before using them for anything else.</comment>
<comment type="line">// mount-&gt;lock nests inside this.</comment>
<comment type="line">// To quote @dril: i despise this lock. id love nothing more than to kick it</comment>
<comment type="line">// through the wall and shatter it into 100 deadlocks. But i need it</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <name>lock_t</name></type> <name>inodes_lock</name></decl>;</decl_stmt>
<function_decl><type><name><name>struct</name> <name>inode_data</name></name> <modifier>*</modifier></type><name>inode_get_unlocked</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mount</name></name> <modifier>*</modifier></type><name>mount</name></decl></parameter>, <parameter><decl><type><name>ino_t</name></type> <name>inode</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// calls mount-&gt;fs-&gt;inode_orphaned if this inode is orphaned, while holding indoes_lock</comment>
<function_decl><type><name>void</name></type> <name>inode_check_orphaned</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mount</name></name> <modifier>*</modifier></type><name>mount</name></decl></parameter>, <parameter><decl><type><name>ino_t</name></type> <name>ino</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// file locking stuff (maybe should go in kernel/calls.h?)</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_RDLCK_</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_WRLCK_</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_UNLCK_</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<struct>struct <name>file_lock</name> <block>{
    <decl_stmt><decl><type><name>off_t_</name></type> <name>start</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>off_t_</name></type> <name>end</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>pid_t_</name></type> <name>pid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>owner</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>list</name></name></type> <name>locks</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>flock_</name> <block>{
    <decl_stmt><decl><type><name>word_t</name></type> <name>type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>word_t</name></type> <name>whence</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>off_t_</name></type> <name>start</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>off_t_</name></type> <name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>pid_t_</name></type> <name>pid</name></decl>;</decl_stmt>
}</block> <decl><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>packed</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>
<struct>struct <name>flock32_</name> <block>{
    <decl_stmt><decl><type><name>word_t</name></type> <name>type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>word_t</name></type> <name>whence</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dword_t</name></type> <name>start</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dword_t</name></type> <name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>pid_t_</name></type> <name>pid</name></decl>;</decl_stmt>
}</block> <decl><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>packed</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>

<function_decl><type><name>int</name></type> <name>fcntl_getlk</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>flock_</name></name> <modifier>*</modifier></type><name>flock</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="line">// cmd should be either F_SETLK or F_SETLKW</comment>
<function_decl><type><name>int</name></type> <name>fcntl_setlk</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>flock_</name></name> <modifier>*</modifier></type><name>flock</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>block</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// locks the inode internally</comment>
<function_decl><type><name>void</name></type> <name>file_lock_remove_owned_by</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>owner</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
