<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/fs/proc.h"><cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FS_PROC_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FS_PROC_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fs/stat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"misc.h"</cpp:file></cpp:include>

<struct>struct <name>proc_entry</name> <block>{
    <decl_stmt><decl><type><name><name>struct</name> <name>proc_dir_entry</name></name> <modifier>*</modifier></type><name>meta</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>index</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>child_names</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>pid_t_</name></type> <name>pid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sdword_t</name></type> <name>fd</name></decl>;</decl_stmt> <comment type="line">// typedef might not have been read yet</comment>
}</block>;</struct>

<struct>struct <name>proc_data</name> <block>{
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>capacity</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>proc_dir_entry</name> <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mode_t_</name></type> <name>mode</name></decl>;</decl_stmt>
    
    <comment type="line">// file with dynamic name</comment>
    <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>getname</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>proc_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="line">// file with custom show data function</comment>
    <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>show</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>proc_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>proc_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
    
    <comment type="line">// file with a custom write function</comment>
    <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>update</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>proc_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>proc_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
    
    <comment type="line">// file with custom pread functionality</comment>
    <function_decl><type><name>ssize_t</name></type> (<modifier>*</modifier><name>pread</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>proc_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>proc_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>off</name></decl></parameter>)</parameter_list>;</function_decl>
    
    <comment type="line">// file with custom pwrite functionality</comment>
    <function_decl><type><name>ssize_t</name></type> (<modifier>*</modifier><name>pwrite</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>proc_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>proc_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>off</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="line">// symlink</comment>
    <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>readlink</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>proc_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>
    
    <comment type="line">// remove</comment>
    <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>unlink</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>proc_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="line">// directory with static list</comment>
    <decl_stmt><decl><type><name><name>struct</name> <name>proc_children</name></name> <modifier>*</modifier></type><name>children</name></decl>;</decl_stmt>

    <comment type="line">// directory with dynamic contents</comment>
    <function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>readdir</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>proc_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>index</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>proc_entry</name></name> <modifier>*</modifier></type><name>next_entry</name></decl></parameter>)</parameter_list>;</function_decl>

    <decl_stmt><decl><type><name><name>struct</name> <name>proc_dir_entry</name></name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>inode</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>proc_children</name> <block>{
    <decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>proc_dir_entry</name></name></type> <name><name>entries</name><index>[]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROC_CHILDREN</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ .count = sizeof((struct proc_dir_entry[])__VA_ARGS__) / sizeof(struct proc_dir_entry), .entries = __VA_ARGS__ }</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>proc_dir_entry</name></name></type> <name>proc_root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>proc_dir_entry</name></name></type> <name>proc_pid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>proc_children</name></name></type> <name>proc_ish_children</name></decl>;</decl_stmt>

<function_decl><type><name>mode_t_</name></type> <name>proc_entry_mode</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>proc_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>proc_entry_getname</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>proc_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>proc_entry_stat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>proc_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>statbuf</name></name> <modifier>*</modifier></type><name>stat</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>proc_entry_cleanup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>proc_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>free_string_array</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>array</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>proc_dir_read</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>proc_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>index</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>proc_entry</name></name> <modifier>*</modifier></type><name>next_entry</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>proc_buf_append</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>proc_data</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>proc_printf</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>proc_data</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
