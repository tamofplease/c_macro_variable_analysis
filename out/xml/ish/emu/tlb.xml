<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/emu/tlb.h"><cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>TLB_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLB_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"emu/mmu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"debug.h"</cpp:file></cpp:include>

<struct>struct <name>tlb_entry</name> <block>{
    <decl_stmt><decl><type><name>page_t</name></type> <name>page</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>page_t</name></type> <name>page_if_writable</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uintptr_t</name></type> <name>data_minus_addr</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLB_BITS</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLB_SIZE</name></cpp:macro> <cpp:value>(1 &lt;&lt; TLB_BITS)</cpp:value></cpp:define>
<struct>struct <name>tlb</name> <block>{
    <decl_stmt><decl><type><name><name>struct</name> <name>mmu</name></name> <modifier>*</modifier></type><name>mmu</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>page_t</name></type> <name>dirty_page</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>mem_changes</name></decl>;</decl_stmt>
    <comment type="line">// this is basically one of the return values of tlb_handle_miss, tlb_{read,write}, and __tlb_{read,write}_cross_page</comment>
    <comment type="line">// yes, this sucks</comment>
    <decl_stmt><decl><type><name>addr_t</name></type> <name>segfault_addr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>tlb_entry</name></name></type> <name><name>entries</name><index>[<expr><name>TLB_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLB_INDEX</name><parameter_list>(<parameter><type><name>addr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((addr &gt;&gt; PAGE_BITS) &amp; (TLB_SIZE - 1)) ^ (addr &gt;&gt; (PAGE_BITS + TLB_BITS)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLB_PAGE</name><parameter_list>(<parameter><type><name>addr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(addr &amp; 0xfffff000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLB_PAGE_EMPTY</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<function_decl><type><name>void</name></type> <name>tlb_refresh</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tlb</name></name> <modifier>*</modifier></type><name>tlb</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>mmu</name></name> <modifier>*</modifier></type><name>mmu</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>tlb_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tlb</name></name> <modifier>*</modifier></type><name>tlb</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>tlb_flush</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tlb</name></name> <modifier>*</modifier></type><name>tlb</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>tlb_handle_miss</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tlb</name></name> <modifier>*</modifier></type><name>tlb</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>forceinline</name> <name>__no_instrument</name> <name>void</name> <modifier>*</modifier></type><name>__tlb_read_ptr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tlb</name></name> <modifier>*</modifier></type><name>tlb</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>tlb_entry</name></name></type> <name>entry</name> <init>= <expr><name><name>tlb</name><operator>-&gt;</operator><name>entries</name><index>[<expr><call><name>TLB_INDEX</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>.</operator><name>page</name></name> <operator>==</operator> <call><name>TLB_PAGE</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>address</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>entry</name><operator>.</operator><name>data_minus_addr</name></name> <operator>+</operator> <name>addr</name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>posit</name><argument_list>(<argument><expr><name>address</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>address</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name>tlb_handle_miss</name><argument_list>(<argument><expr><name>tlb</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>MEM_READ</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function_decl><type><name>bool</name></type> <name>__tlb_read_cross_page</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tlb</name></name> <modifier>*</modifier></type><name>tlb</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function><type><name>forceinline</name> <name>__no_instrument</name> <name>bool</name></type> <name>tlb_read</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tlb</name></name> <modifier>*</modifier></type><name>tlb</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>PGOFFSET</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>PAGE_SIZE</name> <operator>-</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>__tlb_read_cross_page</name><argument_list>(<argument><expr><name>tlb</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>__tlb_read_ptr</name><argument_list>(<argument><expr><name>tlb</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>forceinline</name> <name>__no_instrument</name> <name>void</name> <modifier>*</modifier></type><name>__tlb_write_ptr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tlb</name></name> <modifier>*</modifier></type><name>tlb</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>tlb_entry</name></name></type> <name>entry</name> <init>= <expr><name><name>tlb</name><operator>-&gt;</operator><name>entries</name><index>[<expr><call><name>TLB_INDEX</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>.</operator><name>page_if_writable</name></name> <operator>==</operator> <call><name>TLB_PAGE</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>tlb</name><operator>-&gt;</operator><name>dirty_page</name></name> <operator>=</operator> <call><name>TLB_PAGE</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>address</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>entry</name><operator>.</operator><name>data_minus_addr</name></name> <operator>+</operator> <name>addr</name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>posit</name><argument_list>(<argument><expr><name>address</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>address</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name>tlb_handle_miss</name><argument_list>(<argument><expr><name>tlb</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>MEM_WRITE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function_decl><type><name>bool</name></type> <name>__tlb_write_cross_page</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tlb</name></name> <modifier>*</modifier></type><name>tlb</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function><type><name>forceinline</name> <name>__no_instrument</name> <name>bool</name></type> <name>tlb_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tlb</name></name> <modifier>*</modifier></type><name>tlb</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>PGOFFSET</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>PAGE_SIZE</name> <operator>-</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>__tlb_write_cross_page</name><argument_list>(<argument><expr><name>tlb</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>__tlb_write_ptr</name><argument_list>(<argument><expr><name>tlb</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
