<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/emu/regid.h"><cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>EMU_REGID_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EMU_REGID_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"emu/cpu.h"</cpp:file></cpp:include>

<typedef>typedef <type><name>uint8_t</name></type> <name>reg_id_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REG_ID</name><parameter_list>(<parameter><type><name>reg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(struct cpu_state, reg)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REG_VAL</name><parameter_list>(<parameter><type><name>cpu</name></type></parameter>, <parameter><type><name>reg_id</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*((uint(size) *) (((char *) (cpu)) + reg_id)))</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>regid8_name</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>reg_id</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <switch>switch <condition>(<expr><name>reg_id</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><call><name>REG_ID</name><argument_list>(<argument><expr><name>al</name></expr></argument>)</argument_list></call></expr>:</case> <return>return <expr><literal type="string">"al"</literal></expr>;</return>
        <case>case <expr><call><name>REG_ID</name><argument_list>(<argument><expr><name>bl</name></expr></argument>)</argument_list></call></expr>:</case> <return>return <expr><literal type="string">"bl"</literal></expr>;</return>
        <case>case <expr><call><name>REG_ID</name><argument_list>(<argument><expr><name>cl</name></expr></argument>)</argument_list></call></expr>:</case> <return>return <expr><literal type="string">"cl"</literal></expr>;</return>
        <case>case <expr><call><name>REG_ID</name><argument_list>(<argument><expr><name>dl</name></expr></argument>)</argument_list></call></expr>:</case> <return>return <expr><literal type="string">"dl"</literal></expr>;</return>
        <case>case <expr><call><name>REG_ID</name><argument_list>(<argument><expr><name>ah</name></expr></argument>)</argument_list></call></expr>:</case> <return>return <expr><literal type="string">"ah"</literal></expr>;</return>
        <case>case <expr><call><name>REG_ID</name><argument_list>(<argument><expr><name>bh</name></expr></argument>)</argument_list></call></expr>:</case> <return>return <expr><literal type="string">"bh"</literal></expr>;</return>
        <case>case <expr><call><name>REG_ID</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>:</case> <return>return <expr><literal type="string">"ch"</literal></expr>;</return>
        <case>case <expr><call><name>REG_ID</name><argument_list>(<argument><expr><name>dh</name></expr></argument>)</argument_list></call></expr>:</case> <return>return <expr><literal type="string">"dh"</literal></expr>;</return>
    </block_content>}</block></switch>
    <return>return <expr><literal type="string">"??"</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>regid16_name</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>reg_id</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <switch>switch <condition>(<expr><name>reg_id</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><call><name>REG_ID</name><argument_list>(<argument><expr><name>ax</name></expr></argument>)</argument_list></call></expr>:</case> <return>return <expr><literal type="string">"ax"</literal></expr>;</return>
        <case>case <expr><call><name>REG_ID</name><argument_list>(<argument><expr><name>bx</name></expr></argument>)</argument_list></call></expr>:</case> <return>return <expr><literal type="string">"bx"</literal></expr>;</return>
        <case>case <expr><call><name>REG_ID</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>:</case> <return>return <expr><literal type="string">"cx"</literal></expr>;</return>
        <case>case <expr><call><name>REG_ID</name><argument_list>(<argument><expr><name>dx</name></expr></argument>)</argument_list></call></expr>:</case> <return>return <expr><literal type="string">"dx"</literal></expr>;</return>
        <case>case <expr><call><name>REG_ID</name><argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></call></expr>:</case> <return>return <expr><literal type="string">"si"</literal></expr>;</return>
        <case>case <expr><call><name>REG_ID</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>:</case> <return>return <expr><literal type="string">"di"</literal></expr>;</return>
        <case>case <expr><call><name>REG_ID</name><argument_list>(<argument><expr><name>bp</name></expr></argument>)</argument_list></call></expr>:</case> <return>return <expr><literal type="string">"bp"</literal></expr>;</return>
        <case>case <expr><call><name>REG_ID</name><argument_list>(<argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>:</case> <return>return <expr><literal type="string">"sp"</literal></expr>;</return>
    </block_content>}</block></switch>
    <return>return <expr><literal type="string">"??"</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>regid32_name</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>reg_id</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <switch>switch <condition>(<expr><name>reg_id</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><call><name>REG_ID</name><argument_list>(<argument><expr><name>eax</name></expr></argument>)</argument_list></call></expr>:</case> <return>return <expr><literal type="string">"eax"</literal></expr>;</return>
        <case>case <expr><call><name>REG_ID</name><argument_list>(<argument><expr><name>ebx</name></expr></argument>)</argument_list></call></expr>:</case> <return>return <expr><literal type="string">"ebx"</literal></expr>;</return>
        <case>case <expr><call><name>REG_ID</name><argument_list>(<argument><expr><name>ecx</name></expr></argument>)</argument_list></call></expr>:</case> <return>return <expr><literal type="string">"ecx"</literal></expr>;</return>
        <case>case <expr><call><name>REG_ID</name><argument_list>(<argument><expr><name>edx</name></expr></argument>)</argument_list></call></expr>:</case> <return>return <expr><literal type="string">"edx"</literal></expr>;</return>
        <case>case <expr><call><name>REG_ID</name><argument_list>(<argument><expr><name>esi</name></expr></argument>)</argument_list></call></expr>:</case> <return>return <expr><literal type="string">"esi"</literal></expr>;</return>
        <case>case <expr><call><name>REG_ID</name><argument_list>(<argument><expr><name>edi</name></expr></argument>)</argument_list></call></expr>:</case> <return>return <expr><literal type="string">"edi"</literal></expr>;</return>
        <case>case <expr><call><name>REG_ID</name><argument_list>(<argument><expr><name>ebp</name></expr></argument>)</argument_list></call></expr>:</case> <return>return <expr><literal type="string">"ebp"</literal></expr>;</return>
        <case>case <expr><call><name>REG_ID</name><argument_list>(<argument><expr><name>esp</name></expr></argument>)</argument_list></call></expr>:</case> <return>return <expr><literal type="string">"esp"</literal></expr>;</return>
    </block_content>}</block></switch>
    <return>return <expr><literal type="string">"???"</literal></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>regptr</name> <block>{
    <comment type="line">// offsets into the cpu_state structure</comment>
    <decl_stmt><decl><type><name>reg_id_t</name></type> <name>reg8_id</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>reg_id_t</name></type> <name>reg16_id</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>reg_id_t</name></type> <name>reg32_id</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>reg_id_t</name></type> <name>reg128_id</name></decl>;</decl_stmt>
}</block>;</struct>
<expr_stmt><expr><specifier>static</specifier> <macro><name>__attribute__</name><argument_list>(<argument>(unused)</argument>)</argument_list></macro> <specifier>const</specifier> <name>char</name> <operator>*</operator><macro><name>regptr_name</name><argument_list>(<argument>struct regptr regptr</argument>)</argument_list></macro> <block>{
    <expr><specifier>static</specifier> <name>char</name> <name><name>buf</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr>;
    <expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s/%s/%s"</literal></expr></argument>,
            <argument><expr><call><name>regid8_name</name><argument_list>(<argument><expr><name><name>regptr</name><operator>.</operator><name>reg8_id</name></name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>regid16_name</name><argument_list>(<argument><expr><name><name>regptr</name><operator>.</operator><name>reg16_id</name></name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>regid32_name</name><argument_list>(<argument><expr><name><name>regptr</name><operator>.</operator><name>reg32_id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <return>return <expr><name>buf</name></expr>;</return>
}</block></expr></expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_REGPTR</name><parameter_list>(<parameter><type><name>r32</name></type></parameter>, <parameter><type><name>r16</name></type></parameter>, <parameter><type><name>r8</name></type></parameter>, <parameter><type><name>xmm</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((struct regptr) { \
        .reg32_id = REG_ID(r32), \
        .reg16_id = REG_ID(r16), \
        .reg8_id = REG_ID(r8), \
        .reg128_id = REG_ID(xmm), \
        })</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>regptr</name></name></type> <name>regptr_from_reg</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>reg32</name></name></type> <name>reg</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <switch>switch <condition>(<expr><name>reg</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>reg_eax</name></expr>:</case> <return>return <expr><call><name>MAKE_REGPTR</name><argument_list>(<argument><expr><name>eax</name></expr></argument>,<argument><expr><name>ax</name></expr></argument>,<argument><expr><name>al</name></expr></argument>,<argument><expr><name><name>xmm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name>reg_ecx</name></expr>:</case> <return>return <expr><call><name>MAKE_REGPTR</name><argument_list>(<argument><expr><name>ecx</name></expr></argument>,<argument><expr><name>cx</name></expr></argument>,<argument><expr><name>cl</name></expr></argument>,<argument><expr><name><name>xmm</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name>reg_edx</name></expr>:</case> <return>return <expr><call><name>MAKE_REGPTR</name><argument_list>(<argument><expr><name>edx</name></expr></argument>,<argument><expr><name>dx</name></expr></argument>,<argument><expr><name>dl</name></expr></argument>,<argument><expr><name><name>xmm</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name>reg_ebx</name></expr>:</case> <return>return <expr><call><name>MAKE_REGPTR</name><argument_list>(<argument><expr><name>ebx</name></expr></argument>,<argument><expr><name>bx</name></expr></argument>,<argument><expr><name>bl</name></expr></argument>,<argument><expr><name><name>xmm</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name>reg_esp</name></expr>:</case> <return>return <expr><call><name>MAKE_REGPTR</name><argument_list>(<argument><expr><name>esp</name></expr></argument>,<argument><expr><name>sp</name></expr></argument>,<argument><expr><name>ah</name></expr></argument>,<argument><expr><name><name>xmm</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name>reg_ebp</name></expr>:</case> <return>return <expr><call><name>MAKE_REGPTR</name><argument_list>(<argument><expr><name>ebp</name></expr></argument>,<argument><expr><name>bp</name></expr></argument>,<argument><expr><name>ch</name></expr></argument>,<argument><expr><name><name>xmm</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name>reg_esi</name></expr>:</case> <return>return <expr><call><name>MAKE_REGPTR</name><argument_list>(<argument><expr><name>esi</name></expr></argument>,<argument><expr><name>si</name></expr></argument>,<argument><expr><name>dh</name></expr></argument>,<argument><expr><name><name>xmm</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name>reg_edi</name></expr>:</case> <return>return <expr><call><name>MAKE_REGPTR</name><argument_list>(<argument><expr><name>edi</name></expr></argument>,<argument><expr><name>di</name></expr></argument>,<argument><expr><name>bh</name></expr></argument>,<argument><expr><name><name>xmm</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name>reg_none</name></expr>:</case> <return>return <expr><operator>(</operator>struct <name>regptr</name><operator>)</operator> <block>{}</block></expr>;</return>
        <default>default:</default> <expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"invalid register"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
