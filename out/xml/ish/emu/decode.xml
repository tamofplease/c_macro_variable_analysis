<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/emu/decode.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"misc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"emu/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"emu/modrm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"emu/interrupt.h"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>oz</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>oz</name></cpp:macro> <cpp:value>OP_SIZE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>reg_ah</name></cpp:macro> <cpp:value>reg_sp</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>reg_ch</name></cpp:macro> <cpp:value>reg_bp</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>reg_dh</name></cpp:macro> <cpp:value>reg_si</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>reg_bh</name></cpp:macro> <cpp:value>reg_di</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DEFAULT_CHANNEL</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_CHANNEL</name></cpp:macro> <cpp:value>instr</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRACEI</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>TRACE(msg "\t", ##__VA_ARGS__)</cpp:value></cpp:define>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>current_pid</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRACEIP</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>TRACE("%d %08x\t", current_pid(), state-&gt;ip)</cpp:value></cpp:define>

<comment type="line">// this will be the next PyEval_EvalFrameEx</comment>
<decl_stmt><decl><type><name>__no_instrument</name> <name>DECODER_RET</name></type> <name>glue</name><argument_list>(<argument><expr><name>DECODER_NAME</name></expr></argument>, <argument><expr><name>OP_SIZE</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>DECODER_ARGS</name></expr></argument>)</argument_list> <block>{<block_content>
    <expr_stmt><expr><name>DECLARE_LOCALS</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>byte_t</name></type> <name>insn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>imm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>modrm</name></name></type> <name>modrm</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READIMM_</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_READIMM(name, size); TRACE("imm %llx ", (long long) name)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READINSN</name></cpp:macro> <cpp:value>_READIMM(insn, 8); TRACE("%02x ", insn)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READIMM</name></cpp:macro> <cpp:value>READIMM_(imm, OP_SIZE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READIMMoz</name></cpp:macro> <cpp:value>READIMM</cpp:value></cpp:define> <comment type="line">// there's nothing more permanent than a temporary hack</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READIMM8</name></cpp:macro> <cpp:value>READIMM_(imm, 8); imm = (int8_t) (uint8_t) imm</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READIMM16</name></cpp:macro> <cpp:value>READIMM_(imm, 16)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READMODRM_MEM</name></cpp:macro> <cpp:value>READMODRM; if (modrm.type == modrm_reg) UNDEFINED</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READMODRM_NOMEM</name></cpp:macro> <cpp:value>READMODRM; if (modrm.type != modrm_reg) UNDEFINED</cpp:value></cpp:define>

<label><name>restart</name>:</label>
    <expr_stmt><expr><call><name>TRACEIP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>READINSN</name></expr>;</expr_stmt>
    <switch>switch <condition>(<expr><name>insn</name></expr>)</condition> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_OP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>OP</name></type></parameter>, <parameter><type><name>op</name></type></parameter>)</parameter_list></cpp:macro> \
        <cpp:value>case x+0x0: TRACEI(op " reg8, modrm8"); \
                   READMODRM; OP(modrm_reg, modrm_val,8); break; \
        case x+0x1: TRACEI(op " reg, modrm"); \
                   READMODRM; OP(modrm_reg, modrm_val,oz); break; \
        case x+0x2: TRACEI(op " modrm8, reg8"); \
                   READMODRM; OP(modrm_val, modrm_reg,8); break; \
        case x+0x3: TRACEI(op " modrm, reg"); \
                   READMODRM; OP(modrm_val, modrm_reg,oz); break; \
        case x+0x4: TRACEI(op " imm8, al\t"); \
                   READIMM8; OP(imm, reg_a,8); break; \
        case x+0x5: TRACEI(op " imm, oax\t"); \
                   READIMM; OP(imm, reg_a,oz); break</cpp:value></cpp:define>

        <expr_stmt><expr><call><name>MAKE_OP</name><argument_list>(<argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><name>ADD</name></expr></argument>, <argument><expr><literal type="string">"add"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MAKE_OP</name><argument_list>(<argument><expr><literal type="number">0x08</literal></expr></argument>, <argument><expr><name>OR</name></expr></argument>, <argument><expr><literal type="string">"or"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <case>case <expr><literal type="number">0x0f</literal></expr>:</case>
            <comment type="line">// 2-byte opcode prefix</comment>
            <expr_stmt><expr><name>READINSN</name></expr>;</expr_stmt>
            <switch>switch <condition>(<expr><name>insn</name></expr>)</condition> <block>{<block_content>
                <case>case <expr><literal type="number">0x18</literal> <operator>...</operator> <literal type="number">0x1f</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"nop modrm\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <break>break;</break>

                <case>case <expr><literal type="number">0x28</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"movaps xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>VMOV</name><argument_list>(<argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x29</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"movaps xmm, xmm:modrm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>VMOV</name><argument_list>(<argument><expr><name>xmm_modrm_reg</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

                <case>case <expr><literal type="number">0x31</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"rdtsc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>RDTSC</name></expr>;</expr_stmt> <break>break;</break>

                <case>case <expr><literal type="number">0x40</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"cmovo modrm, reg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>CMOV</name><argument_list>(<argument><expr><name>O</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>, <argument><expr><name>modrm_reg</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x41</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"cmovno modrm, reg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>CMOVN</name><argument_list>(<argument><expr><name>O</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>, <argument><expr><name>modrm_reg</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x42</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"cmovb modrm, reg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>CMOV</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>, <argument><expr><name>modrm_reg</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x43</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"cmovnb modrm, reg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>CMOVN</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>, <argument><expr><name>modrm_reg</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x44</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"cmove modrm, reg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>CMOV</name><argument_list>(<argument><expr><name>E</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>, <argument><expr><name>modrm_reg</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x45</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"cmovne modrm, reg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>CMOVN</name><argument_list>(<argument><expr><name>E</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>, <argument><expr><name>modrm_reg</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x46</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"cmovbe modrm, reg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>CMOV</name><argument_list>(<argument><expr><name>BE</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>, <argument><expr><name>modrm_reg</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x47</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"cmova modrm, reg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>CMOVN</name><argument_list>(<argument><expr><name>BE</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>, <argument><expr><name>modrm_reg</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x48</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"cmovs modrm, reg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>CMOV</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>, <argument><expr><name>modrm_reg</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x49</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"cmovns modrm, reg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>CMOVN</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>, <argument><expr><name>modrm_reg</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x4a</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"cmovp modrm, reg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>CMOV</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>, <argument><expr><name>modrm_reg</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x4b</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"cmovnp modrm, reg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>CMOVN</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>, <argument><expr><name>modrm_reg</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x4c</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"cmovl modrm, reg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>CMOV</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>, <argument><expr><name>modrm_reg</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x4d</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"cmovnl modrm, reg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>CMOVN</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>, <argument><expr><name>modrm_reg</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x4e</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"cmovle modrm, reg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>CMOV</name><argument_list>(<argument><expr><name>LE</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>, <argument><expr><name>modrm_reg</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x4f</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"cmovnle modrm, reg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>CMOVN</name><argument_list>(<argument><expr><name>LE</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>, <argument><expr><name>modrm_reg</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

                <case>case <expr><literal type="number">0x77</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"emms (ignored because there is no mmx)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

                <case>case <expr><literal type="number">0x80</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"jo rel\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READIMM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>J_REL</name><argument_list>(<argument><expr><name>O</name></expr></argument>, <argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x81</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"jno rel\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READIMM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>JN_REL</name><argument_list>(<argument><expr><name>O</name></expr></argument>, <argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x82</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"jb rel\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READIMM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>J_REL</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x83</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"jnb rel\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READIMM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>JN_REL</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x84</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"je rel\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READIMM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>J_REL</name><argument_list>(<argument><expr><name>E</name></expr></argument>, <argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x85</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"jne rel\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READIMM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>JN_REL</name><argument_list>(<argument><expr><name>E</name></expr></argument>, <argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x86</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"jbe rel\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READIMM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>J_REL</name><argument_list>(<argument><expr><name>BE</name></expr></argument>, <argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x87</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"ja rel\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READIMM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>JN_REL</name><argument_list>(<argument><expr><name>BE</name></expr></argument>, <argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x88</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"js rel\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READIMM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>J_REL</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x89</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"jns rel\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READIMM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>JN_REL</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x8a</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"jp rel\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READIMM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>J_REL</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x8b</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"jnp rel\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READIMM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>JN_REL</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x8c</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"jl rel\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READIMM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>J_REL</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x8d</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"jnl rel\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READIMM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>JN_REL</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x8e</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"jle rel\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READIMM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>J_REL</name><argument_list>(<argument><expr><name>LE</name></expr></argument>, <argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x8f</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"jnle rel\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READIMM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>JN_REL</name><argument_list>(<argument><expr><name>LE</name></expr></argument>, <argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

                <case>case <expr><literal type="number">0x90</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"seto\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>O</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x91</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"setno\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>SETN</name><argument_list>(<argument><expr><name>O</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x92</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"setb\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x93</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"setnb\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>SETN</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x94</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"sete\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>E</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x95</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"setne\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>SETN</name><argument_list>(<argument><expr><name>E</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x96</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"setbe\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>BE</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x97</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"setnbe\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>SETN</name><argument_list>(<argument><expr><name>BE</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x98</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"sets\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x99</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"setns\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>SETN</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x9a</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"setp\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x9b</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"setnp\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>SETN</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x9c</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"setl\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x9d</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"setnl\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>SETN</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x9e</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"setle\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>SET</name><argument_list>(<argument><expr><name>LE</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x9f</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"setnle\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>SETN</name><argument_list>(<argument><expr><name>LE</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

                <case>case <expr><literal type="number">0xa2</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"cpuid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>CPUID</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>

                <case>case <expr><literal type="number">0xa3</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"bt reg, modrm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>BT</name><argument_list>(<argument><expr><name>modrm_reg</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

                <case>case <expr><literal type="number">0xa4</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"shld imm8, reg, modrm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><name>READIMM8</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>SHLD</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><name>modrm_reg</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xa5</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"shld cl, reg, modrm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>SHLD</name><argument_list>(<argument><expr><name>reg_c</name></expr></argument>, <argument><expr><name>modrm_reg</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

                <case>case <expr><literal type="number">0xab</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"bts reg, modrm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>BTS</name><argument_list>(<argument><expr><name>modrm_reg</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

                <case>case <expr><literal type="number">0xac</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"shrd imm8, reg, modrm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><name>READIMM8</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>SHRD</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><name>modrm_reg</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xad</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"shrd cl, reg, modrm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>SHRD</name><argument_list>(<argument><expr><name>reg_c</name></expr></argument>, <argument><expr><name>modrm_reg</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

                <case>case <expr><literal type="number">0xae</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"fence"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <break>break;</break>

                <case>case <expr><literal type="number">0xaf</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"imul modrm, reg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>IMUL2</name><argument_list>(<argument><expr><name>modrm_val</name></expr></argument>, <argument><expr><name>modrm_reg</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

                <case>case <expr><literal type="number">0xb0</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"cmpxchg reg8, modrm8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM_MEM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>CMPXCHG</name><argument_list>(<argument><expr><name>modrm_reg</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xb1</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"cmpxchg reg, modrm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM_MEM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>CMPXCHG</name><argument_list>(<argument><expr><name>modrm_reg</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

                <case>case <expr><literal type="number">0xb3</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"btr reg, modrm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>BTR</name><argument_list>(<argument><expr><name>modrm_reg</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

                <case>case <expr><literal type="number">0xb6</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"movz modrm8, reg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>MOVZX</name><argument_list>(<argument><expr><name>modrm_val</name></expr></argument>, <argument><expr><name>modrm_reg</name></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xb7</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"movz modrm16, reg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>MOVZX</name><argument_list>(<argument><expr><name>modrm_val</name></expr></argument>, <argument><expr><name>modrm_reg</name></expr></argument>,<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRP8</name><parameter_list>(<parameter><type><name>bit</name></type></parameter>, <parameter><type><name>val</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>switch (modrm.opcode) { \
        case 4: TRACEI("bt"); BT(bit, val,z); break; \
        case 5: TRACEI("bts"); BTS(bit, val,z); break; \
        case 6: TRACEI("btr"); BTR(bit, val,z); break; \
        case 7: TRACEI("btc"); BTC(bit, val,z); break; \
        default: UNDEFINED; \
    }</cpp:value></cpp:define>

                <case>case <expr><literal type="number">0xba</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"grp8 imm8, modrm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><name>READIMM8</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>GRP8</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GRP8</name></cpp:undef>

                <case>case <expr><literal type="number">0xbb</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"btc reg, modrm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>BTC</name><argument_list>(<argument><expr><name>modrm_reg</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xbc</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"bsf modrm, reg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>BSF</name><argument_list>(<argument><expr><name>modrm_val</name></expr></argument>, <argument><expr><name>modrm_reg</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xbd</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"bsr modrm, reg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>BSR</name><argument_list>(<argument><expr><name>modrm_val</name></expr></argument>, <argument><expr><name>modrm_reg</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

                <case>case <expr><literal type="number">0xbe</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"movs modrm8, reg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>MOVSX</name><argument_list>(<argument><expr><name>modrm_val</name></expr></argument>, <argument><expr><name>modrm_reg</name></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xbf</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"movs modrm16, reg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>MOVSX</name><argument_list>(<argument><expr><name>modrm_val</name></expr></argument>, <argument><expr><name>modrm_reg</name></expr></argument>,<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

                <case>case <expr><literal type="number">0xc0</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"xadd reg8, modrm8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>XADD</name><argument_list>(<argument><expr><name>modrm_reg</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xc1</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"xadd reg, modrm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>XADD</name><argument_list>(<argument><expr><name>modrm_reg</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xc2</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"cmppd xmm:modrm, xmm, imm8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><name>READIMM8</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP_IMM</name><argument_list>(<argument><expr><name>fcmp_p</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

                <case>case <expr><literal type="number">0xc7</literal></expr>:</case> <expr_stmt><expr><name>READMODRM_MEM</name></expr>;</expr_stmt> <switch>switch <condition>(<expr><name><name>modrm</name><operator>.</operator><name>opcode</name></name></expr>)</condition> <block>{<block_content>
                               <case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"cmpxchg8b modrm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                       <expr_stmt><expr><call><name>CMPXCHG8B</name><argument_list>(<argument><expr><name>modrm_val</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                               <default>default:</default> <expr_stmt><expr><name>UNDEFINED</name></expr>;</expr_stmt>
                           </block_content>}</block></switch><empty_stmt>;</empty_stmt>
                           <break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OP_SIZE</name> <operator>!=</operator> <literal type="number">16</literal></expr></cpp:if>
                <case>case <expr><literal type="number">0xc8</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"bswap eax"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><call><name>BSWAP</name><argument_list>(<argument><expr><name>reg_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xc9</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"bswap ecx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><call><name>BSWAP</name><argument_list>(<argument><expr><name>reg_c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xca</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"bswap edx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><call><name>BSWAP</name><argument_list>(<argument><expr><name>reg_d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xcb</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"bswap ebx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><call><name>BSWAP</name><argument_list>(<argument><expr><name>reg_b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xcc</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"bswap esp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><call><name>BSWAP</name><argument_list>(<argument><expr><name>reg_sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xcd</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"bswap ebp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><call><name>BSWAP</name><argument_list>(<argument><expr><name>reg_bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xce</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"bswap esi"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><call><name>BSWAP</name><argument_list>(<argument><expr><name>reg_si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xcf</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"bswap edi"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><call><name>BSWAP</name><argument_list>(<argument><expr><name>reg_di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OP_SIZE</name> <operator>==</operator> <literal type="number">16</literal></expr></cpp:if>
                <case>case <expr><literal type="number">0x10</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"movupd xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>VMOV</name><argument_list>(<argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x11</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"movupd xmm, xmm:modrm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>VMOV</name><argument_list>(<argument><expr><name>xmm_modrm_reg</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x12</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"movlpd xmm, modrm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>movl_p</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x13</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"movlpd modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>movl_pm</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x14</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"unpcklpd xmm, xmm:modrm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>unpackl_pd</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x15</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"unpckhpd xmm, xmm:modrm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>unpackh_pd</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x16</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"movhpd xmm, modrm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>movh_p</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x17</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"movhpd modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>movh_pm</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x2e</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"ucomisd xmm, xmm:modrm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>single_ucomi</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x2f</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"comisd xmm, xmm:modrm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>single_ucomi</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

                <case>case <expr><literal type="number">0x50</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"movmskpd xmm:modrm, reg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>fmovmask_d</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

                <case>case <expr><literal type="number">0x54</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"andpd xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>and</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x55</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"andnpd xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>andn</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x56</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"orpd xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>or</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x57</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"xorpd xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>xor</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x58</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"addpd xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>add_p</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x59</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"mulpd xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>mul_p</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x5c</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"subpd xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>sub_p</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x60</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"punpcklbw xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>unpackl_bw</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x61</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"punpcklwd xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>unpackl_w</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x62</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"punpckldq xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>unpackl_dq</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x63</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"packsswb xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>packss_w</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x64</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"pcmpgtb xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>compares_gtb</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x65</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"pcmpgtw xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>compares_gtw</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x66</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"pcmpgtd xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>compares_gtd</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x67</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"packuswb xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>packsu_w</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x68</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"punpckhbw xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>unpackh_bw</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x69</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"punpckhwd xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>unpackh_w</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x6a</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"punpckhdq xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>unpackh_d</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x6b</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"packssdw xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>packss_d</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x6c</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"punpcklqdq xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>unpackl_qdq</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x6d</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"punpckhqdq xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>unpackh_dq</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x6e</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"movd modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>VMOV</name><argument_list>(<argument><expr><name>modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

                <case>case <expr><literal type="number">0x6f</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"movdqa xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>VMOV</name><argument_list>(<argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

                <case>case <expr><literal type="number">0x70</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"pshufd xmm:modrm, xmm, imm8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><name>READIMM8</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP_IMM</name><argument_list>(<argument><expr><name>shuffle_d</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x71</literal></expr>:</case> <expr_stmt><expr><name>READMODRM_NOMEM</name></expr>;</expr_stmt>
                           <switch>switch <condition>(<expr><name><name>modrm</name><operator>.</operator><name>opcode</name></name></expr>)</condition> <block>{<block_content>
                                <case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"psrlw imm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        <expr_stmt><expr><name>READIMM8</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>imm_shiftr_w</name></expr></argument>, <argument><expr><name>imm</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                                <case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"psraw imm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        <expr_stmt><expr><name>READIMM8</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>imm_shiftrs_w</name></expr></argument>, <argument><expr><name>imm</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                                <case>case <expr><literal type="number">6</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"psllw imm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        <expr_stmt><expr><name>READIMM8</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>imm_shiftl_w</name></expr></argument>, <argument><expr><name>imm</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                                <default>default:</default> <expr_stmt><expr><name>UNDEFINED</name></expr>;</expr_stmt>
                            </block_content>}</block></switch>
                            <break>break;</break>
                <case>case <expr><literal type="number">0x72</literal></expr>:</case> <expr_stmt><expr><name>READMODRM_NOMEM</name></expr>;</expr_stmt>
                            <switch>switch <condition>(<expr><name><name>modrm</name><operator>.</operator><name>opcode</name></name></expr>)</condition> <block>{<block_content>
                                <case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"psrld imm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        <expr_stmt><expr><name>READIMM8</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>imm_shiftr_d</name></expr></argument>, <argument><expr><name>imm</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                                <case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"psrad imm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        <expr_stmt><expr><name>READIMM8</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>imm_shiftrs_d</name></expr></argument>, <argument><expr><name>imm</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                                <case>case <expr><literal type="number">6</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"pslld imm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        <expr_stmt><expr><name>READIMM8</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>imm_shiftl_d</name></expr></argument>, <argument><expr><name>imm</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                                <default>default:</default> <expr_stmt><expr><name>UNDEFINED</name></expr>;</expr_stmt>
                            </block_content>}</block></switch>
                            <break>break;</break>
                <case>case <expr><literal type="number">0x73</literal></expr>:</case> <expr_stmt><expr><name>READMODRM_NOMEM</name></expr>;</expr_stmt>
                           <switch>switch <condition>(<expr><name><name>modrm</name><operator>.</operator><name>opcode</name></name></expr>)</condition> <block>{<block_content>
                               <case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"psrlq imm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                       <expr_stmt><expr><name>READIMM8</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>imm_shiftr_q</name></expr></argument>, <argument><expr><name>imm</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                               <case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"psrldq imm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                       <expr_stmt><expr><name>READIMM8</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>imm_shiftr_dq</name></expr></argument>, <argument><expr><name>imm</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                               <case>case <expr><literal type="number">6</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"psllq imm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                       <expr_stmt><expr><name>READIMM8</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>imm_shiftl_q</name></expr></argument>, <argument><expr><name>imm</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                               <case>case <expr><literal type="number">7</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"pslldq imm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                       <expr_stmt><expr><name>READIMM8</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>imm_shiftl_dq</name></expr></argument>, <argument><expr><name>imm</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                               <default>default:</default> <expr_stmt><expr><name>UNDEFINED</name></expr>;</expr_stmt>
                           </block_content>}</block></switch>
                           <break>break;</break>

                <case>case <expr><literal type="number">0x74</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"pcmpeqb xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>compare_eqb</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x75</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"pcmpeqw xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>compare_eqw</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x76</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"pcmpeqd xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>compare_eqd</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

                <case>case <expr><literal type="number">0x7e</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"movd xmm, modrm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>VMOV</name><argument_list>(<argument><expr><name>xmm_modrm_reg</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x7f</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"movdqa xmm, xmm:modrm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>VMOV</name><argument_list>(<argument><expr><name>xmm_modrm_reg</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

                <case>case <expr><literal type="number">0xc5</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"pextrw xmm, modrm_val, imm8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM_NOMEM</name></expr>;</expr_stmt> <expr_stmt><expr><name>READIMM8</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP_IMM</name><argument_list>(<argument><expr><name>extract_w</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

                <case>case <expr><literal type="number">0xd3</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"psrlq xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>shiftr_q</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

                <case>case <expr><literal type="number">0xd4</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"paddq xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>add_q</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

                <case>case <expr><literal type="number">0xd5</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"pmullw xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>mull</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

                <case>case <expr><literal type="number">0xd6</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"movq xmm, xmm:modrm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>VMOV</name><argument_list>(<argument><expr><name>xmm_modrm_reg</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

                <case>case <expr><literal type="number">0xd7</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"pmovmskb xmm:modrm, reg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM_NOMEM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>movmask_b</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xd8</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"psubusb xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>subus_b</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xd9</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"psubusw xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>subus_w</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xda</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"pminub xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>min_ub</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xdb</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"pand xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>and</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xdc</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"paddusb xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>addus_b</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xdd</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"paddusw xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>addus_w</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xde</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"pmaxub xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>max_ub</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xdf</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"pandn xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>andn</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xe0</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"pavgb xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>avg_b</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xe3</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"pavgw xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>avg_w</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xe4</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"pmulhuw xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>muluu</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xe5</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"pmulhw xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>mulu</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xe6</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"cvttpd2dq xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>cvttpd2dq</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xe7</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"movntdq xmm, xmm:modrm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>VMOV</name><argument_list>(<argument><expr><name>xmm_modrm_reg</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xe8</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"psubsb xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>subss_b</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xe9</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"psubsw xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>subss_w</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xea</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"pminsw xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>mins_w</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xeb</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"por xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>or</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xec</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"paddsb xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>addss_b</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xed</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"paddsw xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>addss_w</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xee</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"pmaxsw xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>maxs_w</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xef</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"pxor xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>xor</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xf3</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"psllq xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>shiftl_q</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xf4</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"pmuludq xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>mulu_dq</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xf5</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"pmaddwd xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>madd_d</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xf6</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"psadbw xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>sumabs_w</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xfb</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"psubq xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>sub_q</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xf8</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"psubb xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>sub_b</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xf9</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"psubw xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>sub_w</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xfa</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"psubd xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>sub_d</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xfc</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"paddb xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>add_b</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xfd</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"paddw xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>add_w</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xfe</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"paddd xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>add_d</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                <case>case <expr><literal type="number">0x10</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"movups xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>VMOV</name><argument_list>(<argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x11</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"movups xmm, xmm:modrm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>VMOV</name><argument_list>(<argument><expr><name>xmm_modrm_reg</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x12</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"movlps xmm, modrm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>movl_p</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x13</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"movlps modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>movl_pm</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x14</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"unpcklps xmm, xmm:modrm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>unpackl_ps</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x15</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"unpckhps xmm, xmm:modrm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>unpackh_ps</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x16</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"movhps xmm, modrm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>movh_p</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x17</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"movhps modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>movh_pm</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x2e</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"ucomiss xmm, xmm:modrm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>single_ucomi</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x2f</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"comiss xmm, xmm:modrm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>single_ucomi</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

                <case>case <expr><literal type="number">0x54</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"andps xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>and</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x55</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"andnps xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>andn</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x56</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"orps xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>or</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x57</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"xorps xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>xor</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

                <case>case <expr><literal type="number">0x58</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"addps xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>add_p</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x59</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"mulps xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>mul_p</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x5c</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"subps xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>sub_p</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

                <case>case <expr><literal type="number">0x62</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"punpckldq mm:modrm, mm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>unpackl_dq</name></expr></argument>, <argument><expr><name>mm_modrm_val</name></expr></argument>, <argument><expr><name>mm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

                <case>case <expr><literal type="number">0x6e</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"movd modrm, mm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>VMOV</name><argument_list>(<argument><expr><name>modrm_val</name></expr></argument>, <argument><expr><name>mm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x6f</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"movq mm:modrm, mm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>VMOV</name><argument_list>(<argument><expr><name>mm_modrm_val</name></expr></argument>, <argument><expr><name>mm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

                <case>case <expr><literal type="number">0x73</literal></expr>:</case> <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt>
                           <switch>switch <condition>(<expr><name><name>modrm</name><operator>.</operator><name>opcode</name></name></expr>)</condition> <block>{<block_content>
                               <case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"psrlq imm, mm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                          <expr_stmt><expr><name>READIMM8</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>imm_shiftr_q</name></expr></argument>, <argument><expr><name>imm</name></expr></argument>, <argument><expr><name>mm_modrm_reg</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                               <case>case <expr><literal type="number">6</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"psllq imm, mm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                          <expr_stmt><expr><name>READIMM8</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>imm_shiftl_q</name></expr></argument>, <argument><expr><name>imm</name></expr></argument>, <argument><expr><name>mm_modrm_reg</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                               <default>default:</default> <expr_stmt><expr><name>UNDEFINED</name></expr>;</expr_stmt>
                           </block_content>}</block></switch>
                           <break>break;</break>

                <case>case <expr><literal type="number">0x7e</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"movd mm, modrm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>VMOV</name><argument_list>(<argument><expr><name>mm_modrm_reg</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x7f</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"movq mm, mm:modrm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM_MEM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>VMOV</name><argument_list>(<argument><expr><name>mm_modrm_reg</name></expr></argument>, <argument><expr><name>mm_modrm_val</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

                <case>case <expr><literal type="number">0xc6</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"shufps xmm:modrm, xmm, imm8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><name>READIMM8</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP_IMM</name><argument_list>(<argument><expr><name>shuffle_d</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

                <case>case <expr><literal type="number">0xd4</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"paddq mm:modrm, mm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>add_q</name></expr></argument>, <argument><expr><name>mm_modrm_val</name></expr></argument>, <argument><expr><name>mm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xdb</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"pand mm:modrm, mm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>and</name></expr></argument>, <argument><expr><name>mm_modrm_val</name></expr></argument>, <argument><expr><name>mm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

                <case>case <expr><literal type="number">0xd5</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"pmullw mm:modrm, mm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>mull</name></expr></argument>, <argument><expr><name>mm_modrm_val</name></expr></argument>, <argument><expr><name>mm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

                <case>case <expr><literal type="number">0xe5</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"pmulhw mm:modrm, mm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>mulu</name></expr></argument>, <argument><expr><name>mm_modrm_val</name></expr></argument>, <argument><expr><name>mm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xe7</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"movntq mm, mm:modrm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM_MEM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>VMOV</name><argument_list>(<argument><expr><name>mm_modrm_reg</name></expr></argument>, <argument><expr><name>mm_modrm_val</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xef</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"pxor mm:modrm, mm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>xor</name></expr></argument>, <argument><expr><name>mm_modrm_val</name></expr></argument>, <argument><expr><name>mm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

                <case>case <expr><literal type="number">0xf4</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"pmuludq mm:modrm, mm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>mulu_dq</name></expr></argument>, <argument><expr><name>mm_modrm_val</name></expr></argument>, <argument><expr><name>mm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

                <default>default:</default> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"undefined"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                         <expr_stmt><expr><name>UNDEFINED</name></expr>;</expr_stmt>
            </block_content>}</block></switch>
            <break>break;</break>

        <expr_stmt><expr><call><name>MAKE_OP</name><argument_list>(<argument><expr><literal type="number">0x10</literal></expr></argument>, <argument><expr><name>ADC</name></expr></argument>, <argument><expr><literal type="string">"adc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MAKE_OP</name><argument_list>(<argument><expr><literal type="number">0x18</literal></expr></argument>, <argument><expr><name>SBB</name></expr></argument>, <argument><expr><literal type="string">"sbb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MAKE_OP</name><argument_list>(<argument><expr><literal type="number">0x20</literal></expr></argument>, <argument><expr><name>AND</name></expr></argument>, <argument><expr><literal type="string">"and"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MAKE_OP</name><argument_list>(<argument><expr><literal type="number">0x28</literal></expr></argument>, <argument><expr><name>SUB</name></expr></argument>, <argument><expr><literal type="string">"sub"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <case>case <expr><literal type="number">0x2e</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"segment cs (ignoring)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <goto>goto <name>restart</name>;</goto>

        <expr_stmt><expr><call><name>MAKE_OP</name><argument_list>(<argument><expr><literal type="number">0x30</literal></expr></argument>, <argument><expr><name>XOR</name></expr></argument>, <argument><expr><literal type="string">"xor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MAKE_OP</name><argument_list>(<argument><expr><literal type="number">0x38</literal></expr></argument>, <argument><expr><name>CMP</name></expr></argument>, <argument><expr><literal type="string">"cmp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <case>case <expr><literal type="number">0x3e</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"segment ds (useless)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <goto>goto <name>restart</name>;</goto>

        <case>case <expr><literal type="number">0x40</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"inc oax"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>INC</name><argument_list>(<argument><expr><name>reg_a</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x41</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"inc ocx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>INC</name><argument_list>(<argument><expr><name>reg_c</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x42</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"inc odx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>INC</name><argument_list>(<argument><expr><name>reg_d</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x43</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"inc obx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>INC</name><argument_list>(<argument><expr><name>reg_b</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x44</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"inc osp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>INC</name><argument_list>(<argument><expr><name>reg_sp</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x45</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"inc obp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>INC</name><argument_list>(<argument><expr><name>reg_bp</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x46</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"inc osi"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>INC</name><argument_list>(<argument><expr><name>reg_si</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x47</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"inc odi"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>INC</name><argument_list>(<argument><expr><name>reg_di</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x48</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"dec oax"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>DEC</name><argument_list>(<argument><expr><name>reg_a</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x49</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"dec ocx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>DEC</name><argument_list>(<argument><expr><name>reg_c</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x4a</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"dec odx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>DEC</name><argument_list>(<argument><expr><name>reg_d</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x4b</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"dec obx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>DEC</name><argument_list>(<argument><expr><name>reg_b</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x4c</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"dec osp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>DEC</name><argument_list>(<argument><expr><name>reg_sp</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x4d</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"dec obp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>DEC</name><argument_list>(<argument><expr><name>reg_bp</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x4e</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"dec osi"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>DEC</name><argument_list>(<argument><expr><name>reg_si</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x4f</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"dec odi"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>DEC</name><argument_list>(<argument><expr><name>reg_di</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

        <case>case <expr><literal type="number">0x50</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"push oax"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>PUSH</name><argument_list>(<argument><expr><name>reg_a</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x51</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"push ocx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>PUSH</name><argument_list>(<argument><expr><name>reg_c</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x52</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"push odx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>PUSH</name><argument_list>(<argument><expr><name>reg_d</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x53</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"push obx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>PUSH</name><argument_list>(<argument><expr><name>reg_b</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x54</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"push osp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>PUSH</name><argument_list>(<argument><expr><name>reg_sp</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x55</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"push obp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>PUSH</name><argument_list>(<argument><expr><name>reg_bp</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x56</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"push osi"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>PUSH</name><argument_list>(<argument><expr><name>reg_si</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x57</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"push odi"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>PUSH</name><argument_list>(<argument><expr><name>reg_di</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

        <case>case <expr><literal type="number">0x58</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"pop oax"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>POP</name><argument_list>(<argument><expr><name>reg_a</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x59</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"pop ocx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>POP</name><argument_list>(<argument><expr><name>reg_c</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x5a</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"pop odx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>POP</name><argument_list>(<argument><expr><name>reg_d</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x5b</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"pop obx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>POP</name><argument_list>(<argument><expr><name>reg_b</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x5c</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"pop osp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>POP</name><argument_list>(<argument><expr><name>reg_sp</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x5d</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"pop obp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>POP</name><argument_list>(<argument><expr><name>reg_bp</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x5e</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"pop osi"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>POP</name><argument_list>(<argument><expr><name>reg_si</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x5f</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"pop odi"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>POP</name><argument_list>(<argument><expr><name>reg_di</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

        <case>case <expr><literal type="number">0x65</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"segment gs\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>SEG_GS</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <goto>goto <name>restart</name>;</goto>

        <case>case <expr><literal type="number">0x60</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"pusha"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><call><name>PUSH</name><argument_list>(<argument><expr><name>reg_a</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>PUSH</name><argument_list>(<argument><expr><name>reg_c</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><call><name>PUSH</name><argument_list>(<argument><expr><name>reg_d</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>PUSH</name><argument_list>(<argument><expr><name>reg_b</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><call><name>PUSH</name><argument_list>(<argument><expr><name>reg_sp</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>PUSH</name><argument_list>(<argument><expr><name>reg_bp</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// TODO this is the wrong sp</comment>
                   <expr_stmt><expr><call><name>PUSH</name><argument_list>(<argument><expr><name>reg_si</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>PUSH</name><argument_list>(<argument><expr><name>reg_di</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>
        <case>case <expr><literal type="number">0x61</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"popa"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><call><name>POP</name><argument_list>(<argument><expr><name>reg_di</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>POP</name><argument_list>(<argument><expr><name>reg_si</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <comment type="line">// pop reg_sp into reg_b as an easy way to ignore it</comment>
                   <expr_stmt><expr><call><name>POP</name><argument_list>(<argument><expr><name>reg_bp</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>POP</name><argument_list>(<argument><expr><name>reg_b</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><call><name>POP</name><argument_list>(<argument><expr><name>reg_b</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>POP</name><argument_list>(<argument><expr><name>reg_d</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><call><name>POP</name><argument_list>(<argument><expr><name>reg_c</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>POP</name><argument_list>(<argument><expr><name>reg_a</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <break>break;</break>

        <case>case <expr><literal type="number">0x66</literal></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OP_SIZE</name> <operator>==</operator> <literal type="number">32</literal></expr></cpp:if>
            <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"entering 16 bit mode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><call><name>glue</name><argument_list>(<argument><expr><name>DECODER_NAME</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>DECODER_PASS_ARGS</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
            <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"entering 32 bit mode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><call><name>glue</name><argument_list>(<argument><expr><name>DECODER_NAME</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>DECODER_PASS_ARGS</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <case>case <expr><literal type="number">0x67</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"address size prefix (ignored)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <goto>goto <name>restart</name>;</goto>

        <case>case <expr><literal type="number">0x68</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"push imm\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READIMM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>PUSH</name><argument_list>(<argument><expr><name>imm</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x69</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"imul imm\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><name>READIMM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>IMUL3</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>, <argument><expr><name>modrm_reg</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x6a</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"push imm8\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READIMM8</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>PUSH</name><argument_list>(<argument><expr><name>imm</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x6b</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"imul imm8\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><name>READIMM8</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>IMUL3</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>, <argument><expr><name>modrm_reg</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

        <case>case <expr><literal type="number">0x70</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"jo rel8\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READIMM8</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>J_REL</name><argument_list>(<argument><expr><name>O</name></expr></argument>, <argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x71</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"jno rel8\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READIMM8</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>JN_REL</name><argument_list>(<argument><expr><name>O</name></expr></argument>, <argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x72</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"jb rel8\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READIMM8</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>J_REL</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x73</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"jnb rel8\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READIMM8</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>JN_REL</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x74</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"je rel8\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READIMM8</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>J_REL</name><argument_list>(<argument><expr><name>E</name></expr></argument>, <argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x75</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"jne rel8\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READIMM8</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>JN_REL</name><argument_list>(<argument><expr><name>E</name></expr></argument>, <argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x76</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"jbe rel8\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READIMM8</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>J_REL</name><argument_list>(<argument><expr><name>BE</name></expr></argument>, <argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x77</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"ja rel8\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READIMM8</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>JN_REL</name><argument_list>(<argument><expr><name>BE</name></expr></argument>, <argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x78</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"js rel8\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READIMM8</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>J_REL</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x79</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"jns rel8\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READIMM8</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>JN_REL</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x7a</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"jp rel8\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READIMM8</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>J_REL</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x7b</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"jnp rel8\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READIMM8</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>JN_REL</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x7c</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"jl rel8\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READIMM8</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>J_REL</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x7d</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"jnl rel8\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READIMM8</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>JN_REL</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x7e</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"jle rel8\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READIMM8</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>J_REL</name><argument_list>(<argument><expr><name>LE</name></expr></argument>, <argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x7f</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"jnle rel8\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READIMM8</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>JN_REL</name><argument_list>(<argument><expr><name>LE</name></expr></argument>, <argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRP1</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>switch (modrm.opcode) { \
        case 0: TRACE("add"); \
                ADD(src, dst,z); break; \
        case 1: TRACE("or"); \
                OR(src, dst,z); break; \
        case 2: TRACE("adc"); \
                ADC(src, dst,z); break; \
        case 3: TRACE("sbb"); \
                SBB(src, dst,z); break; \
        case 4: TRACE("and"); \
                AND(src, dst,z); break; \
        case 5: TRACE("sub"); \
                SUB(src, dst,z); break; \
        case 6: TRACE("xor"); \
                XOR(src, dst,z); break; \
        case 7: TRACE("cmp"); \
                CMP(src, dst,z); break; \
        default: TRACE("undefined"); \
                 UNDEFINED; \
    }</cpp:value></cpp:define>

        <case>case <expr><literal type="number">0x80</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"grp1 imm8, modrm8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><name>READIMM8</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>GRP1</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x81</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"grp1 imm, modrm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><name>READIMM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>GRP1</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x83</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"grp1 imm8, modrm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><name>READIMM8</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>GRP1</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GRP1</name></cpp:undef>

        <case>case <expr><literal type="number">0x84</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"test reg8, modrm8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><name>modrm_reg</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x85</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"test reg, modrm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><name>modrm_reg</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

        <case>case <expr><literal type="number">0x86</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"xchg reg8, modrm8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>XCHG</name><argument_list>(<argument><expr><name>modrm_reg</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x87</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"xchg reg, modrm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>XCHG</name><argument_list>(<argument><expr><name>modrm_reg</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

        <case>case <expr><literal type="number">0x88</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"mov reg8, modrm8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>MOV</name><argument_list>(<argument><expr><name>modrm_reg</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x89</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"mov reg, modrm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>MOV</name><argument_list>(<argument><expr><name>modrm_reg</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x8a</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"mov modrm8, reg8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>MOV</name><argument_list>(<argument><expr><name>modrm_val</name></expr></argument>, <argument><expr><name>modrm_reg</name></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x8b</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"mov modrm, reg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>MOV</name><argument_list>(<argument><expr><name>modrm_val</name></expr></argument>, <argument><expr><name>modrm_reg</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

        <case>case <expr><literal type="number">0x8d</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"lea\t\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>READMODRM_MEM</name></expr>;</expr_stmt>
                   <expr_stmt><expr><call><name>MOV</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>modrm_reg</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

        <comment type="line">// only gs is supported, and it does nothing</comment>
        <comment type="line">// see comment in sys/tls.c</comment>
        <case>case <expr><literal type="number">0x8c</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"mov seg, modrm\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>modrm</name><operator>.</operator><name>reg</name></name> <operator>!=</operator> <name>reg_ebp</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>UNDEFINED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>MOV</name><argument_list>(<argument><expr><name>gs</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>,<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x8e</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"mov modrm, seg\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>modrm</name><operator>.</operator><name>reg</name></name> <operator>!=</operator> <name>reg_ebp</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>UNDEFINED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>MOV</name><argument_list>(<argument><expr><name>modrm_val</name></expr></argument>, <argument><expr><name>gs</name></expr></argument>,<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

        <case>case <expr><literal type="number">0x8f</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"pop modrm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>POP</name><argument_list>(<argument><expr><name>modrm_val</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

        <case>case <expr><literal type="number">0x90</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"nop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x91</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"xchg ocx, oax"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><call><name>XCHG</name><argument_list>(<argument><expr><name>reg_c</name></expr></argument>, <argument><expr><name>reg_a</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x92</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"xchg odx, oax"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><call><name>XCHG</name><argument_list>(<argument><expr><name>reg_d</name></expr></argument>, <argument><expr><name>reg_a</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x93</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"xchg obx, oax"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><call><name>XCHG</name><argument_list>(<argument><expr><name>reg_b</name></expr></argument>, <argument><expr><name>reg_a</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x94</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"xchg osp, oax"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><call><name>XCHG</name><argument_list>(<argument><expr><name>reg_sp</name></expr></argument>, <argument><expr><name>reg_a</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x95</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"xchg obp, oax"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><call><name>XCHG</name><argument_list>(<argument><expr><name>reg_bp</name></expr></argument>, <argument><expr><name>reg_a</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x96</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"xchg osi, oax"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><call><name>XCHG</name><argument_list>(<argument><expr><name>reg_si</name></expr></argument>, <argument><expr><name>reg_a</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x97</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"xchg odi, oax"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><call><name>XCHG</name><argument_list>(<argument><expr><name>reg_di</name></expr></argument>, <argument><expr><name>reg_a</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

        <case>case <expr><literal type="number">0x98</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"cvte"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>CVTE</name></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x99</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"cvt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>CVT</name></expr>;</expr_stmt> <break>break;</break>

        <case>case <expr><literal type="number">0x9b</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"fwait (ignored)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

        <case>case <expr><literal type="number">0x9c</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"pushf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>PUSHF</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x9d</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"popf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>POPF</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0x9e</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"sahf\t\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>SAHF</name></expr>;</expr_stmt> <break>break;</break>

        <case>case <expr><literal type="number">0xa0</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"mov mem, al\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READADDR</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>MOV</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>, <argument><expr><name>reg_a</name></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0xa1</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"mov mem, eax\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READADDR</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>MOV</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>, <argument><expr><name>reg_a</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0xa2</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"mov al, mem\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READADDR</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>MOV</name><argument_list>(<argument><expr><name>reg_a</name></expr></argument>, <argument><expr><name>mem_addr</name></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0xa3</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"mov oax, mem\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READADDR</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>MOV</name><argument_list>(<argument><expr><name>reg_a</name></expr></argument>, <argument><expr><name>mem_addr</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

        <case>case <expr><literal type="number">0xa4</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"movsb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>STR</name><argument_list>(<argument><expr><name>movs</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0xa5</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"movs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>STR</name><argument_list>(<argument><expr><name>movs</name></expr></argument>, <argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0xa6</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"cmpsb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>STR</name><argument_list>(<argument><expr><name>cmps</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0xa7</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"cmps"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>STR</name><argument_list>(<argument><expr><name>cmps</name></expr></argument>, <argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

        <case>case <expr><literal type="number">0xa8</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"test imm8, al"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READIMM8</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><name>reg_a</name></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0xa9</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"test imm, oax"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READIMM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><name>reg_a</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

        <case>case <expr><literal type="number">0xaa</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"stosb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>STR</name><argument_list>(<argument><expr><name>stos</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0xab</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"stos"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>STR</name><argument_list>(<argument><expr><name>stos</name></expr></argument>, <argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0xac</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"lodsb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>STR</name><argument_list>(<argument><expr><name>lods</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0xad</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"lods"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>STR</name><argument_list>(<argument><expr><name>lods</name></expr></argument>, <argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0xae</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"scasb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>STR</name><argument_list>(<argument><expr><name>scas</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0xaf</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"scas"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>STR</name><argument_list>(<argument><expr><name>scas</name></expr></argument>, <argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

        <case>case <expr><literal type="number">0xb0</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"mov imm, al\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READIMM8</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>MOV</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><name>reg_a</name></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0xb1</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"mov imm, cl\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READIMM8</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>MOV</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><name>reg_c</name></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0xb2</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"mov imm, dl\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READIMM8</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>MOV</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><name>reg_d</name></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0xb3</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"mov imm, bl\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READIMM8</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>MOV</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><name>reg_b</name></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0xb4</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"mov imm, ah\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READIMM8</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>MOV</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><name>reg_ah</name></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0xb5</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"mov imm, ch\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READIMM8</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>MOV</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><name>reg_ch</name></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0xb6</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"mov imm, dh\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READIMM8</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>MOV</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><name>reg_dh</name></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0xb7</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"mov imm, bh\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READIMM8</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>MOV</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><name>reg_bh</name></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

        <case>case <expr><literal type="number">0xb8</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"mov imm, oax\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READIMM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>MOV</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><name>reg_a</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0xb9</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"mov imm, ocx\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READIMM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>MOV</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><name>reg_c</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0xba</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"mov imm, odx\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READIMM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>MOV</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><name>reg_d</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0xbb</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"mov imm, obx\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READIMM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>MOV</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><name>reg_b</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0xbc</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"mov imm, osp\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READIMM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>MOV</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><name>reg_sp</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0xbd</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"mov imm, obp\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READIMM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>MOV</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><name>reg_bp</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0xbe</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"mov imm, osi\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READIMM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>MOV</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><name>reg_si</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0xbf</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"mov imm, odi\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READIMM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>MOV</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><name>reg_di</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRP2</name><parameter_list>(<parameter><type><name>count</name></type></parameter>, <parameter><type><name>val</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>switch (modrm.opcode) { \
        case 0: TRACE("rol"); ROL(count, val,z); break; \
        case 1: TRACE("ror"); ROR(count, val,z); break; \
        case 2: TRACE("rcl"); RCL(count, val,z); break; \
        case 3: TRACE("rcr"); RCR(count, val,z); break; \
        case 4: \
        case 6: TRACE("shl"); SHL(count, val,z); break; \
        case 5: TRACE("shr"); SHR(count, val,z); break; \
        case 7: TRACE("sar"); SAR(count, val,z); break; \
    }</cpp:value></cpp:define>

        <case>case <expr><literal type="number">0xc0</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"grp2 imm8, modrm8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><name>READIMM8</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>GRP2</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0xc1</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"grp2 imm8, modrm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><name>READIMM8</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>GRP2</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

        <case>case <expr><literal type="number">0xc2</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"ret near imm\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READIMM16</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>RET_NEAR</name><argument_list>(<argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0xc3</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"ret near"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><call><name>RET_NEAR</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

        <case>case <expr><literal type="number">0xc9</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"leave"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><call><name>MOV</name><argument_list>(<argument><expr><name>reg_bp</name></expr></argument>, <argument><expr><name>reg_sp</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>POP</name><argument_list>(<argument><expr><name>reg_bp</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

        <case>case <expr><literal type="number">0xcc</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"int3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><call><name>INT</name><argument_list>(<argument><expr><name>INT_BREAKPOINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0xcd</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"int imm8\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READIMM8</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>INT</name><argument_list>(<argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

        <case>case <expr><literal type="number">0xc6</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"mov imm8, modrm8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><name>READIMM8</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>MOV</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0xc7</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"mov imm, modrm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><name>READIMM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>MOV</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

        <case>case <expr><literal type="number">0xd0</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"grp2 1, modrm8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>GRP2</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0xd1</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"grp2 1, modrm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>GRP2</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0xd2</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"grp2 cl, modrm8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>GRP2</name><argument_list>(<argument><expr><name>reg_c</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0xd3</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"grp2 cl, modrm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>GRP2</name><argument_list>(<argument><expr><name>reg_c</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GRP2</name></cpp:undef>

        <case>case <expr><literal type="number">0xd8</literal></expr>:</case> <case>case <expr><literal type="number">0xd9</literal></expr>:</case> <case>case <expr><literal type="number">0xda</literal></expr>:</case> <case>case <expr><literal type="number">0xdb</literal></expr>:</case> <case>case <expr><literal type="number">0xdc</literal></expr>:</case> <case>case <expr><literal type="number">0xdd</literal></expr>:</case> <case>case <expr><literal type="number">0xde</literal></expr>:</case> <case>case <expr><literal type="number">0xdf</literal></expr>:</case>
            <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"fpu\t\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>modrm</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>modrm_reg</name></expr>)</condition> <block>{<block_content>
                <switch>switch <condition>(<expr><name>insn</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal> <operator>|</operator> <name><name>modrm</name><operator>.</operator><name>opcode</name></name></expr>)</condition> <block>{<block_content>
                    <case>case <expr><literal type="number">0xd80</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fadd mem32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FADDM</name><argument_list>(<argument><expr><name>mem_addr_real</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xd81</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fmul mem32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FMULM</name><argument_list>(<argument><expr><name>mem_addr_real</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xd82</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fcom mem32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FCOMM</name><argument_list>(<argument><expr><name>mem_addr_real</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xd83</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fcomp mem32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FCOMM</name><argument_list>(<argument><expr><name>mem_addr_real</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>FPOP</name></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xd84</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fsub mem32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FSUBM</name><argument_list>(<argument><expr><name>mem_addr_real</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xd85</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fsubr mem32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FSUBRM</name><argument_list>(<argument><expr><name>mem_addr_real</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xd86</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fdiv mem32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FDIVM</name><argument_list>(<argument><expr><name>mem_addr_real</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xd87</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fdivr mem32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FDIVRM</name><argument_list>(<argument><expr><name>mem_addr_real</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xd90</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fld mem32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FLDM</name><argument_list>(<argument><expr><name>mem_addr_real</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xd92</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fst mem32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FSTM</name><argument_list>(<argument><expr><name>mem_addr_real</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xd93</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fstp mem32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FSTM</name><argument_list>(<argument><expr><name>mem_addr_real</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>FPOP</name></expr>;</expr_stmt> <break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OP_SIZE</name> <operator>==</operator> <literal type="number">32</literal></expr></cpp:if>
                    <case>case <expr><literal type="number">0xd94</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fldenv mem32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FLDENV</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                    <case>case <expr><literal type="number">0xd95</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fldcw mem16"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FLDCW</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OP_SIZE</name> <operator>==</operator> <literal type="number">32</literal></expr></cpp:if>
                    <case>case <expr><literal type="number">0xd96</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fnstenv mem32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FSTENV</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                    <case>case <expr><literal type="number">0xd97</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fnstcw mem16"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FSTCW</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xda0</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fiadd mem32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FIADD</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xda1</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fimul mem32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FIMUL</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xda2</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"ficom mem32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FICOM</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xda3</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"ficomp mem32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FICOM</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>FPOP</name></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xda4</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fisub mem32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FISUB</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xda5</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fisubr mem32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FISUBR</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xda6</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fidiv mem32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FIDIV</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xda7</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fidivr mem32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FIDIVR</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xdb0</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fild mem32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FILD</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xdb2</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fist mem32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FIST</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xdb3</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fistp mem32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FIST</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>FPOP</name></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xdb5</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fld mem80"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FLDM</name><argument_list>(<argument><expr><name>mem_addr_real</name></expr></argument>,<argument><expr><literal type="number">80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xdb7</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fstp mem80"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FSTM</name><argument_list>(<argument><expr><name>mem_addr_real</name></expr></argument>,<argument><expr><literal type="number">80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>FPOP</name></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xdc0</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fadd mem64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FADDM</name><argument_list>(<argument><expr><name>mem_addr_real</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xdc1</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fmul mem64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FMULM</name><argument_list>(<argument><expr><name>mem_addr_real</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xdc2</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fcom mem64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FCOMM</name><argument_list>(<argument><expr><name>mem_addr_real</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xdc3</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fcomp mem64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FCOMM</name><argument_list>(<argument><expr><name>mem_addr_real</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>FPOP</name></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xdc4</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fsub mem64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FSUBM</name><argument_list>(<argument><expr><name>mem_addr_real</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xdc5</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fsubr mem64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FSUBRM</name><argument_list>(<argument><expr><name>mem_addr_real</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xdc6</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fdiv mem64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FDIVM</name><argument_list>(<argument><expr><name>mem_addr_real</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xdc7</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fdivr mem64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FDIVRM</name><argument_list>(<argument><expr><name>mem_addr_real</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xdd0</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fld mem64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FLDM</name><argument_list>(<argument><expr><name>mem_addr_real</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xdd2</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fst mem64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FSTM</name><argument_list>(<argument><expr><name>mem_addr_real</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xdd3</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fstp mem64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FSTM</name><argument_list>(<argument><expr><name>mem_addr_real</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>FPOP</name></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xdd4</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"frstor mem32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FRESTORE</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xdd6</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fnsave mem32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FSAVE</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xde0</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fiadd mem16"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FIADD</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>,<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xde1</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fimul mem16"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FIMUL</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>,<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xde2</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"ficom mem16"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FICOM</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>,<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xde3</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"ficomp mem16"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FICOM</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>,<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>FPOP</name></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xde4</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fisub mem16"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FISUB</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>,<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xde5</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fisubr mem16"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FISUBR</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>,<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xde6</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fidiv mem16"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FIDIV</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>,<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xde7</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fidivr mem16"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FIDIVR</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>,<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xdf0</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fild mem16"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FILD</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>,<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xdf2</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fist mem16"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FIST</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>,<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xdf3</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fistp mem16"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FIST</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>,<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>FPOP</name></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xdf5</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fild mem64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FILD</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xdf7</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fistp mem64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FIST</name><argument_list>(<argument><expr><name>mem_addr</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>FPOP</name></expr>;</expr_stmt> <break>break;</break>
                    <default>default:</default> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"undefined"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>UNDEFINED</name></expr>;</expr_stmt>
                </block_content>}</block></switch>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <switch>switch <condition>(<expr><name>insn</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal> <operator>|</operator> <name><name>modrm</name><operator>.</operator><name>opcode</name></name></expr>)</condition> <block>{<block_content>
                    <case>case <expr><literal type="number">0xd80</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fadd st(i), st"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FADD</name><argument_list>(<argument><expr><name>st_i</name></expr></argument>, <argument><expr><name>st_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xd81</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fmul st(i), st"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FMUL</name><argument_list>(<argument><expr><name>st_i</name></expr></argument>, <argument><expr><name>st_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xd82</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fcom st"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FCOM</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xd83</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fcomp st"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FCOM</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>FPOP</name></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xd84</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fsub st(i), st"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FSUB</name><argument_list>(<argument><expr><name>st_i</name></expr></argument>, <argument><expr><name>st_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xd85</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fsubr st(i), st"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FSUBR</name><argument_list>(<argument><expr><name>st_i</name></expr></argument>, <argument><expr><name>st_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xd86</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fdiv st(i), st"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FDIV</name><argument_list>(<argument><expr><name>st_i</name></expr></argument>, <argument><expr><name>st_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xd87</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fdivr st(i), st"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FDIVR</name><argument_list>(<argument><expr><name>st_i</name></expr></argument>, <argument><expr><name>st_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xd90</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fld st(i)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FLD</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xd91</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fxch st"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FXCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xda0</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fcmovb st, st(i)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FCMOVB</name><argument_list>(<argument><expr><name>st_i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xda1</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fcmove st, st(i)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FCMOVE</name><argument_list>(<argument><expr><name>st_i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xda2</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fcmovbe st, st(i)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FCMOVBE</name><argument_list>(<argument><expr><name>st_i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xda3</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fcmovu st, st(i)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FCMOVU</name><argument_list>(<argument><expr><name>st_i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xdb0</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fcmovnb st, st(i)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FCMOVNB</name><argument_list>(<argument><expr><name>st_i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xdb1</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fcmovne st, st(i)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FCMOVNE</name><argument_list>(<argument><expr><name>st_i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xdb2</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fcmovnbe st, st(i)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FCMOVNBE</name><argument_list>(<argument><expr><name>st_i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xdb3</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fcmovnu st, st(i)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FCMOVNU</name><argument_list>(<argument><expr><name>st_i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xdb5</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fucomi st"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FUCOMI</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xdb6</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fcomi st"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FCOMI</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xdc0</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fadd st, st(i)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FADD</name><argument_list>(<argument><expr><name>st_0</name></expr></argument>, <argument><expr><name>st_i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xdc1</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fmul st, st(i)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FMUL</name><argument_list>(<argument><expr><name>st_0</name></expr></argument>, <argument><expr><name>st_i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xdc4</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fsubr st, st(i)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FSUBR</name><argument_list>(<argument><expr><name>st_0</name></expr></argument>, <argument><expr><name>st_i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xdc5</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fsub st, st(i)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FSUB</name><argument_list>(<argument><expr><name>st_0</name></expr></argument>, <argument><expr><name>st_i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xdc6</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fdivr st, st(i)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FDIVR</name><argument_list>(<argument><expr><name>st_0</name></expr></argument>, <argument><expr><name>st_i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xdc7</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fdiv st, st(i)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FDIV</name><argument_list>(<argument><expr><name>st_0</name></expr></argument>, <argument><expr><name>st_i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xdd0</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"ffree st(i) (lol)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xdd2</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fst st"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FST</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xdd3</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fstp st"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FST</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>FPOP</name></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xdd4</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fucom st"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FUCOM</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xdd5</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fucomp st"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FUCOM</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>FPOP</name></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xda5</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fucompp st"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FUCOM</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>FPOP</name></expr>;</expr_stmt> <expr_stmt><expr><name>FPOP</name></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xde0</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"faddp st, st(i)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FADD</name><argument_list>(<argument><expr><name>st_0</name></expr></argument>, <argument><expr><name>st_i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>FPOP</name></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xde1</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fmulp st, st(i)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FMUL</name><argument_list>(<argument><expr><name>st_0</name></expr></argument>, <argument><expr><name>st_i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>FPOP</name></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xde4</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fsubrp st, st(i)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FSUBR</name><argument_list>(<argument><expr><name>st_0</name></expr></argument>, <argument><expr><name>st_i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>FPOP</name></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xde5</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fsubp st, st(i)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FSUB</name><argument_list>(<argument><expr><name>st_0</name></expr></argument>, <argument><expr><name>st_i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>FPOP</name></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xde6</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fdivrp st, st(i)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FDIVR</name><argument_list>(<argument><expr><name>st_0</name></expr></argument>, <argument><expr><name>st_i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>FPOP</name></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xde7</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fdivp st, st(i)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FDIV</name><argument_list>(<argument><expr><name>st_0</name></expr></argument>, <argument><expr><name>st_i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>FPOP</name></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xdf0</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"ffreep st(i) (omegalul)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>FPOP</name></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xdf5</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fucomip st"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FUCOMI</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>FPOP</name></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xdf6</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fcomip st"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FCOMI</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>FPOP</name></expr>;</expr_stmt> <break>break;</break>
                    <default>default:</default> <switch>switch <condition>(<expr><name>insn</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <name><name>modrm</name><operator>.</operator><name>opcode</name></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal> <operator>|</operator> <name><name>modrm</name><operator>.</operator><name>rm_opcode</name></name></expr>)</condition> <block>{<block_content>
                    <case>case <expr><literal type="number">0xd940</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fchs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FCHS</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xd941</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fabs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FABS</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xd944</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"ftst"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FTST</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xd945</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fxam"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FXAM</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xd950</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fld1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FLDC</name><argument_list>(<argument><expr><name>one</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xd951</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fldl2t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FLDC</name><argument_list>(<argument><expr><name>log2t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xd952</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fldl2e"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FLDC</name><argument_list>(<argument><expr><name>log2e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xd953</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fldpi"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FLDC</name><argument_list>(<argument><expr><name>pi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xd954</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fldlg2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FLDC</name><argument_list>(<argument><expr><name>log2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xd955</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fldln2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FLDC</name><argument_list>(<argument><expr><name>ln2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xd956</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fldz"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FLDC</name><argument_list>(<argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xd960</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"f2xm1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>F2XM1</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xd961</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fyl2x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FYL2X</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xd963</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fpatan"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FPATAN</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xd964</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fxtract"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FXTRACT</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xd967</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fincstp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FINCSTP</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xd970</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fprem"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FPREM</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xd972</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fsqrt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FSQRT</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xd974</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"frndint"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FRNDINT</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xd975</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fscale"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FSCALE</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xd976</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fsin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FSIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xd977</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fcos"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FCOS</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xdb42</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fnclex"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FCLEX</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xde31</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fcompp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FCOM</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>FPOP</name></expr>;</expr_stmt> <expr_stmt><expr><name>FPOP</name></expr>;</expr_stmt> <break>break;</break>
                    <case>case <expr><literal type="number">0xdf40</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"fnstsw ax"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>FSTSW</name><argument_list>(<argument><expr><name>reg_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                    <default>default:</default> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"undefined"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>UNDEFINED</name></expr>;</expr_stmt>
                </block_content>}</block></switch></block_content>}</block></switch>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>

        <case>case <expr><literal type="number">0xe3</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"jcxz rel8\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READIMM8</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>JCXZ_REL</name><argument_list>(<argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

        <case>case <expr><literal type="number">0xe8</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"call near\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READIMM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>CALL_REL</name><argument_list>(<argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

        <case>case <expr><literal type="number">0xe9</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"jmp rel\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READIMM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>JMP_REL</name><argument_list>(<argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0xeb</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"jmp rel8\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READIMM8</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>JMP_REL</name><argument_list>(<argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

        <comment type="line">// lock</comment>
        <case>case <expr><literal type="number">0xf0</literal></expr>:</case>
            <label><name>lockrestart</name>:</label>
            <expr_stmt><expr><name>READINSN</name></expr>;</expr_stmt>
            <switch>switch <condition>(<expr><name>insn</name></expr>)</condition> <block>{<block_content>
                <case>case <expr><literal type="number">0x65</literal></expr>:</case> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"segment gs\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>SEG_GS</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <goto>goto <name>lockrestart</name>;</goto>

                <case>case <expr><literal type="number">0x66</literal></expr>:</case>
                    <comment type="line">// I didn't think this through</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OP_SIZE</name> <operator>==</operator> <literal type="number">32</literal></expr></cpp:if>
                    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"locked 16-bit mode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>RESTORE_IP</name></expr>;</expr_stmt>
                    <return>return <expr><call><call><name>glue</name><argument_list>(<argument><expr><name>DECODER_NAME</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>DECODER_PASS_ARGS</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                    <goto>goto <name>lockrestart</name>;</goto>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_OP_ATOMIC</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>OP</name></type></parameter>, <parameter><type><name>op</name></type></parameter>)</parameter_list></cpp:macro> \
        <cpp:value>case x+0x0: TRACEI("lock " op " reg8, modrm8"); \
                   READMODRM_MEM; ATOMIC_##OP(modrm_reg, modrm_val,8); break; \
        case x+0x1: TRACEI("lock " op " reg, modrm"); \
                   READMODRM_MEM; ATOMIC_##OP(modrm_reg, modrm_val,oz); break; \

                MAKE_OP_ATOMIC(0x00, ADD, "add");</cpp:value></cpp:define>
                <expr_stmt><expr><call><name>MAKE_OP_ATOMIC</name><argument_list>(<argument><expr><literal type="number">0x08</literal></expr></argument>, <argument><expr><name>OR</name></expr></argument>, <argument><expr><literal type="string">"or"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>MAKE_OP_ATOMIC</name><argument_list>(<argument><expr><literal type="number">0x10</literal></expr></argument>, <argument><expr><name>ADC</name></expr></argument>, <argument><expr><literal type="string">"adc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>MAKE_OP_ATOMIC</name><argument_list>(<argument><expr><literal type="number">0x18</literal></expr></argument>, <argument><expr><name>SBB</name></expr></argument>, <argument><expr><literal type="string">"sbb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>MAKE_OP_ATOMIC</name><argument_list>(<argument><expr><literal type="number">0x20</literal></expr></argument>, <argument><expr><name>AND</name></expr></argument>, <argument><expr><literal type="string">"and"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>MAKE_OP_ATOMIC</name><argument_list>(<argument><expr><literal type="number">0x28</literal></expr></argument>, <argument><expr><name>SUB</name></expr></argument>, <argument><expr><literal type="string">"sub"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>MAKE_OP_ATOMIC</name><argument_list>(<argument><expr><literal type="number">0x30</literal></expr></argument>, <argument><expr><name>XOR</name></expr></argument>, <argument><expr><literal type="string">"xor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MAKE_OP_ATOMIC</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRP1_ATOMIC</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>switch (modrm.opcode) { \
        case 0: TRACE("lock add"); ATOMIC_ADD(src, dst,z); break; \
        case 1: TRACE("lock or");  ATOMIC_OR(src, dst,z); break; \
        case 2: TRACE("lock adc"); ATOMIC_ADC(src, dst,z); break; \
        case 3: TRACE("lock sbb"); ATOMIC_SBB(src, dst,z); break; \
        case 4: TRACE("lock and"); ATOMIC_AND(src, dst,z); break; \
        case 5: TRACE("lock sub"); ATOMIC_SUB(src, dst,z); break; \
        case 6: TRACE("lock xor"); ATOMIC_XOR(src, dst,z); break; \
        default: TRACE("undefined"); UNDEFINED; \
    }</cpp:value></cpp:define>

                <case>case <expr><literal type="number">0x80</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"lock grp1 imm8, modrm8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM_MEM</name></expr>;</expr_stmt> <expr_stmt><expr><name>READIMM8</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>GRP1_ATOMIC</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x81</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"lock grp1 imm, modrm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM_MEM</name></expr>;</expr_stmt> <expr_stmt><expr><name>READIMM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>GRP1_ATOMIC</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0x83</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"lock grp1 imm8, modrm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM_MEM</name></expr>;</expr_stmt> <expr_stmt><expr><name>READIMM8</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>GRP1_ATOMIC</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GRP1_ATOMIC</name></cpp:undef>

                <case>case <expr><literal type="number">0x0f</literal></expr>:</case>
                    <expr_stmt><expr><name>READINSN</name></expr>;</expr_stmt>
                    <switch>switch <condition>(<expr><name>insn</name></expr>)</condition> <block>{<block_content>
                        <case>case <expr><literal type="number">0xab</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"lock bts reg, modrm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                   <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>ATOMIC_BTS</name><argument_list>(<argument><expr><name>modrm_reg</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                        <case>case <expr><literal type="number">0xb3</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"lock btr reg, modrm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                   <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>ATOMIC_BTR</name><argument_list>(<argument><expr><name>modrm_reg</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                        <case>case <expr><literal type="number">0xbb</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"lock btc reg, modrm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                   <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>ATOMIC_BTC</name><argument_list>(<argument><expr><name>modrm_reg</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRP8_ATOMIC</name><parameter_list>(<parameter><type><name>bit</name></type></parameter>, <parameter><type><name>val</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>switch (modrm.opcode) { \
        case 5: TRACEI("bts"); ATOMIC_BTS(bit, val,z); break; \
        case 6: TRACEI("btr"); ATOMIC_BTR(bit, val,z); break; \
        case 7: TRACEI("btc"); ATOMIC_BTC(bit, val,z); break; \
        default: UNDEFINED; \
    }</cpp:value></cpp:define>
                        <case>case <expr><literal type="number">0xba</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"lock grp8 imm8, modrm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                   <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><name>READIMM8</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>GRP8_ATOMIC</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GRP8_ATOMIC</name></cpp:undef>

                        <case>case <expr><literal type="number">0xb0</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"lock cmpxchg reg8, modrm8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                   <expr_stmt><expr><name>READMODRM_MEM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>ATOMIC_CMPXCHG</name><argument_list>(<argument><expr><name>modrm_reg</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                        <case>case <expr><literal type="number">0xb1</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"lock cmpxchg reg, modrm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                   <expr_stmt><expr><name>READMODRM_MEM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>ATOMIC_CMPXCHG</name><argument_list>(<argument><expr><name>modrm_reg</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

                        <case>case <expr><literal type="number">0xc0</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"lock xadd reg8, modrm8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                   <expr_stmt><expr><name>READMODRM_MEM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>ATOMIC_XADD</name><argument_list>(<argument><expr><name>modrm_reg</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                        <case>case <expr><literal type="number">0xc1</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"lock xadd reg, modrm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                   <expr_stmt><expr><name>READMODRM_MEM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>ATOMIC_XADD</name><argument_list>(<argument><expr><name>modrm_reg</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

                        <case>case <expr><literal type="number">0xc7</literal></expr>:</case> <expr_stmt><expr><name>READMODRM_MEM</name></expr>;</expr_stmt> <switch>switch <condition>(<expr><name><name>modrm</name><operator>.</operator><name>opcode</name></name></expr>)</condition> <block>{<block_content>
                                       <case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"lock cmpxchg8b modrm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                               <expr_stmt><expr><call><name>ATOMIC_CMPXCHG8B</name><argument_list>(<argument><expr><name>modrm_val</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                                       <default>default:</default> <expr_stmt><expr><name>UNDEFINED</name></expr>;</expr_stmt>
                                   </block_content>}</block></switch><empty_stmt>;</empty_stmt>
                                   <break>break;</break>
                        <default>default:</default> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"undefined"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>UNDEFINED</name></expr>;</expr_stmt>
                    </block_content>}</block></switch>
                    <break>break;</break>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRP5_ATOMIC</name><parameter_list>(<parameter><type><name>val</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>switch (modrm.opcode) { \
        case 0: TRACE("lock inc"); ATOMIC_INC(val,z); break; \
        case 1: TRACE("lock dec"); ATOMIC_DEC(val,z); break; \
        default: TRACE("undefined"); UNDEFINED; \
    }</cpp:value></cpp:define>

                <case>case <expr><literal type="number">0xfe</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"lock grp5 modrm8\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM_MEM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>GRP5_ATOMIC</name><argument_list>(<argument><expr><name>modrm_val</name></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xff</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"lock grp5 modrm\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                           <expr_stmt><expr><name>READMODRM_MEM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>GRP5_ATOMIC</name><argument_list>(<argument><expr><name>modrm_val</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

                <default>default:</default> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"undefined"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>UNDEFINED</name></expr>;</expr_stmt>
            </block_content>}</block></switch>
            <break>break;</break>

        <case>case <expr><literal type="number">0xf2</literal></expr>:</case>
            <expr_stmt><expr><name>READINSN</name></expr>;</expr_stmt>
            <switch>switch <condition>(<expr><name>insn</name></expr>)</condition> <block>{<block_content>
                <case>case <expr><literal type="number">0x0f</literal></expr>:</case>
                    <expr_stmt><expr><name>READINSN</name></expr>;</expr_stmt>
                    <switch>switch <condition>(<expr><name>insn</name></expr>)</condition> <block>{<block_content>
                        <case>case <expr><literal type="number">0x10</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"movsd xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                   <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>VMOV_MERGE_REG</name><argument_list>(<argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                        <case>case <expr><literal type="number">0x11</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"movsd xmm, xmm:modrm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                   <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>VMOV_MERGE_REG</name><argument_list>(<argument><expr><name>xmm_modrm_reg</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

                        <case>case <expr><literal type="number">0x2a</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"cvtsi2sd modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                   <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>cvtsi2sd</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                        <case>case <expr><literal type="number">0x2c</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"cvttsd2si reg, xmm:modrm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                   <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>cvttsd2si</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>modrm_reg</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                        <case>case <expr><literal type="number">0x5a</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"cvtsd2ss xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                   <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>cvtsd2ss</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

                        <case>case <expr><literal type="number">0x51</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"sqrtsd xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                   <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>single_fsqrt</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                        <case>case <expr><literal type="number">0x58</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"addsd xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                   <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>single_fadd</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                        <case>case <expr><literal type="number">0x59</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"mulsd xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                   <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>single_fmul</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                        <case>case <expr><literal type="number">0x5c</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"subsd xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                   <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>single_fsub</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                        <case>case <expr><literal type="number">0x5d</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"minsd xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                   <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>single_fmin</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                        <case>case <expr><literal type="number">0x5e</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"divsd xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                   <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>single_fdiv</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                        <case>case <expr><literal type="number">0x5f</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"maxsd xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                   <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>single_fmax</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

                        <case>case <expr><literal type="number">0x70</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"pshuflw xmm:modrm, xmm, imm8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                   <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><name>READIMM8</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP_IMM</name><argument_list>(<argument><expr><name>shuffle_lw</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

                        <case>case <expr><literal type="number">0xc2</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"cmpsd xmm:modrm, xmm, imm8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                   <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><name>READIMM8</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP_IMM</name><argument_list>(<argument><expr><name>single_fcmp</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

                        <case>case <expr><literal type="number">0x18</literal> <operator>...</operator> <literal type="number">0x1f</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"rep nop modrm\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <break>break;</break>
                        <default>default:</default> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"undefined"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>UNDEFINED</name></expr>;</expr_stmt>
                    </block_content>}</block></switch>
                    <break>break;</break>

                <case>case <expr><literal type="number">0xa6</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"repnz cmpsb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>REPNZ</name><argument_list>(<argument><expr><name>cmps</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xa7</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"repnz cmps"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>REPNZ</name><argument_list>(<argument><expr><name>cmps</name></expr></argument>, <argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xae</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"repnz scasb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>REPNZ</name><argument_list>(<argument><expr><name>scas</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xaf</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"repnz scas"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>REPNZ</name><argument_list>(<argument><expr><name>scas</name></expr></argument>, <argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <default>default:</default> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"undefined"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>UNDEFINED</name></expr>;</expr_stmt>
            </block_content>}</block></switch>
            <break>break;</break>

        <case>case <expr><literal type="number">0xf3</literal></expr>:</case>
            <expr_stmt><expr><name>READINSN</name></expr>;</expr_stmt>
            <switch>switch <condition>(<expr><name>insn</name></expr>)</condition> <block>{<block_content>
                <case>case <expr><literal type="number">0x0f</literal></expr>:</case>
                    <comment type="line">// 2-byte opcode prefix</comment>
                    <comment type="line">// after a rep prefix, means we have sse/mmx insanity</comment>
                    <expr_stmt><expr><name>READINSN</name></expr>;</expr_stmt>
                    <switch>switch <condition>(<expr><name>insn</name></expr>)</condition> <block>{<block_content>
                        <case>case <expr><literal type="number">0x10</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"movss xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                   <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>VMOV_MERGE_REG</name><argument_list>(<argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                        <case>case <expr><literal type="number">0x11</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"movss xmm, xmm:modrm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                   <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>VMOV_MERGE_REG</name><argument_list>(<argument><expr><name>xmm_modrm_reg</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

                        <case>case <expr><literal type="number">0x2a</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"cvtsi2ss modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                   <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>cvtsi2ss</name></expr></argument>, <argument><expr><name>modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                        <case>case <expr><literal type="number">0x2c</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"cvttss2si reg, xmm:modrm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                   <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>cvttss2si</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>modrm_reg</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                        <case>case <expr><literal type="number">0x51</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"sqrtss xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                   <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>single_fsqrt</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                        <case>case <expr><literal type="number">0x5a</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"cvtss2sd xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                   <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>cvtss2sd</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                        <case>case <expr><literal type="number">0x5b</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"cvttps2dq xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                   <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>cvttps2dq</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

                        <case>case <expr><literal type="number">0x58</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"addss xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                   <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>single_fadd</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                        <case>case <expr><literal type="number">0x59</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"mulss xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                   <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>single_fmul</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                        <case>case <expr><literal type="number">0x5c</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"subss xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                   <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>single_fsub</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                        <case>case <expr><literal type="number">0x5d</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"minss xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                   <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>single_fmin</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                        <case>case <expr><literal type="number">0x5e</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"divss xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                   <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>single_fdiv</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                        <case>case <expr><literal type="number">0x5f</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"maxss xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                   <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP</name><argument_list>(<argument><expr><name>single_fmax</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                        <case>case <expr><literal type="number">0x6f</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"movdqu xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                   <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>VMOV</name><argument_list>(<argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

                        <case>case <expr><literal type="number">0x7e</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"movq xmm:modrm, xmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                   <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>VMOV</name><argument_list>(<argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

                        <case>case <expr><literal type="number">0x18</literal> <operator>...</operator> <literal type="number">0x1f</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"repz nop modrm\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <break>break;</break>

                        <case>case <expr><literal type="number">0x70</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"pshufhw xmm:modrm, xmm, imm8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                   <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><name>READIMM8</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP_IMM</name><argument_list>(<argument><expr><name>shuffle_hw</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

                        <case>case <expr><literal type="number">0x7f</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"movdqu xmm, xmm:modrm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                   <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>VMOV</name><argument_list>(<argument><expr><name>xmm_modrm_reg</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

                        <comment type="line">// tzcnt is like bsf but the result when the input is zero is defined as the operand size</comment>
                        <comment type="line">// for now, it can just be an alias</comment>
                        <case>case <expr><literal type="number">0xbc</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"~~tzcnt~~ bsf modrm, reg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                   <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>BSF</name><argument_list>(<argument><expr><name>modrm_val</name></expr></argument>, <argument><expr><name>modrm_reg</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                        <case>case <expr><literal type="number">0xbd</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"~~lzcnt~~ bsr modrm, reg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                   <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>BSR</name><argument_list>(<argument><expr><name>modrm_val</name></expr></argument>, <argument><expr><name>modrm_reg</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

                        <case>case <expr><literal type="number">0xc2</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"cmpss xmm:modrm, xmm, imm8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                   <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><name>READIMM8</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>V_OP_IMM</name><argument_list>(<argument><expr><name>single_fcmp</name></expr></argument>, <argument><expr><name>xmm_modrm_val</name></expr></argument>, <argument><expr><name>xmm_modrm_reg</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

                        <default>default:</default> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"undefined"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>UNDEFINED</name></expr>;</expr_stmt>
                    </block_content>}</block></switch>
                    <break>break;</break>

                <case>case <expr><literal type="number">0x90</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"pause"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

                <case>case <expr><literal type="number">0xa4</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"rep movsb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>REP</name><argument_list>(<argument><expr><name>movs</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xa5</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"rep movs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>REP</name><argument_list>(<argument><expr><name>movs</name></expr></argument>, <argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xa6</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"repz cmpsb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>REPZ</name><argument_list>(<argument><expr><name>cmps</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xa7</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"repz cmps"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>REPZ</name><argument_list>(<argument><expr><name>cmps</name></expr></argument>, <argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xaa</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"rep stosb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>REP</name><argument_list>(<argument><expr><name>stos</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xab</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"rep stos"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>REP</name><argument_list>(<argument><expr><name>stos</name></expr></argument>, <argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xac</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"rep lodsb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>REP</name><argument_list>(<argument><expr><name>lods</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xad</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"rep lods"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>REP</name><argument_list>(<argument><expr><name>lods</name></expr></argument>, <argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xae</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"repz scasb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>REPZ</name><argument_list>(<argument><expr><name>scas</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="number">0xaf</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"repz scas"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>REPZ</name><argument_list>(<argument><expr><name>scas</name></expr></argument>, <argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

                <comment type="line">// repz ret is equivalent to ret but on some amd chips there's</comment>
                <comment type="line">// a branch prediction penalty if the target of a branch is a</comment>
                <comment type="line">// ret. gcc used to use nop ret but repz ret is only one</comment>
                <comment type="line">// instruction</comment>
                <case>case <expr><literal type="number">0xc3</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"repz ret\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>RET_NEAR</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
                <default>default:</default> <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"undefined\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>UNDEFINED</name></expr>;</expr_stmt>
            </block_content>}</block></switch>
            <break>break;</break>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRP3</name><parameter_list>(<parameter><type><name>val</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>switch (modrm.opcode) { \
        case 0: \
        case 1: TRACE("test imm "); \
                READIMM##z; TEST(imm, val,z); break; \
        case 2: TRACE("not"); \
                NOT(val,z); break; \
        case 3: TRACE("neg"); \
                NEG(val,z); break; \
        case 4: TRACE("mul"); \
                MUL1(modrm_val,z); break; \
        case 5: TRACE("imul"); \
                IMUL1(modrm_val,z); break; \
        case 6: TRACE("div"); \
                DIV(modrm_val,z); break; \
        case 7: TRACE("idiv"); \
                IDIV(modrm_val,z); break; \
        default: TRACE("undefined"); UNDEFINED; \
    }</cpp:value></cpp:define>

        <case>case <expr><literal type="number">0xf6</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"grp3 modrm8\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>GRP3</name><argument_list>(<argument><expr><name>modrm_val</name></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0xf7</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"grp3 modrm\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>GRP3</name><argument_list>(<argument><expr><name>modrm_val</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GRP3</name></cpp:undef>

        <case>case <expr><literal type="number">0xfc</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"cld"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>CLD</name></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0xfd</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"std"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>STD</name></expr>;</expr_stmt> <break>break;</break>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRP5</name><parameter_list>(<parameter><type><name>val</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>switch (modrm.opcode) { \
        case 0: TRACE("inc"); \
                INC(val,z); break; \
        case 1: TRACE("dec"); \
                DEC(val,z); break; \
        case 2: TRACE("call indirect near"); \
                CALL(val); break; \
        case 3: TRACE("call indirect far"); UNDEFINED; \
        case 4: TRACE("jmp indirect near"); \
                JMP(val); break; \
        case 5: TRACE("jmp indirect far"); UNDEFINED; \
        case 6: TRACE("push"); \
                PUSH(val,z); break; \
        case 7: TRACE("undefined"); UNDEFINED; \
    }</cpp:value></cpp:define>

        <case>case <expr><literal type="number">0xfe</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"grp5 modrm8\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>GRP5</name><argument_list>(<argument><expr><name>modrm_val</name></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">0xff</literal></expr>:</case> <expr_stmt><expr><call><name>TRACEI</name><argument_list>(<argument><expr><literal type="string">"grp5 modrm\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>READMODRM</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>GRP5</name><argument_list>(<argument><expr><name>modrm_val</name></expr></argument>,<argument><expr><name>oz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GRP5</name></cpp:undef>

        <default>default:</default>
            <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"undefined\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>UNDEFINED</name></expr>;</expr_stmt>
    </block_content>}</block></switch>
    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>FINISH</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>
</unit>
