<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/emu/float80-test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fenv.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"float80.h"</cpp:file></cpp:include>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>ignored</name> <cpp:literal>"-Wliteral-range"</cpp:literal></cpp:pragma>

<comment type="line">//#define DENORMAL 1e-310</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DENORMAL</name></cpp:macro> <cpp:value>1.11253692925360069155e-308</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>deconst_dummy</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>deconst</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(deconst_dummy? 0 : x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>neg</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x == 0 ? -1e-200/1e200 : -x)</cpp:value></cpp:define>

<union>union <name>f80</name> <block>{
    <decl_stmt><decl><type><name>float80</name></type> <name>f</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>double</name></type> <name>ld</name></decl>;</decl_stmt>
}</block>;</union>

<decl_stmt><decl><type><name><name>union</name> <name>f80</name></name></type> <name>gf</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>bitwise_eq</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>double</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>union</name> <name>f80</name></name></type> <name>ua</name> <init>= <expr><operator>(</operator>union <name>f80</name><operator>)</operator> <name>a</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>union</name> <name>f80</name></name></type> <name>ub</name> <init>= <expr><operator>(</operator>union <name>f80</name><operator>)</operator> <name>b</name></expr></init></decl>;</decl_stmt>
    <return>return <expr><name><name>ua</name><operator>.</operator><name>f</name><operator>.</operator><name>signif</name></name> <operator>==</operator> <name><name>ub</name><operator>.</operator><name>f</name><operator>.</operator><name>signif</name></name> <operator>&amp;&amp;</operator> <name><name>ua</name><operator>.</operator><name>f</name><operator>.</operator><name>signExp</name></name> <operator>==</operator> <name><name>ub</name><operator>.</operator><name>f</name><operator>.</operator><name>signExp</name></name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>tests_passed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>tests_total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>suite_passed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>suite_total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>suite_start</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>_suite_start(__FUNCTION__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>suite_end</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>_suite_end(__FUNCTION__)</cpp:value></cpp:define>
<function><type><name>void</name></type> <name>_suite_start</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>suite</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rounding_mode_str</name></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><call><name>fegetround</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>FE_TONEAREST</name></expr>:</case> <expr_stmt><expr><name>rounding_mode_str</name> <operator>=</operator> <literal type="string">"nearest/even"</literal></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><name>FE_DOWNWARD</name></expr>:</case> <expr_stmt><expr><name>rounding_mode_str</name> <operator>=</operator> <literal type="string">"down"</literal></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><name>FE_UPWARD</name></expr>:</case> <expr_stmt><expr><name>rounding_mode_str</name> <operator>=</operator> <literal type="string">"up"</literal></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><name>FE_TOWARDZERO</name></expr>:</case> <expr_stmt><expr><name>rounding_mode_str</name> <operator>=</operator> <literal type="string">"towards zero"</literal></expr>;</expr_stmt> <break>break;</break>
        <default>default:</default> <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"==== %s, round %s ====\n"</literal></expr></argument>, <argument><expr><name>suite</name></expr></argument>, <argument><expr><name>rounding_mode_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>suite_passed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>suite_total</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>_suite_end</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>suite</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s: %d/%d passed (%.0f%%)\n"</literal></expr></argument>, <argument><expr><name>suite</name></expr></argument>, <argument><expr><name>suite_passed</name></expr></argument>, <argument><expr><name>suite_total</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>suite_passed</name> <operator>/</operator> <name>suite_total</name> <operator>*</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>assertf</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cond</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>tests_total</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>suite_total</name><operator>++</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>cond</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>tests_passed</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>suite_passed</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><ternary><condition><expr><name>cond</name></expr> ?</condition><then> <expr><literal type="string">"PASS "</literal></expr></then><else>: <expr><literal type="string">"FAIL "</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>vsprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>test_int_convert</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>suite_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>union</name> <name>f80</name></name></type> <name>u</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>test</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>u.f = f80_from_int(x); \
    assertf((int64_t) lrintl(u.ld) == x, "f80_from_int(%ld) = %.20Le", (int64_t) x, u.ld); \
    i = f80_to_int(u.f); \
    assertf(i == x, "f80_to_int(%.20Le) = %ld", u.ld, i)</cpp:value></cpp:define>

    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="number">9489919999192</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">9489919999192</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>INT64_MIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>INT64_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>test</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>test</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>u.f = f80_from_double(x); \
    i = f80_to_int(u.f); \
    assertf(i == (int64_t) lrintl(x), "f80_to_int(f80_from_double(%.20Le)) = %ld", u.ld, i)</cpp:value></cpp:define>

    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="number">0.75</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">0.75</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>test</name></cpp:undef>

    <expr_stmt><expr><call><name>suite_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>test_double_convert</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>suite_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>union</name> <name>f80</name></name></type> <name>u</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>test</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>u.f = f80_from_double(x); \
    assertf(bitwise_eq(u.ld, x), "f80_from_double(%e) = %Le", (double) x, u.ld); \
    d = f80_to_double(u.f); \
    assertf(bitwise_eq(d, x), "f80_to_double(%Le) = %e", u.ld, d)</cpp:value></cpp:define>

    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="number">3991994929919994995881.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="number">9.223372036854776e18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>DENORMAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="number">1e-310</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>INFINITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><operator>-</operator><name>INFINITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>NAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>test</name></cpp:undef>
    <expr_stmt><expr><call><name>suite_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>test_round</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>suite_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>union</name> <name>f80</name></name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>ur</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>double</name></type> <name>r</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>test</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>u.ld = x; \
    ur.f = f80_round(u.f); \
    r = rintl(u.ld); \
    assertf(bitwise_eq(r, ur.ld), "f80_round(%Le) = %Le (%Le)", (long double) x, ur.ld, r)</cpp:value></cpp:define>

    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="number">1.</literal><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.</literal><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="number">1.</literal><operator>/</operator><literal type="number">65536</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.</literal><operator>/</operator><literal type="number">65536</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="number">1e-100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1e-100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="number">1.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="number">3991994929919994995881.123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="number">9.223372036854776e18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="number">1e-4949l</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>DENORMAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><literal type="number">1e-310</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>INFINITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><operator>-</operator><name>INFINITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>NAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>test</name></cpp:undef>
    <expr_stmt><expr><call><name>suite_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>test_math</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>suite_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>union</name> <name>f80</name></name></type> <name>ua</name></decl>, <decl><type ref="prev"/><name>ub</name></decl>, <decl><type ref="prev"/><name>u</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>double</name></type> <name>expected</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cop_add</name></cpp:macro> <cpp:value>+</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cop_sub</name></cpp:macro> <cpp:value>-</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cop_mul</name></cpp:macro> <cpp:value>*</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cop_div</name></cpp:macro> <cpp:value>/</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_test</name><parameter_list>(<parameter><type><name>op</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>ua.ld = a; ub.ld = b; \
    u.f = f80_##op(ua.f, ub.f); \
    expected = deconst((long double) a) cop_##op deconst((long double) b); \
    assertf(bitwise_eq(u.ld, expected) || (isnan(u.ld) &amp;&amp; isnan(expected)) || (ua.ld == 0 &amp;&amp; ub.ld == 0 &amp;&amp; u.ld == 0 &amp;&amp; expected == 0), "f80_"#op"(%.20Le, %.20Le) = %.20Le (%.20Le)", ua.ld, ub.ld, u.ld, expected)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>test</name><parameter_list>(<parameter><type><name>op</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>_test(op, a, b); \
    _test(op, neg(a), b); \
    _test(op, a, neg(b)); \
    _test(op, neg(a), neg(b))</cpp:value></cpp:define>

    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>add</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>add</name></expr></argument>, <argument><expr><literal type="number">123</literal></expr></argument>, <argument><expr><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>add</name></expr></argument>, <argument><expr><literal type="number">9942</literal></expr></argument>, <argument><expr><literal type="number">13459</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>add</name></expr></argument>, <argument><expr><literal type="number">222</literal></expr></argument>, <argument><expr><literal type="number">0.</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>add</name></expr></argument>, <argument><expr><literal type="number">0.</literal></expr></argument>, <argument><expr><literal type="number">0.</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>add</name></expr></argument>, <argument><expr><literal type="number">12.0499</literal></expr></argument>, <argument><expr><literal type="number">91999</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>add</name></expr></argument>, <argument><expr><literal type="number">1e100</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>add</name></expr></argument>, <argument><expr><literal type="number">1e-4949l</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>add</name></expr></argument>, <argument><expr><literal type="number">1e-4949l</literal></expr></argument>, <argument><expr><literal type="number">1e-4949l</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>add</name></expr></argument>, <argument><expr><literal type="number">1e-4949l</literal></expr></argument>, <argument><expr><literal type="number">2e-4949l</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>add</name></expr></argument>, <argument><expr><literal type="number">18446744073709551616.l</literal></expr></argument>, <argument><expr><literal type="number">1.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>add</name></expr></argument>, <argument><expr><literal type="number">1e4932l</literal></expr></argument>, <argument><expr><literal type="number">1e4932l</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>add</name></expr></argument>, <argument><expr><name>INFINITY</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>add</name></expr></argument>, <argument><expr><name>INFINITY</name></expr></argument>, <argument><expr><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>add</name></expr></argument>, <argument><expr><name>INFINITY</name></expr></argument>, <argument><expr><name>INFINITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>add</name></expr></argument>, <argument><expr><name>NAN</name></expr></argument>, <argument><expr><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>add</name></expr></argument>, <argument><expr><name>NAN</name></expr></argument>, <argument><expr><name>NAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>mul</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>mul</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>mul</name></expr></argument>, <argument><expr><literal type="number">123</literal></expr></argument>, <argument><expr><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>mul</name></expr></argument>, <argument><expr><literal type="number">1e100</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>mul</name></expr></argument>, <argument><expr><literal type="number">12.3993l</literal></expr></argument>, <argument><expr><literal type="number">91934</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>mul</name></expr></argument>, <argument><expr><literal type="number">1e-4949l</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>mul</name></expr></argument>, <argument><expr><literal type="number">1e-4949l</literal></expr></argument>, <argument><expr><literal type="number">1e-4949l</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>mul</name></expr></argument>, <argument><expr><name>INFINITY</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>mul</name></expr></argument>, <argument><expr><name>INFINITY</name></expr></argument>, <argument><expr><name>INFINITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>mul</name></expr></argument>, <argument><expr><name>INFINITY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>mul</name></expr></argument>, <argument><expr><name>NAN</name></expr></argument>, <argument><expr><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>mul</name></expr></argument>, <argument><expr><name>NAN</name></expr></argument>, <argument><expr><name>NAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>div</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>div</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>div</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>div</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>div</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1e1000l</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>div</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1e-1000l</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>div</name></expr></argument>, <argument><expr><literal type="number">12.4123331</literal></expr></argument>, <argument><expr><literal type="number">934.11223e200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>div</name></expr></argument>, <argument><expr><literal type="number">1288490188200</literal></expr></argument>, <argument><expr><literal type="number">210</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>div</name></expr></argument>, <argument><expr><literal type="number">1e-4949l</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>div</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">1e-4949l</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>div</name></expr></argument>, <argument><expr><literal type="number">1e-4949l</literal></expr></argument>, <argument><expr><literal type="number">1e-4949l</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>div</name></expr></argument>, <argument><expr><name>INFINITY</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>div</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><name>INFINITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>div</name></expr></argument>, <argument><expr><name>INFINITY</name></expr></argument>, <argument><expr><name>INFINITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>div</name></expr></argument>, <argument><expr><name>INFINITY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>div</name></expr></argument>, <argument><expr><name>NAN</name></expr></argument>, <argument><expr><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>div</name></expr></argument>, <argument><expr><name>NAN</name></expr></argument>, <argument><expr><name>NAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>test</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_test</name></cpp:undef>
    <expr_stmt><expr><call><name>suite_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>test_compare</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>suite_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>union</name> <name>f80</name></name></type> <name>ua</name></decl>, <decl><type ref="prev"/><name>ub</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>expected</name></decl>, <decl><type ref="prev"/><name>actual</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cop_eq</name></cpp:macro> <cpp:value>==</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cop_lt</name></cpp:macro> <cpp:value>&lt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_test</name><parameter_list>(<parameter><type><name>op</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>ua.ld = a; ub.ld = b; \
    actual = f80_##op(ua.f, ub.f); \
    expected = (long double) a cop_##op (long double) b; \
    assertf(actual == expected, "f80_"#op"(%Le, %Le) = %s", ua.ld, ub.ld, actual ? "true" : "false")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>test</name><parameter_list>(<parameter><type><name>op</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>_test(op, a, b); \
    _test(op, neg(a), b); \
    _test(op, a, neg(b)); \
    _test(op, neg(a), neg(b))</cpp:value></cpp:define>

    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>eq</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>eq</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>eq</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>eq</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>eq</name></expr></argument>, <argument><expr><name>INFINITY</name></expr></argument>, <argument><expr><name>INFINITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>eq</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>INFINITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>eq</name></expr></argument>, <argument><expr><name>NAN</name></expr></argument>, <argument><expr><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>eq</name></expr></argument>, <argument><expr><name>NAN</name></expr></argument>, <argument><expr><name>NAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>lt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>lt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>lt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>lt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>lt</name></expr></argument>, <argument><expr><name>INFINITY</name></expr></argument>, <argument><expr><name>INFINITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>lt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>INFINITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>lt</name></expr></argument>, <argument><expr><name>NAN</name></expr></argument>, <argument><expr><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>lt</name></expr></argument>, <argument><expr><name>NAN</name></expr></argument>, <argument><expr><name>NAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>test</name></cpp:undef>
    <expr_stmt><expr><call><name>suite_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>fnmulh</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>__int128</name><operator>)</operator> <name>a</name> <operator>*</operator> <name>b</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">64</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>rounding_mode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>rounding_mode</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>rounding_mode</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>f80_rounding_mode</name> <operator>=</operator> <name>rounding_mode</name></expr>;</expr_stmt>
        <switch>switch <condition>(<expr><name>rounding_mode</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>round_to_nearest</name></expr>:</case> <expr_stmt><expr><call><name>fesetround</name><argument_list>(<argument><expr><name>FE_TONEAREST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
            <case>case <expr><name>round_down</name></expr>:</case> <expr_stmt><expr><call><name>fesetround</name><argument_list>(<argument><expr><name>FE_DOWNWARD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
            <case>case <expr><name>round_up</name></expr>:</case> <expr_stmt><expr><call><name>fesetround</name><argument_list>(<argument><expr><name>FE_UPWARD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
            <case>case <expr><name>round_chop</name></expr>:</case> <expr_stmt><expr><call><name>fesetround</name><argument_list>(<argument><expr><name>FE_TOWARDZERO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        </block_content>}</block></switch>
        <expr_stmt><expr><call><name>fesetround</name><argument_list>(<argument><expr><name>rounding_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>test_int_convert</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>test_double_convert</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>test_round</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>test_math</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>test_compare</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d/%d passed (%.0f%%)"</literal></expr></argument>, <argument><expr><name>tests_passed</name></expr></argument>, <argument><expr><name>tests_total</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>tests_passed</name> <operator>/</operator> <name>tests_total</name> <operator>*</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><ternary><condition><expr><name>tests_passed</name> <operator>==</operator> <name>tests_total</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
</unit>
