<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/emu/modrm.h"><cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MODRM_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODRM_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"misc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"emu/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"emu/tlb.h"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DEFAULT_CHANNEL</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_CHANNEL</name></cpp:macro> <cpp:value>instr</cpp:value></cpp:define>

<struct>struct <name>modrm</name> <block>{
    <union>union <block>{
        <decl_stmt><decl><type><name><name>enum</name> <name>reg32</name></name></type> <name>reg</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name></type> <name>opcode</name></decl>;</decl_stmt>
    }</block>;</union>
    <enum>enum <block>{
        <decl><name>modrm_reg</name></decl>, <decl><name>modrm_mem</name></decl>, <decl><name>modrm_mem_si</name></decl>
    }</block> <decl><name>type</name></decl>;</enum>
    <union>union <block>{
        <decl_stmt><decl><type><name><name>enum</name> <name>reg32</name></name></type> <name>base</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name></type> <name>rm_opcode</name></decl>;</decl_stmt>
    }</block>;</union>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>offset</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>enum</name> <name>reg32</name></name></type> <name>index</name></decl>;</decl_stmt>
    <enum>enum <block>{
        <decl><name>times_1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
        <decl><name>times_2</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
        <decl><name>times_4</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
    }</block> <decl><name>shift</name></decl>;</enum>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name></type> <name>rm_sib</name> <init>= <expr><name>reg_esp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name></type> <name>rm_none</name> <init>= <expr><name>reg_esp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name></type> <name>rm_disp32</name> <init>= <expr><name>reg_ebp</name></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name><parameter_list>(<parameter><type><name>byte</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((byte &amp; 0b11000000) &gt;&gt; 6)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REG</name><parameter_list>(<parameter><type><name>byte</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((byte &amp; 0b00111000) &gt;&gt; 3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RM</name><parameter_list>(<parameter><type><name>byte</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>((byte &amp; 0b00000111) &gt;&gt; 0)</cpp:value></cpp:define>

<comment type="line">// read modrm and maybe sib, output information into *modrm, return false for segfault</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>modrm_decode32</name><parameter_list>(<parameter><decl><type><name>addr_t</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tlb</name></name> <modifier>*</modifier></type><name>tlb</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>modrm</name></name> <modifier>*</modifier></type><name>modrm</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ</name><parameter_list>(<parameter><type><name>thing</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>*ip += sizeof(thing); \
    if (!tlb_read(tlb, *ip - sizeof(thing), &amp;(thing), sizeof(thing))) \
        return false</cpp:value></cpp:define>

    <decl_stmt><decl><type><name>byte_t</name></type> <name>modrm_byte</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>READ</name><argument_list>(<argument><expr><name>modrm_byte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <enum>enum <block>{
        <decl><name>mode_disp0</name></decl>,
        <decl><name>mode_disp8</name></decl>,
        <decl><name>mode_disp32</name></decl>,
        <decl><name>mode_reg</name></decl>,
    }</block> <decl><name>mode</name> <init>= <expr><call><name>MOD</name><argument_list>(<argument><expr><name>modrm_byte</name></expr></argument>)</argument_list></call></expr></init></decl>;</enum>
    <expr_stmt><expr><name><name>modrm</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>modrm_mem</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>modrm</name><operator>-&gt;</operator><name>reg</name></name> <operator>=</operator> <call><name>REG</name><argument_list>(<argument><expr><name>modrm_byte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>modrm</name><operator>-&gt;</operator><name>rm_opcode</name></name> <operator>=</operator> <call><name>RM</name><argument_list>(<argument><expr><name>modrm_byte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>mode_reg</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>modrm</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>modrm_reg</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>modrm</name><operator>-&gt;</operator><name>rm_opcode</name></name> <operator>==</operator> <name>rm_disp32</name> <operator>&amp;&amp;</operator> <name>mode</name> <operator>==</operator> <name>mode_disp0</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>modrm</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <name>reg_none</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>mode</name> <operator>=</operator> <name>mode_disp32</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>modrm</name><operator>-&gt;</operator><name>rm_opcode</name></name> <operator>==</operator> <name>rm_sib</name> <operator>&amp;&amp;</operator> <name>mode</name> <operator>!=</operator> <name>mode_reg</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>byte_t</name></type> <name>sib_byte</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>READ</name><argument_list>(<argument><expr><name>sib_byte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>modrm</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <call><name>RM</name><argument_list>(<argument><expr><name>sib_byte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// wtf intel</comment>
        <if_stmt><if>if <condition>(<expr><name><name>modrm</name><operator>-&gt;</operator><name>rm_opcode</name></name> <operator>==</operator> <name>rm_disp32</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>mode_disp0</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>modrm</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <name>reg_none</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>mode</name> <operator>=</operator> <name>mode_disp32</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name><name>modrm</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <name>reg_ebp</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>modrm</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <call><name>REG</name><argument_list>(<argument><expr><name>sib_byte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>modrm</name><operator>-&gt;</operator><name>shift</name></name> <operator>=</operator> <call><name>MOD</name><argument_list>(<argument><expr><name>sib_byte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>modrm</name><operator>-&gt;</operator><name>index</name></name> <operator>!=</operator> <name>rm_none</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>modrm</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>modrm_mem_si</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>mode_disp0</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>modrm</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>mode_disp8</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int8_t</name></type> <name>offset</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>READ</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>modrm</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>mode_disp32</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>offset</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>READ</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>modrm</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>READ</name></cpp:undef>

    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"reg=%s opcode=%d "</literal></expr></argument>, <argument><expr><call><name>reg32_name</name><argument_list>(<argument><expr><name><name>modrm</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>modrm</name><operator>-&gt;</operator><name>opcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"base=%s "</literal></expr></argument>, <argument><expr><call><name>reg32_name</name><argument_list>(<argument><expr><name><name>modrm</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>modrm</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>modrm_reg</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"offset=%s0x%x "</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>modrm</name><operator>-&gt;</operator><name>offset</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">"-"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>modrm</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>modrm</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>modrm_mem_si</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr><literal type="string">"index=%s&lt;&lt;%d "</literal></expr></argument>, <argument><expr><call><name>reg32_name</name><argument_list>(<argument><expr><name><name>modrm</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>modrm</name><operator>-&gt;</operator><name>shift</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
