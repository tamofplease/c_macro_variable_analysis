<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/emu/interp.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"emu/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"emu/cpuid.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"emu/modrm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"emu/regid.h"</cpp:file></cpp:include>

<comment type="line">// TODO get rid of these</comment>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>ignored</name> <cpp:literal>"-Wsign-compare"</cpp:literal></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>ignored</name> <cpp:literal>"-Wtautological-constant-out-of-range-compare"</cpp:literal></cpp:pragma>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECLARE_LOCALS</name></cpp:macro> \
    <cpp:value>dword_t addr_offset = 0; \
    dword_t saved_ip = cpu-&gt;eip; \
    struct regptr modrm_regptr, modrm_base; \
    dword_t addr = 0; \
    \
    union xmm_reg xmm_src; \
    union xmm_reg xmm_dst; \
    \
    float80 ftmp;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FINISH</name></cpp:macro> \
    <cpp:value>return -1</cpp:value></cpp:define> <comment type="line">// everything is ok.</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNDEFINED</name></cpp:macro> <cpp:value>{ cpu-&gt;eip = saved_ip; return INT_UNDEFINED; }</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>modrm_compute</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpu_state</name></name> <modifier>*</modifier></type><name>cpu</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tlb</name></name> <modifier>*</modifier></type><name>tlb</name></decl></parameter>, <parameter><decl><type><name>addr_t</name> <modifier>*</modifier></type><name>addr_out</name></decl></parameter>,
        <parameter><decl><type><name><name>struct</name> <name>modrm</name></name> <modifier>*</modifier></type><name>modrm</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>regptr</name></name> <modifier>*</modifier></type><name>modrm_regptr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>regptr</name></name> <modifier>*</modifier></type><name>modrm_base</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READMODRM</name></cpp:macro> \
    <cpp:value>if (!modrm_compute(cpu, tlb, &amp;addr, &amp;modrm, &amp;modrm_regptr, &amp;modrm_base)) { \
        cpu-&gt;segfault_addr = cpu-&gt;eip; \
        cpu-&gt;eip = saved_ip; \
        return INT_GPF; \
    }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READADDR</name></cpp:macro> <cpp:value>READIMM_(addr_offset, 32); addr += addr_offset</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESTORE_IP</name></cpp:macro> <cpp:value>cpu-&gt;eip = saved_ip</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_READIMM</name><parameter_list>(<parameter><type><name>name</name></type></parameter>,<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>name = mem_read(cpu-&gt;eip, size); \
    cpu-&gt;eip += size/8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRACEIP</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>TRACE("%d %08x\t", current-&gt;pid, cpu-&gt;eip);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEG_GS</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>addr += cpu-&gt;tls_ptr</cpp:value></cpp:define>

<comment type="line">// this is a completely insane way to turn empty into OP_SIZE and any other size into itself</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sz_##x</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz_</name></cpp:macro> <cpp:value>OP_SIZE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz_8</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz_16</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz_32</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz_64</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz_80</name></cpp:macro> <cpp:value>80</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz_128</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>twice</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>glue(twice_, x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>twice_8</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>twice_16</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>twice_32</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<comment type="line">// types for different sizes</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ty</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ty_##x</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ty_8</name></cpp:macro> <cpp:value>uint8_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ty_16</name></cpp:macro> <cpp:value>uint16_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ty_32</name></cpp:macro> <cpp:value>uint32_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ty_64</name></cpp:macro> <cpp:value>uint64_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ty_128</name></cpp:macro> <cpp:value>union xmm_reg</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mem_read_ts</name><parameter_list>(<parameter><type><name>addr</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>({ \
    type val; \
    if (!tlb_read(tlb, addr, &amp;val, size/8)) { \
        cpu-&gt;eip = saved_ip; \
        cpu-&gt;segfault_addr = addr; \
        return INT_GPF; \
    } \
    val; \
})</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mem_write_ts</name><parameter_list>(<parameter><type><name>addr</name></type></parameter>, <parameter><type><name>val</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>({ \
    type _val = val; \
    if (!tlb_write(tlb, addr, &amp;_val, size/8)) { \
        cpu-&gt;eip = saved_ip; \
        cpu-&gt;segfault_addr = addr; \
        return INT_GPF; \
    } \
})</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mem_read</name><parameter_list>(<parameter><type><name>addr</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mem_read_ts(addr, ty(size), size)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mem_write</name><parameter_list>(<parameter><type><name>addr</name></type></parameter>, <parameter><type><name>val</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mem_write_ts(addr, val, ty(size), size)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get</name><parameter_list>(<parameter><type><name>what</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>get_##what(sz(size))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>set</name><parameter_list>(<parameter><type><name>what</name></type></parameter>, <parameter><type><name>to</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>set_##what(to, sz(size))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>is_memory</name><parameter_list>(<parameter><type><name>what</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>is_memory_##what</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REGISTER</name><parameter_list>(<parameter><type><name>regptr</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(ty(size) *) (((char *) cpu) + (regptr).reg##size##_id))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_modrm_reg</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>REGISTER(modrm_regptr, size)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>set_modrm_reg</name><parameter_list>(<parameter><type><name>to</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>REGISTER(modrm_regptr, size) = to</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>is_memory_modrm_reg</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>is_memory_modrm_val</name></cpp:macro> <cpp:value>(modrm.type != modrm_reg)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_modrm_val</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>(modrm.type == modrm_reg ? \
     REGISTER(modrm_base, size) : \
     mem_read(addr, size))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>set_modrm_val</name><parameter_list>(<parameter><type><name>to</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>if (modrm.type == modrm_reg) { \
        REGISTER(modrm_base, size) = to; \
    } else { \
        mem_write(addr, to, size); \
    }(void)0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_imm</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uint(size)) imm)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_mem_addr</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mem_read(addr, size)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>set_mem_addr</name><parameter_list>(<parameter><type><name>to</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mem_write(addr, to, size)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_mem_si</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mem_read(cpu-&gt;esi, size)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>set_mem_si</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mem_write(cpu-&gt;esi, size)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_mem_di</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mem_read(cpu-&gt;edi, size)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>set_mem_di</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mem_write(cpu-&gt;esi, size)</cpp:value></cpp:define>

<comment type="line">// DEFINE ALL THE MACROS</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_reg_a</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uint(size)) cpu-&gt;eax)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_reg_b</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uint(size)) cpu-&gt;ebx)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_reg_c</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uint(size)) cpu-&gt;ecx)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_reg_d</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uint(size)) cpu-&gt;edx)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_reg_si</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uint(size)) cpu-&gt;esi)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_reg_di</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uint(size)) cpu-&gt;edi)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_reg_bp</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uint(size)) cpu-&gt;ebp)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_reg_sp</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((uint(size)) cpu-&gt;esp)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_eip</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cpu-&gt;eip</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_eflags</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cpu-&gt;eflags</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_gs</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cpu-&gt;gs</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>set_reg_a</name><parameter_list>(<parameter><type><name>to</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>*(uint(size) *) &amp;cpu-&gt;eax = to</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>set_reg_b</name><parameter_list>(<parameter><type><name>to</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>*(uint(size) *) &amp;cpu-&gt;ebx = to</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>set_reg_c</name><parameter_list>(<parameter><type><name>to</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>*(uint(size) *) &amp;cpu-&gt;ecx = to</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>set_reg_d</name><parameter_list>(<parameter><type><name>to</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>*(uint(size) *) &amp;cpu-&gt;edx = to</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>set_reg_si</name><parameter_list>(<parameter><type><name>to</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>*(uint(size) *) &amp;cpu-&gt;esi = to</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>set_reg_di</name><parameter_list>(<parameter><type><name>to</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>*(uint(size) *) &amp;cpu-&gt;edi = to</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>set_reg_bp</name><parameter_list>(<parameter><type><name>to</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>*(uint(size) *) &amp;cpu-&gt;ebp = to</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>set_reg_sp</name><parameter_list>(<parameter><type><name>to</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>*(uint(size) *) &amp;cpu-&gt;esp = to</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>set_eip</name><parameter_list>(<parameter><type><name>to</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cpu-&gt;eip = to</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>set_eflags</name><parameter_list>(<parameter><type><name>to</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cpu-&gt;eflags = to</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>set_gs</name><parameter_list>(<parameter><type><name>to</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cpu-&gt;gs = to</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_0</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_1</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="line">// only used by lea</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_addr</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>addr</cpp:value></cpp:define>

<comment type="line">// INSTRUCTION MACROS</comment>
<comment type="line">// if an instruction accesses memory, it should do that before it modifies</comment>
<comment type="line">// registers, so segfault recovery only needs to save IP.</comment>

<comment type="line">// takes any unsigned integer and casts it to signed of the same size</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>unsigned_overflow</name><parameter_list>(<parameter><type><name>what</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>res</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>({ \
    int ov = __builtin_##what##_overflow((uint(z)) (a), (uint(z)) (b), (uint(z) *) &amp;res); \
    res = (sint(z)) res; ov; \
})</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>signed_overflow</name><parameter_list>(<parameter><type><name>what</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>res</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>({ \
    int ov = __builtin_##what##_overflow((sint(z)) (a), (sint(z)) (b), (sint(z) *) &amp;res); \
    res = (sint(z)) res; ov; \
})</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOV</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>set(dst, get(src,z),z)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOVZX</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>, <parameter><type><name>zs</name></type></parameter>, <parameter><type><name>zd</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>set(dst, get(src,zs),zd)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOVSX</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>, <parameter><type><name>zs</name></type></parameter>, <parameter><type><name>zd</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>set(dst, (uint(sz(zd))) (sint(sz(zs))) get(src,zs),zd)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XCHG</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { \
    dword_t tmp = get(src,z); \
    set(src, get(dst,z),z); \
    set(dst, tmp,z); \
} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUSH</name><parameter_list>(<parameter><type><name>thing</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>mem_write(cpu-&gt;esp - OP_SIZE/8, get(thing,z),z); \
    cpu-&gt;esp -= OP_SIZE/8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POP</name><parameter_list>(<parameter><type><name>thing</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>set(thing, mem_read(cpu-&gt;esp, z),z); \
    cpu-&gt;esp += OP_SIZE/8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT</name><parameter_list>(<parameter><type><name>code</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>return get(code,8)</cpp:value></cpp:define>

<comment type="line">// math</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETRESFLAGS</name></cpp:macro> <cpp:value>cpu-&gt;zf_res = cpu-&gt;sf_res = cpu-&gt;pf_res = 1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETRES_RAW</name><parameter_list>(<parameter><type><name>result</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETRES</name><parameter_list>(<parameter><type><name>result</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>cpu-&gt;res = (int32_t) (sint(z)) (result); SETRESFLAGS</cpp:value></cpp:define>
    <comment type="line">// ^ sign extend result so SF is correct</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZEROAF</name></cpp:macro> <cpp:value>cpu-&gt;af = cpu-&gt;af_ops = 0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETAF</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>cpu-&gt;op1 = get(a,z); cpu-&gt;op2 = get(b,z); cpu-&gt;af_ops = 1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>SETRES(get(dst,z) &amp; get(src,z),z); \
    cpu-&gt;cf = cpu-&gt;of = cpu-&gt;af = cpu-&gt;af_ops = 0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>SETAF(src, dst,z); \
    cpu-&gt;cf = unsigned_overflow(add, get(dst,z), get(src,z), cpu-&gt;res,z); \
    cpu-&gt;of = signed_overflow(add, get(dst,z), get(src,z), cpu-&gt;res,z); \
    set(dst, cpu-&gt;res,z); SETRESFLAGS</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADC</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>SETAF(src, dst,z); \
    cpu-&gt;of = signed_overflow(add, get(dst,z), get(src,z) + cpu-&gt;cf, cpu-&gt;res,z) \
        || (cpu-&gt;cf &amp;&amp; get(src,z) == ((uint(z)) -1) / 2); \
    cpu-&gt;cf = unsigned_overflow(add, get(dst,z), get(src,z) + cpu-&gt;cf, cpu-&gt;res,z) \
        || (cpu-&gt;cf &amp;&amp; get(src,z) == (uint(z)) -1); \
    set(dst, cpu-&gt;res,z); SETRESFLAGS</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SBB</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>SETAF(src, dst,z); \
    cpu-&gt;of = signed_overflow(sub, get(dst,z), get(src,z) + cpu-&gt;cf, cpu-&gt;res,z) \
        || (cpu-&gt;cf &amp;&amp; get(src,z) == ((uint(z)) -1) / 2); \
    cpu-&gt;cf = unsigned_overflow(sub, get(dst,z), get(src,z) + cpu-&gt;cf, cpu-&gt;res,z) \
        || (cpu-&gt;cf &amp;&amp; get(src,z) == (uint(z)) -1); \
    set(dst, cpu-&gt;res,z); SETRESFLAGS</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OR</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>set(dst, get(dst,z) | get(src,z),z); \
    cpu-&gt;cf = cpu-&gt;of = cpu-&gt;af = cpu-&gt;af_ops = 0; SETRES(get(dst,z),z)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AND</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>set(dst, get(dst,z) &amp; get(src,z),z); \
    cpu-&gt;cf = cpu-&gt;of = cpu-&gt;af = cpu-&gt;af_ops = 0; SETRES(get(dst,z),z)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUB</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>SETAF(src, dst,z); \
    cpu-&gt;of = signed_overflow(sub, get(dst,z), get(src,z), cpu-&gt;res,z); \
    cpu-&gt;cf = unsigned_overflow(sub, get(dst,z), get(src,z), cpu-&gt;res,z); \
    set(dst, cpu-&gt;res,z); SETRESFLAGS</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOR</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>set(dst, get(dst,z) ^ get(src,z),z); \
    cpu-&gt;cf = cpu-&gt;of = cpu-&gt;af = cpu-&gt;af_ops = 0; SETRES(get(dst,z),z)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMP</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>SETAF(src, dst,z); \
    cpu-&gt;cf = unsigned_overflow(sub, get(dst,z), get(src,z), cpu-&gt;res,z); \
    cpu-&gt;of = signed_overflow(sub, get(dst,z), get(src,z), cpu-&gt;res,z); \
    SETRESFLAGS</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INC</name><parameter_list>(<parameter><type><name>val</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { \
    int tmp = cpu-&gt;cf; \
    ADD(1, val,z); \
    cpu-&gt;cf = tmp; \
} while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEC</name><parameter_list>(<parameter><type><name>val</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { \
    int tmp = cpu-&gt;cf; \
    SUB(1, val,z); \
    cpu-&gt;cf = tmp; \
} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUL18</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cpu-&gt;ax = cpu-&gt;al * val</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUL1</name><parameter_list>(<parameter><type><name>val</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { \
    uint64_t tmp = get(reg_a,z) * (uint64_t) get(val,z); \
    set(reg_a, tmp,z); set(reg_d, tmp &gt;&gt; z,z);; \
    cpu-&gt;cf = cpu-&gt;of = (tmp != (uint32_t) tmp); ZEROAF; \
    cpu-&gt;zf = cpu-&gt;sf = cpu-&gt;pf = cpu-&gt;zf_res = cpu-&gt;sf_res = cpu-&gt;pf_res = 0; \
} while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMUL1</name><parameter_list>(<parameter><type><name>val</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { \
    int64_t tmp = (int64_t) (sint(z)) get(reg_a,z) * (sint(z)) get(val,z); \
    set(reg_a, tmp,z); set(reg_d, tmp &gt;&gt; z,z); \
    cpu-&gt;cf = cpu-&gt;of = (tmp != (int32_t) tmp); \
    cpu-&gt;zf = cpu-&gt;sf = cpu-&gt;pf = cpu-&gt;zf_res = cpu-&gt;sf_res = cpu-&gt;pf_res = 0; \
} while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMUL2</name><parameter_list>(<parameter><type><name>val</name></type></parameter>, <parameter><type><name>reg</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>cpu-&gt;cf = cpu-&gt;of = signed_overflow(mul, get(reg,z), get(val,z), cpu-&gt;res,z); \
    set(reg, cpu-&gt;res,z); SETRESFLAGS</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMUL3</name><parameter_list>(<parameter><type><name>imm</name></type></parameter>, <parameter><type><name>src</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>cpu-&gt;cf = cpu-&gt;of = signed_overflow(mul, get(src,z), get(imm,z), cpu-&gt;res,z); \
    set(dst, cpu-&gt;res,z); \
    cpu-&gt;pf_res = 1; cpu-&gt;zf = cpu-&gt;sf = cpu-&gt;zf_res = cpu-&gt;sf_res = 0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIV</name><parameter_list>(<parameter><type><name>val</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { \
    if (get(val,z) == 0) return INT_DIV; \
    uint(twice(z)) dividend = get(reg_a,z) | ((uint(twice(z))) get(reg_d,z) &lt;&lt; z); \
    set(reg_d, dividend % get(val,z),z); \
    set(reg_a, dividend / get(val,z),z); \
} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDIV</name><parameter_list>(<parameter><type><name>val</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { \
    if (get(val,z) == 0) return INT_DIV; \
    sint(twice(z)) dividend = get(reg_a,z) | ((sint(twice(z))) get(reg_d,z) &lt;&lt; z); \
    set(reg_d, dividend % get(val,z),z); \
    set(reg_a, dividend / get(val,z),z); \
} while (0)</cpp:value></cpp:define>

<comment type="line">// TODO this is probably wrong in some subtle way</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HALF_OP_SIZE</name></cpp:macro> <cpp:value>glue(HALF_, OP_SIZE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HALF_16</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HALF_32</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CVT</name></cpp:macro> \
    <cpp:value>set(reg_d, get(reg_a,oz) &amp; (1 &lt;&lt; (oz - 1)) ? (uint(oz)) -1 : 0, oz)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CVTE</name></cpp:macro> \
    <cpp:value>REG_VAL(cpu, REG_ID(eax), HALF_OP_SIZE) = (sint(OP_SIZE)) REG_VAL(cpu, REG_ID(ax), OP_SIZE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALL</name><parameter_list>(<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PUSH(eip,oz); JMP(loc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALL_REL</name><parameter_list>(<parameter><type><name>offset</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PUSH(eip,oz); JMP_REL(offset)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROL</name><parameter_list>(<parameter><type><name>count</name></type></parameter>, <parameter><type><name>val</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>if (get(count,8) % z != 0) { \
        int cnt = get(count,8) % z; \
        <comment type="block">/* the compiler miraculously turns this into a rol instruction with optimizations on */</comment>\
        set(val, get(val,z) &lt;&lt; cnt | get(val,z) &gt;&gt; (z - cnt),z); \
        cpu-&gt;cf = get(val,z) &amp; 1; \
        if (cnt == 1) { cpu-&gt;of = cpu-&gt;cf ^ (get(val,z) &gt;&gt; (OP_SIZE - 1)); } \
    }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROR</name><parameter_list>(<parameter><type><name>count</name></type></parameter>, <parameter><type><name>val</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>if (get(count,8) % z != 0) { \
        int cnt = get(count,8) % z; \
        set(val, get(val,z) &gt;&gt; cnt | get(val,z) &lt;&lt; (z - cnt),z); \
        cpu-&gt;cf = get(val,z) &gt;&gt; (OP_SIZE - 1); \
        if (cnt == 1) { cpu-&gt;of = cpu-&gt;cf ^ (get(val,z) &amp; 1); } \
    }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHL</name><parameter_list>(<parameter><type><name>count</name></type></parameter>, <parameter><type><name>val</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>if (get(count,8) % z != 0) { \
        int cnt = get(count,8) % z; \
        cpu-&gt;cf = (get(val,z) &lt;&lt; (cnt - 1)) &gt;&gt; (z - 1); \
        cpu-&gt;of = cpu-&gt;cf ^ (get(val,z) &gt;&gt; (z - 1)); \
        set(val, get(val,z) &lt;&lt; cnt,z); SETRES(get(val,z),z); ZEROAF; \
    }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHR</name><parameter_list>(<parameter><type><name>count</name></type></parameter>, <parameter><type><name>val</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>if (get(count,8) % z != 0) { \
        int cnt = get(count,8) % z; \
        cpu-&gt;cf = (get(val,z) &gt;&gt; (cnt - 1)) &amp; 1; \
        cpu-&gt;of = get(val,z) &gt;&gt; (z - 1); \
        set(val, get(val,z) &gt;&gt; cnt,z); SETRES(get(val,z),z); ZEROAF; \
    }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAR</name><parameter_list>(<parameter><type><name>count</name></type></parameter>, <parameter><type><name>val</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>if (get(count,8) % z != 0) { \
        int cnt = get(count,8) % z; \
        cpu-&gt;cf = (get(val,z) &gt;&gt; (cnt - 1)) &amp; 1; cpu-&gt;of = 0; \
        set(val, ((sint(z)) get(val,z)) &gt;&gt; cnt,z); SETRES(get(val,z),z); ZEROAF; \
    }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHRD</name><parameter_list>(<parameter><type><name>count</name></type></parameter>, <parameter><type><name>extra</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>if (get(count,8) % z != 0) { \
        int cnt = get(count,8) % z; \
        cpu-&gt;cf = (get(dst,z) &gt;&gt; (cnt - 1)) &amp; 1; \
        cpu-&gt;res = get(dst,z) &gt;&gt; cnt | get(extra,z) &lt;&lt; (z - cnt); \
        set(dst, cpu-&gt;res,z); \
        SETRESFLAGS; \
    }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RCR</name><parameter_list>(<parameter><type><name>count</name></type></parameter>, <parameter><type><name>val</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>UNDEFINED</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RCL</name><parameter_list>(<parameter><type><name>count</name></type></parameter>, <parameter><type><name>val</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>UNDEFINED</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHLD</name><parameter_list>(<parameter><type><name>count</name></type></parameter>, <parameter><type><name>extra</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>if (get(count,8) % z != 0) { \
        int cnt = get(count,8) % z; \
        cpu-&gt;res = get(dst,z) &lt;&lt; cnt | get(extra,z) &gt;&gt; (z - cnt); \
        set(dst, cpu-&gt;res,z); \
        SETRESFLAGS; \
    }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOT</name><parameter_list>(<parameter><type><name>val</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>set(val, ~get(val,z),z)</cpp:value></cpp:define> <comment type="line">// TODO flags</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEG</name><parameter_list>(<parameter><type><name>val</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>SETAF(0, val,z); \
    cpu-&gt;of = signed_overflow(sub, 0, get(val,z), cpu-&gt;res,z); \
    cpu-&gt;cf = unsigned_overflow(sub, 0, get(val,z), cpu-&gt;res,z); \
    set(val, cpu-&gt;res,z); SETRESFLAGS; break; \

#define GRP38(val) \
    switch (modrm.opcode) { \
        case 0: \
        case 1: TRACE("test imm"); \
                READIMM8; TEST(imm, val); break; \
        case 2: TRACE("not"); return INT_UNDEFINED; \
        case 3: TRACE("neg"); return INT_UNDEFINED; \
        case 4: TRACE("mul"); return INT_UNDEFINED; \
        case 5: TRACE("imul"); return INT_UNDEFINED; \
        case 6: TRACE("div"); \
                DIV(cpu-&gt;al, modrm_val8, cpu-&gt;ah); break; \
        case 7: TRACE("idiv"); \
                IDIV(oax, modrm_val, odx); break; \
        default: TRACE("undefined"); return INT_UNDEFINED; \
    }</cpp:value></cpp:define>

<comment type="line">// bits</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_bit</name><parameter_list>(<parameter><type><name>bit</name></type></parameter>, <parameter><type><name>val</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>((is_memory(val) ? \
      mem_read(addr + get(bit,z) / z * (z/8), z) : \
      get(val,z)) &amp; (1 &lt;&lt; (get(bit,z) % z))) ? 1 : 0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>msk</name><parameter_list>(<parameter><type><name>bit</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(1 &lt;&lt; (get(bit,z) % z))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BT</name><parameter_list>(<parameter><type><name>bit</name></type></parameter>, <parameter><type><name>val</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>cpu-&gt;cf = get_bit(bit, val,z);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BTC</name><parameter_list>(<parameter><type><name>bit</name></type></parameter>, <parameter><type><name>val</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>BT(bit, val,z); \
    set(val, get(val,z) ^ msk(bit,z),z)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BTS</name><parameter_list>(<parameter><type><name>bit</name></type></parameter>, <parameter><type><name>val</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>BT(bit, val,z); \
    set(val, get(val,z) | msk(bit,z),z)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BTR</name><parameter_list>(<parameter><type><name>bit</name></type></parameter>, <parameter><type><name>val</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>BT(bit, val,z); \
    set(val, get(val,z) &amp; ~msk(bit,z),z)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BSF</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>cpu-&gt;zf = get(src,z) == 0; \
    cpu-&gt;zf_res = 0; \
    if (!cpu-&gt;zf) set(dst, __builtin_ctz(get(src,z)),z)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BSR</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>cpu-&gt;zf = get(src,z) == 0; \
    cpu-&gt;zf_res = 0; \
    if (!cpu-&gt;zf) set(dst, z - __builtin_clz(get(src,z)),z)</cpp:value></cpp:define>

<comment type="line">// string instructions</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUMP_SI</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>if (!cpu-&gt;df) \
        cpu-&gt;esi += sz(size)/8; \
    else \
        cpu-&gt;esi -= sz(size)/8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUMP_DI</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>if (!cpu-&gt;df) \
        cpu-&gt;edi += sz(size)/8; \
    else \
        cpu-&gt;edi -= sz(size)/8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUMP_SI_DI</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>BUMP_SI(size); BUMP_DI(size)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>str_movs</name><parameter_list>(<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>mem_write(cpu-&gt;edi, mem_read(cpu-&gt;esi, z), z); \
    BUMP_SI_DI(z)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>str_stos</name><parameter_list>(<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>mem_write(cpu-&gt;edi, get(reg_a,z),z); \
    BUMP_DI(z)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>str_lods</name><parameter_list>(<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>set(reg_a, mem_read(cpu-&gt;esi, z),z); \
    BUMP_SI(z)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>str_scas</name><parameter_list>(<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>CMP(reg_a, mem_di,z); \
    BUMP_DI(z)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>str_cmps</name><parameter_list>(<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>CMP(mem_di, mem_si,z); \
    BUMP_SI_DI(z)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STR</name><parameter_list>(<parameter><type><name>op</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>str_##op(z)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP</name><parameter_list>(<parameter><type><name>op</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>while (cpu-&gt;ecx != 0) { \
        STR(op, z); \
        cpu-&gt;ecx--; \
    }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPNZ</name><parameter_list>(<parameter><type><name>op</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>while (cpu-&gt;ecx != 0) { \
        STR(op, z); \
        cpu-&gt;ecx--; \
        if (ZF) break; \
    }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPZ</name><parameter_list>(<parameter><type><name>op</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>while (cpu-&gt;ecx != 0) { \
        STR(op, z); \
        cpu-&gt;ecx--; \
        if (!ZF) break; \
    }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMPXCHG</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>CMP(reg_a, dst,z); \
    if (E) { \
        MOV(src, dst,z); \
    } else \
        MOV(dst, reg_a,z)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XADD</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>XCHG(src, dst,z); \
    ADD(src, dst,z)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BSWAP</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>set(dst, __builtin_bswap32(get(dst,32)),32)</cpp:value></cpp:define>

<comment type="line">// condition codes</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E</name></cpp:macro> <cpp:value>ZF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B</name></cpp:macro> <cpp:value>CF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BE</name></cpp:macro> <cpp:value>(CF | ZF)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L</name></cpp:macro> <cpp:value>(SF ^ OF)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LE</name></cpp:macro> <cpp:value>(L | ZF)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O</name></cpp:macro> <cpp:value>OF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P</name></cpp:macro> <cpp:value>PF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>SF</cpp:value></cpp:define>

<comment type="line">// control transfer</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_EIP</name></cpp:macro> \
    <cpp:value>if (OP_SIZE == 16) \
        cpu-&gt;eip &amp;= 0xffff</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JMP</name><parameter_list>(<parameter><type><name>loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cpu-&gt;eip = get(loc,); FIX_EIP;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JMP_REL</name><parameter_list>(<parameter><type><name>offset</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cpu-&gt;eip += get(offset,); FIX_EIP;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>J_REL</name><parameter_list>(<parameter><type><name>cond</name></type></parameter>, <parameter><type><name>offset</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>if (cond) { \
        cpu-&gt;eip += get(offset,); FIX_EIP; \
    }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JN_REL</name><parameter_list>(<parameter><type><name>cond</name></type></parameter>, <parameter><type><name>offset</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>if (!cond) { \
        cpu-&gt;eip += get(offset,); FIX_EIP; \
    }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JCXZ_REL</name><parameter_list>(<parameter><type><name>offset</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>J_REL(get(reg_c,oz) == 0, offset)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RET_NEAR</name><parameter_list>(<parameter><type><name>imm</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>POP(eip,32); FIX_EIP; cpu-&gt;esp += get(imm,16)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET</name><parameter_list>(<parameter><type><name>cond</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>set(val, (cond ? 1 : 0),8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETN</name><parameter_list>(<parameter><type><name>cond</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>set(val, (cond ? 0 : 1),8)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMOV</name><parameter_list>(<parameter><type><name>cond</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>, <parameter><type><name>src</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (cond) MOV(dst, src,z)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMOVN</name><parameter_list>(<parameter><type><name>cond</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>, <parameter><type><name>src</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (!cond) MOV(dst, src,z)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POPF</name><parameter_list>()</parameter_list></cpp:macro> \
    <cpp:value>POP(eflags,32); \
    expand_flags(cpu)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUSHF</name><parameter_list>()</parameter_list></cpp:macro> \
    <cpp:value>collapse_flags(cpu); \
    PUSH(eflags,oz)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STD</name></cpp:macro> <cpp:value>cpu-&gt;df = 1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLD</name></cpp:macro> <cpp:value>cpu-&gt;df = 0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AH_FLAG_MASK</name></cpp:macro> <cpp:value>0b11010101</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAHF</name></cpp:macro> \
    <cpp:value>cpu-&gt;eflags &amp;= 0xffffff00 | ~AH_FLAG_MASK; \
    cpu-&gt;eflags |= cpu-&gt;ah &amp; AH_FLAG_MASK; \
    expand_flags(cpu)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RDTSC</name></cpp:macro> \
    <cpp:value>imm = rdtsc(); \
    cpu-&gt;eax = imm &amp; 0xffffffff; \
    cpu-&gt;edx = imm &gt;&gt; 32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPUID</name><parameter_list>()</parameter_list></cpp:macro> \
    <cpp:value>do_cpuid(&amp;cpu-&gt;eax, &amp;cpu-&gt;ebx, &amp;cpu-&gt;ecx, &amp;cpu-&gt;edx)</cpp:value></cpp:define>

<comment type="line">// atomic</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_ADD</name></cpp:macro> <cpp:value>ADD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_OR</name></cpp:macro> <cpp:value>OR</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_ADC</name></cpp:macro> <cpp:value>ADC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_SBB</name></cpp:macro> <cpp:value>SBB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_AND</name></cpp:macro> <cpp:value>AND</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_SUB</name></cpp:macro> <cpp:value>SUB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_XOR</name></cpp:macro> <cpp:value>XOR</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_INC</name></cpp:macro> <cpp:value>INC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_DEC</name></cpp:macro> <cpp:value>DEC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_CMPXCHG</name></cpp:macro> <cpp:value>CMPXCHG</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_XADD</name></cpp:macro> <cpp:value>XADD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_BTS</name></cpp:macro> <cpp:value>BTS</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_BTR</name></cpp:macro> <cpp:value>BTR</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_BTC</name></cpp:macro> <cpp:value>BTC</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"emu/interp/fpu.h"</cpp:file></cpp:include>

<comment type="line">// fake sse</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLOAD</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>UNDEFINED</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VSTORE</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>UNDEFINED</cpp:value></cpp:define>

<comment type="line">// ok now include the decoding function</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECODER_RET</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECODER_NAME</name></cpp:macro> <cpp:value>cpu_step</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECODER_ARGS</name></cpp:macro> <cpp:value>struct cpu_state *cpu, struct tlb *tlb</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECODER_PASS_ARGS</name></cpp:macro> <cpp:value>cpu, tlb</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_SIZE</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"emu/decode.h"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OP_SIZE</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_SIZE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"emu/decode.h"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OP_SIZE</name></cpp:undef>

<comment type="line">// reads a modrm and maybe sib byte, computes the address, and adds it to</comment>
<comment type="line">// *addr_out, returns false if segfault while reading the bytes</comment>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>modrm_compute</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpu_state</name></name> <modifier>*</modifier></type><name>cpu</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tlb</name></name> <modifier>*</modifier></type><name>tlb</name></decl></parameter>, <parameter><decl><type><name>addr_t</name> <modifier>*</modifier></type><name>addr_out</name></decl></parameter>,
        <parameter><decl><type><name><name>struct</name> <name>modrm</name></name> <modifier>*</modifier></type><name>modrm</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>regptr</name></name> <modifier>*</modifier></type><name>modrm_regptr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>regptr</name></name> <modifier>*</modifier></type><name>modrm_base</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>modrm_decode32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cpu</name><operator>-&gt;</operator><name>eip</name></name></expr></argument>, <argument><expr><name>tlb</name></expr></argument>, <argument><expr><name>modrm</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>modrm_regptr</name> <operator>=</operator> <call><name>regptr_from_reg</name><argument_list>(<argument><expr><name><name>modrm</name><operator>-&gt;</operator><name>reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>modrm_base</name> <operator>=</operator> <call><name>regptr_from_reg</name><argument_list>(<argument><expr><name><name>modrm</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>modrm</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>modrm_reg</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>modrm</name><operator>-&gt;</operator><name>base</name></name> <operator>!=</operator> <name>reg_none</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><operator>*</operator><name>addr_out</name> <operator>+=</operator> <call><name>REGISTER</name><argument_list>(<argument><expr><operator>*</operator><name>modrm_base</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>addr_out</name> <operator>+=</operator> <name><name>modrm</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>modrm</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>modrm_mem_si</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>regptr</name></name></type> <name>index_reg</name> <init>= <expr><call><name>regptr_from_reg</name><argument_list>(<argument><expr><name><name>modrm</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><operator>*</operator><name>addr_out</name> <operator>+=</operator> <call><name>REGISTER</name><argument_list>(<argument><expr><name>index_reg</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name><name>modrm</name><operator>-&gt;</operator><name>shift</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>flatten</name> <name>__no_instrument</name> <name>void</name></type> <name>cpu_run</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpu_state</name></name> <modifier>*</modifier></type><name>cpu</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>tlb</name></name></type> <name>tlb</name> <init>= <expr><block>{<expr><operator>.</operator><name>mem</name> <operator>=</operator> <name><name>cpu</name><operator>-&gt;</operator><name>mem</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tlb_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tlb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>read_wrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cpu</name><operator>-&gt;</operator><name>mem</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>changes</name> <init>= <expr><name><name>cpu</name><operator>-&gt;</operator><name>mem</name><operator>-&gt;</operator><name>changes</name></name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>interrupt</name> <init>= <expr><call><name>cpu_step32</name><argument_list>(<argument><expr><name>cpu</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tlb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>interrupt</name> <operator>==</operator> <name>INT_NONE</name> <operator>&amp;&amp;</operator> <name>i</name><operator>++</operator> <operator>&gt;=</operator> <literal type="number">100000</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>interrupt</name> <operator>=</operator> <name>INT_TIMER</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>interrupt</name> <operator>!=</operator> <name>INT_NONE</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>cpu</name><operator>-&gt;</operator><name>trapno</name></name> <operator>=</operator> <name>interrupt</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>read_wrunlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cpu</name><operator>-&gt;</operator><name>mem</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>handle_interrupt</name><argument_list>(<argument><expr><name>interrupt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>read_wrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cpu</name><operator>-&gt;</operator><name>mem</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>tlb</name><operator>.</operator><name>mem</name></name> <operator>!=</operator> <name><name>cpu</name><operator>-&gt;</operator><name>mem</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>tlb</name><operator>.</operator><name>mem</name></name> <operator>=</operator> <name><name>cpu</name><operator>-&gt;</operator><name>mem</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>cpu</name><operator>-&gt;</operator><name>mem</name><operator>-&gt;</operator><name>changes</name></name> <operator>!=</operator> <name>changes</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>tlb_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tlb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>changes</name> <operator>=</operator> <name><name>cpu</name><operator>-&gt;</operator><name>mem</name><operator>-&gt;</operator><name>changes</name></name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>
</unit>
