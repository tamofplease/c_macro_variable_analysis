<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/emu/cpuid.h"><cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CPUID_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPUID_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"misc.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>do_cpuid</name><parameter_list>(<parameter><decl><type><name>dword_t</name> <modifier>*</modifier></type><name>eax</name></decl></parameter>, <parameter><decl><type><name>dword_t</name> <modifier>*</modifier></type><name>ebx</name></decl></parameter>, <parameter><decl><type><name>dword_t</name> <modifier>*</modifier></type><name>ecx</name></decl></parameter>, <parameter><decl><type><name>dword_t</name> <modifier>*</modifier></type><name>edx</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>dword_t</name></type> <name>leaf</name> <init>= <expr><operator>*</operator><name>eax</name></expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><name>leaf</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="number">0</literal></expr>:</case>
            <expr_stmt><expr><operator>*</operator><name>eax</name> <operator>=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt> <comment type="line">// we support barely anything</comment>
            <expr_stmt><expr><operator>*</operator><name>ebx</name> <operator>=</operator> <literal type="number">0x756e6547</literal></expr>;</expr_stmt> <comment type="line">// Genu</comment>
            <expr_stmt><expr><operator>*</operator><name>edx</name> <operator>=</operator> <literal type="number">0x49656e69</literal></expr>;</expr_stmt> <comment type="line">// ineI</comment>
            <expr_stmt><expr><operator>*</operator><name>ecx</name> <operator>=</operator> <literal type="number">0x6c65746e</literal></expr>;</expr_stmt> <comment type="line">// ntel</comment>
            <break>break;</break>
        <default>default:</default> <comment type="line">// if leaf is too high, use highest supported leaf</comment>
        <case>case <expr><literal type="number">1</literal></expr>:</case>
            <expr_stmt><expr><operator>*</operator><name>eax</name> <operator>=</operator> <literal type="number">0x0</literal></expr>;</expr_stmt> <comment type="line">// say nothing about cpu model number</comment>
            <expr_stmt><expr><operator>*</operator><name>ebx</name> <operator>=</operator> <literal type="number">0x0</literal></expr>;</expr_stmt> <comment type="line">// processor number 0, flushes 0 bytes on clflush</comment>
            <expr_stmt><expr><operator>*</operator><name>ecx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="line">// we support none of the features in ecx</comment>
            <expr_stmt><expr><operator>*</operator><name>edx</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator> <comment type="line">// fpu</comment>
                <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator> <comment type="line">// cmov</comment>
                <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">23</literal><operator>)</operator> <comment type="line">// mmx</comment>
                <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">26</literal><operator>)</operator></expr> <comment type="line">// sse2</comment>
                ;</expr_stmt>
            <break>break;</break>
    </block_content>}</block></switch>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
