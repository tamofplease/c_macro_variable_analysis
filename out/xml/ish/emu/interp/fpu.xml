<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/emu/interp/fpu.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"emu/float80.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"emu/fpu.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ty_real</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ty_real_##x</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ty_real_32</name></cpp:macro> <cpp:value>float</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ty_real_64</name></cpp:macro> <cpp:value>double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ty_real_80</name></cpp:macro> <cpp:value>float80</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mem_read_real</name><parameter_list>(<parameter><type><name>addr</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mem_read_ts(addr, ty_real(size), size)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mem_write_real</name><parameter_list>(<parameter><type><name>addr</name></type></parameter>, <parameter><type><name>val</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mem_write_ts(addr, val, ty_real(size), size)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_mem_addr_real</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mem_read_real(addr, size)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>set_mem_addr_real</name><parameter_list>(<parameter><type><name>to</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mem_write_real(addr, to, size)</cpp:value></cpp:define>

<comment type="line">// my god this is annoying</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f80_from_float</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>f80_from_float##z(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f80_from_float32</name></cpp:macro> <cpp:value>f80_from_double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f80_from_float64</name></cpp:macro> <cpp:value>f80_from_double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f80_from_float80</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f80_to_float</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>f80_to_float##z(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f80_to_float32</name></cpp:macro> <cpp:value>f80_to_double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f80_to_float64</name></cpp:macro> <cpp:value>f80_to_double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f80_to_float80</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cpu-&gt;fp[cpu-&gt;top + i]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST_i</name></cpp:macro> <cpp:value>ST(modrm.rm_opcode)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FPUSH</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>ftmp = val; cpu-&gt;top--; ST(0) = ftmp</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FPOP</name></cpp:macro> \
    <cpp:value>cpu-&gt;top++</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FXCH</name><parameter_list>()</parameter_list></cpp:macro> \
    <cpp:value>float80 ftmp = ST(0); ST(0) = ST_i; ST_i = ftmp</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st_0</name></cpp:macro> <cpp:value>ST(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st_i</name></cpp:macro> <cpp:value>ST(modrm.rm_opcode)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FADD</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>dst = f80_add(dst, src)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIADD</name><parameter_list>(<parameter><type><name>val</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>ST(0) = f80_add(ST(0), f80_from_int((sint(z)) get(val,z)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FADDM</name><parameter_list>(<parameter><type><name>val</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>ST(0) = f80_add(ST(0), f80_from_float(get(val,z),z))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSUB</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>dst = f80_sub(dst, src)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FISUB</name><parameter_list>(<parameter><type><name>val</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>ST(0) = f80_sub(ST(0), f80_from_int((sint(z)) get(val,z)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSUBM</name><parameter_list>(<parameter><type><name>val</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>ST(0) = f80_sub(ST(0), f80_from_float(get(val,z),z))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSUBR</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>dst = f80_sub(src, dst)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FISUBR</name><parameter_list>(<parameter><type><name>val</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>ST(0) = f80_sub(f80_from_int((sint(z)) get(val,z)), ST(0))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSUBRM</name><parameter_list>(<parameter><type><name>val</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>ST(0) = f80_sub(f80_from_float(get(val,z),z), ST(0))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMUL</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>dst = f80_mul(dst, src)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIMUL</name><parameter_list>(<parameter><type><name>val</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>ST(0) = f80_mul(ST(0), f80_from_int((sint(z)) get(val,z)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMULM</name><parameter_list>(<parameter><type><name>val</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>ST(0) = f80_mul(ST(0), f80_from_float(get(val,z),z))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FDIV</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>dst = f80_div(dst, src)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIDIV</name><parameter_list>(<parameter><type><name>val</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>ST(0) = f80_div(ST(0), f80_from_int((sint(z)) get(val,z)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FDIVM</name><parameter_list>(<parameter><type><name>val</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>ST(0) = f80_div(ST(0), f80_from_float(get(val,z),z))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FDIVR</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>dst = f80_div(src, dst)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIDIVR</name><parameter_list>(<parameter><type><name>val</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>ST(0) = f80_div(f80_from_int((sint(z)) get(val,z)), ST(0))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FDIVRM</name><parameter_list>(<parameter><type><name>val</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>ST(0) = f80_div(f80_from_float(get(val,z),z), ST(0))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FCHS</name><parameter_list>()</parameter_list></cpp:macro> \
    <cpp:value>ST(0) = f80_neg(ST(0))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FABS</name><parameter_list>()</parameter_list></cpp:macro> \
    <cpp:value>ST(0) = f80_abs(ST(0))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FPREM</name><parameter_list>()</parameter_list></cpp:macro> \
    <cpp:value>ST(0) = f80_mod(ST(0), ST(1))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FRNDINT</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>UNDEFINED</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSCALE</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>UNDEFINED</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FYL2X</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>UNDEFINED</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F2XM1</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>UNDEFINED</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSQRT</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>UNDEFINED</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUCOMI</name><parameter_list>()</parameter_list></cpp:macro> \
    <cpp:value>cpu-&gt;zf = f80_eq(ST(0), ST_i); \
    cpu-&gt;cf = f80_lt(ST(0), ST_i); \
    cpu-&gt;pf = 0; cpu-&gt;pf_res = 0</cpp:value></cpp:define>
<comment type="line">// not worrying about nans and shit yet</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FCOMI</name></cpp:macro> <cpp:value>FUCOMI</cpp:value></cpp:define>
<comment type="line">// FCOMI is supposed to be even more strict with NaNs. We still won't worry.</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_COMPARE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>cpu-&gt;c0 = f80_lt(ST(0), x); \
    cpu-&gt;c1 = 0; \
    cpu-&gt;c2 = 0; <comment type="block">/* again, not worrying about nans */</comment> \
    cpu-&gt;c3 = f80_eq(ST(0), x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FCOM</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>F_COMPARE(ST_i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUCOM</name></cpp:macro> <cpp:value>FCOM</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FCOMM</name><parameter_list>(<parameter><type><name>val</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>F_COMPARE(f80_from_float(get(val,z),z))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTST</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>F_COMPARE(fpu_consts[fconst_zero])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FICOM</name><parameter_list>(<parameter><type><name>val</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>UNDEFINED</cpp:value></cpp:define> <comment type="line">// nyehhh</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILD</name><parameter_list>(<parameter><type><name>val</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>FPUSH(f80_from_int((sint(z)) get(val,z)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLD</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>FPUSH(ST_i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLDM</name><parameter_list>(<parameter><type><name>val</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>FPUSH(f80_from_float(get(val,z),z))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLDC</name><parameter_list>(<parameter><type><name>what</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FPUSH(fpu_consts[fconst_##what])</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSTM</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>set(dst, f80_to_float(ST(0),z),z)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIST</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>set(dst, f80_to_int(ST(0)),z)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FST</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>ST_i = ST(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSTSW</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>set(dst, cpu-&gt;fsw,16)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSTCW</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>set(dst, cpu-&gt;fcw,16)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLDCW</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>cpu-&gt;fcw = get(dst,16)</cpp:value></cpp:define>

<comment type="line">// there's no native atan2 for 80-bit float yet.</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FPATAN</name><parameter_list>()</parameter_list></cpp:macro> \
    <cpp:value>ST(1) = f80_from_double(atan2(f80_to_double(ST(1)), f80_to_double(ST(0)))); \
    FPOP</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FXAM</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>UNDEFINED</cpp:value></cpp:define>
</unit>
