<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/emu/memory.h"><cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MEMORY_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMORY_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdatomic.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"emu/mmu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util/list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util/sync.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"misc.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ENGINE_JIT</name></expr></cpp:if>
<struct_decl>struct <name>jit</name>;</struct_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>mem</name> <block>{
    <decl_stmt><decl><type><name><name>struct</name> <name>pt_entry</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>pgdir</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>pgdir_used</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ENGINE_JIT</name></expr></cpp:if>
    <decl_stmt><decl><type><name><name>struct</name> <name>jit</name></name> <modifier>*</modifier></type><name>jit</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name><name>struct</name> <name>mmu</name></name></type> <name>mmu</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>wrlock_t</name></type> <name>lock</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEM_PAGES</name></cpp:macro> <cpp:value>(1 &lt;&lt; 20)</cpp:value></cpp:define> <comment type="line">// at least on 32-bit</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEM_PGDIR_SIZE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 10)</cpp:value></cpp:define>

<comment type="line">// Initialize the address space</comment>
<function_decl><type><name>void</name></type> <name>mem_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mem</name></name> <modifier>*</modifier></type><name>mem</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="line">// Uninitialize the address space</comment>
<function_decl><type><name>void</name></type> <name>mem_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mem</name></name> <modifier>*</modifier></type><name>mem</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="line">// Return the pagetable entry for the given page</comment>
<function_decl><type><name><name>struct</name> <name>pt_entry</name></name> <modifier>*</modifier></type><name>mem_pt</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mem</name></name> <modifier>*</modifier></type><name>mem</name></decl></parameter>, <parameter><decl><type><name>page_t</name></type> <name>page</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="line">// Increment *page, skipping over unallocated page directories. Intended to be</comment>
<comment type="line">// used as the incremenent in a for loop to traverse mappings.</comment>
<function_decl><type><name>void</name></type> <name>mem_next_page</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mem</name></name> <modifier>*</modifier></type><name>mem</name></decl></parameter>, <parameter><decl><type><name>page_t</name> <modifier>*</modifier></type><name>page</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BYTES_ROUND_DOWN</name><parameter_list>(<parameter><type><name>bytes</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(PAGE(bytes) &lt;&lt; PAGE_BITS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BYTES_ROUND_UP</name><parameter_list>(<parameter><type><name>bytes</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(PAGE_ROUND_UP(bytes) &lt;&lt; PAGE_BITS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEAK_DEBUG</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<struct>struct <name>data</name> <block>{
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt> <comment type="line">// immutable</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt> <comment type="line">// also immutable</comment>
    <decl_stmt><decl><type><name>atomic_uint</name></type> <name>refcount</name></decl>;</decl_stmt>

    <comment type="line">// for display in /proc/pid/maps</comment>
    <decl_stmt><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>file_offset</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LEAK_DEBUG</name></expr></cpp:if>
    <decl_stmt><decl><type><name>int</name></type> <name>pid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>addr_t</name></type> <name>dest</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</struct>
<struct>struct <name>pt_entry</name> <block>{
    <decl_stmt><decl><type><name><name>struct</name> <name>data</name></name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>offset</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>flags</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ENGINE_JIT</name></expr></cpp:if>
    <decl_stmt><decl><type><name><name>struct</name> <name>list</name></name></type> <name><name>blocks</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</struct>
<comment type="line">// page flags</comment>
<comment type="line">// P_READ and P_EXEC are ignored for now</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_READ</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_WRITE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>P_EXEC</name></cpp:undef> <comment type="line">// defined in sys/proc.h on darwin</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_EXEC</name></cpp:macro> <cpp:value>(1 &lt;&lt; 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_RWX</name></cpp:macro> <cpp:value>(P_READ | P_WRITE | P_EXEC)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_GROWSDOWN</name></cpp:macro> <cpp:value>(1 &lt;&lt; 3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_COW</name></cpp:macro> <cpp:value>(1 &lt;&lt; 4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_WRITABLE</name><parameter_list>(<parameter><type><name>flags</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(flags &amp; P_WRITE &amp;&amp; !(flags &amp; P_COW))</cpp:value></cpp:define>

<comment type="line">// mapping was created with pt_map_nothing</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_ANONYMOUS</name></cpp:macro> <cpp:value>(1 &lt;&lt; 6)</cpp:value></cpp:define>
<comment type="line">// mapping was created with MAP_SHARED, should not CoW</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_SHARED</name></cpp:macro> <cpp:value>(1 &lt;&lt; 7)</cpp:value></cpp:define>

<function_decl><type><name>bool</name></type> <name>pt_is_hole</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mem</name></name> <modifier>*</modifier></type><name>mem</name></decl></parameter>, <parameter><decl><type><name>page_t</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>pages_t</name></type> <name>pages</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>page_t</name></type> <name>pt_find_hole</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mem</name></name> <modifier>*</modifier></type><name>mem</name></decl></parameter>, <parameter><decl><type><name>pages_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// Map memory + offset into fake memory, unmapping existing mappings. Takes</comment>
<comment type="line">// ownership of memory. It will be freed with:</comment>
<comment type="line">// munmap(memory, pages * PAGE_SIZE)</comment>
<function_decl><type><name>int</name></type> <name>pt_map</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mem</name></name> <modifier>*</modifier></type><name>mem</name></decl></parameter>, <parameter><decl><type><name>page_t</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>pages_t</name></type> <name>pages</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>memory</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="line">// Map empty space into fake memory</comment>
<function_decl><type><name>int</name></type> <name>pt_map_nothing</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mem</name></name> <modifier>*</modifier></type><name>mem</name></decl></parameter>, <parameter><decl><type><name>page_t</name></type> <name>page</name></decl></parameter>, <parameter><decl><type><name>pages_t</name></type> <name>pages</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="line">// Unmap fake memory, return -1 if any part of the range isn't mapped and 0 otherwise</comment>
<function_decl><type><name>int</name></type> <name>pt_unmap</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mem</name></name> <modifier>*</modifier></type><name>mem</name></decl></parameter>, <parameter><decl><type><name>page_t</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>pages_t</name></type> <name>pages</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="line">// like pt_unmap but doesn't care if part of the range isn't mapped</comment>
<function_decl><type><name>int</name></type> <name>pt_unmap_always</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mem</name></name> <modifier>*</modifier></type><name>mem</name></decl></parameter>, <parameter><decl><type><name>page_t</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>pages_t</name></type> <name>pages</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="line">// Set the flags on memory</comment>
<function_decl><type><name>int</name></type> <name>pt_set_flags</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mem</name></name> <modifier>*</modifier></type><name>mem</name></decl></parameter>, <parameter><decl><type><name>page_t</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>pages_t</name></type> <name>pages</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="line">// Copy pages from src memory to dst memory using copy-on-write</comment>
<function_decl><type><name>int</name></type> <name>pt_copy_on_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mem</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>mem</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>page_t</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>page_t</name></type> <name>pages</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// Must call with mem read-locked.</comment>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>mem_ptr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mem</name></name> <modifier>*</modifier></type><name>mem</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>mem_segv_reason</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mem</name></name> <modifier>*</modifier></type><name>mem</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>addr</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>extern</specifier> <name>size_t</name></type> <name>real_page_size</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
