<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/emu/float80.h"><cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FLOAT80_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLOAT80_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"misc.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>signif</name></decl>;</decl_stmt>
    <union>union <block>{
        <decl_stmt><decl><type><name>uint16_t</name></type> <name>signExp</name></decl>;</decl_stmt>
        <struct>struct <block>{
            <decl_stmt><decl><type><name>unsigned</name></type> <name>exp</name><range>:<expr><literal type="number">15</literal></expr></range></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>unsigned</name></type> <name>sign</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
        }</block>;</struct>
    }</block>;</union>
}</block></struct></type> <name>float80</name>;</typedef>

<function_decl><type><name>float80</name></type> <name>f80_from_int</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>i</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int64_t</name></type> <name>f80_to_int</name><parameter_list>(<parameter><decl><type><name>float80</name></type> <name>f</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>float80</name></type> <name>f80_from_double</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>d</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>double</name></type> <name>f80_to_double</name><parameter_list>(<parameter><decl><type><name>float80</name></type> <name>f</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>float80</name></type> <name>f80_round</name><parameter_list>(<parameter><decl><type><name>float80</name></type> <name>f</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>f80_isnan</name><parameter_list>(<parameter><decl><type><name>float80</name></type> <name>f</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>f80_isinf</name><parameter_list>(<parameter><decl><type><name>float80</name></type> <name>f</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>f80_iszero</name><parameter_list>(<parameter><decl><type><name>float80</name></type> <name>f</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>f80_isdenormal</name><parameter_list>(<parameter><decl><type><name>float80</name></type> <name>f</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>f80_is_supported</name><parameter_list>(<parameter><decl><type><name>float80</name></type> <name>f</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>float80</name></type> <name>f80_add</name><parameter_list>(<parameter><decl><type><name>float80</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>float80</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>float80</name></type> <name>f80_sub</name><parameter_list>(<parameter><decl><type><name>float80</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>float80</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>float80</name></type> <name>f80_mul</name><parameter_list>(<parameter><decl><type><name>float80</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>float80</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>float80</name></type> <name>f80_div</name><parameter_list>(<parameter><decl><type><name>float80</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>float80</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>float80</name></type> <name>f80_mod</name><parameter_list>(<parameter><decl><type><name>float80</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>float80</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>float80</name></type> <name>f80_rem</name><parameter_list>(<parameter><decl><type><name>float80</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>float80</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>f80_lt</name><parameter_list>(<parameter><decl><type><name>float80</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>float80</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>f80_eq</name><parameter_list>(<parameter><decl><type><name>float80</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>float80</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>f80_uncomparable</name><parameter_list>(<parameter><decl><type><name>float80</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>float80</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>float80</name></type> <name>f80_neg</name><parameter_list>(<parameter><decl><type><name>float80</name></type> <name>f</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>float80</name></type> <name>f80_abs</name><parameter_list>(<parameter><decl><type><name>float80</name></type> <name>f</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>float80</name></type> <name>f80_log2</name><parameter_list>(<parameter><decl><type><name>float80</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>float80</name></type> <name>f80_sqrt</name><parameter_list>(<parameter><decl><type><name>float80</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>float80</name></type> <name>f80_scale</name><parameter_list>(<parameter><decl><type><name>float80</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// Used to implement fxtract</comment>
<function_decl><type><name>void</name></type> <name>f80_xtract</name><parameter_list>(<parameter><decl><type><name>float80</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>, <parameter><decl><type><name>float80</name> <modifier>*</modifier></type><name>signif</name></decl></parameter>)</parameter_list>;</function_decl>

<enum>enum <name>f80_rounding_mode</name> <block>{
    <decl><name>round_to_nearest</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
    <decl><name>round_down</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
    <decl><name>round_up</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
    <decl><name>round_chop</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
}</block>;</enum>
<decl_stmt><decl><type><specifier>extern</specifier> <name>__thread</name> <name><name>enum</name> <name>f80_rounding_mode</name></name></type> <name>f80_rounding_mode</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F80_NAN</name></cpp:macro> <cpp:value>((float80) {.signif = 0xc000000000000000, .exp = 0x7fff, .sign = 0})</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F80_INF</name></cpp:macro> <cpp:value>((float80) {.signif = 0x8000000000000000, .exp = 0x7fff, .sign = 0})</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
