<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/emu/mmu.h"><cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>EMU_CPU_MEM_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EMU_CPU_MEM_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"misc.h"</cpp:file></cpp:include>

<comment type="line">// top 20 bits of an address, i.e. address &gt;&gt; 12</comment>
<typedef>typedef <type><name>dword_t</name></type> <name>page_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAD_PAGE</name></cpp:macro> <cpp:value>0x10000</cpp:value></cpp:define>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__KERNEL__</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAGE_BITS</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PAGE_SIZE</name></cpp:undef> <comment type="line">// defined in system headers somewhere</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAGE_SIZE</name></cpp:macro> <cpp:value>(1 &lt;&lt; PAGE_BITS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAGE</name><parameter_list>(<parameter><type><name>addr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((addr) &gt;&gt; PAGE_BITS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PGOFFSET</name><parameter_list>(<parameter><type><name>addr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((addr) &amp; (PAGE_SIZE - 1))</cpp:value></cpp:define>
<typedef>typedef <type><name>dword_t</name></type> <name>pages_t</name>;</typedef>
<comment type="line">// bytes MUST be unsigned if you would like this to overflow to zero</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAGE_ROUND_UP</name><parameter_list>(<parameter><type><name>bytes</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(PAGE((bytes) + PAGE_SIZE - 1))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>mmu</name> <block>{
    <decl_stmt><decl><type><name><name>struct</name> <name>mmu_ops</name></name> <modifier>*</modifier></type><name>ops</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>jit</name></name> <modifier>*</modifier></type><name>jit</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>changes</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEM_READ</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEM_WRITE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEM_WRITE_PTRACE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<struct>struct <name>mmu_ops</name> <block>{
    <comment type="line">// type is MEM_READ or MEM_WRITE</comment>
    <function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>translate</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mmu</name></name> <modifier>*</modifier></type><name>mmu</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>mmu_translate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mmu</name></name> <modifier>*</modifier></type><name>mmu</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>mmu</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>translate</name></name><argument_list>(<argument><expr><name>mmu</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
