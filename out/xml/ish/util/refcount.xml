<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/util/refcount.h"><cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>UTIL_REFCOUNT_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UTIL_REFCOUNT_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdatomic.h&gt;</cpp:file></cpp:include>

<comment type="line">// An industrial-strength refcounting implementation.</comment>
<comment type="line">// Safety first! Make sure to:</comment>
<comment type="line">// - Write a release for every retain</comment>
<comment type="line">// - Get exclusive access to the reference before retaining or releasing it</comment>

<struct>struct <name>refcount</name> <block>{
    <decl_stmt><decl><type><name>atomic_uint</name></type> <name>rc</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>__refcount_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>refcount</name></name> <modifier>*</modifier></type><name>refcount</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>refcount</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>refcount_init</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__refcount_init(&amp;(obj)-&gt;refcount)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>__refcount_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>refcount</name></name> <modifier>*</modifier></type><name>refcount</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>refcount</name><operator>-&gt;</operator><name>rc</name></name></expr>;</return>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>refcount_get</name><parameter_list>(<parameter><type><name>obj</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__refcount_get(&amp;(obj)-&gt;refcount)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECLARE_REFCOUNT</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>void type##_retain(struct type *obj); \
    void type##_release(struct type *obj)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__DEFINE_REFCOUNT</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>qualifiers</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>qualifiers struct type *type##_retain(struct type *obj) { \
        obj-&gt;refcount.rc++; \
        return obj; \
    } \
    static void type##_cleanup(struct type *obj); \
    qualifiers void type##_release(struct type *obj) { \
        if (--obj-&gt;refcount.rc == 0) \
            type##_cleanup(obj); \
    }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFINE_REFCOUNT</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__DEFINE_REFCOUNT(type, )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFINE_REFCOUNT_STATIC</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__DEFINE_REFCOUNT(type, static)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
