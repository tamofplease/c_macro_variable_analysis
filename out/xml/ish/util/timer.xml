<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/util/timer.h"><cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>UTIL_TIMER_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UTIL_TIMER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util/sync.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>timespec</name></name></type> <name>timespec_now</name><parameter_list>(<parameter><decl><type><name>clockid_t</name></type> <name>clockid</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>clockid</name> <operator>==</operator> <name>CLOCK_MONOTONIC</name> <operator>||</operator> <name>clockid</name> <operator>==</operator> <name>CLOCK_REALTIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>now</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>clock_gettime</name><argument_list>(<argument><expr><name>clockid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// can't fail, according to posix spec</comment>
    <return>return <expr><name>now</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>timespec</name></name></type> <name>timespec_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>x</name><operator>.</operator><name>tv_sec</name></name> <operator>+=</operator> <name><name>y</name><operator>.</operator><name>tv_sec</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>x</name><operator>.</operator><name>tv_nsec</name></name> <operator>+=</operator> <name><name>y</name><operator>.</operator><name>tv_nsec</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>x</name><operator>.</operator><name>tv_nsec</name></name> <operator>&gt;=</operator> <literal type="number">1000000000</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>x</name><operator>.</operator><name>tv_nsec</name></name> <operator>-=</operator> <literal type="number">1000000000</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>x</name><operator>.</operator><name>tv_sec</name></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>timespec</name></name></type> <name>timespec_subtract</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>result</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>x</name><operator>.</operator><name>tv_nsec</name></name> <operator>&lt;</operator> <name><name>y</name><operator>.</operator><name>tv_nsec</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>x</name><operator>.</operator><name>tv_sec</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>x</name><operator>.</operator><name>tv_nsec</name></name> <operator>+=</operator> <literal type="number">1000000000</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>result</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>x</name><operator>.</operator><name>tv_sec</name></name> <operator>-</operator> <name><name>y</name><operator>.</operator><name>tv_sec</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>result</name><operator>.</operator><name>tv_nsec</name></name> <operator>=</operator> <name><name>x</name><operator>.</operator><name>tv_nsec</name></name> <operator>-</operator> <name><name>y</name><operator>.</operator><name>tv_nsec</name></name></expr>;</expr_stmt>
    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>timespec_is_zero</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>ts</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>ts</name><operator>.</operator><name>tv_sec</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ts</name><operator>.</operator><name>tv_nsec</name></name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>timespec_positive</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>ts</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>ts</name><operator>.</operator><name>tv_sec</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name><name>ts</name><operator>.</operator><name>tv_sec</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ts</name><operator>.</operator><name>tv_nsec</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>timespec</name></name></type> <name>timespec_normalize</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>ts</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>ts</name><operator>.</operator><name>tv_sec</name></name> <operator>+=</operator> <name><name>ts</name><operator>.</operator><name>tv_nsec</name></name> <operator>/</operator> <literal type="number">1000000000</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ts</name><operator>.</operator><name>tv_nsec</name></name> <operator>%=</operator> <literal type="number">1000000000</literal></expr>;</expr_stmt>
    <return>return <expr><name>ts</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>timer_callback_t</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<struct>struct <name>timer</name> <block>{
    <decl_stmt><decl><type><name>clockid_t</name></type> <name>clockid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>start</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>end</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>interval</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>active</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>thread_running</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>pthread_t</name></type> <name>thread</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>timer_callback_t</name></type> <name>callback</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>lock_t</name></type> <name>lock</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>dead</name></decl>;</decl_stmt> <comment type="line">// set by timer_free, the thread will free the timer if this is set when it finishes</comment>
}</block>;</struct>

<function_decl><type><name><name>struct</name> <name>timer</name></name> <modifier>*</modifier></type><name>timer_new</name><parameter_list>(<parameter><decl><type><name>clockid_t</name></type> <name>clockid</name></decl></parameter>, <parameter><decl><type><name>timer_callback_t</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>timer_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>timer</name></name> <modifier>*</modifier></type><name>timer</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="line">// value is how long to wait until the next fire</comment>
<comment type="line">// interval is how long after that to wait until the next fire (if non-zero)</comment>
<comment type="line">// bizzare interface is based off setitimer, because this is going to be used</comment>
<comment type="line">// to implement setitimer</comment>
<struct>struct <name>timer_spec</name> <block>{
    <decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>value</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>interval</name></decl>;</decl_stmt>
}</block>;</struct>
<function_decl><type><name>int</name></type> <name>timer_set</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>timer</name></name> <modifier>*</modifier></type><name>timer</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timer_spec</name></name></type> <name>spec</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timer_spec</name></name> <modifier>*</modifier></type><name>oldspec</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
