<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/util/list.h"><cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LIST_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIST_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<struct>struct <name>list</name> <block>{
    <decl_stmt><decl><type><name><name>struct</name> <name>list</name></name> <modifier>*</modifier></type><name>next</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__KERNEL__</name></cpp:ifndef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>list_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>list</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>list</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIST_INITIALIZER</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{.prev = &amp;x, .next = &amp;x}</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>list_null</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>list</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>list</name><operator>-&gt;</operator><name>prev</name></name> <operator>==</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>list_empty</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>list</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>list</name> <operator>||</operator> <call><name>list_null</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>_list_add_between</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>list</name></name> <modifier>*</modifier></type><name>prev</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>list</name></name> <modifier>*</modifier></type><name>next</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>list</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>list_add_tail</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>list</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>_list_add_between</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>list_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>list</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>_list_add_between</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>list_add_before</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>list</name></name> <modifier>*</modifier></type><name>before</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>list</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>list_add_tail</name><argument_list>(<argument><expr><name>before</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>list_add_after</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>list</name></name> <modifier>*</modifier></type><name>after</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>list</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>list_add</name><argument_list>(<argument><expr><name>after</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>list_init_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>list</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>list_null</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>list_init</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>list_add</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>list_remove</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>list</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>list_remove_safe</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>list</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>list_null</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>list_remove</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>list_entry</name><parameter_list>(<parameter><type><name>item</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>member</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>container_of(item, type, member)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>list_first_entry</name><parameter_list>(<parameter><type><name>list</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>member</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>list_entry((list)-&gt;next, type, member)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>list_next_entry</name><parameter_list>(<parameter><type><name>item</name></type></parameter>, <parameter><type><name>member</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>list_entry((item)-&gt;member.next, typeof(*(item)), member)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>list_for_each</name><parameter_list>(<parameter><type><name>list</name></type></parameter>, <parameter><type><name>item</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>for (item = (list)-&gt;next; item != (list); item = item-&gt;next)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>list_for_each_safe</name><parameter_list>(<parameter><type><name>list</name></type></parameter>, <parameter><type><name>item</name></type></parameter>, <parameter><type><name>tmp</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>for (item = (list)-&gt;next, tmp = item-&gt;next; item != (list); \
            item = tmp, tmp = item-&gt;next)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>list_for_each_entry</name><parameter_list>(<parameter><type><name>list</name></type></parameter>, <parameter><type><name>item</name></type></parameter>, <parameter><type><name>member</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>for (item = list_entry((list)-&gt;next, typeof(*item), member); \
            &amp;item-&gt;member != (list); \
            item = list_entry(item-&gt;member.next, typeof(*item), member))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>list_for_each_entry_safe</name><parameter_list>(<parameter><type><name>list</name></type></parameter>, <parameter><type><name>item</name></type></parameter>, <parameter><type><name>tmp</name></type></parameter>, <parameter><type><name>member</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>for (item = list_first_entry(list, typeof(*(item)), member), \
            tmp = list_next_entry(item, member); \
            &amp;item-&gt;member != (list); \
            item = tmp, tmp = list_next_entry(item, member))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name> <name>long</name></type> <name>list_size</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>list</name></name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
    <macro><name>list_for_each</name><argument_list>(<argument>list</argument>, <argument>item</argument>)</argument_list></macro> <block>{<block_content>
        <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block>
    <return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
