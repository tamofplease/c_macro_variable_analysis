<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/kernel/group.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util/list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kernel/calls.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kernel/task.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fs/tty.h"</cpp:file></cpp:include>

<function><type><name>dword_t</name></type> <name>sys_setpgid</name><parameter_list>(<parameter><decl><type><name>pid_t_</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>pid_t_</name></type> <name>pgid</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>STRACE</name><argument_list>(<argument><expr><literal type="string">"setpgid(%d, %d)"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>pgid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>id</name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>pid</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>pgid</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>pgid</name> <operator>=</operator> <name>id</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pids_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>pid</name></name> <modifier>*</modifier></type><name>pid</name> <init>= <expr><call><name>pid_get</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>_ESRCH</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pid</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>task</name></name> <modifier>*</modifier></type><name>task</name> <init>= <expr><name><name>pid</name><operator>-&gt;</operator><name>task</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>task</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>tgroup</name></name> <modifier>*</modifier></type><name>tgroup</name> <init>= <expr><name><name>task</name><operator>-&gt;</operator><name>group</name></name></expr></init></decl>;</decl_stmt>

    <comment type="line">// you can only join a process group in the same session</comment>
    <if_stmt><if>if <condition>(<expr><name>id</name> <operator>!=</operator> <name>pgid</name></expr>)</condition> <block>{<block_content>
        <comment type="line">// there has to be a process in pgrp that's in the same session as id</comment>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>_EPERM</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>struct</name> <name>pid</name></name> <modifier>*</modifier></type><name>group_pid</name> <init>= <expr><call><name>pid_get</name><argument_list>(<argument><expr><name>pgid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>group_pid</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>list_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>group_pid</name><operator>-&gt;</operator><name>pgroup</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name><name>struct</name> <name>tgroup</name></name> <modifier>*</modifier></type><name>group_first_tgroup</name> <init>= <expr><call><name>list_first_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>group_pid</name><operator>-&gt;</operator><name>pgroup</name></name></expr></argument>, <argument><expr>struct <name>tgroup</name></expr></argument>, <argument><expr><name>pgroup</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>tgroup</name><operator>-&gt;</operator><name>sid</name></name> <operator>!=</operator> <name><name>group_first_tgroup</name><operator>-&gt;</operator><name>sid</name></name></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// you can only change the process group of yourself or a child</comment>
    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>_ESRCH</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>task</name> <operator>!=</operator> <name>current</name> <operator>&amp;&amp;</operator> <name><name>task</name><operator>-&gt;</operator><name>parent</name></name> <operator>!=</operator> <name>current</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
    <comment type="line">// a session leader cannot create a process group</comment>
    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>_EPERM</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>tgroup</name><operator>-&gt;</operator><name>sid</name></name> <operator>==</operator> <name><name>tgroup</name><operator>-&gt;</operator><name>leader</name><operator>-&gt;</operator><name>pid</name></name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

    <comment type="line">// TODO cannot set process group of a child that has done exec</comment>

    <if_stmt><if>if <condition>(<expr><name><name>tgroup</name><operator>-&gt;</operator><name>pgid</name></name> <operator>!=</operator> <name>pgid</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>list_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tgroup</name><operator>-&gt;</operator><name>pgroup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>tgroup</name><operator>-&gt;</operator><name>pgid</name></name> <operator>=</operator> <name>pgid</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>list_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pid</name><operator>-&gt;</operator><name>pgroup</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tgroup</name><operator>-&gt;</operator><name>pgroup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<label><name>out</name>:</label>
    <expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pids_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>dword_t</name></type> <name>sys_setpgrp</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>sys_setpgid</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>pid_t_</name></type> <name>sys_getpgid</name><parameter_list>(<parameter><decl><type><name>pid_t_</name></type> <name>pid</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>STRACE</name><argument_list>(<argument><expr><literal type="string">"getpgid(%d)"</literal></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pids_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>task</name></name> <modifier>*</modifier></type><name>task</name> <init>= <expr><name>current</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pid</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>task</name> <operator>=</operator> <call><name>pid_get_task</name><argument_list>(<argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>task</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pids_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>_ESRCH</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>pid</name> <operator>=</operator> <name><name>task</name><operator>-&gt;</operator><name>group</name><operator>-&gt;</operator><name>pgid</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pids_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>pid</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>pid_t_</name></type> <name>sys_getpgrp</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>sys_getpgid</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Must lock pids_lock and task-&gt;group-&gt;lock</comment>
<function><type><name>void</name></type> <name>task_leave_session</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>task</name></name> <modifier>*</modifier></type><name>task</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>tgroup</name></name> <modifier>*</modifier></type><name>group</name> <init>= <expr><name><name>task</name><operator>-&gt;</operator><name>group</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>list_remove_safe</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>group</name><operator>-&gt;</operator><name>session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>group</name><operator>-&gt;</operator><name>tty</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ttys_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>list_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>pid_get</name><argument_list>(<argument><expr><name><name>group</name><operator>-&gt;</operator><name>sid</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>session</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>group</name><operator>-&gt;</operator><name>tty</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>group</name><operator>-&gt;</operator><name>tty</name><operator>-&gt;</operator><name>session</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>group</name><operator>-&gt;</operator><name>tty</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>tty_release</name><argument_list>(<argument><expr><name><name>group</name><operator>-&gt;</operator><name>tty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>group</name><operator>-&gt;</operator><name>tty</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ttys_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>pid_t_</name></type> <name>task_setsid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>task</name></name> <modifier>*</modifier></type><name>task</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pids_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>tgroup</name></name> <modifier>*</modifier></type><name>group</name> <init>= <expr><name><name>task</name><operator>-&gt;</operator><name>group</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>pid_t_</name></type> <name>new_sid</name> <init>= <expr><name><name>group</name><operator>-&gt;</operator><name>leader</name><operator>-&gt;</operator><name>pid</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>group</name><operator>-&gt;</operator><name>pgid</name></name> <operator>==</operator> <name>new_sid</name> <operator>||</operator> <name><name>group</name><operator>-&gt;</operator><name>sid</name></name> <operator>==</operator> <name>new_sid</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pids_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>_EPERM</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>task_leave_session</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>pid</name></name> <modifier>*</modifier></type><name>pid</name> <init>= <expr><call><name>pid_get</name><argument_list>(<argument><expr><name><name>task</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>list_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pid</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>group</name><operator>-&gt;</operator><name>session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>group</name><operator>-&gt;</operator><name>sid</name></name> <operator>=</operator> <name>new_sid</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>list_remove_safe</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>group</name><operator>-&gt;</operator><name>pgroup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>list_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pid</name><operator>-&gt;</operator><name>pgroup</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>group</name><operator>-&gt;</operator><name>pgroup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>group</name><operator>-&gt;</operator><name>pgid</name></name> <operator>=</operator> <name>new_sid</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pids_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>new_sid</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>dword_t</name></type> <name>sys_setsid</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>STRACE</name><argument_list>(<argument><expr><literal type="string">"setsid()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>task_setsid</name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>dword_t</name></type> <name>sys_getsid</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>STRACE</name><argument_list>(<argument><expr><literal type="string">"getsid()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pids_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>pid_t_</name></type> <name>sid</name> <init>= <expr><name><name>current</name><operator>-&gt;</operator><name>group</name><operator>-&gt;</operator><name>sid</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pids_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>sid</name></expr>;</return>
</block_content>}</block></function>

</unit>
