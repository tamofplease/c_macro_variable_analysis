<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/kernel/fs_info.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kernel/fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fs/fd.h"</cpp:file></cpp:include>

<function><type><name><name>struct</name> <name>fs_info</name></name> <modifier>*</modifier></type><name>fs_info_new</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>fs_info</name></name> <modifier>*</modifier></type><name>fs</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>fs_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>fs</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>refcount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>umask</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>pwd</name></name> <operator>=</operator> <name><name>fs</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lock_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fs</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>fs</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>fs_info</name></name> <modifier>*</modifier></type><name>fs_info_copy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fs_info</name></name> <modifier>*</modifier></type><name>fs</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>fs_info</name></name> <modifier>*</modifier></type><name>new_fs</name> <init>= <expr><call><name>fs_info_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>new_fs</name><operator>-&gt;</operator><name>umask</name></name> <operator>=</operator> <name><name>fs</name><operator>-&gt;</operator><name>umask</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>new_fs</name><operator>-&gt;</operator><name>pwd</name></name> <operator>=</operator> <call><name>fd_retain</name><argument_list>(<argument><expr><name><name>fs</name><operator>-&gt;</operator><name>pwd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>new_fs</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <call><name>fd_retain</name><argument_list>(<argument><expr><name><name>fs</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>new_fs</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>fs_info_release</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fs_info</name></name> <modifier>*</modifier></type><name>fs</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>fs</name><operator>-&gt;</operator><name>refcount</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>fd_close</name><argument_list>(<argument><expr><name><name>fs</name><operator>-&gt;</operator><name>pwd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fd_close</name><argument_list>(<argument><expr><name><name>fs</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
