<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/kernel/tls.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kernel/calls.h"</cpp:file></cpp:include>

<struct>struct <name>user_desc</name> <block>{
    <decl_stmt><decl><type><name>dword_t</name></type> <name>entry_number</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dword_t</name></type> <name>base_addr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dword_t</name></type> <name>limit</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>seg_32bit</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>contents</name><range>:<expr><literal type="number">2</literal></expr></range></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>read_exec_only</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>limit_in_pages</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>seg_not_present</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>useable</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>int</name></type> <name>task_set_thread_area</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>task</name></name> <modifier>*</modifier></type><name>task</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>u_info</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>user_desc</name></name></type> <name>info</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>user_get_task</name><argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><name>u_info</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_EFAULT</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="line">// On a real system, TLS works by creating a special segment pointing to</comment>
    <comment type="line">// the TLS buffer. Our shitty emulation of that is to ignore attempts to</comment>
    <comment type="line">// modify GS and add this address to any memory reference that uses GS.</comment>
    <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>cpu</name><operator>.</operator><name>tls_ptr</name></name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>base_addr</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>entry_number</name></name> <operator>==</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>info</name><operator>.</operator><name>entry_number</name></name> <operator>=</operator> <literal type="number">0xc</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>user_put</name><argument_list>(<argument><expr><name>u_info</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>_EFAULT</name></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sys_set_thread_area</name><parameter_list>(<parameter><decl><type><name>addr_t</name></type> <name>u_info</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>STRACE</name><argument_list>(<argument><expr><literal type="string">"set_thread_area(0x%x)"</literal></expr></argument>, <argument><expr><name>u_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>task_set_thread_area</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>u_info</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sys_set_tid_address</name><parameter_list>(<parameter><decl><type><name>addr_t</name></type> <name>tid</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>clear_tid</name></name> <operator>=</operator> <name>tid</name></expr>;</expr_stmt>
    <return>return <expr><call><name>sys_getpid</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
