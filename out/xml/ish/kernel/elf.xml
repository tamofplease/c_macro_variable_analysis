<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/kernel/elf.h"><cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ELF_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"misc.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF_MAGIC</name></cpp:macro> <cpp:value>"\177ELF"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF_32BIT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF_64BIT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF_LITTLEENDIAN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF_BIGENDIAN</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF_LINUX_ABI</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF_EXECUTABLE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF_DYNAMIC</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELF_X86</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<struct>struct <name>elf_header</name> <block>{
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>magic</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>byte_t</name></type> <name>bitness</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>byte_t</name></type> <name>endian</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>byte_t</name></type> <name>elfversion1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>byte_t</name></type> <name>abi</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>byte_t</name></type> <name>abi_version</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>byte_t</name></type> <name><name>padding</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint16_t</name></type> <name>type</name></decl>;</decl_stmt> <comment type="line">// library or executable or what</comment>
    <decl_stmt><decl><type><name>uint16_t</name></type> <name>machine</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>elfversion2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dword_t</name></type> <name>entry_point</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dword_t</name></type> <name>prghead_off</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dword_t</name></type> <name>secthead_off</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>flags</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint16_t</name></type> <name>header_size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint16_t</name></type> <name>phent_size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint16_t</name></type> <name>phent_count</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint16_t</name></type> <name>shent_size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint16_t</name></type> <name>shent_count</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint16_t</name></type> <name>sectname_index</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_NULL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_LOAD</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_DYNAMIC</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_INTERP</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_NOTE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_SHLIB</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_PHDR</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_TLS</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_NUM</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<struct>struct <name>prg_header</name> <block>{
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dword_t</name></type> <name>offset</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dword_t</name></type> <name>vaddr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dword_t</name></type> <name>paddr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dword_t</name></type> <name>filesize</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dword_t</name></type> <name>memsize</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>flags</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dword_t</name></type> <name>alignment</name></decl>;</decl_stmt> <comment type="line">// must be power of 2</comment>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PH_R</name></cpp:macro> <cpp:value>(1 &lt;&lt; 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PH_W</name></cpp:macro> <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PH_X</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>

<struct>struct <name>aux_ent</name> <block>{
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>value</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AX_PHDR</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AX_PHENT</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AX_PHNUM</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AX_PAGESZ</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AX_BASE</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AX_FLAGS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AX_ENTRY</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AX_UID</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AX_EUID</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AX_GID</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AX_EGID</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AX_PLATFORM</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AX_HWCAP</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AX_CLKTCK</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AX_SECURE</name></cpp:macro> <cpp:value>23</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AX_RANDOM</name></cpp:macro> <cpp:value>25</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AX_HWCAP2</name></cpp:macro> <cpp:value>26</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AX_EXECFN</name></cpp:macro> <cpp:value>31</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AX_SYSINFO</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AX_SYSINFO_EHDR</name></cpp:macro> <cpp:value>33</cpp:value></cpp:define>

<struct>struct <name>dyn_ent</name> <block>{
    <decl_stmt><decl><type><name>dword_t</name></type> <name>tag</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dword_t</name></type> <name>val</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_NULL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_HASH</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_STRTAB</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_SYMTAB</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<struct>struct <name>elf_sym</name> <block>{
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>addr_t</name></type> <name>value</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dword_t</name></type> <name>size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>byte_t</name></type> <name>info</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>byte_t</name></type> <name>other</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint16_t</name></type> <name>shndx</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
