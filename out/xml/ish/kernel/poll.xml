<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/kernel/poll.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kernel/fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fs/fd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fs/poll.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kernel/calls.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>user_read_or_zero</name><parameter_list>(<parameter><decl><type><name>addr_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>addr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>user_read</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_EFAULT</name></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SELECT_READ</name></cpp:macro> <cpp:value>(POLL_READ | POLL_HUP | POLL_ERR)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SELECT_WRITE</name></cpp:macro> <cpp:value>(POLL_WRITE | POLL_ERR)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SELECT_EX</name></cpp:macro> <cpp:value>(POLL_PRI)</cpp:value></cpp:define>
<struct>struct <name>select_context</name> <block>{
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>readfds</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>writefds</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>exceptfds</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>int</name></type> <name>select_event_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>types</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>poll_fd_info</name></name></type> <name>info</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>select_context</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name>context</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>types</name> <operator>&amp;</operator> <name>SELECT_READ</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>bit_set</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>readfds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>types</name> <operator>&amp;</operator> <name>SELECT_WRITE</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>bit_set</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>writefds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>types</name> <operator>&amp;</operator> <name>SELECT_EX</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>bit_set</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>exceptfds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>types</name> <operator>&amp;</operator> <operator>(</operator><name>SELECT_READ</name> <operator>|</operator> <name>SELECT_WRITE</name> <operator>|</operator> <name>SELECT_EX</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>dword_t</name></type> <name>sys_select</name><parameter_list>(<parameter><decl><type><name>fd_t</name></type> <name>nfds</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>readfds_addr</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>writefds_addr</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>exceptfds_addr</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>timeout_addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>fdset_size</name> <init>= <expr><call><name>BITS_SIZE</name><argument_list>(<argument><expr><name>nfds</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>readfds</name><index>[<expr><name>fdset_size</name></expr>]</index></name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>user_read_or_zero</name><argument_list>(<argument><expr><name>readfds_addr</name></expr></argument>, <argument><expr><name>readfds</name></expr></argument>, <argument><expr><name>fdset_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_EFAULT</name></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>writefds</name><index>[<expr><name>fdset_size</name></expr>]</index></name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>user_read_or_zero</name><argument_list>(<argument><expr><name>writefds_addr</name></expr></argument>, <argument><expr><name>writefds</name></expr></argument>, <argument><expr><name>fdset_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_EFAULT</name></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>exceptfds</name><index>[<expr><name>fdset_size</name></expr>]</index></name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>user_read_or_zero</name><argument_list>(<argument><expr><name>exceptfds_addr</name></expr></argument>, <argument><expr><name>exceptfds</name></expr></argument>, <argument><expr><name>fdset_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_EFAULT</name></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>timeout_ts</name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>timeout_addr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>timeval_</name></name></type> <name>timeout_timeval</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>user_get</name><argument_list>(<argument><expr><name>timeout_addr</name></expr></argument>, <argument><expr><name>timeout_timeval</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>_EFAULT</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>timeout_ts</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>timeout_timeval</name><operator>.</operator><name>sec</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>timeout_ts</name><operator>.</operator><name>tv_nsec</name></name> <operator>=</operator> <name><name>timeout_timeval</name><operator>.</operator><name>usec</name></name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="line">// Emacs likes to pass invalid timeout values</comment>
    <expr_stmt><expr><name>timeout_ts</name> <operator>=</operator> <call><name>timespec_normalize</name><argument_list>(<argument><expr><name>timeout_ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>STRACE</name><argument_list>(<argument><expr><literal type="string">"select(%d, 0x%x, 0x%x, 0x%x, 0x%x {%lds %ldns}) "</literal></expr></argument>,
            <argument><expr><name>nfds</name></expr></argument>, <argument><expr><name>readfds_addr</name></expr></argument>, <argument><expr><name>writefds_addr</name></expr></argument>, <argument><expr><name>exceptfds_addr</name></expr></argument>,
            <argument><expr><name>timeout_addr</name></expr></argument>, <argument><expr><name><name>timeout_ts</name><operator>.</operator><name>tv_sec</name></name></expr></argument>, <argument><expr><name><name>timeout_ts</name><operator>.</operator><name>tv_nsec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>poll</name></name> <modifier>*</modifier></type><name>poll</name> <init>= <expr><call><name>poll_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IS_ERR</name><argument_list>(<argument><expr><name>poll</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>PTR_ERR</name><argument_list>(<argument><expr><name>poll</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <for>for <control>(<init><decl><type><name>fd_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nfds</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>events</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>bit_test</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>readfds</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>events</name> <operator>|=</operator> <name>SELECT_READ</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>bit_test</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>writefds</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>events</name> <operator>|=</operator> <name>SELECT_WRITE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>bit_test</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>exceptfds</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>events</name> <operator>|=</operator> <name>SELECT_EX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>events</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>STRACE</name><argument_list>(<argument><expr><literal type="string">"%d{%s%s%s} "</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>,
                    <argument><expr><ternary><condition><expr><call><name>bit_test</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>readfds</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"r"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
                    <argument><expr><ternary><condition><expr><call><name>bit_test</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>writefds</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"w"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
                    <argument><expr><ternary><condition><expr><call><name>bit_test</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>exceptfds</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"x"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name> <init>= <expr><call><name>f_get</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>poll_destroy</name><argument_list>(<argument><expr><name>poll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>_EBADF</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>poll_add_fd</name><argument_list>(<argument><expr><name>poll</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>events</name></expr></argument>, <argument><expr><operator>(</operator>union <name>poll_fd_info</name><operator>)</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>STRACE</name><argument_list>(<argument><expr><literal type="string">"...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>readfds</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>fdset_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>writefds</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>fdset_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>exceptfds</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>fdset_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>select_context</name></name></type> <name>context</name> <init>= <expr><block>{<expr><name>readfds</name></expr>, <expr><name>writefds</name></expr>, <expr><name>exceptfds</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>poll_wait</name><argument_list>(<argument><expr><name>poll</name></expr></argument>, <argument><expr><name>select_event_callback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><ternary><condition><expr><name>timeout_addr</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><operator>&amp;</operator><name>timeout_ts</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>STRACE</name><argument_list>(<argument><expr><literal type="string">"%d end select "</literal></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>fd_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nfds</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>bit_test</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>readfds</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>bit_test</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>writefds</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>bit_test</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>exceptfds</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>STRACE</name><argument_list>(<argument><expr><literal type="string">"%d{%s%s%s} "</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>,
                    <argument><expr><ternary><condition><expr><call><name>bit_test</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>readfds</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"r"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
                    <argument><expr><ternary><condition><expr><call><name>bit_test</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>writefds</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"w"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
                    <argument><expr><ternary><condition><expr><call><name>bit_test</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>exceptfds</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"x"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>poll_destroy</name><argument_list>(<argument><expr><name>poll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>readfds_addr</name> <operator>&amp;&amp;</operator> <call><name>user_write</name><argument_list>(<argument><expr><name>readfds_addr</name></expr></argument>, <argument><expr><name>readfds</name></expr></argument>, <argument><expr><name>fdset_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_EFAULT</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>writefds_addr</name> <operator>&amp;&amp;</operator> <call><name>user_write</name><argument_list>(<argument><expr><name>writefds_addr</name></expr></argument>, <argument><expr><name>writefds</name></expr></argument>, <argument><expr><name>fdset_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_EFAULT</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>exceptfds_addr</name> <operator>&amp;&amp;</operator> <call><name>user_write</name><argument_list>(<argument><expr><name>exceptfds_addr</name></expr></argument>, <argument><expr><name>exceptfds</name></expr></argument>, <argument><expr><name>fdset_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_EFAULT</name></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>poll_context</name> <block>{
    <decl_stmt><decl><type><name><name>struct</name> <name>pollfd_</name></name> <modifier>*</modifier></type><name>polls</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>files</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nfds</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLL_ALWAYS_LISTENING</name></cpp:macro> <cpp:value>(POLL_ERR|POLL_HUP|POLL_NVAL)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>int</name></type> <name>poll_event_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>types</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>poll_fd_info</name></name></type> <name>info</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>poll_context</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name>context</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>pollfd_</name></name> <modifier>*</modifier></type><name>polls</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>polls</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nfds</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>nfds</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nfds</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>files</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>info</name><operator>.</operator><name>ptr</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>polls</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>=</operator> <name>types</name> <operator>&amp;</operator> <operator>(</operator><name><name>polls</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>|</operator> <name>POLL_ALWAYS_LISTENING</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>dword_t</name></type> <name>sys_poll</name><parameter_list>(<parameter><decl><type><name>addr_t</name></type> <name>fds</name></decl></parameter>, <parameter><decl><type><name>dword_t</name></type> <name>nfds</name></decl></parameter>, <parameter><decl><type><name>int_t</name></type> <name>timeout</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>STRACE</name><argument_list>(<argument><expr><literal type="string">"poll(0x%x, %d, %d)"</literal></expr></argument>, <argument><expr><name>fds</name></expr></argument>, <argument><expr><name>nfds</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>pollfd_</name></name></type> <name><name>polls</name><index>[<expr><name>nfds</name></expr>]</index></name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>fds</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>nfds</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><call><name>user_read</name><argument_list>(<argument><expr><name>fds</name></expr></argument>, <argument><expr><name>polls</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>pollfd_</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nfds</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>_EFAULT</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>poll</name></name> <modifier>*</modifier></type><name>poll</name> <init>= <expr><call><name>poll_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IS_ERR</name><argument_list>(<argument><expr><name>poll</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>PTR_ERR</name><argument_list>(<argument><expr><name>poll</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nfds</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>STRACE</name><argument_list>(<argument><expr><literal type="string">" {%d, %#x}"</literal></expr></argument>, <argument><expr><name><name>polls</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>, <argument><expr><name><name>polls</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>events</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <expr_stmt><expr><call><name>STRACE</name><argument_list>(<argument><expr><literal type="string">"...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name><name>files</name><index>[<expr><name>nfds</name></expr>]</index></name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nfds</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>f_get</name><argument_list>(<argument><expr><name><name>polls</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <comment type="line">// FIXME it might have been closed by now by another thread</comment>
            <expr_stmt><expr><call><name>fd_retain</name><argument_list>(<argument><expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <comment type="line">// clear revents, which is reused to mark whether a pollfd has been added or not</comment>
        <expr_stmt><expr><name><name>polls</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// convert polls array into poll_add_fd calls</comment>
    <comment type="line">// FIXME this is quadratic</comment>
    <for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nfds</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>polls</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>polls</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>revents</name></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <comment type="line">// if the same fd is listed more than once, merge the events bits together</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>events</name> <init>= <expr><name><name>polls</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>events</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>polls</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>
        <for>for <control>(<init><decl><type><name>unsigned</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>nfds</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>polls</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>revents</name></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>files</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>events</name> <operator>|=</operator> <name><name>polls</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>events</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>polls</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name>poll_add_fd</name><argument_list>(<argument><expr><name>poll</name></expr></argument>, <argument><expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>events</name> <operator>|</operator> <name>POLL_ALWAYS_LISTENING</name></expr></argument>, <argument><expr><operator>(</operator>union <name>poll_fd_info</name><operator>)</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>files</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nfds</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>polls</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>f_get</name><argument_list>(<argument><expr><name><name>polls</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>polls</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>=</operator> <name>POLL_NVAL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <decl_stmt><decl><type><name><name>struct</name> <name>poll_context</name></name></type> <name>context</name> <init>= <expr><block>{<expr><name>polls</name></expr>, <expr><name>files</name></expr>, <expr><name>nfds</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>timeout_ts</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>timeout_ts</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name>timeout</name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>timeout_ts</name><operator>.</operator><name>tv_nsec</name></name> <operator>=</operator> <operator>(</operator><name>timeout</name> <operator>%</operator> <literal type="number">1000</literal><operator>)</operator> <operator>*</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>poll_wait</name><argument_list>(<argument><expr><name>poll</name></expr></argument>, <argument><expr><name>poll_event_callback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><ternary><condition><expr><name>timeout</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><operator>&amp;</operator><name>timeout_ts</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>poll_destroy</name><argument_list>(<argument><expr><name>poll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nfds</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>fd_close</name><argument_list>(<argument><expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>STRACE</name><argument_list>(<argument><expr><literal type="string">"%d end poll"</literal></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>fds</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>nfds</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><call><name>user_write</name><argument_list>(<argument><expr><name>fds</name></expr></argument>, <argument><expr><name>polls</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>pollfd_</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nfds</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>_EFAULT</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>dword_t</name></type> <name>sys_pselect</name><parameter_list>(<parameter><decl><type><name>fd_t</name></type> <name>nfds</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>readfds_addr</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>writefds_addr</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>exceptfds_addr</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>timeout_addr</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>sigmask_addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="line">// a system call can only take 6 parameters, so the last two need to be passed as a pointer to a struct</comment>
    <struct>struct <block>{
        <decl_stmt><decl><type><name>addr_t</name></type> <name>mask_addr</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>dword_t</name></type> <name>mask_size</name></decl>;</decl_stmt>
    }</block> <decl><name>sigmask</name></decl>;</struct>
    <if_stmt><if>if <condition>(<expr><call><name>user_get</name><argument_list>(<argument><expr><name>sigmask_addr</name></expr></argument>, <argument><expr><name>sigmask</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_EFAULT</name></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>sigset_t_</name></type> <name>mask</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>sigmask</name><operator>.</operator><name>mask_addr</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>sigmask</name><operator>.</operator><name>mask_size</name></name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sigset_t_</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>_EINVAL</name></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>user_get</name><argument_list>(<argument><expr><name><name>sigmask</name><operator>.</operator><name>mask_addr</name></name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>_EFAULT</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>sigmask_set_temp</name><argument_list>(<argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><call><name>sys_select</name><argument_list>(<argument><expr><name>nfds</name></expr></argument>, <argument><expr><name>readfds_addr</name></expr></argument>, <argument><expr><name>writefds_addr</name></expr></argument>, <argument><expr><name>exceptfds_addr</name></expr></argument>, <argument><expr><name>timeout_addr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>dword_t</name></type> <name>sys_ppoll</name><parameter_list>(<parameter><decl><type><name>addr_t</name></type> <name>fds</name></decl></parameter>, <parameter><decl><type><name>dword_t</name></type> <name>nfds</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>timeout_addr</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>sigmask_addr</name></decl></parameter>, <parameter><decl><type><name>dword_t</name></type> <name>sigsetsize</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>timeout</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>timeout_addr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>timespec_</name></name></type> <name>timeout_timespec</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>user_get</name><argument_list>(<argument><expr><name>timeout_addr</name></expr></argument>, <argument><expr><name>timeout_timespec</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>_EFAULT</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>timeout</name> <operator>=</operator> <name><name>timeout_timespec</name><operator>.</operator><name>sec</name></name> <operator>*</operator> <literal type="number">1000</literal> <operator>+</operator> <name><name>timeout_timespec</name><operator>.</operator><name>nsec</name></name> <operator>/</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>sigset_t_</name></type> <name>mask</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>sigmask_addr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>sigsetsize</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sigset_t_</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>_EINVAL</name></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>user_get</name><argument_list>(<argument><expr><name>sigmask_addr</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>_EFAULT</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>sigmask_set_temp</name><argument_list>(<argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><call><name>sys_poll</name><argument_list>(<argument><expr><name>fds</name></expr></argument>, <argument><expr><name>nfds</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
