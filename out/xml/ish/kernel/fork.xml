<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/kernel/fork.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kernel/task.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fs/fd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kernel/calls.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fs/tty.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kernel/mm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kernel/ptrace.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSIGNAL_</name></cpp:macro> <cpp:value>0x000000ff</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLONE_VM_</name></cpp:macro> <cpp:value>0x00000100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLONE_FS_</name></cpp:macro> <cpp:value>0x00000200</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLONE_FILES_</name></cpp:macro> <cpp:value>0x00000400</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLONE_SIGHAND_</name></cpp:macro> <cpp:value>0x00000800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLONE_PTRACE_</name></cpp:macro> <cpp:value>0x00002000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLONE_VFORK_</name></cpp:macro> <cpp:value>0x00004000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLONE_PARENT_</name></cpp:macro> <cpp:value>0x00008000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLONE_THREAD_</name></cpp:macro> <cpp:value>0x00010000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLONE_NEWNS_</name></cpp:macro> <cpp:value>0x00020000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLONE_SYSVSEM_</name></cpp:macro> <cpp:value>0x00040000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLONE_SETTLS_</name></cpp:macro> <cpp:value>0x00080000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLONE_PARENT_SETTID_</name></cpp:macro> <cpp:value>0x00100000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLONE_CHILD_CLEARTID_</name></cpp:macro> <cpp:value>0x00200000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLONE_DETACHED_</name></cpp:macro> <cpp:value>0x00400000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLONE_UNTRACED_</name></cpp:macro> <cpp:value>0x00800000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLONE_CHILD_SETTID_</name></cpp:macro> <cpp:value>0x01000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLONE_NEWCGROUP_</name></cpp:macro> <cpp:value>0x02000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLONE_NEWUTS_</name></cpp:macro> <cpp:value>0x04000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLONE_NEWIPC_</name></cpp:macro> <cpp:value>0x08000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLONE_NEWUSER_</name></cpp:macro> <cpp:value>0x10000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLONE_NEWPID_</name></cpp:macro> <cpp:value>0x20000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLONE_NEWNET_</name></cpp:macro> <cpp:value>0x40000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLONE_IO_</name></cpp:macro> <cpp:value>0x80000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMPLEMENTED_FLAGS</name></cpp:macro> <cpp:value>(CLONE_VM_|CLONE_FILES_|CLONE_FS_|CLONE_SIGHAND_|CLONE_SYSVSEM_|CLONE_VFORK_|CLONE_THREAD_|\
        CLONE_SETTLS_|CLONE_CHILD_SETTID_|CLONE_PARENT_SETTID_|CLONE_CHILD_CLEARTID_|CLONE_DETACHED_)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>tgroup</name></name> <modifier>*</modifier></type><name>tgroup_copy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tgroup</name></name> <modifier>*</modifier></type><name>old_group</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>tgroup</name></name> <modifier>*</modifier></type><name>group</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>tgroup</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>*</operator><name>group</name> <operator>=</operator> <operator>*</operator><name>old_group</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>group</name><operator>-&gt;</operator><name>threads</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>list_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>old_group</name><operator>-&gt;</operator><name>pgroup</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>group</name><operator>-&gt;</operator><name>pgroup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>list_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>old_group</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>group</name><operator>-&gt;</operator><name>session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>group</name><operator>-&gt;</operator><name>tty</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>group</name><operator>-&gt;</operator><name>tty</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>group</name><operator>-&gt;</operator><name>tty</name><operator>-&gt;</operator><name>refcount</name></name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>group</name><operator>-&gt;</operator><name>tty</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>group</name><operator>-&gt;</operator><name>itimer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>group</name><operator>-&gt;</operator><name>doing_group_exit</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>group</name><operator>-&gt;</operator><name>children_rusage</name></name> <operator>=</operator> <operator>(</operator>struct <name>rusage_</name><operator>)</operator> <block>{}</block></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>group</name><operator>-&gt;</operator><name>child_exit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>group</name><operator>-&gt;</operator><name>stopped_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lock_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>group</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>group</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>copy_task</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>task</name></name> <modifier>*</modifier></type><name>task</name></decl></parameter>, <parameter><decl><type><name>dword_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>stack</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>ptid_addr</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>tls_addr</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>ctid_addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>vfork</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>stack</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>cpu</name><operator>.</operator><name>esp</name></name> <operator>=</operator> <name>stack</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>mm</name></name> <modifier>*</modifier></type><name>mm</name> <init>= <expr><name><name>task</name><operator>-&gt;</operator><name>mm</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>CLONE_VM_</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>mm_retain</name><argument_list>(<argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>task_set_mm</name><argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><call><name>mm_copy</name><argument_list>(<argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>CLONE_FILES_</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>files</name><operator>-&gt;</operator><name>refcount</name></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>files</name></name> <operator>=</operator> <call><name>fdtable_copy</name><argument_list>(<argument><expr><name><name>task</name><operator>-&gt;</operator><name>files</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>IS_ERR</name><argument_list>(<argument><expr><name><name>task</name><operator>-&gt;</operator><name>files</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>PTR_ERR</name><argument_list>(<argument><expr><name><name>task</name><operator>-&gt;</operator><name>files</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>fail_free_mem</name>;</goto>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>_ENOMEM</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>CLONE_FS_</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>fs</name><operator>-&gt;</operator><name>refcount</name></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>fs</name></name> <operator>=</operator> <call><name>fs_info_copy</name><argument_list>(<argument><expr><name><name>task</name><operator>-&gt;</operator><name>fs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>task</name><operator>-&gt;</operator><name>fs</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>fail_free_files</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>CLONE_SIGHAND_</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>sighand</name><operator>-&gt;</operator><name>refcount</name></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>sighand</name></name> <operator>=</operator> <call><name>sighand_copy</name><argument_list>(<argument><expr><name><name>task</name><operator>-&gt;</operator><name>sighand</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>task</name><operator>-&gt;</operator><name>sighand</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>fail_free_fs</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>tgroup</name></name> <modifier>*</modifier></type><name>old_group</name> <init>= <expr><name><name>task</name><operator>-&gt;</operator><name>group</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pids_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>old_group</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>CLONE_THREAD_</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>group</name></name> <operator>=</operator> <call><name>tgroup_copy</name><argument_list>(<argument><expr><name>old_group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>group</name><operator>-&gt;</operator><name>leader</name></name> <operator>=</operator> <name>task</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>tgid</name></name> <operator>=</operator> <name><name>task</name><operator>-&gt;</operator><name>pid</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>list_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>group</name><operator>-&gt;</operator><name>threads</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>group_links</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>old_group</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pids_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>CLONE_SETTLS_</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>task_set_thread_area</name><argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><name>tls_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>fail_free_sighand</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>_EFAULT</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>CLONE_CHILD_SETTID_</name></expr>)</condition><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><call><name>user_put_task</name><argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><name>ctid_addr</name></expr></argument>, <argument><expr><name><name>task</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>fail_free_sighand</name>;</goto></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>CLONE_PARENT_SETTID_</name></expr>)</condition><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><call><name>user_put</name><argument_list>(<argument><expr><name>ptid_addr</name></expr></argument>, <argument><expr><name><name>task</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>fail_free_sighand</name>;</goto></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>CLONE_CHILD_CLEARTID_</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>clear_tid</name></name> <operator>=</operator> <name>ctid_addr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>exit_signal</name></name> <operator>=</operator> <name>flags</name> <operator>&amp;</operator> <name>CSIGNAL_</name></expr>;</expr_stmt>

    <comment type="line">// remember to do CLONE_SYSVSEM</comment>
    <return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail_free_sighand</name>:</label>
    <expr_stmt><expr><call><name>sighand_release</name><argument_list>(<argument><expr><name><name>task</name><operator>-&gt;</operator><name>sighand</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>fail_free_fs</name>:</label>
    <expr_stmt><expr><call><name>fs_info_release</name><argument_list>(<argument><expr><name><name>task</name><operator>-&gt;</operator><name>fs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>fail_free_files</name>:</label>
    <expr_stmt><expr><call><name>fdtable_release</name><argument_list>(<argument><expr><name><name>task</name><operator>-&gt;</operator><name>files</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>fail_free_mem</name>:</label>
    <expr_stmt><expr><call><name>mm_release</name><argument_list>(<argument><expr><name><name>task</name><operator>-&gt;</operator><name>mm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>dword_t</name></type> <name>sys_clone</name><parameter_list>(<parameter><decl><type><name>dword_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>stack</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>ptid</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>tls</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>ctid</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>STRACE</name><argument_list>(<argument><expr><literal type="string">"clone(0x%x, 0x%x, 0x%x, 0x%x, 0x%x)"</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>stack</name></expr></argument>, <argument><expr><name>ptid</name></expr></argument>, <argument><expr><name>tls</name></expr></argument>, <argument><expr><name>ctid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <operator>~</operator><name>CSIGNAL_</name> <operator>&amp;</operator> <operator>~</operator><name>IMPLEMENTED_FLAGS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>FIXME</name><argument_list>(<argument><expr><literal type="string">"unimplemented clone flags 0x%x"</literal></expr></argument>, <argument><expr><name>flags</name> <operator>&amp;</operator> <operator>~</operator><name>CSIGNAL_</name> <operator>&amp;</operator> <operator>~</operator><name>IMPLEMENTED_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>_EINVAL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>CLONE_SIGHAND_</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>CLONE_VM_</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_EINVAL</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>CLONE_THREAD_</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>CLONE_SIGHAND_</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_EINVAL</name></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>task</name></name> <modifier>*</modifier></type><name>task</name> <init>= <expr><call><name>task_create_</name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>task</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>copy_task</name><argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>stack</name></expr></argument>, <argument><expr><name>ptid</name></expr></argument>, <argument><expr><name>tls</name></expr></argument>, <argument><expr><name>ctid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">// FIXME: there is a window between task_create_ and task_destroy where</comment>
        <comment type="line">// some other thread could get a pointer to the task.</comment>
        <comment type="line">// FIXME: task_destroy doesn't free all aspects of the task, which</comment>
        <comment type="line">// could cause leaks</comment>
        <expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pids_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>task_destroy</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pids_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>err</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>cpu</name><operator>.</operator><name>eax</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>vfork_info</name></name></type> <name>vfork</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>CLONE_VFORK_</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>lock_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vfork</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vfork</name><operator>.</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>vfork</name><operator>.</operator><name>done</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>vfork</name></name> <operator>=</operator> <operator>&amp;</operator><name>vfork</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// task might be destroyed by the time we finish, so save the pid</comment>
    <decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name> <init>= <expr><name><name>task</name><operator>-&gt;</operator><name>pid</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>ptrace</name><operator>.</operator><name>traced</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>ptrace</name><operator>.</operator><name>trap_event</name></name> <operator>=</operator> <name>PTRACE_EVENT_FORK_</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>send_signal</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>SIGTRAP_</name></expr></argument>, <argument><expr><name>SIGINFO_NIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>task_start</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>CLONE_VFORK_</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vfork</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><operator>!</operator><name><name>vfork</name><operator>.</operator><name>done</name></name></expr>)</condition><block type="pseudo"><block_content>
            <comment type="line">// FIXME this should stop waiting if a fatal signal is received</comment>
            <expr_stmt><expr><call><name>wait_for_ignore_signals</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vfork</name><operator>.</operator><name>cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vfork</name><operator>.</operator><name>lock</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
        <expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vfork</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>general_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>vfork</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>general_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>cond_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vfork</name><operator>.</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>pid</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>dword_t</name></type> <name>sys_fork</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>sys_clone</name><argument_list>(<argument><expr><name>SIGCHLD_</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>dword_t</name></type> <name>sys_vfork</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>sys_clone</name><argument_list>(<argument><expr><name>CLONE_VFORK_</name> <operator>|</operator> <name>CLONE_VM_</name> <operator>|</operator> <name>SIGCHLD_</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vfork_notify</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>task</name></name> <modifier>*</modifier></type><name>task</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>general_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>task</name><operator>-&gt;</operator><name>vfork</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>vfork</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>vfork</name><operator>-&gt;</operator><name>done</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notify</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>vfork</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>vfork</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>task</name><operator>-&gt;</operator><name>general_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
