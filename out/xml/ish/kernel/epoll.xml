<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/kernel/epoll.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kernel/calls.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fs/poll.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>fd_ops</name></name></type> <name>epoll_ops</name></decl>;</decl_stmt>

<function><type><name>fd_t</name></type> <name>sys_epoll_create</name><parameter_list>(<parameter><decl><type><name>int_t</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>STRACE</name><argument_list>(<argument><expr><literal type="string">"epoll_create(%#x)"</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>O_CLOEXEC_</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_EINVAL</name></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name> <init>= <expr><call><name>adhoc_fd_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>epoll_ops</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>poll</name></name> <modifier>*</modifier></type><name>poll</name> <init>= <expr><call><name>poll_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IS_ERR</name><argument_list>(<argument><expr><name>poll</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>PTR_ERR</name><argument_list>(<argument><expr><name>poll</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>fd</name><operator>-&gt;</operator><name>epollfd</name><operator>.</operator><name>poll</name></name> <operator>=</operator> <name>poll</name></expr>;</expr_stmt>
    <return>return <expr><call><name>f_install</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>fd_t</name></type> <name>sys_epoll_create0</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>sys_epoll_create</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>epoll_event_</name> <block>{
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>events</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>data</name></decl>;</decl_stmt>
}</block> <decl><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>packed</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPOLL_CTL_ADD_</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPOLL_CTL_DEL_</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPOLL_CTL_MOD_</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPOLLET_</name></cpp:macro> <cpp:value>(1 &lt;&lt; 31)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPOLLONESHOT_</name></cpp:macro> <cpp:value>(1 &lt;&lt; 30)</cpp:value></cpp:define>

<function><type><name>int_t</name></type> <name>sys_epoll_ctl</name><parameter_list>(<parameter><decl><type><name>fd_t</name></type> <name>epoll_f</name></decl></parameter>, <parameter><decl><type><name>int_t</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>fd_t</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>event_addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>STRACE</name><argument_list>(<argument><expr><literal type="string">"epoll_ctl(%d, %d, %d, %#x)"</literal></expr></argument>, <argument><expr><name>epoll_f</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>event_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>epoll</name> <init>= <expr><call><name>f_get</name><argument_list>(<argument><expr><name>epoll_f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>epoll</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_EBADF</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>epoll</name><operator>-&gt;</operator><name>ops</name></name> <operator>!=</operator> <operator>&amp;</operator><name>epoll_ops</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_EINVAL</name></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name> <init>= <expr><call><name>f_get</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_EBADF</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>EPOLL_CTL_DEL_</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>poll_del_fd</name><argument_list>(<argument><expr><name><name>epoll</name><operator>-&gt;</operator><name>epollfd</name><operator>.</operator><name>poll</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>epoll_event_</name></name></type> <name>event</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>user_get</name><argument_list>(<argument><expr><name>event_addr</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_EFAULT</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>STRACE</name><argument_list>(<argument><expr><literal type="string">" {events: %#x, data: %#x}"</literal></expr></argument>, <argument><expr><name><name>event</name><operator>.</operator><name>events</name></name></expr></argument>, <argument><expr><name><name>event</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>EPOLL_CTL_ADD_</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>poll_has_fd</name><argument_list>(<argument><expr><name><name>epoll</name><operator>-&gt;</operator><name>epollfd</name><operator>.</operator><name>poll</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>_EEXIST</name></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><call><name>poll_add_fd</name><argument_list>(<argument><expr><name><name>epoll</name><operator>-&gt;</operator><name>epollfd</name><operator>.</operator><name>poll</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>event</name><operator>.</operator><name>events</name></name></expr></argument>, <argument><expr><operator>(</operator>union <name>poll_fd_info</name><operator>)</operator> <name><name>event</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><call><name>poll_mod_fd</name><argument_list>(<argument><expr><name><name>epoll</name><operator>-&gt;</operator><name>epollfd</name><operator>.</operator><name>poll</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>event</name><operator>.</operator><name>events</name></name></expr></argument>, <argument><expr><operator>(</operator>union <name>poll_fd_info</name><operator>)</operator> <name><name>event</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<struct>struct <name>epoll_context</name> <block>{
    <decl_stmt><decl><type><name><name>struct</name> <name>epoll_event_</name></name> <modifier>*</modifier></type><name>events</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>max_events</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>epoll_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>types</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>poll_fd_info</name></name></type> <name>info</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>epoll_context</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name>context</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>n</name></name> <operator>&gt;=</operator> <name><name>c</name><operator>-&gt;</operator><name>max_events</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>events</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>n</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator>struct <name>epoll_event_</name><operator>)</operator> <block>{<expr><operator>.</operator><name>events</name> <operator>=</operator> <name>types</name></expr>, <expr><operator>.</operator><name>data</name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>num</name></name></expr>}</block></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int_t</name></type> <name>sys_epoll_wait</name><parameter_list>(<parameter><decl><type><name>fd_t</name></type> <name>epoll_f</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>events_addr</name></decl></parameter>, <parameter><decl><type><name>int_t</name></type> <name>max_events</name></decl></parameter>, <parameter><decl><type><name>int_t</name></type> <name>timeout</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>STRACE</name><argument_list>(<argument><expr><literal type="string">"epoll_wait(%d, %#x, %d, %d)"</literal></expr></argument>, <argument><expr><name>epoll_f</name></expr></argument>, <argument><expr><name>events_addr</name></expr></argument>, <argument><expr><name>max_events</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>epoll</name> <init>= <expr><call><name>f_get</name><argument_list>(<argument><expr><name>epoll_f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>epoll</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_EBADF</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>epoll</name><operator>-&gt;</operator><name>ops</name></name> <operator>!=</operator> <operator>&amp;</operator><name>epoll_ops</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_EINVAL</name></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>timeout_ts</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>timeout_ts</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name>timeout</name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>timeout_ts</name><operator>.</operator><name>tv_nsec</name></name> <operator>=</operator> <operator>(</operator><name>timeout</name> <operator>%</operator> <literal type="number">1000</literal><operator>)</operator> <operator>*</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>max_events</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_EINVAL</name></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>epoll_event_</name></name></type> <name><name>events</name><index>[<expr><name>max_events</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>epoll_context</name></name></type> <name>context</name> <init>= <expr><block>{<expr><operator>.</operator><name>events</name> <operator>=</operator> <name>events</name></expr>, <expr><operator>.</operator><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>max_events</name> <operator>=</operator> <name>max_events</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>STRACE</name><argument_list>(<argument><expr><literal type="string">"...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>poll_wait</name><argument_list>(<argument><expr><name><name>epoll</name><operator>-&gt;</operator><name>epollfd</name><operator>.</operator><name>poll</name></name></expr></argument>, <argument><expr><name>epoll_callback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><ternary><condition><expr><name>timeout</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><operator>&amp;</operator><name>timeout_ts</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>STRACE</name><argument_list>(<argument><expr><literal type="string">"%d end epoll_wait"</literal></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>res</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>res</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name>STRACE</name><argument_list>(<argument><expr><literal type="string">" {events: %#x, data: %#x}"</literal></expr></argument>, <argument><expr><name><name>events</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>events</name></expr></argument>, <argument><expr><name><name>events</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><call><name>user_write</name><argument_list>(<argument><expr><name>events_addr</name></expr></argument>, <argument><expr><name>events</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>epoll_event_</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>res</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>_EFAULT</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int_t</name></type> <name>sys_epoll_pwait</name><parameter_list>(<parameter><decl><type><name>fd_t</name></type> <name>epoll_f</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>events_addr</name></decl></parameter>, <parameter><decl><type><name>int_t</name></type> <name>max_events</name></decl></parameter>, <parameter><decl><type><name>int_t</name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>sigmask_addr</name></decl></parameter>, <parameter><decl><type><name>dword_t</name></type> <name>sigsetsize</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>sigset_t_</name></type> <name>mask</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>sigmask_addr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>sigsetsize</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sigset_t_</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>_EINVAL</name></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>user_get</name><argument_list>(<argument><expr><name>sigmask_addr</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>_EFAULT</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>sigmask_set_temp</name><argument_list>(<argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><call><name>sys_epoll_wait</name><argument_list>(<argument><expr><name>epoll_f</name></expr></argument>, <argument><expr><name>events_addr</name></expr></argument>, <argument><expr><name>max_events</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>epoll_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>poll_destroy</name><argument_list>(<argument><expr><name><name>fd</name><operator>-&gt;</operator><name>epollfd</name><operator>.</operator><name>poll</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>fd_ops</name></name></type> <name>epoll_ops</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>close</name> <operator>=</operator> <name>epoll_close</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
