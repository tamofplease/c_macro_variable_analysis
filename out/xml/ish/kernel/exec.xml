<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/kernel/exec.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kernel/signal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"task.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GNU_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"misc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kernel/calls.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kernel/random.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kernel/errno.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fs/fd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kernel/elf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kernel/vdso.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tools/ptraceomatic-config.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARGV_MAX</name></cpp:macro> <cpp:value>32 * PAGE_SIZE</cpp:value></cpp:define>

<struct>struct <name>exec_args</name> <block>{
    <comment type="line">// number of arguments</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>
    <comment type="line">// series of count null-terminated strings, plus an extra null for good measure</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>args</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>dword_t</name></type> <name>align_stack</name><parameter_list>(<parameter><decl><type><name>dword_t</name></type> <name>sp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>ssize_t</name></type> <name>user_strlen</name><parameter_list>(<parameter><decl><type><name>dword_t</name></type> <name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>user_memset</name><parameter_list>(<parameter><decl><type><name>addr_t</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>byte_t</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>dword_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>dword_t</name></type> <name>copy_string</name><parameter_list>(<parameter><decl><type><name>dword_t</name></type> <name>sp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>dword_t</name></type> <name>args_copy</name><parameter_list>(<parameter><decl><type><name>dword_t</name></type> <name>sp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>exec_args</name></name></type> <name>args</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>size_t</name></type> <name>args_size</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>exec_args</name></name></type> <name>args</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>elf_header</name></name> <modifier>*</modifier></type><name>header</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>fd</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>lseek</name></name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_EIO</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name><name>fd</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>header</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>_EIO</name></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><name>_ENOEXEC</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>header</name><operator>-&gt;</operator><name>magic</name></name></expr></argument>, <argument><expr><name>ELF_MAGIC</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>magic</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal>
            <operator>||</operator> <operator>(</operator><name><name>header</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>ELF_EXECUTABLE</name> <operator>&amp;&amp;</operator> <name><name>header</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>ELF_DYNAMIC</name><operator>)</operator>
            <operator>||</operator> <name><name>header</name><operator>-&gt;</operator><name>bitness</name></name> <operator>!=</operator> <name>ELF_32BIT</name>
            <operator>||</operator> <name><name>header</name><operator>-&gt;</operator><name>endian</name></name> <operator>!=</operator> <name>ELF_LITTLEENDIAN</name>
            <operator>||</operator> <name><name>header</name><operator>-&gt;</operator><name>elfversion1</name></name> <operator>!=</operator> <literal type="number">1</literal>
            <operator>||</operator> <name><name>header</name><operator>-&gt;</operator><name>machine</name></name> <operator>!=</operator> <name>ELF_X86</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_ENOEXEC</name></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_prg_headers</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>elf_header</name></name></type> <name>header</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>prg_header</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>ph_out</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>ssize_t</name></type> <name>ph_size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>prg_header</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>header</name><operator>.</operator><name>phent_count</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>prg_header</name></name> <modifier>*</modifier></type><name>ph</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>ph_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ph</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>fd</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>lseek</name></name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>prghead_off</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>_EIO</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>fd</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>ph</name></expr></argument>, <argument><expr><name>ph_size</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ph_size</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>_EIO</name></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><name>_ENOEXEC</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>ph_out</name> <operator>=</operator> <name>ph</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>load_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>prg_header</name></name></type> <name>ph</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>bias</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>addr_t</name></type> <name>addr</name> <init>= <expr><name><name>ph</name><operator>.</operator><name>vaddr</name></name> <operator>+</operator> <name>bias</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>addr_t</name></type> <name>offset</name> <init>= <expr><name><name>ph</name><operator>.</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>addr_t</name></type> <name>memsize</name> <init>= <expr><name><name>ph</name><operator>.</operator><name>memsize</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>addr_t</name></type> <name>filesize</name> <init>= <expr><name><name>ph</name><operator>.</operator><name>filesize</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><name>P_READ</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ph</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>PH_W</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>P_WRITE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name><name>fd</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>mmap</name></name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>mem</name></name></expr></argument>, <argument><expr><call><name>PAGE</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name>PAGE_ROUND_UP</name><argument_list>(<argument><expr><name>filesize</name> <operator>+</operator> <call><name>PGOFFSET</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><name>offset</name> <operator>-</operator> <call><name>PGOFFSET</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>MMAP_PRIVATE</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
    <comment type="line">// TODO find a better place for these to avoid code duplication</comment>
    <expr_stmt><expr><call><name>mem_pt</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>mem</name></name></expr></argument>, <argument><expr><call><name>PAGE</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>data</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <call><name>fd_retain</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mem_pt</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>mem</name></name></expr></argument>, <argument><expr><call><name>PAGE</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>data</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>=</operator> <name>offset</name> <operator>-</operator> <call><name>PGOFFSET</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>memsize</name> <operator>&gt;</operator> <name>filesize</name></expr>)</condition> <block>{<block_content>
        <comment type="line">// put zeroes between addr + filesize and addr + memsize, call that bss</comment>
        <decl_stmt><decl><type><name>dword_t</name></type> <name>bss_size</name> <init>= <expr><name>memsize</name> <operator>-</operator> <name>filesize</name></expr></init></decl>;</decl_stmt>

        <comment type="line">// first zero the tail from the end of the file mapping to the end</comment>
        <comment type="line">// of the load entry or the end of the page, whichever comes first</comment>
        <decl_stmt><decl><type><name>addr_t</name></type> <name>file_end</name> <init>= <expr><name>addr</name> <operator>+</operator> <name>filesize</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>dword_t</name></type> <name>tail_size</name> <init>= <expr><name>PAGE_SIZE</name> <operator>-</operator> <call><name>PGOFFSET</name><argument_list>(<argument><expr><name>file_end</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>tail_size</name> <operator>==</operator> <name>PAGE_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
            <comment type="line">// if you can calculate tail_size better and not have to do this please let me know</comment>
            <expr_stmt><expr><name>tail_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>tail_size</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// Unlock and lock the mem because the user functions must be</comment>
            <comment type="line">// called without locking mem.</comment>
            <expr_stmt><expr><call><name>write_wrunlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>mem</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>user_memset</name><argument_list>(<argument><expr><name>file_end</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tail_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>write_wrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>mem</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>tail_size</name> <operator>&gt;</operator> <name>bss_size</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>tail_size</name> <operator>=</operator> <name>bss_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="line">// then map the pages from after the file mapping up to and including the end of bss</comment>
        <if_stmt><if>if <condition>(<expr><name>bss_size</name> <operator>-</operator> <name>tail_size</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>pt_map_nothing</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>mem</name></name></expr></argument>, <argument><expr><call><name>PAGE_ROUND_UP</name><argument_list>(<argument><expr><name>addr</name> <operator>+</operator> <name>filesize</name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name>PAGE_ROUND_UP</name><argument_list>(<argument><expr><name>bss_size</name> <operator>-</operator> <name>tail_size</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>addr_t</name></type> <name>find_hole_for_elf</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>elf_header</name></name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>prg_header</name></name> <modifier>*</modifier></type><name>ph</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>prg_header</name></name> <modifier>*</modifier></type><name>first</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>last</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>header</name><operator>-&gt;</operator><name>phent_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>ph</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>PT_LOAD</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>first</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>first</name> <operator>=</operator> <operator>&amp;</operator><name><name>ph</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>last</name> <operator>=</operator> <operator>&amp;</operator><name><name>ph</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <decl_stmt><decl><type><name>pages_t</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>first</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>pages_t</name></type> <name>a</name> <init>= <expr><call><name>PAGE_ROUND_UP</name><argument_list>(<argument><expr><name><name>last</name><operator>-&gt;</operator><name>vaddr</name></name> <operator>+</operator> <name><name>last</name><operator>-&gt;</operator><name>memsize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>pages_t</name></type> <name>b</name> <init>= <expr><call><name>PAGE</name><argument_list>(<argument><expr><name><name>first</name><operator>-&gt;</operator><name>vaddr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>size</name> <operator>=</operator> <name>a</name> <operator>-</operator> <name>b</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name>pt_find_hole</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>mem</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>PAGE_BITS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>elf_exec</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>exec_args</name></name></type> <name>argv</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>exec_args</name></name></type> <name>envp</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// read the headers</comment>
    <decl_stmt><decl><type><name><name>struct</name> <name>elf_header</name></name></type> <name>header</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>read_header</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>prg_header</name></name> <modifier>*</modifier></type><name>ph</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>read_prg_headers</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ph</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="line">// look for an interpreter</comment>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>interp_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>interp_fd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>elf_header</name></name></type> <name>interp_header</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>prg_header</name></name> <modifier>*</modifier></type><name>interp_ph</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>header</name><operator>.</operator><name>phent_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>ph</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>!=</operator> <name>PT_INTERP</name></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>interp_name</name></expr>)</condition> <block>{<block_content>
            <comment type="line">// can't have two interpreters</comment>
            <expr_stmt><expr><name>err</name> <operator>=</operator> <name>_EINVAL</name></expr>;</expr_stmt>
            <goto>goto <name>out_free_interp</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>interp_name</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>ph</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>filesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>_ENOMEM</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>interp_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>out_free_ph</name>;</goto></block_content></block></if></if_stmt>

        <comment type="line">// read the interpreter name out of the file</comment>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>_EIO</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>fd</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>lseek</name></name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>ph</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>out_free_interp</name>;</goto></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>fd</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>interp_name</name></expr></argument>, <argument><expr><name><name>ph</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>filesize</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>ph</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>filesize</name></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>out_free_interp</name>;</goto></block_content></block></if></if_stmt>

        <comment type="line">// open interpreter and read headers</comment>
        <expr_stmt><expr><name>interp_fd</name> <operator>=</operator> <call><name>generic_open</name><argument_list>(<argument><expr><name>interp_name</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>IS_ERR</name><argument_list>(<argument><expr><name>interp_fd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>PTR_ERR</name><argument_list>(<argument><expr><name>interp_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>out_free_interp</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>read_header</name><argument_list>(<argument><expr><name>interp_fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>interp_header</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>_ENOEXEC</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>err</name> <operator>=</operator> <name>_ELIBBAD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <goto>goto <name>out_free_interp</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>read_prg_headers</name><argument_list>(<argument><expr><name>interp_fd</name></expr></argument>, <argument><expr><name>interp_header</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>interp_ph</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>_ENOEXEC</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>err</name> <operator>=</operator> <name>_ELIBBAD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <goto>goto <name>out_free_interp</name>;</goto>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="line">// free the process's memory.</comment>
    <comment type="line">// from this point on, if any error occurs the process will have to be</comment>
    <comment type="line">// killed before it even starts. please don't be too sad about it, it's</comment>
    <comment type="line">// just a process.</comment>
    <comment type="line">//</comment>
    <comment type="line">// general_lock protects current-&gt;mm. otherwise procfs might read the</comment>
    <comment type="line">// pointer before it's released and then try to lock it after it's</comment>
    <comment type="line">// released.</comment>
    <expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>general_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mm_release</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>mm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>task_set_mm</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><call><name>mm_new</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>general_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>write_wrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>mem</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>mm</name><operator>-&gt;</operator><name>exefile</name></name> <operator>=</operator> <call><name>fd_retain</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>addr_t</name></type> <name>load_addr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="line">// used for AX_PHDR</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>load_addr_set</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>addr_t</name></type> <name>bias</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="line">// offset for loading shared libraries as executables</comment>

    <comment type="line">// map dat shit!</comment>
    <for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>header</name><operator>.</operator><name>phent_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>ph</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>!=</operator> <name>PT_LOAD</name></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>load_addr_set</name> <operator>&amp;&amp;</operator> <name><name>header</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>ELF_DYNAMIC</name></expr>)</condition> <block>{<block_content>
            <comment type="line">// see giant comment in linux/fs/binfmt_elf.c, around line 950</comment>
            <if_stmt><if>if <condition>(<expr><name>interp_name</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>bias</name> <operator>=</operator> <literal type="number">0x56555000</literal></expr>;</expr_stmt></block_content></block></if> <comment type="line">// I have no idea how this number was arrived at</comment>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name>bias</name> <operator>=</operator> <call><name>find_hole_for_elf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><name>ph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>load_entry</name><argument_list>(<argument><expr><name><name>ph</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>bias</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>beyond_hope</name>;</goto></block_content></block></if></if_stmt>

        <comment type="line">// load_addr is used to get a value for AX_PHDR et al</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>load_addr_set</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>load_addr</name> <operator>=</operator> <name>bias</name> <operator>+</operator> <name><name>ph</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vaddr</name> <operator>-</operator> <name><name>ph</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>load_addr_set</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// we have to know where the brk starts</comment>
        <decl_stmt><decl><type><name>addr_t</name></type> <name>brk</name> <init>= <expr><name>bias</name> <operator>+</operator> <name><name>ph</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vaddr</name> <operator>+</operator> <name><name>ph</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>memsize</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>brk</name> <operator>&gt;</operator> <name><name>current</name><operator>-&gt;</operator><name>mm</name><operator>-&gt;</operator><name>start_brk</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>mm</name><operator>-&gt;</operator><name>start_brk</name></name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>mm</name><operator>-&gt;</operator><name>brk</name></name> <operator>=</operator> <call><name>BYTES_ROUND_UP</name><argument_list>(<argument><expr><name>brk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>addr_t</name></type> <name>entry</name> <init>= <expr><name>bias</name> <operator>+</operator> <name><name>header</name><operator>.</operator><name>entry_point</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>addr_t</name></type> <name>interp_base</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>interp_name</name></expr>)</condition> <block>{<block_content>
        <comment type="line">// map dat shit! interpreter edition</comment>
        <expr_stmt><expr><name>interp_base</name> <operator>=</operator> <call><name>find_hole_for_elf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>interp_header</name></expr></argument>, <argument><expr><name>interp_ph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>interp_header</name><operator>.</operator><name>phent_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>interp_ph</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>!=</operator> <name>PT_LOAD</name></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>load_entry</name><argument_list>(<argument><expr><name><name>interp_ph</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>interp_base</name></expr></argument>, <argument><expr><name>interp_fd</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <goto>goto <name>beyond_hope</name>;</goto></block_content></block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name>entry</name> <operator>=</operator> <name>interp_base</name> <operator>+</operator> <name><name>interp_header</name><operator>.</operator><name>entry_point</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// map vdso</comment>
    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>_ENOMEM</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>pages_t</name></type> <name>vdso_pages</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>vdso_data</name></expr></argument>)</argument_list></sizeof> <operator>&gt;&gt;</operator> <name>PAGE_BITS</name></expr></init></decl>;</decl_stmt>
    <comment type="line">// FIXME disgusting hack: musl's dynamic linker has a one-page hole, and</comment>
    <comment type="line">// I'd rather not put the vdso in that hole. so find a two-page hole and</comment>
    <comment type="line">// add one.</comment>
    <decl_stmt><decl><type><name>page_t</name></type> <name>vdso_page</name> <init>= <expr><call><name>pt_find_hole</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>mem</name></name></expr></argument>, <argument><expr><name>vdso_pages</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>vdso_page</name> <operator>==</operator> <name>BAD_PAGE</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>beyond_hope</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>vdso_page</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>pt_map</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>mem</name></name></expr></argument>, <argument><expr><name>vdso_page</name></expr></argument>, <argument><expr><name>vdso_pages</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>vdso_data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>beyond_hope</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>mem_pt</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>mem</name></name></expr></argument>, <argument><expr><name>vdso_page</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>data</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <literal type="string">"[vdso]"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>mm</name><operator>-&gt;</operator><name>vdso</name></name> <operator>=</operator> <name>vdso_page</name> <operator>&lt;&lt;</operator> <name>PAGE_BITS</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>addr_t</name></type> <name>vdso_entry</name> <init>= <expr><name><name>current</name><operator>-&gt;</operator><name>mm</name><operator>-&gt;</operator><name>vdso</name></name> <operator>+</operator> <operator>(</operator><operator>(</operator>struct <name>elf_header</name> <operator>*</operator><operator>)</operator> <name>vdso_data</name><operator>)</operator><operator>-&gt;</operator><name>entry_point</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// map 3 empty "vvar" pages to satisfy ptraceomatic</comment>
    <decl_stmt><decl><type><name>page_t</name></type> <name>vvar_page</name> <init>= <expr><call><name>pt_find_hole</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>mem</name></name></expr></argument>, <argument><expr><name>VVAR_PAGES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>vvar_page</name> <operator>==</operator> <name>BAD_PAGE</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>beyond_hope</name>;</goto></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>pt_map_nothing</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>mem</name></name></expr></argument>, <argument><expr><name>vvar_page</name></expr></argument>, <argument><expr><name>VVAR_PAGES</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>beyond_hope</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>mem_pt</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>mem</name></name></expr></argument>, <argument><expr><name>vvar_page</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>data</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <literal type="string">"[vvar]"</literal></expr>;</expr_stmt>

    <comment type="line">// STACK TIME!</comment>

    <comment type="line">// allocate 1 page of stack at 0xffffd, and let it grow down</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>pt_map_nothing</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>mem</name></name></expr></argument>, <argument><expr><literal type="number">0xffffd</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>P_WRITE</name> <operator>|</operator> <name>P_GROWSDOWN</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>beyond_hope</name>;</goto></block_content></block></if></if_stmt>
    <comment type="line">// that was the last memory mapping</comment>
    <expr_stmt><expr><call><name>write_wrunlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>mem</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>dword_t</name></type> <name>sp</name> <init>= <expr><literal type="number">0xffffe000</literal></expr></init></decl>;</decl_stmt>
    <comment type="line">// on 32-bit linux, there's 4 empty bytes at the very bottom of the stack.</comment>
    <comment type="line">// on 64-bit linux, there's 8. make ptraceomatic happy. (a major theme in this file)</comment>
    <expr_stmt><expr><name>sp</name> <operator>-=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>_EFAULT</name></expr>;</expr_stmt>
    <comment type="line">// first, copy stuff pointed to by argv/envp/auxv</comment>
    <comment type="line">// filename, argc, argv</comment>
    <decl_stmt><decl><type><name>addr_t</name></type> <name>file_addr</name> <init>= <expr><name>sp</name> <operator>=</operator> <call><name>copy_string</name><argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>sp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>beyond_hope</name>;</goto></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>addr_t</name></type> <name>envp_addr</name> <init>= <expr><name>sp</name> <operator>=</operator> <call><name>args_copy</name><argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><name>envp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>sp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>beyond_hope</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>mm</name><operator>-&gt;</operator><name>argv_end</name></name> <operator>=</operator> <name>sp</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>addr_t</name></type> <name>argv_addr</name> <init>= <expr><name>sp</name> <operator>=</operator> <call><name>args_copy</name><argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>sp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>beyond_hope</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>mm</name><operator>-&gt;</operator><name>argv_start</name></name> <operator>=</operator> <name>sp</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>sp</name> <operator>=</operator> <call><name>align_stack</name><argument_list>(<argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>addr_t</name></type> <name>platform_addr</name> <init>= <expr><name>sp</name> <operator>=</operator> <call><name>copy_string</name><argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><literal type="string">"i686"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>sp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>beyond_hope</name>;</goto></block_content></block></if></if_stmt>
    <comment type="line">// 16 random bytes so no system call is needed to seed a userspace RNG</comment>
    <decl_stmt><decl><type><name>char</name></type> <name><name>random</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>get_random</name><argument_list>(<argument><expr><name>random</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>random</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// if this fails, eh, no one's really using it</comment>
    <decl_stmt><decl><type><name>addr_t</name></type> <name>random_addr</name> <init>= <expr><name>sp</name> <operator>-=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>random</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>user_put</name><argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><name>random</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>beyond_hope</name>;</goto></block_content></block></if></if_stmt>

    <comment type="line">// the way linux aligns the stack at this point is kinda funky</comment>
    <comment type="line">// calculate how much space is needed for argv, envp, and auxv, subtract</comment>
    <comment type="line">// that from sp, then align, then copy argv/envp/auxv from that down</comment>

    <comment type="line">// declare elf aux now so we can know how big it is</comment>
    <decl_stmt><decl><type><name><name>struct</name> <name>aux_ent</name></name></type> <name><name>aux</name><index>[]</index></name> <init>= <expr><block>{
        <expr><block>{<expr><name>AX_SYSINFO</name></expr>, <expr><name>vdso_entry</name></expr>}</block></expr>,
        <expr><block>{<expr><name>AX_SYSINFO_EHDR</name></expr>, <expr><name><name>current</name><operator>-&gt;</operator><name>mm</name><operator>-&gt;</operator><name>vdso</name></name></expr>}</block></expr>,
        <expr><block>{<expr><name>AX_HWCAP</name></expr>, <expr><literal type="number">0x00000000</literal></expr>}</block></expr>, <comment type="line">// suck that</comment>
        <expr><block>{<expr><name>AX_PAGESZ</name></expr>, <expr><name>PAGE_SIZE</name></expr>}</block></expr>,
        <expr><block>{<expr><name>AX_CLKTCK</name></expr>, <expr><literal type="number">0x64</literal></expr>}</block></expr>,
        <expr><block>{<expr><name>AX_PHDR</name></expr>, <expr><name>load_addr</name> <operator>+</operator> <name><name>header</name><operator>.</operator><name>prghead_off</name></name></expr>}</block></expr>,
        <expr><block>{<expr><name>AX_PHENT</name></expr>, <expr>sizeof<operator>(</operator>struct <name>prg_header</name><operator>)</operator></expr>}</block></expr>,
        <expr><block>{<expr><name>AX_PHNUM</name></expr>, <expr><name><name>header</name><operator>.</operator><name>phent_count</name></name></expr>}</block></expr>,
        <expr><block>{<expr><name>AX_BASE</name></expr>, <expr><name>interp_base</name></expr>}</block></expr>,
        <expr><block>{<expr><name>AX_FLAGS</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
        <expr><block>{<expr><name>AX_ENTRY</name></expr>, <expr><name>bias</name> <operator>+</operator> <name><name>header</name><operator>.</operator><name>entry_point</name></name></expr>}</block></expr>,
        <expr><block>{<expr><name>AX_UID</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
        <expr><block>{<expr><name>AX_EUID</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
        <expr><block>{<expr><name>AX_GID</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
        <expr><block>{<expr><name>AX_EGID</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
        <expr><block>{<expr><name>AX_SECURE</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
        <expr><block>{<expr><name>AX_RANDOM</name></expr>, <expr><name>random_addr</name></expr>}</block></expr>,
        <expr><block>{<expr><name>AX_HWCAP2</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <comment type="line">// suck that too</comment>
        <expr><block>{<expr><name>AX_EXECFN</name></expr>, <expr><name>file_addr</name></expr>}</block></expr>,
        <expr><block>{<expr><name>AX_PLATFORM</name></expr>, <expr><name>platform_addr</name></expr>}</block></expr>,
        <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
    }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>sp</name> <operator>-=</operator> <operator>(</operator><operator>(</operator><name><name>argv</name><operator>.</operator><name>count</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>envp</name><operator>.</operator><name>count</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>dword_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name>sp</name> <operator>-=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>aux</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name>sp</name> <operator>&amp;=</operator><operator>~</operator> <literal type="number">0xf</literal></expr>;</expr_stmt>

    <comment type="line">// now copy down, start using p so sp is preserved</comment>
    <decl_stmt><decl><type><name>addr_t</name></type> <name>p</name> <init>= <expr><name>sp</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// argc</comment>
    <if_stmt><if>if <condition>(<expr><call><name>user_put</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>argv</name><operator>.</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_EFAULT</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>dword_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <comment type="line">// argv</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>argc</name> <init>= <expr><name><name>argv</name><operator>.</operator><name>count</name></name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>argc</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>user_put</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>argv_addr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>_EFAULT</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>argv_addr</name> <operator>+=</operator> <call><name>user_strlen</name><argument_list>(<argument><expr><name>argv_addr</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>dword_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt> <comment type="line">// null terminator</comment>
    </block_content>}</block></while>
    <expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>dword_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt> <comment type="line">// null terminator</comment>

    <comment type="line">// envp</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>envc</name> <init>= <expr><name><name>envp</name><operator>.</operator><name>count</name></name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>envc</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>user_put</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>envp_addr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>_EFAULT</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>envp_addr</name> <operator>+=</operator> <call><name>user_strlen</name><argument_list>(<argument><expr><name>envp_addr</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>dword_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>dword_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt> <comment type="line">// null terminator</comment>

    <comment type="line">// copy auxv</comment>
    <expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>mm</name><operator>-&gt;</operator><name>auxv_start</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>user_put</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>aux</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>beyond_hope</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>aux</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>mm</name><operator>-&gt;</operator><name>auxv_end</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>mm</name><operator>-&gt;</operator><name>stack_start</name></name> <operator>=</operator> <name>sp</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>cpu</name><operator>.</operator><name>esp</name></name> <operator>=</operator> <name>sp</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>cpu</name><operator>.</operator><name>eip</name></name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>cpu</name><operator>.</operator><name>fcw</name></name> <operator>=</operator> <literal type="number">0x37f</literal></expr>;</expr_stmt>

    <comment type="line">// This code was written when I discovered that the glibc entry point</comment>
    <comment type="line">// interprets edx as the address of a function to call on exit, as</comment>
    <comment type="line">// specified in the ABI. This register is normally set by the dynamic</comment>
    <comment type="line">// linker, so everything works fine until you run a static executable.</comment>
    <expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>cpu</name><operator>.</operator><name>eax</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>cpu</name><operator>.</operator><name>ebx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>cpu</name><operator>.</operator><name>ecx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>cpu</name><operator>.</operator><name>edx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>cpu</name><operator>.</operator><name>esi</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>cpu</name><operator>.</operator><name>edi</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>cpu</name><operator>.</operator><name>ebp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>collapse_flags</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>cpu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>cpu</name><operator>.</operator><name>eflags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<label><name>out_free_interp</name>:</label>
    <if_stmt><if>if <condition>(<expr><name>interp_name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>interp_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>interp_fd</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_ERR</name><argument_list>(<argument><expr><name>interp_fd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>fd_close</name><argument_list>(<argument><expr><name>interp_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>interp_ph</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>interp_ph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<label><name>out_free_ph</name>:</label>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>err</name></expr>;</return>

<label><name>beyond_hope</name>:</label>
    <comment type="line">// TODO force sigsegv</comment>
    <expr_stmt><expr><call><name>write_wrunlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>mem</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>out_free_interp</name>;</goto>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>args_size</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>exec_args</name></name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>args_end</name> <init>= <expr><name><name>args</name><operator>.</operator><name>args</name></name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>args</name><operator>.</operator><name>count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>args_end</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>args_end</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
    <comment type="line">// don't forget the very last null terminator</comment>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>args_end</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>args_end</name><operator>++</operator></expr>;</expr_stmt>
    <return>return <expr><name>args_end</name> <operator>-</operator> <name><name>args</name><operator>.</operator><name>args</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>dword_t</name></type> <name>align_stack</name><parameter_list>(<parameter><decl><type><name>addr_t</name></type> <name>sp</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><name>sp</name> <operator>&amp;</operator><operator>~</operator> <literal type="number">0xf</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>dword_t</name></type> <name>copy_string</name><parameter_list>(<parameter><decl><type><name>addr_t</name></type> <name>sp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>sp</name> <operator>-=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>user_write_string</name><argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><name>sp</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>dword_t</name></type> <name>args_copy</name><parameter_list>(<parameter><decl><type><name>addr_t</name></type> <name>sp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>exec_args</name></name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><call><name>args_size</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>sp</name> <operator>-=</operator> <name>size</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>user_write</name><argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><name>sp</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ssize_t</name></type> <name>user_strlen</name><parameter_list>(<parameter><decl><type><name>addr_t</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
    <do>do <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>user_get</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block> while <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>;</do>
    <return>return <expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>user_memset</name><parameter_list>(<parameter><decl><type><name>addr_t</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>byte_t</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>dword_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <while>while <condition>(<expr><name>len</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><call><name>user_put</name><argument_list>(<argument><expr><name>start</name><operator>++</operator></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>format_exec</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>exec_args</name></name></type> <name>argv</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>exec_args</name></name></type> <name>envp</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>elf_exec</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>envp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>_ENOEXEC</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
    <comment type="line">// other formats would go here</comment>
    <return>return <expr><name>_ENOEXEC</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>shebang_exec</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>exec_args</name></name></type> <name>argv</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>exec_args</name></name></type> <name>envp</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="line">// read the first 128 bytes to get the shebang line out of</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>fd</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>lseek</name></name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_EIO</name></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>header</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name><name>fd</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_EIO</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>header</name><index>[<expr><name>size</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

    <comment type="line">// only look at the first line</comment>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>newline</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>newline</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_ENOEXEC</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>newline</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

    <comment type="line">// format: #![spaces]interpreter[spaces]argument[spaces]</comment>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>header</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'#'</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'!'</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_ENOEXEC</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_ENOEXEC</name></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>interpreter</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        <while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>argument</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>
    <comment type="line">// strip trailing whitespace</comment>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><operator>*</operator><name>p</name><operator>--</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></while>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>argument</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>argument</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>exec_args</name></name></type> <name>argv_rest</name> <init>= <expr><block>{
        <expr><operator>.</operator><name>count</name> <operator>=</operator> <name><name>argv</name><operator>.</operator><name>count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>,
        <expr><operator>.</operator><name>args</name> <operator>=</operator> <name><name>argv</name><operator>.</operator><name>args</name></name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>argv</name><operator>.</operator><name>args</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>,
    }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>args_rest_size</name> <init>= <expr><call><name>args_size</name><argument_list>(<argument><expr><name>argv_rest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>extra_args_size</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>interpreter</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>argument</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>extra_args_size</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>argument</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>args_rest_size</name> <operator>+</operator> <name>extra_args_size</name> <operator>&gt;=</operator> <name>ARGV_MAX</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_E2BIG</name></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name><name>new_argv_buf</name><index>[<expr><name>ARGV_MAX</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>exec_args</name></name></type> <name>new_argv</name> <init>= <expr><block>{<expr><operator>.</operator><name>args</name> <operator>=</operator> <name>new_argv_buf</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>new_argv_buf</name></expr></argument>, <argument><expr><name>interpreter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>new_argv</name><operator>.</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>interpreter</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>argument</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>new_argv_buf</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><name>argument</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>new_argv</name><operator>.</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>argument</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>new_argv_buf</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>new_argv</name><operator>.</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>new_argv_buf</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><name><name>argv_rest</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><name>args_rest_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>new_argv</name><operator>.</operator><name>count</name></name> <operator>+=</operator> <name><name>argv_rest</name><operator>.</operator><name>count</name></name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>interpreter_fd</name> <init>= <expr><call><name>generic_open</name><argument_list>(<argument><expr><name>interpreter</name></expr></argument>, <argument><expr><name>O_RDONLY_</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IS_ERR</name><argument_list>(<argument><expr><name>interpreter_fd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>PTR_ERR</name><argument_list>(<argument><expr><name>interpreter_fd</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>format_exec</name><argument_list>(<argument><expr><name>interpreter_fd</name></expr></argument>, <argument><expr><name>interpreter</name></expr></argument>, <argument><expr><name>new_argv</name></expr></argument>, <argument><expr><name>envp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>fd_close</name><argument_list>(<argument><expr><name>interpreter_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>__do_execve</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>exec_args</name></name></type> <name>argv</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>exec_args</name></name></type> <name>envp</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name> <init>= <expr><call><name>generic_open</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IS_ERR</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>PTR_ERR</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>statbuf</name></name></type> <name>stat</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name><name>fd</name><operator>-&gt;</operator><name>mount</name><operator>-&gt;</operator><name>fs</name><operator>-&gt;</operator><name>fstat</name></name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>fd_close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>err</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// if nobody has permission to execute, it should be safe to not execute</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>stat</name><operator>.</operator><name>mode</name></name> <operator>&amp;</operator> <literal type="number">0111</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>fd_close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>_EACCES</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>format_exec</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>envp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>_ENOEXEC</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>shebang_exec</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>envp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>fd_close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="line">// setuid/setgid</comment>
    <if_stmt><if>if <condition>(<expr><name><name>stat</name><operator>.</operator><name>mode</name></name> <operator>&amp;</operator> <name>S_ISUID</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>suid</name></name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>euid</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>euid</name></name> <operator>=</operator> <name><name>stat</name><operator>.</operator><name>uid</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>stat</name><operator>.</operator><name>mode</name></name> <operator>&amp;</operator> <name>S_ISGID</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>sgid</name></name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>egid</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>egid</name></name> <operator>=</operator> <name><name>stat</name><operator>.</operator><name>gid</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// save current-&gt;comm</comment>
    <expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>general_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>basename</name> <init>= <expr><call><name>strrchr</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>basename</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>basename</name> <operator>=</operator> <name>file</name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>basename</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>comm</name></name></expr></argument>, <argument><expr><name>basename</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>comm</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>general_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>update_thread_name</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// cloexec</comment>
    <comment type="line">// consider putting this in fd.c?</comment>
    <expr_stmt><expr><call><name>fdtable_do_cloexec</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>files</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// reset signal handlers</comment>
    <expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>sighand</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>sig</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>sig</name> <operator>&lt;</operator> <name>NUM_SIGS</name></expr>;</condition> <incr><expr><name>sig</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>sigaction_</name></name> <modifier>*</modifier></type><name>action</name> <init>= <expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>sighand</name><operator>-&gt;</operator><name>action</name><index>[<expr><name>sig</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>action</name><operator>-&gt;</operator><name>handler</name></name> <operator>!=</operator> <name>SIG_IGN_</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>action</name><operator>-&gt;</operator><name>handler</name></name> <operator>=</operator> <name>SIG_DFL_</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>sighand</name><operator>-&gt;</operator><name>altstack</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>sighand</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>did_exec</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>vfork_notify</name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>ptrace</name><operator>.</operator><name>traced</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pids_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>send_signal</name><argument_list>(<argument>current</argument>, <argument>SIGTRAP_</argument>, <argument>(struct siginfo_) {
            .code = SI_USER_</argument>,
            <argument>.kill.pid = current-&gt;pid</argument>,
            <argument>.kill.uid = current-&gt;uid</argument>,
        <argument>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <expr_stmt><expr><call><name>unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pids_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>do_execve</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>argv_p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>envp_p</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>exec_args</name></name></type> <name>argv</name> <init>= <expr><block>{<expr><operator>.</operator><name>count</name> <operator>=</operator> <name>argc</name></expr>, <expr><operator>.</operator><name>args</name> <operator>=</operator> <name>argv_p</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>exec_args</name></name></type> <name>envp</name> <init>= <expr><block>{<expr><operator>.</operator><name>args</name> <operator>=</operator> <name>envp_p</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><operator>*</operator><name>envp_p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>envp_p</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>envp_p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>envp</name><operator>.</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return <expr><call><name>__do_execve</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>envp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>user_read_string_array</name><parameter_list>(<parameter><decl><type><name>addr_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>max</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>addr_t</name></type> <name>str_addr</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>user_get</name><argument_list>(<argument><expr><name>addr</name> <operator>+</operator> <name>i</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>addr_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>str_addr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>_EFAULT</name></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>str_addr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>str_p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;=</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>_E2BIG</name></expr>;</return></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>user_get</name><argument_list>(<argument><expr><name>str_addr</name> <operator>+</operator> <name>str_p</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>_EFAULT</name></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>str_p</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><name>p</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
                <break>break;</break></block_content></block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;=</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_E2BIG</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>buf</name><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>dword_t</name></type> <name>sys_execve</name><parameter_list>(<parameter><decl><type><name>addr_t</name></type> <name>filename_addr</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>argv_addr</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>envp_addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>filename</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>user_read_string</name><argument_list>(<argument><expr><name>filename_addr</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_EFAULT</name></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><name>_ENOMEM</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>argv</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>ARGV_MAX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>argv</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>err_free_argv</name>;</goto></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>ssize_t</name></type> <name>argc</name> <init>= <expr><call><name>user_read_string_array</name><argument_list>(<argument><expr><name>argv_addr</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>ARGV_MAX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>argc</name></expr>;</expr_stmt>
        <goto>goto <name>err_free_argv</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>envp</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>ARGV_MAX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>envp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>err_free_envp</name>;</goto></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>envp_addr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>user_read_string_array</name><argument_list>(<argument><expr><name>envp_addr</name></expr></argument>, <argument><expr><name>envp</name></expr></argument>, <argument><expr><name>ARGV_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>err_free_envp</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="line">// Do not take advantage of this nonstandard and nonportable misfeature!</comment>
        <comment type="line">// - Michael Kerrisk, execve(2)</comment>
        <expr_stmt><expr><name><name>envp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>envp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>STRACE</name><argument_list>(<argument><expr><literal type="string">"execve(\"%.1000s\", {"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><name>argv</name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><operator>*</operator><name>args</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>STRACE</name><argument_list>(<argument><expr><literal type="string">"\"%.1000s\", "</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>args</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>STRACE</name><argument_list>(<argument><expr><literal type="string">"}, {"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>args</name> <operator>=</operator> <name>envp</name></expr>;</expr_stmt>
    <while>while <condition>(<expr><operator>*</operator><name>args</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>STRACE</name><argument_list>(<argument><expr><literal type="string">"\"%.1000s\", "</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>args</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>STRACE</name><argument_list>(<argument><expr><literal type="string">"})"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>do_execve</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>envp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>err_free_envp</name>:</label>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>envp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>err_free_argv</name>:</label>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>
</unit>
