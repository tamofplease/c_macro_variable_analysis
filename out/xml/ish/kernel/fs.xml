<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/kernel/fs.h"><cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FS_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"misc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util/list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fs/stat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fs/dev.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fs/fake-db.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fs/fix_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"emu/memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dirent.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sqlite3.h&gt;</cpp:file></cpp:include>

<struct>struct <name>fs_info</name> <block>{
    <decl_stmt><decl><type><name>atomic_uint</name></type> <name>refcount</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mode_t_</name></type> <name>umask</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>pwd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>root</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>lock_t</name></type> <name>lock</name></decl>;</decl_stmt>
}</block>;</struct>
<function_decl><type><name><name>struct</name> <name>fs_info</name></name> <modifier>*</modifier></type><name>fs_info_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>fs_info</name></name> <modifier>*</modifier></type><name>fs_info_copy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fs_info</name></name> <modifier>*</modifier></type><name>fs</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>fs_info_release</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fs_info</name></name> <modifier>*</modifier></type><name>fs</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>fs_chdir</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fs_info</name></name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>pwd</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_PATH</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_NAME</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<struct>struct <name>attr</name> <block>{
    <enum>enum <name>attr_type</name> <block>{
        <decl><name>attr_uid</name></decl>,
        <decl><name>attr_gid</name></decl>,
        <decl><name>attr_mode</name></decl>,
        <decl><name>attr_size</name></decl>,
    }</block> <decl><name>type</name></decl>;</enum>
    <union>union <block>{
        <decl_stmt><decl><type><name>uid_t_</name></type> <name>uid</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uid_t_</name></type> <name>gid</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>mode_t_</name></type> <name>mode</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>off_t_</name></type> <name>size</name></decl>;</decl_stmt>
    }</block>;</union>
}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>make_attr</name><parameter_list>(<parameter><type><name>_type</name></type></parameter>, <parameter><type><name>thing</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>((struct attr) {.type = attr_##_type, ._type = thing})</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_SYMLINK_NOFOLLOW_</name></cpp:macro> <cpp:value>0x100</cpp:value></cpp:define>

<function_decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>generic_open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>generic_openat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>at</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>generic_getpath</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>generic_linkat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>src_at</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src_raw</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>dst_at</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dst_raw</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>generic_unlinkat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>at</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>generic_rmdirat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>at</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>generic_renameat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>src_at</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>dst_at</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>generic_symlinkat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>at</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>link</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>generic_mknodat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>at</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>mode_t_</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>dev_t_</name></type> <name>dev</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>generic_seek</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>off_t_</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_R</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_W</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_X</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AC_F</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<function_decl><type><name>int</name></type> <name>generic_accessat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>dirfd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>generic_statat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>at</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>statbuf</name></name> <modifier>*</modifier></type><name>stat</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>follow_links</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>generic_setattrat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>at</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>attr</name></name></type> <name>attr</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>follow_links</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>generic_utime</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>at</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>atime</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>mtime</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>follow_links</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ssize_t</name></type> <name>generic_readlinkat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>at</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bufsize</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>generic_mkdirat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>at</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>mode_t_</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>access_check</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>statbuf</name></name> <modifier>*</modifier></type><name>stat</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>check</name></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>mount</name> <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>point</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fs_ops</name></name> <modifier>*</modifier></type><name>fs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>refcount</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>list</name></name></type> <name>mounts</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>root_fd</name></decl>;</decl_stmt>
    <union>union <block>{
        <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>struct</name> <name>fakefs_db</name></name></type> <name>fakefs</name></decl>;</decl_stmt>
    }</block>;</union>
}</block>;</struct>
<decl_stmt><decl><type><specifier>extern</specifier> <name>lock_t</name></type> <name>mounts_lock</name></decl>;</decl_stmt>

<comment type="line">// returns a reference, which must be released</comment>
<function_decl><type><name><name>struct</name> <name>mount</name></name> <modifier>*</modifier></type><name>mount_find</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>mount_retain</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mount</name></name> <modifier>*</modifier></type><name>mount</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>mount_release</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mount</name></name> <modifier>*</modifier></type><name>mount</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// must hold mounts_lock while calling these, or traversing mounts</comment>
<function_decl><type><name>int</name></type> <name>do_mount</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fs_ops</name></name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>point</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>do_umount</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>point</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>mount_remove</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mount</name></name> <modifier>*</modifier></type><name>mount</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>list</name></name></type> <name>mounts</name></decl>;</decl_stmt>

<function_decl><type><name>bool</name></type> <name>mount_param_flag</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>flag</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// open flags</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_ACCMODE_</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_RDONLY_</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_WRONLY_</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_RDWR_</name></cpp:macro> <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_CREAT_</name></cpp:macro> <cpp:value>(1 &lt;&lt; 6)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_EXCL_</name></cpp:macro> <cpp:value>(1 &lt;&lt; 7)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_NOCTTY_</name></cpp:macro> <cpp:value>(1 &lt;&lt; 8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_TRUNC_</name></cpp:macro> <cpp:value>(1 &lt;&lt; 9)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_APPEND_</name></cpp:macro> <cpp:value>(1 &lt;&lt; 10)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_NONBLOCK_</name></cpp:macro> <cpp:value>(1 &lt;&lt; 11)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_DIRECTORY_</name></cpp:macro> <cpp:value>(1 &lt;&lt; 16)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_CLOEXEC_</name></cpp:macro> <cpp:value>(1 &lt;&lt; 19)</cpp:value></cpp:define>

<comment type="line">// generic ioctls</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIONREAD_</name></cpp:macro> <cpp:value>0x541b</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIONBIO_</name></cpp:macro> <cpp:value>0x5421</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIONCLEX_</name></cpp:macro> <cpp:value>0x5450</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIOCLEX_</name></cpp:macro> <cpp:value>0x5451</cpp:value></cpp:define>

<comment type="line">// All operations are optional unless otherwise specified</comment>
<struct>struct <name>fs_ops</name> <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>magic</name></decl>;</decl_stmt>

    <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>mount</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mount</name></name> <modifier>*</modifier></type><name>mount</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>umount</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mount</name></name> <modifier>*</modifier></type><name>mount</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>statfs</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mount</name></name> <modifier>*</modifier></type><name>mount</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>statfsbuf</name></name> <modifier>*</modifier></type><name>stat</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type>(<modifier>*</modifier><name>open</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mount</name></name> <modifier>*</modifier></type><name>mount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl> <comment type="line">// required</comment>
    <function_decl><type><name>ssize_t</name></type> (<modifier>*</modifier><name>readlink</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mount</name></name> <modifier>*</modifier></type><name>mount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bufsize</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="line">// These return _EPERM if not present</comment>
    <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>link</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mount</name></name> <modifier>*</modifier></type><name>mount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>unlink</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mount</name></name> <modifier>*</modifier></type><name>mount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>rmdir</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mount</name></name> <modifier>*</modifier></type><name>mount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>rename</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mount</name></name> <modifier>*</modifier></type><name>mount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>symlink</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mount</name></name> <modifier>*</modifier></type><name>mount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>link</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>mknod</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mount</name></name> <modifier>*</modifier></type><name>mount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>mode_t_</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>dev_t_</name></type> <name>dev</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>mkdir</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mount</name></name> <modifier>*</modifier></type><name>mount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>mode_t_</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="line">// There's a close function in both the fs and fd to handle device files</comment>
    <comment type="line">// where, for instance, there's a real_fd needed for getpath and also a tty</comment>
    <comment type="line">// reference, and both need to be released when the fd is closed.</comment>
    <comment type="line">// If they are the same function, it will only be called once.</comment>
    <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>close</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>stat</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mount</name></name> <modifier>*</modifier></type><name>mount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>statbuf</name></name> <modifier>*</modifier></type><name>stat</name></decl></parameter>)</parameter_list>;</function_decl> <comment type="line">// required</comment>
    <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>fstat</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>statbuf</name></name> <modifier>*</modifier></type><name>stat</name></decl></parameter>)</parameter_list>;</function_decl> <comment type="line">// required</comment>
    <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>setattr</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mount</name></name> <modifier>*</modifier></type><name>mount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>attr</name></name></type> <name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>fsetattr</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>attr</name></name></type> <name>attr</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>utime</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mount</name></name> <modifier>*</modifier></type><name>mount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>atime</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>mtime</name></decl></parameter>)</parameter_list>;</function_decl>
    <comment type="line">// Returns the path of the file descriptor, null terminated, buf must be at least MAX_PATH+1</comment>
    <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>getpath</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl> <comment type="line">// required</comment>

    <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>flock</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>operation</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="line">// If present, called when all references to an inode_data for this</comment>
    <comment type="line">// filesystem go away.</comment>
    <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>inode_orphaned</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mount</name></name> <modifier>*</modifier></type><name>mount</name></decl></parameter>, <parameter><decl><type><name>ino_t</name></type> <name>inode</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>

<function_decl><type><name><name>struct</name> <name>mount</name></name> <modifier>*</modifier></type><name>find_mount_and_trim_path</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// adhoc fs</comment>
<function_decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>adhoc_fd_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fd_ops</name></name> <modifier>*</modifier></type><name>ops</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="line">// this is for the "wtf is apple smoking" section</comment>
<function_decl><type><name>bool</name></type> <name>is_adhoc_fd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// filesystems</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>fs_ops</name></name></type> <name>procfs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>fs_ops</name></name></type> <name>fakefs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>fs_ops</name></name></type> <name>devptsfs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>fs_ops</name></name></type> <name>tmpfs</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> <name>fs_register</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fs_ops</name></name> <modifier>*</modifier></type><name>fs</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
