<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/kernel/mmap.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kernel/calls.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kernel/errno.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kernel/task.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fs/fd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"emu/memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kernel/mm.h"</cpp:file></cpp:include>

<function><type><name><name>struct</name> <name>mm</name></name> <modifier>*</modifier></type><name>mm_new</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>mm</name></name> <modifier>*</modifier></type><name>mm</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>mm</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>mm</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>mem_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mm</name><operator>-&gt;</operator><name>mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mm</name><operator>-&gt;</operator><name>start_brk</name></name> <operator>=</operator> <name><name>mm</name><operator>-&gt;</operator><name>brk</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="line">// should get overwritten by exec</comment>
    <expr_stmt><expr><name><name>mm</name><operator>-&gt;</operator><name>exefile</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mm</name><operator>-&gt;</operator><name>refcount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <return>return <expr><name>mm</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>mm</name></name> <modifier>*</modifier></type><name>mm_copy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mm</name></name> <modifier>*</modifier></type><name>mm</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>mm</name></name> <modifier>*</modifier></type><name>new_mm</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>mm</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>new_mm</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>new_mm</name> <operator>=</operator> <operator>*</operator><name>mm</name></expr>;</expr_stmt>
    <comment type="line">// Fix wrlock_init failing because it thinks it's reinitializing the same lock</comment>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>new_mm</name><operator>-&gt;</operator><name>mem</name><operator>.</operator><name>lock</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>new_mm</name><operator>-&gt;</operator><name>mem</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>new_mm</name><operator>-&gt;</operator><name>refcount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mem_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>new_mm</name><operator>-&gt;</operator><name>mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fd_retain</name><argument_list>(<argument><expr><name><name>new_mm</name><operator>-&gt;</operator><name>exefile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>write_wrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mm</name><operator>-&gt;</operator><name>mem</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pt_copy_on_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mm</name><operator>-&gt;</operator><name>mem</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new_mm</name><operator>-&gt;</operator><name>mem</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MEM_PAGES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>write_wrunlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mm</name><operator>-&gt;</operator><name>mem</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>new_mm</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mm_retain</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mm</name></name> <modifier>*</modifier></type><name>mm</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>mm</name><operator>-&gt;</operator><name>refcount</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mm_release</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mm</name></name> <modifier>*</modifier></type><name>mm</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>mm</name><operator>-&gt;</operator><name>refcount</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>mm</name><operator>-&gt;</operator><name>exefile</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>fd_close</name><argument_list>(<argument><expr><name><name>mm</name><operator>-&gt;</operator><name>exefile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>mem_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mm</name><operator>-&gt;</operator><name>mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>addr_t</name></type> <name>do_mmap</name><parameter_list>(<parameter><decl><type><name>addr_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>dword_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>dword_t</name></type> <name>prot</name></decl></parameter>, <parameter><decl><type><name>dword_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>fd_t</name></type> <name>fd_no</name></decl></parameter>, <parameter><decl><type><name>dword_t</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>pages_t</name></type> <name>pages</name> <init>= <expr><call><name>PAGE_ROUND_UP</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pages</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>_EINVAL</name></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>page_t</name></type> <name>page</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>addr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>PGOFFSET</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>_EINVAL</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>page</name> <operator>=</operator> <call><name>PAGE</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MMAP_FIXED</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>pt_is_hole</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>mem</name></name></expr></argument>, <argument><expr><name>page</name></expr></argument>, <argument><expr><name>pages</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>addr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>addr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>page</name> <operator>=</operator> <call><name>pt_find_hole</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>mem</name></name></expr></argument>, <argument><expr><name>pages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>page</name> <operator>==</operator> <name>BAD_PAGE</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>MMAP_SHARED</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>prot</name> <operator>|=</operator> <name>P_SHARED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>MMAP_ANONYMOUS</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>pt_map_nothing</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>mem</name></name></expr></argument>, <argument><expr><name>page</name></expr></argument>, <argument><expr><name>pages</name></expr></argument>, <argument><expr><name>prot</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="line">// fd must be valid</comment>
        <decl_stmt><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>fd</name> <init>= <expr><call><name>f_get</name><argument_list>(<argument><expr><name>fd_no</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>_EBADF</name></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>fd</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>mmap</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>_ENODEV</name></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name><name>fd</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>mmap</name></name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>mem</name></name></expr></argument>, <argument><expr><name>page</name></expr></argument>, <argument><expr><name>pages</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>prot</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>mem_pt</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>mem</name></name></expr></argument>, <argument><expr><name>page</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>data</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <call><name>fd_retain</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mem_pt</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>mem</name></name></expr></argument>, <argument><expr><name>page</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>data</name><operator>-&gt;</operator><name>file_offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name>page</name> <operator>&lt;&lt;</operator> <name>PAGE_BITS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>addr_t</name></type> <name>mmap_common</name><parameter_list>(<parameter><decl><type><name>addr_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>dword_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>dword_t</name></type> <name>prot</name></decl></parameter>, <parameter><decl><type><name>dword_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>fd_t</name></type> <name>fd_no</name></decl></parameter>, <parameter><decl><type><name>dword_t</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>STRACE</name><argument_list>(<argument><expr><literal type="string">"mmap(0x%x, 0x%x, 0x%x, 0x%x, %d, %d)"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>prot</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>fd_no</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_EINVAL</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>prot</name> <operator>&amp;</operator> <operator>~</operator><name>P_RWX</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_EINVAL</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MMAP_PRIVATE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MMAP_SHARED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_EINVAL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>write_wrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>mem</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>addr_t</name></type> <name>res</name> <init>= <expr><call><name>do_mmap</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>prot</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>fd_no</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>write_wrunlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>mem</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>addr_t</name></type> <name>sys_mmap2</name><parameter_list>(<parameter><decl><type><name>addr_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>dword_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>dword_t</name></type> <name>prot</name></decl></parameter>, <parameter><decl><type><name>dword_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>fd_t</name></type> <name>fd_no</name></decl></parameter>, <parameter><decl><type><name>dword_t</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>mmap_common</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>prot</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>fd_no</name></expr></argument>, <argument><expr><name>offset</name> <operator>&lt;&lt;</operator> <name>PAGE_BITS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>mmap_arg_struct</name> <block>{
    <decl_stmt><decl><type><name>dword_t</name></type> <name>addr</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>prot</name></decl>, <decl><type ref="prev"/><name>flags</name></decl>, <decl><type ref="prev"/><name>fd</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>addr_t</name></type> <name>sys_mmap</name><parameter_list>(<parameter><decl><type><name>addr_t</name></type> <name>args_addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>mmap_arg_struct</name></name></type> <name>args</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>user_get</name><argument_list>(<argument><expr><name>args_addr</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_EFAULT</name></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><call><name>mmap_common</name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>prot</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>flags</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int_t</name></type> <name>sys_munmap</name><parameter_list>(<parameter><decl><type><name>addr_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>STRACE</name><argument_list>(<argument><expr><literal type="string">"munmap(0x%x, 0x%x)"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>PGOFFSET</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_EINVAL</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_EINVAL</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>write_wrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>mem</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>pt_unmap_always</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>mem</name></name></expr></argument>, <argument><expr><call><name>PAGE</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>PAGE_ROUND_UP</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>write_wrunlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>mem</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_EINVAL</name></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MREMAP_MAYMOVE_</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MREMAP_FIXED_</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<function><type><name>int_t</name></type> <name>sys_mremap</name><parameter_list>(<parameter><decl><type><name>addr_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>dword_t</name></type> <name>old_len</name></decl></parameter>, <parameter><decl><type><name>dword_t</name></type> <name>new_len</name></decl></parameter>, <parameter><decl><type><name>dword_t</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>STRACE</name><argument_list>(<argument><expr><literal type="string">"mremap(%#x, %#x, %#x, %d)"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>old_len</name></expr></argument>, <argument><expr><name>new_len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>PGOFFSET</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_EINVAL</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>MREMAP_MAYMOVE_</name> <operator>|</operator> <name>MREMAP_FIXED_</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_EINVAL</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>MREMAP_FIXED_</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>FIXME</name><argument_list>(<argument><expr><literal type="string">"missing MREMAP_FIXED"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>_EINVAL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>pages_t</name></type> <name>old_pages</name> <init>= <expr><call><name>PAGE</name><argument_list>(<argument><expr><name>old_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>pages_t</name></type> <name>new_pages</name> <init>= <expr><call><name>PAGE</name><argument_list>(<argument><expr><name>new_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// shrinking always works</comment>
    <if_stmt><if>if <condition>(<expr><name>new_pages</name> <operator>&lt;=</operator> <name>old_pages</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>pt_unmap</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>mem</name></name></expr></argument>, <argument><expr><call><name>PAGE</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>new_pages</name></expr></argument>, <argument><expr><name>old_pages</name> <operator>-</operator> <name>new_pages</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>_EFAULT</name></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><name>addr</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>pt_entry</name></name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><call><name>mem_pt</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>mem</name></name></expr></argument>, <argument><expr><call><name>PAGE</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>entry</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_EFAULT</name></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>dword_t</name></type> <name>pt_flags</name> <init>= <expr><name><name>entry</name><operator>-&gt;</operator><name>flags</name></name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>page_t</name></type> <name>page</name> <init>= <expr><call><name>PAGE</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><name>page</name> <operator>&lt;</operator> <call><name>PAGE</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>old_pages</name></expr>;</condition> <incr><expr><name>page</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>mem_pt</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>mem</name></name></expr></argument>, <argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>entry</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>entry</name><operator>-&gt;</operator><name>flags</name></name> <operator>!=</operator> <name>pt_flags</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>_EFAULT</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>pt_flags</name> <operator>&amp;</operator> <name>P_ANONYMOUS</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>FIXME</name><argument_list>(<argument><expr><literal type="string">"mremap grow on file mappings"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>_EFAULT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>page_t</name></type> <name>extra_start</name> <init>= <expr><call><name>PAGE</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>old_pages</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>pages_t</name></type> <name>extra_pages</name> <init>= <expr><name>new_pages</name> <operator>-</operator> <name>old_pages</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pt_is_hole</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>mem</name></name></expr></argument>, <argument><expr><name>extra_start</name></expr></argument>, <argument><expr><name>extra_pages</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>pt_map_nothing</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>mem</name></name></expr></argument>, <argument><expr><name>extra_start</name></expr></argument>, <argument><expr><name>extra_pages</name></expr></argument>, <argument><expr><name>pt_flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><name>addr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int_t</name></type> <name>sys_mprotect</name><parameter_list>(<parameter><decl><type><name>addr_t</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int_t</name></type> <name>prot</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>STRACE</name><argument_list>(<argument><expr><literal type="string">"mprotect(0x%x, 0x%x, 0x%x)"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>prot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>PGOFFSET</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_EINVAL</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>prot</name> <operator>&amp;</operator> <operator>~</operator><name>P_RWX</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_EINVAL</name></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>pages_t</name></type> <name>pages</name> <init>= <expr><call><name>PAGE_ROUND_UP</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>write_wrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>mem</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>pt_set_flags</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>mem</name></name></expr></argument>, <argument><expr><call><name>PAGE</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pages</name></expr></argument>, <argument><expr><name>prot</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>write_wrunlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>mem</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>dword_t</name></type> <name>sys_madvise</name><parameter_list>(<parameter><function_decl><type><name>addr_t</name></type> <name>UNUSED</name><parameter_list>(<parameter><decl><type><name>addr</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><function_decl><type><name>dword_t</name></type> <name>UNUSED</name><parameter_list>(<parameter><decl><type><name>len</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><function_decl><type><name>dword_t</name></type> <name>UNUSED</name><parameter_list>(<parameter><decl><type><name>advice</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="line">// portable applications should not rely on linux's destructive semantics for MADV_DONTNEED.</comment>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>dword_t</name></type> <name>sys_mbind</name><parameter_list>(<parameter><function_decl><type><name>addr_t</name></type> <name>UNUSED</name><parameter_list>(<parameter><decl><type><name>addr</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><function_decl><type><name>dword_t</name></type> <name>UNUSED</name><parameter_list>(<parameter><decl><type><name>len</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><function_decl><type><name>int_t</name></type> <name>UNUSED</name><parameter_list>(<parameter><decl><type><name>mode</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,
        <parameter><function_decl><type><name>addr_t</name></type> <name>UNUSED</name><parameter_list>(<parameter><decl><type><name>nodemask</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><function_decl><type><name>dword_t</name></type> <name>UNUSED</name><parameter_list>(<parameter><decl><type><name>maxnode</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><function_decl><type><name>uint_t</name></type> <name>UNUSED</name><parameter_list>(<parameter><decl><type><name>flags</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int_t</name></type> <name>sys_mlock</name><parameter_list>(<parameter><function_decl><type><name>addr_t</name></type> <name>UNUSED</name><parameter_list>(<parameter><decl><type><name>addr</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><function_decl><type><name>dword_t</name></type> <name>UNUSED</name><parameter_list>(<parameter><decl><type><name>len</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int_t</name></type> <name>sys_msync</name><parameter_list>(<parameter><function_decl><type><name>addr_t</name></type> <name>UNUSED</name><parameter_list>(<parameter><decl><type><name>addr</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><function_decl><type><name>dword_t</name></type> <name>UNUSED</name><parameter_list>(<parameter><decl><type><name>len</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><function_decl><type><name>int_t</name></type> <name>UNUSED</name><parameter_list>(<parameter><decl><type><name>flags</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>addr_t</name></type> <name>sys_brk</name><parameter_list>(<parameter><decl><type><name>addr_t</name></type> <name>new_brk</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>STRACE</name><argument_list>(<argument><expr><literal type="string">"brk(0x%x)"</literal></expr></argument>, <argument><expr><name>new_brk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>mm</name></name> <modifier>*</modifier></type><name>mm</name> <init>= <expr><name><name>current</name><operator>-&gt;</operator><name>mm</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>write_wrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mm</name><operator>-&gt;</operator><name>mem</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>new_brk</name> <operator>&lt;</operator> <name><name>mm</name><operator>-&gt;</operator><name>start_brk</name></name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>addr_t</name></type> <name>old_brk</name> <init>= <expr><name><name>mm</name><operator>-&gt;</operator><name>brk</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>new_brk</name> <operator>&gt;</operator> <name>old_brk</name></expr>)</condition> <block>{<block_content>
        <comment type="line">// expand heap: map region from old_brk to new_brk</comment>
        <comment type="line">// round up because of the definition of brk: "the first location after the end of the uninitialized data segment." (brk(2))</comment>
        <comment type="line">// if the brk is 0x2000, page 0x2000 shouldn't be mapped, but it should be if the brk is 0x2001.</comment>
        <decl_stmt><decl><type><name>page_t</name></type> <name>start</name> <init>= <expr><call><name>PAGE_ROUND_UP</name><argument_list>(<argument><expr><name>old_brk</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>pages_t</name></type> <name>size</name> <init>= <expr><call><name>PAGE_ROUND_UP</name><argument_list>(<argument><expr><name>new_brk</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>PAGE_ROUND_UP</name><argument_list>(<argument><expr><name>old_brk</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pt_is_hole</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mm</name><operator>-&gt;</operator><name>mem</name></name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>pt_map_nothing</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mm</name><operator>-&gt;</operator><name>mem</name></name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>P_WRITE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>new_brk</name> <operator>&lt;</operator> <name>old_brk</name></expr>)</condition> <block>{<block_content>
        <comment type="line">// shrink heap: unmap region from new_brk to old_brk</comment>
        <comment type="line">// first page to unmap is PAGE(new_brk)</comment>
        <comment type="line">// last page to unmap is PAGE(old_brk)</comment>
        <expr_stmt><expr><call><name>pt_unmap_always</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mm</name><operator>-&gt;</operator><name>mem</name></name></expr></argument>, <argument><expr><call><name>PAGE</name><argument_list>(<argument><expr><name>new_brk</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>PAGE</name><argument_list>(<argument><expr><name>old_brk</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>PAGE</name><argument_list>(<argument><expr><name>new_brk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>mm</name><operator>-&gt;</operator><name>brk</name></name> <operator>=</operator> <name>new_brk</name></expr>;</expr_stmt>
<label><name>out</name>:</label><empty_stmt>;</empty_stmt>
    <decl_stmt><decl><type><name>addr_t</name></type> <name>brk</name> <init>= <expr><name><name>mm</name><operator>-&gt;</operator><name>brk</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>write_wrunlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mm</name><operator>-&gt;</operator><name>mem</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>brk</name></expr>;</return>
</block_content>}</block></function>
</unit>
