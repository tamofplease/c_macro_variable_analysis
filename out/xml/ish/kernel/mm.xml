<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/kernel/mm.h"><cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>KERNEL_MM_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KERNEL_MM_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"emu/memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"misc.h"</cpp:file></cpp:include>

<comment type="line">// uses mem.lock instead of having a lock of its own</comment>
<struct>struct <name>mm</name> <block>{
    <decl_stmt><decl><type><name>atomic_uint</name></type> <name>refcount</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>mem</name></name></type> <name>mem</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>addr_t</name></type> <name>vdso</name></decl>;</decl_stmt> <comment type="line">// immutable</comment>
    <decl_stmt><decl><type><name>addr_t</name></type> <name>start_brk</name></decl>;</decl_stmt> <comment type="line">// immutable</comment>
    <decl_stmt><decl><type><name>addr_t</name></type> <name>brk</name></decl>;</decl_stmt>

    <comment type="line">// crap for procfs</comment>
    <decl_stmt><decl><type><name>addr_t</name></type> <name>argv_start</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>addr_t</name></type> <name>argv_end</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>addr_t</name></type> <name>env_start</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>addr_t</name></type> <name>env_end</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>addr_t</name></type> <name>auxv_start</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>addr_t</name></type> <name>auxv_end</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>addr_t</name></type> <name>stack_start</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>fd</name></name> <modifier>*</modifier></type><name>exefile</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="line">// Create a new address space</comment>
<function_decl><type><name><name>struct</name> <name>mm</name></name> <modifier>*</modifier></type><name>mm_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<comment type="line">// Clone (COW) the address space</comment>
<function_decl><type><name><name>struct</name> <name>mm</name></name> <modifier>*</modifier></type><name>mm_copy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mm</name></name> <modifier>*</modifier></type><name>mm</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="line">// Increment the refcount</comment>
<function_decl><type><name>void</name></type> <name>mm_retain</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mm</name></name> <modifier>*</modifier></type><name>mem</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="line">// Decrement the refcount, destroy everything in the space if 0</comment>
<function_decl><type><name>void</name></type> <name>mm_release</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mm</name></name> <modifier>*</modifier></type><name>mem</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
