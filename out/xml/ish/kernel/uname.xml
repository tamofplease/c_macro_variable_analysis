<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/kernel/uname.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/utsname.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kernel/calls.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"platform/platform.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__APPLE__</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sysctl.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__linux__</name></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sysinfo.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uname_version</name> <init>= <expr><literal type="string">"SUPER AWESOME"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uname_hostname_override</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>do_uname</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>uname</name></name> <modifier>*</modifier></type><name>uts</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>utsname</name></name></type> <name>real_uname</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>uname</name><argument_list>(<argument><expr><operator>&amp;</operator><name>real_uname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name> <init>= <expr><name><name>real_uname</name><operator>.</operator><name>nodename</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>uname_hostname_override</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>hostname</name> <operator>=</operator> <name>uname_hostname_override</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>uts</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>uname</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>uts</name><operator>-&gt;</operator><name>system</name></name></expr></argument>, <argument><expr><literal type="string">"Linux"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>uts</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>uts</name><operator>-&gt;</operator><name>release</name></name></expr></argument>, <argument><expr><literal type="string">"4.20.69-ish"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>uts</name><operator>-&gt;</operator><name>version</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>uts</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s %s %s"</literal></expr></argument>, <argument><expr><name>uname_version</name></expr></argument>, <argument><expr><name>__DATE__</name></expr></argument>, <argument><expr><name>__TIME__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>uts</name><operator>-&gt;</operator><name>arch</name></name></expr></argument>, <argument><expr><literal type="string">"i686"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>uts</name><operator>-&gt;</operator><name>domain</name></name></expr></argument>, <argument><expr><literal type="string">"(none)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>dword_t</name></type> <name>sys_uname</name><parameter_list>(<parameter><decl><type><name>addr_t</name></type> <name>uts_addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>uname</name></name></type> <name>uts</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>do_uname</name><argument_list>(<argument><expr><operator>&amp;</operator><name>uts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>user_put</name><argument_list>(<argument><expr><name>uts_addr</name></expr></argument>, <argument><expr><name>uts</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_EFAULT</name></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>dword_t</name></type> <name>sys_sethostname</name><parameter_list>(<parameter><function_decl><type><name>addr_t</name></type> <name>UNUSED</name><parameter_list>(<parameter><decl><type><name>hostname_addr</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><function_decl><type><name>dword_t</name></type> <name>UNUSED</name><parameter_list>(<parameter><decl><type><name>hostname_len</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><name>_EPERM</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__APPLE__</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>get_total_ram</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>total_ram</name></decl>;</decl_stmt>
    <macro><name>sysctl</name><argument_list>(<argument>(int []) {CTL_DEBUG</argument>, <argument>HW_PHYSMEM}</argument>, <argument><literal type="number">2</literal></argument>, <argument>&amp;total_ram</argument>, <argument>NULL</argument>, <argument>NULL</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
    <return>return <expr><name>total_ram</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>sysinfo_specific</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sys_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>totalram</name></name> <operator>=</operator> <call><name>get_total_ram</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// TODO: everything else</comment>
</block_content>}</block></function>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__linux__</name></expr></cpp:elif>
<function><type><specifier>static</specifier> <name>void</name></type> <name>sysinfo_specific</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sys_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>sysinfo</name></name></type> <name>host_info</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sysinfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>host_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>totalram</name></name> <operator>=</operator> <name><name>host_info</name><operator>.</operator><name>totalram</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>freeram</name></name> <operator>=</operator> <name><name>host_info</name><operator>.</operator><name>freeram</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>sharedram</name></name> <operator>=</operator> <name><name>host_info</name><operator>.</operator><name>sharedram</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>totalswap</name></name> <operator>=</operator> <name><name>host_info</name><operator>.</operator><name>totalswap</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>freeswap</name></name> <operator>=</operator> <name><name>host_info</name><operator>.</operator><name>freeswap</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>procs</name></name> <operator>=</operator> <name><name>host_info</name><operator>.</operator><name>procs</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>totalhigh</name></name> <operator>=</operator> <name><name>host_info</name><operator>.</operator><name>totalhigh</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>freehigh</name></name> <operator>=</operator> <name><name>host_info</name><operator>.</operator><name>freehigh</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>mem_unit</name></name> <operator>=</operator> <name><name>host_info</name><operator>.</operator><name>mem_unit</name></name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>dword_t</name></type> <name>sys_sysinfo</name><parameter_list>(<parameter><decl><type><name>addr_t</name></type> <name>info_addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>sys_info</name></name></type> <name>info</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>uptime_info</name></name></type> <name>uptime</name> <init>= <expr><call><name>get_uptime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>uptime</name></name> <operator>=</operator> <name><name>uptime</name><operator>.</operator><name>uptime_ticks</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>loads</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>uptime</name><operator>.</operator><name>load_1m</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>loads</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>uptime</name><operator>.</operator><name>load_5m</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>loads</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>uptime</name><operator>.</operator><name>load_15m</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sysinfo_specific</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>user_put</name><argument_list>(<argument><expr><name>info_addr</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>_EFAULT</name></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
