<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/kernel/signal.h"><cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SIGNAL_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGNAL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"misc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util/list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util/sync.h"</cpp:file></cpp:include>
<struct_decl>struct <name>task</name>;</struct_decl>

<typedef>typedef <type><name>qword_t</name></type> <name>sigset_t_</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIG_ERR_</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIG_DFL_</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIG_IGN_</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SA_SIGINFO_</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SA_NODEFER_</name></cpp:macro> <cpp:value>0x40000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SA_RESETHAND_</name></cpp:macro> <cpp:value>0x80000000</cpp:value></cpp:define>

<struct>struct <name>sigaction_</name> <block>{
    <decl_stmt><decl><type><name>addr_t</name></type> <name>handler</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dword_t</name></type> <name>flags</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>addr_t</name></type> <name>restorer</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sigset_t_</name></type> <name>mask</name></decl>;</decl_stmt>
}</block> <decl><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>packed</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_SIGS</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>SIGHUP_</name></cpp:macro>    <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>SIGINT_</name></cpp:macro>    <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>SIGQUIT_</name></cpp:macro>   <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>SIGILL_</name></cpp:macro>    <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>SIGTRAP_</name></cpp:macro>   <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>SIGABRT_</name></cpp:macro>   <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>SIGIOT_</name></cpp:macro>    <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>SIGBUS_</name></cpp:macro>    <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>SIGFPE_</name></cpp:macro>    <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>SIGKILL_</name></cpp:macro>   <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>SIGUSR1_</name></cpp:macro>   <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>SIGSEGV_</name></cpp:macro>   <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>SIGUSR2_</name></cpp:macro>   <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>SIGPIPE_</name></cpp:macro>   <cpp:value>13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>SIGALRM_</name></cpp:macro>   <cpp:value>14</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>SIGTERM_</name></cpp:macro>   <cpp:value>15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>SIGSTKFLT_</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>SIGCHLD_</name></cpp:macro>   <cpp:value>17</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>SIGCONT_</name></cpp:macro>   <cpp:value>18</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>SIGSTOP_</name></cpp:macro>   <cpp:value>19</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>SIGTSTP_</name></cpp:macro>   <cpp:value>20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>SIGTTIN_</name></cpp:macro>   <cpp:value>21</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>SIGTTOU_</name></cpp:macro>   <cpp:value>22</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>SIGURG_</name></cpp:macro>    <cpp:value>23</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>SIGXCPU_</name></cpp:macro>   <cpp:value>24</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>SIGXFSZ_</name></cpp:macro>   <cpp:value>25</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>SIGVTALRM_</name></cpp:macro> <cpp:value>26</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>SIGPROF_</name></cpp:macro>   <cpp:value>27</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>SIGWINCH_</name></cpp:macro>  <cpp:value>28</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>SIGIO_</name></cpp:macro>     <cpp:value>29</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>SIGPWR_</name></cpp:macro>    <cpp:value>30</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGSYS_</name></cpp:macro>    <cpp:value>31</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SI_USER_</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SI_TIMER_</name></cpp:macro> <cpp:value>-2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SI_TKILL_</name></cpp:macro> <cpp:value>-6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SI_KERNEL_</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRAP_TRACE_</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEGV_MAPERR_</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEGV_ACCERR_</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<union>union <name>sigval_</name> <block>{
    <decl_stmt><decl><type><name>int_t</name></type> <name>sv_int</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>addr_t</name></type> <name>sv_ptr</name></decl>;</decl_stmt>
}</block>;</union>

<struct>struct <name>siginfo_</name> <block>{
    <decl_stmt><decl><type><name>int_t</name></type> <name>sig</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int_t</name></type> <name>sig_errno</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int_t</name></type> <name>code</name></decl>;</decl_stmt>
    <union>union <block>{
        <struct>struct <block>{
            <decl_stmt><decl><type><name>pid_t_</name></type> <name>pid</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>uid_t_</name></type> <name>uid</name></decl>;</decl_stmt>
        }</block> <decl><name>kill</name></decl>;</struct>
        <struct>struct <block>{
            <decl_stmt><decl><type><name>pid_t_</name></type> <name>pid</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>uid_t_</name></type> <name>uid</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int_t</name></type> <name>status</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>clock_t_</name></type> <name>utime</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>clock_t_</name></type> <name>stime</name></decl>;</decl_stmt>
        }</block> <decl><name>child</name></decl>;</struct>
        <struct>struct <block>{
            <decl_stmt><decl><type><name>addr_t</name></type> <name>addr</name></decl>;</decl_stmt>
        }</block> <decl><name>fault</name></decl>;</struct>
        <struct>struct <block>{
            <decl_stmt><decl><type><name>addr_t</name></type> <name>addr</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int_t</name></type> <name>syscall</name></decl>;</decl_stmt>
        }</block> <decl><name>sigsys</name></decl>;</struct>
        <struct>struct <block>{
            <decl_stmt><decl><type><name>int_t</name></type> <name>timer</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int_t</name></type> <name>overrun</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>union</name> <name>sigval_</name></name></type> <name>value</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int_t</name></type> <name>_private</name></decl>;</decl_stmt>
        }</block> <decl><name>timer</name></decl>;</struct>
    }</block>;</union>
}</block>;</struct>

<comment type="line">// a reasonable default siginfo</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>siginfo_</name></name></type> <name>SIGINFO_NIL</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>code</name> <operator>=</operator> <name>SI_KERNEL_</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<struct>struct <name>sigqueue</name> <block>{
    <decl_stmt><decl><type><name><name>struct</name> <name>list</name></name></type> <name>queue</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>siginfo_</name></name></type> <name>info</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>sigevent_</name> <block>{
    <decl_stmt><decl><type><name><name>union</name> <name>sigval_</name></name></type> <name>value</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int_t</name></type> <name>signo</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int_t</name></type> <name>method</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>pid_t_</name></type> <name>tid</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="line">// send a signal</comment>
<comment type="line">// you better make sure the task isn't gonna get freed under me (pids_lock or current)</comment>
<function_decl><type><name>void</name></type> <name>send_signal</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>task</name></name> <modifier>*</modifier></type><name>task</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>siginfo_</name></name></type> <name>info</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="line">// send a signal without regard for whether the signal is blocked or ignored</comment>
<function_decl><type><name>void</name></type> <name>deliver_signal</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>task</name></name> <modifier>*</modifier></type><name>task</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>siginfo_</name></name></type> <name>info</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="line">// send a signal to current if it's not blocked or ignored, return whether that worked</comment>
<comment type="line">// exists specifically for sending SIGTTIN/SIGTTOU</comment>
<function_decl><type><name>bool</name></type> <name>try_self_signal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="line">// send a signal to all processes in a group, could return ESRCH</comment>
<function_decl><type><name>int</name></type> <name>send_group_signal</name><parameter_list>(<parameter><decl><type><name>dword_t</name></type> <name>pgid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>siginfo_</name></name></type> <name>info</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="line">// check for and deliver pending signals on current</comment>
<comment type="line">// must be called without pids_lock, current-&gt;group-&gt;lock, or current-&gt;sighand-&gt;lock</comment>
<function_decl><type><name>void</name></type> <name>receive_signals</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<comment type="line">// set the signal mask, restore it to what it was before on the next receive_signals call</comment>
<function_decl><type><name>void</name></type> <name>sigmask_set_temp</name><parameter_list>(<parameter><decl><type><name>sigset_t_</name></type> <name>mask</name></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>sighand</name> <block>{
    <decl_stmt><decl><type><name>atomic_uint</name></type> <name>refcount</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>sigaction_</name></name></type> <name><name>action</name><index>[<expr><name>NUM_SIGS</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>addr_t</name></type> <name>altstack</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dword_t</name></type> <name>altstack_size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>lock_t</name></type> <name>lock</name></decl>;</decl_stmt>
}</block>;</struct>
<function_decl><type><name><name>struct</name> <name>sighand</name></name> <modifier>*</modifier></type><name>sighand_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>sighand</name></name> <modifier>*</modifier></type><name>sighand_copy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sighand</name></name> <modifier>*</modifier></type><name>sighand</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sighand_release</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sighand</name></name> <modifier>*</modifier></type><name>sighand</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>dword_t</name></type> <name>sys_rt_sigaction</name><parameter_list>(<parameter><decl><type><name>dword_t</name></type> <name>signum</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>action_addr</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>oldaction_addr</name></decl></parameter>, <parameter><decl><type><name>dword_t</name></type> <name>sigset_size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>dword_t</name></type> <name>sys_sigaction</name><parameter_list>(<parameter><decl><type><name>dword_t</name></type> <name>signum</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>action_addr</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>oldaction_addr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>dword_t</name></type> <name>sys_rt_sigreturn</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>dword_t</name></type> <name>sys_sigreturn</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIG_BLOCK_</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIG_UNBLOCK_</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIG_SETMASK_</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<typedef>typedef <type><name>uint64_t</name></type> <name>sigset_t_</name>;</typedef>
<function_decl><type><name>dword_t</name></type> <name>sys_rt_sigprocmask</name><parameter_list>(<parameter><decl><type><name>dword_t</name></type> <name>how</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>set</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>oldset</name></decl></parameter>, <parameter><decl><type><name>dword_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int_t</name></type> <name>sys_rt_sigpending</name><parameter_list>(<parameter><decl><type><name>addr_t</name></type> <name>set_addr</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>sigset_t_</name></type> <name>sig_mask</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>sig</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>sig</name> <operator>&lt;</operator> <name>NUM_SIGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1l</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>sig</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>sigset_has</name><parameter_list>(<parameter><decl><type><name>sigset_t_</name></type> <name>set</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>!</operator><operator>!</operator><operator>(</operator><name>set</name> <operator>&amp;</operator> <call><name>sig_mask</name><argument_list>(<argument><expr><name>sig</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>sigset_add</name><parameter_list>(<parameter><decl><type><name>sigset_t_</name> <modifier>*</modifier></type><name>set</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>set</name> <operator>|=</operator> <call><name>sig_mask</name><argument_list>(<argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>sigset_del</name><parameter_list>(<parameter><decl><type><name>sigset_t_</name> <modifier>*</modifier></type><name>set</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>set</name> <operator>&amp;=</operator> <operator>~</operator><call><name>sig_mask</name><argument_list>(<argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<struct>struct <name>stack_t_</name> <block>{
    <decl_stmt><decl><type><name>addr_t</name></type> <name>stack</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dword_t</name></type> <name>flags</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dword_t</name></type> <name>size</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SS_ONSTACK_</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SS_DISABLE_</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MINSIGSTKSZ_</name></cpp:macro> <cpp:value>2048</cpp:value></cpp:define>
<function_decl><type><name>dword_t</name></type> <name>sys_sigaltstack</name><parameter_list>(<parameter><decl><type><name>addr_t</name></type> <name>ss</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>old_ss</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int_t</name></type> <name>sys_rt_sigsuspend</name><parameter_list>(<parameter><decl><type><name>addr_t</name></type> <name>mask_addr</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int_t</name></type> <name>sys_pause</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int_t</name></type> <name>sys_rt_sigtimedwait</name><parameter_list>(<parameter><decl><type><name>addr_t</name></type> <name>set_addr</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>info_addr</name></decl></parameter>, <parameter><decl><type><name>addr_t</name></type> <name>timeout_addr</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>set_size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>dword_t</name></type> <name>sys_kill</name><parameter_list>(<parameter><decl><type><name>pid_t_</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>dword_t</name></type> <name>sig</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>dword_t</name></type> <name>sys_tkill</name><parameter_list>(<parameter><decl><type><name>pid_t_</name></type> <name>tid</name></decl></parameter>, <parameter><decl><type><name>dword_t</name></type> <name>sig</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>dword_t</name></type> <name>sys_tgkill</name><parameter_list>(<parameter><decl><type><name>pid_t_</name></type> <name>tgid</name></decl></parameter>, <parameter><decl><type><name>pid_t_</name></type> <name>tid</name></decl></parameter>, <parameter><decl><type><name>dword_t</name></type> <name>sig</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// signal frame structs. There's a good chance this should go in its own header file</comment>

<comment type="line">// thanks kernel for giving me something to copy/paste</comment>
<struct>struct <name>sigcontext_</name> <block>{
    <decl_stmt><decl><type><name>word_t</name></type> <name>gs</name></decl>, <decl><type ref="prev"/><name>__gsh</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>word_t</name></type> <name>fs</name></decl>, <decl><type ref="prev"/><name>__fsh</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>word_t</name></type> <name>es</name></decl>, <decl><type ref="prev"/><name>__esh</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>word_t</name></type> <name>ds</name></decl>, <decl><type ref="prev"/><name>__dsh</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dword_t</name></type> <name>di</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dword_t</name></type> <name>si</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dword_t</name></type> <name>bp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dword_t</name></type> <name>sp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dword_t</name></type> <name>bx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dword_t</name></type> <name>dx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dword_t</name></type> <name>cx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dword_t</name></type> <name>ax</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dword_t</name></type> <name>trapno</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dword_t</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dword_t</name></type> <name>ip</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>word_t</name></type> <name>cs</name></decl>, <decl><type ref="prev"/><name>__csh</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dword_t</name></type> <name>flags</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dword_t</name></type> <name>sp_at_signal</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>word_t</name></type> <name>ss</name></decl>, <decl><type ref="prev"/><name>__ssh</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>dword_t</name></type> <name>fpstate</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dword_t</name></type> <name>oldmask</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dword_t</name></type> <name>cr2</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>ucontext_</name> <block>{
    <decl_stmt><decl><type><name>uint_t</name></type> <name>flags</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint_t</name></type> <name>link</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>stack_t_</name></name></type> <name>stack</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>sigcontext_</name></name></type> <name>mcontext</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sigset_t_</name></type> <name>sigmask</name></decl>;</decl_stmt>
}</block> <decl><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>packed</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>

<struct>struct <name>fpreg_</name> <block>{
    <decl_stmt><decl><type><name>word_t</name></type> <name><name>significand</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>word_t</name></type> <name>exponent</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>fpxreg_</name> <block>{
    <decl_stmt><decl><type><name>word_t</name></type> <name><name>significand</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>word_t</name></type> <name>exponent</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>word_t</name></type> <name><name>padding</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>xmmreg_</name> <block>{
    <decl_stmt><decl><type><name>uint32_t</name></type> <name><name>element</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>fpstate_</name> <block>{
    <comment type="block">/* Regular FPU environment.  */</comment>
    <decl_stmt><decl><type><name>dword_t</name></type> <name>cw</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dword_t</name></type> <name>sw</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dword_t</name></type> <name>tag</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dword_t</name></type> <name>ipoff</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dword_t</name></type> <name>cssel</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dword_t</name></type> <name>dataoff</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dword_t</name></type> <name>datasel</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>fpreg_</name></name></type> <name><name>st</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>word_t</name></type> <name>status</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>word_t</name></type> <name>magic</name></decl>;</decl_stmt>

    <comment type="block">/* FXSR FPU environment.  */</comment>
    <decl_stmt><decl><type><name>dword_t</name></type> <name><name>_fxsr_env</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dword_t</name></type> <name>mxcsr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dword_t</name></type> <name>reserved</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>fpxreg_</name></name></type> <name><name>fxsr_st</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>xmmreg_</name></name></type> <name><name>xmm</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dword_t</name></type> <name><name>padding</name><index>[<expr><literal type="number">56</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>sigframe_</name> <block>{
    <decl_stmt><decl><type><name>addr_t</name></type> <name>restorer</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dword_t</name></type> <name>sig</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>sigcontext_</name></name></type> <name>sc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>fpstate_</name></name></type> <name>fpstate</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dword_t</name></type> <name>extramask</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>retcode</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>rt_sigframe_</name> <block>{
    <decl_stmt><decl><type><name>addr_t</name></type> <name>restorer</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int_t</name></type> <name>sig</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>addr_t</name></type> <name>pinfo</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>addr_t</name></type> <name>puc</name></decl>;</decl_stmt>
    <union>union <block>{
        <decl_stmt><decl><type><name><name>struct</name> <name>siginfo_</name></name></type> <name>info</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name><name>__pad</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
    }</block>;</union>
    <decl_stmt><decl><type><name><name>struct</name> <name>ucontext_</name></name></type> <name>uc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>retcode</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="line">// On a 64-bit system with 32-bit emulation, the fpu state is stored in extra</comment>
<comment type="line">// space at the end of the frame, not in the frame itself. We store the fpu</comment>
<comment type="line">// state in the frame where it should be, and ptraceomatic will set this. If</comment>
<comment type="line">// they are set we'll add some padding to the bottom to the frame to make</comment>
<comment type="line">// everything align.</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>xsave_extra</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>fxsave_extra</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
