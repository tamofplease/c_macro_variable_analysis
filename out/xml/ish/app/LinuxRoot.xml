<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/app/LinuxRoot.c"><comment type="line">//</comment>
<comment type="line">//  LinuxRoot.c</comment>
<comment type="line">//  libiSHLinux</comment>
<comment type="line">//</comment>
<comment type="line">//  Created by Theodore Dubois on 12/29/21.</comment>
<comment type="line">//</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/init.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/syscalls.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/init_syscalls.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/fs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/errname.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/device.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uapi/linux/mount.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"LinuxInterop.h"</cpp:file></cpp:include>

<function_decl><type><name>void</name></type> <name>FsInitialize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>__init</name> <name>int</name></type> <name>ish_rootfs</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>rootfs_mounted</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fakefs_path</name> <init>= <expr><call><name>DefaultRootPath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>do_mount</name><argument_list>(<argument><expr><name>fakefs_path</name></expr></argument>, <argument><expr><literal type="string">"/root"</literal></expr></argument>, <argument><expr><literal type="string">"fakefs"</literal></expr></argument>, <argument><expr><name>MS_SILENT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>pr_emerg</name><argument_list>(<argument><expr><literal type="string">"ish: failed to mount fakefs root from %s: %s\n"</literal></expr></argument>, <argument><expr><name>fakefs_path</name></expr></argument>, <argument><expr><call><name>errname</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>err</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>init_chdir</name><argument_list>(<argument><expr><literal type="string">"/root"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>devtmpfs_mount</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>do_mount</name><argument_list>(<argument><expr><literal type="string">"proc"</literal></expr></argument>, <argument><expr><literal type="string">"proc"</literal></expr></argument>, <argument><expr><literal type="string">"proc"</literal></expr></argument>, <argument><expr><name>MS_SILENT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>pr_warn</name><argument_list>(<argument><expr><literal type="string">"ish: failed to mount procfs: %s"</literal></expr></argument>, <argument><expr><call><name>errname</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>do_mount</name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MS_MOVE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>init_chroot</name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FsInitialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><call><name>rootfs_initcall</name><argument_list>(<argument><expr><name>ish_rootfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</unit>
