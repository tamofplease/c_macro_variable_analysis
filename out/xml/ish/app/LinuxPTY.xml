<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/app/LinuxPTY.c"><comment type="line">//</comment>
<comment type="line">//  LinuxPTY.c</comment>
<comment type="line">//  libiSHLinux</comment>
<comment type="line">//</comment>
<comment type="line">//  Created by Theodore Dubois on 12/30/21.</comment>
<comment type="line">//</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/init.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/namei.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/errname.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/kthread.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/fs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/hashtable.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/syscalls.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/init_syscalls.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/init_task.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/termios.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/vmalloc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/fdtable.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uapi/linux/mount.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"LinuxInterop.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>path</name></name></type> <name>ptmx_path</name></decl>;</decl_stmt>

<struct>struct <name>ios_pty_wq</name> <block>{
    <decl_stmt><decl><type><name><name>struct</name> <name>ios_pty</name></name> <modifier>*</modifier></type><name>pty</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>wait_queue_entry</name></name></type> <name>wq</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>wait_queue_head</name></name> <modifier>*</modifier></type><name>head</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>ios_pty</name> <block>{
    <decl_stmt><decl><type><name>dev_t</name></type> <name>pts_rdev</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>file</name></name> <modifier>*</modifier></type><name>ptm</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsobj_t</name></type> <name>terminal</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>linux_tty</name></name></type> <name>linux_tty</name></decl>;</decl_stmt>
    <comment type="line">// pseudoterminals have multiple wait queues and you need a different wait_queue_entry for each one. fun fact!</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>n_wqs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>ios_pty_wq</name></name></type> <name><name>wqs</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>poll_table</name></type> <name>pt</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>work_struct</name></name></type> <name>poll_cb_work</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>work_struct</name></name></type> <name>output_work</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ios_pty_output_work</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>work_struct</name></name> <modifier>*</modifier></type><name>output_work</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>ios_pty</name></name> <modifier>*</modifier></type><name>pty</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>output_work</name></expr></argument>, <argument><expr>struct <name>ios_pty</name></expr></argument>, <argument><expr><name>output_work</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>kvmalloc</name><argument_list>(<argument><expr><name>PAGE_SIZE</name></expr></argument>, <argument><expr><name>GFP_KERNEL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ssize_t</name></type> <name>size</name></decl>;</decl_stmt>
    <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>size_t</name></type> <name>room</name> <init>= <expr><call><name>Terminal_roomForOutput</name><argument_list>(<argument><expr><name><name>pty</name><operator>-&gt;</operator><name>terminal</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>room</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>printk</name><argument_list>(<argument><expr><name>KERN_WARNING</name> <literal type="string">"ios: no room for pty output\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>kernel_read</name><argument_list>(<argument><expr><name><name>pty</name><operator>-&gt;</operator><name>ptm</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>room</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>size</name> <operator>!=</operator> <operator>-</operator><name>EAGAIN</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>printk</name><argument_list>(<argument><expr><name>KERN_WARNING</name> <literal type="string">"ios: pty read failed: %s\n"</literal></expr></argument>, <argument><expr><call><name>errname</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>sent</name> <init>= <expr><call><name>Terminal_sendOutput_length</name><argument_list>(<argument><expr><name><name>pty</name><operator>-&gt;</operator><name>terminal</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>sent</name> <operator>!=</operator> <name>size</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>printk</name><argument_list>(<argument><expr><name>KERN_WARNING</name> <literal type="string">"ios: dropped %ld bytes of pty output\n"</literal></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>sent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>kvfree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ios_pty_cleanup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ios_pty</name></name> <modifier>*</modifier></type><name>pty</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pty</name><operator>-&gt;</operator><name>n_wqs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>remove_wait_queue</name><argument_list>(<argument><expr><name><name>pty</name><operator>-&gt;</operator><name>wqs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>head</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pty</name><operator>-&gt;</operator><name>wqs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>wq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <expr_stmt><expr><call><name>fput</name><argument_list>(<argument><expr><name><name>pty</name><operator>-&gt;</operator><name>ptm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>nsobj_t</name></type> <name>terminal</name> <init>= <expr><name><name>pty</name><operator>-&gt;</operator><name>terminal</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>Terminal_setLinuxTTY</name><argument_list>(<argument><expr><name>terminal</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>objc_put</name><argument_list>(<argument><expr><name>terminal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>kfree</name><argument_list>(<argument><expr><name>pty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ios_pty_cb_can_output</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>linux_tty</name></name> <modifier>*</modifier></type><name>linux_tty</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>ios_pty</name></name> <modifier>*</modifier></type><name>pty</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>linux_tty</name></expr></argument>, <argument><expr>struct <name>ios_pty</name></expr></argument>, <argument><expr><name>linux_tty</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>schedule_work</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pty</name><operator>-&gt;</operator><name>output_work</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ios_pty_cb_send_input</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>linux_tty</name></name> <modifier>*</modifier></type><name>linux_tty</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>ios_pty</name></name> <modifier>*</modifier></type><name>pty</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>linux_tty</name></expr></argument>, <argument><expr>struct <name>ios_pty</name></expr></argument>, <argument><expr><name>linux_tty</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ssize_t</name></type> <name>written</name> <init>= <expr><call><name>kernel_write</name><argument_list>(<argument><expr><name><name>pty</name><operator>-&gt;</operator><name>ptm</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>written</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>printk</name><argument_list>(<argument><expr><name>KERN_WARNING</name> <literal type="string">"ios: pty input failed: %s\n"</literal></expr></argument>, <argument><expr><call><name>errname</name><argument_list>(<argument><expr><name>written</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>written</name> <operator>!=</operator> <name>length</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>printk</name><argument_list>(<argument><expr><name>KERN_WARNING</name> <literal type="string">"ios: dropped %ld bytes of pty input\n"</literal></expr></argument>, <argument><expr><name>length</name> <operator>-</operator> <name>written</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ios_pty_cb_resize</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>linux_tty</name></name> <modifier>*</modifier></type><name>linux_tty</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rows</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>ios_pty</name></name> <modifier>*</modifier></type><name>pty</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>linux_tty</name></expr></argument>, <argument><expr>struct <name>ios_pty</name></expr></argument>, <argument><expr><name>linux_tty</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>winsize</name></name></type> <name>ws</name> <init>= <expr><block>{
        <expr><operator>.</operator><name>ws_row</name> <operator>=</operator> <name>rows</name></expr>,
        <expr><operator>.</operator><name>ws_col</name> <operator>=</operator> <name>cols</name></expr>,
    }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>vfs_ioctl</name><argument_list>(<argument><expr><name><name>pty</name><operator>-&gt;</operator><name>ptm</name></name></expr></argument>, <argument><expr><name>TIOCSWINSZ</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <operator>&amp;</operator><name>ws</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ios_pty_cb_hangup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>linux_tty</name></name> <modifier>*</modifier></type><name>linux_tty</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="line">// TODO: figure out what this should be doing</comment>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>linux_tty_callbacks</name></name></type> <name>ios_pty_callbacks</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>can_output</name> <operator>=</operator> <name>ios_pty_cb_can_output</name></expr>,
    <expr><operator>.</operator><name>send_input</name> <operator>=</operator> <name>ios_pty_cb_send_input</name></expr>,
    <expr><operator>.</operator><name>resize</name> <operator>=</operator> <name>ios_pty_cb_resize</name></expr>,
    <expr><operator>.</operator><name>hangup</name> <operator>=</operator> <name>ios_pty_cb_hangup</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ios_pty_poll_cb_work</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>work_struct</name></name> <modifier>*</modifier></type><name>work</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>ios_pty</name></name> <modifier>*</modifier></type><name>pty</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>work</name></expr></argument>, <argument><expr>struct <name>ios_pty</name></expr></argument>, <argument><expr><name>poll_cb_work</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>__poll_t</name></type> <name>events</name> <init>= <expr><call><name>vfs_poll</name><argument_list>(<argument><expr><name><name>pty</name><operator>-&gt;</operator><name>ptm</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>events</name> <operator>&amp;</operator> <name>EPOLLIN</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ios_pty_output_work</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pty</name><operator>-&gt;</operator><name>output_work</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>events</name> <operator>&amp;</operator> <name>EPOLLHUP</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ios_pty_cleanup</name><argument_list>(<argument><expr><name>pty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ptm_callback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>wait_queue_entry</name></name> <modifier>*</modifier></type><name>wq_entry</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>ios_pty</name></name> <modifier>*</modifier></type><name>pty</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>wq_entry</name></expr></argument>, <argument><expr>struct <name>ios_pty_wq</name></expr></argument>, <argument><expr><name>wq</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>pty</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>schedule_work</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pty</name><operator>-&gt;</operator><name>poll_cb_work</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>poll_callback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>file</name></name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>wait_queue_head_t</name> <modifier>*</modifier></type><name>whead</name></decl></parameter>, <parameter><decl><type><name>poll_table</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>ios_pty</name></name> <modifier>*</modifier></type><name>pty</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>pt</name></expr></argument>, <argument><expr>struct <name>ios_pty</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pty</name><operator>-&gt;</operator><name>n_wqs</name></name> <operator>&gt;=</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name><name>pty</name><operator>-&gt;</operator><name>wqs</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>panic</name><argument_list>(<argument><expr><literal type="string">"ios pty: too many wait queues!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>ios_pty_wq</name></name> <modifier>*</modifier></type><name>pty_wq</name> <init>= <expr><operator>&amp;</operator><name><name>pty</name><operator>-&gt;</operator><name>wqs</name><index>[<expr><name><name>pty</name><operator>-&gt;</operator><name>n_wqs</name></name><operator>++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pty_wq</name><operator>-&gt;</operator><name>pty</name></name> <operator>=</operator> <name>pty</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pty_wq</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>whead</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>init_waitqueue_func_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pty_wq</name><operator>-&gt;</operator><name>wq</name></name></expr></argument>, <argument><expr><name>ptm_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>add_wait_queue</name><argument_list>(<argument><expr><name>whead</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pty_wq</name><operator>-&gt;</operator><name>wq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>file</name></name> <modifier>*</modifier></type><name>ios_pty_open</name><parameter_list>(<parameter><decl><type><name>nsobj_t</name> <modifier>*</modifier></type><name>terminal_out</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>file</name></name> <modifier>*</modifier></type><name>ptm_file</name> <init>= <expr><call><name>dentry_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptmx_path</name></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>, <argument><expr><call><name>current_cred</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IS_ERR</name><argument_list>(<argument><expr><name>ptm_file</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>ptm_file</name></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>lock_pty</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>vfs_ioctl</name><argument_list>(<argument><expr><name>ptm_file</name></expr></argument>, <argument><expr><name>TIOCSPTLCK</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <operator>&amp;</operator><name>lock_pty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>spin_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ptm_file</name><operator>-&gt;</operator><name>f_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ptm_file</name><operator>-&gt;</operator><name>f_flags</name></name> <operator>|=</operator> <name>O_NONBLOCK</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>spin_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ptm_file</name><operator>-&gt;</operator><name>f_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// sadly this api can't just return a struct file *</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>vfs_ioctl</name><argument_list>(<argument><expr><name>ptm_file</name></expr></argument>, <argument><expr><name>TIOCGPTPEER</name></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>fput</name><argument_list>(<argument><expr><name>ptm_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>ERR_PTR</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>file</name></name> <modifier>*</modifier></type><name>pts_file</name> <init>= <expr><call><name>fget</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>close_fd</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>ios_pty</name></name> <modifier>*</modifier></type><name>pty</name> <init>= <expr><call><name>kzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pty</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>GFP_KERNEL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pty</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>fput</name><argument_list>(<argument><expr><name>pts_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fput</name><argument_list>(<argument><expr><name>ptm_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>ERR_PTR</name><argument_list>(<argument><expr><operator>-</operator><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pty</name><operator>-&gt;</operator><name>ptm</name></name> <operator>=</operator> <name>ptm_file</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>INIT_WORK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pty</name><operator>-&gt;</operator><name>poll_cb_work</name></name></expr></argument>, <argument><expr><name>ios_pty_poll_cb_work</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>INIT_WORK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pty</name><operator>-&gt;</operator><name>output_work</name></name></expr></argument>, <argument><expr><name>ios_pty_output_work</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pty</name><operator>-&gt;</operator><name>pts_rdev</name></name> <operator>=</operator> <name><name>pts_file</name><operator>-&gt;</operator><name>f_inode</name><operator>-&gt;</operator><name>i_rdev</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pty</name><operator>-&gt;</operator><name>terminal</name></name> <operator>=</operator> <call><name>Terminal_terminalWithType_number</name><argument_list>(<argument><expr><call><name>MAJOR</name><argument_list>(<argument><expr><name><name>pty</name><operator>-&gt;</operator><name>pts_rdev</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MINOR</name><argument_list>(<argument><expr><name><name>pty</name><operator>-&gt;</operator><name>pts_rdev</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pty</name><operator>-&gt;</operator><name>linux_tty</name><operator>.</operator><name>ops</name></name> <operator>=</operator> <operator>&amp;</operator><name>ios_pty_callbacks</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Terminal_setLinuxTTY</name><argument_list>(<argument><expr><name><name>pty</name><operator>-&gt;</operator><name>terminal</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pty</name><operator>-&gt;</operator><name>linux_tty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>terminal_out</name> <operator>=</operator> <name><name>pty</name><operator>-&gt;</operator><name>terminal</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>init_poll_funcptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pty</name><operator>-&gt;</operator><name>pt</name></name></expr></argument>, <argument><expr><name>poll_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>__poll_t</name></type> <name>revents</name> <init>= <expr><call><name>vfs_poll</name><argument_list>(<argument><expr><name><name>pty</name><operator>-&gt;</operator><name>ptm</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pty</name><operator>-&gt;</operator><name>pt</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>revents</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ptm_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pty</name><operator>-&gt;</operator><name>wqs</name><index>[<expr><name><name>pty</name><operator>-&gt;</operator><name>n_wqs</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>wq</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>pts_file</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__init</name> <name>int</name></type> <name>ios_pty_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>init_mkdir</name><argument_list>(<argument><expr><literal type="string">"/dev/pts"</literal></expr></argument>, <argument><expr><literal type="number">0755</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>do_mount</name><argument_list>(<argument><expr><literal type="string">"devpts"</literal></expr></argument>, <argument><expr><literal type="string">"/dev/pts"</literal></expr></argument>, <argument><expr><literal type="string">"devpts"</literal></expr></argument>, <argument><expr><name>MS_SILENT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>panic</name><argument_list>(<argument><expr><literal type="string">"ish: failed to mount devpts: %s"</literal></expr></argument>, <argument><expr><call><name>errname</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>kern_path</name><argument_list>(<argument><expr><literal type="string">"/dev/pts/ptmx"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptmx_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>panic</name><argument_list>(<argument><expr><literal type="string">"ish: failed to acquire ptmx: %s"</literal></expr></argument>, <argument><expr><call><name>errname</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><call><name>device_initcall</name><argument_list>(<argument><expr><name>ios_pty_init</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</unit>
