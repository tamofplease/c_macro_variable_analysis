<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/app/LinuxTTY.c"><comment type="line">//</comment>
<comment type="line">//  LinuxTTY.c</comment>
<comment type="line">//  libiSHLinux</comment>
<comment type="line">//</comment>
<comment type="line">//  Created by Theodore Dubois on 8/15/21.</comment>
<comment type="line">//</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"LinuxInterop.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/bug.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/console.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/init.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/tty.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/tty_flip.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/slab.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>nslog_console_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>console</name></name> <modifier>*</modifier></type><name>console</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>ConsoleLog</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>console</name></name></type> <name>nslog_console</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"nslog"</literal></expr>,
    <expr><operator>.</operator><name>write</name> <operator>=</operator> <name>nslog_console_write</name></expr>,
    <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>CON_PRINTBUFFER</name><operator>|</operator><name>CON_ANYTIME</name></expr>,
    <expr><operator>.</operator><name>index</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>__init</name> <name>int</name></type> <name>nslog_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>register_console</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nslog_console</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<expr_stmt><expr><call><name>device_initcall</name><argument_list>(<argument><expr><name>nslog_init</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<struct>struct <name>ios_tty</name> <block>{
    <decl_stmt><decl><type><name><name>struct</name> <name>linux_tty</name></name></type> <name>linux_tty</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>tty_port</name></name></type> <name>port</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_TTYS</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>tty_driver</name></name> <modifier>*</modifier></type><name>ios_tty_driver</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>ios_tty</name></name></type> <name><name>ios_ttys</name><index>[<expr><name>NUM_TTYS</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ios_tty_port_activate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tty_port</name></name> <modifier>*</modifier></type><name>port</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tty_struct</name></name> <modifier>*</modifier></type><name>tty</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>BUG_ON</name><argument_list>(<argument><expr><name>port</name> <operator>!=</operator> <operator>&amp;</operator><name><name>ios_ttys</name><index>[<expr><name><name>tty</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name><operator>.</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>port</name><operator>-&gt;</operator><name>client_data</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <call><name>Terminal_terminalWithType_number</name><argument_list>(<argument><expr><name>TTY_MAJOR</name></expr></argument>, <argument><expr><name><name>tty</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Terminal_setLinuxTTY</name><argument_list>(<argument><expr><name><name>port</name><operator>-&gt;</operator><name>client_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>container_of</name><argument_list>(<argument><expr><name>port</name></expr></argument>, <argument><expr>struct <name>ios_tty</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>linux_tty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ios_tty_port_destruct</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tty_port</name></name> <modifier>*</modifier></type><name>port</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>async_do_in_ios</name><argument_list>(<argument><expr><lambda>^<block>{<block_content>
        <expr_stmt><expr><call><name>objc_put</name><argument_list>(<argument><expr><name><name>port</name><operator>-&gt;</operator><name>client_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>async_do_in_irq</name><argument_list>(<argument><expr><lambda>^<block>{<block_content>
            <expr_stmt><expr><call><name>kfree</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>tty_port_operations</name></name></type> <name>ios_tty_port_ops</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>activate</name> <operator>=</operator> <name>ios_tty_port_activate</name></expr>,
    <expr><operator>.</operator><name>destruct</name> <operator>=</operator> <name>ios_tty_port_destruct</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ios_tty_cb_can_output</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>linux_tty</name></name> <modifier>*</modifier></type><name>linux_tty</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>ios_tty</name></name> <modifier>*</modifier></type><name>tty</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>linux_tty</name></expr></argument>, <argument><expr>struct <name>ios_tty</name></expr></argument>, <argument><expr><name>linux_tty</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tty_port_tty_wakeup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tty</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ios_tty_cb_send_input</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>linux_tty</name></name> <modifier>*</modifier></type><name>linux_tty</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>ios_tty</name></name> <modifier>*</modifier></type><name>tty</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>linux_tty</name></expr></argument>, <argument><expr>struct <name>ios_tty</name></expr></argument>, <argument><expr><name>linux_tty</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tty_insert_flip_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tty</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tty_flip_buffer_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tty</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ios_tty_cb_resize</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>linux_tty</name></name> <modifier>*</modifier></type><name>linux_tty</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rows</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>ios_tty</name></name> <modifier>*</modifier></type><name>tty</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>linux_tty</name></expr></argument>, <argument><expr>struct <name>ios_tty</name></expr></argument>, <argument><expr><name>linux_tty</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>winsize</name></name></type> <name>ws</name> <init>= <expr><block>{
        <expr><operator>.</operator><name>ws_row</name> <operator>=</operator> <name>rows</name></expr>,
        <expr><operator>.</operator><name>ws_col</name> <operator>=</operator> <name>cols</name></expr>,
    }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tty_do_resize</name><argument_list>(<argument><expr><name><name>tty</name><operator>-&gt;</operator><name>port</name><operator>.</operator><name>tty</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ws</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ios_tty_cb_hangup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>linux_tty</name></name> <modifier>*</modifier></type><name>linux_tty</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="line">// nah</comment>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>linux_tty_callbacks</name></name></type> <name>ios_tty_callbacks</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>can_output</name> <operator>=</operator> <name>ios_tty_cb_can_output</name></expr>,
    <expr><operator>.</operator><name>send_input</name> <operator>=</operator> <name>ios_tty_cb_send_input</name></expr>,
    <expr><operator>.</operator><name>resize</name> <operator>=</operator> <name>ios_tty_cb_resize</name></expr>,
    <expr><operator>.</operator><name>hangup</name> <operator>=</operator> <name>ios_tty_cb_hangup</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ios_tty_open</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tty_struct</name></name> <modifier>*</modifier></type><name>tty</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>file</name></name> <modifier>*</modifier></type><name>filp</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>tty_port_open</name><argument_list>(<argument><expr><name><name>tty</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>tty</name></expr></argument>, <argument><expr><name>filp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ios_tty_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tty_struct</name></name> <modifier>*</modifier></type><name>tty</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>Terminal_sendOutput_length</name><argument_list>(<argument><expr><name><name>tty</name><operator>-&gt;</operator><name>port</name><operator>-&gt;</operator><name>client_data</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>ios_tty_write_room</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tty_struct</name></name> <modifier>*</modifier></type><name>tty</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>Terminal_roomForOutput</name><argument_list>(<argument><expr><name><name>tty</name><operator>-&gt;</operator><name>port</name><operator>-&gt;</operator><name>client_data</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>tty_operations</name></name></type> <name>ios_tty_ops</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>open</name> <operator>=</operator> <name>ios_tty_open</name></expr>,
    <expr><operator>.</operator><name>write</name> <operator>=</operator> <name>ios_tty_write</name></expr>,
    <expr><operator>.</operator><name>write_room</name> <operator>=</operator> <name>ios_tty_write_room</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ios_tty_console_setup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>console</name></name> <modifier>*</modifier></type><name>console</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>what</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>console</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <call><name>Terminal_terminalWithType_number</name><argument_list>(<argument><expr><name>TTY_MAJOR</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ios_tty_console_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>console</name></name> <modifier>*</modifier></type><name>console</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>nsobj_t</name></type> <name>tty</name> <init>= <expr><name><name>console</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>newline</name> <init>= <expr><call><name>memchr</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>newline</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>Terminal_sendOutput_length</name><argument_list>(<argument><expr><name>tty</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>newline</name> <operator>-</operator> <name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Terminal_sendOutput_length</name><argument_list>(<argument><expr><name>tty</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>len</name> <operator>-=</operator> <name>newline</name> <operator>-</operator> <name>data</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>data</name> <operator>=</operator> <name>newline</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>Terminal_sendOutput_length</name><argument_list>(<argument><expr><name>tty</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>tty_driver</name></name> <modifier>*</modifier></type><name>ios_tty_console_device</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>console</name></name> <modifier>*</modifier></type><name>console</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>index</name> <operator>=</operator> <name><name>console</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>
    <return>return <expr><name>ios_tty_driver</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>console</name></name></type> <name>ios_tty_console</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"tty"</literal></expr>,
    <expr><operator>.</operator><name>setup</name> <operator>=</operator> <name>ios_tty_console_setup</name></expr>,
    <expr><operator>.</operator><name>write</name> <operator>=</operator> <name>ios_tty_console_write</name></expr>,
    <expr><operator>.</operator><name>device</name> <operator>=</operator> <name>ios_tty_console_device</name></expr>,
    <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>CON_PRINTBUFFER</name><operator>|</operator><name>CON_ANYTIME</name></expr>,
    <expr><operator>.</operator><name>index</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>__init</name> <name>int</name></type> <name>ios_tty_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_TTYS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>ios_ttys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>linux_tty</name><operator>.</operator><name>ops</name></name> <operator>=</operator> <operator>&amp;</operator><name>ios_tty_callbacks</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>tty_port_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ios_ttys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ios_ttys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>port</name><operator>.</operator><name>ops</name></name> <operator>=</operator> <operator>&amp;</operator><name>ios_tty_port_ops</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>ios_tty_driver</name> <operator>=</operator> <call><name>tty_alloc_driver</name><argument_list>(<argument><expr><name>NUM_TTYS</name></expr></argument>, <argument><expr><name>TTY_DRIVER_REAL_RAW</name> <operator>|</operator> <name>TTY_DRIVER_RESET_TERMIOS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ios_tty_driver</name><operator>-&gt;</operator><name>driver_name</name></name> <operator>=</operator> <literal type="string">"ios"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ios_tty_driver</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <literal type="string">"tty"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ios_tty_driver</name><operator>-&gt;</operator><name>name_base</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ios_tty_driver</name><operator>-&gt;</operator><name>major</name></name> <operator>=</operator> <name>TTY_MAJOR</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ios_tty_driver</name><operator>-&gt;</operator><name>minor_start</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ios_tty_driver</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TTY_DRIVER_TYPE_CONSOLE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ios_tty_driver</name><operator>-&gt;</operator><name>subtype</name></name> <operator>=</operator> <name>SYSTEM_TYPE_CONSOLE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ios_tty_driver</name><operator>-&gt;</operator><name>init_termios</name></name> <operator>=</operator> <name>tty_std_termios</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tty_set_operations</name><argument_list>(<argument><expr><name>ios_tty_driver</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ios_tty_ops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_TTYS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>tty_port_link_device</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ios_ttys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>port</name></expr></argument>, <argument><expr><name>ios_tty_driver</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><call><name>tty_register_driver</name><argument_list>(<argument><expr><name>ios_tty_driver</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>panic</name><argument_list>(<argument><expr><literal type="string">"ios tty: failed to tty_register_driver"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>register_console</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ios_tty_console</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<expr_stmt><expr><call><name>device_initcall</name><argument_list>(<argument><expr><name>ios_tty_init</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</unit>
