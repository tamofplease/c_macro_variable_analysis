<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/app/PasteboardDeviceLinux.c"><comment type="line">//</comment>
<comment type="line">//  PasteboardDeviceLinux.c</comment>
<comment type="line">//  iSH+Linux</comment>
<comment type="line">//</comment>
<comment type="line">//  Created by Theodore Dubois on 2/19/22.</comment>
<comment type="line">//</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/slab.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/fs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/miscdevice.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/init.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"LinuxInterop.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INITIAL_BUFFER_CAP</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>
<comment type="line">// 8MB: https://stackoverflow.com/a/3523175</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXIMAL_BUFFER_CAP</name></cpp:macro> <cpp:value>8*1024*1024</cpp:value></cpp:define>

<struct>struct <name>pasteboard_file</name> <block>{
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>cap</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>generation</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>realloc_buffer_to_fit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>file</name></name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>fit_len</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>pasteboard_file</name></name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>file</name><operator>-&gt;</operator><name>private_data</name></name></expr></init></decl>;</decl_stmt>
    <comment type="line">// (Re)allocate buffer if there's not enough space to fit fit_len</comment>
    <if_stmt><if>if <condition>(<expr><name>fit_len</name> <operator>&lt;=</operator> <name><name>pb</name><operator>-&gt;</operator><name>cap</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>fit_len</name> <operator>&gt;</operator> <name>MAXIMAL_BUFFER_CAP</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><name>ENOSPC</name></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><name><name>pb</name><operator>-&gt;</operator><name>cap</name></name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>size</name> <operator>=</operator> <name>INITIAL_BUFFER_CAP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <while>while <condition>(<expr><name>size</name> <operator>&lt;</operator> <name>fit_len</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>size</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></while>

    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>new_buf</name> <init>= <expr><call><name>krealloc</name><argument_list>(<argument><expr><name><name>pb</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>GFP_KERNEL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>new_buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><name>ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>pb</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>new_buf</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pb</name><operator>-&gt;</operator><name>cap</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_pasteboard_to_buffer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>file</name></name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>pasteboard_file</name></name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>file</name><operator>-&gt;</operator><name>private_data</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nsobj_t</name></type> <name>data</name> <init>= <expr><call><name>UIPasteboard_get</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>realloc_buffer_to_fit</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><call><name>NSData_length</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>objc_put</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>err</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pb</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <call><name>NSData_length</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pb</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><call><name>NSData_bytes</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pb</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>objc_put</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pasteboard_open</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>inode</name></name> <modifier>*</modifier></type><name>ino</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>file</name></name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>pasteboard_file</name></name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><call><name>kzalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>pasteboard_file</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>GFP_KERNEL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><operator>-</operator><name>ENOMEM</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pb</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>private_data</name></name> <operator>=</operator> <name>pb</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>f_flags</name></name> <operator>&amp;</operator> <name>O_TRUNC</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>read_pasteboard_to_buffer</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>fail_free_pb</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail_free_pb</name>:</label>
    <if_stmt><if>if <condition>(<expr><name><name>pb</name><operator>-&gt;</operator><name>buffer</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>kfree</name><argument_list>(<argument><expr><name><name>pb</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>kfree</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>fail</name>:</label>
    <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>private_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>loff_t</name></type> <name>pasteboard_llseek</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>file</name></name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>loff_t</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>pasteboard_file</name></name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>file</name><operator>-&gt;</operator><name>private_data</name></name></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>generic_file_llseek_size</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>whence</name></expr></argument>, <argument><expr><name>MAXIMAL_BUFFER_CAP</name></expr></argument>, <argument><expr><name><name>pb</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>pasteboard_read</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>file</name></name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>char</name> <name>__user</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>loff_t</name> <modifier>*</modifier></type><name>ppos</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>pasteboard_file</name></name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>file</name><operator>-&gt;</operator><name>private_data</name></name></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>simple_read_from_buffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>ppos</name></expr></argument>, <argument><expr><name><name>pb</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>pb</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>pasteboard_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>file</name></name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <name>__user</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>loff_t</name> <modifier>*</modifier></type><name>ppos</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>pasteboard_file</name></name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>file</name><operator>-&gt;</operator><name>private_data</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>f_flags</name></name> <operator>&amp;</operator> <name>O_APPEND</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><operator>*</operator><name>ppos</name> <operator>=</operator> <name><name>pb</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>loff_t</name></type> <name>new_len</name> <init>= <expr><operator>*</operator><name>ppos</name> <operator>+</operator> <name>count</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>realloc_buffer_to_fit</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>new_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>ssize_t</name></type> <name>result</name> <init>= <expr><call><name>simple_write_to_buffer</name><argument_list>(<argument><expr><name><name>pb</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>pb</name><operator>-&gt;</operator><name>cap</name></name></expr></argument>, <argument><expr><name>ppos</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>pb</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>new_len</name></expr>;</expr_stmt>
    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pasteboard_fsync</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>file</name></name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>loff_t</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>loff_t</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>datasync</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>pasteboard_file</name></name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>file</name><operator>-&gt;</operator><name>private_data</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>UIPasteboard_set</name><argument_list>(<argument><expr><name><name>pb</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>pb</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pasteboard_release</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>inode</name></name> <modifier>*</modifier></type><name>inode</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>file</name></name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>pasteboard_file</name></name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name><name>file</name><operator>-&gt;</operator><name>private_data</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>pasteboard_fsync</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pb</name><operator>-&gt;</operator><name>buffer</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>kfree</name><argument_list>(<argument><expr><name><name>pb</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>kfree</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>file_operations</name></name></type> <name>pasteboard_fops</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>owner</name> <operator>=</operator> <name>THIS_MODULE</name></expr>,
    <expr><operator>.</operator><name>open</name> <operator>=</operator> <name>pasteboard_open</name></expr>,
    <expr><operator>.</operator><name>read</name> <operator>=</operator> <name>pasteboard_read</name></expr>,
    <expr><operator>.</operator><name>write</name> <operator>=</operator> <name>pasteboard_write</name></expr>,
    <expr><operator>.</operator><name>llseek</name> <operator>=</operator> <name>pasteboard_llseek</name></expr>,
    <expr><operator>.</operator><name>fsync</name> <operator>=</operator> <name>pasteboard_fsync</name></expr>,
    <expr><operator>.</operator><name>release</name> <operator>=</operator> <name>pasteboard_release</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>miscdevice</name></name></type> <name>pasteboard_dev</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"clipboard"</literal></expr>,
    <expr><operator>.</operator><name>minor</name> <operator>=</operator> <name>MISC_DYNAMIC_MINOR</name></expr>,
    <expr><operator>.</operator><name>fops</name> <operator>=</operator> <operator>&amp;</operator><name>pasteboard_fops</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name> <name>__init</name></type> <name>pasteboard_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>misc_register</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pasteboard_dev</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><call><name>device_initcall</name><argument_list>(<argument><expr><name>pasteboard_init</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</unit>
