<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/platform/linux.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sysinfo.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"platform/platform.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"debug.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>read_proc_line</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ERRNO_DIE</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <do>do <block>{<block_content>
        <expr_stmt><expr><call><name>fgets</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1234</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>feof</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"could not find proc line %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block> while <condition>(<expr><operator>!</operator><operator>(</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator></expr>)</condition>;</do>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>cpu_usage</name></name></type> <name>get_cpu_usage</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>cpu_usage</name></name></type> <name>usage</name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1234</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>read_proc_line</name><argument_list>(<argument><expr><literal type="string">"/proc/stat"</literal></expr></argument>, <argument><expr><literal type="string">"cpu"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"cpu %"</literal><name>SCNu64</name><literal type="string">" %"</literal><name>SCNu64</name><literal type="string">" %"</literal><name>SCNu64</name><literal type="string">" %"</literal><name>SCNu64</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>usage</name><operator>.</operator><name>user_ticks</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>usage</name><operator>.</operator><name>system_ticks</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>usage</name><operator>.</operator><name>idle_ticks</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>usage</name><operator>.</operator><name>nice_ticks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>usage</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>mem_usage</name></name></type> <name>get_mem_usage</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>mem_usage</name></name></type> <name>usage</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1234</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>read_proc_line</name><argument_list>(<argument><expr><literal type="string">"/proc/meminfo"</literal></expr></argument>, <argument><expr><literal type="string">"MemTotal:"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"MemTotal: %"</literal><name>PRIu64</name><literal type="string">" kB\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>usage</name><operator>.</operator><name>total</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>read_proc_line</name><argument_list>(<argument><expr><literal type="string">"/proc/meminfo"</literal></expr></argument>, <argument><expr><literal type="string">"MemFree:"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"MemFree: %"</literal><name>PRIu64</name><literal type="string">" kB\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>usage</name><operator>.</operator><name>free</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>read_proc_line</name><argument_list>(<argument><expr><literal type="string">"/proc/meminfo"</literal></expr></argument>, <argument><expr><literal type="string">"Active:"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"Active: %"</literal><name>PRIu64</name><literal type="string">" kB\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>usage</name><operator>.</operator><name>active</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>read_proc_line</name><argument_list>(<argument><expr><literal type="string">"/proc/meminfo"</literal></expr></argument>, <argument><expr><literal type="string">"Inactive:"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"Inactive: %"</literal><name>PRIu64</name><literal type="string">" kB\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>usage</name><operator>.</operator><name>inactive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>usage</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>uptime_info</name></name></type> <name>get_uptime</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>sysinfo</name></name></type> <name>info</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sysinfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>uptime_info</name></name></type> <name>uptime</name> <init>= <expr><block>{
        <expr><operator>.</operator><name>uptime_ticks</name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>uptime</name></name></expr>,
        <expr><operator>.</operator><name>load_1m</name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>loads</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>,
        <expr><operator>.</operator><name>load_5m</name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>loads</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>,
        <expr><operator>.</operator><name>load_15m</name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>loads</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>,
    }</block></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>uptime</name></expr>;</return>
</block_content>}</block></function>
</unit>
