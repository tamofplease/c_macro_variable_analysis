<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/platform/darwin.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mach/mach.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sysctl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"platform/platform.h"</cpp:file></cpp:include>

<function><type><name><name>struct</name> <name>cpu_usage</name></name></type> <name>get_cpu_usage</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>host_cpu_load_info_data_t</name></type> <name>load</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mach_msg_type_number_t</name></type> <name>fuck</name> <init>= <expr><name>HOST_CPU_LOAD_INFO_COUNT</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>host_statistics</name><argument_list>(<argument><expr><call><name>mach_host_self</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>HOST_CPU_LOAD_INFO</name></expr></argument>, <argument><expr><operator>(</operator><name>host_info_t</name><operator>)</operator> <operator>&amp;</operator><name>load</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fuck</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>cpu_usage</name></name></type> <name>usage</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>usage</name><operator>.</operator><name>user_ticks</name></name> <operator>=</operator> <name><name>load</name><operator>.</operator><name>cpu_ticks</name><index>[<expr><name>CPU_STATE_USER</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>usage</name><operator>.</operator><name>system_ticks</name></name> <operator>=</operator> <name><name>load</name><operator>.</operator><name>cpu_ticks</name><index>[<expr><name>CPU_STATE_SYSTEM</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>usage</name><operator>.</operator><name>idle_ticks</name></name> <operator>=</operator> <name><name>load</name><operator>.</operator><name>cpu_ticks</name><index>[<expr><name>CPU_STATE_IDLE</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>usage</name><operator>.</operator><name>nice_ticks</name></name> <operator>=</operator> <name><name>load</name><operator>.</operator><name>cpu_ticks</name><index>[<expr><name>CPU_STATE_NICE</name></expr>]</index></name></expr>;</expr_stmt>
    <return>return <expr><name>usage</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>mem_usage</name></name></type> <name>get_mem_usage</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>host_basic_info_data_t</name></type> <name>basic</name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mach_msg_type_number_t</name></type> <name>fuck</name> <init>= <expr><name>HOST_BASIC_INFO_COUNT</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>kern_return_t</name></type> <name>status</name> <init>= <expr><call><name>host_info</name><argument_list>(<argument><expr><call><name>mach_host_self</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>HOST_BASIC_INFO</name></expr></argument>, <argument><expr><operator>(</operator><name>host_info_t</name><operator>)</operator> <operator>&amp;</operator><name>basic</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fuck</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>status</name> <operator>==</operator> <name>KERN_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>vm_statistics64_data_t</name></type> <name>vm</name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>fuck</name> <operator>=</operator> <name>HOST_VM_INFO64_COUNT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>host_statistics64</name><argument_list>(<argument><expr><call><name>mach_host_self</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>HOST_VM_INFO64</name></expr></argument>, <argument><expr><operator>(</operator><name>host_info_t</name><operator>)</operator> <operator>&amp;</operator><name>vm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fuck</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>status</name> <operator>==</operator> <name>KERN_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>mem_usage</name></name></type> <name>usage</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>usage</name><operator>.</operator><name>total</name></name> <operator>=</operator> <name><name>basic</name><operator>.</operator><name>max_mem</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>usage</name><operator>.</operator><name>free</name></name> <operator>=</operator> <name><name>vm</name><operator>.</operator><name>free_count</name></name> <operator>*</operator> <name>vm_page_size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>usage</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name><name>vm</name><operator>.</operator><name>active_count</name></name> <operator>*</operator> <name>vm_page_size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>usage</name><operator>.</operator><name>inactive</name></name> <operator>=</operator> <name><name>vm</name><operator>.</operator><name>inactive_count</name></name> <operator>*</operator> <name>vm_page_size</name></expr>;</expr_stmt>
    <return>return <expr><name>usage</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>uptime_info</name></name></type> <name>get_uptime</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name><name>kern_boottime</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>kern_boottime</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sysctlbyname</name><argument_list>(<argument><expr><literal type="string">"kern.boottime"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>kern_boottime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>now</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <struct>struct <block>{
        <decl_stmt><decl><type><name>uint32_t</name></type> <name><name>ldavg</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>scale</name></decl>;</decl_stmt>
    }</block> <decl><name>vm_loadavg</name></decl>;</struct>
    <expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>vm_loadavg</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sysctlbyname</name><argument_list>(<argument><expr><literal type="string">"vm.loadavg"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vm_loadavg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// linux wants the scale to be 16 bits</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>FSHIFT</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>vm_loadavg</name><operator>.</operator><name>ldavg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;=</operator> <literal type="number">16</literal> <operator>-</operator> <name>FSHIFT</name></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>vm_loadavg</name><operator>.</operator><name>ldavg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;=</operator> <name>FSHIFT</name> <operator>-</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name><name>struct</name> <name>uptime_info</name></name></type> <name>uptime</name> <init>= <expr><block>{
        <expr><operator>.</operator><name>uptime_ticks</name> <operator>=</operator> <name><name>now</name><operator>.</operator><name>tv_sec</name></name> <operator>-</operator> <name><name>kern_boottime</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>,
        <expr><operator>.</operator><name>load_1m</name> <operator>=</operator> <name><name>vm_loadavg</name><operator>.</operator><name>ldavg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>,
        <expr><operator>.</operator><name>load_5m</name> <operator>=</operator> <name><name>vm_loadavg</name><operator>.</operator><name>ldavg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>,
        <expr><operator>.</operator><name>load_15m</name> <operator>=</operator> <name><name>vm_loadavg</name><operator>.</operator><name>ldavg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>,
    }</block></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>uptime</name></expr>;</return>
</block_content>}</block></function>
</unit>
