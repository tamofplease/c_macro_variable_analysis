<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/tests/manual/stat.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LARGEFILE64_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>stat64</name></name></type> <name>statbuf</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>fstat64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>statbuf</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"fstat"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* write(1, &amp;statbuf, sizeof(statbuf)); */</comment>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1000</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTIF</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>len = sprintf(buf, #n " %llx\n", (long long) statbuf.st_##n); \
    write(1, buf, len);</cpp:value></cpp:define>
    <expr_stmt><expr><call><name>PTIF</name><argument_list>(<argument><expr><name>atime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PTIF</name><argument_list>(<argument><expr><name>mtime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PTIF</name><argument_list>(<argument><expr><name>ctime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* PTIF(dev) */</comment>
    <comment type="block">/* PTIF(ino); */</comment>
    <comment type="block">/* PTIF(mode); */</comment>
    <comment type="block">/* PTIF(nlink); */</comment>
    <comment type="block">/* PTIF(uid); */</comment>
    <comment type="block">/* PTIF(gid); */</comment>
    <comment type="block">/* PTIF(rdev); */</comment>
    <comment type="block">/* PTIF(size); */</comment>
    <comment type="block">/* PTIF(blksize); */</comment>
    <comment type="block">/* PTIF(blocks); */</comment>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
