<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/tests/e2e/qemu/qemu-test.h">
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>exec_op</name></cpp:macro> <cpp:value>glue(exec_, OP)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>exec_opq</name></cpp:macro> <cpp:value>glue(glue(exec_, OP), q)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>exec_opl</name></cpp:macro> <cpp:value>glue(glue(exec_, OP), l)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>exec_opw</name></cpp:macro> <cpp:value>glue(glue(exec_, OP), w)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>exec_opb</name></cpp:macro> <cpp:value>glue(glue(exec_, OP), b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXECOP2</name><parameter_list>(<parameter><type><name>size</name></type></parameter>, <parameter><type><name>rsize</name></type></parameter>, <parameter><type><name>res</name></type></parameter>, <parameter><type><name>s1</name></type></parameter>, <parameter><type><name>flags</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>asm ("push %4\n\t"\
         "popf\n\t"\
         stringify(OP) size " %" rsize "2, %" rsize "0\n\t" \
         "pushf\n\t"\
         "pop %1\n\t"\
         : "=q" (res), "=g" (flags)\
         : "q" (s1), "0" (res), "1" (flags)); \
    printf("%-10s A=" FMTLX " B=" FMTLX " R=" FMTLX " CCIN=%04lx CC=%04lx\n", \
           stringify(OP) size, s0, s1, res, iflags, flags &amp; CC_MASK);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXECOP1</name><parameter_list>(<parameter><type><name>size</name></type></parameter>, <parameter><type><name>rsize</name></type></parameter>, <parameter><type><name>res</name></type></parameter>, <parameter><type><name>flags</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>asm ("push %3\n\t"\
         "popf\n\t"\
         stringify(OP) size " %" rsize "0\n\t" \
         "pushf\n\t"\
         "pop %1\n\t"\
         : "=q" (res), "=g" (flags)\
         : "0" (res), "1" (flags)); \
    printf("%-10s A=" FMTLX " R=" FMTLX " CCIN=%04lx CC=%04lx\n", \
           stringify(OP) size, s0, res, iflags, flags &amp; CC_MASK);</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>OP1</name></cpp:ifdef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type> <name>exec_opq</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>s0</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>s1</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>iflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>long</name></type> <name>res</name></decl>, <decl><type ref="prev"/><name>flags</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <name>s0</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>flags</name> <operator>=</operator> <name>iflags</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXECOP1</name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>exec_opl</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>s0</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>s1</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>iflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>long</name></type> <name>res</name></decl>, <decl><type ref="prev"/><name>flags</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <name>s0</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>flags</name> <operator>=</operator> <name>iflags</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXECOP1</name><argument_list>(<argument><expr><literal type="string">"l"</literal></expr></argument>, <argument><expr><literal type="string">"k"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>exec_opw</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>s0</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>s1</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>iflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>long</name></type> <name>res</name></decl>, <decl><type ref="prev"/><name>flags</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <name>s0</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>flags</name> <operator>=</operator> <name>iflags</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXECOP1</name><argument_list>(<argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>exec_opb</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>s0</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>s1</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>iflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>long</name></type> <name>res</name></decl>, <decl><type ref="prev"/><name>flags</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <name>s0</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>flags</name> <operator>=</operator> <name>iflags</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXECOP1</name><argument_list>(<argument><expr><literal type="string">"b"</literal></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type> <name>exec_opq</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>s0</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>s1</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>iflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>long</name></type> <name>res</name></decl>, <decl><type ref="prev"/><name>flags</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <name>s0</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>flags</name> <operator>=</operator> <name>iflags</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXECOP2</name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>exec_opl</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>s0</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>s1</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>iflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>long</name></type> <name>res</name></decl>, <decl><type ref="prev"/><name>flags</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <name>s0</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>flags</name> <operator>=</operator> <name>iflags</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXECOP2</name><argument_list>(<argument><expr><literal type="string">"l"</literal></expr></argument>, <argument><expr><literal type="string">"k"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>exec_opw</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>s0</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>s1</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>iflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>long</name></type> <name>res</name></decl>, <decl><type ref="prev"/><name>flags</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <name>s0</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>flags</name> <operator>=</operator> <name>iflags</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXECOP2</name><argument_list>(<argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>exec_opb</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>s0</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>s1</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>iflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>long</name></type> <name>res</name></decl>, <decl><type ref="prev"/><name>flags</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <name>s0</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>flags</name> <operator>=</operator> <name>iflags</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXECOP2</name><argument_list>(<argument><expr><literal type="string">"b"</literal></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>exec_op</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>s0</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>s1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>s0</name> <operator>=</operator> <call><name>i2l</name><argument_list>(<argument><expr><name>s0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s1</name> <operator>=</operator> <call><name>i2l</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>exec_opq</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>exec_opl</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec_opw</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec_opb</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>OP_CC</name></cpp:ifdef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>exec_opq</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>CC_C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>exec_opl</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>CC_C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec_opw</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>CC_C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec_opb</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>CC_C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<decl_stmt><decl><type><name>void</name></type> <name>glue</name><argument_list>(<argument><expr><name>test_</name></expr></argument>, <argument><expr><name>OP</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>exec_op</name><argument_list>(<argument><expr><literal type="number">0x12345678</literal></expr></argument>, <argument><expr><literal type="number">0x812FADA</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec_op</name><argument_list>(<argument><expr><literal type="number">0x12341</literal></expr></argument>, <argument><expr><literal type="number">0x12341</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec_op</name><argument_list>(<argument><expr><literal type="number">0x12341</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">0x12341</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec_op</name><argument_list>(<argument><expr><literal type="number">0xffffffff</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec_op</name><argument_list>(<argument><expr><literal type="number">0xffffffff</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec_op</name><argument_list>(<argument><expr><literal type="number">0xffffffff</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec_op</name><argument_list>(<argument><expr><literal type="number">0xffffffff</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec_op</name><argument_list>(<argument><expr><literal type="number">0x7fffffff</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec_op</name><argument_list>(<argument><expr><literal type="number">0x7fffffff</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec_op</name><argument_list>(<argument><expr><literal type="number">0x7fffffff</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec_op</name><argument_list>(<argument><expr><literal type="number">0x80000000</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec_op</name><argument_list>(<argument><expr><literal type="number">0x80000000</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec_op</name><argument_list>(<argument><expr><literal type="number">0x80000000</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec_op</name><argument_list>(<argument><expr><literal type="number">0x12347fff</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec_op</name><argument_list>(<argument><expr><literal type="number">0x12347fff</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec_op</name><argument_list>(<argument><expr><literal type="number">0x12347fff</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec_op</name><argument_list>(<argument><expr><literal type="number">0x12348000</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec_op</name><argument_list>(<argument><expr><literal type="number">0x12348000</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec_op</name><argument_list>(<argument><expr><literal type="number">0x12348000</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec_op</name><argument_list>(<argument><expr><literal type="number">0x12347f7f</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec_op</name><argument_list>(<argument><expr><literal type="number">0x12347f7f</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec_op</name><argument_list>(<argument><expr><literal type="number">0x12347f7f</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec_op</name><argument_list>(<argument><expr><literal type="number">0x12348080</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec_op</name><argument_list>(<argument><expr><literal type="number">0x12348080</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec_op</name><argument_list>(<argument><expr><literal type="number">0x12348080</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>glue</name><argument_list>(<argument><expr><name>_test_</name></expr></argument>, <argument><expr><name>OP</name></expr></argument>)</argument_list> <name>__init_call</name> <init>= <expr><call><name>glue</name><argument_list>(<argument><expr><name>test_</name></expr></argument>, <argument><expr><name>OP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OP</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OP_CC</name></cpp:undef>
</unit>
