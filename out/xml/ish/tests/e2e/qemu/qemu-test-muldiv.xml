<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/tests/e2e/qemu/qemu-test-muldiv.h">
<decl_stmt><decl><type><name>void</name></type> <name>glue</name><argument_list>(<argument><expr><call><name>glue</name><argument_list>(<argument><expr><name>test_</name></expr></argument>, <argument><expr><name>OP</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>long</name> <name>op0</name></expr></argument>, <argument><expr><name>long</name> <name>op1</name></expr></argument>)</argument_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>long</name></type> <name>res</name></decl>, <decl><type ref="prev"/><name>s1</name></decl>, <decl><type ref="prev"/><name>s0</name></decl>, <decl><type ref="prev"/><name>flags</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>s0</name> <operator>=</operator> <name>op0</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>s1</name> <operator>=</operator> <name>op1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <name>s0</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <asm>asm ("push %4\n\t"
         "popf\n\t"
         stringify(OP)"b %b2\n\t"
         "pushf\n\t"
         "pop %1\n\t"
         : "=a" (res), "=g" (flags)
         : "q" (s1), "0" (res), "1" (flags));</asm>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%-10s A="</literal> <name>FMTLX</name> <literal type="string">" B="</literal> <name>FMTLX</name> <literal type="string">" R="</literal> <name>FMTLX</name> <literal type="string">" CC=%04lx\n"</literal></expr></argument>,
           <argument><expr><call><name>stringify</name><argument_list>(<argument><expr><name>OP</name></expr></argument>)</argument_list></call> <literal type="string">"b"</literal></expr></argument>, <argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>flags</name> <operator>&amp;</operator> <name>CC_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>glue</name><argument_list>(<argument><expr><call><name>glue</name><argument_list>(<argument><expr><name>test_</name></expr></argument>, <argument><expr><name>OP</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>long</name> <name>op0h</name></expr></argument>, <argument><expr><name>long</name> <name>op0</name></expr></argument>, <argument><expr><name>long</name> <name>op1</name></expr></argument>)</argument_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>long</name></type> <name>res</name></decl>, <decl><type ref="prev"/><name>s1</name></decl>, <decl><type ref="prev"/><name>flags</name></decl>, <decl><type ref="prev"/><name>resh</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>s1</name> <operator>=</operator> <name>op1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>resh</name> <operator>=</operator> <name>op0h</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <name>op0</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <asm>asm ("push %5\n\t"
         "popf\n\t"
         stringify(OP) "w %w3\n\t"
         "pushf\n\t"
         "pop %1\n\t"
         : "=a" (res), "=g" (flags), "=d" (resh)
         : "q" (s1), "0" (res), "1" (flags), "2" (resh));</asm>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%-10s AH="</literal> <name>FMTLX</name> <literal type="string">" AL="</literal> <name>FMTLX</name> <literal type="string">" B="</literal> <name>FMTLX</name> <literal type="string">" RH="</literal> <name>FMTLX</name> <literal type="string">" RL="</literal> <name>FMTLX</name> <literal type="string">" CC=%04lx\n"</literal></expr></argument>,
           <argument><expr><call><name>stringify</name><argument_list>(<argument><expr><name>OP</name></expr></argument>)</argument_list></call> <literal type="string">"w"</literal></expr></argument>, <argument><expr><name>op0h</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>resh</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>flags</name> <operator>&amp;</operator> <name>CC_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>glue</name><argument_list>(<argument><expr><call><name>glue</name><argument_list>(<argument><expr><name>test_</name></expr></argument>, <argument><expr><name>OP</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>long</name> <name>op0h</name></expr></argument>, <argument><expr><name>long</name> <name>op0</name></expr></argument>, <argument><expr><name>long</name> <name>op1</name></expr></argument>)</argument_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>long</name></type> <name>res</name></decl>, <decl><type ref="prev"/><name>s1</name></decl>, <decl><type ref="prev"/><name>flags</name></decl>, <decl><type ref="prev"/><name>resh</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>s1</name> <operator>=</operator> <name>op1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>resh</name> <operator>=</operator> <name>op0h</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <name>op0</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <asm>asm ("push %5\n\t"
         "popf\n\t"
         stringify(OP) "l %k3\n\t"
         "pushf\n\t"
         "pop %1\n\t"
         : "=a" (res), "=g" (flags), "=d" (resh)
         : "q" (s1), "0" (res), "1" (flags), "2" (resh));</asm>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%-10s AH="</literal> <name>FMTLX</name> <literal type="string">" AL="</literal> <name>FMTLX</name> <literal type="string">" B="</literal> <name>FMTLX</name> <literal type="string">" RH="</literal> <name>FMTLX</name> <literal type="string">" RL="</literal> <name>FMTLX</name> <literal type="string">" CC=%04lx\n"</literal></expr></argument>,
           <argument><expr><call><name>stringify</name><argument_list>(<argument><expr><name>OP</name></expr></argument>)</argument_list></call> <literal type="string">"l"</literal></expr></argument>, <argument><expr><name>op0h</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>resh</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>flags</name> <operator>&amp;</operator> <name>CC_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>void</name></type> <name>glue</name><argument_list>(<argument><expr><call><name>glue</name><argument_list>(<argument><expr><name>test_</name></expr></argument>, <argument><expr><name>OP</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>long</name> <name>op0h</name></expr></argument>, <argument><expr><name>long</name> <name>op0</name></expr></argument>, <argument><expr><name>long</name> <name>op1</name></expr></argument>)</argument_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>long</name></type> <name>res</name></decl>, <decl><type ref="prev"/><name>s1</name></decl>, <decl><type ref="prev"/><name>flags</name></decl>, <decl><type ref="prev"/><name>resh</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>s1</name> <operator>=</operator> <name>op1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>resh</name> <operator>=</operator> <name>op0h</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <name>op0</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <asm>asm ("push %5\n\t"
         "popf\n\t"
         stringify(OP) "q %3\n\t"
         "pushf\n\t"
         "pop %1\n\t"
         : "=a" (res), "=g" (flags), "=d" (resh)
         : "q" (s1), "0" (res), "1" (flags), "2" (resh));</asm>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%-10s AH="</literal> <name>FMTLX</name> <literal type="string">" AL="</literal> <name>FMTLX</name> <literal type="string">" B="</literal> <name>FMTLX</name> <literal type="string">" RH="</literal> <name>FMTLX</name> <literal type="string">" RL="</literal> <name>FMTLX</name> <literal type="string">" CC=%04lx\n"</literal></expr></argument>,
           <argument><expr><call><name>stringify</name><argument_list>(<argument><expr><name>OP</name></expr></argument>)</argument_list></call> <literal type="string">"q"</literal></expr></argument>, <argument><expr><name>op0h</name></expr></argument>, <argument><expr><name>op0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>resh</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>flags</name> <operator>&amp;</operator> <name>CC_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OP</name></cpp:undef>
</unit>
