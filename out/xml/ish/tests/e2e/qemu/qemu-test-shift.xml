<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/tests/e2e/qemu/qemu-test-shift.h">
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>exec_op</name></cpp:macro> <cpp:value>glue(exec_, OP)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>exec_opq</name></cpp:macro> <cpp:value>glue(glue(exec_, OP), q)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>exec_opl</name></cpp:macro> <cpp:value>glue(glue(exec_, OP), l)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>exec_opw</name></cpp:macro> <cpp:value>glue(glue(exec_, OP), w)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>exec_opb</name></cpp:macro> <cpp:value>glue(glue(exec_, OP), b)</cpp:value></cpp:define>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>OP_SHIFTD</name></cpp:ifndef>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>OP_NOBYTE</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXECSHIFT</name><parameter_list>(<parameter><type><name>size</name></type></parameter>, <parameter><type><name>rsize</name></type></parameter>, <parameter><type><name>res</name></type></parameter>, <parameter><type><name>s1</name></type></parameter>, <parameter><type><name>s2</name></type></parameter>, <parameter><type><name>flags</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>asm ("push %4\n\t"\
         "popf\n\t"\
         stringify(OP) size " %" rsize "2, %" rsize "0\n\t" \
         "pushf\n\t"\
         "pop %1\n\t"\
         : "=g" (res), "=g" (flags)\
         : "r" (s1), "0" (res), "1" (flags));</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXECSHIFT</name><parameter_list>(<parameter><type><name>size</name></type></parameter>, <parameter><type><name>rsize</name></type></parameter>, <parameter><type><name>res</name></type></parameter>, <parameter><type><name>s1</name></type></parameter>, <parameter><type><name>s2</name></type></parameter>, <parameter><type><name>flags</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>asm ("push %4\n\t"\
         "popf\n\t"\
         stringify(OP) size " %%cl, %" rsize "0\n\t" \
         "pushf\n\t"\
         "pop %1\n\t"\
         : "=q" (res), "=g" (flags)\
         : "c" (s1), "0" (res), "1" (flags));</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type> <name>exec_opq</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>s2</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>s0</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>s1</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>iflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>long</name></type> <name>res</name></decl>, <decl><type ref="prev"/><name>flags</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <name>s0</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>flags</name> <operator>=</operator> <name>iflags</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXECSHIFT</name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* overflow is undefined if count != 1 */</comment>
    <if_stmt><if>if <condition>(<expr><name>s1</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>CC_O</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%-10s A="</literal> <name>FMTLX</name> <literal type="string">" B="</literal> <name>FMTLX</name> <literal type="string">" R="</literal> <name>FMTLX</name> <literal type="string">" CCIN=%04lx CC=%04lx\n"</literal></expr></argument>,
           <argument><expr><call><name>stringify</name><argument_list>(<argument><expr><name>OP</name></expr></argument>)</argument_list></call> <literal type="string">"q"</literal></expr></argument>, <argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>iflags</name></expr></argument>, <argument><expr><name>flags</name> <operator>&amp;</operator> <name>CC_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>exec_opl</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>s2</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>s0</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>s1</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>iflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>long</name></type> <name>res</name></decl>, <decl><type ref="prev"/><name>flags</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <name>s0</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>flags</name> <operator>=</operator> <name>iflags</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXECSHIFT</name><argument_list>(<argument><expr><literal type="string">"l"</literal></expr></argument>, <argument><expr><literal type="string">"k"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* overflow is undefined if count != 1 */</comment>
    <if_stmt><if>if <condition>(<expr><name>s1</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>CC_O</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%-10s A="</literal> <name>FMTLX</name> <literal type="string">" B="</literal> <name>FMTLX</name> <literal type="string">" R="</literal> <name>FMTLX</name> <literal type="string">" CCIN=%04lx CC=%04lx\n"</literal></expr></argument>,
           <argument><expr><call><name>stringify</name><argument_list>(<argument><expr><name>OP</name></expr></argument>)</argument_list></call> <literal type="string">"l"</literal></expr></argument>, <argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>iflags</name></expr></argument>, <argument><expr><name>flags</name> <operator>&amp;</operator> <name>CC_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>exec_opw</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>s2</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>s0</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>s1</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>iflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>long</name></type> <name>res</name></decl>, <decl><type ref="prev"/><name>flags</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <name>s0</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>flags</name> <operator>=</operator> <name>iflags</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXECSHIFT</name><argument_list>(<argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* overflow is undefined if count != 1 */</comment>
    <if_stmt><if>if <condition>(<expr><name>s1</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>CC_O</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%-10s A="</literal> <name>FMTLX</name> <literal type="string">" B="</literal> <name>FMTLX</name> <literal type="string">" R="</literal> <name>FMTLX</name> <literal type="string">" CCIN=%04lx CC=%04lx\n"</literal></expr></argument>,
           <argument><expr><call><name>stringify</name><argument_list>(<argument><expr><name>OP</name></expr></argument>)</argument_list></call> <literal type="string">"w"</literal></expr></argument>, <argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>iflags</name></expr></argument>, <argument><expr><name>flags</name> <operator>&amp;</operator> <name>CC_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXECSHIFT</name><parameter_list>(<parameter><type><name>size</name></type></parameter>, <parameter><type><name>rsize</name></type></parameter>, <parameter><type><name>res</name></type></parameter>, <parameter><type><name>s1</name></type></parameter>, <parameter><type><name>s2</name></type></parameter>, <parameter><type><name>flags</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>asm ("push %4\n\t"\
         "popf\n\t"\
         stringify(OP) size " %%cl, %" rsize "5, %" rsize "0\n\t" \
         "pushf\n\t"\
         "pop %1\n\t"\
         : "=g" (res), "=g" (flags)\
         : "c" (s1), "0" (res), "1" (flags), "r" (s2));</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type> <name>exec_opq</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>s2</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>s0</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>s1</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>iflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>long</name></type> <name>res</name></decl>, <decl><type ref="prev"/><name>flags</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <name>s0</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>flags</name> <operator>=</operator> <name>iflags</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXECSHIFT</name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* overflow is undefined if count != 1 */</comment>
    <if_stmt><if>if <condition>(<expr><name>s1</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>CC_O</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%-10s A="</literal> <name>FMTLX</name> <literal type="string">" B="</literal> <name>FMTLX</name> <literal type="string">" C="</literal> <name>FMTLX</name> <literal type="string">" R="</literal> <name>FMTLX</name> <literal type="string">" CCIN=%04lx CC=%04lx\n"</literal></expr></argument>,
           <argument><expr><call><name>stringify</name><argument_list>(<argument><expr><name>OP</name></expr></argument>)</argument_list></call> <literal type="string">"q"</literal></expr></argument>, <argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>iflags</name></expr></argument>, <argument><expr><name>flags</name> <operator>&amp;</operator> <name>CC_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>exec_opl</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>s2</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>s0</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>s1</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>iflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>long</name></type> <name>res</name></decl>, <decl><type ref="prev"/><name>flags</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <name>s0</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>flags</name> <operator>=</operator> <name>iflags</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXECSHIFT</name><argument_list>(<argument><expr><literal type="string">"l"</literal></expr></argument>, <argument><expr><literal type="string">"k"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* overflow is undefined if count != 1 */</comment>
    <if_stmt><if>if <condition>(<expr><name>s1</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>CC_O</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%-10s A="</literal> <name>FMTLX</name> <literal type="string">" B="</literal> <name>FMTLX</name> <literal type="string">" C="</literal> <name>FMTLX</name> <literal type="string">" R="</literal> <name>FMTLX</name> <literal type="string">" CCIN=%04lx CC=%04lx\n"</literal></expr></argument>,
           <argument><expr><call><name>stringify</name><argument_list>(<argument><expr><name>OP</name></expr></argument>)</argument_list></call> <literal type="string">"l"</literal></expr></argument>, <argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>iflags</name></expr></argument>, <argument><expr><name>flags</name> <operator>&amp;</operator> <name>CC_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
void exec_opw(long s2, long s0, long s1, long iflags)
{
    long res, flags;
    res = s0;
    flags = iflags;
    EXECSHIFT("w", "w", res, s1, s2, flags);
    <comment type="block">/* overflow is undefined if count != 1 */</comment>
    if (s1 != 1)
      flags &amp;= ~CC_O;
    printf("%-10s A=" FMTLX " B=" FMTLX " C=" FMTLX " R=" FMTLX " CCIN=%04lx CC=%04lx\n",
           stringify(OP) "w", s0, s2, s1, res, iflags, flags &amp; CC_MASK);
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>OP_NOBYTE</name></cpp:ifndef>
<function><type><name>void</name></type> <name>exec_opb</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>s0</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>s1</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>iflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>long</name></type> <name>res</name></decl>, <decl><type ref="prev"/><name>flags</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <name>s0</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>flags</name> <operator>=</operator> <name>iflags</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EXECSHIFT</name><argument_list>(<argument><expr><literal type="string">"b"</literal></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* overflow is undefined if count != 1 */</comment>
    <if_stmt><if>if <condition>(<expr><name>s1</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>CC_O</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%-10s A="</literal> <name>FMTLX</name> <literal type="string">" B="</literal> <name>FMTLX</name> <literal type="string">" R="</literal> <name>FMTLX</name> <literal type="string">" CCIN=%04lx CC=%04lx\n"</literal></expr></argument>,
           <argument><expr><call><name>stringify</name><argument_list>(<argument><expr><name>OP</name></expr></argument>)</argument_list></call> <literal type="string">"b"</literal></expr></argument>, <argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>iflags</name></expr></argument>, <argument><expr><name>flags</name> <operator>&amp;</operator> <name>CC_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>exec_op</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>s2</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>s0</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>s1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>s2</name> <operator>=</operator> <call><name>i2l</name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s0</name> <operator>=</operator> <call><name>i2l</name><argument_list>(<argument><expr><name>s0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>exec_opq</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>exec_opl</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>OP_SHIFTD</name></cpp:ifdef>
    <comment type="line">//exec_opw(s2, s0, s1, 0);</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>exec_opw</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>OP_NOBYTE</name></cpp:ifndef>
    <expr_stmt><expr><call><name>exec_opb</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>OP_CC</name></cpp:ifdef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>exec_opq</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>CC_C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>exec_opl</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>CC_C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec_opw</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>CC_C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exec_opb</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>CC_C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<decl_stmt><decl><type><name>void</name></type> <name>glue</name><argument_list>(<argument><expr><name>test_</name></expr></argument>, <argument><expr><name>OP</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>exec_op</name><argument_list>(<argument><expr><literal type="number">0x21ad3d34</literal></expr></argument>, <argument><expr><literal type="number">0x12345678</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>exec_op</name><argument_list>(<argument><expr><literal type="number">0x813f3421</literal></expr></argument>, <argument><expr><literal type="number">0x82345679</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>glue</name><argument_list>(<argument><expr><name>_test_</name></expr></argument>, <argument><expr><name>OP</name></expr></argument>)</argument_list> <name>__init_call</name> <init>= <expr><call><name>glue</name><argument_list>(<argument><expr><name>test_</name></expr></argument>, <argument><expr><name>OP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OP</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OP_CC</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OP_SHIFTD</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OP_NOBYTE</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EXECSHIFT</name></cpp:undef>
</unit>
