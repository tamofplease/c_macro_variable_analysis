<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/tests/e2e/sse2/paddq.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;emmintrin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xmmintrin.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>printout</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>printf("%05lld %05lld\n", (long long) out[0], (long long) out[1])</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name><name>buf1234</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{  <expr><literal type="number">1234</literal></expr>,  <expr><literal type="number">5678</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name><name>buf1111</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">11111</literal></expr>, <expr><literal type="number">11111</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <comment type="line">// xmm1 Initially 1234</comment>
    <decl_stmt><decl><type><name>__m128i</name></type> <name>xmm1</name> <init>= <expr><call><name>_mm_load_si128</name><argument_list>(<argument><expr><operator>(</operator><name>__m128i</name><operator>*</operator><operator>)</operator> <name>buf1234</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>_mm_store_si128</name><argument_list>(<argument><expr><operator>(</operator><name>__m128i</name><operator>*</operator><operator>)</operator> <name>out</name></expr></argument>, <argument><expr><name>xmm1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printout</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// xmm2 Initially 1111</comment>
    <decl_stmt><decl><type><name>__m128i</name></type> <name>xmm2</name> <init>= <expr><call><name>_mm_load_si128</name><argument_list>(<argument><expr><operator>(</operator><name>__m128i</name><operator>*</operator><operator>)</operator> <name>buf1111</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>_mm_store_si128</name><argument_list>(<argument><expr><operator>(</operator><name>__m128i</name><operator>*</operator><operator>)</operator> <name>out</name></expr></argument>, <argument><expr><name>xmm2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printout</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Result is just each added by 1</comment>
    <asm>asm <specifier>volatile</specifier>(	"paddq %[vec2], %[vec1]\n\t"
            : [vec1] "+x" (xmm1), [vec2] "+x" (xmm2)
            :);</asm>
    <expr_stmt><expr><call><name>_mm_store_si128</name><argument_list>(<argument><expr><operator>(</operator><name>__m128i</name><operator>*</operator><operator>)</operator> <name>out</name></expr></argument>, <argument><expr><name>xmm1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printout</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
