<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/jit/helpers.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"emu/cpu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"emu/cpuid.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>helper_cpuid</name><parameter_list>(<parameter><decl><type><name>dword_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>dword_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>dword_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>dword_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>do_cpuid</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>helper_rdtsc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpu_state</name></name> <modifier>*</modifier></type><name>cpu</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>now</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>clock_gettime</name><argument_list>(<argument><expr><name>CLOCK_MONOTONIC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>tsc</name> <init>= <expr><name><name>now</name><operator>.</operator><name>tv_sec</name></name> <operator>*</operator> <literal type="number">1000000000l</literal> <operator>+</operator> <name><name>now</name><operator>.</operator><name>tv_nsec</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>cpu</name><operator>-&gt;</operator><name>eax</name></name> <operator>=</operator> <name>tsc</name> <operator>&amp;</operator> <literal type="number">0xffffffff</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cpu</name><operator>-&gt;</operator><name>edx</name></name> <operator>=</operator> <name>tsc</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>helper_expand_flags</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpu_state</name></name> <modifier>*</modifier></type><name>cpu</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>expand_flags</name><argument_list>(<argument><expr><name>cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>helper_collapse_flags</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cpu_state</name></name> <modifier>*</modifier></type><name>cpu</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>collapse_flags</name><argument_list>(<argument><expr><name>cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
