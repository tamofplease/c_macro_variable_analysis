<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/jit/jit.h"><cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>JIT_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JIT_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"misc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"emu/mmu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util/list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util/sync.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ENGINE_JIT</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JIT_INITIAL_HASH_SIZE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 10)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JIT_CACHE_SIZE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 10)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JIT_PAGE_HASH_SIZE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 10)</cpp:value></cpp:define>

<struct>struct <name>jit</name> <block>{
    <comment type="line">// there is one jit per address space</comment>
    <decl_stmt><decl><type><name><name>struct</name> <name>mmu</name></name> <modifier>*</modifier></type><name>mmu</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>mem_used</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>num_blocks</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>list</name></name> <modifier>*</modifier></type><name>hash</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>hash_size</name></decl>;</decl_stmt>

    <comment type="line">// list of jit_blocks that should be freed soon (at the next RCU grace</comment>
    <comment type="line">// period, if we had such a thing)</comment>
    <decl_stmt><decl><type><name><name>struct</name> <name>list</name></name></type> <name>jetsam</name></decl>;</decl_stmt>

    <comment type="line">// A way to look up blocks in a page</comment>
    <struct>struct <block>{
        <decl_stmt><decl><type><name><name>struct</name> <name>list</name></name></type> <name><name>blocks</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
    }</block> <decl><modifier>*</modifier><name>page_hash</name></decl>;</struct>

    <decl_stmt><decl><type><name>lock_t</name></type> <name>lock</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>wrlock_t</name></type> <name>jetsam_lock</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="line">// this is roughly the average number of instructions in a basic block according to anonymous sources</comment>
<comment type="line">// times 4, roughly the average number of gadgets/parameters in an instruction, according to anonymous sources</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JIT_BLOCK_INITIAL_CAPACITY</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<struct>struct <name>jit_block</name> <block>{
    <decl_stmt><decl><type><name>addr_t</name></type> <name>addr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>addr_t</name></type> <name>end_addr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>used</name></decl>;</decl_stmt>

    <comment type="line">// pointers to the ip values in the last gadget</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name><name>jump_ip</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
    <comment type="line">// original values of *jump_ip[]</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name><name>old_jump_ip</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
    <comment type="line">// blocks that jump to this block</comment>
    <decl_stmt><decl><type><name><name>struct</name> <name>list</name></name></type> <name><name>jumps_from</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

    <comment type="line">// hashtable bucket links</comment>
    <decl_stmt><decl><type><name><name>struct</name> <name>list</name></name></type> <name>chain</name></decl>;</decl_stmt>
    <comment type="line">// list of blocks in a page</comment>
    <decl_stmt><decl><type><name><name>struct</name> <name>list</name></name></type> <name><name>page</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
    <comment type="line">// links for jumps_from</comment>
    <decl_stmt><decl><type><name><name>struct</name> <name>list</name></name></type> <name><name>jumps_from_links</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
    <comment type="line">// links for free list</comment>
    <decl_stmt><decl><type><name><name>struct</name> <name>list</name></name></type> <name>jetsam</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>is_jetsam</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name><name>code</name><index>[]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="line">// Create a new jit</comment>
<function_decl><type><name><name>struct</name> <name>jit</name></name> <modifier>*</modifier></type><name>jit_new</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mmu</name></name> <modifier>*</modifier></type><name>mmu</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>jit_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>jit</name></name> <modifier>*</modifier></type><name>jit</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// Invalidate all jit blocks in pages start (inclusive) to end (exclusive).</comment>
<comment type="line">// Locks the jit. Should only be called by memory.c in conjunction with</comment>
<comment type="line">// mem_changed.</comment>
<function_decl><type><name>void</name></type> <name>jit_invalidate_range</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>jit</name></name> <modifier>*</modifier></type><name>jit</name></decl></parameter>, <parameter><decl><type><name>page_t</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>page_t</name></type> <name>end</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>jit_invalidate_page</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>jit</name></name> <modifier>*</modifier></type><name>jit</name></decl></parameter>, <parameter><decl><type><name>page_t</name></type> <name>page</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>jit_invalidate_all</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>jit</name></name> <modifier>*</modifier></type><name>jit</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
