<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/jit/gadgets-x86_64/gadgets.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../gadgets-generic.h"</cpp:file></cpp:include>

<cpp:empty># register assignments</cpp:empty>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_esp</name></cpp:macro> <cpp:value>r8d</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_sp</name></cpp:macro> <cpp:value>r8w</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ip</name></cpp:macro> <cpp:value>r9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_eip</name></cpp:macro> <cpp:value>r9d</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_tmp</name></cpp:macro> <cpp:value>r10d</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tmp</name></cpp:macro> <cpp:value>r10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tmpd</name></cpp:macro> <cpp:value>r10d</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tmpw</name></cpp:macro> <cpp:value>r10w</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tmpb</name></cpp:macro> <cpp:value>r10b</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_cpu</name></cpp:macro> <cpp:value>r11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_tlb</name></cpp:macro> <cpp:value>r12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_addr</name></cpp:macro> <cpp:value>r13d</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_addrq</name></cpp:macro> <cpp:value>r13</cpp:value></cpp:define>

<expr_stmt><expr><operator>.</operator><specifier>extern</specifier> <name><name>jit_exit</name>

<operator>.</operator><name>macro</name> <operator>.</operator><name>gadget</name></name> <name><name>name</name>
    <operator>.</operator><name>global</name><operator>.</operator><name>name</name></name> <name>gadget_</name><operator>\</operator><operator>(</operator><operator>)</operator><operator>\</operator><name><name>name</name>
<operator>.</operator><name>endm</name>
<operator>.</operator><name>macro</name></name> <name>gret</name> <name>pop</name><operator>=</operator><literal type="number">0</literal>
    <name>addq</name> <call><name>$</name><argument_list>(<argument><expr><operator>(</operator><operator>\</operator><name>pop</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><operator>%</operator><name>_ip</name>
    <name>jmp</name> <operator>*</operator><operator>-</operator><literal type="number">8</literal><operator>(</operator><operator>%</operator><name>_ip</name><operator>)</operator>
<operator>.</operator><name><name>endm</name>

<cpp:empty># memory reading and writing</cpp:empty>
<operator>.</operator><name>irp</name></name> <name>type</name></expr><operator>,</operator> <expr><name>read</name></expr><operator>,</operator><expr><name><name>write</name>

<operator>.</operator><name>macro</name></name> <operator>\</operator><name>type</name><operator>\</operator><operator>(</operator><operator>)</operator><name>_prep</name> <name>size</name></expr><operator>,</operator> <expr><name>id</name>
    <name>movl</name> <operator>%</operator><name>_addr</name></expr><operator>,</operator> <expr><operator>%</operator><name>r14d</name>
    <name>shrl</name> <name>$12</name></expr><operator>,</operator> <expr><operator>%</operator><name>r14d</name>
    <name>andl</name> <name>$0x3ff</name></expr><operator>,</operator> <expr><operator>%</operator><name>r14d</name>
    <name>movl</name> <operator>%</operator><name>_addr</name></expr><operator>,</operator> <expr><operator>%</operator><name>r15d</name>
    <name>shrl</name> <name>$22</name></expr><operator>,</operator> <expr><operator>%</operator><name>r15d</name>
    <name>xor</name> <operator>%</operator><name>r15d</name></expr><operator>,</operator> <expr><operator>%</operator><name>r14d</name>
    <name>shll</name> <name>$4</name></expr><operator>,</operator> <expr><operator>%</operator><name>r14d</name>
    <name>movl</name> <operator>%</operator><name>_addr</name></expr><operator>,</operator> <expr><operator>%</operator><name>r15d</name>
    <name>andl</name> <name>$0xfff</name></expr><operator>,</operator> <expr><operator>%</operator><name>r15d</name>
    <name>cmpl</name> <call><name>$</name><argument_list>(<argument><expr><literal type="number">0x1000</literal><operator>-</operator><operator>(</operator><operator>\</operator><name>size</name><operator>/</operator><literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><operator>%</operator><name>r15d</name>
    <name>ja</name> <name>crosspage_load_</name><operator>\</operator><name>id</name>
    <name>movl</name> <operator>%</operator><name>_addr</name></expr><operator>,</operator> <expr><operator>%</operator><name>r15d</name>
    <name>andl</name> <name>$0xfffff000</name></expr><operator>,</operator> <expr><operator>%</operator><name><name>r15d</name>
    <operator>.</operator><name>ifc</name></name> <operator>\</operator><name>type</name></expr><operator>,</operator><expr><name>read</name>
        <name>cmpl</name> <call><name>TLB_ENTRY_page</name><argument_list>(<argument><expr><operator>%</operator><name>_tlb</name></expr></argument>,<argument><expr><operator>%</operator><name>r14</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><operator>%</operator><name><name>r15d</name>
    <operator>.</operator><name/></name>else
        <name>cmpl</name> <call><name>TLB_ENTRY_page_if_writable</name><argument_list>(<argument><expr><operator>%</operator><name>_tlb</name></expr></argument>,<argument><expr><operator>%</operator><name>r14</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><operator>%</operator><name><name>r15d</name>
    <operator>.</operator><name>endif</name></name>
    <name>movl</name> <operator>%</operator><name>r15d</name></expr><operator>,</operator> <expr><operator>-</operator><name>TLB_entries</name><operator>+</operator><macro><name>TLB_dirty_page</name><argument_list>(<argument>%_tlb</argument>)</argument_list></macro>
    <name>jne</name> <name>handle_miss_</name><operator>\</operator><name>id</name>
    <name>addq</name> <call><name>TLB_ENTRY_data_minus_addr</name><argument_list>(<argument><expr><operator>%</operator><name>_tlb</name></expr></argument>,<argument><expr><operator>%</operator><name>r14</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><operator>%</operator><name>_addrq</name>
<name>back_</name><operator>\</operator><name>id</name> <operator>:</operator>

<operator>.</operator><name>pushsection_bullshit</name>
<name>handle_miss_</name><operator>\</operator><name>id</name> <operator>:</operator>
    <name>call</name> <name>handle_</name><operator>\</operator><name>type</name><operator>\</operator><operator>(</operator><operator>)</operator><name>_miss</name>
    <name>jmp</name> <name>back_</name><operator>\</operator><name>id</name>
<name>crosspage_load_</name><operator>\</operator><name>id</name> <operator>:</operator>
    <name>movq</name> <call><name>$</name><argument_list>(<argument><expr><operator>\</operator><name>size</name><operator>/</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><operator>%</operator><name>r14</name>
    <name>call</name> <name>crosspage_load</name>
    <name>jmp</name> <name>back_</name><operator>\</operator><name><name>id</name>
<operator>.</operator><name>popsection</name>
<operator>.</operator><name>endm</name>

<operator>.</operator><name>endr</name>
<operator>.</operator><name>macro</name></name> <name>write_done</name> <name>size</name></expr><operator>,</operator> <expr><name>id</name>
    <name>leaq</name> <call><name>LOCAL_value</name><argument_list>(<argument><expr><operator>%</operator><name>_cpu</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><operator>%</operator><name>r14</name>
    <name>cmpq</name> <operator>%</operator><name>_addrq</name></expr><operator>,</operator> <expr><operator>%</operator><name>r14</name>
    <name>je</name> <name>crosspage_store_</name><operator>\</operator><name>id</name>
<name>back_write_done_</name><operator>\</operator><name>id</name> <operator>:</operator>
<operator>.</operator><name>pushsection_bullshit</name>
<name>crosspage_store_</name><operator>\</operator><name>id</name> <operator>:</operator>
    <name>movq</name> <call><name>$</name><argument_list>(<argument><expr><operator>\</operator><name>size</name><operator>/</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><operator>%</operator><name>r14</name>
    <name>call</name> <name>crosspage_store</name>
    <name>jmp</name> <name>back_write_done_</name><operator>\</operator><name><name>id</name>
<operator>.</operator><name>popsection</name>
<operator>.</operator><name>endm</name>

<operator>.</operator><name>macro</name></name> <name>_invoke</name> <name>size</name></expr><operator>,</operator> <expr><name>reg</name></expr><operator>,</operator> <expr><name>post</name></expr><operator>,</operator> <expr><name>macro</name><operator>:</operator><name><name>vararg</name>
    <operator>.</operator><name/></name>if <operator>\</operator><name>size</name> <operator>==</operator> <literal type="number">32</literal>
        <operator>\</operator><name>macro</name> <name>reg_</name><operator>\</operator><name>reg</name></expr><operator>,</operator> <expr><name>e</name><operator>\</operator><name>reg</name><operator>\</operator><name><name>post</name>
    <operator>.</operator><name/></name>else
        <operator>\</operator><name>macro</name> <name>reg_</name><operator>\</operator><name>reg</name></expr><operator>,</operator> <expr><operator>\</operator><name>reg</name><operator>\</operator><name><name>post</name>
    <operator>.</operator><name>endif</name>
<operator>.</operator><name>endm</name>
<operator>.</operator><name>macro</name> <operator>.</operator><name>each_reg_size</name></name> <name>size</name></expr><operator>,</operator> <expr><name>macro</name><operator>:</operator><name><name>vararg</name>
    <operator>.</operator><name>irp</name></name> <name>reg</name></expr><operator>,</operator> <expr><name>a</name></expr><operator>,</operator><expr><name>b</name></expr><operator>,</operator><expr><name>c</name></expr><operator>,</operator><expr><name>d</name>
        <name>_invoke</name> <operator>\</operator><name>size</name></expr><operator>,</operator> <expr><operator>\</operator><name>reg</name></expr><operator>,</operator> <expr><name>x</name></expr><operator>,</operator> <expr><operator>\</operator><name><name>macro</name>
    <operator>.</operator><name>endr</name>
    <operator>.</operator><name>irp</name></name> <name>reg</name></expr><operator>,</operator> <expr><name>si</name></expr><operator>,</operator><expr><name>di</name></expr><operator>,</operator><expr><name>bp</name>
        <name>_invoke</name> <operator>\</operator><name>size</name></expr><operator>,</operator> <expr><operator>\</operator><name>reg</name></expr><operator>,</operator> <operator>,</operator> <expr><operator>\</operator><name><name>macro</name>
    <operator>.</operator><name>endr</name>
    <operator>.</operator><name/></name>if <operator>\</operator><name>size</name> <operator>==</operator> <literal type="number">32</literal>
        <operator>\</operator><name>macro</name> <name>reg_sp</name></expr><operator>,</operator> <expr><name><name>_esp</name>
    <operator>.</operator><name/></name>else
        <operator>\</operator><name>macro</name> <name>reg_sp</name></expr><operator>,</operator> <expr><name><name>_sp</name>
    <operator>.</operator><name>endif</name>
<operator>.</operator><name>endm</name>
<operator>.</operator><name>macro</name> <operator>.</operator><name>each_reg</name></name> <name>macro</name><operator>:</operator><name><name>vararg</name>
    <operator>.</operator><name>each_reg_size</name></name> <literal type="number">32</literal></expr><operator>,</operator> <expr><operator>\</operator><name><name>macro</name>
<operator>.</operator><name>endm</name>

<operator>.</operator><name>macro</name></name> <name>ss</name> <name>size</name></expr><operator>,</operator> <expr><name>macro</name></expr><operator>,</operator> <expr><name>args</name><operator>:</operator><name><name>vararg</name>
    <operator>.</operator><name>ifnb</name></name> <operator>\</operator><name><name>args</name>
        <operator>.</operator><name/></name>if <operator>\</operator><name>size</name> <operator>==</operator> <literal type="number">8</literal>
            <operator>\</operator><name>macro</name> <operator>\</operator><name>args</name></expr><operator>,</operator> <expr><operator>\</operator><name>size</name></expr><operator>,</operator> <expr><name>b</name></expr><operator>,</operator> <expr><name><name>b</name>
        <operator>.</operator><name>elseif</name></name> <operator>\</operator><name>size</name> <operator>==</operator> <literal type="number">16</literal>
            <operator>\</operator><name>macro</name> <operator>\</operator><name>args</name></expr><operator>,</operator> <expr><operator>\</operator><name>size</name></expr><operator>,</operator> <expr><name>w</name></expr><operator>,</operator> <expr><name><name>w</name>
        <operator>.</operator><name>elseif</name></name> <operator>\</operator><name>size</name> <operator>==</operator> <literal type="number">32</literal>
            <operator>\</operator><name>macro</name> <operator>\</operator><name>args</name></expr><operator>,</operator> <expr><operator>\</operator><name>size</name></expr><operator>,</operator> <expr><name>d</name></expr><operator>,</operator> <expr><name><name>l</name>
        <operator>.</operator><name/></name>else
            <operator>.</operator><name>error</name> <literal type="string">"bad size"</literal>
        <operator>.</operator><name><name>endif</name>
    <operator>.</operator><name/></name>else
        <operator>.</operator></expr></expr_stmt><if_stmt><if>if \size == 8
            \macro \size<operator>,</operator> <expr_stmt><expr><name>b</name></expr><operator>,</operator> <expr><name><name>b</name>
        <operator>.</operator><name>elseif</name></name> <operator>\</operator><name>size</name> <operator>==</operator> <literal type="number">16</literal>
            <operator>\</operator><name>macro</name> <operator>\</operator><name>size</name></expr><operator>,</operator> <expr><name>w</name></expr><operator>,</operator> <expr><name><name>w</name>
        <operator>.</operator><name>elseif</name></name> <operator>\</operator><name>size</name> <operator>==</operator> <literal type="number">32</literal>
            <operator>\</operator><name>macro</name> <operator>\</operator><name>size</name></expr><operator>,</operator> <expr><name>d</name></expr><operator>,</operator> <expr><name><name>l</name>
        <operator>.</operator><name/></name>else
            <operator>.</operator><name>error</name> <literal type="string">"bad size"</literal>
        <operator>.</operator><name><name>endif</name>
    <operator>.</operator><name>endif</name>
<operator>.</operator><name>endm</name>

<operator>.</operator><name>macro</name></name> <name>setf_c</name>
    <name>setc</name> <call><name>CPU_cf</name><argument_list>(<argument><expr><operator>%</operator><name>_cpu</name></expr></argument>)</argument_list></call>
<operator>.</operator><name><name>endm</name>
<operator>.</operator><name>macro</name></name> <name>setf_oc</name>
    <name>seto</name> <macro><name>CPU_of</name><argument_list>(<argument>%_cpu</argument>)</argument_list></macro>
    <name><name>setf_c</name>
<operator>.</operator><name>endm</name>
<operator>.</operator><name>macro</name></name> <name>setf_a</name> <name>src</name></expr><operator>,</operator> <expr><name>dst</name></expr><operator>,</operator> <expr><name>ss</name>
    <name>mov</name><operator>\</operator><name>ss</name> <operator>\</operator><name>src</name></expr><operator>,</operator> <macro><name>CPU_op1</name><argument_list>(<argument>%_cpu</argument>)</argument_list></macro>
    <expr><name>mov</name><operator>\</operator><name>ss</name> <operator>\</operator><name>dst</name></expr><operator>,</operator> <macro><name>CPU_op2</name><argument_list>(<argument>%_cpu</argument>)</argument_list></macro>
    <expr><name>orl</name> <name>$AF_OPS</name></expr><operator>,</operator> <expr><call><name>CPU_flags_res</name><argument_list>(<argument><expr><operator>%</operator><name>_cpu</name></expr></argument>)</argument_list></call>
<operator>.</operator><name><name>endm</name>
<operator>.</operator><name>macro</name></name> <name>clearf_a</name>
    <name>andl</name> <name>$</name><operator>~</operator><name>AF_FLAG</name></expr><operator>,</operator> <macro><name>CPU_eflags</name><argument_list>(<argument>%_cpu</argument>)</argument_list></macro>
    <expr><name>andl</name> <name>$</name><operator>~</operator><name>AF_OPS</name></expr><operator>,</operator> <expr><call><name>CPU_flags_res</name><argument_list>(<argument><expr><operator>%</operator><name>_cpu</name></expr></argument>)</argument_list></call>
<operator>.</operator><name><name>endm</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__APPLE__</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOLLAR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>$$x</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOLLAR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>$x</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>.</operator><name>macro</name></name> <name>clearf_oc</name>
    <name>movl</name> <call><name>DOLLAR</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>CPU_of</name><argument_list>(<argument>%_cpu</argument>)</argument_list></macro>
    <expr><name>movl</name> <call><name>DOLLAR</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>CPU_cf</name><argument_list>(<argument><expr><operator>%</operator><name>_cpu</name></expr></argument>)</argument_list></call>
<operator>.</operator><name><name>endm</name>
<operator>.</operator><name>macro</name></name> <name>setf_zsp</name> <name>res</name></expr><operator>,</operator> <expr><name><name>ss</name>
    <operator>.</operator><name>ifnc</name></name> <operator>\</operator><name>ss</name></expr><operator>,</operator><expr><name>l</name>
        <name>movs</name><operator>\</operator><name>ss</name><operator>\</operator><operator>(</operator><operator>)</operator><name>l</name> <operator>\</operator><name>res</name></expr><operator>,</operator> <expr><operator>%</operator><name><name>_tmp</name>
    <operator>.</operator><name>endif</name></name>
    <name>movl</name> <operator>%</operator><name>_tmp</name></expr><operator>,</operator> <macro><name>CPU_res</name><argument_list>(<argument>%_cpu</argument>)</argument_list></macro>
    <expr><name>orl</name> <call><name>$</name><argument_list>(<argument><expr><name>ZF_RES</name><operator>|</operator><name>SF_RES</name><operator>|</operator><name>PF_RES</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>CPU_flags_res</name><argument_list>(<argument><expr><operator>%</operator><name>_cpu</name></expr></argument>)</argument_list></call>
<operator>.</operator><name><name>endm</name>

<operator>.</operator><name>macro</name></name> <name>save_c</name> <name>odd</name>
    <name>push</name> <operator>%</operator><name>rax</name>
    <name>push</name> <operator>%</operator><name>rcx</name>
    <name>push</name> <operator>%</operator><name>rdx</name>
    <name>push</name> <operator>%</operator><name>rsi</name>
    <name>push</name> <operator>%</operator><name>rdi</name>
    <name>push</name> <operator>%</operator><name>r8</name>
    <name>push</name> <operator>%</operator><name>r9</name>
    <name>push</name> <operator>%</operator><name>r10</name>
    <name>push</name> <operator>%</operator><name><name>r11</name>
    <operator>.</operator><name>ifnc</name></name> <operator>\</operator><name>odd</name></expr><operator>,</operator><expr><name>odd</name>
        <name>sub</name> <name>$8</name></expr><operator>,</operator> <expr><operator>%</operator><name>rsp</name> <operator>#</operator> <literal type="number">16</literal> <name>byte</name> <name>alignment</name> <name>is</name> <name>so</name> <name><name>annoying</name>
    <operator>.</operator><name>endif</name>
<operator>.</operator><name>endm</name>
<operator>.</operator><name>macro</name></name> <name>restore_c</name> <name><name>odd</name>
    <operator>.</operator><name>ifnc</name></name> <operator>\</operator><name>odd</name></expr><operator>,</operator><expr><name>odd</name>
        <name>add</name> <name>$8</name></expr><operator>,</operator> <expr><operator>%</operator><name><name>rsp</name>
    <operator>.</operator><name>endif</name></name>
    <name>pop</name> <operator>%</operator><name>r11</name>
    <name>pop</name> <operator>%</operator><name>r10</name>
    <name>pop</name> <operator>%</operator><name>r9</name>
    <name>pop</name> <operator>%</operator><name>r8</name>
    <name>pop</name> <operator>%</operator><name>rdi</name>
    <name>pop</name> <operator>%</operator><name>rsi</name>
    <name>pop</name> <operator>%</operator><name>rdx</name>
    <name>pop</name> <operator>%</operator><name>rcx</name>
    <name>pop</name> <operator>%</operator><name><name>rax</name>
<operator>.</operator><name>endm</name>

<operator>.</operator><name>macro</name></name> <name>load_regs</name>
    <name>movl</name> <call><name>CPU_eax</name><argument_list>(<argument><expr><operator>%</operator><name>_cpu</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><operator>%</operator><name>eax</name>
    <name>movl</name> <call><name>CPU_ebx</name><argument_list>(<argument><expr><operator>%</operator><name>_cpu</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><operator>%</operator><name>ebx</name>
    <name>movl</name> <call><name>CPU_ecx</name><argument_list>(<argument><expr><operator>%</operator><name>_cpu</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><operator>%</operator><name>ecx</name>
    <name>movl</name> <call><name>CPU_edx</name><argument_list>(<argument><expr><operator>%</operator><name>_cpu</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><operator>%</operator><name>edx</name>
    <name>movl</name> <call><name>CPU_esi</name><argument_list>(<argument><expr><operator>%</operator><name>_cpu</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><operator>%</operator><name>esi</name>
    <name>movl</name> <call><name>CPU_edi</name><argument_list>(<argument><expr><operator>%</operator><name>_cpu</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><operator>%</operator><name>edi</name>
    <name>movl</name> <call><name>CPU_ebp</name><argument_list>(<argument><expr><operator>%</operator><name>_cpu</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><operator>%</operator><name>ebp</name>
    <name>movl</name> <call><name>CPU_esp</name><argument_list>(<argument><expr><operator>%</operator><name>_cpu</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><operator>%</operator><name><name>_esp</name>
<operator>.</operator><name>endm</name>

<operator>.</operator><name>macro</name></name> <name>save_regs</name>
    <name>movl</name> <operator>%</operator><name>eax</name></expr><operator>,</operator> <macro><name>CPU_eax</name><argument_list>(<argument>%_cpu</argument>)</argument_list></macro>
    <expr><name>movl</name> <operator>%</operator><name>ebx</name></expr><operator>,</operator> <macro><name>CPU_ebx</name><argument_list>(<argument>%_cpu</argument>)</argument_list></macro>
    <expr><name>movl</name> <operator>%</operator><name>ecx</name></expr><operator>,</operator> <macro><name>CPU_ecx</name><argument_list>(<argument>%_cpu</argument>)</argument_list></macro>
    <expr><name>movl</name> <operator>%</operator><name>edx</name></expr><operator>,</operator> <macro><name>CPU_edx</name><argument_list>(<argument>%_cpu</argument>)</argument_list></macro>
    <expr><name>movl</name> <operator>%</operator><name>esi</name></expr><operator>,</operator> <macro><name>CPU_esi</name><argument_list>(<argument>%_cpu</argument>)</argument_list></macro>
    <expr><name>movl</name> <operator>%</operator><name>edi</name></expr><operator>,</operator> <macro><name>CPU_edi</name><argument_list>(<argument>%_cpu</argument>)</argument_list></macro>
    <expr><name>movl</name> <operator>%</operator><name>ebp</name></expr><operator>,</operator> <macro><name>CPU_ebp</name><argument_list>(<argument>%_cpu</argument>)</argument_list></macro>
    <expr><name>movl</name> <operator>%</operator><name>_esp</name></expr><operator>,</operator> <expr><call><name>CPU_esp</name><argument_list>(<argument><expr><operator>%</operator><name>_cpu</name></expr></argument>)</argument_list></call>
<operator>.</operator><name>endm</name></expr></expr_stmt></if></if_stmt>

<cpp:empty># vim: ft=gas</cpp:empty>
</unit>
