<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/jit/gadgets-aarch64/gadgets.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../gadgets-generic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cpu-offsets.h"</cpp:file></cpp:include>

<cpp:empty># register assignments</cpp:empty>
<expr_stmt><expr><name><name>eax</name> <operator>.</operator><name>req</name></name> <name>w20</name>
<name><name>xax</name> <operator>.</operator><name>req</name></name> <name>x20</name>
<name><name>ebx</name> <operator>.</operator><name>req</name></name> <name>w21</name>
<name><name>ecx</name> <operator>.</operator><name>req</name></name> <name>w22</name>
<name><name>xcx</name> <operator>.</operator><name>req</name></name> <name>x22</name>
<name><name>edx</name> <operator>.</operator><name>req</name></name> <name>w23</name>
<name><name>xdx</name> <operator>.</operator><name>req</name></name> <name>x23</name>
<name><name>esi</name> <operator>.</operator><name>req</name></name> <name>w24</name>
<name><name>edi</name> <operator>.</operator><name>req</name></name> <name>w25</name>
<name><name>ebp</name> <operator>.</operator><name>req</name></name> <name>w26</name>
<name><name>esp</name> <operator>.</operator><name>req</name></name> <name>w27</name>
<name><name>_ip</name> <operator>.</operator><name>req</name></name> <name>x28</name>
<name><name>eip</name> <operator>.</operator><name>req</name></name> <name>w28</name>
<name><name>_tmp</name> <operator>.</operator><name>req</name></name> <name>w0</name>
<name><name>_xtmp</name> <operator>.</operator><name>req</name></name> <name>x0</name>
<name><name>_cpu</name> <operator>.</operator><name>req</name></name> <name>x1</name>
<name><name>_tlb</name> <operator>.</operator><name>req</name></name> <name>x2</name>
<name><name>_addr</name> <operator>.</operator><name>req</name></name> <name>w3</name>
<name><name>_xaddr</name> <operator>.</operator><name>req</name></name> <name><name>x3</name>

<operator>.</operator><name/></name>extern <name><name>jit_exit</name>

<operator>.</operator><name>macro</name> <operator>.</operator><name>gadget</name></name> <name><name>name</name>
    <operator>.</operator><name>global</name></name> <call><name>NAME</name><argument_list>(<argument><expr><name>gadget_</name><operator>\</operator><operator>(</operator><operator>)</operator><operator>\</operator><name>name</name></expr></argument>)</argument_list></call>
    <operator>.</operator><name>align</name> <literal type="number">4</literal>
    <call><name>NAME</name><argument_list>(<argument><expr><name>gadget_</name><operator>\</operator><operator>(</operator><operator>)</operator><operator>\</operator><name>name</name></expr></argument>)</argument_list></call> <operator>:</operator>
<operator>.</operator><name><name>endm</name>
<operator>.</operator><name>macro</name></name> <name>gret</name> <name>pop</name><operator>=</operator><literal type="number">0</literal>
    <name>ldr</name> <name>x8</name></expr><operator>,</operator> <expr><index>[<expr><name>_ip</name></expr><operator>,</operator> <operator>\</operator><name>pop</name><operator>*</operator><literal type="number">8</literal>]</index><operator>!</operator>
    <name>add</name> <name>_ip</name></expr><operator>,</operator> <expr><name>_ip</name></expr><operator>,</operator> <expr><literal type="number">8</literal> <comment type="block">/* TODO get rid of this */</comment>
    <name>br</name> <name><name>x8</name>
<operator>.</operator><name>endm</name>

<cpp:empty># memory reading and writing</cpp:empty>
<operator>.</operator><name>irp</name></name> <name>type</name></expr><operator>,</operator> <expr><name>read</name></expr><operator>,</operator><expr><name><name>write</name>

<operator>.</operator><name>macro</name></name> <operator>\</operator><name>type</name><operator>\</operator><operator>(</operator><operator>)</operator><name>_prep</name> <name>size</name></expr><operator>,</operator> <expr><name>id</name>
    <name>and</name> <name>w8</name></expr><operator>,</operator> <expr><name>_addr</name></expr><operator>,</operator> <expr><literal type="number">0xfff</literal>
    <name>cmp</name> <name>x8</name></expr><operator>,</operator> <expr><operator>(</operator><literal type="number">0x1000</literal><operator>-</operator><operator>(</operator><operator>\</operator><name>size</name><operator>/</operator><literal type="number">8</literal><operator>)</operator><operator>)</operator>
    <name><name>b</name><operator>.</operator><name>hi</name></name> <name>crosspage_load_</name><operator>\</operator><name>id</name>
    <name>and</name> <name>w8</name></expr><operator>,</operator> <expr><name>_addr</name></expr><operator>,</operator> <expr><literal type="number">0xfffff000</literal>
    <name>str</name> <name>w8</name></expr><operator>,</operator> <expr><index>[<expr><name>_tlb</name></expr><operator>,</operator> <operator>(</operator><operator>-</operator><name>TLB_entries</name><operator>+</operator><name>TLB_dirty_page</name><operator>)</operator>]</index>
    <name>ubfx</name> <name>x9</name></expr><operator>,</operator> <expr><name>_xaddr</name></expr><operator>,</operator> <expr><literal type="number">12</literal></expr><operator>,</operator> <expr><literal type="number">10</literal>
    <name>eor</name> <name>x9</name></expr><operator>,</operator> <expr><name>x9</name></expr><operator>,</operator> <expr><name>_xaddr</name></expr><operator>,</operator> <expr><name>lsr</name> <literal type="number">22</literal>
    <name>lsl</name> <name>x9</name></expr><operator>,</operator> <expr><name>x9</name></expr><operator>,</operator> <expr><literal type="number">4</literal>
    <name>add</name> <name>x9</name></expr><operator>,</operator> <expr><name>x9</name></expr><operator>,</operator> <expr><name><name>_tlb</name>
    <operator>.</operator><name>ifc</name></name> <operator>\</operator><name>type</name></expr><operator>,</operator><expr><name>read</name>
        <name>ldr</name> <name>w10</name></expr><operator>,</operator> <expr><index>[<expr><name>x9</name></expr><operator>,</operator> <name>TLB_ENTRY_page</name>]</index>
    <operator>.</operator></expr></expr_stmt><if_stmt><else>else<block type="pseudo"><block_content>
        <decl_stmt><decl><type><name>ldr</name></type> <name>w10</name></decl>, [<decl><type ref="prev"/><name>x9</name></decl>, <decl><type ref="prev"/><name>TLB_ENTRY_page_if_writable</name>]
    .<name>endif</name>
    <name>cmp</name> <name>w8</name></decl>, <decl><type ref="prev"/><name>w10</name>
    <name><name>b</name><operator>.</operator><name>ne</name></name> <name>handle_miss_</name>\<name>id</name>
    <name>ldr</name> <name>x10</name></decl>, [<decl><type ref="prev"/><name>x9</name></decl>, <decl><type ref="prev"/><name>TLB_ENTRY_data_minus_addr</name>]
    <name>add</name> <name>_xaddr</name></decl>, <decl><type ref="prev"/><name>x10</name></decl>, <decl><type ref="prev"/><name>_xaddr</name></decl>, <decl><type ref="prev"/><name>uxtx</name>
<name>back_</name>\<name>id</name><range>:
<expr><operator>.</operator><name><name>endm</name>

<operator>.</operator><name>macro</name></name> <operator>\</operator><name>type</name><operator>\</operator><operator>(</operator><operator>)</operator><name>_bullshit</name> <name>size</name></expr></range></decl>, <decl><type ref="prev"/><name>id</name>
<name>handle_miss_</name>\<name>id</name> <range>:
    <expr><name>bl</name> <name>handle_</name><operator>\</operator><name>type</name><operator>\</operator><operator>(</operator><operator>)</operator><name>_miss</name>
    <name>b</name> <name>back_</name><operator>\</operator><name>id</name>
<name>crosspage_load_</name><operator>\</operator><name>id</name> <operator>:</operator>
    <name>mov</name> <name>x19</name></expr></range></decl>, <argument_list>(<argument><expr><operator>\</operator><name>size</name><operator>/</operator><literal type="number">8</literal></expr></argument>)</argument_list>
    <decl><type ref="prev"/><name>bl</name> <name>crosspage_load</name>
    <name>b</name> <name>back_</name>\<name><name>id</name>
<operator>.</operator><name>ifc</name></name> \<name>type</name></decl>,<decl><type ref="prev"/><name>write</name>
<name>crosspage_store_</name>\<name>id</name> <range>:
    <expr><name>mov</name> <name>x19</name></expr></range></decl>, <argument_list>(<argument><expr><operator>\</operator><name>size</name><operator>/</operator><literal type="number">8</literal></expr></argument>)</argument_list>
    <decl><type ref="prev"/><name>bl</name> <name>crosspage_store</name>
    <name>b</name> <name>back_write_done_</name>\<name><name>id</name>
<operator>.</operator><name>endif</name>
<operator>.</operator><name>endm</name>

<operator>.</operator><name>endr</name>
<operator>.</operator><name>macro</name></name> <name>write_done</name> <name>size</name></decl>, <decl><type ref="prev"/><name>id</name>
    <name>add</name> <name>x8</name></decl>, <decl><type ref="prev"/><name>_cpu</name></decl>, <decl><type ref="prev"/><name>LOCAL_value</name>
    <name>cmp</name> <name>x8</name></decl>, <decl><type ref="prev"/><name>_xaddr</name>
    <name><name>b</name><operator>.</operator><name>eq</name></name> <name>crosspage_store_</name>\<name>id</name>
<name>back_write_done_</name>\<name>id</name> <range>:
<expr><operator>.</operator><name><name>endm</name>

<operator>.</operator><name>macro</name> <operator>.</operator><name>each_reg</name></name> <name>macro</name><operator>:</operator><name>vararg</name>
    <operator>\</operator><name>macro</name> <name>reg_a</name></expr></range></decl>, <decl><type ref="prev"/><name>eax</name>
    \<name>macro</name> <name>reg_b</name></decl>, <decl><type ref="prev"/><name>ebx</name>
    \<name>macro</name> <name>reg_c</name></decl>, <decl><type ref="prev"/><name>ecx</name>
    \<name>macro</name> <name>reg_d</name></decl>, <decl><type ref="prev"/><name>edx</name>
    \<name>macro</name> <name>reg_si</name></decl>, <decl><type ref="prev"/><name>esi</name>
    \<name>macro</name> <name>reg_di</name></decl>, <decl><type ref="prev"/><name>edi</name>
    \<name>macro</name> <name>reg_bp</name></decl>, <decl><type ref="prev"/><name>ebp</name>
    \<name>macro</name> <name>reg_sp</name></decl>, <decl><type ref="prev"/><name><name>esp</name>
<operator>.</operator><name>endm</name>

<operator>.</operator><name>macro</name></name> <name>ss</name> <name>size</name></decl>, <decl><type ref="prev"/><name>macro</name></decl>, <decl><type ref="prev"/><name>args</name><range>:<expr><name><name>vararg</name>
    <operator>.</operator><name>ifnb</name></name> <operator>\</operator><name><name>args</name>
        <operator>.</operator><name/></name>if <operator>\</operator><name>size</name> <operator>==</operator> <literal type="number">8</literal>
            <operator>\</operator><name>macro</name> <operator>\</operator><name>args</name></expr></range></decl>, \<decl><type ref="prev"/><name>size</name></decl>, <decl><type ref="prev"/><name><name>b</name>
        <operator>.</operator><name>elseif</name></name> \<name>size</name> == 16
            \<name>macro</name> \<name>args</name></decl>, \<decl><type ref="prev"/><name>size</name></decl>, <decl><type ref="prev"/><name><name>h</name>
        <operator>.</operator><name>elseif</name></name> \<name>size</name> == 32
            \<name>macro</name> \<name>args</name></decl>, \<decl><type ref="prev"/><name>size</name></decl>,
        .else
            .<decl><type ref="prev"/><name>error</name> "bad size"
        .<name><name>endif</name>
    <operator>.</operator><name/></name>else
        .if \<name>size</name> == 8
            \<name>macro</name> \<name>size</name></decl>, <decl><type ref="prev"/><name><name>b</name>
        <operator>.</operator><name>elseif</name></name> \<name>size</name> == 16
            \<name>macro</name> \<name>size</name></decl>, <decl><type ref="prev"/><name><name>h</name>
        <operator>.</operator><name>elseif</name></name> \<name>size</name> == 32
            \<name>macro</name> \<name>size</name></decl>,
        .else
            .<decl><type ref="prev"/><name>error</name> "bad size"
        .<name><name>endif</name>
    <operator>.</operator><name>endif</name>
<operator>.</operator><name>endm</name>

<operator>.</operator><name>macro</name></name> <name>setf_c</name>
    <name>cset</name> <name>w10</name></decl>, <decl><type ref="prev"/><name>cc</name>
    <name>strb</name> <name>w10</name></decl>, [<decl><type ref="prev"/><name>_cpu</name></decl>, <decl><type ref="prev"/><name>CPU_cf</name>]
.<name><name>endm</name>
<operator>.</operator><name>macro</name></name> <name>setf_oc</name>
    <name>cset</name> <name>w10</name></decl>, <decl><type ref="prev"/><name>vs</name>
    <name>strb</name> <name>w10</name></decl>, [<decl><type ref="prev"/><name>_cpu</name></decl>, <decl><type ref="prev"/><name>CPU_of</name>]
    <name><name>setf_c</name>
<operator>.</operator><name>endm</name>
<operator>.</operator><name>macro</name></name> <name>setf_a</name> <name>src</name></decl>, <decl><type ref="prev"/><name>dst</name>
    <name>str</name> \<name>src</name></decl>, [<decl><type ref="prev"/><name>_cpu</name></decl>, <decl><type ref="prev"/><name>CPU_op1</name>]
    <name>str</name> \<name>dst</name></decl>, [<decl><type ref="prev"/><name>_cpu</name></decl>, <decl><type ref="prev"/><name>CPU_op2</name>]
    <name>ldr</name> <name>w10</name></decl>, [<decl><type ref="prev"/><name>_cpu</name></decl>, <decl><type ref="prev"/><name>CPU_flags_res</name>]
    <name>orr</name> <name>w10</name></decl>, <decl><type ref="prev"/><name>w10</name></decl>, <decl><type ref="prev"/><name>AF_OPS</name>
    <name>str</name> <name>w10</name></decl>, [<decl><type ref="prev"/><name>_cpu</name></decl>, <decl><type ref="prev"/><name>CPU_flags_res</name>]
.<name><name>endm</name>
<operator>.</operator><name>macro</name></name> <name>clearf_a</name>
    <name>ldr</name> <name>w10</name></decl>, [<decl><type ref="prev"/><name>_cpu</name></decl>, <decl><type ref="prev"/><name>CPU_eflags</name>]
    <name>ldr</name> <name>w11</name></decl>, [<decl><type ref="prev"/><name>_cpu</name></decl>, <decl><type ref="prev"/><name>CPU_flags_res</name>]
    <name>bic</name> <name>w10</name></decl>, <decl><type ref="prev"/><name>w10</name></decl>, <decl><type ref="prev"/><name>AF_FLAG</name>
    <name>bic</name> <name>w11</name></decl>, <decl><type ref="prev"/><name>w11</name></decl>, <decl><type ref="prev"/><name>AF_OPS</name>
    <name>str</name> <name>w10</name></decl>, [<decl><type ref="prev"/><name>_cpu</name></decl>, <decl><type ref="prev"/><name>CPU_eflags</name>]
    <name>str</name> <name>w11</name></decl>, [<decl><type ref="prev"/><name>_cpu</name></decl>, <decl><type ref="prev"/><name>CPU_flags_res</name>]
.<name><name>endm</name>
<operator>.</operator><name>macro</name></name> <name>clearf_oc</name>
    <name>strb</name> <name>wzr</name></decl>, [<decl><type ref="prev"/><name>_cpu</name></decl>, <decl><type ref="prev"/><name>CPU_of</name>]
    <name>strb</name> <name>wzr</name></decl>, [<decl><type ref="prev"/><name>_cpu</name></decl>, <decl><type ref="prev"/><name>CPU_cf</name>]
.<name><name>endm</name>
<operator>.</operator><name>macro</name></name> <name>setf_zsp</name> <name>s</name></decl>, <decl><type ref="prev"/><name>val</name><init>=<expr><name><name>_tmp</name>
    <operator>.</operator><name>ifnb</name></name> <operator>\</operator><name>s</name>
        <name>sxt</name><operator>\</operator><name>s</name> <operator>\</operator><name>val</name></expr></init></decl>, \<decl><type ref="prev"/><name><name>val</name>
    <operator>.</operator><name>endif</name></name>
    <name>str</name> \<name>val</name></decl>, [<decl><type ref="prev"/><name>_cpu</name></decl>, <decl><type ref="prev"/><name>CPU_res</name>]
    <name>ldr</name> <name>w10</name></decl>, [<decl><type ref="prev"/><name>_cpu</name></decl>, <decl><type ref="prev"/><name>CPU_flags_res</name>]
    <name>orr</name> <name>w10</name></decl>, <decl><type ref="prev"/><name>w10</name></decl>, <argument_list>(<argument><expr><name>ZF_RES</name><operator>|</operator><name>SF_RES</name><operator>|</operator><name>PF_RES</name></expr></argument>)</argument_list>
    <decl><type ref="prev"/><name>str</name> <name>w10</name></decl>, [<decl><type ref="prev"/><name>_cpu</name></decl>, <decl><type ref="prev"/><name>CPU_flags_res</name>]
.<name><name>endm</name>

<operator>.</operator><name>macro</name></name> <name>save_c</name>
    <name>stp</name> <name>x0</name></decl>, <decl><type ref="prev"/><name>x1</name></decl>, [<decl><type ref="prev"/><name>sp</name></decl>, -0x60]!
    <decl><type ref="prev"/><name>stp</name> <name>x2</name></decl>, <decl><type ref="prev"/><name>x3</name></decl>, [<decl><type ref="prev"/><name>sp</name></decl>, 0x10]
    <decl><type ref="prev"/><name>stp</name> <name>x8</name></decl>, <decl><type ref="prev"/><name>x9</name></decl>, [<decl><type ref="prev"/><name>sp</name></decl>, 0x20]
    <decl><type ref="prev"/><name>stp</name> <name>x10</name></decl>, <decl><type ref="prev"/><name>x11</name></decl>, [<decl><type ref="prev"/><name>sp</name></decl>, 0x30]
    <decl><type ref="prev"/><name>stp</name> <name>x12</name></decl>, <decl><type ref="prev"/><name>x13</name></decl>, [<decl><type ref="prev"/><name>sp</name></decl>, 0x40]
    <decl><type ref="prev"/><name>str</name> <name>lr</name></decl>, [<decl><type ref="prev"/><name>sp</name></decl>, 0x50]
.<decl><type ref="prev"/><name><name>endm</name>
<operator>.</operator><name>macro</name></name> <name>restore_c</name>
    <name>ldr</name> <name>lr</name></decl>, [<decl><type ref="prev"/><name>sp</name></decl>, 0x50]
    <decl><type ref="prev"/><name>ldp</name> <name>x12</name></decl>, <decl><type ref="prev"/><name>x13</name></decl>, [<decl><type ref="prev"/><name>sp</name></decl>, 0x40]
    <decl><type ref="prev"/><name>ldp</name> <name>x10</name></decl>, <decl><type ref="prev"/><name>x11</name></decl>, [<decl><type ref="prev"/><name>sp</name></decl>, 0x30]
    <decl><type ref="prev"/><name>ldp</name> <name>x8</name></decl>, <decl><type ref="prev"/><name>x9</name></decl>, [<decl><type ref="prev"/><name>sp</name></decl>, 0x20]
    <decl><type ref="prev"/><name>ldp</name> <name>x2</name></decl>, <decl><type ref="prev"/><name>x3</name></decl>, [<decl><type ref="prev"/><name>sp</name></decl>, 0x10]
    <decl><type ref="prev"/><name>ldp</name> <name>x0</name></decl>, <decl><type ref="prev"/><name>x1</name></decl>, [<decl><type ref="prev"/><name>sp</name>]</decl>, 0x60
.<decl><type ref="prev"/><name><name>endm</name>

<operator>.</operator><name>macro</name></name> <name>movs</name> <name>dst</name></decl>, <decl><type ref="prev"/><name>src</name></decl>, <decl><type ref="prev"/><name><name>s</name>
    <operator>.</operator><name>ifc</name></name> \<name>s</name></decl>,<decl><type ref="prev"/><name>h</name>
        <name>bfxil</name> \<name>dst</name></decl>, \<decl><type ref="prev"/><name>src</name></decl>, 0, 16
    .else <decl><type ref="prev"/><name><name>N</name> <operator>.</operator><name>ifc</name></name> \<name>s</name></decl>,<decl><type ref="prev"/><name>b</name>
        <name>bfxil</name> \<name>dst</name></decl>, \<decl><type ref="prev"/><name>src</name></decl>, 0, 8
    .else
        <decl><type ref="prev"/><name>mov</name> \<name>dst</name></decl>, \<decl><type ref="prev"/><name><name>src</name>
    <operator>.</operator><name>endif</name></name> <name><name>N</name> <operator>.</operator><name>endif</name>
<operator>.</operator><name>endm</name>
<operator>.</operator><name>macro</name></name> <name>op_s</name> <name>op</name></decl>, <decl><type ref="prev"/><name>dst</name></decl>, <decl><type ref="prev"/><name>src1</name></decl>, <decl><type ref="prev"/><name>src2</name></decl>, <decl><type ref="prev"/><name><name>s</name>
    <operator>.</operator><name>ifb</name></name> \<name>s</name>
        \<name>op</name> \<name>dst</name></decl>, \<decl><type ref="prev"/><name>src1</name></decl>, \<decl><type ref="prev"/><name><name>src2</name>
    <operator>.</operator><name/></name>else
        <name>movs</name> <name>w10</name></decl>, \<decl><type ref="prev"/><name>dst</name></decl>, \<decl><type ref="prev"/><name>s</name>
        \<name>op</name> <name>w10</name></decl>, \<decl><type ref="prev"/><name>src1</name></decl>, \<decl><type ref="prev"/><name>src2</name>
        <name>movs</name> \<name>dst</name></decl>, <decl><type ref="prev"/><name>w10</name></decl>, \<decl><type ref="prev"/><name><name>s</name>
    <operator>.</operator><name>endif</name>
<operator>.</operator><name>endm</name>
<operator>.</operator><name>macro</name></name> <name>ldrs</name> <name>src</name></decl>, <decl><type ref="prev"/><name>dst</name></decl>, <decl><type ref="prev"/><name>s</name>
    <name>ldr</name>\<name>s</name> <name>w10</name></decl>, \<decl><type ref="prev"/><name>dst</name>
    <name>movs</name> \<name>src</name></decl>, <decl><type ref="prev"/><name>w10</name></decl>, \<decl><type ref="prev"/><name><name>s</name>
<operator>.</operator><name>endm</name>

<operator>.</operator><name>macro</name></name> <name>uxts</name> <name>dst</name></decl>, <decl><type ref="prev"/><name>src</name></decl>, <decl><type ref="prev"/><name>s</name><init>=
    <expr><operator>.</operator><name>ifnb</name> <operator>\</operator><name>s</name>
        <name>uxt</name><operator>\</operator><name>s</name> <operator>\</operator><name>dst</name></expr></init></decl>, \<decl><type ref="prev"/><name><name>src</name>
        <operator>.</operator><name>exitm</name>
    <operator>.</operator><name>endif</name>
    <operator>.</operator><name>ifnc</name></name> \<name>dst</name></decl>,\<decl><type ref="prev"/><name>src</name>
        <name>mov</name> \<name>dst</name></decl>, \<decl><type ref="prev"/><name><name>src</name>
    <operator>.</operator><name>endif</name>
<operator>.</operator><name>endm</name>

<operator>.</operator><name>macro</name></name> <name>load_regs</name>
    <name>ldr</name> <name>eax</name></decl>, [<decl><type ref="prev"/><name>_cpu</name></decl>, <decl><type ref="prev"/><name>CPU_eax</name>]
    <name>ldr</name> <name>ebx</name></decl>, [<decl><type ref="prev"/><name>_cpu</name></decl>, <decl><type ref="prev"/><name>CPU_ebx</name>]
    <name>ldr</name> <name>ecx</name></decl>, [<decl><type ref="prev"/><name>_cpu</name></decl>, <decl><type ref="prev"/><name>CPU_ecx</name>]
    <name>ldr</name> <name>edx</name></decl>, [<decl><type ref="prev"/><name>_cpu</name></decl>, <decl><type ref="prev"/><name>CPU_edx</name>]
    <name>ldr</name> <name>esi</name></decl>, [<decl><type ref="prev"/><name>_cpu</name></decl>, <decl><type ref="prev"/><name>CPU_esi</name>]
    <name>ldr</name> <name>edi</name></decl>, [<decl><type ref="prev"/><name>_cpu</name></decl>, <decl><type ref="prev"/><name>CPU_edi</name>]
    <name>ldr</name> <name>ebp</name></decl>, [<decl><type ref="prev"/><name>_cpu</name></decl>, <decl><type ref="prev"/><name>CPU_ebp</name>]
    <name>ldr</name> <name>esp</name></decl>, [<decl><type ref="prev"/><name>_cpu</name></decl>, <decl><type ref="prev"/><name>CPU_esp</name>]
.<name><name>endm</name>

<operator>.</operator><name>macro</name></name> <name>save_regs</name>
    <name>str</name> <name>eax</name></decl>, [<decl><type ref="prev"/><name>_cpu</name></decl>, <decl><type ref="prev"/><name>CPU_eax</name>]
    <name>str</name> <name>ebx</name></decl>, [<decl><type ref="prev"/><name>_cpu</name></decl>, <decl><type ref="prev"/><name>CPU_ebx</name>]
    <name>str</name> <name>ecx</name></decl>, [<decl><type ref="prev"/><name>_cpu</name></decl>, <decl><type ref="prev"/><name>CPU_ecx</name>]
    <name>str</name> <name>edx</name></decl>, [<decl><type ref="prev"/><name>_cpu</name></decl>, <decl><type ref="prev"/><name>CPU_edx</name>]
    <name>str</name> <name>edi</name></decl>, [<decl><type ref="prev"/><name>_cpu</name></decl>, <decl><type ref="prev"/><name>CPU_edi</name>]
    <name>str</name> <name>esi</name></decl>, [<decl><type ref="prev"/><name>_cpu</name></decl>, <decl><type ref="prev"/><name>CPU_esi</name>]
    <name>str</name> <name>ebp</name></decl>, [<decl><type ref="prev"/><name>_cpu</name></decl>, <decl><type ref="prev"/><name>CPU_ebp</name>]
    <name>str</name> <name>esp</name></decl>, [<decl><type ref="prev"/><name>_cpu</name></decl>, <decl><type ref="prev"/><name>CPU_esp</name>]
    <name>str</name> <name>eip</name></decl>, [<decl><type ref="prev"/><name>_cpu</name></decl>, <decl><type ref="prev"/><name>CPU_eip</name>]
.<name>endm</name></decl></decl_stmt></block_content></block></else></if_stmt>

<cpp:empty># vim: ft=gas</cpp:empty>
</unit>
