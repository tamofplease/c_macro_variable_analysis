<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../out/cloned_projects/ish/jit/gadgets-aarch64/math.h"><expr_stmt><expr><operator>.</operator><name>macro</name> <name>do_add</name> <name>op</name></expr><operator>,</operator> <expr><name>dst</name></expr><operator>,</operator> <expr><name>src</name></expr><operator>,</operator> <expr><name><name>s</name>
    <cpp:empty># setting flags: a horror story</cpp:empty>
    <operator>.</operator><name>ifb</name></name> <operator>\</operator><name>s</name>
        <cpp:empty># for 32-bit operands, we can just do the operation and the chip</cpp:empty>
        <cpp:empty># will set v and c right, which we copy</cpp:empty>
        <operator>\</operator><name>op</name><operator>\</operator><operator>(</operator><operator>)</operator><name>s</name> <operator>\</operator><name>dst</name></expr><operator>,</operator> <expr><operator>\</operator><name>dst</name></expr><operator>,</operator> <expr><operator>\</operator><name>src</name>
        <name>cset</name> <name>w10</name></expr><operator>,</operator> <expr><name>vs</name>
        <name>strb</name> <name>w10</name></expr><operator>,</operator> <expr><index>[<expr><name>_cpu</name></expr><operator>,</operator> <name>CPU_of</name>]</index>
        <operator>.</operator><macro><name>ifin</name><argument_list>(<argument>\op</argument>, <argument>add</argument>,<argument>adc</argument>)</argument_list></macro>
            <name>cset</name> <name>w10</name></expr><operator>,</operator> <macro><name>cs</name></macro>
        <expr><operator>.</operator><macro><name>endifin</name></macro>
        <operator>.</operator><macro><name>ifin</name><argument_list>(<argument>\op</argument>, <argument>sub</argument>,<argument>sbc</argument>)</argument_list></macro>
            <name>cset</name> <name>w10</name></expr><operator>,</operator> <expr><name><name>cc</name>
        <operator>.</operator><name>endifin</name></name>
        <name>strb</name> <name>w10</name></expr><operator>,</operator> <expr><index>[<expr><name>_cpu</name></expr><operator>,</operator> <name>CPU_cf</name>]</index>
    <operator>.</operator></expr></expr_stmt><if_stmt><else>else<block type="pseudo"><block_content>
        <cpp:empty># for 16 or 8 bit operands...</cpp:empty>
        <cpp:empty># first figure out unsigned overflow</cpp:empty>
        <expr_stmt><expr><name>uxt</name><operator>\</operator><name>s</name> <name>w10</name></expr><operator>,</operator> <expr><operator>\</operator><call><name><name>dst</name>
        <operator>.</operator><name>ifin</name></name><argument_list>(<argument><expr><operator>\</operator><name>op</name></expr></argument>, <argument><expr><name>add</name></expr></argument>,<argument><expr><name>sub</name></expr></argument>)</argument_list></call>
            <operator>\</operator><name>op</name> <name>w10</name></expr><operator>,</operator> <expr><name>w10</name></expr><operator>,</operator> <expr><operator>\</operator><name>src</name></expr><operator>,</operator> <expr><name>uxt</name><operator>\</operator><macro><name>s</name></macro>
        <operator>.</operator><macro><name>endifin</name></macro>
        <operator>.</operator><macro><name>ifin</name><argument_list>(<argument>\op</argument>, <argument>adc</argument>,<argument>sbc</argument>)</argument_list></macro>
            <name>uxt</name><operator>\</operator><name>s</name> <name>w9</name></expr><operator>,</operator> <expr><operator>\</operator><name>src</name>
            <operator>\</operator><name>op</name> <name>w10</name></expr><operator>,</operator> <expr><name>w10</name></expr><operator>,</operator> <expr><name><name>w9</name>
        <operator>.</operator><name>endifin</name>
        <operator>.</operator><name>ifc</name></name> <operator>\</operator><name>s</name></expr><operator>,</operator><expr><name>b</name>
            <name>lsr</name> <name>w10</name></expr><operator>,</operator> <expr><name>w10</name></expr><operator>,</operator> <expr><literal type="number">8</literal>
        <operator>.</operator></expr></expr_stmt></block_content></block></else><else>else<block type="pseudo"><block_content>
            <decl_stmt><decl><type><name>lsr</name></type> <name>w10</name></decl>, <decl><type ref="prev"/><name>w10</name></decl>, 16
        .<decl><type ref="prev"/><name>endif</name>
        <name>strb</name> <name>w10</name></decl>, [<decl><type ref="prev"/><name>_cpu</name></decl>, <decl><type ref="prev"/><name>CPU_cf</name>]
        <cpp:empty># now signed overflow</cpp:empty>
        <name>sxt</name>\<name>s</name> <name>w10</name></decl>, \<decl><type ref="prev"/><name><name>dst</name>
        <operator>.</operator><name>ifin</name></name><argument_list>(<argument><expr><operator>\</operator><name>op</name></expr></argument>, <argument><expr><name>add</name></expr></argument>,<argument><expr><name>sub</name></expr></argument>)</argument_list>
            \<name>op</name> \<name>dst</name></decl>, <decl><type ref="prev"/><name>w10</name></decl>, \<decl><type ref="prev"/><name>src</name></decl>, <decl><type ref="prev"/><name>sxt</name>\<name><name>s</name>
        <operator>.</operator><name>endifin</name>
        <operator>.</operator><name>ifin</name></name><argument_list>(<argument><expr><operator>\</operator><name>op</name></expr></argument>, <argument><expr><name>adc</name></expr></argument>,<argument><expr><name>sbc</name></expr></argument>)</argument_list>
            <cpp:empty># help me</cpp:empty>
            <name>sxt</name>\<name>s</name> <name>w9</name></decl>, \<decl><type ref="prev"/><name>src</name>
            \<name>op</name> \<name>dst</name></decl>, <decl><type ref="prev"/><name>w10</name></decl>, <decl><type ref="prev"/><name><name>w9</name>
        <operator>.</operator><name>endifin</name></name>
        <name>cmp</name> \<name>dst</name></decl>, \<decl><type ref="prev"/><name>dst</name></decl>, <decl><type ref="prev"/><name>sxt</name>\<name>s</name>
        <name>cset</name> <name>w10</name></decl>, <decl><type ref="prev"/><name>ne</name>
        <name>strb</name> <name>w10</name></decl>, [<decl><type ref="prev"/><name>_cpu</name></decl>, <decl><type ref="prev"/><name>CPU_of</name>]
    .<name><name>endif</name>
<operator>.</operator><name>endm</name></name></decl></decl_stmt></block_content></block></else></if_stmt>

<cpp:empty># vim: ft=gas</cpp:empty>
</unit>
