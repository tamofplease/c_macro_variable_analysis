<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/libmdbx/example/example-mdbx.c"><comment type="block">/* MDBX usage example
 *
 * Do a line-by-line comparison of this and sample-bdb.txt
 */</comment>

<comment type="block">/*
 * Copyright 2015-2022 Leonid Yuriev &lt;leo@yuriev.ru&gt;.
 * Copyright 2017 Ilya Shipitsin &lt;chipitsine@gmail.com&gt;.
 * Copyright 2012-2015 Howard Chu, Symas Corp.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted only as authorized by the OpenLDAP
 * Public License.
 *
 * A copy of this license is available in the file LICENSE in the
 * top-level directory of the distribution or, alternatively, at
 * &lt;http://www.OpenLDAP.org/license.html&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mdbx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>argc</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>argv</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MDBX_env</name> <modifier>*</modifier></type><name>env</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MDBX_dbi</name></type> <name>dbi</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MDBX_val</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>data</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MDBX_txn</name> <modifier>*</modifier></type><name>txn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MDBX_cursor</name> <modifier>*</modifier></type><name>cursor</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>sval</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"MDBX limits:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>UINTPTR_MAX</name> <operator>&gt;</operator> <literal type="number">0xffffFFFFul</literal> <operator>||</operator> <name>ULONG_MAX</name> <operator>&gt;</operator> <literal type="number">0xffffFFFFul</literal></expr></cpp:if>
  <decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>scale_factor</name> <init>= <expr><literal type="number">1099511627776.0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>scale_unit</name> <init>= <expr><literal type="string">"TiB"</literal></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>scale_factor</name> <init>= <expr><literal type="number">1073741824.0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>scale_unit</name> <init>= <expr><literal type="string">"GiB"</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>pagesize_min</name> <init>= <expr><call><name>mdbx_limits_pgsize_min</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>pagesize_max</name> <init>= <expr><call><name>mdbx_limits_pgsize_max</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>pagesize_default</name> <init>= <expr><call><name>mdbx_default_pagesize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\tPage size: a power of 2, minimum %zu, maximum %zu bytes,"</literal>
         <literal type="string">" default %zu bytes.\n"</literal></expr></argument>,
         <argument><expr><name>pagesize_min</name></expr></argument>, <argument><expr><name>pagesize_max</name></expr></argument>, <argument><expr><name>pagesize_default</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\tKey size: minimum %zu, maximum âÂ¼ pagesize (%zu bytes for default"</literal>
         <literal type="string">" %zuK pagesize, %zu bytes for %zuK pagesize).\n"</literal></expr></argument>,
         <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>mdbx_limits_keysize_max</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>MDBX_DB_DEFAULTS</name></expr></argument>)</argument_list></call></expr></argument>,
         <argument><expr><name>pagesize_default</name> <operator>/</operator> <literal type="number">1024</literal></expr></argument>,
         <argument><expr><call><name>mdbx_limits_keysize_max</name><argument_list>(<argument><expr><name>pagesize_max</name></expr></argument>, <argument><expr><name>MDBX_DB_DEFAULTS</name></expr></argument>)</argument_list></call></expr></argument>,
         <argument><expr><name>pagesize_max</name> <operator>/</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\tValue size: minimum %zu, maximum %zu (0x%08zX) bytes for maps,"</literal>
         <literal type="string">" âÂ¼ pagesize for multimaps (%zu bytes for default %zuK pagesize,"</literal>
         <literal type="string">" %zu bytes for %zuK pagesize).\n"</literal></expr></argument>,
         <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>mdbx_limits_valsize_max</name><argument_list>(<argument><expr><name>pagesize_min</name></expr></argument>, <argument><expr><name>MDBX_DB_DEFAULTS</name></expr></argument>)</argument_list></call></expr></argument>,
         <argument><expr><call><name>mdbx_limits_valsize_max</name><argument_list>(<argument><expr><name>pagesize_min</name></expr></argument>, <argument><expr><name>MDBX_DB_DEFAULTS</name></expr></argument>)</argument_list></call></expr></argument>,
         <argument><expr><call><name>mdbx_limits_valsize_max</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>MDBX_DUPSORT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pagesize_default</name> <operator>/</operator> <literal type="number">1024</literal></expr></argument>,
         <argument><expr><call><name>mdbx_limits_valsize_max</name><argument_list>(<argument><expr><name>pagesize_max</name></expr></argument>, <argument><expr><name>MDBX_DUPSORT</name></expr></argument>)</argument_list></call></expr></argument>,
         <argument><expr><name>pagesize_max</name> <operator>/</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\tWrite transaction size: up to %zu (0x%zX) pages (%f %s for default "</literal>
         <literal type="string">"%zuK pagesize, %f %s for %zuK pagesize).\n"</literal></expr></argument>,
         <argument><expr><call><name>mdbx_limits_txnsize_max</name><argument_list>(<argument><expr><name>pagesize_min</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>pagesize_min</name></expr></argument>,
         <argument><expr><call><name>mdbx_limits_txnsize_max</name><argument_list>(<argument><expr><name>pagesize_min</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>pagesize_min</name></expr></argument>,
         <argument><expr><call><name>mdbx_limits_txnsize_max</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>/</operator> <name>scale_factor</name></expr></argument>, <argument><expr><name>scale_unit</name></expr></argument>,
         <argument><expr><name>pagesize_default</name> <operator>/</operator> <literal type="number">1024</literal></expr></argument>,
         <argument><expr><call><name>mdbx_limits_txnsize_max</name><argument_list>(<argument><expr><name>pagesize_max</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>scale_factor</name></expr></argument>, <argument><expr><name>scale_unit</name></expr></argument>,
         <argument><expr><name>pagesize_max</name> <operator>/</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\tDatabase size: up to %zu pages (%f %s for default %zuK "</literal>
         <literal type="string">"pagesize, %f %s for %zuK pagesize).\n"</literal></expr></argument>,
         <argument><expr><call><name>mdbx_limits_dbsize_max</name><argument_list>(<argument><expr><name>pagesize_min</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>pagesize_min</name></expr></argument>,
         <argument><expr><call><name>mdbx_limits_dbsize_max</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>/</operator> <name>scale_factor</name></expr></argument>, <argument><expr><name>scale_unit</name></expr></argument>,
         <argument><expr><name>pagesize_default</name> <operator>/</operator> <literal type="number">1024</literal></expr></argument>,
         <argument><expr><call><name>mdbx_limits_dbsize_max</name><argument_list>(<argument><expr><name>pagesize_max</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>scale_factor</name></expr></argument>, <argument><expr><name>scale_unit</name></expr></argument>,
         <argument><expr><name>pagesize_max</name> <operator>/</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\tMaximum sub-databases: %u.\n"</literal></expr></argument>, <argument><expr><name>MDBX_MAX_DBI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-----\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_env_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"mdbx_env_create: (%d) %s\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>mdbx_strerror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>bailout</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_env_open</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="string">"./example-db"</literal></expr></argument>,
                     <argument><expr><name>MDBX_NOSUBDIR</name> <operator>|</operator> <name>MDBX_COALESCE</name> <operator>|</operator> <name>MDBX_LIFORECLAIM</name></expr></argument>, <argument><expr><literal type="number">0664</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"mdbx_env_open: (%d) %s\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>mdbx_strerror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>bailout</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_txn_begin</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"mdbx_txn_begin: (%d) %s\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>mdbx_strerror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>bailout</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_dbi_open</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"mdbx_dbi_open: (%d) %s\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>mdbx_strerror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>bailout</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>key</name><operator>.</operator><name>iov_len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>key</name><operator>.</operator><name>iov_base</name></name> <operator>=</operator> <name>sval</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>.</operator><name>iov_len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sval</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>.</operator><name>iov_base</name></name> <operator>=</operator> <name>sval</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>sval</name></expr></argument>, <argument><expr><literal type="string">"%03x %d foo bar"</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">3141592</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_put</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>dbi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"mdbx_put: (%d) %s\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>mdbx_strerror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>bailout</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_txn_commit</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"mdbx_txn_commit: (%d) %s\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>mdbx_strerror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>bailout</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>txn</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_txn_begin</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MDBX_TXN_RDONLY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"mdbx_txn_begin: (%d) %s\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>mdbx_strerror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>bailout</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_cursor_open</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>dbi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"mdbx_cursor_open: (%d) %s\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>mdbx_strerror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>bailout</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>found</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>mdbx_cursor_get</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>MDBX_NEXT</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"key: %p %.*s, data: %p %.*s\n"</literal></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>iov_base</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>key</name><operator>.</operator><name>iov_len</name></name></expr></argument>,
           <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>key</name><operator>.</operator><name>iov_base</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>iov_base</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>data</name><operator>.</operator><name>iov_len</name></name></expr></argument>,
           <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>data</name><operator>.</operator><name>iov_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>found</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>MDBX_NOTFOUND</name> <operator>||</operator> <name>found</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"mdbx_cursor_get: (%d) %s\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>mdbx_strerror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>bailout</name>;</goto>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>MDBX_SUCCESS</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
<label><name>bailout</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>cursor</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>mdbx_cursor_close</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>txn</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>mdbx_txn_abort</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>dbi</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>mdbx_dbi_close</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>dbi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>env</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>mdbx_env_close</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><ternary><condition><expr><operator>(</operator><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name><operator>)</operator></expr> ?</condition><then> <expr><name>EXIT_FAILURE</name></expr> </then><else>: <expr><name>EXIT_SUCCESS</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
</unit>
