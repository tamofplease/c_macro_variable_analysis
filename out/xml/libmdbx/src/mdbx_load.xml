<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/libmdbx/src/mdbx_load.c"><comment type="block">/* mdbx_load.c - memory-mapped database load tool */</comment>

<comment type="block">/*
 * Copyright 2015-2022 Leonid Yuriev &lt;leo@yuriev.ru&gt;
 * and other libmdbx authors: please see AUTHORS file.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted only as authorized by the OpenLDAP
 * Public License.
 *
 * A copy of this license is available in the file LICENSE in the
 * top-level directory of the distribution or, alternatively, at
 * &lt;http://www.OpenLDAP.org/license.html&gt;. */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_MSC_VER</name></cpp:ifdef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_MSC_VER</name> <operator>&gt;</operator> <literal type="number">1800</literal></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name> <name>:</name> <name>4464</name><name>)</name></cpp:pragma> <comment type="block">/* relative include path contains '..' */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name> <name>:</name> <name>4996</name><name>)</name></cpp:pragma> <comment type="block">/* The POSIX name is deprecated... */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>                          <comment type="block">/* _MSC_VER (warnings) */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xMDBX_TOOLS</name></cpp:macro></cpp:define> <comment type="block">/* Avoid using internal mdbx_assert() */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internals.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wingetopt.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>BOOL</name></type> <name>user_break</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>BOOL</name> <name>WINAPI</name></type> <name>ConsoleBreakHandlerRoutine</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type> <name>dwCtrlType</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>dwCtrlType</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>user_break</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* WINDOWS */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>sig_atomic_t</name></type> <name>user_break</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>signal_handler</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>sig</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>user_break</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !WINDOWS */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>prog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>quiet</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>lineno</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>error</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>lineno</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: at input line %"</literal> <name>PRIiSIZE</name> <literal type="string">": %s() error %d, %s\n"</literal></expr></argument>,
              <argument><expr><name>prog</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>mdbx_strerror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: %s() error %d %s\n"</literal></expr></argument>, <argument><expr><name>prog</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>,
              <argument><expr><call><name>mdbx_strerror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>valstr</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><name>len</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><name>len</name></expr>]</index></name> <operator>&gt;</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
              <argument><expr><literal type="string">"%s: line %"</literal> <name>PRIiSIZE</name> <literal type="string">": unexpected line format for '%s'\n"</literal></expr></argument>, <argument><expr><name>prog</name></expr></argument>,
              <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><name>line</name> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>valnum</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>valstr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <call><name>strtoull</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>end</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>end</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
              <argument><expr><literal type="string">"%s: line %"</literal> <name>PRIiSIZE</name> <literal type="string">": unexpected number format for '%s'\n"</literal></expr></argument>,
              <argument><expr><name>prog</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>valbool</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>u64</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>valnum</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>u64</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>u64</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: line %"</literal> <name>PRIiSIZE</name> <literal type="string">": unexpected value for '%s'\n"</literal></expr></argument>,
              <argument><expr><name>prog</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name>u64</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*----------------------------------------------------------------------------*/</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>subname</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>dbi_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>txnid_t</name></type> <name>txnid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint64_t</name></type> <name>sequence</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>MDBX_canary</name></type> <name>canary</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>MDBX_envinfo</name></type> <name>envinfo</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRINT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOHDR</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLOBAL</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>mode</name> <init>= <expr><name>GLOBAL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>MDBX_val</name></type> <name>kbuf</name></decl>, <decl><type ref="prev"/><name>dbuf</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRLENOF</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(sizeof(s) - 1)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>flagbit</name> <block>{
  <decl_stmt><decl><type><name>unsigned</name></type> <name>bit</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>len</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
}</block></struct></type> <name>flagbit</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>STRLENOF(s), s</cpp:value></cpp:define>

<decl_stmt><decl><type><name>flagbit</name></type> <name><name>dbflags</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><name>MDBX_REVERSEKEY</name></expr>, <macro><name>S</name><argument_list>(<argument><literal type="string">"reversekey"</literal></argument>)</argument_list></macro>}</block></expr>, <expr><block>{<expr><name>MDBX_DUPSORT</name></expr>, <macro><name>S</name><argument_list>(<argument><literal type="string">"duplicates"</literal></argument>)</argument_list></macro>}</block></expr>,
    <expr><block>{<expr><name>MDBX_DUPSORT</name></expr>, <macro><name>S</name><argument_list>(<argument><literal type="string">"dupsort"</literal></argument>)</argument_list></macro>}</block></expr>,       <expr><block>{<expr><name>MDBX_INTEGERKEY</name></expr>, <macro><name>S</name><argument_list>(<argument><literal type="string">"integerkey"</literal></argument>)</argument_list></macro>}</block></expr>,
    <expr><block>{<expr><name>MDBX_DUPFIXED</name></expr>, <macro><name>S</name><argument_list>(<argument><literal type="string">"dupfixed"</literal></argument>)</argument_list></macro>}</block></expr>,     <expr><block>{<expr><name>MDBX_INTEGERDUP</name></expr>, <macro><name>S</name><argument_list>(<argument><literal type="string">"integerdup"</literal></argument>)</argument_list></macro>}</block></expr>,
    <expr><block>{<expr><name>MDBX_REVERSEDUP</name></expr>, <macro><name>S</name><argument_list>(<argument><literal type="string">"reversedup"</literal></argument>)</argument_list></macro>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>nullptr</name></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>readhdr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="block">/* reset parameters */</comment>
  <if_stmt><if>if <condition>(<expr><name>subname</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>subname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>subname</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>dbi_flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>txnid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>sequence</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name><name>dbuf</name><operator>.</operator><name>iov_base</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>dbuf</name><operator>.</operator><name>iov_len</name></name></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>nullptr</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><ternary><condition><expr><name>errno</name></expr> ?</condition><then> <expr><name>errno</name></expr> </then><else>: <expr><name>EOF</name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>user_break</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>MDBX_EINTR</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>lineno</name><operator>++</operator></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>u64</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>valnum</name><argument_list>(<argument><expr><name><name>dbuf</name><operator>.</operator><name>iov_base</name></name></expr></argument>, <argument><expr><literal type="string">"VERSION"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>u64</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>u64</name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
                  <argument><expr><literal type="string">"%s: line %"</literal> <name>PRIiSIZE</name> <literal type="string">": unsupported value %"</literal> <name>PRIu64</name>
                  <literal type="string">" for %s\n"</literal></expr></argument>,
                  <argument><expr><name>prog</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>u64</name></expr></argument>, <argument><expr><literal type="string">"VERSION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>valnum</name><argument_list>(<argument><expr><name><name>dbuf</name><operator>.</operator><name>iov_base</name></name></expr></argument>, <argument><expr><literal type="string">"db_pagesize"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>u64</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>mode</name> <operator>&amp;</operator> <name>GLOBAL</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>envinfo</name><operator>.</operator><name>mi_dxb_pagesize</name></name> <operator>!=</operator> <name>u64</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
                  <argument><expr><literal type="string">"%s: line %"</literal> <name>PRIiSIZE</name> <literal type="string">": ignore value %"</literal> <name>PRIu64</name>
                  <literal type="string">" for '%s' in non-global context\n"</literal></expr></argument>,
                  <argument><expr><name>prog</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>u64</name></expr></argument>, <argument><expr><literal type="string">"db_pagesize"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>u64</name> <argument_list type="generic">&lt; <argument><expr><name>MDBX_MIN_PAGESIZE</name> <operator>||</operator> <name>u64</name></expr></argument> &gt;</argument_list></name> <name>MDBX_MAX_PAGESIZE</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
                  <argument><expr><literal type="string">"%s: line %"</literal> <name>PRIiSIZE</name> <literal type="string">": ignore unsupported value %"</literal> <name>PRIu64</name>
                  <literal type="string">" for %s\n"</literal></expr></argument>,
                  <argument><expr><name>prog</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>u64</name></expr></argument>, <argument><expr><literal type="string">"db_pagesize"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></if> <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>envinfo</name><operator>.</operator><name>mi_dxb_pagesize</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>u64</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>valstr</name><argument_list>(<argument><expr><name><name>dbuf</name><operator>.</operator><name>iov_base</name></name></expr></argument>, <argument><expr><literal type="string">"format"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>str</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"print"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>mode</name> <operator>|=</operator> <name>PRINT</name></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"bytevalue"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>mode</name> <operator>&amp;=</operator> <operator>~</operator><name>PRINT</name></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
                <argument><expr><literal type="string">"%s: line %"</literal> <name>PRIiSIZE</name> <literal type="string">": unsupported value '%s' for %s\n"</literal></expr></argument>, <argument><expr><name>prog</name></expr></argument>,
                <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>valstr</name><argument_list>(<argument><expr><name><name>dbuf</name><operator>.</operator><name>iov_base</name></name></expr></argument>, <argument><expr><literal type="string">"database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>str</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>subname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>subname</name> <operator>=</operator> <call><name>mdbx_strdup</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>subname</name></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"strdup()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
          <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>valstr</name><argument_list>(<argument><expr><name><name>dbuf</name><operator>.</operator><name>iov_base</name></name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>str</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"btree"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
                  <argument><expr><literal type="string">"%s: line %"</literal> <name>PRIiSIZE</name> <literal type="string">": unsupported value '%s' for %s\n"</literal></expr></argument>,
                  <argument><expr><name>prog</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>subname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>valnum</name><argument_list>(<argument><expr><name><name>dbuf</name><operator>.</operator><name>iov_base</name></name></expr></argument>, <argument><expr><literal type="string">"mapaddr"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>u64</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>u64</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
                  <argument><expr><literal type="string">"%s: line %"</literal> <name>PRIiSIZE</name> <literal type="string">": ignore unsupported value 0x%"</literal> <name>PRIx64</name>
                  <literal type="string">" for %s\n"</literal></expr></argument>,
                  <argument><expr><name>prog</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>u64</name></expr></argument>, <argument><expr><literal type="string">"mapaddr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>valnum</name><argument_list>(<argument><expr><name><name>dbuf</name><operator>.</operator><name>iov_base</name></name></expr></argument>, <argument><expr><literal type="string">"mapsize"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>u64</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>mode</name> <operator>&amp;</operator> <name>GLOBAL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
                  <argument><expr><literal type="string">"%s: line %"</literal> <name>PRIiSIZE</name> <literal type="string">": ignore value %"</literal> <name>PRIu64</name>
                  <literal type="string">" for '%s' in non-global context\n"</literal></expr></argument>,
                  <argument><expr><name>prog</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>u64</name></expr></argument>, <argument><expr><literal type="string">"mapsize"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>u64</name> <argument_list type="generic">&lt; <argument><expr><name>MIN_MAPSIZE</name> <operator>||</operator> <name>u64</name></expr></argument> &gt;</argument_list></name> <name>MAX_MAPSIZE64</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
                  <argument><expr><literal type="string">"%s: line %"</literal> <name>PRIiSIZE</name> <literal type="string">": ignore unsupported value 0x%"</literal> <name>PRIx64</name>
                  <literal type="string">" for %s\n"</literal></expr></argument>,
                  <argument><expr><name>prog</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>u64</name></expr></argument>, <argument><expr><literal type="string">"mapsize"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></if> <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>envinfo</name><operator>.</operator><name>mi_mapsize</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>u64</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>valnum</name><argument_list>(<argument><expr><name><name>dbuf</name><operator>.</operator><name>iov_base</name></name></expr></argument>, <argument><expr><literal type="string">"maxreaders"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>u64</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>mode</name> <operator>&amp;</operator> <name>GLOBAL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
                  <argument><expr><literal type="string">"%s: line %"</literal> <name>PRIiSIZE</name> <literal type="string">": ignore value %"</literal> <name>PRIu64</name>
                  <literal type="string">" for '%s' in non-global context\n"</literal></expr></argument>,
                  <argument><expr><name>prog</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>u64</name></expr></argument>, <argument><expr><literal type="string">"maxreaders"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>u64</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>u64</name></expr></argument> &gt;</argument_list></name> <name>MDBX_READERS_LIMIT</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
                  <argument><expr><literal type="string">"%s: line %"</literal> <name>PRIiSIZE</name> <literal type="string">": ignore unsupported value 0x%"</literal> <name>PRIx64</name>
                  <literal type="string">" for %s\n"</literal></expr></argument>,
                  <argument><expr><name>prog</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>u64</name></expr></argument>, <argument><expr><literal type="string">"maxreaders"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></if> <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>envinfo</name><operator>.</operator><name>mi_maxreaders</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>u64</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>valnum</name><argument_list>(<argument><expr><name><name>dbuf</name><operator>.</operator><name>iov_base</name></name></expr></argument>, <argument><expr><literal type="string">"txnid"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>u64</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>u64</name> <argument_list type="generic">&lt; <argument><expr><name>MIN_TXNID</name> <operator>||</operator> <name>u64</name></expr></argument> &gt;</argument_list></name> <name>MAX_TXNID</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
                  <argument><expr><literal type="string">"%s: line %"</literal> <name>PRIiSIZE</name> <literal type="string">": ignore unsupported value 0x%"</literal> <name>PRIx64</name>
                  <literal type="string">" for %s\n"</literal></expr></argument>,
                  <argument><expr><name>prog</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>u64</name></expr></argument>, <argument><expr><literal type="string">"txnid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></if> <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>txnid</name> <operator>=</operator> <name>u64</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>valnum</name><argument_list>(<argument><expr><name><name>dbuf</name><operator>.</operator><name>iov_base</name></name></expr></argument>, <argument><expr><literal type="string">"sequence"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>u64</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>sequence</name> <operator>=</operator> <name>u64</name></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>valstr</name><argument_list>(<argument><expr><name><name>dbuf</name><operator>.</operator><name>iov_base</name></name></expr></argument>, <argument><expr><literal type="string">"geometry"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>str</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>mode</name> <operator>&amp;</operator> <name>GLOBAL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
                  <argument><expr><literal type="string">"%s: line %"</literal> <name>PRIiSIZE</name> <literal type="string">": ignore values %s"</literal>
                  <literal type="string">" for '%s' in non-global context\n"</literal></expr></argument>,
                  <argument><expr><name>prog</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"geometry"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>str</name></expr></argument>,
                        <argument><expr><literal type="string">"l%"</literal> <name>PRIu64</name> <literal type="string">",c%"</literal> <name>PRIu64</name> <literal type="string">",u%"</literal> <name>PRIu64</name> <literal type="string">",s%"</literal> <name>PRIu64</name>
                        <literal type="string">",g%"</literal> <name>PRIu64</name></expr></argument>,
                        <argument><expr><operator>&amp;</operator><name><name>envinfo</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>lower</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>envinfo</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>current</name></name></expr></argument>,
                        <argument><expr><operator>&amp;</operator><name><name>envinfo</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>upper</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>envinfo</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>shrink</name></name></expr></argument>,
                        <argument><expr><operator>&amp;</operator><name><name>envinfo</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>grow</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
                  <argument><expr><literal type="string">"%s: line %"</literal> <name>PRIiSIZE</name> <literal type="string">": unexpected line format for '%s'\n"</literal></expr></argument>,
                  <argument><expr><name>prog</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><literal type="string">"geometry"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>valstr</name><argument_list>(<argument><expr><name><name>dbuf</name><operator>.</operator><name>iov_base</name></name></expr></argument>, <argument><expr><literal type="string">"canary"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>str</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>mode</name> <operator>&amp;</operator> <name>GLOBAL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
                  <argument><expr><literal type="string">"%s: line %"</literal> <name>PRIiSIZE</name> <literal type="string">": ignore values %s"</literal>
                  <literal type="string">" for '%s' in non-global context\n"</literal></expr></argument>,
                  <argument><expr><name>prog</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"canary"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"v%"</literal> <name>PRIu64</name> <literal type="string">",x%"</literal> <name>PRIu64</name> <literal type="string">",y%"</literal> <name>PRIu64</name> <literal type="string">",z%"</literal> <name>PRIu64</name></expr></argument>,
                        <argument><expr><operator>&amp;</operator><name><name>canary</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>canary</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>canary</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>canary</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
                  <argument><expr><literal type="string">"%s: line %"</literal> <name>PRIiSIZE</name> <literal type="string">": unexpected line format for '%s'\n"</literal></expr></argument>,
                  <argument><expr><name>prog</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><literal type="string">"canary"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>dbflags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bit</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>bool</name></type> <name>value</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>valbool</name><argument_list>(<argument><expr><name><name>dbuf</name><operator>.</operator><name>iov_base</name></name></expr></argument>, <argument><expr><name><name>dbflags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><name>dbi_flags</name> <operator>|=</operator> <name><name>dbflags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bit</name></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
          <expr_stmt><expr><name>dbi_flags</name> <operator>&amp;=</operator> <operator>~</operator><name><name>dbflags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bit</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <goto>goto <name>next</name>;</goto>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>valstr</name><argument_list>(<argument><expr><name><name>dbuf</name><operator>.</operator><name>iov_base</name></name></expr></argument>, <argument><expr><literal type="string">"HEADER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>str</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"END"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>MDBX_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
              <argument><expr><literal type="string">"%s: line %"</literal> <name>PRIiSIZE</name> <literal type="string">": unrecognized keyword ignored: %s\n"</literal></expr></argument>,
              <argument><expr><name>prog</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>dbuf</name><operator>.</operator><name>iov_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <label><name>next</name>:</label><empty_stmt>;</empty_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>EOF</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>badend</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: line %"</literal> <name>PRIiSIZE</name> <literal type="string">": unexpected end of input\n"</literal></expr></argument>, <argument><expr><name>prog</name></expr></argument>,
            <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><ternary><condition><expr><name>errno</name></expr> ?</condition><then> <expr><name>errno</name></expr> </then><else>: <expr><name>MDBX_ENODATA</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__inline</name> <name>int</name></type> <name>unhex</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>c2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>*</operator><name>c2</name><operator>++</operator> <operator>&amp;</operator> <literal type="number">0x4f</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>x</name> <operator>&amp;</operator> <literal type="number">0x40</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>x</name> <operator>-=</operator> <literal type="number">55</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>c</name> <operator>=</operator> <name>x</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>*</operator><name>c2</name> <operator>&amp;</operator> <literal type="number">0x4f</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>x</name> <operator>&amp;</operator> <literal type="number">0x40</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>x</name> <operator>-=</operator> <literal type="number">55</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>c</name> <operator>|=</operator> <name>x</name></expr>;</expr_stmt>
  <return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>__hot</name> <specifier>static</specifier> <name>int</name></type> <name>readline</name><parameter_list>(<parameter><decl><type><name>MDBX_val</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>MDBX_val</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>c1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>c2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>l2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>user_break</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>MDBX_EINTR</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>mode</name> <operator>&amp;</operator> <name>NOHDR</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>fgetc</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><ternary><condition><expr><name>errno</name></expr> ?</condition><then> <expr><name>errno</name></expr> </then><else>: <expr><name>EOF</name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>lineno</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>iov_base</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>buf</name><operator>-&gt;</operator><name>iov_len</name></name></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'D'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>iov_base</name></name></expr></argument>, <argument><expr><literal type="string">"ATA=END"</literal></expr></argument>, <argument><expr><call><name>STRLENOF</name><argument_list>(<argument><expr><literal type="string">"ATA=END"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><name>EOF</name></expr>;</return></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><call><name>badend</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>iov_base</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>buf</name><operator>-&gt;</operator><name>iov_len</name></name></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>nullptr</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><ternary><condition><expr><name>errno</name></expr> ?</condition><then> <expr><name>errno</name></expr> </then><else>: <expr><name>EOF</name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>lineno</name><operator>++</operator></expr>;</expr_stmt>

  <expr_stmt><expr><name>c1</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>iov_base</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>l2</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

  <comment type="block">/* Is buffer too short? */</comment>
  <while>while <condition>(<expr><name><name>c1</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>iov_base</name></name> <operator>=</operator> <call><name>mdbx_realloc</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>iov_base</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>iov_len</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>buf</name><operator>-&gt;</operator><name>iov_base</name></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
                <argument><expr><literal type="string">"%s: line %"</literal> <name>PRIiSIZE</name> <literal type="string">": out of memory, line too long\n"</literal></expr></argument>, <argument><expr><name>prog</name></expr></argument>,
                <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <return>return <expr><name>MDBX_ENOMEM</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>c1</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>iov_base</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>c1</name> <operator>+=</operator> <name>l2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>c1</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>buf</name><operator>-&gt;</operator><name>iov_len</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>nullptr</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><ternary><condition><expr><name>errno</name></expr> ?</condition><then> <expr><name>errno</name></expr> </then><else>: <expr><name>EOF</name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>iov_len</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>l2</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><name>c1</name> <operator>=</operator> <name>c2</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>iov_base</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>len</name> <operator>=</operator> <name>l2</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>c1</name><index>[<expr><operator>--</operator><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>end</name> <operator>=</operator> <name>c1</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&amp;</operator> <name>PRINT</name></expr>)</condition> <block>{<block_content>
    <while>while <condition>(<expr><name>c2</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>*</operator><name>c2</name> <operator>==</operator> <literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>c2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><operator>*</operator><name>c1</name><operator>++</operator> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name>c2</name> <operator>+</operator> <literal type="number">3</literal> <operator>&gt;</operator> <name>end</name> <operator>||</operator> <operator>!</operator><call><name>isxdigit</name><argument_list>(<argument><expr><name><name>c2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>isxdigit</name><argument_list>(<argument><expr><name><name>c2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name>badend</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
          <expr_stmt><expr><operator>*</operator><name>c1</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><call><name>unhex</name><argument_list>(<argument><expr><operator>++</operator><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name>c2</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="block">/* copies are redundant when no escapes were used */</comment>
        <expr_stmt><expr><operator>*</operator><name>c1</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>c2</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="block">/* odd length not allowed */</comment>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><call><name>badend</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <while>while <condition>(<expr><name>c2</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isxdigit</name><argument_list>(<argument><expr><operator>*</operator><name>c2</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>isxdigit</name><argument_list>(<argument><expr><name><name>c2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>badend</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><operator>*</operator><name>c1</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><call><name>unhex</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>c2</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name>c2</name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>iov_base</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>iov_base</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>iov_len</name></name> <operator>=</operator> <name>c1</name> <operator>-</operator> <name>c2</name></expr>;</expr_stmt>

  <return>return <expr><name>MDBX_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>usage</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
          <argument><expr><literal type="string">"usage: %s "</literal>
          <literal type="string">"[-V] [-q] [-a] [-f file] [-s name] [-N] [-p] [-T] [-r] [-n] dbpath\n"</literal>
          <literal type="string">"  -V\t\tprint version and exit\n"</literal>
          <literal type="string">"  -q\t\tbe quiet\n"</literal>
          <literal type="string">"  -a\t\tappend records in input order (required for custom "</literal>
          <literal type="string">"comparators)\n"</literal>
          <literal type="string">"  -f file\tread from file instead of stdin\n"</literal>
          <literal type="string">"  -s name\tload into specified named subDB\n"</literal>
          <literal type="string">"  -N\t\tdon't overwrite existing records when loading, just skip "</literal>
          <literal type="string">"ones\n"</literal>
          <literal type="string">"  -p\t\tpurge subDB before loading\n"</literal>
          <literal type="string">"  -T\t\tread plaintext\n"</literal>
          <literal type="string">"  -r\t\trescue mode (ignore errors to load corrupted DB dump)\n"</literal>
          <literal type="string">"  -n\t\tdon't use subdirectory for newly created database "</literal>
          <literal type="string">"(MDBX_NOSUBDIR)\n"</literal></expr></argument>,
          <argument><expr><name>prog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>equal_or_greater</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>MDBX_val</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>MDBX_val</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>iov_len</name></name> <operator>==</operator> <name><name>b</name><operator>-&gt;</operator><name>iov_len</name></name> <operator>&amp;&amp;</operator>
          <call><name>memcmp</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>iov_base</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>iov_base</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>iov_len</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>
             ?</condition><then> <expr><literal type="number">0</literal></expr>
             </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MDBX_env</name> <modifier>*</modifier></type><name>env</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MDBX_txn</name> <modifier>*</modifier></type><name>txn</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MDBX_cursor</name> <modifier>*</modifier></type><name>mc</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MDBX_dbi</name></type> <name>dbi</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>envname</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>envflags</name> <init>= <expr><name>MDBX_SAFE_NOSYNC</name> <operator>|</operator> <name>MDBX_ACCEDE</name></expr></init></decl>, <decl><type ref="prev"/><name>putflags</name> <init>= <expr><name>MDBX_UPSERT</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>rescue</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>purge</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>prog</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <while>while <condition>(<expr><operator>(</operator><name>i</name> <operator>=</operator> <call><name>getopt</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>,
                     <argument><expr><literal type="string">"a"</literal>
                     <literal type="string">"f:"</literal>
                     <literal type="string">"n"</literal>
                     <literal type="string">"s:"</literal>
                     <literal type="string">"N"</literal>
                     <literal type="string">"p"</literal>
                     <literal type="string">"T"</literal>
                     <literal type="string">"V"</literal>
                     <literal type="string">"r"</literal>
                     <literal type="string">"q"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>
    <switch>switch <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="char">'V'</literal></expr>:</case>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"mdbx_load version %d.%d.%d.%d\n"</literal>
             <literal type="string">" - source: %s %s, commit %s, tree %s\n"</literal>
             <literal type="string">" - anchor: %s\n"</literal>
             <literal type="string">" - build: %s for %s by %s\n"</literal>
             <literal type="string">" - flags: %s\n"</literal>
             <literal type="string">" - options: %s\n"</literal></expr></argument>,
             <argument><expr><name><name>mdbx_version</name><operator>.</operator><name>major</name></name></expr></argument>, <argument><expr><name><name>mdbx_version</name><operator>.</operator><name>minor</name></name></expr></argument>, <argument><expr><name><name>mdbx_version</name><operator>.</operator><name>release</name></name></expr></argument>,
             <argument><expr><name><name>mdbx_version</name><operator>.</operator><name>revision</name></name></expr></argument>, <argument><expr><name><name>mdbx_version</name><operator>.</operator><name>git</name><operator>.</operator><name>describe</name></name></expr></argument>,
             <argument><expr><name><name>mdbx_version</name><operator>.</operator><name>git</name><operator>.</operator><name>datetime</name></name></expr></argument>, <argument><expr><name><name>mdbx_version</name><operator>.</operator><name>git</name><operator>.</operator><name>commit</name></name></expr></argument>,
             <argument><expr><name><name>mdbx_version</name><operator>.</operator><name>git</name><operator>.</operator><name>tree</name></name></expr></argument>, <argument><expr><name>mdbx_sourcery_anchor</name></expr></argument>, <argument><expr><name><name>mdbx_build</name><operator>.</operator><name>datetime</name></name></expr></argument>,
             <argument><expr><name><name>mdbx_build</name><operator>.</operator><name>target</name></name></expr></argument>, <argument><expr><name><name>mdbx_build</name><operator>.</operator><name>compiler</name></name></expr></argument>, <argument><expr><name><name>mdbx_build</name><operator>.</operator><name>flags</name></name></expr></argument>,
             <argument><expr><name><name>mdbx_build</name><operator>.</operator><name>options</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>EXIT_SUCCESS</name></expr>;</return>
    <case>case <expr><literal type="char">'a'</literal></expr>:</case>
      <expr_stmt><expr><name>putflags</name> <operator>|=</operator> <name>MDBX_APPEND</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'f'</literal></expr>:</case>
      <if_stmt><if>if <condition>(<expr><call><name>freopen</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>nullptr</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: %s: open: %s\n"</literal></expr></argument>, <argument><expr><name>prog</name></expr></argument>, <argument><expr><name>optarg</name></expr></argument>,
                  <argument><expr><call><name>mdbx_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'n'</literal></expr>:</case>
      <expr_stmt><expr><name>envflags</name> <operator>|=</operator> <name>MDBX_NOSUBDIR</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'s'</literal></expr>:</case>
      <expr_stmt><expr><name>subname</name> <operator>=</operator> <call><name>mdbx_strdup</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'N'</literal></expr>:</case>
      <expr_stmt><expr><name>putflags</name> <operator>|=</operator> <name>MDBX_NOOVERWRITE</name> <operator>|</operator> <name>MDBX_NODUPDATA</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'p'</literal></expr>:</case>
      <expr_stmt><expr><name>purge</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'T'</literal></expr>:</case>
      <expr_stmt><expr><name>mode</name> <operator>|=</operator> <name>NOHDR</name> <operator>|</operator> <name>PRINT</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'q'</literal></expr>:</case>
      <expr_stmt><expr><name>quiet</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'r'</literal></expr>:</case>
      <expr_stmt><expr><name>rescue</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><name>optind</name> <operator>!=</operator> <name>argc</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name>SetConsoleCtrlHandler</name><argument_list>(<argument><expr><name>ConsoleBreakHandlerRoutine</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SIGPIPE</name></cpp:ifdef>
  <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>, <argument><expr><name>signal_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SIGHUP</name></cpp:ifdef>
  <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>, <argument><expr><name>signal_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>signal_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><name>signal_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !WINDOWS */</comment>

  <expr_stmt><expr><name>envname</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>optind</name></expr>]</index></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"mdbx_load %s (%s, T-%s)\nRunning for %s...\n"</literal></expr></argument>,
           <argument><expr><name><name>mdbx_version</name><operator>.</operator><name>git</name><operator>.</operator><name>describe</name></name></expr></argument>, <argument><expr><name><name>mdbx_version</name><operator>.</operator><name>git</name><operator>.</operator><name>datetime</name></name></expr></argument>,
           <argument><expr><name><name>mdbx_version</name><operator>.</operator><name>git</name><operator>.</operator><name>tree</name></name></expr></argument>, <argument><expr><name>envname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>dbuf</name><operator>.</operator><name>iov_len</name></name> <operator>=</operator> <literal type="number">4096</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dbuf</name><operator>.</operator><name>iov_base</name></name> <operator>=</operator> <call><name>mdbx_malloc</name><argument_list>(<argument><expr><name><name>dbuf</name><operator>.</operator><name>iov_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dbuf</name><operator>.</operator><name>iov_base</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>MDBX_ENOMEM</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"value-buffer"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>env_close</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* read first header for mapsize= */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>mode</name> <operator>&amp;</operator> <name>NOHDR</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>readhdr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>MDBX_ENODATA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"readheader"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>env_close</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_env_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_env_create"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mdbx_env_set_maxdbs</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>envinfo</name><operator>.</operator><name>mi_maxreaders</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_env_set_maxreaders</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_maxreaders</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_env_set_maxreaders"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>env_close</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>envinfo</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>current</name></name> <operator>|</operator> <name><name>envinfo</name><operator>.</operator><name>mi_mapsize</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>envinfo</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>current</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_env_set_geometry</name><argument_list>(
          <argument><expr><name>env</name></expr></argument>, <argument><expr><operator>(</operator><name>intptr_t</name><operator>)</operator><name><name>envinfo</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>lower</name></name></expr></argument>, <argument><expr><operator>(</operator><name>intptr_t</name><operator>)</operator><name><name>envinfo</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>current</name></name></expr></argument>,
          <argument><expr><operator>(</operator><name>intptr_t</name><operator>)</operator><name><name>envinfo</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>upper</name></name></expr></argument>, <argument><expr><operator>(</operator><name>intptr_t</name><operator>)</operator><name><name>envinfo</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>shrink</name></name></expr></argument>,
          <argument><expr><operator>(</operator><name>intptr_t</name><operator>)</operator><name><name>envinfo</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>grow</name></name></expr></argument>,
          <argument><expr><ternary><condition><expr><name><name>envinfo</name><operator>.</operator><name>mi_dxb_pagesize</name></name></expr> ?</condition><then> <expr><operator>(</operator><name>intptr_t</name><operator>)</operator><name><name>envinfo</name><operator>.</operator><name>mi_dxb_pagesize</name></name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>envinfo</name><operator>.</operator><name>mi_mapsize</name></name> <operator>&gt;</operator> <name>MAX_MAPSIZE</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><call><name>fprintf</name><argument_list>(
              <argument><expr><name>stderr</name></expr></argument>,
              <argument><expr><literal type="string">"Database size is too large for current system (mapsize=%"</literal> <name>PRIu64</name>
              <literal type="string">" is great than system-limit %zu)\n"</literal></expr></argument>,
              <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_mapsize</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>MAX_MAPSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <goto>goto <name>env_close</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_env_set_geometry</name><argument_list>(
          <argument><expr><name>env</name></expr></argument>, <argument><expr><operator>(</operator><name>intptr_t</name><operator>)</operator><name><name>envinfo</name><operator>.</operator><name>mi_mapsize</name></name></expr></argument>, <argument><expr><operator>(</operator><name>intptr_t</name><operator>)</operator><name><name>envinfo</name><operator>.</operator><name>mi_mapsize</name></name></expr></argument>,
          <argument><expr><operator>(</operator><name>intptr_t</name><operator>)</operator><name><name>envinfo</name><operator>.</operator><name>mi_mapsize</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
          <argument><expr><ternary><condition><expr><name><name>envinfo</name><operator>.</operator><name>mi_dxb_pagesize</name></name></expr> ?</condition><then> <expr><operator>(</operator><name>intptr_t</name><operator>)</operator><name><name>envinfo</name><operator>.</operator><name>mi_dxb_pagesize</name></name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_env_set_geometry"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>env_close</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_env_open</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>envname</name></expr></argument>, <argument><expr><name>envflags</name></expr></argument>, <argument><expr><literal type="number">0664</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_env_open"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>env_close</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>kbuf</name><operator>.</operator><name>iov_len</name></name> <operator>=</operator> <call><name>mdbx_env_get_maxvalsize_ex</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>kbuf</name><operator>.</operator><name>iov_len</name></name> <operator>&gt;=</operator> <name>INTPTR_MAX</name> <operator>/</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"mdbx_env_get_maxkeysize() failed, returns %zu\n"</literal></expr></argument>,
              <argument><expr><name><name>kbuf</name><operator>.</operator><name>iov_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <goto>goto <name>env_close</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>kbuf</name><operator>.</operator><name>iov_base</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>kbuf</name><operator>.</operator><name>iov_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>kbuf</name><operator>.</operator><name>iov_base</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>MDBX_ENOMEM</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"key-buffer"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>env_close</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <while>while <condition>(<expr><name>rc</name> <operator>==</operator> <name>MDBX_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>user_break</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>MDBX_EINTR</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_txn_begin</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_txn_begin"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>env_close</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&amp;</operator> <name>GLOBAL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>mode</name> <operator>-=</operator> <name>GLOBAL</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>canary</name><operator>.</operator><name>v</name></name> <operator>|</operator> <name><name>canary</name><operator>.</operator><name>x</name></name> <operator>|</operator> <name><name>canary</name><operator>.</operator><name>y</name></name> <operator>|</operator> <name><name>canary</name><operator>.</operator><name>z</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_canary_put</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>canary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_canary_put"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <goto>goto <name>txn_abort</name>;</goto>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>dbi_name</name> <init>= <expr><ternary><condition><expr><name>subname</name></expr> ?</condition><then> <expr><name>subname</name></expr> </then><else>: <expr><literal type="string">"@MAIN"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator>
        <call><name>mdbx_dbi_open_ex</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subname</name></expr></argument>, <argument><expr><name>dbi_flags</name> <operator>|</operator> <name>MDBX_CREATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbi</name></expr></argument>,
                         <argument><expr><ternary><condition><expr><operator>(</operator><name>putflags</name> <operator>&amp;</operator> <name>MDBX_APPEND</name><operator>)</operator></expr> ?</condition><then> <expr><name>equal_or_greater</name></expr> </then><else>: <expr><name>nullptr</name></expr></else></ternary></expr></argument>,
                         <argument><expr><ternary><condition><expr><operator>(</operator><name>putflags</name> <operator>&amp;</operator> <name>MDBX_APPEND</name><operator>)</operator></expr> ?</condition><then> <expr><name>equal_or_greater</name></expr> </then><else>: <expr><name>nullptr</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_dbi_open_ex"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>txn_abort</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>uint64_t</name></type> <name>present_sequence</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_dbi_sequence</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>dbi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>present_sequence</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_dbi_sequence"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>txn_abort</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>present_sequence</name> <operator>&gt;</operator> <name>sequence</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
                <argument><expr><literal type="string">"present sequence for '%s' value (%"</literal> <name>PRIu64</name>
                <literal type="string">") is greater than loaded (%"</literal> <name>PRIu64</name> <literal type="string">")\n"</literal></expr></argument>,
                <argument><expr><name>dbi_name</name></expr></argument>, <argument><expr><name>present_sequence</name></expr></argument>, <argument><expr><name>sequence</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>MDBX_RESULT_TRUE</name></expr>;</expr_stmt>
      <goto>goto <name>txn_abort</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>present_sequence</name> <operator>&lt;</operator> <name>sequence</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_dbi_sequence</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>dbi</name></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>, <argument><expr><name>sequence</name> <operator>-</operator> <name>present_sequence</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_dbi_sequence"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>txn_abort</name>;</goto>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>purge</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_drop</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>dbi</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_drop"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>txn_abort</name>;</goto>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>putflags</name> <operator>&amp;</operator> <name>MDBX_APPEND</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>putflags</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>dbi_flags</name> <operator>&amp;</operator> <name>MDBX_DUPSORT</name><operator>)</operator></expr> ?</condition><then> <expr><name>putflags</name> <operator>|</operator> <name>MDBX_APPENDDUP</name></expr>
                                            </then><else>: <expr><name>putflags</name> <operator>&amp;</operator> <operator>~</operator><name>MDBX_APPENDDUP</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_cursor_open</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>dbi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_cursor_open"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>txn_abort</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>batch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>rc</name> <operator>==</operator> <name>MDBX_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>MDBX_val</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>data</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>readline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
        <break>break;</break></block_content></block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>MDBX_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>readline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: line %"</literal> <name>PRIiSIZE</name> <literal type="string">": failed to read key value\n"</literal></expr></argument>,
                  <argument><expr><name>prog</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <goto>goto <name>txn_abort</name>;</goto>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_cursor_put</name><argument_list>(<argument><expr><name>mc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>putflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>MDBX_KEYEXIST</name> <operator>&amp;&amp;</operator> <name>putflags</name></expr>)</condition><block type="pseudo"><block_content>
        <continue>continue;</continue></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>MDBX_BAD_VALSIZE</name> <operator>&amp;&amp;</operator> <name>rescue</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: skip line %"</literal> <name>PRIiSIZE</name> <literal type="string">": due %s\n"</literal></expr></argument>, <argument><expr><name>prog</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>,
                  <argument><expr><call><name>mdbx_strerror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_cursor_put"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>txn_abort</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>batch</name><operator>++</operator></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>MDBX_txn_info</name></type> <name>txn_info</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_txn_info</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>txn_info</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_txn_info"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>txn_abort</name>;</goto>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>batch</name> <operator>==</operator> <literal type="number">10000</literal> <operator>||</operator> <name><name>txn_info</name><operator>.</operator><name>txn_space_dirty</name></name> <operator>&gt;</operator> <name>MEGABYTE</name> <operator>*</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_txn_commit</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_txn_commit"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <goto>goto <name>env_close</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>batch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_txn_begin</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_txn_begin"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <goto>goto <name>env_close</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_cursor_bind</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>mc</name></expr></argument>, <argument><expr><name>dbi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_cursor_bind"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <goto>goto <name>txn_abort</name>;</goto>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>mdbx_cursor_close</name><argument_list>(<argument><expr><name>mc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>mc</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_txn_commit</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>txn</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_txn_commit"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>env_close</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>subname</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dbi</name> <operator>!=</operator> <name>MAIN_DBI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_dbi_close</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>dbi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_dbi_close"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>env_close</name>;</goto>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dbi</name> <operator>==</operator> <name>MAIN_DBI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* try read next header */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>mode</name> <operator>&amp;</operator> <name>NOHDR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>readhdr</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>ferror</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>feof</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <break>break;</break></block_content></block></if></if_stmt>
  </block_content>}</block></while>

  <switch>switch <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
  <case>case <expr><name>EOF</name></expr>:</case>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>MDBX_SUCCESS</name></expr>;</expr_stmt>
  <case>case <expr><name>MDBX_SUCCESS</name></expr>:</case>
    <break>break;</break>
  <case>case <expr><name>MDBX_EINTR</name></expr>:</case>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Interrupted by signal/user\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <break>break;</break>
  <default>default:</default>
    <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"readline"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></switch>

<label><name>txn_abort</name>:</label>
  <expr_stmt><expr><call><name>mdbx_cursor_close</name><argument_list>(<argument><expr><name>mc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mdbx_txn_abort</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>env_close</name>:</label>
  <expr_stmt><expr><call><name>mdbx_env_close</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>kbuf</name><operator>.</operator><name>iov_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>dbuf</name><operator>.</operator><name>iov_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><ternary><condition><expr><name>rc</name></expr> ?</condition><then> <expr><name>EXIT_FAILURE</name></expr> </then><else>: <expr><name>EXIT_SUCCESS</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
</unit>
