<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/libmdbx/src/mdbx_dump.c"><comment type="block">/* mdbx_dump.c - memory-mapped database dump tool */</comment>

<comment type="block">/*
 * Copyright 2015-2022 Leonid Yuriev &lt;leo@yuriev.ru&gt;
 * and other libmdbx authors: please see AUTHORS file.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted only as authorized by the OpenLDAP
 * Public License.
 *
 * A copy of this license is available in the file LICENSE in the
 * top-level directory of the distribution or, alternatively, at
 * &lt;http://www.OpenLDAP.org/license.html&gt;. */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_MSC_VER</name></cpp:ifdef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_MSC_VER</name> <operator>&gt;</operator> <literal type="number">1800</literal></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name> <name>:</name> <name>4464</name><name>)</name></cpp:pragma> <comment type="block">/* relative include path contains '..' */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name> <name>:</name> <name>4996</name><name>)</name></cpp:pragma> <comment type="block">/* The POSIX name is deprecated... */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>                          <comment type="block">/* _MSC_VER (warnings) */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xMDBX_TOOLS</name></cpp:macro></cpp:define> <comment type="block">/* Avoid using internal mdbx_assert() */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internals.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRINT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GLOBAL</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>mode</name> <init>= <expr><name>GLOBAL</name></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>flagbit</name> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>bit</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
}</block></struct></type> <name>flagbit</name>;</typedef>

<decl_stmt><decl><type><name>flagbit</name></type> <name><name>dbflags</name><index>[]</index></name> <init>= <expr><block>{<expr><block>{<expr><name>MDBX_REVERSEKEY</name></expr>, <expr><literal type="string">"reversekey"</literal></expr>}</block></expr>,
                     <expr><block>{<expr><name>MDBX_DUPSORT</name></expr>, <expr><literal type="string">"dupsort"</literal></expr>}</block></expr>,
                     <expr><block>{<expr><name>MDBX_INTEGERKEY</name></expr>, <expr><literal type="string">"integerkey"</literal></expr>}</block></expr>,
                     <expr><block>{<expr><name>MDBX_DUPFIXED</name></expr>, <expr><literal type="string">"dupfixed"</literal></expr>}</block></expr>,
                     <expr><block>{<expr><name>MDBX_INTEGERDUP</name></expr>, <expr><literal type="string">"integerdup"</literal></expr>}</block></expr>,
                     <expr><block>{<expr><name>MDBX_REVERSEDUP</name></expr>, <expr><literal type="string">"reversedup"</literal></expr>}</block></expr>,
                     <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>nullptr</name></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wingetopt.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>BOOL</name></type> <name>user_break</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>BOOL</name> <name>WINAPI</name></type> <name>ConsoleBreakHandlerRoutine</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type> <name>dwCtrlType</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>dwCtrlType</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>user_break</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* WINDOWS */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>sig_atomic_t</name></type> <name>user_break</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>signal_handler</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>sig</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>user_break</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !WINDOWS */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>hexc</name><index>[]</index></name> <init>= <expr><literal type="string">"0123456789abcdef"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dumpbyte</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><name><name>hexc</name><index>[<expr><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><name><name>hexc</name><index>[<expr><name>c</name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>text</name><parameter_list>(<parameter><decl><type><name>MDBX_val</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>c</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>iov_base</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>end</name> <operator>=</operator> <name>c</name> <operator>+</operator> <name><name>v</name><operator>-&gt;</operator><name>iov_len</name></name></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>c</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>isprint</name><argument_list>(<argument><expr><operator>*</operator><name>c</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>c</name> <operator>!=</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><operator>*</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>dumpbyte</name><argument_list>(<argument><expr><operator>*</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>c</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dumpval</name><parameter_list>(<parameter><decl><type><name>MDBX_val</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>c</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>iov_base</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>end</name> <operator>=</operator> <name>c</name> <operator>+</operator> <name><name>v</name><operator>-&gt;</operator><name>iov_len</name></name></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>c</name> <operator>&lt;</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>dumpbyte</name><argument_list>(<argument><expr><operator>*</operator><name>c</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
  <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>bool</name></type> <name>quiet</name> <init>= <expr><name>false</name></expr></init></decl>, <decl><type ref="prev"/><name>rescue</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prog</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>error</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: %s() error %d %s\n"</literal></expr></argument>, <argument><expr><name>prog</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>,
            <argument><expr><call><name>mdbx_strerror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Dump in BDB-compatible format */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dump_sdb</name><parameter_list>(<parameter><decl><type><name>MDBX_txn</name> <modifier>*</modifier></type><name>txn</name></decl></parameter>, <parameter><decl><type><name>MDBX_dbi</name></type> <name>dbi</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>mdbx_dbi_flags</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>dbi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_dbi_flags"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>MDBX_stat</name></type> <name>ms</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_dbi_stat</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>dbi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ms</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_dbi_stat"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>MDBX_envinfo</name></type> <name>info</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_env_info_ex</name><argument_list>(<argument><expr><call><name>mdbx_txn_env</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_env_info_ex"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"VERSION=3\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&amp;</operator> <name>GLOBAL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>mode</name> <operator>-=</operator> <name>GLOBAL</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>upper</name></name> <operator>!=</operator> <name><name>info</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>lower</name></name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"geometry=l%"</literal> <name>PRIu64</name> <literal type="string">",c%"</literal> <name>PRIu64</name> <literal type="string">",u%"</literal> <name>PRIu64</name> <literal type="string">",s%"</literal> <name>PRIu64</name>
             <literal type="string">",g%"</literal> <name>PRIu64</name> <literal type="string">"\n"</literal></expr></argument>,
             <argument><expr><name><name>info</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>lower</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>current</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>upper</name></name></expr></argument>,
             <argument><expr><name><name>info</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>shrink</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>grow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"mapsize=%"</literal> <name>PRIu64</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>upper</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"maxreaders=%u\n"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>mi_maxreaders</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>MDBX_canary</name></type> <name>canary</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_canary_get</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>canary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_canary_get"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>rc</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>canary</name><operator>.</operator><name>v</name></name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"canary=v%"</literal> <name>PRIu64</name> <literal type="string">",x%"</literal> <name>PRIu64</name> <literal type="string">",y%"</literal> <name>PRIu64</name> <literal type="string">",z%"</literal> <name>PRIu64</name> <literal type="string">"\n"</literal></expr></argument>,
             <argument><expr><name><name>canary</name><operator>.</operator><name>v</name></name></expr></argument>, <argument><expr><name><name>canary</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>canary</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>canary</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"format=%s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>mode</name> <operator>&amp;</operator> <name>PRINT</name></expr> ?</condition><then> <expr><literal type="string">"print"</literal></expr> </then><else>: <expr><literal type="string">"bytevalue"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"database=%s\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"type=btree\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"db_pagesize=%u\n"</literal></expr></argument>, <argument><expr><name><name>ms</name><operator>.</operator><name>ms_psize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* if (ms.ms_mod_txnid)
    printf("txnid=%" PRIaTXN "\n", ms.ms_mod_txnid);
  else if (!name)
    printf("txnid=%" PRIaTXN "\n", mdbx_txn_id(txn)); */</comment>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"duplicates=%d\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>MDBX_DUPSORT</name> <operator>|</operator> <name>MDBX_DUPFIXED</name> <operator>|</operator>
                                      <name>MDBX_INTEGERDUP</name> <operator>|</operator> <name>MDBX_REVERSEDUP</name><operator>)</operator><operator>)</operator></expr>
                                ?</condition><then> <expr><literal type="number">1</literal></expr>
                                </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>dbflags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bit</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name><name>dbflags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bit</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s=1\n"</literal></expr></argument>, <argument><expr><name><name>dbflags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

  <decl_stmt><decl><type><name>uint64_t</name></type> <name>sequence</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_dbi_sequence</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>dbi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sequence</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_dbi_sequence"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>sequence</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"sequence=%"</literal> <name>PRIu64</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>sequence</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"HEADER=END\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/*-------------------------------------------------*/</comment>

  <decl_stmt><decl><type><name>MDBX_cursor</name> <modifier>*</modifier></type><name>cursor</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MDBX_val</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>data</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_cursor_open</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>dbi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_cursor_open"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>MDBX_DEBUG</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>rescue</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>cursor</name><operator>-&gt;</operator><name>mc_flags</name></name> <operator>|=</operator> <name>C_SKIPORD</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>cursor</name><operator>-&gt;</operator><name>mc_xcursor</name></name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name><name>cursor</name><operator>-&gt;</operator><name>mc_xcursor</name><operator>-&gt;</operator><name>mx_cursor</name><operator>.</operator><name>mc_flags</name></name> <operator>|=</operator> <name>C_SKIPORD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <while>while <condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>mdbx_cursor_get</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>MDBX_NEXT</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator>
         <name>MDBX_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>user_break</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>MDBX_EINTR</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&amp;</operator> <name>PRINT</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>text</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>text</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>dumpval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>dumpval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"DATA=END\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>MDBX_NOTFOUND</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>MDBX_SUCCESS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_cursor_get"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>mdbx_cursor_close</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>usage</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
          <argument><expr><literal type="string">"usage: %s [-V] [-q] [-f file] [-l] [-p] [-r] [-a|-s subdb] "</literal>
          <literal type="string">"dbpath\n"</literal>
          <literal type="string">"  -V\t\tprint version and exit\n"</literal>
          <literal type="string">"  -q\t\tbe quiet\n"</literal>
          <literal type="string">"  -f\t\twrite to file instead of stdout\n"</literal>
          <literal type="string">"  -l\t\tlist subDBs and exit\n"</literal>
          <literal type="string">"  -p\t\tuse printable characters\n"</literal>
          <literal type="string">"  -r\t\trescue mode (ignore errors to dump corrupted DB)\n"</literal>
          <literal type="string">"  -a\t\tdump main DB and all subDBs\n"</literal>
          <literal type="string">"  -s name\tdump only the specified named subDB\n"</literal>
          <literal type="string">"  \t\tby default dump only the main DB\n"</literal></expr></argument>,
          <argument><expr><name>prog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>equal_or_greater</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>MDBX_val</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>MDBX_val</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>iov_len</name></name> <operator>==</operator> <name><name>b</name><operator>-&gt;</operator><name>iov_len</name></name> <operator>&amp;&amp;</operator>
          <call><name>memcmp</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>iov_base</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>iov_base</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>iov_len</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>
             ?</condition><then> <expr><literal type="number">0</literal></expr>
             </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MDBX_env</name> <modifier>*</modifier></type><name>env</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MDBX_txn</name> <modifier>*</modifier></type><name>txn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MDBX_dbi</name></type> <name>dbi</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>prog</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>envname</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>subname</name> <init>= <expr><name>nullptr</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf4free</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>envflags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>alldbs</name> <init>= <expr><name>false</name></expr></init></decl>, <decl><type ref="prev"/><name>list</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <while>while <condition>(<expr><operator>(</operator><name>i</name> <operator>=</operator> <call><name>getopt</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>,
                     <argument><expr><literal type="string">"a"</literal>
                     <literal type="string">"f:"</literal>
                     <literal type="string">"l"</literal>
                     <literal type="string">"n"</literal>
                     <literal type="string">"p"</literal>
                     <literal type="string">"s:"</literal>
                     <literal type="string">"V"</literal>
                     <literal type="string">"r"</literal>
                     <literal type="string">"q"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>
    <switch>switch <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="char">'V'</literal></expr>:</case>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"mdbx_dump version %d.%d.%d.%d\n"</literal>
             <literal type="string">" - source: %s %s, commit %s, tree %s\n"</literal>
             <literal type="string">" - anchor: %s\n"</literal>
             <literal type="string">" - build: %s for %s by %s\n"</literal>
             <literal type="string">" - flags: %s\n"</literal>
             <literal type="string">" - options: %s\n"</literal></expr></argument>,
             <argument><expr><name><name>mdbx_version</name><operator>.</operator><name>major</name></name></expr></argument>, <argument><expr><name><name>mdbx_version</name><operator>.</operator><name>minor</name></name></expr></argument>, <argument><expr><name><name>mdbx_version</name><operator>.</operator><name>release</name></name></expr></argument>,
             <argument><expr><name><name>mdbx_version</name><operator>.</operator><name>revision</name></name></expr></argument>, <argument><expr><name><name>mdbx_version</name><operator>.</operator><name>git</name><operator>.</operator><name>describe</name></name></expr></argument>,
             <argument><expr><name><name>mdbx_version</name><operator>.</operator><name>git</name><operator>.</operator><name>datetime</name></name></expr></argument>, <argument><expr><name><name>mdbx_version</name><operator>.</operator><name>git</name><operator>.</operator><name>commit</name></name></expr></argument>,
             <argument><expr><name><name>mdbx_version</name><operator>.</operator><name>git</name><operator>.</operator><name>tree</name></name></expr></argument>, <argument><expr><name>mdbx_sourcery_anchor</name></expr></argument>, <argument><expr><name><name>mdbx_build</name><operator>.</operator><name>datetime</name></name></expr></argument>,
             <argument><expr><name><name>mdbx_build</name><operator>.</operator><name>target</name></name></expr></argument>, <argument><expr><name><name>mdbx_build</name><operator>.</operator><name>compiler</name></name></expr></argument>, <argument><expr><name><name>mdbx_build</name><operator>.</operator><name>flags</name></name></expr></argument>,
             <argument><expr><name><name>mdbx_build</name><operator>.</operator><name>options</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>EXIT_SUCCESS</name></expr>;</return>
    <case>case <expr><literal type="char">'l'</literal></expr>:</case>
      <expr_stmt><expr><name>list</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <comment type="block">/*FALLTHROUGH*/</comment><empty_stmt>;</empty_stmt>
      <expr_stmt><expr><name>__fallthrough</name></expr>;</expr_stmt>
    <case>case <expr><literal type="char">'a'</literal></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>subname</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>alldbs</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'f'</literal></expr>:</case>
      <if_stmt><if>if <condition>(<expr><call><name>freopen</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>nullptr</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: %s: reopen: %s\n"</literal></expr></argument>, <argument><expr><name>prog</name></expr></argument>, <argument><expr><name>optarg</name></expr></argument>,
                <argument><expr><call><name>mdbx_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'n'</literal></expr>:</case>
      <break>break;</break>
    <case>case <expr><literal type="char">'p'</literal></expr>:</case>
      <expr_stmt><expr><name>mode</name> <operator>|=</operator> <name>PRINT</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'s'</literal></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>alldbs</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>subname</name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'q'</literal></expr>:</case>
      <expr_stmt><expr><name>quiet</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'r'</literal></expr>:</case>
      <expr_stmt><expr><name>rescue</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><name>optind</name> <operator>!=</operator> <name>argc</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name>SetConsoleCtrlHandler</name><argument_list>(<argument><expr><name>ConsoleBreakHandlerRoutine</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SIGPIPE</name></cpp:ifdef>
  <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>, <argument><expr><name>signal_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SIGHUP</name></cpp:ifdef>
  <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>, <argument><expr><name>signal_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>signal_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><name>signal_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !WINDOWS */</comment>

  <expr_stmt><expr><name>envname</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>optind</name></expr>]</index></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"mdbx_dump %s (%s, T-%s)\nRunning for %s...\n"</literal></expr></argument>,
            <argument><expr><name><name>mdbx_version</name><operator>.</operator><name>git</name><operator>.</operator><name>describe</name></name></expr></argument>, <argument><expr><name><name>mdbx_version</name><operator>.</operator><name>git</name><operator>.</operator><name>datetime</name></name></expr></argument>,
            <argument><expr><name><name>mdbx_version</name><operator>.</operator><name>git</name><operator>.</operator><name>tree</name></name></expr></argument>, <argument><expr><name>envname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_env_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_env_create"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>alldbs</name> <operator>||</operator> <name>subname</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_env_set_maxdbs</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_env_set_maxdbs"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>env_close</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_env_open</name><argument_list>(
      <argument><expr><name>env</name></expr></argument>, <argument><expr><name>envname</name></expr></argument>,
      <argument><expr><name>envflags</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>rescue</name></expr> ?</condition><then> <expr><name>MDBX_RDONLY</name> <operator>|</operator> <name>MDBX_EXCLUSIVE</name></expr> </then><else>: <expr><name>MDBX_RDONLY</name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_env_open"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>env_close</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_txn_begin</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>, <argument><expr><name>MDBX_TXN_RDONLY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_txn_begin"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>env_close</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_dbi_open</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subname</name></expr></argument>, <argument><expr><name>MDBX_DB_ACCEDE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_dbi_open"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>txn_abort</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>alldbs</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dbi</name> <operator>==</operator> <name>MAIN_DBI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>MDBX_cursor</name> <modifier>*</modifier></type><name>cursor</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_cursor_open</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>MAIN_DBI</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_cursor_open"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>txn_abort</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>MDBX_DEBUG</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>rescue</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>cursor</name><operator>-&gt;</operator><name>mc_flags</name></name> <operator>|=</operator> <name>C_SKIPORD</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>cursor</name><operator>-&gt;</operator><name>mc_xcursor</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>cursor</name><operator>-&gt;</operator><name>mc_xcursor</name><operator>-&gt;</operator><name>mx_cursor</name><operator>.</operator><name>mc_flags</name></name> <operator>|=</operator> <name>C_SKIPORD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>have_raw</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MDBX_val</name></type> <name>key</name></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>MDBX_SUCCESS</name> <operator>==</operator>
           <operator>(</operator><name>rc</name> <operator>=</operator> <call><name>mdbx_cursor_get</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>, <argument><expr><name>MDBX_NEXT_NODUP</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>user_break</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>MDBX_EINTR</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>memchr</name><argument_list>(<argument><expr><name><name>key</name><operator>.</operator><name>iov_base</name></name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>iov_len</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <continue>continue;</continue></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>subname</name> <operator>=</operator> <call><name>mdbx_realloc</name><argument_list>(<argument><expr><name>buf4free</name></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>iov_len</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>subname</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>MDBX_ENOMEM</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>buf4free</name> <operator>=</operator> <name>subname</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>subname</name></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>iov_base</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>iov_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>subname</name><index>[<expr><name><name>key</name><operator>.</operator><name>iov_len</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>MDBX_dbi</name></type> <name>sub_dbi</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_dbi_open_ex</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subname</name></expr></argument>, <argument><expr><name>MDBX_DB_ACCEDE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sub_dbi</name></expr></argument>,
                            <argument><expr><ternary><condition><expr><name>rescue</name></expr> ?</condition><then> <expr><name>equal_or_greater</name></expr> </then><else>: <expr><name>nullptr</name></expr></else></ternary></expr></argument>,
                            <argument><expr><ternary><condition><expr><name>rescue</name></expr> ?</condition><then> <expr><name>equal_or_greater</name></expr> </then><else>: <expr><name>nullptr</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>MDBX_INCOMPATIBLE</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>have_raw</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_dbi_open"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rescue</name></expr>)</condition><block type="pseudo"><block_content>
          <break>break;</break></block_content></block></if></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>list</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>subname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>dump_sdb</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>sub_dbi</name></expr></argument>, <argument><expr><name>subname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rescue</name></expr>)</condition><block type="pseudo"><block_content>
              <break>break;</break></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition><block type="pseudo"><block_content>
              <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: %s: ignore %s for `%s` and continue\n"</literal></expr></argument>, <argument><expr><name>prog</name></expr></argument>,
                      <argument><expr><name>envname</name></expr></argument>, <argument><expr><call><name>mdbx_strerror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>subname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <comment type="block">/* Here is a hack for rescue mode, don't do that:
             *  - we should restart transaction in case error due
             *    database corruption;
             *  - but we won't close cursor, reopen and re-positioning it
             *    for new a transaction;
             *  - this is possible since DB is opened in read-only exclusive
             *    mode and transaction is the same, i.e. has the same address
             *    and so on. */</comment>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_txn_reset</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_txn_reset"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <goto>goto <name>env_close</name>;</goto>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_txn_renew</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_txn_renew"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <goto>goto <name>env_close</name>;</goto>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_dbi_close</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>sub_dbi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_dbi_close"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>mdbx_cursor_close</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cursor</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>have_raw</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>count</name> <comment type="block">/* || rescue */</comment><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>dump_sdb</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>MAIN_DBI</name></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><operator>!</operator><name>count</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: %s does not contain multiple databases\n"</literal></expr></argument>, <argument><expr><name>prog</name></expr></argument>,
                <argument><expr><name>envname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>MDBX_NOTFOUND</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>dump_sdb</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>dbi</name></expr></argument>, <argument><expr><name>subname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <switch>switch <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
  <case>case <expr><name>MDBX_NOTFOUND</name></expr>:</case>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>MDBX_SUCCESS</name></expr>;</expr_stmt>
  <case>case <expr><name>MDBX_SUCCESS</name></expr>:</case>
    <break>break;</break>
  <case>case <expr><name>MDBX_EINTR</name></expr>:</case>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Interrupted by signal/user\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <break>break;</break>
  <default>default:</default>
    <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_cursor_get"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></switch>

  <expr_stmt><expr><call><name>mdbx_dbi_close</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>dbi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>txn_abort</name>:</label>
  <expr_stmt><expr><call><name>mdbx_txn_abort</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>env_close</name>:</label>
  <expr_stmt><expr><call><name>mdbx_env_close</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf4free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><ternary><condition><expr><name>rc</name></expr> ?</condition><then> <expr><name>EXIT_FAILURE</name></expr> </then><else>: <expr><name>EXIT_SUCCESS</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
</unit>
