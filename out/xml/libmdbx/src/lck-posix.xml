<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/libmdbx/src/lck-posix.c"><comment type="block">/*
 * Copyright 2015-2022 Leonid Yuriev &lt;leo@yuriev.ru&gt;
 * and other libmdbx authors: please see AUTHORS file.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted only as authorized by the OpenLDAP
 * Public License.
 *
 * A copy of this license is available in the file LICENSE in the
 * top-level directory of the distribution or, alternatively, at
 * &lt;http://www.OpenLDAP.org/license.html&gt;.
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if> <comment type="block">/* !Windows LCK-implementation */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internals.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MDBX_LOCKING</name> <operator>==</operator> <name>MDBX_LOCKING_SYSV</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sem.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MDBX_LOCKING == MDBX_LOCKING_SYSV */</comment>

<comment type="block">/*----------------------------------------------------------------------------*/</comment>
<comment type="block">/* global constructor/destructor */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__gnu_linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/utsname.h&gt;</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>xMDBX_ALLOY</name></cpp:ifndef>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>mdbx_linux_kernel_version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>mdbx_RunningOnWSL1</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* xMDBX_ALLOY */</comment>

<function><type><name>__cold</name> <specifier>static</specifier> <name>uint8_t</name></type> <name>probe_for_WSL</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>WSL</name> <init>= <expr><call><name>strstr</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><literal type="string">"WSL"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>WSL</name> <operator>&amp;&amp;</operator> <name><name>WSL</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'2'</literal> <operator>&amp;&amp;</operator> <name><name>WSL</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name><name>WSL</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</return></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>wsl</name> <init>= <expr><call><name>strstr</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><literal type="string">"wsl"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>wsl</name> <operator>&amp;&amp;</operator> <name><name>wsl</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'2'</literal> <operator>&amp;&amp;</operator> <name><name>wsl</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name><name>wsl</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>WSL</name> <operator>||</operator> <name>wsl</name> <operator>||</operator> <call><name>strcasestr</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><literal type="string">"Microsoft"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <comment type="block">/* Expecting no new kernel within WSL1, either it will explicitly
     * marked by an appropriate WSL-version hint. */</comment>
    <return>return <expr><ternary><condition><expr><operator>(</operator><name>mdbx_linux_kernel_version</name> <operator>&lt;</operator> <comment type="block">/* 4.19.x */</comment> <literal type="number">0x04130000</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* Linux */</comment>

<decl_stmt><decl><type><name>__cold</name> <specifier>static</specifier></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__constructor__</name><operator>)</operator></expr></argument>)</argument_list> <name>void</name>
<name>mdbx_global_constructor</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__gnu_linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name><name>struct</name> <name>utsname</name></name></type> <name>buffer</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>uname</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>buffer</name><operator>.</operator><name>release</name></name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>number</name> <init>= <expr><call><name>strtol</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>number</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name>number</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>number</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
          <expr_stmt><expr><name>mdbx_linux_kernel_version</name> <operator>+=</operator> <name>number</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">24</literal> <operator>-</operator> <name>i</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>
    <comment type="block">/* "Official" way of detecting WSL1 but not WSL2
     * https://github.com/Microsoft/WSL/issues/423#issuecomment-221627364
     *
     * WARNING: False negative detection of WSL1 will result in DATA LOSS!
     * So, the REQUIREMENTS for this code:
     *  1. MUST detect WSL1 without false-negatives.
     *  2. DESIRABLE detect WSL2 but without the risk of violating the first. */</comment>
    <expr_stmt><expr><name>mdbx_RunningOnWSL1</name> <operator>=</operator> <call><name>probe_for_WSL</name><argument_list>(<argument><expr><name><name>buffer</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator>
                         <call><name>probe_for_WSL</name><argument_list>(<argument><expr><name><name>buffer</name><operator>.</operator><name>sysname</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator>
                         <call><name>probe_for_WSL</name><argument_list>(<argument><expr><name><name>buffer</name><operator>.</operator><name>release</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* Linux */</comment>

  <expr_stmt><expr><call><name>mdbx_rthc_global_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>__cold</name> <specifier>static</specifier></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__destructor__</name><operator>)</operator></expr></argument>)</argument_list> <name>void</name>
<name>mdbx_global_destructor</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> <block>{<block_content>
  <expr_stmt><expr><call><name>mdbx_rthc_global_dtor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<comment type="block">/*----------------------------------------------------------------------------*/</comment>
<comment type="block">/* lck */</comment>

<comment type="block">/* ÐÐ¿Ð¸ÑÐ°Ð½Ð¸Ðµ ÑÐµÐ°Ð»Ð¸Ð·Ð°ÑÐ¸Ð¸ Ð±Ð»Ð¾ÐºÐ¸ÑÐ¾Ð²Ð¾Ðº Ð´Ð»Ñ POSIX &amp; Linux:
 *
 * lck-ÑÐ°Ð¹Ð» Ð¾ÑÐ¾Ð±ÑÐ°Ð¶Ð°ÐµÑÑÑ Ð² Ð¿Ð°Ð¼ÑÑÑ, Ð² Ð½ÑÐ¼ Ð¾ÑÐ³Ð°Ð½Ð¸Ð·ÑÐµÑÑÑ ÑÐ°Ð±Ð»Ð¸ÑÐ° ÑÐ¸ÑÐ°ÑÐµÐ»ÐµÐ¹ Ð¸
 * ÑÐ°Ð·Ð¼ÐµÑÐ°ÑÑÑÑ ÑÐ¾Ð²Ð¼ÐµÑÑÐ½Ð¾ Ð¸ÑÐ¿Ð¾Ð»ÑÐ·ÑÐµÐ¼ÑÐµ posix-Ð¼ÑÑÑÐµÐºÑÑ (futex). ÐÐ¾ÑÑÐµÐ´ÑÑÐ²Ð¾Ð¼
 * ÑÑÐ¸Ñ Ð¼ÑÑÑÐµÐºÑÐ¾Ð² (ÑÐ¼ struct MDBX_lockinfo) ÑÐµÐ°Ð»Ð¸Ð·ÑÑÑÑÑ:
 *  - ÐÐ»Ð¾ÐºÐ¸ÑÐ¾Ð²ÐºÐ° ÑÐ°Ð±Ð»Ð¸ÑÑ ÑÐ¸ÑÐ°ÑÐµÐ»ÐµÐ¹ Ð´Ð»Ñ ÑÐµÐ³Ð¸ÑÑÑÐ°ÑÐ¸Ð¸,
 *    Ñ.Ðµ. ÑÑÐ½ÐºÑÐ¸Ð¸ mdbx_rdt_lock() Ð¸ mdbx_rdt_unlock().
 *  - ÐÐ»Ð¾ÐºÐ¸ÑÐ¾Ð²ÐºÐ° ÐÐ Ð´Ð»Ñ Ð¿Ð¸ÑÑÑÐ¸Ñ ÑÑÐ°Ð½Ð·Ð°ÐºÑÐ¸Ð¹,
 *    Ñ.Ðµ. ÑÑÐ½ÐºÑÐ¸Ð¸ mdbx_txn_lock() Ð¸ mdbx_txn_unlock().
 *
 * ÐÑÑÐ°Ð»ÑÐ½Ð¾Ð¹ ÑÑÐ½ÐºÑÐ¸Ð¾Ð½Ð°Ð» ÑÐµÐ°Ð»Ð¸Ð·ÑÐµÑÑÑ Ð¾ÑÐ´ÐµÐ»ÑÐ½Ð¾ Ð¿Ð¾ÑÑÐµÐ´ÑÑÐ²Ð¾Ð¼ ÑÐ°Ð¹Ð»Ð¾Ð²ÑÑ Ð±Ð»Ð¾ÐºÐ¸ÑÐ¾Ð²Ð¾Ðº:
 *  - ÐÐµÑÐ²Ð¾Ð½Ð°ÑÐ°Ð»ÑÐ½ÑÐ¹ Ð·Ð°ÑÐ²Ð°Ñ ÐÐ Ð² ÑÐµÐ¶Ð¸Ð¼Ðµ exclusive/shared Ð¸ Ð¿Ð¾ÑÐ»ÐµÐ´ÑÑÑÐ¸Ð¹ Ð¿ÐµÑÐµÐ²Ð¾Ð´
 *    Ð² Ð¾Ð¿ÐµÑÐ°ÑÐ¸Ð¾Ð½Ð½ÑÐ¹ ÑÐµÐ¶Ð¸Ð¼, ÑÑÐ½ÐºÑÐ¸Ð¸ mdbx_lck_seize() Ð¸ mdbx_lck_downgrade().
 *  - ÐÑÐ¾Ð²ÐµÑÐºÐ° Ð¿ÑÐ¸ÑÑÑÑÑÐ²Ð¸Ðµ Ð¿ÑÐ¾ÑÐµÑÑÐ¾Ð²-ÑÐ¸ÑÐ°ÑÐµÐ»ÐµÐ¹,
 *    Ñ.Ðµ. ÑÑÐ½ÐºÑÐ¸Ð¸ mdbx_rpid_set(), mdbx_rpid_clear() Ð¸ mdbx_rpid_check().
 *
 * ÐÐ»Ñ Ð±Ð»Ð¾ÐºÐ¸ÑÐ¾Ð²ÐºÐ¸ ÑÐ°Ð¹Ð»Ð¾Ð² Ð¸ÑÐ¿Ð¾Ð»ÑÐ·ÑÐµÑÑÑ fcntl(F_SETLK), ÑÐ°Ðº ÐºÐ°Ðº:
 *  - lockf() Ð¾Ð¿ÐµÑÐ¸ÑÑÐµÑ ÑÐ¾Ð»ÑÐºÐ¾ ÑÐºÑÐºÐ»ÑÐ·Ð¸Ð²Ð½Ð¾Ð¹ Ð±Ð»Ð¾ÐºÐ¸ÑÐ¾Ð²ÐºÐ¾Ð¹ Ð¸ ÑÑÐµÐ±ÑÐµÑ
 *    Ð¾ÑÐºÑÑÑÐ¸Ñ ÑÐ°Ð¹Ð»Ð° Ð² RW-ÑÐµÐ¶Ð¸Ð¼Ðµ.
 *  - flock() Ð½Ðµ Ð³Ð°ÑÐ°Ð½ÑÐ¸ÑÑÐµÑ Ð°ÑÐ¾Ð¼Ð°ÑÐ½Ð¾ÑÑÐ¸ Ð¿ÑÐ¸ ÑÐ¼ÐµÐ½Ðµ Ð±Ð»Ð¾ÐºÐ¸ÑÐ¾Ð²Ð¾Ðº
 *    Ð¸ Ð¾Ð¿ÐµÑÐ¸ÑÑÐµÑ ÑÐ¾Ð»ÑÐºÐ¾ Ð²ÑÐµÐ¼ ÑÐ°Ð¹Ð»Ð¾Ð¼ ÑÐµÐ»Ð¸ÐºÐ¾Ð¼.
 *  - ÐÐ»Ñ ÐºÐ¾Ð½ÑÑÐ¾Ð»Ñ Ð¿ÑÐ¾ÑÐµÑÑÐ¾Ð²-ÑÐ¸ÑÐ°ÑÐµÐ»ÐµÐ¹ Ð¸ÑÐ¿Ð¾Ð»ÑÐ·ÑÑÑÑÑ Ð¾Ð´Ð½Ð¾Ð±Ð°Ð¹ÑÐ¾Ð²ÑÐµ
 *    range-Ð±Ð»Ð¾ÐºÐ¸ÑÐ¾Ð²ÐºÐ¸ lck-ÑÐ°Ð¹Ð»Ð° Ð¿Ð¾ÑÑÐµÐ´ÑÑÐ²Ð¾Ð¼ fcntl(F_SETLK). ÐÑÐ¸ ÑÑÐ¾Ð¼
 *    Ð² ÐºÐ°ÑÐµÑÑÐ²Ðµ Ð¿Ð¾Ð·Ð¸ÑÐ¸Ð¸ Ð¸ÑÐ¿Ð¾Ð»ÑÐ·ÑÐµÑÑÑ pid Ð¿ÑÐ¾ÑÐµÑÑÐ°-ÑÐ¸ÑÐ°ÑÐµÐ»Ñ.
 *  - ÐÐ»Ñ Ð¿ÐµÑÐ²Ð¾Ð½Ð°ÑÐ°Ð»ÑÐ½Ð¾Ð³Ð¾ Ð·Ð°ÑÐ²Ð°ÑÐ° Ð¸ shared/exclusive Ð²ÑÐ¿Ð¾Ð»Ð½ÑÐµÑÑÑ Ð±Ð»Ð¾ÐºÐ¸ÑÐ¾Ð²ÐºÐ°
 *    Ð¾ÑÐ½Ð¾Ð²Ð½Ð¾Ð³Ð¾ ÑÐ°Ð¹Ð»Ð° ÐÐ Ð¸ Ð¿ÑÐ¸ ÑÑÐ¿ÐµÑÐµ lck-ÑÐ°Ð¹Ð»Ð°.
 *
 * ----------------------------------------------------------------------------
 * Ð£ÐÐÐ ÐÐÐÐÐÐÐ«Ð ÐÐÐÐÐÐ ÐÐÐÐ Ð ÐÐÐÐÐ¡ÐÐÐÐ¡Ð¢Ð ÐÐ¢ Ð ÐÐÐÐÐ Ð Ð¡ÐÐ¡Ð¢ÐÐ¯ÐÐÐ¯
 *
 * Ð­ÐºÑÐºÐ»ÑÐ·Ð¸Ð²Ð½ÑÐ¹ ÑÐµÐ¶Ð¸Ð¼ Ð±ÐµÐ· lck-ÑÐ°Ð¹Ð»Ð°:
 *   = Ð·Ð°Ð±Ð»Ð¾ÐºÐ¸ÑÐ¾Ð²Ð°Ð½ Ð²ÐµÑÑ dxb-ÑÐ°Ð¹Ð» Ð¿Ð¾ÑÑÐµÐ´ÑÑÐ²Ð¾Ð¼ F_RDLCK Ð¸Ð»Ð¸ F_WRLCK,
 *     Ð² Ð·Ð°Ð²Ð¸ÑÐ¸Ð¼Ð¾ÑÑÐ¸ Ð¾Ñ MDBX_RDONLY.
 *
 * ÐÐµ-Ð¾Ð¿ÐµÑÐ°ÑÐ¸Ð¾Ð½Ð½ÑÐ¹ ÑÐµÐ¶Ð¸Ð¼ Ð½Ð° Ð²ÑÐµÐ¼Ñ Ð¿ÐµÑÐµ-Ð¸Ð½Ð¸ÑÐ¸Ð°Ð»Ð¸Ð·Ð°ÑÐ¸Ð¸ Ð¸ ÑÐ°Ð·ÑÑÑÐµÐ½Ð¸Ð¸ lck-ÑÐ°Ð¹Ð»Ð°:
 *   = F_WRLCK Ð±Ð»Ð¾ÐºÐ¸ÑÐ¾Ð²ÐºÐ° Ð¿ÐµÑÐ²Ð¾Ð³Ð¾ Ð±Ð°Ð¹ÑÐ° lck-ÑÐ°Ð¹Ð»Ð°, Ð´ÑÑÐ³Ð¸Ðµ Ð¿ÑÐ¾ÑÐµÑÑÑ Ð¶Ð´ÑÑ ÐµÑ
 *     ÑÐ½ÑÑÐ¸Ñ Ð¿ÑÐ¸ Ð¿Ð¾Ð»ÑÑÐµÐ½Ð¸Ð¸ F_RDLCK ÑÐµÑÐµÐ· F_SETLKW.
 *   - Ð±Ð»Ð¾ÐºÐ¸ÑÐ¾Ð²ÐºÐ¸ dxb-ÑÐ°Ð¹Ð»Ð° Ð¼Ð¾Ð³ÑÑ Ð¼ÐµÐ½ÑÑÑÑÑ Ð´Ð¾ ÑÐ½ÑÑÐ¸Ðµ ÑÐºÑÐºÐ»ÑÐ·Ð¸Ð²Ð½Ð¾Ð¹ Ð±Ð»Ð¾ÐºÐ¸ÑÐ¾Ð²ÐºÐ¸
 *    lck-ÑÐ°Ð¹Ð»Ð°:
 *       + Ð´Ð»Ñ ÐÐ-ÑÐºÑÐºÐ»ÑÐ·Ð¸Ð²Ð½Ð¾Ð³Ð¾ ÑÐµÐ¶Ð¸Ð¼Ð° Ð±Ð»Ð¾ÐºÐ¸ÑÐ¾Ð²ÐºÐ° pid-Ð±Ð°Ð¹ÑÐ° Ð² dxb-ÑÐ°Ð¹Ð»Ðµ
 *         Ð¿Ð¾ÑÑÐµÐ´ÑÑÐ²Ð¾Ð¼ F_RDLCK Ð¸Ð»Ð¸ F_WRLCK, Ð² Ð·Ð°Ð²Ð¸ÑÐ¸Ð¼Ð¾ÑÑÐ¸ Ð¾Ñ MDBX_RDONLY.
 *       + Ð´Ð»Ñ Ð­ÐÐ¡ÐÐÐ®ÐÐÐÐÐÐÐ ÑÐµÐ¶Ð¸Ð¼Ð° Ð±Ð»Ð¾ÐºÐ¸ÑÐ¾Ð²ÐºÐ° pid-Ð±Ð°Ð¹ÑÐ° Ð²ÑÐµÐ³Ð¾ dxb-ÑÐ°Ð¹Ð»Ð°
 *         Ð¿Ð¾ÑÑÐµÐ´ÑÑÐ²Ð¾Ð¼ F_RDLCK Ð¸Ð»Ð¸ F_WRLCK, Ð² Ð·Ð°Ð²Ð¸ÑÐ¸Ð¼Ð¾ÑÑÐ¸ Ð¾Ñ MDBX_RDONLY.
 *
 * ÐÐÐÐ ÐÐ¦ÐÐÐÐÐ«Ð ÑÐµÐ¶Ð¸Ð¼ Ñ lck-ÑÐ°Ð¹Ð»Ð¾Ð¼:
 *   = F_RDLCK Ð±Ð»Ð¾ÐºÐ¸ÑÐ¾Ð²ÐºÐ° Ð¿ÐµÑÐ²Ð¾Ð³Ð¾ Ð±Ð°Ð¹ÑÐ° lck-ÑÐ°Ð¹Ð»Ð°, Ð´ÑÑÐ³Ð¸Ðµ Ð¿ÑÐ¾ÑÐµÑÑÑ Ð½Ðµ Ð¼Ð¾Ð³ÑÑ
 *     Ð¿Ð¾Ð»ÑÑÐ¸ÑÑ F_WRLCK Ð¸ ÑÐ°ÐºÐ¸Ð¼ Ð¾Ð±ÑÐ°Ð·Ð¾Ð¼ Ð²Ð¸Ð´ÑÑ ÑÑÐ¾ ÐÐ Ð¸ÑÐ¿Ð¾Ð»ÑÐ·ÑÐµÑÑÑ.
 *   + F_WRLCK Ð±Ð»Ð¾ÐºÐ¸ÑÐ¾Ð²ÐºÐ° pid-Ð±Ð°Ð¹ÑÐ° Ð² clk-ÑÐ°Ð¹Ð»Ðµ Ð¿Ð¾ÑÐ»Ðµ Ð¿ÐµÑÐ²Ð¾Ð¹ ÑÑÐ°Ð½Ð·Ð°ÐºÑÐ¸Ð¸ ÑÑÐµÐ½Ð¸Ñ.
 *   + Ð´Ð»Ñ ÐÐ-ÑÐºÑÐºÐ»ÑÐ·Ð¸Ð²Ð½Ð¾Ð³Ð¾ ÑÐµÐ¶Ð¸Ð¼Ð° Ð±Ð»Ð¾ÐºÐ¸ÑÐ¾Ð²ÐºÐ° pid-Ð±Ð°Ð¹ÑÐ° Ð² dxb-ÑÐ°Ð¹Ð»Ðµ
 *     Ð¿Ð¾ÑÑÐµÐ´ÑÑÐ²Ð¾Ð¼ F_RDLCK Ð¸Ð»Ð¸ F_WRLCK, Ð² Ð·Ð°Ð²Ð¸ÑÐ¸Ð¼Ð¾ÑÑÐ¸ Ð¾Ñ MDBX_RDONLY.
 *   + Ð´Ð»Ñ Ð­ÐÐ¡ÐÐÐ®ÐÐÐÐÐÐÐ ÑÐµÐ¶Ð¸Ð¼Ð° Ð±Ð»Ð¾ÐºÐ¸ÑÐ¾Ð²ÐºÐ° pid-Ð±Ð°Ð¹ÑÐ° Ð²ÑÐµÐ³Ð¾ dxb-ÑÐ°Ð¹Ð»Ð°
 *     Ð¿Ð¾ÑÑÐµÐ´ÑÑÐ²Ð¾Ð¼ F_RDLCK Ð¸Ð»Ð¸ F_WRLCK, Ð² Ð·Ð°Ð²Ð¸ÑÐ¸Ð¼Ð¾ÑÑÐ¸ Ð¾Ñ MDBX_RDONLY.
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MDBX_USE_OFDLOCKS</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>op_setlk</name></decl>, <decl><type ref="prev"/><name>op_setlkw</name></decl>, <decl><type ref="prev"/><name>op_getlk</name></decl>;</decl_stmt>
<function><type><name>__cold</name> <specifier>static</specifier> <name>void</name></type> <name>choice_fcntl</name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>op_setlk</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>op_setlkw</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>op_getlk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>mdbx_runtime_flags</name> <operator>&amp;</operator> <name>MDBX_DBG_LEGACY_MULTIOPEN</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__gnu_linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>
      <operator>&amp;&amp;</operator> <name>mdbx_linux_kernel_version</name> <operator>&gt;</operator>
             <literal type="number">0x030f0000</literal></expr> <comment type="block">/* OFD locks are available since 3.15, but engages here
                           only for 3.16 and later kernels (i.e. LTS) because
                           of reliability reasons */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>                  <comment type="block">/* linux */</comment>
  )</condition> <block>{<block_content>
    <expr_stmt><expr><name>op_setlk</name> <operator>=</operator> <name>F_OFD_SETLK</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>op_setlkw</name> <operator>=</operator> <name>F_OFD_SETLKW</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>op_getlk</name> <operator>=</operator> <name>F_OFD_GETLK</name></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>op_setlk</name> <operator>=</operator> <name>F_SETLK</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>op_setlkw</name> <operator>=</operator> <name>F_SETLKW</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>op_getlk</name> <operator>=</operator> <name>F_GETLK</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>op_setlk</name></cpp:macro> <cpp:value>F_SETLK</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>op_setlkw</name></cpp:macro> <cpp:value>F_SETLKW</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>op_getlk</name></cpp:macro> <cpp:value>F_GETLK</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MDBX_USE_OFDLOCKS */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>OFF_T_MAX</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFF_T_MAX</name></cpp:macro>                                                              \
  <cpp:value>((sizeof(off_t) &gt; 4 ? INT64_MAX : INT32_MAX) &amp; ~(size_t)0xffff)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lck_op</name><parameter_list>(<parameter><decl><type><name>mdbx_filehandle_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lck</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>offset</name></decl></parameter>,
                  <parameter><decl><type><name>off_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>mdbx_jitter4testing</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>flock</name></name></type> <name>lock_op</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock_op</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lock_op</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>lock_op</name><operator>.</operator><name>l_type</name></name> <operator>=</operator> <name>lck</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>lock_op</name><operator>.</operator><name>l_whence</name></name> <operator>=</operator> <name>SEEK_SET</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>lock_op</name><operator>.</operator><name>l_start</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>lock_op</name><operator>.</operator><name>l_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>fcntl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lock_op</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>mdbx_jitter4testing</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>==</operator> <name>op_getlk</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Checks reader by pid. Returns:
         *   MDBX_RESULT_TRUE   - if pid is live (reader holds a lock).
         *   MDBX_RESULT_FALSE  - if pid is dead (a lock could be placed). */</comment>
        <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>lock_op</name><operator>.</operator><name>l_type</name></name> <operator>==</operator> <name>F_UNLCK</name><operator>)</operator></expr> ?</condition><then> <expr><name>MDBX_RESULT_FALSE</name></expr>
                                           </then><else>: <expr><name>MDBX_RESULT_TRUE</name></expr></else></ternary></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><name>MDBX_SUCCESS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MDBX_USE_OFDLOCKS</name></expr></cpp:if>
    <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>EINVAL</name> <operator>&amp;&amp;</operator>
        <operator>(</operator><name>cmd</name> <operator>==</operator> <name>F_OFD_SETLK</name> <operator>||</operator> <name>cmd</name> <operator>==</operator> <name>F_OFD_SETLKW</name> <operator>||</operator> <name>cmd</name> <operator>==</operator> <name>F_OFD_GETLK</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <comment type="block">/* fallback to non-OFD locks */</comment>
      <if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>==</operator> <name>F_OFD_SETLK</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>cmd</name> <operator>=</operator> <name>F_SETLK</name></expr>;</expr_stmt></block_content></block></if>
      <if type="elseif">else if <condition>(<expr><name>cmd</name> <operator>==</operator> <name>F_OFD_SETLKW</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>cmd</name> <operator>=</operator> <name>F_SETLKW</name></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>cmd</name> <operator>=</operator> <name>F_GETLK</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
      <expr_stmt><expr><name>op_setlk</name> <operator>=</operator> <name>F_SETLK</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>op_setlkw</name> <operator>=</operator> <name>F_SETLKW</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>op_getlk</name> <operator>=</operator> <name>F_GETLK</name></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MDBX_USE_OFDLOCKS */</comment>
    <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>EINTR</name> <operator>||</operator> <name>cmd</name> <operator>==</operator> <name>op_setlkw</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>mdbx_assert</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>, <argument><expr><call><name>MDBX_IS_ERROR</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>rc</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>MDBX_INTERNAL_FUNC</name> <name>int</name></type> <name>mdbx_lockfile</name><parameter_list>(<parameter><decl><type><name>mdbx_filehandle_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>wait</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MDBX_USE_OFDLOCKS</name></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>op_setlk</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>choice_fcntl</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MDBX_USE_OFDLOCKS */</comment>
  <return>return <expr><call><name>lck_op</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><ternary><condition><expr><name>wait</name></expr> ?</condition><then> <expr><name>op_setlkw</name></expr> </then><else>: <expr><name>op_setlk</name></expr></else></ternary></expr></argument>, <argument><expr><name>F_WRLCK</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OFF_T_MAX</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>MDBX_INTERNAL_FUNC</name> <name>int</name></type> <name>mdbx_rpid_set</name><parameter_list>(<parameter><decl><type><name>MDBX_env</name> <modifier>*</modifier></type><name>env</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>env</name><operator>-&gt;</operator><name>me_lfd</name></name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>env</name><operator>-&gt;</operator><name>me_pid</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>mdbx_getpid</name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>env</name><operator>-&gt;</operator><name>me_pid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>MDBX_PANIC</name></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><call><name>lck_op</name><argument_list>(<argument><expr><name><name>env</name><operator>-&gt;</operator><name>me_lfd</name></name></expr></argument>, <argument><expr><name>op_setlk</name></expr></argument>, <argument><expr><name>F_WRLCK</name></expr></argument>, <argument><expr><name><name>env</name><operator>-&gt;</operator><name>me_pid</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>MDBX_INTERNAL_FUNC</name> <name>int</name></type> <name>mdbx_rpid_clear</name><parameter_list>(<parameter><decl><type><name>MDBX_env</name> <modifier>*</modifier></type><name>env</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>env</name><operator>-&gt;</operator><name>me_lfd</name></name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>env</name><operator>-&gt;</operator><name>me_pid</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>lck_op</name><argument_list>(<argument><expr><name><name>env</name><operator>-&gt;</operator><name>me_lfd</name></name></expr></argument>, <argument><expr><name>op_setlk</name></expr></argument>, <argument><expr><name>F_UNLCK</name></expr></argument>, <argument><expr><name><name>env</name><operator>-&gt;</operator><name>me_pid</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>MDBX_INTERNAL_FUNC</name> <name>int</name></type> <name>mdbx_rpid_check</name><parameter_list>(<parameter><decl><type><name>MDBX_env</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>pid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>env</name><operator>-&gt;</operator><name>me_lfd</name></name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pid</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>lck_op</name><argument_list>(<argument><expr><name><name>env</name><operator>-&gt;</operator><name>me_lfd</name></name></expr></argument>, <argument><expr><name>op_getlk</name></expr></argument>, <argument><expr><name>F_WRLCK</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*---------------------------------------------------------------------------*/</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MDBX_LOCKING</name> <operator>&gt;</operator> <name>MDBX_LOCKING_SYSV</name></expr></cpp:if>
<function><type><name>MDBX_INTERNAL_FUNC</name> <name>int</name></type> <name>mdbx_ipclock_stub</name><parameter_list>(<parameter><decl><type><name>mdbx_ipclock_t</name> <modifier>*</modifier></type><name>ipc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MDBX_LOCKING</name> <operator>==</operator> <name>MDBX_LOCKING_POSIX1988</name></expr></cpp:if>
  <return>return <expr><ternary><condition><expr><call><name>sem_init</name><argument_list>(<argument><expr><name>ipc</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>errno</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>MDBX_LOCKING</name> <operator>==</operator> <name>MDBX_LOCKING_POSIX2001</name> <operator>||</operator>                                \
    <name>MDBX_LOCKING</name> <operator>==</operator> <name>MDBX_LOCKING_POSIX2008</name></expr></cpp:elif>
  <return>return <expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><name>ipc</name></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"FIXME"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>MDBX_INTERNAL_FUNC</name> <name>int</name></type> <name>mdbx_ipclock_destroy</name><parameter_list>(<parameter><decl><type><name>mdbx_ipclock_t</name> <modifier>*</modifier></type><name>ipc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><name>MDBX_LOCKING</name> <operator>==</operator> <name>MDBX_LOCKING_POSIX1988</name></expr></condition></ternary></expr></cpp:if>
  <return>return <expr><ternary><condition><expr><call><name>sem_destroy</name><argument_list>(<argument><expr><name>ipc</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>errno</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>MDBX_LOCKING</name> <operator>==</operator> <name>MDBX_LOCKING_POSIX2001</name> <operator>||</operator>                                \
    <name>MDBX_LOCKING</name> <operator>==</operator> <name>MDBX_LOCKING_POSIX2008</name></expr></cpp:elif>
  <return>return <expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><name>ipc</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"FIXME"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MDBX_LOCKING &gt; MDBX_LOCKING_SYSV */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_fstat</name><parameter_list>(<parameter><decl><type><name>MDBX_env</name> <modifier>*</modifier></type><name>env</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>MDBX_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>fstat</name><argument_list>(<argument><expr><name><name>env</name><operator>-&gt;</operator><name>me_lazy_fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mdbx_error</name><argument_list>(<argument><expr><literal type="string">"fstat(%s), err %d"</literal></expr></argument>, <argument><expr><literal type="string">"DXB"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>S_ISREG</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>st</name><operator>.</operator><name>st_nlink</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>EBADFD</name></cpp:ifdef>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>EBADFD</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>EPERM</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>mdbx_error</name><argument_list>(<argument><expr><literal type="string">"%s %s, err %d"</literal></expr></argument>, <argument><expr><literal type="string">"DXB"</literal></expr></argument>,
               <argument><expr><ternary><condition><expr><operator>(</operator><name><name>st</name><operator>.</operator><name>st_nlink</name></name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"file was removed"</literal></expr> </then><else>: <expr><literal type="string">"not a regular file"</literal></expr></else></ternary></expr></argument>,
               <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>st</name><operator>.</operator><name>st_size</name></name> <operator>&lt;</operator> <operator>(</operator><name>off_t</name><operator>)</operator><operator>(</operator><name>MDBX_MIN_PAGESIZE</name> <operator>*</operator> <name>NUM_METAS</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mdbx_verbose</name><argument_list>(<argument><expr><literal type="string">"dxb-file is too short (%u), exclusive-lock needed"</literal></expr></argument>,
                 <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>MDBX_RESULT_TRUE</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">//----------------------------------------------------------------------------</comment>

  <if_stmt><if>if <condition>(<expr><call><name>fstat</name><argument_list>(<argument><expr><name><name>env</name><operator>-&gt;</operator><name>me_lfd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mdbx_error</name><argument_list>(<argument><expr><literal type="string">"fstat(%s), err %d"</literal></expr></argument>, <argument><expr><literal type="string">"LCK"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>S_ISREG</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>st</name><operator>.</operator><name>st_nlink</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>EBADFD</name></cpp:ifdef>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>EBADFD</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>EPERM</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>mdbx_error</name><argument_list>(<argument><expr><literal type="string">"%s %s, err %d"</literal></expr></argument>, <argument><expr><literal type="string">"LCK"</literal></expr></argument>,
               <argument><expr><ternary><condition><expr><operator>(</operator><name><name>st</name><operator>.</operator><name>st_nlink</name></name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"file was removed"</literal></expr> </then><else>: <expr><literal type="string">"not a regular file"</literal></expr></else></ternary></expr></argument>,
               <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Checking file size for detect the situation when we got the shared lock
   * immediately after mdbx_lck_destroy(). */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>st</name><operator>.</operator><name>st_size</name></name> <operator>&lt;</operator> <operator>(</operator><name>off_t</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>MDBX_lockinfo</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MDBX_reader</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mdbx_verbose</name><argument_list>(<argument><expr><literal type="string">"lck-file is too short (%u), exclusive-lock needed"</literal></expr></argument>,
                 <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>MDBX_RESULT_TRUE</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>__cold</name> <name>MDBX_INTERNAL_FUNC</name> <name>int</name></type> <name>mdbx_lck_seize</name><parameter_list>(<parameter><decl><type><name>MDBX_env</name> <modifier>*</modifier></type><name>env</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>env</name><operator>-&gt;</operator><name>me_lazy_fd</name></name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>mdbx_getpid</name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>env</name><operator>-&gt;</operator><name>me_pid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>MDBX_PANIC</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MDBX_USE_OFDLOCKS</name></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>op_setlk</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>choice_fcntl</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MDBX_USE_OFDLOCKS */</comment>

  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>MDBX_SUCCESS</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__gnu_linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>mdbx_RunningOnWSL1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>ENOLCK</name></expr> <comment type="block">/* No record locks available */</comment>;</expr_stmt>
    <expr_stmt><expr><call><name>mdbx_error</name><argument_list>(<argument><expr><literal type="string">"%s, err %u"</literal></expr></argument>,
               <argument><expr><literal type="string">"WSL1 (Windows Subsystem for Linux) is mad and trouble-full, "</literal>
               <literal type="string">"injecting failure to avoid data loss"</literal></expr></argument>,
               <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* Linux */</comment>

  <if_stmt><if>if <condition>(<expr><name><name>env</name><operator>-&gt;</operator><name>me_lfd</name></name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>
    <comment type="block">/* LY: without-lck mode (e.g. exclusive or on read-only filesystem) */</comment>
    <expr_stmt><expr><name>rc</name> <operator>=</operator>
        <call><name>lck_op</name><argument_list>(<argument><expr><name><name>env</name><operator>-&gt;</operator><name>me_lazy_fd</name></name></expr></argument>, <argument><expr><name>op_setlk</name></expr></argument>,
               <argument><expr><ternary><condition><expr><operator>(</operator><name><name>env</name><operator>-&gt;</operator><name>me_flags</name></name> <operator>&amp;</operator> <name>MDBX_RDONLY</name><operator>)</operator></expr> ?</condition><then> <expr><name>F_RDLCK</name></expr> </then><else>: <expr><name>F_WRLCK</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OFF_T_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>mdbx_error</name><argument_list>(<argument><expr><literal type="string">"%s, err %u"</literal></expr></argument>, <argument><expr><literal type="string">"without-lck"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>mdbx_assert</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>MDBX_IS_ERROR</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>rc</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>MDBX_RESULT_TRUE</name></expr> <comment type="block">/* Done: return with exclusive locking. */</comment>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_POSIX_PRIORITY_SCHEDULING</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_POSIX_PRIORITY_SCHEDULING</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></cpp:if>
  <expr_stmt><expr><call><name>sched_yield</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>retry</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>MDBX_RESULT_TRUE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>lck_op</name><argument_list>(<argument><expr><name><name>env</name><operator>-&gt;</operator><name>me_lfd</name></name></expr></argument>, <argument><expr><name>op_setlk</name></expr></argument>, <argument><expr><name>F_UNLCK</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>mdbx_error</name><argument_list>(<argument><expr><literal type="string">"%s, err %u"</literal></expr></argument>, <argument><expr><literal type="string">"unlock-before-retry"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>mdbx_assert</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>MDBX_IS_ERROR</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>rc</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Firstly try to get exclusive locking.  */</comment>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>lck_op</name><argument_list>(<argument><expr><name><name>env</name><operator>-&gt;</operator><name>me_lfd</name></name></expr></argument>, <argument><expr><name>op_setlk</name></expr></argument>, <argument><expr><name>F_WRLCK</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>MDBX_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>check_fstat</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>MDBX_IS_ERROR</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>

  <label><name>continue_dxb_exclusive</name>:</label>
    <expr_stmt><expr><name>rc</name> <operator>=</operator>
        <call><name>lck_op</name><argument_list>(<argument><expr><name><name>env</name><operator>-&gt;</operator><name>me_lazy_fd</name></name></expr></argument>, <argument><expr><name>op_setlk</name></expr></argument>,
               <argument><expr><ternary><condition><expr><operator>(</operator><name><name>env</name><operator>-&gt;</operator><name>me_flags</name></name> <operator>&amp;</operator> <name>MDBX_RDONLY</name><operator>)</operator></expr> ?</condition><then> <expr><name>F_RDLCK</name></expr> </then><else>: <expr><name>F_WRLCK</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OFF_T_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>MDBX_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>MDBX_RESULT_TRUE</name></expr> <comment type="block">/* Done: return with exclusive locking. */</comment>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>check_fstat</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>MDBX_IS_ERROR</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* the cause may be a collision with POSIX's file-lock recovery. */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>rc</name> <operator>==</operator> <name>EAGAIN</name> <operator>||</operator> <name>rc</name> <operator>==</operator> <name>EACCES</name> <operator>||</operator> <name>rc</name> <operator>==</operator> <name>EBUSY</name> <operator>||</operator> <name>rc</name> <operator>==</operator> <name>EWOULDBLOCK</name> <operator>||</operator>
          <name>rc</name> <operator>==</operator> <name>EDEADLK</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>mdbx_error</name><argument_list>(<argument><expr><literal type="string">"%s, err %u"</literal></expr></argument>, <argument><expr><literal type="string">"dxb-exclusive"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>mdbx_assert</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>MDBX_IS_ERROR</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>rc</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Fallback to lck-shared */</comment>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>rc</name> <operator>==</operator> <name>EAGAIN</name> <operator>||</operator> <name>rc</name> <operator>==</operator> <name>EACCES</name> <operator>||</operator> <name>rc</name> <operator>==</operator> <name>EBUSY</name> <operator>||</operator>
               <name>rc</name> <operator>==</operator> <name>EWOULDBLOCK</name> <operator>||</operator> <name>rc</name> <operator>==</operator> <name>EDEADLK</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mdbx_error</name><argument_list>(<argument><expr><literal type="string">"%s, err %u"</literal></expr></argument>, <argument><expr><literal type="string">"try-exclusive"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mdbx_assert</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>MDBX_IS_ERROR</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Here could be one of two:
   *  - mdbx_lck_destroy() from the another process was hold the lock
   *    during a destruction.
   *  - either mdbx_lck_seize() from the another process was got the exclusive
   *    lock and doing initialization.
   * For distinguish these cases will use size of the lck-file later. */</comment>

  <comment type="block">/* Wait for lck-shared now. */</comment>
  <comment type="block">/* Here may be await during transient processes, for instance until another
   * competing process doesn't call lck_downgrade(). */</comment>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>lck_op</name><argument_list>(<argument><expr><name><name>env</name><operator>-&gt;</operator><name>me_lfd</name></name></expr></argument>, <argument><expr><name>op_setlkw</name></expr></argument>, <argument><expr><name>F_RDLCK</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mdbx_error</name><argument_list>(<argument><expr><literal type="string">"%s, err %u"</literal></expr></argument>, <argument><expr><literal type="string">"try-shared"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mdbx_assert</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>MDBX_IS_ERROR</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>check_fstat</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>MDBX_RESULT_TRUE</name></expr>)</condition><block type="pseudo"><block_content>
    <goto>goto <name>retry</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mdbx_error</name><argument_list>(<argument><expr><literal type="string">"%s, err %u"</literal></expr></argument>, <argument><expr><literal type="string">"lck_fstat"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* got shared, retry exclusive */</comment>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>lck_op</name><argument_list>(<argument><expr><name><name>env</name><operator>-&gt;</operator><name>me_lfd</name></name></expr></argument>, <argument><expr><name>op_setlk</name></expr></argument>, <argument><expr><name>F_WRLCK</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>MDBX_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
    <goto>goto <name>continue_dxb_exclusive</name>;</goto></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>rc</name> <operator>==</operator> <name>EAGAIN</name> <operator>||</operator> <name>rc</name> <operator>==</operator> <name>EACCES</name> <operator>||</operator> <name>rc</name> <operator>==</operator> <name>EBUSY</name> <operator>||</operator> <name>rc</name> <operator>==</operator> <name>EWOULDBLOCK</name> <operator>||</operator>
        <name>rc</name> <operator>==</operator> <name>EDEADLK</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mdbx_error</name><argument_list>(<argument><expr><literal type="string">"%s, err %u"</literal></expr></argument>, <argument><expr><literal type="string">"try-exclusive"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mdbx_assert</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>MDBX_IS_ERROR</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Lock against another process operating in without-lck or exclusive mode. */</comment>
  <expr_stmt><expr><name>rc</name> <operator>=</operator>
      <call><name>lck_op</name><argument_list>(<argument><expr><name><name>env</name><operator>-&gt;</operator><name>me_lazy_fd</name></name></expr></argument>, <argument><expr><name>op_setlk</name></expr></argument>,
             <argument><expr><ternary><condition><expr><operator>(</operator><name><name>env</name><operator>-&gt;</operator><name>me_flags</name></name> <operator>&amp;</operator> <name>MDBX_RDONLY</name><operator>)</operator></expr> ?</condition><then> <expr><name>F_RDLCK</name></expr> </then><else>: <expr><name>F_WRLCK</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>env</name><operator>-&gt;</operator><name>me_pid</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mdbx_error</name><argument_list>(<argument><expr><literal type="string">"%s, err %u"</literal></expr></argument>, <argument><expr><literal type="string">"lock-against-without-lck"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mdbx_assert</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>MDBX_IS_ERROR</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Done: return with shared locking. */</comment>
  <return>return <expr><name>MDBX_RESULT_FALSE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>MDBX_INTERNAL_FUNC</name> <name>int</name></type> <name>mdbx_lck_downgrade</name><parameter_list>(<parameter><decl><type><name>MDBX_env</name> <modifier>*</modifier></type><name>env</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>env</name><operator>-&gt;</operator><name>me_lfd</name></name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>mdbx_getpid</name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>env</name><operator>-&gt;</operator><name>me_pid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>MDBX_PANIC</name></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>MDBX_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>env</name><operator>-&gt;</operator><name>me_flags</name></name> <operator>&amp;</operator> <name>MDBX_EXCLUSIVE</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>lck_op</name><argument_list>(<argument><expr><name><name>env</name><operator>-&gt;</operator><name>me_lazy_fd</name></name></expr></argument>, <argument><expr><name>op_setlk</name></expr></argument>, <argument><expr><name>F_UNLCK</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>env</name><operator>-&gt;</operator><name>me_pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>MDBX_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>lck_op</name><argument_list>(<argument><expr><name><name>env</name><operator>-&gt;</operator><name>me_lazy_fd</name></name></expr></argument>, <argument><expr><name>op_setlk</name></expr></argument>, <argument><expr><name>F_UNLCK</name></expr></argument>, <argument><expr><name><name>env</name><operator>-&gt;</operator><name>me_pid</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
                  <argument><expr><name>OFF_T_MAX</name> <operator>-</operator> <name><name>env</name><operator>-&gt;</operator><name>me_pid</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>MDBX_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>lck_op</name><argument_list>(<argument><expr><name><name>env</name><operator>-&gt;</operator><name>me_lfd</name></name></expr></argument>, <argument><expr><name>op_setlk</name></expr></argument>, <argument><expr><name>F_RDLCK</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>rc</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mdbx_error</name><argument_list>(<argument><expr><literal type="string">"%s, err %u"</literal></expr></argument>, <argument><expr><literal type="string">"lck"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>MDBX_IS_ERROR</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>__cold</name> <name>MDBX_INTERNAL_FUNC</name> <name>int</name></type> <name>mdbx_lck_destroy</name><parameter_list>(<parameter><decl><type><name>MDBX_env</name> <modifier>*</modifier></type><name>env</name></decl></parameter>,
                                               <parameter><decl><type><name>MDBX_env</name> <modifier>*</modifier></type><name>inprocess_neighbor</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>mdbx_getpid</name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>env</name><operator>-&gt;</operator><name>me_pid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>MDBX_PANIC</name></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>MDBX_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>lck_info</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MDBX_lockinfo</name> <modifier>*</modifier></type><name>lck</name> <init>= <expr><name><name>env</name><operator>-&gt;</operator><name>me_lck_mmap</name><operator>.</operator><name>lck</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>env</name><operator>-&gt;</operator><name>me_lfd</name></name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>inprocess_neighbor</name> <operator>&amp;&amp;</operator> <name>lck</name> <operator>&amp;&amp;</operator>
      <comment type="block">/* try get exclusive access */</comment>
      <call><name>lck_op</name><argument_list>(<argument><expr><name><name>env</name><operator>-&gt;</operator><name>me_lfd</name></name></expr></argument>, <argument><expr><name>op_setlk</name></expr></argument>, <argument><expr><name>F_WRLCK</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OFF_T_MAX</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
      <comment type="block">/* if LCK was not removed */</comment>
      <call><name>fstat</name><argument_list>(<argument><expr><name><name>env</name><operator>-&gt;</operator><name>me_lfd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lck_info</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>lck_info</name><operator>.</operator><name>st_nlink</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
      <call><name>lck_op</name><argument_list>(<argument><expr><name><name>env</name><operator>-&gt;</operator><name>me_lazy_fd</name></name></expr></argument>, <argument><expr><name>op_setlk</name></expr></argument>,
             <argument><expr><ternary><condition><expr><operator>(</operator><name><name>env</name><operator>-&gt;</operator><name>me_flags</name></name> <operator>&amp;</operator> <name>MDBX_RDONLY</name><operator>)</operator></expr> ?</condition><then> <expr><name>F_RDLCK</name></expr> </then><else>: <expr><name>F_WRLCK</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
             <argument><expr><name>OFF_T_MAX</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

    <expr_stmt><expr><call><name>mdbx_verbose</name><argument_list>(<argument><expr><literal type="string">"%p got exclusive, drown locks"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MDBX_LOCKING</name> <operator>==</operator> <name>MDBX_LOCKING_SYSV</name></expr></cpp:if>
    <if_stmt><if>if <condition>(<expr><name><name>env</name><operator>-&gt;</operator><name>me_sysv_ipc</name><operator>.</operator><name>semid</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <ternary><condition><expr><call><name>semctl</name><argument_list>(<argument><expr><name><name>env</name><operator>-&gt;</operator><name>me_sysv_ipc</name><operator>.</operator><name>semid</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>IPC_RMID</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>errno</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_ipclock_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lck</name><operator>-&gt;</operator><name>mti_rlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_ipclock_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lck</name><operator>-&gt;</operator><name>mti_wlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MDBX_LOCKING */</comment>

    <expr_stmt><expr><call><name>mdbx_assert</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>synced</name> <init>= <expr><name><name>lck</name><operator>-&gt;</operator><name>mti_unsynced_pages</name><operator>.</operator><name>weak</name></name> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>mdbx_munmap</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>env</name><operator>-&gt;</operator><name>me_lck_mmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>synced</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <ternary><condition><expr><call><name>ftruncate</name><argument_list>(<argument><expr><name><name>env</name><operator>-&gt;</operator><name>me_lfd</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>errno</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>mdbx_jitter4testing</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* 1) POSIX's fcntl() locks (i.e. when op_setlk == F_SETLK) should be restored
   * after file was closed.
   *
   * 2) File locks would be released (by kernel) while the file-descriptors will
   * be closed. But to avoid false-positive EACCESS and EDEADLK from the kernel,
   * locks should be released here explicitly with properly order. */</comment>

  <comment type="block">/* close dxb and restore lock */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>env</name><operator>-&gt;</operator><name>me_dsync_fd</name></name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>close</name><argument_list>(<argument><expr><name><name>env</name><operator>-&gt;</operator><name>me_dsync_fd</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>rc</name> <operator>==</operator> <name>MDBX_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>env</name><operator>-&gt;</operator><name>me_dsync_fd</name></name> <operator>=</operator> <name>INVALID_HANDLE_VALUE</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>env</name><operator>-&gt;</operator><name>me_lazy_fd</name></name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>close</name><argument_list>(<argument><expr><name><name>env</name><operator>-&gt;</operator><name>me_lazy_fd</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>rc</name> <operator>==</operator> <name>MDBX_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>env</name><operator>-&gt;</operator><name>me_lazy_fd</name></name> <operator>=</operator> <name>INVALID_HANDLE_VALUE</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>op_setlk</name> <operator>==</operator> <name>F_SETLK</name> <operator>&amp;&amp;</operator> <name>inprocess_neighbor</name> <operator>&amp;&amp;</operator> <name>rc</name> <operator>==</operator> <name>MDBX_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <comment type="block">/* restore file-lock */</comment>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>lck_op</name><argument_list>(
          <argument><expr><name><name>inprocess_neighbor</name><operator>-&gt;</operator><name>me_lazy_fd</name></name></expr></argument>, <argument><expr><name>F_SETLKW</name></expr></argument>,
          <argument><expr><ternary><condition><expr><operator>(</operator><name><name>inprocess_neighbor</name><operator>-&gt;</operator><name>me_flags</name></name> <operator>&amp;</operator> <name>MDBX_RDONLY</name><operator>)</operator></expr> ?</condition><then> <expr><name>F_RDLCK</name></expr> </then><else>: <expr><name>F_WRLCK</name></expr></else></ternary></expr></argument>,
          <argument><expr><ternary><condition><expr><operator>(</operator><name><name>inprocess_neighbor</name><operator>-&gt;</operator><name>me_flags</name></name> <operator>&amp;</operator> <name>MDBX_EXCLUSIVE</name><operator>)</operator></expr>
              ?</condition><then> <expr><literal type="number">0</literal></expr>
              </then><else>: <expr><name><name>inprocess_neighbor</name><operator>-&gt;</operator><name>me_pid</name></name></expr></else></ternary></expr></argument>,
          <argument><expr><ternary><condition><expr><operator>(</operator><name><name>inprocess_neighbor</name><operator>-&gt;</operator><name>me_flags</name></name> <operator>&amp;</operator> <name>MDBX_EXCLUSIVE</name><operator>)</operator></expr> ?</condition><then> <expr><name>OFF_T_MAX</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* close clk and restore locks */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>env</name><operator>-&gt;</operator><name>me_lfd</name></name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>close</name><argument_list>(<argument><expr><name><name>env</name><operator>-&gt;</operator><name>me_lfd</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>rc</name> <operator>==</operator> <name>MDBX_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>env</name><operator>-&gt;</operator><name>me_lfd</name></name> <operator>=</operator> <name>INVALID_HANDLE_VALUE</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>op_setlk</name> <operator>==</operator> <name>F_SETLK</name> <operator>&amp;&amp;</operator> <name>inprocess_neighbor</name> <operator>&amp;&amp;</operator> <name>rc</name> <operator>==</operator> <name>MDBX_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <comment type="block">/* restore file-locks */</comment>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>lck_op</name><argument_list>(<argument><expr><name><name>inprocess_neighbor</name><operator>-&gt;</operator><name>me_lfd</name></name></expr></argument>, <argument><expr><name>F_SETLKW</name></expr></argument>, <argument><expr><name>F_RDLCK</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>MDBX_SUCCESS</name> <operator>&amp;&amp;</operator> <name><name>inprocess_neighbor</name><operator>-&gt;</operator><name>me_live_reader</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_rpid_set</name><argument_list>(<argument><expr><name>inprocess_neighbor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>inprocess_neighbor</name> <operator>&amp;&amp;</operator> <name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>inprocess_neighbor</name><operator>-&gt;</operator><name>me_flags</name></name> <operator>|=</operator> <name>MDBX_FATAL_ERROR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*---------------------------------------------------------------------------*/</comment>

<function><type><name>__cold</name> <name>MDBX_INTERNAL_FUNC</name> <name>int</name></type> <name>mdbx_lck_init</name><parameter_list>(<parameter><decl><type><name>MDBX_env</name> <modifier>*</modifier></type><name>env</name></decl></parameter>,
                                            <parameter><decl><type><name>MDBX_env</name> <modifier>*</modifier></type><name>inprocess_neighbor</name></decl></parameter>,
                                            <parameter><decl><type><name>int</name></type> <name>global_uniqueness_flag</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MDBX_LOCKING</name> <operator>==</operator> <name>MDBX_LOCKING_SYSV</name></expr></cpp:if>
  <decl_stmt><decl><type><name>int</name></type> <name>semid</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <comment type="block">/* don't initialize semaphores twice */</comment>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>inprocess_neighbor</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>global_uniqueness_flag</name> <operator>==</operator> <name>MDBX_RESULT_TRUE</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>fstat</name><argument_list>(<argument><expr><name><name>env</name><operator>-&gt;</operator><name>me_lazy_fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>errno</name></expr>;</return></block_content></block></if></if_stmt>
  <label><name>sysv_retry_create</name>:</label>
    <expr_stmt><expr><name>semid</name> <operator>=</operator> <call><name>semget</name><argument_list>(<argument><expr><name><name>env</name><operator>-&gt;</operator><name>me_sysv_ipc</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,
                   <argument><expr><name>IPC_CREAT</name> <operator>|</operator> <name>IPC_EXCL</name> <operator>|</operator>
                       <operator>(</operator><name><name>st</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <operator>(</operator><name>S_IRWXU</name> <operator>|</operator> <name>S_IRWXG</name> <operator>|</operator> <name>S_IRWXO</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>semid</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>EEXIST</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

      <comment type="block">/* remove and re-create semaphore set */</comment>
      <expr_stmt><expr><name>semid</name> <operator>=</operator> <call><name>semget</name><argument_list>(<argument><expr><name><name>env</name><operator>-&gt;</operator><name>me_sysv_ipc</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>semid</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>ENOENT</name></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
        <goto>goto <name>sysv_retry_create</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>semctl</name><argument_list>(<argument><expr><name>semid</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>IPC_RMID</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>EIDRM</name></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <goto>goto <name>sysv_retry_create</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name><name>val_array</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>semctl</name><argument_list>(<argument><expr><name>semid</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>SETALL</name></expr></argument>, <argument><expr><name>val_array</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>errno</name></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>semid</name> <operator>=</operator> <call><name>semget</name><argument_list>(<argument><expr><name><name>env</name><operator>-&gt;</operator><name>me_sysv_ipc</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>semid</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>errno</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* check read &amp; write access */</comment>
    <decl_stmt><decl><type><name><name>struct</name> <name>semid_ds</name></name></type> <name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>semctl</name><argument_list>(<argument><expr><name>semid</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>IPC_STAT</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>semctl</name><argument_list>(<argument><expr><name>semid</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>IPC_SET</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>errno</name></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>env</name><operator>-&gt;</operator><name>me_sysv_ipc</name><operator>.</operator><name>semid</name></name> <operator>=</operator> <name>semid</name></expr>;</expr_stmt>
  <return>return <expr><name>MDBX_SUCCESS</name></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>MDBX_LOCKING</name> <operator>==</operator> <name>MDBX_LOCKING_FUTEX</name></expr></cpp:elif>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>inprocess_neighbor</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>global_uniqueness_flag</name> <operator>!=</operator> <name>MDBX_RESULT_TRUE</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>MDBX_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"FIXME: Not implemented"</cpp:literal></cpp:error>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>MDBX_LOCKING</name> <operator>==</operator> <name>MDBX_LOCKING_POSIX1988</name></expr></cpp:elif>

  <comment type="block">/* don't initialize semaphores twice */</comment>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>inprocess_neighbor</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>global_uniqueness_flag</name> <operator>==</operator> <name>MDBX_RESULT_TRUE</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>sem_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>env</name><operator>-&gt;</operator><name>me_lck_mmap</name><operator>.</operator><name>lck</name><operator>-&gt;</operator><name>mti_rlock</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>errno</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>sem_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>env</name><operator>-&gt;</operator><name>me_lck_mmap</name><operator>.</operator><name>lck</name><operator>-&gt;</operator><name>mti_wlock</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>errno</name></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>MDBX_SUCCESS</name></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>MDBX_LOCKING</name> <operator>==</operator> <name>MDBX_LOCKING_POSIX2001</name> <operator>||</operator>                                \
    <name>MDBX_LOCKING</name> <operator>==</operator> <name>MDBX_LOCKING_POSIX2008</name></expr></cpp:elif>
  <if_stmt><if>if <condition>(<expr><name>inprocess_neighbor</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>MDBX_SUCCESS</name></expr> <comment type="block">/* don't need any initialization for mutexes
      if LCK already opened/used inside current process */</comment>
        ;</return></block_content></block></if></if_stmt>

    <comment type="block">/* FIXME: Unfortunately, there is no other reliable way but to long testing
     * on each platform. On the other hand, behavior like FreeBSD is incorrect
     * and we can expect it to be rare. Moreover, even on FreeBSD without
     * additional in-process initialization, the probability of an problem
     * occurring is vanishingly small, and the symptom is a return of EINVAL
     * while locking a mutex. In other words, in the worst case, the problem
     * results in an EINVAL error at the start of the transaction, but NOT data
     * loss, nor database corruption, nor other fatal troubles. Thus, the code
     * below I am inclined to think the workaround for erroneous platforms (like
     * FreeBSD), rather than a defect of libmdbx. */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="block">/* seems that shared mutexes on FreeBSD required in-process initialization */</comment>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>global_uniqueness_flag</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/* shared mutexes on many other platforms (including Darwin and Linux's
   * futexes) doesn't need any addition in-process initialization */</comment>
  <if_stmt><if>if <condition>(<expr><name>global_uniqueness_flag</name> <operator>!=</operator> <name>MDBX_RESULT_TRUE</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>MDBX_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <decl_stmt><decl><type><name>pthread_mutexattr_t</name></type> <name>ma</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>pthread_mutexattr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ma</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>pthread_mutexattr_setpshared</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ma</name></expr></argument>, <argument><expr><name>PTHREAD_PROCESS_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition><block type="pseudo"><block_content>
    <goto>goto <name>bailout</name>;</goto></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MDBX_LOCKING</name> <operator>==</operator> <name>MDBX_LOCKING_POSIX2008</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PTHREAD_MUTEX_ROBUST</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>pthread_mutexattr_setrobust</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>pthread_mutexattr_setrobust</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ma</name></expr></argument>, <argument><expr><name>PTHREAD_MUTEX_ROBUST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PTHREAD_MUTEX_ROBUST_NP</name></expr></argument>)</argument_list></call> <operator>||</operator>                                      \
    <call><name>defined</name><argument_list>(<argument><expr><name>pthread_mutexattr_setrobust_np</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>pthread_mutexattr_setrobust_np</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ma</name></expr></argument>, <argument><expr><name>PTHREAD_MUTEX_ROBUST_NP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>_POSIX_THREAD_PROCESS_SHARED</name> <operator>&lt;</operator> <literal type="number">200809L</literal></expr></cpp:elif>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>pthread_mutexattr_setrobust_np</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ma</name></expr></argument>, <argument><expr><name>PTHREAD_MUTEX_ROBUST_NP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>pthread_mutexattr_setrobust</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ma</name></expr></argument>, <argument><expr><name>PTHREAD_MUTEX_ROBUST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition><block type="pseudo"><block_content>
    <goto>goto <name>bailout</name>;</goto></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MDBX_LOCKING == MDBX_LOCKING_POSIX2008 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_POSIX_THREAD_PRIO_INHERIT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_POSIX_THREAD_PRIO_INHERIT</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>  \
    <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MDBX_SAFE4QEMU</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>pthread_mutexattr_setprotocol</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ma</name></expr></argument>, <argument><expr><name>PTHREAD_PRIO_INHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>ENOTSUP</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>pthread_mutexattr_setprotocol</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ma</name></expr></argument>, <argument><expr><name>PTHREAD_PRIO_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&amp;&amp;</operator> <name>rc</name> <operator>!=</operator> <name>ENOTSUP</name></expr>)</condition><block type="pseudo"><block_content>
    <goto>goto <name>bailout</name>;</goto></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* PTHREAD_PRIO_INHERIT */</comment>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>pthread_mutexattr_settype</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ma</name></expr></argument>, <argument><expr><name>PTHREAD_MUTEX_ERRORCHECK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&amp;&amp;</operator> <name>rc</name> <operator>!=</operator> <name>ENOTSUP</name></expr>)</condition><block type="pseudo"><block_content>
    <goto>goto <name>bailout</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>env</name><operator>-&gt;</operator><name>me_lck_mmap</name><operator>.</operator><name>lck</name><operator>-&gt;</operator><name>mti_rlock</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition><block type="pseudo"><block_content>
    <goto>goto <name>bailout</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>env</name><operator>-&gt;</operator><name>me_lck_mmap</name><operator>.</operator><name>lck</name><operator>-&gt;</operator><name>mti_wlock</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>bailout</name>:</label>
  <expr_stmt><expr><call><name>pthread_mutexattr_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"FIXME"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MDBX_LOCKING &gt; 0 */</comment>
</block_content>}</block></function>

<function><type><name>__cold</name> <specifier>static</specifier> <name>int</name></type> <name>mdbx_ipclock_failed</name><parameter_list>(<parameter><decl><type><name>MDBX_env</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>mdbx_ipclock_t</name> <modifier>*</modifier></type><name>ipc</name></decl></parameter>,
                                      <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>err</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>err</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MDBX_LOCKING</name> <operator>==</operator> <name>MDBX_LOCKING_POSIX2008</name> <operator>||</operator> <name>MDBX_LOCKING</name> <operator>==</operator> <name>MDBX_LOCKING_SYSV</name></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>EOWNERDEAD</name></expr>)</condition> <block>{<block_content>
    <comment type="block">/* We own the mutex. Clean up after dead previous owner. */</comment>

    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>rlocked</name> <init>= <expr><name>ipc</name> <operator>==</operator> <operator>&amp;</operator><name><name>env</name><operator>-&gt;</operator><name>me_lck</name><operator>-&gt;</operator><name>mti_rlock</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>MDBX_SUCCESS</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rlocked</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>env</name><operator>-&gt;</operator><name>me_txn</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="block">/* env is hosed if the dead thread was ours */</comment>
        <expr_stmt><expr><name><name>env</name><operator>-&gt;</operator><name>me_flags</name></name> <operator>|=</operator> <name>MDBX_FATAL_ERROR</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>env</name><operator>-&gt;</operator><name>me_txn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>MDBX_PANIC</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>mdbx_warning</name><argument_list>(<argument><expr><literal type="string">"%clock owner died, %s"</literal></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>rlocked</name></expr> ?</condition><then> <expr><literal type="char">'r'</literal></expr> </then><else>: <expr><literal type="char">'w'</literal></expr></else></ternary><operator>)</operator></expr></argument>,
                 <argument><expr><operator>(</operator><ternary><condition><expr><name>rc</name></expr> ?</condition><then> <expr><literal type="string">"this process' env is hosed"</literal></expr> </then><else>: <expr><literal type="string">"recovering"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>check_rc</name> <init>= <expr><call><name>mdbx_cleanup_dead_readers</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rlocked</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>check_rc</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>check_rc</name> <operator>==</operator> <name>MDBX_SUCCESS</name><operator>)</operator></expr> ?</condition><then> <expr><name>MDBX_RESULT_TRUE</name></expr> </then><else>: <expr><name>check_rc</name></expr></else></ternary></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MDBX_LOCKING</name> <operator>==</operator> <name>MDBX_LOCKING_SYSV</name></expr></cpp:if>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>rc</name> <operator>==</operator> <name>MDBX_SUCCESS</name><operator>)</operator></expr> ?</condition><then> <expr><name>check_rc</name></expr> </then><else>: <expr><name>rc</name></expr></else></ternary></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PTHREAD_MUTEX_ROBUST</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>pthread_mutex_consistent</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name>int</name></type> <name>mreco_rc</name> <init>= <expr><call><name>pthread_mutex_consistent</name><argument_list>(<argument><expr><name>ipc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PTHREAD_MUTEX_ROBUST_NP</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>pthread_mutex_consistent_np</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <decl_stmt><decl><type><name>int</name></type> <name>mreco_rc</name> <init>= <expr><call><name>pthread_mutex_consistent_np</name><argument_list>(<argument><expr><name>ipc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>_POSIX_THREAD_PROCESS_SHARED</name> <operator>&lt;</operator> <literal type="number">200809L</literal></expr></cpp:elif>
    <decl_stmt><decl><type><name>int</name></type> <name>mreco_rc</name> <init>= <expr><call><name>pthread_mutex_consistent_np</name><argument_list>(<argument><expr><name>ipc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><name>int</name></type> <name>mreco_rc</name> <init>= <expr><call><name>pthread_mutex_consistent</name><argument_list>(<argument><expr><name>ipc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name>check_rc</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>mreco_rc</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>check_rc</name></expr> </then><else>: <expr><name>mreco_rc</name></expr></else></ternary></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>mreco_rc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>mdbx_error</name><argument_list>(<argument><expr><literal type="string">"lock recovery failed, %s"</literal></expr></argument>, <argument><expr><call><name>mdbx_strerror</name><argument_list>(<argument><expr><name>mreco_rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>rc</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>rc</name> <operator>==</operator> <name>MDBX_SUCCESS</name><operator>)</operator></expr> ?</condition><then> <expr><name>check_rc</name></expr> </then><else>: <expr><name>rc</name></expr></else></ternary></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>MDBX_IS_ERROR</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><name>ipc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MDBX_LOCKING == MDBX_LOCKING_POSIX2008 */</comment>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>MDBX_LOCKING</name> <operator>==</operator> <name>MDBX_LOCKING_POSIX2001</name></expr></cpp:elif>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>ipc</name></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>MDBX_LOCKING</name> <operator>==</operator> <name>MDBX_LOCKING_POSIX1988</name></expr></cpp:elif>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>ipc</name></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>MDBX_LOCKING</name> <operator>==</operator> <name>MDBX_LOCKING_FUTEX</name></expr></cpp:elif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_MSC_VER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>message</name><name>(</name><cpp:literal>"warning: TODO"</cpp:literal><name>)</name></cpp:pragma>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:warning>#<cpp:directive>warning</cpp:directive> <cpp:literal>"TODO"</cpp:literal></cpp:warning>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>ipc</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"FIXME"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MDBX_LOCKING */</comment>

  <expr_stmt><expr><call><name>mdbx_error</name><argument_list>(<argument><expr><literal type="string">"mutex (un)lock failed, %s"</literal></expr></argument>, <argument><expr><call><name>mdbx_strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>EDEADLK</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>env</name><operator>-&gt;</operator><name>me_flags</name></name> <operator>|=</operator> <name>MDBX_FATAL_ERROR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mdbx_ipclock_lock</name><parameter_list>(<parameter><decl><type><name>MDBX_env</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>mdbx_ipclock_t</name> <modifier>*</modifier></type><name>ipc</name></decl></parameter>,
                             <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>dont_wait</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MDBX_LOCKING</name> <operator>==</operator> <name>MDBX_LOCKING_POSIX2001</name> <operator>||</operator>                                  \
    <name>MDBX_LOCKING</name> <operator>==</operator> <name>MDBX_LOCKING_POSIX2008</name></expr></cpp:if>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><ternary><condition><expr><name>dont_wait</name></expr> ?</condition><then> <expr><call><name>pthread_mutex_trylock</name><argument_list>(<argument><expr><name>ipc</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><name>ipc</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>rc</name> <operator>==</operator> <name>EBUSY</name> <operator>&amp;&amp;</operator> <name>dont_wait</name><operator>)</operator></expr> ?</condition><then> <expr><name>MDBX_BUSY</name></expr> </then><else>: <expr><name>rc</name></expr></else></ternary></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>MDBX_LOCKING</name> <operator>==</operator> <name>MDBX_LOCKING_POSIX1988</name></expr></cpp:elif>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>MDBX_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>dont_wait</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>sem_trywait</name><argument_list>(<argument><expr><name>ipc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>EAGAIN</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>MDBX_BUSY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>sem_wait</name><argument_list>(<argument><expr><name>ipc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>MDBX_LOCKING</name> <operator>==</operator> <name>MDBX_LOCKING_SYSV</name></expr></cpp:elif>
  <decl_stmt><decl><type><name><name>struct</name> <name>sembuf</name></name></type> <name>op</name> <init>= <expr><block>{<expr><operator>.</operator><name>sem_num</name> <operator>=</operator> <operator>(</operator><name>ipc</name> <operator>!=</operator> <operator>&amp;</operator><name><name>env</name><operator>-&gt;</operator><name>me_lck</name><operator>-&gt;</operator><name>mti_wlock</name></name><operator>)</operator></expr>,
                      <expr><operator>.</operator><name>sem_op</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>,
                      <expr><operator>.</operator><name>sem_flg</name> <operator>=</operator> <name>dont_wait</name> <operator>?</operator> <name>IPC_NOWAIT</name> <operator>|</operator> <name>SEM_UNDO</name> <operator>:</operator> <name>SEM_UNDO</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>semop</name><argument_list>(<argument><expr><name><name>env</name><operator>-&gt;</operator><name>me_sysv_ipc</name><operator>.</operator><name>semid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>dont_wait</name> <operator>&amp;&amp;</operator> <name>rc</name> <operator>==</operator> <name>EAGAIN</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>MDBX_BUSY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <ternary><condition><expr><operator>*</operator><name>ipc</name></expr> ?</condition><then> <expr><name>EOWNERDEAD</name></expr> </then><else>: <expr><name>MDBX_SUCCESS</name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>ipc</name> <operator>=</operator> <name><name>env</name><operator>-&gt;</operator><name>me_pid</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"FIXME"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MDBX_LOCKING */</comment>

  <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name> <operator>&amp;&amp;</operator> <name>rc</name> <operator>!=</operator> <name>MDBX_BUSY</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_ipclock_failed</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>ipc</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mdbx_ipclock_unlock</name><parameter_list>(<parameter><decl><type><name>MDBX_env</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>mdbx_ipclock_t</name> <modifier>*</modifier></type><name>ipc</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MDBX_LOCKING</name> <operator>==</operator> <name>MDBX_LOCKING_POSIX2001</name> <operator>||</operator>                                  \
    <name>MDBX_LOCKING</name> <operator>==</operator> <name>MDBX_LOCKING_POSIX2008</name></expr></cpp:if>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><name>ipc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>env</name></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>MDBX_LOCKING</name> <operator>==</operator> <name>MDBX_LOCKING_POSIX1988</name></expr></cpp:elif>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><ternary><condition><expr><call><name>sem_post</name><argument_list>(<argument><expr><name>ipc</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>errno</name></expr> </then><else>: <expr><name>MDBX_SUCCESS</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>env</name></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>MDBX_LOCKING</name> <operator>==</operator> <name>MDBX_LOCKING_SYSV</name></expr></cpp:elif>
  <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>*</operator><name>ipc</name> <operator>!=</operator> <operator>(</operator><name>pid_t</name><operator>)</operator><name><name>env</name><operator>-&gt;</operator><name>me_pid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>EPERM</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>ipc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>sembuf</name></name></type> <name>op</name> <init>= <expr><block>{<expr><operator>.</operator><name>sem_num</name> <operator>=</operator> <operator>(</operator><name>ipc</name> <operator>!=</operator> <operator>&amp;</operator><name><name>env</name><operator>-&gt;</operator><name>me_lck</name><operator>-&gt;</operator><name>mti_wlock</name></name><operator>)</operator></expr>,
                      <expr><operator>.</operator><name>sem_op</name> <operator>=</operator> <literal type="number">1</literal></expr>,
                      <expr><operator>.</operator><name>sem_flg</name> <operator>=</operator> <name>SEM_UNDO</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><ternary><condition><expr><call><name>semop</name><argument_list>(<argument><expr><name><name>env</name><operator>-&gt;</operator><name>me_sysv_ipc</name><operator>.</operator><name>semid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>errno</name></expr> </then><else>: <expr><name>MDBX_SUCCESS</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"FIXME"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MDBX_LOCKING */</comment>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>MDBX_INTERNAL_FUNC</name> <name>int</name></type> <name>mdbx_rdt_lock</name><parameter_list>(<parameter><decl><type><name>MDBX_env</name> <modifier>*</modifier></type><name>env</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>mdbx_trace</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"&gt;&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mdbx_jitter4testing</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>mdbx_ipclock_lock</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>env</name><operator>-&gt;</operator><name>me_lck</name><operator>-&gt;</operator><name>mti_rlock</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>mdbx_trace</name><argument_list>(<argument><expr><literal type="string">"&lt;&lt; rc %d"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>MDBX_INTERNAL_FUNC</name> <name>void</name></type> <name>mdbx_rdt_unlock</name><parameter_list>(<parameter><decl><type><name>MDBX_env</name> <modifier>*</modifier></type><name>env</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>mdbx_trace</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"&gt;&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>mdbx_ipclock_unlock</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>env</name><operator>-&gt;</operator><name>me_lck</name><operator>-&gt;</operator><name>mti_rlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>mdbx_trace</name><argument_list>(<argument><expr><literal type="string">"&lt;&lt; rc %d"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>mdbx_panic</name><argument_list>(<argument><expr><literal type="string">"%s() failed: err %d\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>mdbx_jitter4testing</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mdbx_txn_lock</name><parameter_list>(<parameter><decl><type><name>MDBX_env</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dont_wait</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>mdbx_trace</name><argument_list>(<argument><expr><literal type="string">"%swait %s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>dont_wait</name></expr> ?</condition><then> <expr><literal type="string">"dont-"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="string">"&gt;&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mdbx_jitter4testing</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>mdbx_ipclock_lock</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>env</name><operator>-&gt;</operator><name>me_lck</name><operator>-&gt;</operator><name>mti_wlock</name></name></expr></argument>, <argument><expr><name>dont_wait</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>mdbx_trace</name><argument_list>(<argument><expr><literal type="string">"&lt;&lt; rc %d"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><ternary><condition><expr><call><name>MDBX_IS_ERROR</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>rc</name></expr> </then><else>: <expr><name>MDBX_SUCCESS</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mdbx_txn_unlock</name><parameter_list>(<parameter><decl><type><name>MDBX_env</name> <modifier>*</modifier></type><name>env</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>mdbx_trace</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"&gt;&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>mdbx_ipclock_unlock</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>env</name><operator>-&gt;</operator><name>me_lck</name><operator>-&gt;</operator><name>mti_wlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>mdbx_trace</name><argument_list>(<argument><expr><literal type="string">"&lt;&lt; rc %d"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>mdbx_panic</name><argument_list>(<argument><expr><literal type="string">"%s() failed: err %d\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>mdbx_jitter4testing</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_MSC_VER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name> <name>:</name> <name>4206</name><name>)</name></cpp:pragma> <comment type="block">/* nonstandard extension used: translation     \
                                   unit is empty */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>                          <comment type="block">/* _MSC_VER (warnings) */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>                          <comment type="block">/* !Windows LCK-implementation */</comment>
</unit>
