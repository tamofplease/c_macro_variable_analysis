<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/libmdbx/src/osal.c"><comment type="block">/* https://en.wikipedia.org/wiki/Operating_system_abstraction_layer */</comment>

<comment type="block">/*
 * Copyright 2015-2022 Leonid Yuriev &lt;leo@yuriev.ru&gt;
 * and other libmdbx authors: please see AUTHORS file.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted only as authorized by the OpenLDAP
 * Public License.
 *
 * A copy of this license is available in the file LICENSE in the
 * top-level directory of the distribution or, alternatively, at
 * &lt;http://www.OpenLDAP.org/license.html&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internals.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winioctl.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>waitstatus2errcode</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type> <name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
  <case>case <expr><name>WAIT_OBJECT_0</name></expr>:</case>
    <return>return <expr><name>MDBX_SUCCESS</name></expr>;</return>
  <case>case <expr><name>WAIT_FAILED</name></expr>:</case>
    <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>GetLastError</name><argument_list>()</argument_list></call></expr>;</return>
  <case>case <expr><name>WAIT_ABANDONED</name></expr>:</case>
    <return>return <expr><name>ERROR_ABANDONED_WAIT_0</name></expr>;</return>
  <case>case <expr><name>WAIT_IO_COMPLETION</name></expr>:</case>
    <return>return <expr><name>ERROR_USER_APC</name></expr>;</return>
  <case>case <expr><name>WAIT_TIMEOUT</name></expr>:</case>
    <return>return <expr><name>ERROR_TIMEOUT</name></expr>;</return>
  <default>default:</default>
    <return>return <expr><name>ERROR_UNHANDLED_ERROR</name></expr>;</return>
  </block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/* Map a result from an NTAPI call to WIN32 error code. */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ntstatus2errcode</name><parameter_list>(<parameter><decl><type><name>NTSTATUS</name></type> <name>status</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>DWORD</name></type> <name>dummy</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>OVERLAPPED</name></type> <name>ov</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ov</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ov</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ov</name><operator>.</operator><name>Internal</name></name> <operator>=</operator> <name>status</name></expr>;</expr_stmt>
  <return>return <expr><ternary><condition><expr><call><name>GetOverlappedResult</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ov</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>MDBX_SUCCESS</name></expr>
                                                       </then><else>: <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* We use native NT APIs to setup the memory map, so that we can
 * let the DB file grow incrementally instead of always preallocating
 * the full size. These APIs are defined in &lt;wdm.h&gt; and &lt;ntifs.h&gt;
 * but those headers are meant for driver-level development and
 * conflict with the regular user-level headers, so we explicitly
 * declare them here. Using these APIs also means we must link to
 * ntdll.dll, which is not linked by default in user code. */</comment>

<function_decl><type><specifier>extern</specifier> <name>NTSTATUS</name> <name>NTAPI</name></type> <name>NtCreateSection</name><parameter_list>(
    <parameter><decl><type><name>OUT</name> <name>PHANDLE</name></type> <name>SectionHandle</name></decl></parameter>, <parameter><decl><type><name>IN</name> <name>ACCESS_MASK</name></type> <name>DesiredAccess</name></decl></parameter>,
    <parameter><decl><type><name>IN</name> <name>OPTIONAL</name> <name>POBJECT_ATTRIBUTES</name></type> <name>ObjectAttributes</name></decl></parameter>,
    <parameter><decl><type><name>IN</name> <name>OPTIONAL</name> <name>PLARGE_INTEGER</name></type> <name>MaximumSize</name></decl></parameter>, <parameter><decl><type><name>IN</name> <name>ULONG</name></type> <name>SectionPageProtection</name></decl></parameter>,
    <parameter><decl><type><name>IN</name> <name>ULONG</name></type> <name>AllocationAttributes</name></decl></parameter>, <parameter><decl><type><name>IN</name> <name>OPTIONAL</name> <name>HANDLE</name></type> <name>FileHandle</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct <name>_SECTION_BASIC_INFORMATION</name> <block>{
  <decl_stmt><decl><type><name>ULONG</name></type> <name>Unknown</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ULONG</name></type> <name>SectionAttributes</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>LARGE_INTEGER</name></type> <name>SectionSize</name></decl>;</decl_stmt>
}</block></struct></type> <name>SECTION_BASIC_INFORMATION</name><operator>,</operator> *<name>PSECTION_BASIC_INFORMATION</name>;</typedef>

<function_decl><type><specifier>extern</specifier> <name>NTSTATUS</name> <name>NTAPI</name></type> <name>NtMapViewOfSection</name><parameter_list>(
    <parameter><decl><type><name>IN</name> <name>HANDLE</name></type> <name>SectionHandle</name></decl></parameter>, <parameter><decl><type><name>IN</name> <name>HANDLE</name></type> <name>ProcessHandle</name></decl></parameter>, <parameter><decl><type><name>IN</name> <name>OUT</name> <name>PVOID</name> <modifier>*</modifier></type><name>BaseAddress</name></decl></parameter>,
    <parameter><decl><type><name>IN</name> <name>ULONG_PTR</name></type> <name>ZeroBits</name></decl></parameter>, <parameter><decl><type><name>IN</name> <name>SIZE_T</name></type> <name>CommitSize</name></decl></parameter>,
    <parameter><decl><type><name>IN</name> <name>OUT</name> <name>OPTIONAL</name> <name>PLARGE_INTEGER</name></type> <name>SectionOffset</name></decl></parameter>, <parameter><decl><type><name>IN</name> <name>OUT</name> <name>PSIZE_T</name></type> <name>ViewSize</name></decl></parameter>,
    <parameter><decl><type><name>IN</name> <name>SECTION_INHERIT</name></type> <name>InheritDisposition</name></decl></parameter>, <parameter><decl><type><name>IN</name> <name>ULONG</name></type> <name>AllocationType</name></decl></parameter>,
    <parameter><decl><type><name>IN</name> <name>ULONG</name></type> <name>Win32Protect</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>NTSTATUS</name> <name>NTAPI</name></type> <name>NtUnmapViewOfSection</name><parameter_list>(<parameter><decl><type><name>IN</name> <name>HANDLE</name></type> <name>ProcessHandle</name></decl></parameter>,
                                           <parameter><decl><type><name>IN</name> <name>OPTIONAL</name> <name>PVOID</name></type> <name>BaseAddress</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>NTSTATUS</name> <name>NTAPI</name></type> <name>NtClose</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>Handle</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>NTSTATUS</name> <name>NTAPI</name></type> <name>NtAllocateVirtualMemory</name><parameter_list>(
    <parameter><decl><type><name>IN</name> <name>HANDLE</name></type> <name>ProcessHandle</name></decl></parameter>, <parameter><decl><type><name>IN</name> <name>OUT</name> <name>PVOID</name> <modifier>*</modifier></type><name>BaseAddress</name></decl></parameter>, <parameter><decl><type><name>IN</name> <name>ULONG_PTR</name></type> <name>ZeroBits</name></decl></parameter>,
    <parameter><decl><type><name>IN</name> <name>OUT</name> <name>PSIZE_T</name></type> <name>RegionSize</name></decl></parameter>, <parameter><decl><type><name>IN</name> <name>ULONG</name></type> <name>AllocationType</name></decl></parameter>, <parameter><decl><type><name>IN</name> <name>ULONG</name></type> <name>Protect</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>NTSTATUS</name> <name>NTAPI</name></type> <name>NtFreeVirtualMemory</name><parameter_list>(<parameter><decl><type><name>IN</name> <name>HANDLE</name></type> <name>ProcessHandle</name></decl></parameter>,
                                          <parameter><decl><type><name>IN</name> <name>PVOID</name> <modifier>*</modifier></type><name>BaseAddress</name></decl></parameter>,
                                          <parameter><decl><type><name>IN</name> <name>OUT</name> <name>PSIZE_T</name></type> <name>RegionSize</name></decl></parameter>,
                                          <parameter><decl><type><name>IN</name> <name>ULONG</name></type> <name>FreeType</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WOF_CURRENT_VERSION</name></cpp:ifndef>
<typedef>typedef <type><struct>struct <name>_WOF_EXTERNAL_INFO</name> <block>{
  <decl_stmt><decl><type><name>DWORD</name></type> <name>Version</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DWORD</name></type> <name>Provider</name></decl>;</decl_stmt>
}</block></struct></type> <name>WOF_EXTERNAL_INFO</name><operator>,</operator> *<name>PWOF_EXTERNAL_INFO</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* WOF_CURRENT_VERSION */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIM_PROVIDER_CURRENT_VERSION</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIM_PROVIDER_HASH_SIZE</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>_WIM_PROVIDER_EXTERNAL_INFO</name> <block>{
  <decl_stmt><decl><type><name>DWORD</name></type> <name>Version</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DWORD</name></type> <name>Flags</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>LARGE_INTEGER</name></type> <name>DataSourceId</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>BYTE</name></type> <name><name>ResourceHash</name><index>[<expr><name>WIM_PROVIDER_HASH_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>WIM_PROVIDER_EXTERNAL_INFO</name><operator>,</operator> *<name>PWIM_PROVIDER_EXTERNAL_INFO</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* WIM_PROVIDER_CURRENT_VERSION */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FILE_PROVIDER_CURRENT_VERSION</name></cpp:ifndef>
<typedef>typedef <type><struct>struct <name>_FILE_PROVIDER_EXTERNAL_INFO_V1</name> <block>{
  <decl_stmt><decl><type><name>ULONG</name></type> <name>Version</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ULONG</name></type> <name>Algorithm</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ULONG</name></type> <name>Flags</name></decl>;</decl_stmt>
}</block></struct></type> <name>FILE_PROVIDER_EXTERNAL_INFO_V1</name><operator>,</operator> *<name>PFILE_PROVIDER_EXTERNAL_INFO_V1</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FILE_PROVIDER_CURRENT_VERSION */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>STATUS_OBJECT_NOT_EXTERNALLY_BACKED</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATUS_OBJECT_NOT_EXTERNALLY_BACKED</name></cpp:macro> <cpp:value>((NTSTATUS)0xC000046DL)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>STATUS_INVALID_DEVICE_REQUEST</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATUS_INVALID_DEVICE_REQUEST</name></cpp:macro> <cpp:value>((NTSTATUS)0xC0000010L)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>STATUS_NOT_SUPPORTED</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATUS_NOT_SUPPORTED</name></cpp:macro> <cpp:value>((NTSTATUS)0xC00000BBL)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FILE_DEVICE_FILE_SYSTEM</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_DEVICE_FILE_SYSTEM</name></cpp:macro> <cpp:value>0x00000009</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FSCTL_GET_EXTERNAL_BACKING</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSCTL_GET_EXTERNAL_BACKING</name></cpp:macro>                                             \
  <cpp:value>CTL_CODE(FILE_DEVICE_FILE_SYSTEM, 196, METHOD_BUFFERED, FILE_ANY_ACCESS)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ERROR_NOT_CAPABLE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERROR_NOT_CAPABLE</name></cpp:macro> <cpp:value>775L</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* _WIN32 || _WIN64 */</comment>

<comment type="block">/*----------------------------------------------------------------------------*/</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__UCLIBC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>__extern_C</name> <name>void</name></type> <name>__assert</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>unsigned</name> <name>int</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__THROW</name></cpp:ifdef>
    <name>__THROW</name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <name>__nothrow</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __THROW */</comment>
    <name>MDBX_NORETURN</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__assert_fail</name><parameter_list>(<parameter><type><name>assertion</name></type></parameter>, <parameter><type><name>file</name></type></parameter>, <parameter><type><name>line</name></type></parameter>, <parameter><type><name>function</name></type></parameter>)</parameter_list></cpp:macro>                         \
  <cpp:value>__assert(assertion, file, line, function)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>_POSIX_C_SOURCE</name> <operator>&gt;</operator> <literal type="number">200212</literal> <operator>&amp;&amp;</operator>                                              \
    <comment type="block">/* workaround for avoid musl libc wrong prototype */</comment> <operator>(</operator>                     \
        <call><name>defined</name><argument_list>(<argument><expr><name>__GLIBC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__GNU_LIBRARY__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:elif>
<comment type="block">/* Prototype should match libc runtime. ISO POSIX (2003) &amp; LSB 1.x-3.x */</comment>
<decl_stmt><decl><type><name>__extern_C</name> <name>void</name></type> <name>__assert_fail</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>assertion</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>file</name></expr></argument>,
                              <argument><expr><name>unsigned</name> <name>line</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>function</name></expr></argument>)</argument_list>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__THROW</name></cpp:ifdef>
    <name>__THROW</name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <name>__nothrow</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __THROW */</comment>
    <name>MDBX_NORETURN</name></decl>;</decl_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__MACH__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>__extern_C</name> <name>void</name></type> <name>__assert_rtn</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>function</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>file</name></expr></argument>, <argument><expr><name>int</name> <name>line</name></expr></argument>,
                             <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>assertion</name></expr></argument>)</argument_list> <comment type="block">/* __nothrow */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__dead2</name></cpp:ifdef>
    <name>__dead2</name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <name>MDBX_NORETURN</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __dead2 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__disable_tail_calls</name></cpp:ifdef>
    <name>__disable_tail_calls</name></decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __disable_tail_calls */</comment>
    ;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__assert_fail</name><parameter_list>(<parameter><type><name>assertion</name></type></parameter>, <parameter><type><name>file</name></type></parameter>, <parameter><type><name>line</name></type></parameter>, <parameter><type><name>function</name></type></parameter>)</parameter_list></cpp:macro>                         \
  <cpp:value>__assert_rtn(function, file, line, assertion)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__sun</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SVR4</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__svr4__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>__extern_C</name> <name>void</name></type> <name>__assert_c99</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>assection</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>file</name></expr></argument>, <argument><expr><name>int</name> <name>line</name></expr></argument>,
                             <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>function</name></expr></argument>)</argument_list> <name>MDBX_NORETURN</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__assert_fail</name><parameter_list>(<parameter><type><name>assertion</name></type></parameter>, <parameter><type><name>file</name></type></parameter>, <parameter><type><name>line</name></type></parameter>, <parameter><type><name>function</name></type></parameter>)</parameter_list></cpp:macro>                         \
  <cpp:value>__assert_c99(assertion, file, line, function)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OpenBSD__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<function_decl><type><name>__extern_C</name> <name>__dead</name> <name>void</name></type> <name>__assert2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,
                                 <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>function</name></decl></parameter>,
                                 <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>assertion</name></decl></parameter>)</parameter_list> <comment type="block">/* __nothrow */</comment>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__assert_fail</name><parameter_list>(<parameter><type><name>assertion</name></type></parameter>, <parameter><type><name>file</name></type></parameter>, <parameter><type><name>line</name></type></parameter>, <parameter><type><name>function</name></type></parameter>)</parameter_list></cpp:macro>                         \
  <cpp:value>__assert2(file, line, function, assertion)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__NetBSD__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<function_decl><type><name>__extern_C</name> <name>__dead</name> <name>void</name></type> <name>__assert13</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,
                                  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>function</name></decl></parameter>,
                                  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>assertion</name></decl></parameter>)</parameter_list> <comment type="block">/* __nothrow */</comment>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__assert_fail</name><parameter_list>(<parameter><type><name>assertion</name></type></parameter>, <parameter><type><name>file</name></type></parameter>, <parameter><type><name>line</name></type></parameter>, <parameter><type><name>function</name></type></parameter>)</parameter_list></cpp:macro>                         \
  <cpp:value>__assert13(file, line, function, assertion)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__BSD__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__bsdi__</name></expr></argument>)</argument_list></call> <operator>||</operator>         \
    <call><name>defined</name><argument_list>(<argument><expr><name>__DragonFly__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>__extern_C</name> <name>void</name></type> <name>__assert</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>function</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>file</name></expr></argument>, <argument><expr><name>int</name> <name>line</name></expr></argument>,
                         <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>assertion</name></expr></argument>)</argument_list> <comment type="block">/* __nothrow */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__dead2</name></cpp:ifdef>
    <name>__dead2</name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <name>MDBX_NORETURN</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __dead2 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__disable_tail_calls</name></cpp:ifdef>
    <name>__disable_tail_calls</name></decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __disable_tail_calls */</comment>
    ;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__assert_fail</name><parameter_list>(<parameter><type><name>assertion</name></type></parameter>, <parameter><type><name>file</name></type></parameter>, <parameter><type><name>line</name></type></parameter>, <parameter><type><name>function</name></type></parameter>)</parameter_list></cpp:macro>                         \
  <cpp:value>__assert(function, file, line, assertion)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __assert_fail */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__ANDROID_API__</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>MDBX_DEBUG</name></expr></cpp:if>

<function><type><name>__cold</name> <name>void</name></type> <name>mdbx_assert_fail</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>MDBX_env</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>,
                             <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MDBX_DEBUG</name></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><name>env</name> <operator>&amp;&amp;</operator> <name><name>env</name><operator>-&gt;</operator><name>me_assert_func</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>env</name><operator>-&gt;</operator><name>me_assert_func</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>env</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MDBX_DEBUG */</comment>

  <if_stmt><if>if <condition>(<expr><name>mdbx_debug_logger</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>mdbx_debug_log</name><argument_list>(<argument><expr><name>MDBX_LOG_FATAL</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"assert: %s\n"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>message</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>num</name> <init>= <expr><call><name>mdbx_asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>message</name></expr></argument>, <argument><expr><literal type="string">"\r\nMDBX-ASSERTION: %s, %s:%u"</literal></expr></argument>,
                                  <argument><expr><name>msg</name></expr></argument>, <argument><expr><ternary><condition><expr><name>func</name></expr> ?</condition><then> <expr><name>func</name></expr> </then><else>: <expr><literal type="string">"unknown"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>num</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><name>message</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>message</name> <operator>=</operator> <literal type="string">"&lt;troubles with assertion-message preparation&gt;"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>OutputDebugStringA</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IsDebuggerPresent</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>DebugBreak</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ANDROID_API__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <expr_stmt><expr><call><name>__android_log_assert</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"mdbx"</literal></expr></argument>, <argument><expr><literal type="string">"%s:%u"</literal></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>__assert_fail</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"mdbx"</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name>FatalExit</name><argument_list>(<argument><expr><name>ERROR_UNHANDLED_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __ANDROID_API__ || MDBX_DEBUG */</comment>

<function><type><name>__cold</name> <name>void</name></type> <name>mdbx_panic</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>message</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>num</name> <init>= <expr><call><name>mdbx_vasprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>message</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>const_message</name> <init>=
      <expr><ternary><condition><expr><operator>(</operator><name>num</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><name>message</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"&lt;troubles with panic-message preparation&gt;"</literal></expr>
                            </then><else>: <expr><name>message</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name>OutputDebugStringA</name><argument_list>(<argument><expr><literal type="string">"\r\nMDBX-PANIC: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>OutputDebugStringA</name><argument_list>(<argument><expr><name>const_message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>IsDebuggerPresent</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>DebugBreak</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>FatalExit</name><argument_list>(<argument><expr><name>ERROR_UNHANDLED_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ANDROID_API__</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name>__android_log_assert</name><argument_list>(<argument><expr><literal type="string">"panic"</literal></expr></argument>, <argument><expr><literal type="string">"mdbx"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>const_message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>__assert_fail</name><argument_list>(<argument><expr><name>const_message</name></expr></argument>, <argument><expr><literal type="string">"mdbx"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"panic"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __ANDROID_API__ */</comment>
  <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/*----------------------------------------------------------------------------*/</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>mdbx_vasprintf</name></cpp:ifndef>
<function><type><name>MDBX_INTERNAL_FUNC</name> <name>int</name></type> <name>mdbx_vasprintf</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>strp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,
                                      <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>va_list</name></type> <name>ones</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_copy</name><argument_list>(<argument><expr><name>ones</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>needed</name> <init>= <expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>needed</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>needed</name> <operator>&gt;=</operator> <name>INT_MAX</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>strp</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ones</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>needed</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>strp</name> <operator>=</operator> <call><name>mdbx_malloc</name><argument_list>(<argument><expr><name>needed</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>*</operator><name>strp</name> <operator>==</operator> <name>nullptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ones</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>SetLastError</name><argument_list>(<argument><expr><name>MDBX_ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>MDBX_ENOMEM</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>actual</name> <init>= <expr><call><name>vsnprintf</name><argument_list>(<argument><expr><operator>*</operator><name>strp</name></expr></argument>, <argument><expr><name>needed</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ones</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ones</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>actual</name> <operator>==</operator> <name>needed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>actual</name> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mdbx_free</name><argument_list>(<argument><expr><operator>*</operator><name>strp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>strp</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>actual</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* mdbx_vasprintf */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>mdbx_asprintf</name></cpp:ifndef>
<function><type><name>MDBX_INTERNAL_FUNC</name> <name>int</name></type> <name>mdbx_asprintf</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>strp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>mdbx_vasprintf</name><argument_list>(<argument><expr><name>strp</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* mdbx_asprintf */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>mdbx_memalign_alloc</name></cpp:ifndef>
<function><type><name>MDBX_INTERNAL_FUNC</name> <name>int</name></type> <name>mdbx_memalign_alloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>alignment</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytes</name></decl></parameter>,
                                           <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>is_powerof2</name><argument_list>(<argument><expr><name>alignment</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>alignment</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>alignment</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <call><name>VirtualAlloc</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>MEM_COMMIT</name> <operator>|</operator> <name>MEM_RESERVE</name></expr></argument>, <argument><expr><name>PAGE_READWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><ternary><condition><expr><operator>*</operator><name>result</name></expr> ?</condition><then> <expr><name>MDBX_SUCCESS</name></expr> </then><else>: <expr><name>MDBX_ENOMEM</name></expr></else></ternary></expr> <comment type="block">/* ERROR_OUTOFMEMORY */</comment>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ISOC11_SOURCE</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <call><name>aligned_alloc</name><argument_list>(<argument><expr><name>alignment</name></expr></argument>, <argument><expr><call><name>ceil_powerof2</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>alignment</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><ternary><condition><expr><operator>*</operator><name>result</name></expr> ?</condition><then> <expr><name>MDBX_SUCCESS</name></expr> </then><else>: <expr><name>errno</name></expr></else></ternary></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>_POSIX_VERSION</name> <operator>&gt;=</operator> <literal type="number">200112L</literal> <operator>&amp;&amp;</operator>                                             \
    <operator>(</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__ANDROID_API__</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>__ANDROID_API__</name> <operator>&gt;=</operator> <literal type="number">17</literal><operator>)</operator></expr></cpp:elif>
  <expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
  <return>return <expr><call><name>posix_memalign</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>alignment</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>__GLIBC_PREREQ</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>,</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>||</operator> <name>__STDC_VERSION__</name> <operator>&gt;=</operator> <literal type="number">201112L</literal></expr></cpp:elif>
  <expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <call><name>memalign</name><argument_list>(<argument><expr><name>alignment</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><ternary><condition><expr><operator>*</operator><name>result</name></expr> ?</condition><then> <expr><name>MDBX_SUCCESS</name></expr> </then><else>: <expr><name>errno</name></expr></else></ternary></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> FIXME</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* mdbx_memalign_alloc */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>mdbx_memalign_free</name></cpp:ifndef>
<function><type><name>MDBX_INTERNAL_FUNC</name> <name>void</name></type> <name>mdbx_memalign_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name>VirtualFree</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MEM_RELEASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>mdbx_free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* mdbx_memalign_free */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>mdbx_strdup</name></cpp:ifndef>
<function><type><name>char</name> <modifier>*</modifier></type><name>mdbx_strdup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>bytes</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dup</name> <init>= <expr><call><name>mdbx_malloc</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>dup</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dup</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><name>dup</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* mdbx_strdup */</comment>

<comment type="block">/*----------------------------------------------------------------------------*/</comment>

<function><type><name>MDBX_INTERNAL_FUNC</name> <name>int</name></type> <name>mdbx_condpair_init</name><parameter_list>(<parameter><decl><type><name>mdbx_condpair_t</name> <modifier>*</modifier></type><name>condpair</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>condpair</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mdbx_condpair_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>condpair</name><operator>-&gt;</operator><name>mutex</name></name> <operator>=</operator> <call><name>CreateMutexW</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>GetLastError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>bailout_mutex</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>condpair</name><operator>-&gt;</operator><name>event</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>CreateEventW</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>GetLastError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>bailout_event</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>condpair</name><operator>-&gt;</operator><name>event</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CreateEventW</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>MDBX_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>GetLastError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>condpair</name><operator>-&gt;</operator><name>event</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>bailout_event</name>:</label>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>condpair</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>condpair</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>rc</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <goto>goto <name>bailout_mutex</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>pthread_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>condpair</name><operator>-&gt;</operator><name>cond</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>rc</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <goto>goto <name>bailout_cond</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>pthread_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>condpair</name><operator>-&gt;</operator><name>cond</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>MDBX_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>pthread_cond_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>condpair</name><operator>-&gt;</operator><name>cond</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>bailout_cond</name>:</label>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>condpair</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<label><name>bailout_mutex</name>:</label>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>condpair</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mdbx_condpair_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>MDBX_INTERNAL_FUNC</name> <name>int</name></type> <name>mdbx_condpair_destroy</name><parameter_list>(<parameter><decl><type><name>mdbx_condpair_t</name> <modifier>*</modifier></type><name>condpair</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><ternary><condition><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>condpair</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>MDBX_SUCCESS</name></expr> </then><else>: <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <ternary><condition><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>condpair</name><operator>-&gt;</operator><name>event</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>rc</name></expr> </then><else>: <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <ternary><condition><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>condpair</name><operator>-&gt;</operator><name>event</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>rc</name></expr> </then><else>: <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>rc</name> <init>= <expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>condpair</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>pthread_cond_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>condpair</name><operator>-&gt;</operator><name>cond</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>err</name></expr> </then><else>: <expr><name>rc</name></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>pthread_cond_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>condpair</name><operator>-&gt;</operator><name>cond</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>err</name></expr> </then><else>: <expr><name>rc</name></expr></else></ternary></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>condpair</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mdbx_condpair_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>MDBX_INTERNAL_FUNC</name> <name>int</name></type> <name>mdbx_condpair_lock</name><parameter_list>(<parameter><decl><type><name>mdbx_condpair_t</name> <modifier>*</modifier></type><name>condpair</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>DWORD</name></type> <name>code</name> <init>= <expr><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name><name>condpair</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>waitstatus2errcode</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>condpair</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>MDBX_INTERNAL_FUNC</name> <name>int</name></type> <name>mdbx_condpair_unlock</name><parameter_list>(<parameter><decl><type><name>mdbx_condpair_t</name> <modifier>*</modifier></type><name>condpair</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr></cpp:if>
  <return>return <expr><ternary><condition><expr><call><name>ReleaseMutex</name><argument_list>(<argument><expr><name><name>condpair</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>MDBX_SUCCESS</name></expr> </then><else>: <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>condpair</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>MDBX_INTERNAL_FUNC</name> <name>int</name></type> <name>mdbx_condpair_signal</name><parameter_list>(<parameter><decl><type><name>mdbx_condpair_t</name> <modifier>*</modifier></type><name>condpair</name></decl></parameter>,
                                            <parameter><decl><type><name>bool</name></type> <name>part</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr></cpp:if>
  <return>return <expr><ternary><condition><expr><call><name>SetEvent</name><argument_list>(<argument><expr><name><name>condpair</name><operator>-&gt;</operator><name>event</name><index>[<expr><name>part</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>MDBX_SUCCESS</name></expr> </then><else>: <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>pthread_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>condpair</name><operator>-&gt;</operator><name>cond</name><index>[<expr><name>part</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>MDBX_INTERNAL_FUNC</name> <name>int</name></type> <name>mdbx_condpair_wait</name><parameter_list>(<parameter><decl><type><name>mdbx_condpair_t</name> <modifier>*</modifier></type><name>condpair</name></decl></parameter>,
                                          <parameter><decl><type><name>bool</name></type> <name>part</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>DWORD</name></type> <name>code</name> <init>= <expr><call><name>SignalObjectAndWait</name><argument_list>(<argument><expr><name><name>condpair</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><name><name>condpair</name><operator>-&gt;</operator><name>event</name><index>[<expr><name>part</name></expr>]</index></name></expr></argument>,
                                   <argument><expr><name>INFINITE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>WAIT_OBJECT_0</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name><name>condpair</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>WAIT_OBJECT_0</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>MDBX_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>waitstatus2errcode</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>pthread_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>condpair</name><operator>-&gt;</operator><name>cond</name><index>[<expr><name>part</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>condpair</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/*----------------------------------------------------------------------------*/</comment>

<function><type><name>MDBX_INTERNAL_FUNC</name> <name>int</name></type> <name>mdbx_fastmutex_init</name><parameter_list>(<parameter><decl><type><name>mdbx_fastmutex_t</name> <modifier>*</modifier></type><name>fastmutex</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name>InitializeCriticalSection</name><argument_list>(<argument><expr><name>fastmutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>MDBX_SUCCESS</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><name>fastmutex</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>MDBX_INTERNAL_FUNC</name> <name>int</name></type> <name>mdbx_fastmutex_destroy</name><parameter_list>(<parameter><decl><type><name>mdbx_fastmutex_t</name> <modifier>*</modifier></type><name>fastmutex</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name>DeleteCriticalSection</name><argument_list>(<argument><expr><name>fastmutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>MDBX_SUCCESS</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><name>fastmutex</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>MDBX_INTERNAL_FUNC</name> <name>int</name></type> <name>mdbx_fastmutex_acquire</name><parameter_list>(<parameter><decl><type><name>mdbx_fastmutex_t</name> <modifier>*</modifier></type><name>fastmutex</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <macro><name>__try</name></macro> <block>{<block_content>
    <expr_stmt><expr><call><name>EnterCriticalSection</name><argument_list>(<argument><expr><name>fastmutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block> <macro><name>__except</name> <argument_list>(
      <argument>(GetExceptionCode() ==
       <literal type="number">0xC0000194</literal> <comment type="block">/* STATUS_POSSIBLE_DEADLOCK / EXCEPTION_POSSIBLE_DEADLOCK */</comment>)
          ? EXCEPTION_EXECUTE_HANDLER
          : EXCEPTION_CONTINUE_SEARCH</argument>)</argument_list></macro> <block>{<block_content>
    <return>return <expr><name>ERROR_POSSIBLE_DEADLOCK</name></expr>;</return>
  </block_content>}</block>
  <return>return <expr><name>MDBX_SUCCESS</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><name>fastmutex</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>MDBX_INTERNAL_FUNC</name> <name>int</name></type> <name>mdbx_fastmutex_release</name><parameter_list>(<parameter><decl><type><name>mdbx_fastmutex_t</name> <modifier>*</modifier></type><name>fastmutex</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr><name>fastmutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>MDBX_SUCCESS</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><name>fastmutex</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/*----------------------------------------------------------------------------*/</comment>

<function><type><name>MDBX_INTERNAL_FUNC</name> <name>int</name></type> <name>mdbx_removefile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>wlen</name> <init>= <expr><call><name>mbstowcs</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>wlen</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>wlen</name></expr></argument> &gt;</argument_list></name> <comment type="block">/* MAX_PATH */</comment> <name>INT16_MAX</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>ERROR_INVALID_NAME</name></expr>;</return></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>pathnameW</name> <init>= <expr><call><name>_alloca</name><argument_list>(<argument><expr><operator>(</operator><name>wlen</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>wchar_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>wlen</name> <operator>!=</operator> <call><name>mbstowcs</name><argument_list>(<argument><expr><name>pathnameW</name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>, <argument><expr><name>wlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>ERROR_INVALID_NAME</name></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><ternary><condition><expr><call><name>DeleteFileW</name><argument_list>(<argument><expr><name>pathnameW</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>MDBX_SUCCESS</name></expr> </then><else>: <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><ternary><condition><expr><call><name>unlink</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>errno</name></expr> </then><else>: <expr><name>MDBX_SUCCESS</name></expr></else></ternary></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_valid_fd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>!</operator><operator>(</operator><call><name>isatty</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EBADF</name><operator>)</operator></expr>;</return> </block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block" format="doxygen">/*! Windows */</comment>

<function><type><name>MDBX_INTERNAL_FUNC</name> <name>int</name></type> <name>mdbx_removedirectory</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>wlen</name> <init>= <expr><call><name>mbstowcs</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>wlen</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>wlen</name></expr></argument> &gt;</argument_list></name> <comment type="block">/* MAX_PATH */</comment> <name>INT16_MAX</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>ERROR_INVALID_NAME</name></expr>;</return></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>pathnameW</name> <init>= <expr><call><name>_alloca</name><argument_list>(<argument><expr><operator>(</operator><name>wlen</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>wchar_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>wlen</name> <operator>!=</operator> <call><name>mbstowcs</name><argument_list>(<argument><expr><name>pathnameW</name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>, <argument><expr><name>wlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>ERROR_INVALID_NAME</name></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><ternary><condition><expr><call><name>RemoveDirectoryW</name><argument_list>(<argument><expr><name>pathnameW</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>MDBX_SUCCESS</name></expr> </then><else>: <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><ternary><condition><expr><call><name>rmdir</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>errno</name></expr> </then><else>: <expr><name>MDBX_SUCCESS</name></expr></else></ternary></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>MDBX_INTERNAL_FUNC</name> <name>int</name></type> <name>mdbx_openfile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>enum</name> <name>mdbx_openfile_purpose</name></name></type> <name>purpose</name></decl></parameter>,
                                     <parameter><decl><type><specifier>const</specifier> <name>MDBX_env</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>,
                                     <parameter><decl><type><name>mdbx_filehandle_t</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>,
                                     <parameter><decl><type><name>mdbx_mode_t</name></type> <name>unix_mode_bits</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>fd</name> <operator>=</operator> <name>INVALID_HANDLE_VALUE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>wlen</name> <init>= <expr><call><name>mbstowcs</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>wlen</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>wlen</name></expr></argument> &gt;</argument_list></name> <comment type="block">/* MAX_PATH */</comment> <name>INT16_MAX</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>ERROR_INVALID_NAME</name></expr>;</return></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>pathnameW</name> <init>= <expr><call><name>_alloca</name><argument_list>(<argument><expr><operator>(</operator><name>wlen</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>wchar_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>wlen</name> <operator>!=</operator> <call><name>mbstowcs</name><argument_list>(<argument><expr><name>pathnameW</name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>, <argument><expr><name>wlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>ERROR_INVALID_NAME</name></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>DWORD</name></type> <name>CreationDisposition</name> <init>= <expr><ternary><condition><expr><name>unix_mode_bits</name></expr> ?</condition><then> <expr><name>OPEN_ALWAYS</name></expr> </then><else>: <expr><name>OPEN_EXISTING</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DWORD</name></type> <name>FlagsAndAttributes</name> <init>=
      <expr><name>FILE_FLAG_POSIX_SEMANTICS</name> <operator>|</operator> <name>FILE_ATTRIBUTE_NOT_CONTENT_INDEXED</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DWORD</name></type> <name>DesiredAccess</name> <init>= <expr><name>FILE_READ_ATTRIBUTES</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DWORD</name></type> <name>ShareMode</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>env</name><operator>-&gt;</operator><name>me_flags</name></name> <operator>&amp;</operator> <name>MDBX_EXCLUSIVE</name><operator>)</operator></expr>
                        ?</condition><then> <expr><literal type="number">0</literal></expr>
                        </then><else>: <expr><operator>(</operator><name>FILE_SHARE_READ</name> <operator>|</operator> <name>FILE_SHARE_WRITE</name><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>

  <switch>switch <condition>(<expr><name>purpose</name></expr>)</condition> <block>{<block_content>
  <default>default:</default>
    <return>return <expr><name>ERROR_INVALID_PARAMETER</name></expr>;</return>
  <case>case <expr><name>MDBX_OPEN_LCK</name></expr>:</case>
    <expr_stmt><expr><name>CreationDisposition</name> <operator>=</operator> <name>OPEN_ALWAYS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>DesiredAccess</name> <operator>|=</operator> <name>GENERIC_READ</name> <operator>|</operator> <name>GENERIC_WRITE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>FlagsAndAttributes</name> <operator>|=</operator> <name>FILE_ATTRIBUTE_HIDDEN</name> <operator>|</operator> <name>FILE_ATTRIBUTE_TEMPORARY</name></expr>;</expr_stmt>
    <break>break;</break>
  <case>case <expr><name>MDBX_OPEN_DXB_READ</name></expr>:</case>
    <expr_stmt><expr><name>CreationDisposition</name> <operator>=</operator> <name>OPEN_EXISTING</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>DesiredAccess</name> <operator>|=</operator> <name>GENERIC_READ</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ShareMode</name> <operator>|=</operator> <name>FILE_SHARE_READ</name></expr>;</expr_stmt>
    <break>break;</break>
  <case>case <expr><name>MDBX_OPEN_DXB_LAZY</name></expr>:</case>
    <expr_stmt><expr><name>DesiredAccess</name> <operator>|=</operator> <name>GENERIC_READ</name> <operator>|</operator> <name>GENERIC_WRITE</name></expr>;</expr_stmt>
    <break>break;</break>
  <case>case <expr><name>MDBX_OPEN_DXB_DSYNC</name></expr>:</case>
    <expr_stmt><expr><name>CreationDisposition</name> <operator>=</operator> <name>OPEN_EXISTING</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>DesiredAccess</name> <operator>|=</operator> <name>GENERIC_WRITE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>FlagsAndAttributes</name> <operator>|=</operator> <name>FILE_FLAG_WRITE_THROUGH</name></expr>;</expr_stmt>
    <break>break;</break>
  <case>case <expr><name>MDBX_OPEN_COPY</name></expr>:</case>
    <expr_stmt><expr><name>CreationDisposition</name> <operator>=</operator> <name>CREATE_NEW</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ShareMode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>DesiredAccess</name> <operator>|=</operator> <name>GENERIC_WRITE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>FlagsAndAttributes</name> <operator>|=</operator>
        <ternary><condition><expr><operator>(</operator><name><name>env</name><operator>-&gt;</operator><name>me_psize</name></name> <operator>&lt;</operator> <name><name>env</name><operator>-&gt;</operator><name>me_os_psize</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>FILE_FLAG_NO_BUFFERING</name></expr></else></ternary></expr>;</expr_stmt>
    <break>break;</break>
  <case>case <expr><name>MDBX_OPEN_DELETE</name></expr>:</case>
    <expr_stmt><expr><name>CreationDisposition</name> <operator>=</operator> <name>OPEN_EXISTING</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ShareMode</name> <operator>|=</operator> <name>FILE_SHARE_DELETE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>DesiredAccess</name> <operator>=</operator>
        <name>FILE_READ_ATTRIBUTES</name> <operator>|</operator> <name>FILE_WRITE_ATTRIBUTES</name> <operator>|</operator> <name>DELETE</name> <operator>|</operator> <name>SYNCHRONIZE</name></expr>;</expr_stmt>
    <break>break;</break>
  </block_content>}</block></switch>

  <expr_stmt><expr><operator>*</operator><name>fd</name> <operator>=</operator> <call><name>CreateFileW</name><argument_list>(<argument><expr><name>pathnameW</name></expr></argument>, <argument><expr><name>DesiredAccess</name></expr></argument>, <argument><expr><name>ShareMode</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                    <argument><expr><name>CreationDisposition</name></expr></argument>, <argument><expr><name>FlagsAndAttributes</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>fd</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>GetLastError</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>BY_HANDLE_FILE_INFORMATION</name></type> <name>info</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetFileInformationByHandle</name><argument_list>(<argument><expr><operator>*</operator><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><operator>*</operator><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>fd</name> <operator>=</operator> <name>INVALID_HANDLE_VALUE</name></expr>;</expr_stmt>
    <return>return <expr><name>err</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>DWORD</name></type> <name>AttributesDiff</name> <init>=
      <expr><operator>(</operator><name><name>info</name><operator>.</operator><name>dwFileAttributes</name></name> <operator>^</operator> <name>FlagsAndAttributes</name><operator>)</operator> <operator>&amp;</operator>
      <operator>(</operator><name>FILE_ATTRIBUTE_HIDDEN</name> <operator>|</operator> <name>FILE_ATTRIBUTE_NOT_CONTENT_INDEXED</name> <operator>|</operator>
       <name>FILE_ATTRIBUTE_TEMPORARY</name> <operator>|</operator> <name>FILE_ATTRIBUTE_COMPRESSED</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>AttributesDiff</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>SetFileAttributesW</name><argument_list>(<argument><expr><name>pathnameW</name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>dwFileAttributes</name></name> <operator>^</operator> <name>AttributesDiff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><ternary><condition><expr><name>unix_mode_bits</name></expr> ?</condition><then> <expr><name>O_CREAT</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name>purpose</name></expr>)</condition> <block>{<block_content>
  <default>default:</default>
    <return>return <expr><name>EINVAL</name></expr>;</return>
  <case>case <expr><name>MDBX_OPEN_LCK</name></expr>:</case>
    <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>O_RDWR</name></expr>;</expr_stmt>
    <break>break;</break>
  <case>case <expr><name>MDBX_OPEN_DXB_READ</name></expr>:</case>
    <expr_stmt><expr><name>flags</name> <operator>=</operator> <name>O_RDONLY</name></expr>;</expr_stmt>
    <break>break;</break>
  <case>case <expr><name>MDBX_OPEN_DXB_LAZY</name></expr>:</case>
    <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>O_RDWR</name></expr>;</expr_stmt>
    <break>break;</break>
  <case>case <expr><name>MDBX_OPEN_COPY</name></expr>:</case>
    <expr_stmt><expr><name>flags</name> <operator>=</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_WRONLY</name> <operator>|</operator> <name>O_EXCL</name></expr>;</expr_stmt>
    <break>break;</break>
  <case>case <expr><name>MDBX_OPEN_DXB_DSYNC</name></expr>:</case>
    <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>O_WRONLY</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>O_DSYNC</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>O_DSYNC</name></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>O_SYNC</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>O_SYNC</name></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>O_FSYNC</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>O_FSYNC</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <break>break;</break>
  <case>case <expr><name>MDBX_OPEN_DELETE</name></expr>:</case>
    <expr_stmt><expr><name>flags</name> <operator>=</operator> <name>O_RDWR</name></expr>;</expr_stmt>
    <break>break;</break>
  </block_content>}</block></switch>

  <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>direct_nocache_for_copy</name> <init>=
      <expr><name><name>env</name><operator>-&gt;</operator><name>me_psize</name></name> <operator>&gt;=</operator> <name><name>env</name><operator>-&gt;</operator><name>me_os_psize</name></name> <operator>&amp;&amp;</operator> <name>purpose</name> <operator>==</operator> <name>MDBX_OPEN_COPY</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>direct_nocache_for_copy</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>O_DIRECT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>O_DIRECT</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* O_DIRECT */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>O_NOCACHE</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>O_NOCACHE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* O_NOCACHE */</comment>
  </block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>O_CLOEXEC</name></cpp:ifdef>
  <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>O_CLOEXEC</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* O_CLOEXEC */</comment>

  <comment type="block">/* Safeguard for https://github.com/erthink/libmdbx/issues/144 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>STDIN_FILENO</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>STDOUT_FILENO</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>STDERR_FILENO</name> <operator>==</operator> <literal type="number">2</literal></expr></cpp:if>
  <decl_stmt><decl><type><name>int</name></type> <name>stub_fd0</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>stub_fd1</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>stub_fd2</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>dev_null</name><index>[]</index></name> <init>= <expr><literal type="string">"/dev/null"</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_valid_fd</name><argument_list>(<argument><expr><name>STDIN_FILENO</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mdbx_warning</name><argument_list>(<argument><expr><literal type="string">"STD%s_FILENO/%d is invalid, open %s for temporary stub"</literal></expr></argument>, <argument><expr><literal type="string">"IN"</literal></expr></argument>,
                 <argument><expr><name>STDIN_FILENO</name></expr></argument>, <argument><expr><name>dev_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>stub_fd0</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>dev_null</name></expr></argument>, <argument><expr><name>O_RDONLY</name> <operator>|</operator> <name>O_NOCTTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_valid_fd</name><argument_list>(<argument><expr><name>STDOUT_FILENO</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mdbx_warning</name><argument_list>(<argument><expr><literal type="string">"STD%s_FILENO/%d is invalid, open %s for temporary stub"</literal></expr></argument>,
                 <argument><expr><literal type="string">"OUT"</literal></expr></argument>, <argument><expr><name>STDOUT_FILENO</name></expr></argument>, <argument><expr><name>dev_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>stub_fd1</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>dev_null</name></expr></argument>, <argument><expr><name>O_WRONLY</name> <operator>|</operator> <name>O_NOCTTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_valid_fd</name><argument_list>(<argument><expr><name>STDERR_FILENO</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mdbx_warning</name><argument_list>(<argument><expr><literal type="string">"STD%s_FILENO/%d is invalid, open %s for temporary stub"</literal></expr></argument>,
                 <argument><expr><literal type="string">"ERR"</literal></expr></argument>, <argument><expr><name>STDERR_FILENO</name></expr></argument>, <argument><expr><name>dev_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>stub_fd2</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>dev_null</name></expr></argument>, <argument><expr><name>O_WRONLY</name> <operator>|</operator> <name>O_NOCTTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Unexpected or unsupported UNIX or POSIX system"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STDIN_FILENO == 0 &amp;&amp; STDERR_FILENO == 2 */</comment>

  <expr_stmt><expr><operator>*</operator><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>unix_mode_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>O_DIRECT</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>O_DIRECT</name><operator>)</operator> <operator>&amp;&amp;</operator>
      <operator>(</operator><name>errno</name> <operator>==</operator> <name>EINVAL</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>EAFNOSUPPORT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>O_DIRECT</name> <operator>|</operator> <name>O_EXCL</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>unix_mode_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* O_DIRECT */</comment>

  <comment type="block">/* Safeguard for https://github.com/erthink/libmdbx/issues/144 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>STDIN_FILENO</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>STDOUT_FILENO</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>STDERR_FILENO</name> <operator>==</operator> <literal type="number">2</literal></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>fd</name> <operator>==</operator> <name>STDIN_FILENO</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mdbx_warning</name><argument_list>(<argument><expr><literal type="string">"Got STD%s_FILENO/%d, avoid using it by dup(fd)"</literal></expr></argument>, <argument><expr><literal type="string">"IN"</literal></expr></argument>,
                 <argument><expr><name>STDIN_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>stub_fd0</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>fd</name> <operator>=</operator> <call><name>dup</name><argument_list>(<argument><expr><name>stub_fd0</name> <operator>=</operator> <operator>*</operator><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>fd</name> <operator>==</operator> <name>STDOUT_FILENO</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mdbx_warning</name><argument_list>(<argument><expr><literal type="string">"Got STD%s_FILENO/%d, avoid using it by dup(fd)"</literal></expr></argument>, <argument><expr><literal type="string">"OUT"</literal></expr></argument>,
                 <argument><expr><name>STDOUT_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>stub_fd1</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>fd</name> <operator>=</operator> <call><name>dup</name><argument_list>(<argument><expr><name>stub_fd1</name> <operator>=</operator> <operator>*</operator><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>fd</name> <operator>==</operator> <name>STDERR_FILENO</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mdbx_warning</name><argument_list>(<argument><expr><literal type="string">"Got STD%s_FILENO/%d, avoid using it by dup(fd)"</literal></expr></argument>, <argument><expr><literal type="string">"ERR"</literal></expr></argument>,
                 <argument><expr><name>STDERR_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>stub_fd2</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>fd</name> <operator>=</operator> <call><name>dup</name><argument_list>(<argument><expr><name>stub_fd2</name> <operator>=</operator> <operator>*</operator><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>stub_fd0</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>stub_fd0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>stub_fd1</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>stub_fd1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>stub_fd2</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>stub_fd2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>fd</name> <operator>&gt;=</operator> <name>STDIN_FILENO</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>fd</name> <operator>&lt;=</operator> <name>STDERR_FILENO</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mdbx_error</name><argument_list>(
        <argument><expr><literal type="string">"Rejecting the use of a FD in the range "</literal>
        <literal type="string">"STDIN_FILENO/%d..STDERR_FILENO/%d to prevent database corruption"</literal></expr></argument>,
        <argument><expr><name>STDIN_FILENO</name></expr></argument>, <argument><expr><name>STDERR_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><operator>*</operator><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>EBADF</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Unexpected or unsupported UNIX or POSIX system"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* STDIN_FILENO == 0 &amp;&amp; STDERR_FILENO == 2 */</comment>

  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>errno</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FD_CLOEXEC</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>O_CLOEXEC</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>fd_flags</name> <init>= <expr><call><name>fcntl</name><argument_list>(<argument><expr><operator>*</operator><name>fd</name></expr></argument>, <argument><expr><name>F_GETFD</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>fd_flags</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fcntl</name><argument_list>(<argument><expr><operator>*</operator><name>fd</name></expr></argument>, <argument><expr><name>F_SETFD</name></expr></argument>, <argument><expr><name>fd_flags</name> <operator>|</operator> <name>FD_CLOEXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FD_CLOEXEC &amp;&amp; !O_CLOEXEC */</comment>

  <if_stmt><if>if <condition>(<expr><name>direct_nocache_for_copy</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>F_NOCACHE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>O_NOCACHE</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fcntl</name><argument_list>(<argument><expr><operator>*</operator><name>fd</name></expr></argument>, <argument><expr><name>F_NOCACHE</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* F_NOCACHE */</comment>
  </block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>MDBX_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>MDBX_INTERNAL_FUNC</name> <name>int</name></type> <name>mdbx_closefile</name><parameter_list>(<parameter><decl><type><name>mdbx_filehandle_t</name></type> <name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr></cpp:if>
  <return>return <expr><ternary><condition><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>MDBX_SUCCESS</name></expr> </then><else>: <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>fd</name> <operator>&gt;</operator> <name>STDERR_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><ternary><condition><expr><operator>(</operator><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>MDBX_SUCCESS</name></expr> </then><else>: <expr><name>errno</name></expr></else></ternary></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>MDBX_INTERNAL_FUNC</name> <name>int</name></type> <name>mdbx_pread</name><parameter_list>(<parameter><decl><type><name>mdbx_filehandle_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytes</name></decl></parameter>,
                                  <parameter><decl><type><name>uint64_t</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>&gt;</operator> <name>MAX_WRITE</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>MDBX_EINVAL</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>OVERLAPPED</name></type> <name>ov</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ov</name><operator>.</operator><name>hEvent</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ov</name><operator>.</operator><name>Offset</name></name> <operator>=</operator> <operator>(</operator><name>DWORD</name><operator>)</operator><name>offset</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ov</name><operator>.</operator><name>OffsetHigh</name></name> <operator>=</operator> <call><name>HIGH_DWORD</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>DWORD</name></type> <name>read</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><call><name>ReadFile</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>DWORD</name><operator>)</operator><name>bytes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>read</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ov</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><ternary><condition><expr><operator>(</operator><name>rc</name> <operator>==</operator> <name>MDBX_SUCCESS</name><operator>)</operator></expr> ?</condition><then> <comment type="block">/* paranoia */</comment> <expr><name>ERROR_READ_FAULT</name></expr> </then><else>: <expr><name>rc</name></expr></else></ternary></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>STATIC_ASSERT_MSG</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>off_t</name></expr></argument>)</argument_list></sizeof> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                    <argument><expr><literal type="string">"libmdbx requires 64-bit file I/O on 64-bit systems"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>intptr_t</name></type> <name>read</name> <init>= <expr><call><name>pread</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>read</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
    <return>return <expr><ternary><condition><expr><operator>(</operator><name>rc</name> <operator>==</operator> <name>MDBX_SUCCESS</name><operator>)</operator></expr> ?</condition><then> <comment type="block">/* paranoia */</comment> <expr><name>MDBX_EIO</name></expr> </then><else>: <expr><name>rc</name></expr></else></ternary></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><ternary><condition><expr><operator>(</operator><name>bytes</name> <operator>==</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>read</name><operator>)</operator></expr> ?</condition><then> <expr><name>MDBX_SUCCESS</name></expr> </then><else>: <expr><name>MDBX_ENODATA</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>MDBX_INTERNAL_FUNC</name> <name>int</name></type> <name>mdbx_pwrite</name><parameter_list>(<parameter><decl><type><name>mdbx_filehandle_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
                                   <parameter><decl><type><name>size_t</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name>OVERLAPPED</name></type> <name>ov</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>ov</name><operator>.</operator><name>hEvent</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ov</name><operator>.</operator><name>Offset</name></name> <operator>=</operator> <operator>(</operator><name>DWORD</name><operator>)</operator><name>offset</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ov</name><operator>.</operator><name>OffsetHigh</name></name> <operator>=</operator> <call><name>HIGH_DWORD</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>DWORD</name></type> <name>written</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><call><name>WriteFile</name><argument_list>(
            <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>likely</name><argument_list>(<argument><expr><name>bytes</name> <operator>&lt;=</operator> <name>MAX_WRITE</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>(</operator><name>DWORD</name><operator>)</operator><name>bytes</name></expr> </then><else>: <expr><name>MAX_WRITE</name></expr></else></ternary></expr></argument>,
            <argument><expr><operator>&amp;</operator><name>written</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ov</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>GetLastError</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>bytes</name> <operator>==</operator> <name>written</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>MDBX_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>STATIC_ASSERT_MSG</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>off_t</name></expr></argument>)</argument_list></sizeof> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                      <argument><expr><literal type="string">"libmdbx requires 64-bit file I/O on 64-bit systems"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>intptr_t</name></type> <name>written</name> <init>=
        <expr><call><name>pwrite</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>likely</name><argument_list>(<argument><expr><name>bytes</name> <operator>&lt;=</operator> <name>MAX_WRITE</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>bytes</name></expr> </then><else>: <expr><name>MAX_WRITE</name></expr></else></ternary></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>bytes</name> <operator>==</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>written</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>MDBX_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>written</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>rc</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name>bytes</name> <operator>-=</operator> <name>written</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>written</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name> <operator>+</operator> <name>written</name></expr>;</expr_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>MDBX_INTERNAL_FUNC</name> <name>int</name></type> <name>mdbx_write</name><parameter_list>(<parameter><decl><type><name>mdbx_filehandle_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
                                  <parameter><decl><type><name>size_t</name></type> <name>bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name>DWORD</name></type> <name>written</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><call><name>WriteFile</name><argument_list>(
            <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>likely</name><argument_list>(<argument><expr><name>bytes</name> <operator>&lt;=</operator> <name>MAX_WRITE</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>(</operator><name>DWORD</name><operator>)</operator><name>bytes</name></expr> </then><else>: <expr><name>MAX_WRITE</name></expr></else></ternary></expr></argument>,
            <argument><expr><operator>&amp;</operator><name>written</name></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>GetLastError</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>bytes</name> <operator>==</operator> <name>written</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>MDBX_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>STATIC_ASSERT_MSG</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>off_t</name></expr></argument>)</argument_list></sizeof> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                      <argument><expr><literal type="string">"libmdbx requires 64-bit file I/O on 64-bit systems"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>intptr_t</name></type> <name>written</name> <init>=
        <expr><call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>likely</name><argument_list>(<argument><expr><name>bytes</name> <operator>&lt;=</operator> <name>MAX_WRITE</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>bytes</name></expr> </then><else>: <expr><name>MAX_WRITE</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>bytes</name> <operator>==</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>written</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>MDBX_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>written</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>rc</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name>bytes</name> <operator>-=</operator> <name>written</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name> <operator>+</operator> <name>written</name></expr>;</expr_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mdbx_pwritev</name><parameter_list>(<parameter><decl><type><name>mdbx_filehandle_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>iovec</name></name> <modifier>*</modifier></type><name>iov</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iovcnt</name></decl></parameter>,
                 <parameter><decl><type><name>uint64_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>expected_written</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call> <operator>||</operator>                \
    <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__ANDROID_API__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__ANDROID_API__</name> <operator>&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr></cpp:if>
  <decl_stmt><decl><type><name>size_t</name></type> <name>written</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>iovcnt</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>mdbx_pwrite</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>iov</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_base</name></expr></argument>, <argument><expr><name><name>iov</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_len</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>written</name> <operator>+=</operator> <name><name>iov</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_len</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>iov</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_len</name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><ternary><condition><expr><operator>(</operator><name>expected_written</name> <operator>==</operator> <name>written</name><operator>)</operator></expr> ?</condition><then> <expr><name>MDBX_SUCCESS</name></expr>
                                       </then><else>: <expr><name>MDBX_EIO</name></expr></else></ternary></expr> <comment type="block">/* ERROR_WRITE_FAULT */</comment>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>intptr_t</name></type> <name>written</name></decl>;</decl_stmt>
  <do>do <block>{<block_content>
    <expr_stmt><expr><call><name>STATIC_ASSERT_MSG</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>off_t</name></expr></argument>)</argument_list></sizeof> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                      <argument><expr><literal type="string">"libmdbx requires 64-bit file I/O on 64-bit systems"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>written</name> <operator>=</operator> <call><name>pwritev</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>iov</name></expr></argument>, <argument><expr><name>iovcnt</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>expected_written</name> <operator>==</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>written</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>MDBX_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
  </block_content>}</block> while <condition>(<expr><name>rc</name> <operator>==</operator> <name>EINTR</name></expr>)</condition>;</do>
  <return>return <expr><ternary><condition><expr><operator>(</operator><name>written</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>rc</name></expr> </then><else>: <expr><name>MDBX_EIO</name></expr></else></ternary></expr> <comment type="block">/* Use which error code? */</comment>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>MDBX_INTERNAL_FUNC</name> <name>int</name></type> <name>mdbx_fsync</name><parameter_list>(<parameter><decl><type><name>mdbx_filehandle_t</name></type> <name>fd</name></decl></parameter>,
                                  <parameter><decl><type><name><name>enum</name> <name>mdbx_syncmode_bits</name></name></type> <name>mode_bits</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>mode_bits</name> <operator>&amp;</operator> <operator>(</operator><name>MDBX_SYNC_DATA</name> <operator>|</operator> <name>MDBX_SYNC_IODQ</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>FlushFileBuffers</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>GetLastError</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><name>MDBX_SUCCESS</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>                                                      \
    <name>MDBX_OSX_SPEED_INSTEADOF_DURABILITY</name> <operator>==</operator> <name>MDBX_OSX_WANNA_DURABILITY</name></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><name>mode_bits</name> <operator>&amp;</operator> <name>MDBX_SYNC_IODQ</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><ternary><condition><expr><call><name>likely</name><argument_list>(<argument><expr><call><name>fcntl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>F_FULLFSYNC</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>MDBX_SUCCESS</name></expr> </then><else>: <expr><name>errno</name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MacOS */</comment>

  <comment type="block">/* LY: This approach is always safe and without appreciable performance
   * degradation, even on a kernel with fdatasync's bug.
   *
   * For more info about of a corresponding fdatasync() bug
   * see http://www.spinics.net/lists/linux-ext4/msg33714.html */</comment>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <switch>switch <condition>(<expr><name>mode_bits</name> <operator>&amp;</operator> <operator>(</operator><name>MDBX_SYNC_DATA</name> <operator>|</operator> <name>MDBX_SYNC_SIZE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>MDBX_SYNC_NONE</name></expr>:</case>
      <return>return <expr><name>MDBX_SUCCESS</name></expr> <comment type="block">/* nothing to do */</comment>;</return>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_POSIX_SYNCHRONIZED_IO</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_POSIX_SYNCHRONIZED_IO</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></cpp:if>
    <case>case <expr><name>MDBX_SYNC_DATA</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><call><name>fdatasync</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>MDBX_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>
      <break>break <comment type="block">/* error */</comment>;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__gnu_linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case>case <expr><name>MDBX_SYNC_SIZE</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>mdbx_linux_kernel_version</name> <operator>&gt;=</operator> <literal type="number">0x03060000</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>MDBX_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>__fallthrough</name></expr> <comment type="block">/* fall through */</comment>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* Linux */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* _POSIX_SYNCHRONIZED_IO &gt; 0 */</comment>
    <default>default:</default>
      <if_stmt><if>if <condition>(<expr><call><name>fsync</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>MDBX_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></switch>

    <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mdbx_filesize</name><parameter_list>(<parameter><decl><type><name>mdbx_filehandle_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>BY_HANDLE_FILE_INFORMATION</name></type> <name>info</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetFileInformationByHandle</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>GetLastError</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>length</name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>nFileSizeLow</name></name> <operator>|</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>info</name><operator>.</operator><name>nFileSizeHigh</name></name> <operator>&lt;&lt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>STATIC_ASSERT_MSG</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>off_t</name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                    <argument><expr><literal type="string">"libmdbx requires 64-bit file I/O on 64-bit systems"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>fstat</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>errno</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>length</name> <operator>=</operator> <name><name>st</name><operator>.</operator><name>st_size</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>MDBX_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>MDBX_INTERNAL_FUNC</name> <name>int</name></type> <name>mdbx_is_pipe</name><parameter_list>(<parameter><decl><type><name>mdbx_filehandle_t</name></type> <name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <switch>switch <condition>(<expr><call><name>GetFileType</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
  <case>case <expr><name>FILE_TYPE_DISK</name></expr>:</case>
    <return>return <expr><name>MDBX_RESULT_FALSE</name></expr>;</return>
  <case>case <expr><name>FILE_TYPE_CHAR</name></expr>:</case>
  <case>case <expr><name>FILE_TYPE_PIPE</name></expr>:</case>
    <return>return <expr><name>MDBX_RESULT_TRUE</name></expr>;</return>
  <default>default:</default>
    <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>GetLastError</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></switch>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>info</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>fstat</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>errno</name></expr>;</return></block_content></block></if></if_stmt>
  <switch>switch <condition>(<expr><name><name>info</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <name>S_IFMT</name></expr>)</condition> <block>{<block_content>
  <case>case <expr><name>S_IFBLK</name></expr>:</case>
  <case>case <expr><name>S_IFREG</name></expr>:</case>
    <return>return <expr><name>MDBX_RESULT_FALSE</name></expr>;</return>
  <case>case <expr><name>S_IFCHR</name></expr>:</case>
  <case>case <expr><name>S_IFIFO</name></expr>:</case>
  <case>case <expr><name>S_IFSOCK</name></expr>:</case>
    <return>return <expr><name>MDBX_RESULT_TRUE</name></expr>;</return>
  <case>case <expr><name>S_IFDIR</name></expr>:</case>
  <case>case <expr><name>S_IFLNK</name></expr>:</case>
  <default>default:</default>
    <return>return <expr><name>MDBX_INCOMPATIBLE</name></expr>;</return>
  </block_content>}</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>MDBX_INTERNAL_FUNC</name> <name>int</name></type> <name>mdbx_ftruncate</name><parameter_list>(<parameter><decl><type><name>mdbx_filehandle_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><name>mdbx_SetFileInformationByHandle</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>FILE_END_OF_FILE_INFO</name></type> <name>EndOfFileInfo</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>EndOfFileInfo</name><operator>.</operator><name>EndOfFile</name><operator>.</operator><name>QuadPart</name></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
    <return>return <expr><ternary><condition><expr><call><name>mdbx_SetFileInformationByHandle</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>FileEndOfFileInfo</name></expr></argument>,
                                           <argument><expr><operator>&amp;</operator><name>EndOfFileInfo</name></expr></argument>,
                                           <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FILE_END_OF_FILE_INFO</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>
               ?</condition><then> <expr><name>MDBX_SUCCESS</name></expr>
               </then><else>: <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>LARGE_INTEGER</name></type> <name>li</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>li</name><operator>.</operator><name>QuadPart</name></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
    <return>return <expr><ternary><condition><expr><operator>(</operator><call><name>SetFilePointerEx</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>li</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FILE_BEGIN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>SetEndOfFile</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call><operator>)</operator></expr>
               ?</condition><then> <expr><name>MDBX_SUCCESS</name></expr>
               </then><else>: <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
  </block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>STATIC_ASSERT_MSG</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>off_t</name></expr></argument>)</argument_list></sizeof> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                    <argument><expr><literal type="string">"libmdbx requires 64-bit file I/O on 64-bit systems"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><ternary><condition><expr><call><name>ftruncate</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>MDBX_SUCCESS</name></expr> </then><else>: <expr><name>errno</name></expr></else></ternary></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>MDBX_INTERNAL_FUNC</name> <name>int</name></type> <name>mdbx_fseek</name><parameter_list>(<parameter><decl><type><name>mdbx_filehandle_t</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>pos</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>LARGE_INTEGER</name></type> <name>li</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>li</name><operator>.</operator><name>QuadPart</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
  <return>return <expr><ternary><condition><expr><call><name>SetFilePointerEx</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>li</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FILE_BEGIN</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>MDBX_SUCCESS</name></expr>
                                                    </then><else>: <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>STATIC_ASSERT_MSG</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>off_t</name></expr></argument>)</argument_list></sizeof> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                    <argument><expr><literal type="string">"libmdbx requires 64-bit file I/O on 64-bit systems"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><ternary><condition><expr><operator>(</operator><call><name>lseek</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>errno</name></expr> </then><else>: <expr><name>MDBX_SUCCESS</name></expr></else></ternary></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/*----------------------------------------------------------------------------*/</comment>

<function><type><name>MDBX_INTERNAL_FUNC</name> <name>int</name></type>
<name>mdbx_thread_create</name><parameter_list>(<parameter><decl><type><name>mdbx_thread_t</name> <modifier>*</modifier></type><name>thread</name></decl></parameter>,
                   <parameter><function_decl><type><name>THREAD_RESULT</name></type>(<name>THREAD_CALL</name> <modifier>*</modifier><name>start_routine</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
                   <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><operator>*</operator><name>thread</name> <operator>=</operator> <call><name>CreateThread</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>start_routine</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><ternary><condition><expr><operator>*</operator><name>thread</name></expr> ?</condition><then> <expr><name>MDBX_SUCCESS</name></expr> </then><else>: <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>pthread_create</name><argument_list>(<argument><expr><name>thread</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>start_routine</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>MDBX_INTERNAL_FUNC</name> <name>int</name></type> <name>mdbx_thread_join</name><parameter_list>(<parameter><decl><type><name>mdbx_thread_t</name></type> <name>thread</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>DWORD</name></type> <name>code</name> <init>= <expr><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name>thread</name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>waitstatus2errcode</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>unused_retval</name> <init>= <expr><operator>&amp;</operator><name>unused_retval</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>pthread_join</name><argument_list>(<argument><expr><name>thread</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>unused_retval</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/*----------------------------------------------------------------------------*/</comment>

<function><type><name>MDBX_INTERNAL_FUNC</name> <name>int</name></type> <name>mdbx_msync</name><parameter_list>(<parameter><decl><type><name>mdbx_mmap_t</name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>offset</name></decl></parameter>,
                                  <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>,
                                  <parameter><decl><type><name><name>enum</name> <name>mdbx_syncmode_bits</name></name></type> <name>mode_bits</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>map</name><operator>-&gt;</operator><name>address</name></name> <operator>+</operator> <name>offset</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FlushViewOfFile</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>GetLastError</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__gnu_linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><name>mode_bits</name> <operator>==</operator> <name>MDBX_SYNC_NONE</name> <operator>&amp;&amp;</operator> <name>mdbx_linux_kernel_version</name> <operator>&gt;</operator> <literal type="number">0x02061300</literal></expr>)</condition><block type="pseudo"><block_content>
    <comment type="block">/* Since Linux 2.6.19, MS_ASYNC is in fact a no-op. The kernel properly
     * tracks dirty pages and flushes them to storage as necessary. */</comment>
    <return>return <expr><name>MDBX_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* Linux */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>msync</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>mode_bits</name> <operator>&amp;</operator> <name>MDBX_SYNC_DATA</name><operator>)</operator></expr> ?</condition><then> <expr><name>MS_SYNC</name></expr> </then><else>: <expr><name>MS_ASYNC</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>errno</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>mode_bits</name> <operator>&amp;=</operator> <operator>~</operator><name>MDBX_SYNC_DATA</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><call><name>mdbx_fsync</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>mode_bits</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>MDBX_INTERNAL_FUNC</name> <name>int</name></type> <name>mdbx_check_fs_rdonly</name><parameter_list>(<parameter><decl><type><name>mdbx_filehandle_t</name></type> <name>handle</name></decl></parameter>,
                                            <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>pathname</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>err</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>mdbx_GetVolumeInformationByHandleW</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>MDBX_ENOSYS</name></expr>;</return></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><name>DWORD</name></type> <name>unused</name></decl>, <decl><type ref="prev"/><name>flags</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mdbx_GetVolumeInformationByHandleW</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>unused</name></expr></argument>,
                                          <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>GetLastError</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>FILE_READ_ONLY_VOLUME</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>MDBX_EACCESS</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name><name>struct</name> <name>statvfs</name></name></type> <name>info</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>MDBX_ENOFILE</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>statvfs</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>errno</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>info</name><operator>.</operator><name>f_flag</name></name> <operator>&amp;</operator> <name>ST_RDONLY</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>fstatvfs</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>errno</name></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>info</name><operator>.</operator><name>f_flag</name></name> <operator>&amp;</operator> <name>ST_RDONLY</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><ternary><condition><expr><operator>(</operator><name>err</name> <operator>==</operator> <name>MDBX_ENOFILE</name><operator>)</operator></expr> ?</condition><then> <expr><name>MDBX_EACCESS</name></expr> </then><else>: <expr><name>err</name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !Windows */</comment>
  <return>return <expr><name>MDBX_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mdbx_check_fs_local</name><parameter_list>(<parameter><decl><type><name>mdbx_filehandle_t</name></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><call><name>mdbx_RunningUnderWine</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MDBX_EXCLUSIVE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>ERROR_NOT_CAPABLE</name></expr> <comment type="block">/* workaround for Wine */</comment>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>GetFileType</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FILE_TYPE_DISK</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>ERROR_FILE_OFFLINE</name></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>mdbx_GetFileInformationByHandleEx</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>FILE_REMOTE_PROTOCOL_INFO</name></type> <name>RemoteProtocolInfo</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mdbx_GetFileInformationByHandleEx</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>FileRemoteProtocolInfo</name></expr></argument>,
                                          <argument><expr><operator>&amp;</operator><name>RemoteProtocolInfo</name></expr></argument>,
                                          <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RemoteProtocolInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>RemoteProtocolInfo</name><operator>.</operator><name>Flags</name></name> <operator>&amp;</operator> <name>REMOTE_PROTOCOL_INFO_FLAG_OFFLINE</name><operator>)</operator> <operator>&amp;&amp;</operator>
          <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MDBX_RDONLY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>ERROR_FILE_OFFLINE</name></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>RemoteProtocolInfo</name><operator>.</operator><name>Flags</name></name> <operator>&amp;</operator> <name>REMOTE_PROTOCOL_INFO_FLAG_LOOPBACK</name><operator>)</operator> <operator>&amp;&amp;</operator>
          <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MDBX_EXCLUSIVE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>ERROR_REMOTE_STORAGE_MEDIA_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>mdbx_NtFsControlFile</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>NTSTATUS</name></type> <name>rc</name></decl>;</decl_stmt>
    <struct>struct <block>{
      <decl_stmt><decl><type><name>WOF_EXTERNAL_INFO</name></type> <name>wof_info</name></decl>;</decl_stmt>
      <union>union <block>{
        <decl_stmt><decl><type><name>WIM_PROVIDER_EXTERNAL_INFO</name></type> <name>wim_info</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>FILE_PROVIDER_EXTERNAL_INFO_V1</name></type> <name>file_info</name></decl>;</decl_stmt>
      }</block>;</union>
      <decl_stmt><decl><type><name>size_t</name></type> <name><name>reserved_for_microsoft_madness</name><index>[<expr><literal type="number">42</literal></expr>]</index></name></decl>;</decl_stmt>
    }</block> <decl><name>GetExternalBacking_OutputBuffer</name></decl>;</struct>
    <decl_stmt><decl><type><name>IO_STATUS_BLOCK</name></type> <name>StatusBlock</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_NtFsControlFile</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>StatusBlock</name></expr></argument>,
                              <argument><expr><name>FSCTL_GET_EXTERNAL_BACKING</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                              <argument><expr><operator>&amp;</operator><name>GetExternalBacking_OutputBuffer</name></expr></argument>,
                              <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GetExternalBacking_OutputBuffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>NT_SUCCESS</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MDBX_EXCLUSIVE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>ERROR_REMOTE_STORAGE_MEDIA_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>STATUS_OBJECT_NOT_EXTERNALLY_BACKED</name> <operator>&amp;&amp;</operator>
               <name>rc</name> <operator>!=</operator> <name>STATUS_INVALID_DEVICE_REQUEST</name> <operator>&amp;&amp;</operator>
               <name>rc</name> <operator>!=</operator> <name>STATUS_NOT_SUPPORTED</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><call><name>ntstatus2errcode</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>mdbx_GetVolumeInformationByHandleW</name> <operator>&amp;&amp;</operator> <name>mdbx_GetFinalPathNameByHandleW</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>WCHAR</name> <modifier>*</modifier></type><name>PathBuffer</name> <init>= <expr><call><name>mdbx_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>WCHAR</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>INT16_MAX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>PathBuffer</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>MDBX_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>MDBX_SUCCESS</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DWORD</name></type> <name>VolumeSerialNumber</name></decl>, <decl><type ref="prev"/><name>FileSystemFlags</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mdbx_GetVolumeInformationByHandleW</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>PathBuffer</name></expr></argument>, <argument><expr><name>INT16_MAX</name></expr></argument>,
                                            <argument><expr><operator>&amp;</operator><name>VolumeSerialNumber</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                            <argument><expr><operator>&amp;</operator><name>FileSystemFlags</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>GetLastError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>bailout</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MDBX_RDONLY</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>FileSystemFlags</name> <operator>&amp;</operator>
          <operator>(</operator><name>FILE_SEQUENTIAL_WRITE_ONCE</name> <operator>|</operator> <name>FILE_READ_ONLY_VOLUME</name> <operator>|</operator>
           <name>FILE_VOLUME_IS_COMPRESSED</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>ERROR_REMOTE_STORAGE_MEDIA_ERROR</name></expr>;</expr_stmt>
        <goto>goto <name>bailout</name>;</goto>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mdbx_GetFinalPathNameByHandleW</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>PathBuffer</name></expr></argument>, <argument><expr><name>INT16_MAX</name></expr></argument>,
                                        <argument><expr><name>FILE_NAME_NORMALIZED</name> <operator>|</operator>
                                            <name>VOLUME_NAME_NT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>GetLastError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>bailout</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>_wcsnicmp</name><argument_list>(<argument><expr><name>PathBuffer</name></expr></argument>, <argument><expr><literal type="string">L"\\Device\\Mup\\"</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MDBX_EXCLUSIVE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>ERROR_REMOTE_STORAGE_MEDIA_ERROR</name></expr>;</expr_stmt>
        <goto>goto <name>bailout</name>;</goto>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>mdbx_GetFinalPathNameByHandleW</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>PathBuffer</name></expr></argument>, <argument><expr><name>INT16_MAX</name></expr></argument>,
                                              <argument><expr><name>FILE_NAME_NORMALIZED</name> <operator>|</operator>
                                                  <name>VOLUME_NAME_DOS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>UINT</name></type> <name>DriveType</name> <init>= <expr><call><name>GetDriveTypeW</name><argument_list>(<argument><expr><name>PathBuffer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>DriveType</name> <operator>==</operator> <name>DRIVE_NO_ROOT_DIR</name> <operator>&amp;&amp;</operator>
          <call><name>_wcsnicmp</name><argument_list>(<argument><expr><name>PathBuffer</name></expr></argument>, <argument><expr><literal type="string">L"\\\\?\\"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
          <call><name>_wcsnicmp</name><argument_list>(<argument><expr><name>PathBuffer</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">L":\\"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>PathBuffer</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>DriveType</name> <operator>=</operator> <call><name>GetDriveTypeW</name><argument_list>(<argument><expr><name>PathBuffer</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <switch>switch <condition>(<expr><name>DriveType</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>DRIVE_CDROM</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>MDBX_RDONLY</name></expr>)</condition><block type="pseudo"><block_content>
          <break>break;</break></block_content></block></if></if_stmt>
      <comment type="line">// fall through</comment>
      <case>case <expr><name>DRIVE_UNKNOWN</name></expr>:</case>
      <case>case <expr><name>DRIVE_NO_ROOT_DIR</name></expr>:</case>
      <case>case <expr><name>DRIVE_REMOTE</name></expr>:</case>
      <default>default:</default>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MDBX_EXCLUSIVE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>ERROR_REMOTE_STORAGE_MEDIA_ERROR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <comment type="line">// fall through</comment>
      <case>case <expr><name>DRIVE_REMOVABLE</name></expr>:</case>
      <case>case <expr><name>DRIVE_FIXED</name></expr>:</case>
      <case>case <expr><name>DRIVE_RAMDISK</name></expr>:</case>
        <break>break;</break>
      </block_content>}</block></switch>
    </block_content>}</block></if></if_stmt>
  <label><name>bailout</name>:</label>
    <expr_stmt><expr><call><name>mdbx_free</name><argument_list>(<argument><expr><name>PathBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

  <decl_stmt><decl><type><name><name>struct</name> <name>statvfs</name></name></type> <name>statvfs_info</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>fstatvfs</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>statvfs_info</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>errno</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ST_LOCAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ST_EXPORTED</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>long</name></type> <name>st_flags</name> <init>= <expr><name><name>statvfs_info</name><operator>.</operator><name>f_flag</name></name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* ST_LOCAL || ST_EXPORTED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__NetBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>name</name> <init>= <expr><name><name>statvfs_info</name><operator>.</operator><name>f_fstypename</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>name_len</name> <init>= <expr><name>VFS_NAMELEN</name></expr></init></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_AIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__OS400__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>name</name> <init>= <expr><name><name>statvfs_info</name><operator>.</operator><name>f_basetype</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>name_len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>statvfs_info</name><operator>.</operator><name>f_basetype</name></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>fstat</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>errno</name></expr>;</return></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>type</name> <init>= <expr><name><name>st</name><operator>.</operator><name>st_vfstype</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>st</name><operator>.</operator><name>st_flag</name></name> <operator>&amp;</operator> <name>FS_REMOTE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MDBX_EXCLUSIVE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>MDBX_EREMOTE</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FSTYPSZ</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_FSTYPSZ</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>name</name> <init>= <expr><name><name>statvfs_info</name><operator>.</operator><name>f_basetype</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>name_len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>statvfs_info</name><operator>.</operator><name>f_basetype</name></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__sun</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SVR4</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__svr4__</name></expr></argument>)</argument_list></call> <operator>||</operator>                \
    <call><name>defined</name><argument_list>(<argument><expr><name>ST_FSTYPSZ</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_ST_FSTYPSZ</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>fstat</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>errno</name></expr>;</return></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>name</name> <init>= <expr><name><name>st</name><operator>.</operator><name>st_fstype</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>name_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name><name>struct</name> <name>statfs</name></name></type> <name>statfs_info</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>fstatfs</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>statfs_info</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>errno</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OpenBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>type</name> <init>= <expr><name><name>statfs_info</name><operator>.</operator><name>f_type</name></name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MNT_LOCAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MNT_EXPORTED</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>long</name></type> <name>mnt_flags</name> <init>= <expr><name><name>statfs_info</name><operator>.</operator><name>f_flags</name></name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MNT_LOCAL || MNT_EXPORTED */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__NetBSD__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__OpenBSD__</name></expr></argument>)</argument_list></call> <operator>||</operator>     \
    <call><name>defined</name><argument_list>(<argument><expr><name>__BSD__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__bsdi__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__DragonFly__</name></expr></argument>)</argument_list></call> <operator>||</operator>         \
    <call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__MACH__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MFSNAMELEN</name></expr></argument>)</argument_list></call> <operator>||</operator>          \
    <call><name>defined</name><argument_list>(<argument><expr><name>MFSTYPENAMELEN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VFS_NAMELEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>name</name> <init>= <expr><name><name>statfs_info</name><operator>.</operator><name>f_fstypename</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>name_len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>statfs_info</name><operator>.</operator><name>f_fstypename</name></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ANDROID_API__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__ANDROID_API__</name> <operator>&lt;</operator> <literal type="number">21</literal></expr></cpp:elif>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>name</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>name_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>name_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>fstat</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>errno</name></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>pathbuf</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>mounted</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__gnu_linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><name>mounted</name> <operator>=</operator> <call><name>setmntent</name><argument_list>(<argument><expr><literal type="string">"/proc/mounts"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* Linux */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>mounted</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>mounted</name> <operator>=</operator> <call><name>setmntent</name><argument_list>(<argument><expr><literal type="string">"/etc/mtab"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>mounted</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>mntent</name></name> <modifier>*</modifier></type><name>ent</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_BSD_SOURCE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_SVID_SOURCE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__BIONIC__</name></expr></argument>)</argument_list></call> <operator>||</operator>    \
    <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_DEFAULT_SOURCE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>__GLIBC_PREREQ</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>,</operator> <literal type="number">19</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
    <decl_stmt><decl><type><name><name>struct</name> <name>mntent</name></name></type> <name>entbuf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>should_copy</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>nullptr</name> <operator>!=</operator>
           <operator>(</operator><name>ent</name> <operator>=</operator> <call><name>getmntent_r</name><argument_list>(<argument><expr><name>mounted</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entbuf</name></expr></argument>, <argument><expr><name>pathbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pathbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>should_copy</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt></block_content></block></while>
    <while>while <condition>(<expr><name>nullptr</name> <operator>!=</operator> <operator>(</operator><name>ent</name> <operator>=</operator> <call><name>getmntent</name><argument_list>(<argument><expr><name>mounted</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>mnt</name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stat</name><argument_list>(<argument><expr><name><name>ent</name><operator>-&gt;</operator><name>mnt_dir</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mnt</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>mnt</name><operator>.</operator><name>st_dev</name></name> <operator>==</operator> <name><name>st</name><operator>.</operator><name>st_dev</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>should_copy</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>name</name> <operator>=</operator>
              <call><name>strncpy</name><argument_list>(<argument><expr><name>pathbuf</name></expr></argument>, <argument><expr><name><name>ent</name><operator>-&gt;</operator><name>mnt_fsname</name></name></expr></argument>, <argument><expr><name>name_len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pathbuf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pathbuf</name><index>[<expr><name>name_len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>ent</name><operator>-&gt;</operator><name>mnt_fsname</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name>name_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>endmntent</name><argument_list>(<argument><expr><name>mounted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !xBSD &amp;&amp; !Android/Bionic */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <if_stmt><if>if <condition>(<expr><name>name_len</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>name_len</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>strncasecmp</name><argument_list>(<argument><expr><literal type="string">"nfs"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
         <call><name>strncasecmp</name><argument_list>(<argument><expr><literal type="string">"cifs"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
         <call><name>strncasecmp</name><argument_list>(<argument><expr><literal type="string">"ncpfs"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
         <call><name>strncasecmp</name><argument_list>(<argument><expr><literal type="string">"smbfs"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
         <call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"9P"</literal></expr></argument> <comment type="block">/* WSL2 */</comment>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
         <operator>(</operator><operator>(</operator><name>name_len</name> <operator>&gt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <call><name>strncasecmp</name><argument_list>(<argument><expr><literal type="string">"fuse"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
          <call><name>strncasecmp</name><argument_list>(<argument><expr><literal type="string">"fuseblk"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
        <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MDBX_EXCLUSIVE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>MDBX_EREMOTE</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"ftp"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"http"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
        <call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"sshfs"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>MDBX_EREMOTE</name></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ST_LOCAL</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>st_flags</name> <operator>&amp;</operator> <name>ST_LOCAL</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MDBX_EXCLUSIVE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>MDBX_EREMOTE</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MNT_LOCAL</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>mnt_flags</name> <operator>&amp;</operator> <name>MNT_LOCAL</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MDBX_EXCLUSIVE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>MDBX_EREMOTE</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* ST/MNT_LOCAL */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ST_EXPORTED</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>st_flags</name> <operator>&amp;</operator> <name>ST_EXPORTED</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MDBX_RDONLY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>MDBX_EREMOTE</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MNT_EXPORTED</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>mnt_flags</name> <operator>&amp;</operator> <name>MNT_EXPORTED</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MDBX_RDONLY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>MDBX_EREMOTE</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* ST/MNT_EXPORTED */</comment>

  <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
  <case>case <expr><literal type="number">0xFF534D42</literal></expr> <comment type="block">/* CIFS_MAGIC_NUMBER */</comment>:</case>
  <case>case <expr><literal type="number">0x6969</literal></expr> <comment type="block">/* NFS_SUPER_MAGIC */</comment>:</case>
  <case>case <expr><literal type="number">0x564c</literal></expr> <comment type="block">/* NCP_SUPER_MAGIC */</comment>:</case>
  <case>case <expr><literal type="number">0x517B</literal></expr> <comment type="block">/* SMB_SUPER_MAGIC */</comment>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__digital__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__osf__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__osf</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <case>case <expr><literal type="number">0x0E</literal></expr> <comment type="block">/* Tru64 NFS */</comment>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ST_FST_NFS</name></cpp:ifdef>
  <case>case <expr><name>ST_FST_NFS</name></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MDBX_EXCLUSIVE</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>MDBX_EREMOTE</name></expr>;</return></block_content></block></if></if_stmt>
  <case>case <expr><literal type="number">0</literal></expr>:</case>
  <default>default:</default>
    <break>break;</break>
  </block_content>}</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* Unix */</comment>

  <return>return <expr><name>MDBX_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_mmap_limit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>limit</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>should_check</name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SANITIZE_ADDRESS__</name></expr></argument>)</argument_list></call></expr></cpp:if>
      <expr><name>true</name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><name>RUNNING_ON_VALGRIND</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __SANITIZE_ADDRESS__ */</comment>

  <if_stmt><if>if <condition>(<expr><name>should_check</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>intptr_t</name></type> <name>pagesize</name></decl>, <decl><type ref="prev"/><name>total_ram_pages</name></decl>, <decl><type ref="prev"/><name>avail_ram_pages</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>=
        <expr><call><name>mdbx_get_sysraminfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pagesize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>total_ram_pages</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>avail_ram_pages</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>err</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>log2page</name> <init>= <expr><call><name>log2n_powerof2</name><argument_list>(<argument><expr><name>pagesize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>limit</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>log2page</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>total_ram_pages</name> <operator>||</operator>
        <operator>(</operator><name>limit</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>log2page</name> <operator>+</operator> <literal type="number">6</literal><operator>)</operator><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>avail_ram_pages</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>mdbx_error</name><argument_list>(
          <argument><expr><literal type="string">"%s (%zu pages) is too large for available (%zu pages) or total "</literal>
          <literal type="string">"(%zu pages) system RAM"</literal></expr></argument>,
          <argument><expr><literal type="string">"database upper size limit"</literal></expr></argument>, <argument><expr><name>limit</name> <operator>&gt;&gt;</operator> <name>log2page</name></expr></argument>, <argument><expr><name>avail_ram_pages</name></expr></argument>,
          <argument><expr><name>total_ram_pages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>MDBX_TOO_LARGE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>MDBX_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>MDBX_INTERNAL_FUNC</name> <name>int</name></type> <name>mdbx_mmap</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>mdbx_mmap_t</name> <modifier>*</modifier></type><name>map</name></decl></parameter>,
                                 <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>limit</name></decl></parameter>,
                                 <parameter><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>options</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>size</name> <operator>&lt;=</operator> <name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>limit</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>address</name></name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>filesize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>section</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* Windows */</comment>

  <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>mdbx_check_fs_local</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>err</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>check_mmap_limit</name><argument_list>(<argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>err</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MDBX_RDONLY</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>options</name> <operator>&amp;</operator> <name>MMAP_OPTION_TRUNCATE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>mdbx_ftruncate</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>filesize</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
    <expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !Windows */</comment>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>mdbx_filesize</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>filesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
    <expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>map</name><operator>-&gt;</operator><name>filesize</name></name> <operator>&gt;</operator> <name>limit</name><operator>)</operator></expr> ?</condition><then> <expr><name>limit</name></expr> </then><else>: <expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>map</name><operator>-&gt;</operator><name>filesize</name></name></expr></else></ternary></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !Windows */</comment>
  </block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>LARGE_INTEGER</name></type> <name>SectionSize</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>SectionSize</name><operator>.</operator><name>QuadPart</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>NtCreateSection</name><argument_list>(
      <argument><expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>section</name></name></expr></argument>,
      <comment type="block">/* DesiredAccess */</comment>
      <argument><expr><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MDBX_WRITEMAP</name><operator>)</operator></expr>
          ?</condition><then> <expr><name>SECTION_QUERY</name> <operator>|</operator> <name>SECTION_MAP_READ</name> <operator>|</operator> <name>SECTION_EXTEND_SIZE</name> <operator>|</operator>
                <name>SECTION_MAP_WRITE</name></expr>
          </then><else>: <expr><name>SECTION_QUERY</name> <operator>|</operator> <name>SECTION_MAP_READ</name> <operator>|</operator> <name>SECTION_EXTEND_SIZE</name></expr></else></ternary></expr></argument>,
      <comment type="block">/* ObjectAttributes */</comment> <argument><expr><name>NULL</name></expr></argument>, <comment type="block">/* MaximumSize (InitialSize) */</comment> <argument><expr><operator>&amp;</operator><name>SectionSize</name></expr></argument>,
      <comment type="block">/* SectionPageProtection */</comment>
      <argument><expr><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MDBX_RDONLY</name><operator>)</operator></expr> ?</condition><then> <expr><name>PAGE_READONLY</name></expr> </then><else>: <expr><name>PAGE_READWRITE</name></expr></else></ternary></expr></argument>,
      <comment type="block">/* AllocationAttributes */</comment> <argument><expr><name>SEC_RESERVE</name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NT_SUCCESS</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>ntstatus2errcode</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>SIZE_T</name></type> <name>ViewSize</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MDBX_RDONLY</name><operator>)</operator></expr>     ?</condition><then> <expr><literal type="number">0</literal></expr>
                    </then><else>: <expr><ternary><condition><expr><call><name>mdbx_RunningUnderWine</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>size</name></expr>
                                              </then><else>: <expr><name>limit</name></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>NtMapViewOfSection</name><argument_list>(
      <argument><expr><name><name>map</name><operator>-&gt;</operator><name>section</name></name></expr></argument>, <argument><expr><call><name>GetCurrentProcess</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>address</name></name></expr></argument>,
      <comment type="block">/* ZeroBits */</comment> <argument><expr><literal type="number">0</literal></expr></argument>,
      <comment type="block">/* CommitSize */</comment> <argument><expr><literal type="number">0</literal></expr></argument>,
      <comment type="block">/* SectionOffset */</comment> <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ViewSize</name></expr></argument>,
      <comment type="block">/* InheritDisposition */</comment> <argument><expr><name>ViewUnmap</name></expr></argument>,
      <comment type="block">/* AllocationType */</comment> <argument><expr><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MDBX_RDONLY</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>MEM_RESERVE</name></expr></else></ternary></expr></argument>,
      <comment type="block">/* Win32Protect */</comment>
      <argument><expr><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MDBX_WRITEMAP</name><operator>)</operator></expr> ?</condition><then> <expr><name>PAGE_READWRITE</name></expr> </then><else>: <expr><name>PAGE_READONLY</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NT_SUCCESS</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>NtClose</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>section</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>section</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>address</name></name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
    <return>return <expr><call><name>ntstatus2errcode</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>address</name></name> <operator>!=</operator> <name>MAP_FAILED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>SectionSize</name><operator>.</operator><name>QuadPart</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>limit</name></name> <operator>=</operator> <name>ViewSize</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* Windows */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MAP_TRYFIXED</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAP_TRYFIXED</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MAP_HASSEMAPHORE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAP_HASSEMAPHORE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MAP_CONCEAL</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAP_CONCEAL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MAP_NOSYNC</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAP_NOSYNC</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MAP_FIXED_NOREPLACE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAP_FIXED_NOREPLACE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MAP_NORESERVE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAP_NORESERVE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>address</name></name> <operator>=</operator> <call><name>mmap</name><argument_list>(
      <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MDBX_WRITEMAP</name><operator>)</operator></expr> ?</condition><then> <expr><name>PROT_READ</name> <operator>|</operator> <name>PROT_WRITE</name></expr> </then><else>: <expr><name>PROT_READ</name></expr></else></ternary></expr></argument>,
      <argument><expr><name>MAP_SHARED</name> <operator>|</operator> <name>MAP_FILE</name> <operator>|</operator> <name>MAP_NORESERVE</name> <operator>|</operator>
          <operator>(</operator><ternary><condition><expr><call><name>F_ISSET</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>MDBX_UTTERLY_NOSYNC</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>MAP_NOSYNC</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>|</operator>
          <operator>(</operator><ternary><condition><expr><operator>(</operator><name>options</name> <operator>&amp;</operator> <name>MMAP_OPTION_SEMAPHORE</name><operator>)</operator></expr> ?</condition><then> <expr><name>MAP_HASSEMAPHORE</name> <operator>|</operator> <name>MAP_NOSYNC</name></expr>
                                             </then><else>: <expr><name>MAP_CONCEAL</name></expr></else></ternary><operator>)</operator></expr></argument>,
      <argument><expr><name><name>map</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>address</name></name> <operator>==</operator> <name>MAP_FAILED</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>limit</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>address</name></name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
    <return>return <expr><name>errno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>limit</name></name> <operator>=</operator> <name>limit</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MDBX_ENABLE_MADVISE</name></expr></cpp:if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MADV_DONTFORK</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>madvise</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>address</name></name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>limit</name></name></expr></argument>, <argument><expr><name>MADV_DONTFORK</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>errno</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MADV_DONTFORK */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MADV_NOHUGEPAGE</name></cpp:ifdef>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>madvise</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>address</name></name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>limit</name></name></expr></argument>, <argument><expr><name>MADV_NOHUGEPAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MADV_NOHUGEPAGE */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MDBX_ENABLE_MADVISE */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* ! Windows */</comment>

  <expr_stmt><expr><call><name>VALGRIND_MAKE_MEM_DEFINED</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>address</name></name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>current</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MDBX_ASAN_UNPOISON_MEMORY_REGION</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>address</name></name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>current</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>MDBX_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>MDBX_INTERNAL_FUNC</name> <name>int</name></type> <name>mdbx_munmap</name><parameter_list>(<parameter><decl><type><name>mdbx_mmap_t</name> <modifier>*</modifier></type><name>map</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>VALGRIND_MAKE_MEM_NOACCESS</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>address</name></name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>current</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* Unpoisoning is required for ASAN to avoid false-positive diagnostic
   * when this memory will re-used by malloc or another mmapping.
   * See https://github.com/erthink/libmdbx/pull/93#issuecomment-613687203 */</comment>
  <expr_stmt><expr><call><name>MDBX_ASAN_UNPOISON_MEMORY_REGION</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>address</name></name></expr></argument>,
                                   <argument><expr><ternary><condition><expr><operator>(</operator><name><name>map</name><operator>-&gt;</operator><name>filesize</name></name> <operator>&amp;&amp;</operator> <name><name>map</name><operator>-&gt;</operator><name>filesize</name></name> <operator>&lt;</operator> <name><name>map</name><operator>-&gt;</operator><name>limit</name></name><operator>)</operator></expr>
                                       ?</condition><then> <expr><name><name>map</name><operator>-&gt;</operator><name>filesize</name></name></expr>
                                       </then><else>: <expr><name><name>map</name><operator>-&gt;</operator><name>limit</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>section</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>NtClose</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>section</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><name>NTSTATUS</name></type> <name>rc</name> <init>= <expr><call><name>NtUnmapViewOfSection</name><argument_list>(<argument><expr><call><name>GetCurrentProcess</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>address</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NT_SUCCESS</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>ntstatus2errcode</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>munmap</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>address</name></name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>limit</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>errno</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* ! Windows */</comment>

  <expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>limit</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>address</name></name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
  <return>return <expr><name>MDBX_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>MDBX_INTERNAL_FUNC</name> <name>int</name></type> <name>mdbx_mresize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>mdbx_mmap_t</name> <modifier>*</modifier></type><name>map</name></decl></parameter>,
                                    <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>limit</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>size</name> <operator>&lt;=</operator> <name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>size</name> <operator>!=</operator> <name><name>map</name><operator>-&gt;</operator><name>current</name></name> <operator>||</operator> <name>limit</name> <operator>!=</operator> <name><name>map</name><operator>-&gt;</operator><name>limit</name></name> <operator>||</operator> <name>size</name> <operator>&lt;</operator> <name><name>map</name><operator>-&gt;</operator><name>filesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>NTSTATUS</name></type> <name>status</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>LARGE_INTEGER</name></type> <name>SectionSize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>rc</name> <init>= <expr><name>MDBX_SUCCESS</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MDBX_RDONLY</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>limit</name> <operator>==</operator> <name><name>map</name><operator>-&gt;</operator><name>limit</name></name> <operator>&amp;&amp;</operator> <name>size</name> <operator>&gt;</operator> <name><name>map</name><operator>-&gt;</operator><name>current</name></name> <operator>&amp;&amp;</operator>
      <comment type="block">/* workaround for Wine */</comment> <name>mdbx_NtExtendSection</name></expr>)</condition> <block>{<block_content>
    <comment type="block">/* growth rw-section */</comment>
    <expr_stmt><expr><name><name>SectionSize</name><operator>.</operator><name>QuadPart</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>mdbx_NtExtendSection</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>section</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>SectionSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NT_SUCCESS</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><call><name>ntstatus2errcode</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>filesize</name></name> <operator>&lt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>filesize</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>MDBX_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>limit</name> <operator>&gt;</operator> <name><name>map</name><operator>-&gt;</operator><name>limit</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>check_mmap_limit</name><argument_list>(<argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>err</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* check ability of address space for growth before unmap */</comment>
    <decl_stmt><decl><type><name>PVOID</name></type> <name>BaseAddress</name> <init>= <expr><operator>(</operator><name>PBYTE</name><operator>)</operator><name><name>map</name><operator>-&gt;</operator><name>address</name></name> <operator>+</operator> <name><name>map</name><operator>-&gt;</operator><name>limit</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SIZE_T</name></type> <name>RegionSize</name> <init>= <expr><name>limit</name> <operator>-</operator> <name><name>map</name><operator>-&gt;</operator><name>limit</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>NtAllocateVirtualMemory</name><argument_list>(<argument><expr><call><name>GetCurrentProcess</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>BaseAddress</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                                     <argument><expr><operator>&amp;</operator><name>RegionSize</name></expr></argument>, <argument><expr><name>MEM_RESERVE</name></expr></argument>, <argument><expr><name>PAGE_NOACCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <operator>(</operator><name>NTSTATUS</name><operator>)</operator> <comment type="block">/* STATUS_CONFLICTING_ADDRESSES */</comment> <literal type="number">0xC0000018</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>MDBX_UNABLE_EXTEND_MAPSIZE</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NT_SUCCESS</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><call><name>ntstatus2errcode</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>NtFreeVirtualMemory</name><argument_list>(<argument><expr><call><name>GetCurrentProcess</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>BaseAddress</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>RegionSize</name></expr></argument>,
                                 <argument><expr><name>MEM_RELEASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NT_SUCCESS</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><call><name>ntstatus2errcode</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Windows unable:
   *  - shrink a mapped file;
   *  - change size of mapped view;
   *  - extend read-only mapping;
   * Therefore we should unmap/map entire section. */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MDBX_MRESIZE_MAY_UNMAP</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>MDBX_EPERM</name></expr>;</return></block_content></block></if></if_stmt>

  <comment type="block">/* Unpoisoning is required for ASAN to avoid false-positive diagnostic
   * when this memory will re-used by malloc or another mmapping.
   * See https://github.com/erthink/libmdbx/pull/93#issuecomment-613687203 */</comment>
  <expr_stmt><expr><call><name>MDBX_ASAN_UNPOISON_MEMORY_REGION</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>address</name></name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>NtUnmapViewOfSection</name><argument_list>(<argument><expr><call><name>GetCurrentProcess</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NT_SUCCESS</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>ntstatus2errcode</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>NtClose</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>section</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>section</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>PVOID</name></type> <name>ReservedAddress</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SIZE_T</name></type> <name>ReservedSize</name> <init>= <expr><name>limit</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NT_SUCCESS</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
  <label><name>bailout_ntstatus</name>:</label>
    <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ntstatus2errcode</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <label><name>bailout</name>:</label>
    <expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>address</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>limit</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ReservedAddress</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>ReservedSize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>NtFreeVirtualMemory</name><argument_list>(<argument><expr><call><name>GetCurrentProcess</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>ReservedAddress</name></expr></argument>,
                                   <argument><expr><operator>&amp;</operator><name>ReservedSize</name></expr></argument>, <argument><expr><name>MEM_RELEASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>NT_SUCCESS</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>status</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>err</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

<label><name>retry_file_and_section</name>:</label>
  <comment type="block">/* resizing of the file may take a while,
   * therefore we reserve address space to avoid occupy it by other threads */</comment>
  <expr_stmt><expr><name>ReservedAddress</name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>address</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>NtAllocateVirtualMemory</name><argument_list>(<argument><expr><call><name>GetCurrentProcess</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>ReservedAddress</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                                   <argument><expr><operator>&amp;</operator><name>ReservedSize</name></expr></argument>, <argument><expr><name>MEM_RESERVE</name></expr></argument>, <argument><expr><name>PAGE_NOACCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NT_SUCCESS</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ReservedAddress</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <operator>(</operator><name>NTSTATUS</name><operator>)</operator> <comment type="block">/* STATUS_CONFLICTING_ADDRESSES */</comment> <literal type="number">0xC0000018</literal></expr>)</condition><block type="pseudo"><block_content>
      <goto>goto <name>bailout_ntstatus</name> <comment type="block">/* no way to recovery */</comment>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>MDBX_MRESIZE_MAY_MOVE</name></expr>)</condition><block type="pseudo"><block_content>
      <comment type="block">/* the base address could be changed */</comment>
      <expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>address</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>mdbx_filesize</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>filesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
    <goto>goto <name>bailout</name>;</goto></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MDBX_RDONLY</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>map</name><operator>-&gt;</operator><name>filesize</name></name> <operator>!=</operator> <name>size</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>mdbx_ftruncate</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>MDBX_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>filesize</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <comment type="block">/* ignore error, because Windows unable shrink file
     * that already mapped (by another process) */</comment>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>SectionSize</name><operator>.</operator><name>QuadPart</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>NtCreateSection</name><argument_list>(
      <argument><expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>section</name></name></expr></argument>,
      <comment type="block">/* DesiredAccess */</comment>
      <argument><expr><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MDBX_WRITEMAP</name><operator>)</operator></expr>
          ?</condition><then> <expr><name>SECTION_QUERY</name> <operator>|</operator> <name>SECTION_MAP_READ</name> <operator>|</operator> <name>SECTION_EXTEND_SIZE</name> <operator>|</operator>
                <name>SECTION_MAP_WRITE</name></expr>
          </then><else>: <expr><name>SECTION_QUERY</name> <operator>|</operator> <name>SECTION_MAP_READ</name> <operator>|</operator> <name>SECTION_EXTEND_SIZE</name></expr></else></ternary></expr></argument>,
      <comment type="block">/* ObjectAttributes */</comment> <argument><expr><name>NULL</name></expr></argument>,
      <comment type="block">/* MaximumSize (InitialSize) */</comment> <argument><expr><operator>&amp;</operator><name>SectionSize</name></expr></argument>,
      <comment type="block">/* SectionPageProtection */</comment>
      <argument><expr><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MDBX_RDONLY</name><operator>)</operator></expr> ?</condition><then> <expr><name>PAGE_READONLY</name></expr> </then><else>: <expr><name>PAGE_READWRITE</name></expr></else></ternary></expr></argument>,
      <comment type="block">/* AllocationAttributes */</comment> <argument><expr><name>SEC_RESERVE</name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NT_SUCCESS</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <goto>goto <name>bailout_ntstatus</name>;</goto></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>ReservedAddress</name></expr>)</condition> <block>{<block_content>
    <comment type="block">/* release reserved address space */</comment>
    <expr_stmt><expr><name>ReservedSize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>NtFreeVirtualMemory</name><argument_list>(<argument><expr><call><name>GetCurrentProcess</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>ReservedAddress</name></expr></argument>,
                                 <argument><expr><operator>&amp;</operator><name>ReservedSize</name></expr></argument>, <argument><expr><name>MEM_RELEASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ReservedAddress</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NT_SUCCESS</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <goto>goto <name>bailout_ntstatus</name>;</goto></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>retry_mapview</name>:</label><empty_stmt>;</empty_stmt>
  <decl_stmt><decl><type><name>SIZE_T</name></type> <name>ViewSize</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MDBX_RDONLY</name><operator>)</operator></expr> ?</condition><then> <expr><name>size</name></expr> </then><else>: <expr><name>limit</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>NtMapViewOfSection</name><argument_list>(
      <argument><expr><name><name>map</name><operator>-&gt;</operator><name>section</name></name></expr></argument>, <argument><expr><call><name>GetCurrentProcess</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>address</name></name></expr></argument>,
      <comment type="block">/* ZeroBits */</comment> <argument><expr><literal type="number">0</literal></expr></argument>,
      <comment type="block">/* CommitSize */</comment> <argument><expr><literal type="number">0</literal></expr></argument>,
      <comment type="block">/* SectionOffset */</comment> <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ViewSize</name></expr></argument>,
      <comment type="block">/* InheritDisposition */</comment> <argument><expr><name>ViewUnmap</name></expr></argument>,
      <comment type="block">/* AllocationType */</comment> <argument><expr><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MDBX_RDONLY</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>MEM_RESERVE</name></expr></else></ternary></expr></argument>,
      <comment type="block">/* Win32Protect */</comment>
      <argument><expr><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MDBX_WRITEMAP</name><operator>)</operator></expr> ?</condition><then> <expr><name>PAGE_READWRITE</name></expr> </then><else>: <expr><name>PAGE_READONLY</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NT_SUCCESS</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <operator>(</operator><name>NTSTATUS</name><operator>)</operator> <comment type="block">/* STATUS_CONFLICTING_ADDRESSES */</comment> <literal type="number">0xC0000018</literal> <operator>&amp;&amp;</operator>
        <name><name>map</name><operator>-&gt;</operator><name>address</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MDBX_MRESIZE_MAY_MOVE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <comment type="block">/* try remap at another base address */</comment>
      <expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>address</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <goto>goto <name>retry_mapview</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>NtClose</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>section</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>section</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>address</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>size</name> <operator>!=</operator> <name><name>map</name><operator>-&gt;</operator><name>current</name></name> <operator>||</operator> <name>limit</name> <operator>!=</operator> <name><name>map</name><operator>-&gt;</operator><name>limit</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <comment type="block">/* try remap with previously size and limit,
       * but will return MDBX_UNABLE_EXTEND_MAPSIZE on success */</comment>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>limit</name> <operator>&gt;</operator> <name><name>map</name><operator>-&gt;</operator><name>limit</name></name><operator>)</operator></expr> ?</condition><then> <expr><name>MDBX_UNABLE_EXTEND_MAPSIZE</name></expr> </then><else>: <expr><name>MDBX_EPERM</name></expr></else></ternary></expr>;</expr_stmt>
      <expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>current</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>ReservedSize</name> <operator>=</operator> <name>limit</name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>limit</name></name></expr>;</expr_stmt>
      <goto>goto <name>retry_file_and_section</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* no way to recovery */</comment>
    <goto>goto <name>bailout_ntstatus</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>address</name></name> <operator>!=</operator> <name>MAP_FAILED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>SectionSize</name><operator>.</operator><name>QuadPart</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>limit</name></name> <operator>=</operator> <name>ViewSize</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* Windows */</comment>

  <expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>filesize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>mdbx_filesize</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>filesize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>MDBX_RDONLY</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>map</name><operator>-&gt;</operator><name>filesize</name></name> <operator>&gt;</operator> <name>limit</name><operator>)</operator></expr> ?</condition><then> <expr><name>limit</name></expr> </then><else>: <expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>map</name><operator>-&gt;</operator><name>filesize</name></name></expr></else></ternary></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>current</name></name> <operator>!=</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>size</name> <operator>&gt;</operator> <name><name>map</name><operator>-&gt;</operator><name>current</name></name><operator>)</operator></expr> ?</condition><then> <expr><name>MDBX_UNABLE_EXTEND_MAPSIZE</name></expr> </then><else>: <expr><name>MDBX_EPERM</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>filesize</name></name> <operator>!=</operator> <name>size</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_ftruncate</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>filesize</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>current</name></name> <operator>&gt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>
      <comment type="block">/* Clearing asan's bitmask for the region which released in shrinking,
       * since:
       *  - after the shrinking we will get an exception when accessing
       *    this region and (therefore) do not need the help of ASAN.
       *  - this allows us to clear the mask only within the file size
       *    when closing the mapping. */</comment>
      <expr_stmt><expr><call><name>MDBX_ASAN_UNPOISON_MEMORY_REGION</name><argument_list>(
          <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>map</name><operator>-&gt;</operator><name>address</name></name> <operator>+</operator> <name>size</name></expr></argument>,
          <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>map</name><operator>-&gt;</operator><name>current</name></name> <operator>&lt;</operator> <name><name>map</name><operator>-&gt;</operator><name>limit</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>map</name><operator>-&gt;</operator><name>current</name></name></expr> </then><else>: <expr><name><name>map</name><operator>-&gt;</operator><name>limit</name></name></expr></else></ternary><operator>)</operator> <operator>-</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>limit</name> <operator>==</operator> <name><name>map</name><operator>-&gt;</operator><name>limit</name></name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>limit</name> <operator>&lt;</operator> <name><name>map</name><operator>-&gt;</operator><name>limit</name></name></expr>)</condition> <block>{<block_content>
    <comment type="block">/* unmap an excess at end of mapping. */</comment>
    <comment type="line">// coverity[offset_free : FALSE]</comment>
    <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>munmap</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>dxb</name></name> <operator>+</operator> <name>limit</name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>limit</name></name> <operator>-</operator> <name>limit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>errno</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>limit</name></name> <operator>=</operator> <name>limit</name></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>check_mmap_limit</name><argument_list>(<argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>err</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>limit</name> <operator>&gt;</operator> <name><name>map</name><operator>-&gt;</operator><name>limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>MAP_FAILED</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MREMAP_MAYMOVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>mremap</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>address</name></name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>limit</name></name></expr></argument>, <argument><expr><name>limit</name></expr></argument>,
               <argument><expr><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MDBX_MRESIZE_MAY_MOVE</name><operator>)</operator></expr> ?</condition><then> <expr><name>MREMAP_MAYMOVE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>MAP_FAILED</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
    <switch>switch <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
    <default>default:</default>
      <return>return <expr><name>err</name></expr>;</return>
    <case>case <expr><name>EAGAIN</name></expr>:</case>
    <case>case <expr><name>ENOMEM</name></expr>:</case>
      <return>return <expr><name>MDBX_UNABLE_EXTEND_MAPSIZE</name></expr>;</return>
    <case>case <expr><name>EFAULT</name></expr> <comment type="block">/* MADV_DODUMP / MADV_DONTDUMP are mixed for mmap-range */</comment>:</case>
      <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MREMAP_MAYMOVE */</comment>

  <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>mmap_flags</name> <init>=
      <expr><name>MAP_CONCEAL</name> <operator>|</operator> <name>MAP_SHARED</name> <operator>|</operator> <name>MAP_FILE</name> <operator>|</operator> <name>MAP_NORESERVE</name> <operator>|</operator>
      <operator>(</operator><ternary><condition><expr><call><name>F_ISSET</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>MDBX_UTTERLY_NOSYNC</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>MAP_NOSYNC</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>mmap_prot</name> <init>=
      <expr><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MDBX_WRITEMAP</name><operator>)</operator></expr> ?</condition><then> <expr><name>PROT_READ</name> <operator>|</operator> <name>PROT_WRITE</name></expr> </then><else>: <expr><name>PROT_READ</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>MAP_FAILED</name></expr>)</condition> <block>{<block_content>
    <comment type="block">/* Try to mmap additional space beyond the end of mapping. */</comment>
    <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>mmap</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>dxb</name></name> <operator>+</operator> <name><name>map</name><operator>-&gt;</operator><name>limit</name></name></expr></argument>, <argument><expr><name>limit</name> <operator>-</operator> <name><name>map</name><operator>-&gt;</operator><name>limit</name></name></expr></argument>, <argument><expr><name>mmap_prot</name></expr></argument>,
               <argument><expr><name>mmap_flags</name> <operator>|</operator> <name>MAP_FIXED_NOREPLACE</name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name><name>map</name><operator>-&gt;</operator><name>dxb</name></name> <operator>+</operator> <name><name>map</name><operator>-&gt;</operator><name>limit</name></name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>dxb</name></name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>ptr</name> <operator>!=</operator> <name>MAP_FAILED</name></expr>)</condition> <block>{<block_content>
      <comment type="block">/* the desired address is busy, unmap unsuitable one */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>munmap</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>limit</name> <operator>-</operator> <name><name>map</name><operator>-&gt;</operator><name>limit</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>errno</name></expr>;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>MAP_FAILED</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>err</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
      <switch>switch <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
      <default>default:</default>
        <return>return <expr><name>err</name></expr>;</return>
      <case>case <expr><name>EAGAIN</name></expr>:</case>
      <case>case <expr><name>ENOMEM</name></expr>:</case>
        <return>return <expr><name>MDBX_UNABLE_EXTEND_MAPSIZE</name></expr>;</return>
      <case>case <expr><name>EEXIST</name></expr>:</case> <comment type="block">/* address busy */</comment>
      <case>case <expr><name>EINVAL</name></expr>:</case> <comment type="block">/* kernel don't support MAP_FIXED_NOREPLACE */</comment>
        <break>break;</break>
      </block_content>}</block></switch>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>MAP_FAILED</name></expr>)</condition> <block>{<block_content>
    <comment type="block">/* unmap and map again whole region */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MDBX_MRESIZE_MAY_UNMAP</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <comment type="block">/* TODO: Perhaps here it is worth to implement suspend/resume threads
       * and perform unmap/map as like for Windows. */</comment>
      <return>return <expr><name>MDBX_UNABLE_EXTEND_MAPSIZE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>munmap</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>address</name></name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>limit</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>errno</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="line">// coverity[pass_freed_arg : FALSE]</comment>
    <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>mmap</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>address</name></name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><name>mmap_prot</name></expr></argument>,
               <argument><expr><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MDBX_MRESIZE_MAY_MOVE</name><operator>)</operator></expr>
                   ?</condition><then> <expr><name>mmap_flags</name></expr>
                   </then><else>: <expr><name>mmap_flags</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>MAP_FIXED_NOREPLACE</name></expr> ?</condition><then> <expr><name>MAP_FIXED_NOREPLACE</name></expr>
                                                       </then><else>: <expr><name>MAP_FIXED</name></expr></else></ternary><operator>)</operator></expr></else></ternary></expr></argument>,
               <argument><expr><name><name>map</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>MAP_FIXED_NOREPLACE</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>MAP_FIXED_NOREPLACE</name> <operator>!=</operator> <name>MAP_FIXED</name> <operator>&amp;&amp;</operator>
        <call><name>unlikely</name><argument_list>(<argument><expr><name>ptr</name> <operator>==</operator> <name>MAP_FAILED</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MDBX_MRESIZE_MAY_MOVE</name><operator>)</operator> <operator>&amp;&amp;</operator>
        <name>errno</name> <operator>==</operator> <comment type="block">/* kernel don't support MAP_FIXED_NOREPLACE */</comment> <name>EINVAL</name></expr>)</condition><block type="pseudo"><block_content>
      <comment type="line">// coverity[pass_freed_arg : FALSE]</comment>
      <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>mmap</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>address</name></name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><name>mmap_prot</name></expr></argument>, <argument><expr><name>mmap_flags</name> <operator>|</operator> <name>MAP_FIXED</name></expr></argument>,
                 <argument><expr><name><name>map</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>ptr</name> <operator>==</operator> <name>MAP_FAILED</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <comment type="block">/* try to restore prev mapping */</comment>
      <comment type="line">// coverity[pass_freed_arg : FALSE]</comment>
      <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>mmap</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>address</name></name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>limit</name></name></expr></argument>, <argument><expr><name>mmap_prot</name></expr></argument>,
                 <argument><expr><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MDBX_MRESIZE_MAY_MOVE</name><operator>)</operator></expr>
                     ?</condition><then> <expr><name>mmap_flags</name></expr>
                     </then><else>: <expr><name>mmap_flags</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>MAP_FIXED_NOREPLACE</name></expr> ?</condition><then> <expr><name>MAP_FIXED_NOREPLACE</name></expr>
                                                         </then><else>: <expr><name>MAP_FIXED</name></expr></else></ternary><operator>)</operator></expr></else></ternary></expr></argument>,
                 <argument><expr><name><name>map</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>MAP_FIXED_NOREPLACE</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>MAP_FIXED_NOREPLACE</name> <operator>!=</operator> <name>MAP_FIXED</name> <operator>&amp;&amp;</operator>
          <call><name>unlikely</name><argument_list>(<argument><expr><name>ptr</name> <operator>==</operator> <name>MAP_FAILED</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MDBX_MRESIZE_MAY_MOVE</name><operator>)</operator> <operator>&amp;&amp;</operator>
          <name>errno</name> <operator>==</operator> <comment type="block">/* kernel don't support MAP_FIXED_NOREPLACE */</comment> <name>EINVAL</name></expr>)</condition><block type="pseudo"><block_content>
        <comment type="line">// coverity[pass_freed_arg : FALSE]</comment>
        <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>mmap</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>address</name></name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>limit</name></name></expr></argument>, <argument><expr><name>mmap_prot</name></expr></argument>, <argument><expr><name>mmap_flags</name> <operator>|</operator> <name>MAP_FIXED</name></expr></argument>,
                   <argument><expr><name><name>map</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>ptr</name> <operator>==</operator> <name>MAP_FAILED</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>VALGRIND_MAKE_MEM_NOACCESS</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>address</name></name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>current</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* Unpoisoning is required for ASAN to avoid false-positive diagnostic
         * when this memory will re-used by malloc or another mmapping.
         * See https://github.com/erthink/libmdbx/pull/93#issuecomment-613687203
         */</comment>
        <expr_stmt><expr><call><name>MDBX_ASAN_UNPOISON_MEMORY_REGION</name><argument_list>(
            <argument><expr><name><name>map</name><operator>-&gt;</operator><name>address</name></name></expr></argument>,
            <argument><expr><ternary><condition><expr><operator>(</operator><name><name>map</name><operator>-&gt;</operator><name>current</name></name> <operator>&lt;</operator> <name><name>map</name><operator>-&gt;</operator><name>limit</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>map</name><operator>-&gt;</operator><name>current</name></name></expr> </then><else>: <expr><name><name>map</name><operator>-&gt;</operator><name>limit</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>limit</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>address</name></name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
        <return>return <expr><name>errno</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>MDBX_UNABLE_EXTEND_MAPSIZE</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>limit</name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>limit</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ptr</name> <operator>&amp;&amp;</operator> <name>ptr</name> <operator>!=</operator> <name>MAP_FAILED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>address</name></name> <operator>!=</operator> <name>ptr</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>VALGRIND_MAKE_MEM_NOACCESS</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>address</name></name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>current</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Unpoisoning is required for ASAN to avoid false-positive diagnostic
     * when this memory will re-used by malloc or another mmapping.
     * See https://github.com/erthink/libmdbx/pull/93#issuecomment-613687203 */</comment>
    <expr_stmt><expr><call><name>MDBX_ASAN_UNPOISON_MEMORY_REGION</name><argument_list>(
        <argument><expr><name><name>map</name><operator>-&gt;</operator><name>address</name></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>map</name><operator>-&gt;</operator><name>current</name></name> <operator>&lt;</operator> <name><name>map</name><operator>-&gt;</operator><name>limit</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>map</name><operator>-&gt;</operator><name>current</name></name></expr> </then><else>: <expr><name><name>map</name><operator>-&gt;</operator><name>limit</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>VALGRIND_MAKE_MEM_DEFINED</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>current</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MDBX_ASAN_UNPOISON_MEMORY_REGION</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>current</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>address</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>limit</name></name> <operator>=</operator> <name>limit</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MDBX_ENABLE_MADVISE</name></expr></cpp:if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MADV_DONTFORK</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>madvise</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>address</name></name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>limit</name></name></expr></argument>, <argument><expr><name>MADV_DONTFORK</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>errno</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MADV_DONTFORK */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MADV_NOHUGEPAGE</name></cpp:ifdef>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>madvise</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>address</name></name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>limit</name></name></expr></argument>, <argument><expr><name>MADV_NOHUGEPAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MADV_NOHUGEPAGE */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MDBX_ENABLE_MADVISE */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* POSIX / Windows */</comment>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*----------------------------------------------------------------------------*/</comment>

<function><type><name>__cold</name> <name>MDBX_INTERNAL_FUNC</name> <name>void</name></type> <name>mdbx_osal_jitter</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>tiny</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_M_IX86</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_M_X64</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call> <operator>||</operator>                \
    <call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>salt</name> <init>= <expr><literal type="number">277u</literal> <operator>*</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><call><name>__rdtsc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>salt</name> <init>= <expr><call><name>rand</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>coin</name> <init>= <expr><name>salt</name> <operator>%</operator> <operator>(</operator><ternary><condition><expr><name>tiny</name></expr> ?</condition><then> <expr><literal type="number">29u</literal></expr> </then><else>: <expr><literal type="number">43u</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>coin</name> <operator>&lt;</operator> <literal type="number">43</literal> <operator>/</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
      <break>break;</break></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>SwitchToThread</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>coin</name> <operator>&gt;</operator> <literal type="number">43</literal> <operator>*</operator> <literal type="number">2</literal> <operator>/</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>sched_yield</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>coin</name> <operator>&gt;</operator> <literal type="number">43</literal> <operator>*</operator> <literal type="number">2</literal> <operator>/</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>usleep</name><argument_list>(<argument><expr><name>coin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></for>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__MACH__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mach/mach_time.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__gnu_linux__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<function><type><name>__cold</name> <specifier>static</specifier> <name>clockid_t</name></type> <name>choice_monoclock</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>probe</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CLOCK_BOOTTIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><call><name>clock_gettime</name><argument_list>(<argument><expr><name>CLOCK_BOOTTIME</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>probe</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>CLOCK_BOOTTIME</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CLOCK_MONOTONIC_RAW</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <if_stmt><if>if <condition>(<expr><call><name>clock_gettime</name><argument_list>(<argument><expr><name>CLOCK_MONOTONIC_RAW</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>probe</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>CLOCK_MONOTONIC_RAW</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CLOCK_MONOTONIC_COARSE</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <if_stmt><if>if <condition>(<expr><call><name>clock_gettime</name><argument_list>(<argument><expr><name>CLOCK_MONOTONIC_COARSE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>probe</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>CLOCK_MONOTONIC_COARSE</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>CLOCK_MONOTONIC</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*----------------------------------------------------------------------------*/</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>LARGE_INTEGER</name></type> <name>performance_frequency</name></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__MACH__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint64_t</name></type> <name>ratio_16dot16_to_monotine</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>MDBX_INTERNAL_FUNC</name> <name>uint64_t</name></type>
<name>mdbx_osal_16dot16_to_monotime</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>seconds_16dot16</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>performance_frequency</name><operator>.</operator><name>QuadPart</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>QueryPerformanceFrequency</name><argument_list>(<argument><expr><operator>&amp;</operator><name>performance_frequency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>ratio</name> <init>= <expr><name><name>performance_frequency</name><operator>.</operator><name>QuadPart</name></name></expr></init></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__MACH__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>ratio_16dot16_to_monotine</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>mach_timebase_info_data_t</name></type> <name>ti</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>mach_timebase_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ti</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ratio_16dot16_to_monotine</name> <operator>=</operator> <call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">1000000000</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>ti</name><operator>.</operator><name>denom</name></name> <operator>/</operator> <name><name>ti</name><operator>.</operator><name>numer</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>ratio</name> <init>= <expr><name>ratio_16dot16_to_monotine</name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>ratio</name> <init>= <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">1000000000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>ret</name> <init>= <expr><operator>(</operator><name>ratio</name> <operator>*</operator> <name>seconds_16dot16</name> <operator>+</operator> <literal type="number">32768</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
  <return>return <expr><ternary><condition><expr><call><name>likely</name><argument_list>(<argument><expr><name>ret</name> <operator>||</operator> <name>seconds_16dot16</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ret</name></expr> </then><else>: <comment type="block">/* fix underflow */</comment> <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>MDBX_INTERNAL_FUNC</name> <name>uint32_t</name></type> <name>mdbx_osal_monotime_to_16dot16</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>monotime</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <name>uint64_t</name></type> <name>limit</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>monotime</name> <operator>&gt;</operator> <name>limit</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>limit</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>UINT32_MAX</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>limit</name> <operator>=</operator> <call><name>mdbx_osal_16dot16_to_monotime</name><argument_list>(<argument><expr><name>UINT32_MAX</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>monotime</name> <operator>&gt;</operator> <name>limit</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>UINT32_MAX</name></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>ret</name> <init>=
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
      <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>monotime</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>/</operator> <name><name>performance_frequency</name><operator>.</operator><name>QuadPart</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__MACH__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
      <expr_stmt><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>monotime</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>/</operator> <name>ratio_16dot16_to_monotine</name><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>monotime</name> <operator>*</operator> <literal type="number">128</literal> <operator>/</operator> <literal type="number">1953125</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><ternary><condition><expr><call><name>likely</name><argument_list>(<argument><expr><name>ret</name> <operator>||</operator> <name>monotime</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ret</name></expr> </then><else>: <comment type="block">/* fix underflow */</comment> <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>MDBX_INTERNAL_FUNC</name> <name>uint64_t</name></type> <name>mdbx_osal_monotime</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>LARGE_INTEGER</name></type> <name>counter</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>counter</name><operator>.</operator><name>QuadPart</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>QueryPerformanceCounter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>counter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>counter</name><operator>.</operator><name>QuadPart</name></name></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__MACH__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>mach_absolute_time</name><argument_list>()</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__gnu_linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><specifier>static</specifier> <name>clockid_t</name></type> <name>posix_clockid</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>posix_clockid</name> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>posix_clockid</name> <operator>=</operator> <call><name>choice_monoclock</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CLOCK_MONOTONIC</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>posix_clockid</name></cpp:macro> <cpp:value>CLOCK_MONOTONIC</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>posix_clockid</name></cpp:macro> <cpp:value>CLOCK_REALTIME</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>ts</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>clock_gettime</name><argument_list>(<argument><expr><name>posix_clockid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>ts</name><operator>.</operator><name>tv_nsec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ts</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name><name>ts</name><operator>.</operator><name>tv_sec</name></name> <operator>*</operator> <call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">1000000000</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>ts</name><operator>.</operator><name>tv_nsec</name></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/*----------------------------------------------------------------------------*/</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>bootid_shake</name><parameter_list>(<parameter><decl><type><name>bin128_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="block">/* Bob Jenkins's PRNG: https://burtleburtle.net/bob/rand/smallprng.html */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>e</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>a</name></name> <operator>-</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>b</name></name> <operator>&lt;&lt;</operator> <literal type="number">23</literal> <operator>|</operator> <name><name>p</name><operator>-&gt;</operator><name>b</name></name> <operator>&gt;&gt;</operator> <literal type="number">9</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>a</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>b</name></name> <operator>^</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>c</name></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>|</operator> <name><name>p</name><operator>-&gt;</operator><name>c</name></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>c</name></name> <operator>+</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>d</name></name> <operator>&lt;&lt;</operator> <literal type="number">11</literal> <operator>|</operator> <name><name>p</name><operator>-&gt;</operator><name>d</name></name> <operator>&gt;&gt;</operator> <literal type="number">21</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>d</name></name> <operator>+</operator> <name>e</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>d</name></name> <operator>=</operator> <name>e</name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>a</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>bootid_collect</name><parameter_list>(<parameter><decl><type><name>bin128_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>y</name></name> <operator>+=</operator> <call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">64526882297375213</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>bootid_shake</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>bootid_shake</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>y</name></name> <operator>^=</operator> <call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">48797879452804441</literal></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name>s</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>bootid_shake</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>y</name></name> <operator>+=</operator> <literal type="number">14621231</literal></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>bootid_shake</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* minor non-linear tomfoolery */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>z</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>x</name></name> <operator>%</operator> <literal type="number">61</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>y</name></name> <operator>&lt;&lt;</operator> <name>z</name> <operator>|</operator> <name><name>p</name><operator>-&gt;</operator><name>y</name></name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">64</literal> <operator>-</operator> <name>z</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>bootid_shake</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>bootid_shake</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>q</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>x</name></name> <operator>%</operator> <literal type="number">59</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>y</name></name> <operator>&lt;&lt;</operator> <name>q</name> <operator>|</operator> <name><name>p</name><operator>-&gt;</operator><name>y</name></name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">64</literal> <operator>-</operator> <name>q</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>bootid_shake</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>bootid_shake</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>bootid_shake</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>windows_systemtime_ms</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>FILETIME</name></type> <name>ft</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>GetSystemTimeAsFileTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>ft</name><operator>.</operator><name>dwHighDateTime</name></name> <operator>&lt;&lt;</operator> <literal type="number">32</literal> <operator>|</operator> <name><name>ft</name><operator>.</operator><name>dwLowDateTime</name></name><operator>)</operator> <operator>/</operator> <literal type="number">10000ul</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>windows_bootime</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>confirmed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>boottime</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>up0</name> <init>= <expr><call><name>mdbx_GetTickCount64</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>st0</name> <init>= <expr><call><name>windows_systemtime_ms</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>uint64_t</name></type> <name>fuse</name> <init>= <expr><name>st0</name></expr></init></decl>;</init> <condition><expr><name>up0</name> <operator>&amp;&amp;</operator> <name>st0</name> <operator>&lt;</operator> <name>fuse</name> <operator>+</operator> <literal type="number">1000</literal> <operator>*</operator> <literal type="number">1000u</literal> <operator>/</operator> <literal type="number">42</literal></expr>;</condition><incr/>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>YieldProcessor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>up1</name> <init>= <expr><call><name>mdbx_GetTickCount64</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>st1</name> <init>= <expr><call><name>windows_systemtime_ms</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>st1</name> <operator>&gt;</operator> <name>fuse</name> <operator>&amp;&amp;</operator> <name>st1</name> <operator>==</operator> <name>st0</name> <operator>&amp;&amp;</operator> <name>up1</name> <operator>==</operator> <name>up0</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>uint64_t</name></type> <name>diff</name> <init>= <expr><name>st1</name> <operator>-</operator> <name>up1</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>boottime</name> <operator>==</operator> <name>diff</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>++</operator><name>confirmed</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><name>boottime</name></expr>;</return></block_content></block></if></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>confirmed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>boottime</name> <operator>=</operator> <name>diff</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name>fuse</name> <operator>=</operator> <name>st1</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>st0</name> <operator>=</operator> <name>st1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>up0</name> <operator>=</operator> <name>up1</name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>LSTATUS</name></type> <name>mdbx_RegGetValue</name><parameter_list>(<parameter><decl><type><name>HKEY</name></type> <name>hKey</name></decl></parameter>, <parameter><decl><type><name>LPCSTR</name></type> <name>lpSubKey</name></decl></parameter>, <parameter><decl><type><name>LPCSTR</name></type> <name>lpValue</name></decl></parameter>,
                                <parameter><decl><type><name>PVOID</name></type> <name>pvData</name></decl></parameter>, <parameter><decl><type><name>LPDWORD</name></type> <name>pcbData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>LSTATUS</name></type> <name>rc</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>mdbx_RegGetValueA</name></expr>)</condition> <block>{<block_content>
    <comment type="block">/* an old Windows 2000/XP */</comment>
    <decl_stmt><decl><type><name>HKEY</name></type> <name>hSubKey</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>RegOpenKeyA</name><argument_list>(<argument><expr><name>hKey</name></expr></argument>, <argument><expr><name>lpSubKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hSubKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>ERROR_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>RegQueryValueExA</name><argument_list>(<argument><expr><name>hSubKey</name></expr></argument>, <argument><expr><name>lpValue</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pvData</name></expr></argument>, <argument><expr><name>pcbData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name>hSubKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_RegGetValueA</name><argument_list>(<argument><expr><name>hKey</name></expr></argument>, <argument><expr><name>lpSubKey</name></expr></argument>, <argument><expr><name>lpValue</name></expr></argument>, <argument><expr><name>RRF_RT_ANY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pvData</name></expr></argument>,
                         <argument><expr><name>pcbData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>ERROR_FILE_NOT_FOUND</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_RegGetValueA</name><argument_list>(<argument><expr><name>hKey</name></expr></argument>, <argument><expr><name>lpSubKey</name></expr></argument>, <argument><expr><name>lpValue</name></expr></argument>,
                         <argument><expr><name>RRF_RT_ANY</name> <operator>|</operator> <literal type="number">0x00010000</literal></expr></argument> <comment type="block">/* RRF_SUBKEY_WOW6464KEY */</comment>,
                         <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pvData</name></expr></argument>, <argument><expr><name>pcbData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>ERROR_FILE_NOT_FOUND</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><call><name>mdbx_RegGetValueA</name><argument_list>(<argument><expr><name>hKey</name></expr></argument>, <argument><expr><name>lpSubKey</name></expr></argument>, <argument><expr><name>lpValue</name></expr></argument>,
                           <argument><expr><name>RRF_RT_ANY</name> <operator>|</operator> <literal type="number">0x00020000</literal></expr></argument> <comment type="block">/* RRF_SUBKEY_WOW6432KEY */</comment>,
                           <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pvData</name></expr></argument>, <argument><expr><name>pcbData</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>__cold</name> <name>MDBX_MAYBE_UNUSED</name> <specifier>static</specifier> <name>bool</name></type>
<name>bootid_parse_uuid</name><parameter_list>(<parameter><decl><type><name>bin128_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">31</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>bits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <comment type="block">/* try parse an UUID in text form */</comment> <block>{<block_content>
      <decl_stmt><decl><type><name>uint8_t</name></type> <name>c</name> <init>= <expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name>p</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>c</name> <operator>-=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></if>
      <if type="elseif">else if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'f'</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>c</name> <operator>-=</operator> <literal type="char">'a'</literal> <operator>-</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if>
      <if type="elseif">else if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'F'</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>c</name> <operator>-=</operator> <literal type="char">'A'</literal> <operator>-</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
        <continue>continue;</continue></block_content></block></else></if_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>c</name> <operator>&lt;=</operator> <literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>c</name> <operator>^=</operator> <name><name>s</name><operator>-&gt;</operator><name>y</name></name> <operator>&gt;&gt;</operator> <literal type="number">60</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>y</name></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal> <operator>|</operator> <name><name>s</name><operator>-&gt;</operator><name>x</name></name> <operator>&gt;&gt;</operator> <literal type="number">60</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>x</name></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal> <operator>|</operator> <name>c</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>bits</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&gt;</operator> <literal type="number">42</literal> <operator>*</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
      <comment type="block">/* UUID parsed successfully */</comment>
      <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">15</literal></expr>)</condition> <comment type="block">/* is enough handle it as a binary? */</comment> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bin128_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>bin128_t</name></type> <name>aligned</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aligned</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bin128_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>x</name></name> <operator>+=</operator> <name><name>aligned</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>y</name></name> <operator>+=</operator> <name><name>aligned</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>bootid_collect</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>n</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>bootid_collect</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>__cold</name> <name>MDBX_INTERNAL_FUNC</name> <name>bin128_t</name></type> <name>mdbx_osal_bootid</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bin128_t</name></type> <name>bin</name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>got_machineid</name> <init>= <expr><name>false</name></expr></init></decl>, <decl><type ref="prev"/><name>got_boottime</name> <init>= <expr><name>false</name></expr></init></decl>, <decl><type ref="prev"/><name>got_bootseq</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__gnu_linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>fd</name> <init>=
        <expr><call><name>open</name><argument_list>(<argument><expr><literal type="string">"/proc/sys/kernel/random/boot_id"</literal></expr></argument>, <argument><expr><name>O_RDONLY</name> <operator>|</operator> <name>O_NOFOLLOW</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>statfs</name></name></type> <name>fs</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">42</literal></expr>]</index></name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>ssize_t</name></type> <name>len</name> <init>=
          <expr><ternary><condition><expr><operator>(</operator><call><name>fstatfs</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fs</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>fs</name><operator>.</operator><name>f_type</name></name> <operator>==</operator> <comment type="block">/* procfs */</comment> <literal type="number">0x9FA0</literal><operator>)</operator></expr>
              ?</condition><then> <expr><call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>
              </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>err</name> <init>= <expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>err</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>err</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>bootid_parse_uuid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bin</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>bin</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* Linux */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__MACH__</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">42</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>sysctlbyname</name><argument_list>(<argument><expr><literal type="string">"kern.bootsessionuuid"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
        <call><name>bootid_parse_uuid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bin</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>bin</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MAC_OS_X_VERSION_MIN_REQUIRED</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>                                \
    <name>__MAC_OS_X_VERSION_MIN_REQUIRED</name> <operator>&gt;</operator> <literal type="number">1050</literal></expr></cpp:if>
    <decl_stmt><decl><type><name>uuid_t</name></type> <name>uuid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>wait</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1000000000u</literal> <operator>/</operator> <literal type="number">42</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gethostuuid</name><argument_list>(<argument><expr><name>uuid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wait</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
        <call><name>bootid_parse_uuid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bin</name></expr></argument>, <argument><expr><name>uuid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uuid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>got_machineid</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* &gt; 10.5 */</comment>

    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>boottime</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>boottime</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>sysctlbyname</name><argument_list>(<argument><expr><literal type="string">"kern.boottime"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>boottime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
        <name>len</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>boottime</name></expr></argument>)</argument_list></sizeof> <operator>&amp;&amp;</operator> <name><name>boottime</name><operator>.</operator><name>tv_sec</name></name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>got_boottime</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* Apple/Darwin */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <block>{<block_content>
    <union>union <name>buf</name> <block>{
      <decl_stmt><decl><type><name>DWORD</name></type> <name>BootId</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>DWORD</name></type> <name>BaseTime</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SYSTEM_TIMEOFDAY_INFORMATION</name></type> <name>SysTimeOfDayInfo</name></decl>;</decl_stmt>
      <struct>struct <block>{
        <decl_stmt><decl><type><name>LARGE_INTEGER</name></type> <name>BootTime</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LARGE_INTEGER</name></type> <name>CurrentTime</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LARGE_INTEGER</name></type> <name>TimeZoneBias</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ULONG</name></type> <name>TimeZoneId</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ULONG</name></type> <name>Reserved</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ULONGLONG</name></type> <name>BootTimeBias</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ULONGLONG</name></type> <name>SleepTimeBias</name></decl>;</decl_stmt>
      }</block> <decl><name>SysTimeOfDayInfoHacked</name></decl>;</struct>
      <decl_stmt><decl><type><name>wchar_t</name></type> <name><name>MachineGuid</name><index>[<expr><literal type="number">42</literal></expr>]</index></name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name></type> <name><name>DigitalProductId</name><index>[<expr><literal type="number">248</literal></expr>]</index></name></decl>;</decl_stmt>
    }</block> <decl><name>buf</name></decl>;</union>

    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>HKLM_MicrosoftCryptography</name><index>[]</index></name> <init>=
        <expr><literal type="string">"SOFTWARE\\Microsoft\\Cryptography"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DWORD</name></type> <name>len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
    <comment type="block">/* Windows is madness and must die */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>mdbx_RegGetValue</name><argument_list>(<argument><expr><name>HKEY_LOCAL_MACHINE</name></expr></argument>, <argument><expr><name>HKLM_MicrosoftCryptography</name></expr></argument>,
                         <argument><expr><literal type="string">"MachineGuid"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><operator>.</operator><name>MachineGuid</name></name></expr></argument>,
                         <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ERROR_SUCCESS</name> <operator>&amp;&amp;</operator>
        <name>len</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>got_machineid</name> <operator>=</operator> <call><name>bootid_parse_uuid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><operator>.</operator><name>MachineGuid</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_machineid</name></expr>)</condition> <block>{<block_content>
      <comment type="block">/* again, Windows is madness */</comment>
      <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>HKLM_WindowsNT</name><index>[]</index></name> <init>=
          <expr><literal type="string">"SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion"</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>HKLM_WindowsNT_DPK</name><index>[]</index></name> <init>=
          <expr><literal type="string">"SOFTWARE\\Microsoft\\Windows "</literal>
          <literal type="string">"NT\\CurrentVersion\\DefaultProductKey"</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>HKLM_WindowsNT_DPK2</name><index>[]</index></name> <init>=
          <expr><literal type="string">"SOFTWARE\\Microsoft\\Windows "</literal>
          <literal type="string">"NT\\CurrentVersion\\DefaultProductKey2"</literal></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>mdbx_RegGetValue</name><argument_list>(<argument><expr><name>HKEY_LOCAL_MACHINE</name></expr></argument>, <argument><expr><name>HKLM_WindowsNT</name></expr></argument>,
                           <argument><expr><literal type="string">"DigitalProductId"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><operator>.</operator><name>DigitalProductId</name></name></expr></argument>,
                           <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ERROR_SUCCESS</name> <operator>&amp;&amp;</operator>
          <name>len</name> <operator>&gt;</operator> <literal type="number">42</literal> <operator>&amp;&amp;</operator> <name>len</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>bootid_collect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><operator>.</operator><name>DigitalProductId</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>got_machineid</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>mdbx_RegGetValue</name><argument_list>(<argument><expr><name>HKEY_LOCAL_MACHINE</name></expr></argument>, <argument><expr><name>HKLM_WindowsNT_DPK</name></expr></argument>,
                           <argument><expr><literal type="string">"DigitalProductId"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><operator>.</operator><name>DigitalProductId</name></name></expr></argument>,
                           <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ERROR_SUCCESS</name> <operator>&amp;&amp;</operator>
          <name>len</name> <operator>&gt;</operator> <literal type="number">42</literal> <operator>&amp;&amp;</operator> <name>len</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>bootid_collect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><operator>.</operator><name>DigitalProductId</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>got_machineid</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>mdbx_RegGetValue</name><argument_list>(<argument><expr><name>HKEY_LOCAL_MACHINE</name></expr></argument>, <argument><expr><name>HKLM_WindowsNT_DPK2</name></expr></argument>,
                           <argument><expr><literal type="string">"DigitalProductId"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><operator>.</operator><name>DigitalProductId</name></name></expr></argument>,
                           <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ERROR_SUCCESS</name> <operator>&amp;&amp;</operator>
          <name>len</name> <operator>&gt;</operator> <literal type="number">42</literal> <operator>&amp;&amp;</operator> <name>len</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>bootid_collect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><operator>.</operator><name>DigitalProductId</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>got_machineid</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>HKLM_PrefetcherParams</name><index>[]</index></name> <init>=
        <expr><literal type="string">"SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Memory "</literal>
        <literal type="string">"Management\\PrefetchParameters"</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mdbx_RegGetValue</name><argument_list>(<argument><expr><name>HKEY_LOCAL_MACHINE</name></expr></argument>, <argument><expr><name>HKLM_PrefetcherParams</name></expr></argument>, <argument><expr><literal type="string">"BootId"</literal></expr></argument>,
                         <argument><expr><operator>&amp;</operator><name><name>buf</name><operator>.</operator><name>BootId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ERROR_SUCCESS</name> <operator>&amp;&amp;</operator>
        <name>len</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>len</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>bootid_collect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><operator>.</operator><name>BootId</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>got_bootseq</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mdbx_RegGetValue</name><argument_list>(<argument><expr><name>HKEY_LOCAL_MACHINE</name></expr></argument>, <argument><expr><name>HKLM_PrefetcherParams</name></expr></argument>, <argument><expr><literal type="string">"BaseTime"</literal></expr></argument>,
                         <argument><expr><operator>&amp;</operator><name><name>buf</name><operator>.</operator><name>BaseTime</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ERROR_SUCCESS</name> <operator>&amp;&amp;</operator>
        <name>len</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>BaseTime</name></name></expr></argument>)</argument_list></sizeof> <operator>&amp;&amp;</operator> <name><name>buf</name><operator>.</operator><name>BaseTime</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>bootid_collect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><operator>.</operator><name>BaseTime</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>got_boottime</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* BootTime from SYSTEM_TIMEOFDAY_INFORMATION */</comment>
    <decl_stmt><decl><type><name>NTSTATUS</name></type> <name>status</name> <init>= <expr><call><name>NtQuerySystemInformation</name><argument_list>(
        <argument><expr><literal type="number">0x03</literal></expr></argument> <comment type="block">/* SystemTmeOfDayInformation */</comment>, <argument><expr><operator>&amp;</operator><name><name>buf</name><operator>.</operator><name>SysTimeOfDayInfo</name></name></expr></argument>,
        <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>SysTimeOfDayInfo</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>NT_SUCCESS</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
        <name>len</name> <operator>&gt;=</operator> <call><name>offsetof</name><argument_list>(<argument><expr>union <name>buf</name></expr></argument>, <argument><expr><name><name>SysTimeOfDayInfoHacked</name><operator>.</operator><name>BootTimeBias</name></name></expr></argument>)</argument_list></call> <operator>+</operator>
                   <sizeof>sizeof<argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>SysTimeOfDayInfoHacked</name><operator>.</operator><name>BootTimeBias</name></name></expr></argument>)</argument_list></sizeof> <operator>&amp;&amp;</operator>
        <name><name>buf</name><operator>.</operator><name>SysTimeOfDayInfoHacked</name><operator>.</operator><name>BootTime</name><operator>.</operator><name>QuadPart</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>UnbiasedBootTime</name> <init>=
          <expr><name><name>buf</name><operator>.</operator><name>SysTimeOfDayInfoHacked</name><operator>.</operator><name>BootTime</name><operator>.</operator><name>QuadPart</name></name> <operator>-</operator>
          <name><name>buf</name><operator>.</operator><name>SysTimeOfDayInfoHacked</name><operator>.</operator><name>BootTimeBias</name></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>UnbiasedBootTime</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>bootid_collect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>UnbiasedBootTime</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>UnbiasedBootTime</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>got_boottime</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_boottime</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>uint64_t</name></type> <name>boottime</name> <init>= <expr><call><name>windows_bootime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>boottime</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>bootid_collect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>boottime</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>boottime</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>got_boottime</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* Windows */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CTL_HW</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HW_UUID</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_machineid</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>mib</name><index>[]</index></name> <init>= <expr><block>{<expr><name>CTL_HW</name></expr>, <expr><name>HW_UUID</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">42</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>sysctl</name><argument_list>(
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SYSCTL_LEGACY_NONCONST_MIB</name></cpp:ifdef>
            <argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                <name>mib</name></expr></argument>,
            <argument><expr><call><name>ARRAY_LENGTH</name><argument_list>(<argument><expr><name>mib</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>got_machineid</name> <operator>=</operator> <call><name>bootid_parse_uuid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bin</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* CTL_HW &amp;&amp; HW_UUID */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CTL_KERN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>KERN_HOSTUUID</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_machineid</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>mib</name><index>[]</index></name> <init>= <expr><block>{<expr><name>CTL_KERN</name></expr>, <expr><name>KERN_HOSTUUID</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">42</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>sysctl</name><argument_list>(
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SYSCTL_LEGACY_NONCONST_MIB</name></cpp:ifdef>
            <argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                <name>mib</name></expr></argument>,
            <argument><expr><call><name>ARRAY_LENGTH</name><argument_list>(<argument><expr><name>mib</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>got_machineid</name> <operator>=</operator> <call><name>bootid_parse_uuid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bin</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* CTL_KERN &amp;&amp; KERN_HOSTUUID */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__NetBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_machineid</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">42</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>sysctlbyname</name><argument_list>(<argument><expr><literal type="string">"machdep.dmi.system-uuid"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>got_machineid</name> <operator>=</operator> <call><name>bootid_parse_uuid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bin</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __NetBSD__ */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_XOPEN_SOURCE_EXTENDED</name></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_machineid</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>hostid</name> <init>= <expr><call><name>gethostid</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>hostid</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>bootid_collect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hostid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hostid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>got_machineid</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* _XOPEN_SOURCE_EXTENDED */</comment>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_machineid</name></expr>)</condition> <block>{<block_content>
  <label><name>lack</name>:</label>
    <expr_stmt><expr><name><name>bin</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>bin</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><name>bin</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/*--------------------------------------------------------------------------*/</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CTL_KERN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>KERN_BOOTTIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_boottime</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>mib</name><index>[]</index></name> <init>= <expr><block>{<expr><name>CTL_KERN</name></expr>, <expr><name>KERN_BOOTTIME</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>boottime</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>boottime</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>sysctl</name><argument_list>(
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SYSCTL_LEGACY_NONCONST_MIB</name></cpp:ifdef>
            <argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                <name>mib</name></expr></argument>,
            <argument><expr><call><name>ARRAY_LENGTH</name><argument_list>(<argument><expr><name>mib</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>boottime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
        <name>len</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>boottime</name></expr></argument>)</argument_list></sizeof> <operator>&amp;&amp;</operator> <name><name>boottime</name><operator>.</operator><name>tv_sec</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>bootid_collect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>boottime</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>got_boottime</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* CTL_KERN &amp;&amp; KERN_BOOTTIME */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__sun</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SVR4</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__svr4__</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_boottime</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>kstat_ctl_t</name> <modifier>*</modifier></type><name>kc</name> <init>= <expr><call><name>kstat_open</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>kc</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>kstat_t</name> <modifier>*</modifier></type><name>kp</name> <init>= <expr><call><name>kstat_lookup</name><argument_list>(<argument><expr><name>kc</name></expr></argument>, <argument><expr><literal type="string">"unix"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"system_misc"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>kp</name> <operator>&amp;&amp;</operator> <call><name>kstat_read</name><argument_list>(<argument><expr><name>kc</name></expr></argument>, <argument><expr><name>kp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>kstat_named_t</name> <modifier>*</modifier></type><name>kn</name> <init>= <expr><operator>(</operator><name>kstat_named_t</name> <operator>*</operator><operator>)</operator><call><name>kstat_data_lookup</name><argument_list>(<argument><expr><name>kp</name></expr></argument>, <argument><expr><literal type="string">"boot_time"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>kn</name></expr>)</condition> <block>{<block_content>
          <switch>switch <condition>(<expr><name><name>kn</name><operator>-&gt;</operator><name>data_type</name></name></expr>)</condition> <block>{<block_content>
          <case>case <expr><name>KSTAT_DATA_INT32</name></expr>:</case>
          <case>case <expr><name>KSTAT_DATA_UINT32</name></expr>:</case>
            <expr_stmt><expr><call><name>bootid_collect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>kn</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>got_boottime</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
          <case>case <expr><name>KSTAT_DATA_INT64</name></expr>:</case>
          <case>case <expr><name>KSTAT_DATA_UINT64</name></expr>:</case>
            <expr_stmt><expr><call><name>bootid_collect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>kn</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>got_boottime</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
          </block_content>}</block></switch>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>kstat_close</name><argument_list>(<argument><expr><name>kc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SunOS / Solaris */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_XOPEN_SOURCE_EXTENDED</name> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>BOOT_TIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_boottime</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>setutxent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>utmpx</name></name></type> <name>id</name> <init>= <expr><block>{<expr><operator>.</operator><name>ut_type</name> <operator>=</operator> <name>BOOT_TIME</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>utmpx</name></name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><call><name>getutxid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>entry</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>bootid_collect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bin</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>got_boottime</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <while>while <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>(</operator><name>entry</name> <operator>=</operator> <call><name>getutxid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>nullptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="block">/* have multiple reboot records, assuming we can distinguish next
         * bootsession even if RTC is wrong or absent */</comment>
        <expr_stmt><expr><call><name>bootid_collect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bin</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>got_bootseq</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>endutxent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* _XOPEN_SOURCE_EXTENDED &amp;&amp; BOOT_TIME */</comment>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_bootseq</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_boottime</name> <operator>||</operator> <operator>!</operator><name>MDBX_TRUST_RTC</name></expr>)</condition><block type="pseudo"><block_content>
      <goto>goto <name>lack</name>;</goto></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name>FILETIME</name></type> <name>now</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>GetSystemTimeAsFileTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">0x1CCCCCC</literal> <operator>&gt;</operator> <name><name>now</name><operator>.</operator><name>dwHighDateTime</name></name></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>mono</name></decl>, <decl><type ref="prev"/><name>real</name></decl>;</decl_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>clock_gettime</name><argument_list>(<argument><expr><name>CLOCK_MONOTONIC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mono</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>clock_gettime</name><argument_list>(<argument><expr><name>CLOCK_REALTIME</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>real</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <comment type="block">/* wrong time, RTC is mad or absent */</comment>
        <literal type="number">1555555555l</literal> <operator>&gt;</operator> <name><name>real</name><operator>.</operator><name>tv_sec</name></name> <operator>||</operator>
        <comment type="block">/* seems no adjustment by RTC/NTP, i.e. a fake time */</comment>
        <name><name>real</name><operator>.</operator><name>tv_sec</name></name> <operator>&lt;</operator> <name><name>mono</name><operator>.</operator><name>tv_sec</name></name> <operator>||</operator> <literal type="number">1234567890l</literal> <operator>&gt;</operator> <name><name>real</name><operator>.</operator><name>tv_sec</name></name> <operator>-</operator> <name><name>mono</name><operator>.</operator><name>tv_sec</name></name> <operator>||</operator>
        <operator>(</operator><name><name>real</name><operator>.</operator><name>tv_sec</name></name> <operator>-</operator> <name><name>mono</name><operator>.</operator><name>tv_sec</name></name><operator>)</operator> <operator>%</operator> <literal type="number">900u</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <goto>goto <name>lack</name>;</goto></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>bin</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>__cold</name> <name>int</name></type> <name>mdbx_get_sysraminfo</name><parameter_list>(<parameter><decl><type><name>intptr_t</name> <modifier>*</modifier></type><name>page_size</name></decl></parameter>, <parameter><decl><type><name>intptr_t</name> <modifier>*</modifier></type><name>total_pages</name></decl></parameter>,
                               <parameter><decl><type><name>intptr_t</name> <modifier>*</modifier></type><name>avail_pages</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>page_size</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>total_pages</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>avail_pages</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>MDBX_EINVAL</name></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>total_pages</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><operator>*</operator><name>total_pages</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>avail_pages</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><operator>*</operator><name>avail_pages</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>intptr_t</name></type> <name>pagesize</name> <init>= <expr><call><name>mdbx_syspagesize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>page_size</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><operator>*</operator><name>page_size</name> <operator>=</operator> <name>pagesize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>pagesize</name> <operator>&lt;</operator> <name>MIN_PAGESIZE</name> <operator>||</operator> <operator>!</operator><call><name>is_powerof2</name><argument_list>(<argument><expr><name>pagesize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>MDBX_INCOMPATIBLE</name></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>MDBX_MAYBE_UNUSED</name> <specifier>const</specifier> <name>int</name></type> <name>log2page</name> <init>= <expr><call><name>log2n_powerof2</name><argument_list>(<argument><expr><name>pagesize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pagesize</name> <operator>==</operator> <operator>(</operator><call><name>INT64_C</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>log2page</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>log2page</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>MEMORYSTATUSEX</name></type> <name>info</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>info</name><operator>.</operator><name>dwLength</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GlobalMemoryStatusEx</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>GetLastError</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <if_stmt><if>if <condition>(<expr><name>total_pages</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><specifier>const</specifier> <name>intptr_t</name></type> <name>total_ram_pages</name> <init>= <expr><operator>(</operator><name>intptr_t</name><operator>)</operator><operator>(</operator><name><name>info</name><operator>.</operator><name>ullTotalPhys</name></name> <operator>&gt;&gt;</operator> <name>log2page</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_SC_PHYS_PAGES</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <decl_stmt><decl><type><specifier>const</specifier> <name>intptr_t</name></type> <name>total_ram_pages</name> <init>= <expr><call><name>sysconf</name><argument_list>(<argument><expr><name>_SC_PHYS_PAGES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>total_ram_pages</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>errno</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_SC_AIX_REALMEM</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <decl_stmt><decl><type><specifier>const</specifier> <name>intptr_t</name></type> <name>total_ram_Kb</name> <init>= <expr><call><name>sysconf</name><argument_list>(<argument><expr><name>_SC_AIX_REALMEM</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>total_ram_Kb</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>errno</name></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>intptr_t</name></type> <name>total_ram_pages</name> <init>= <expr><operator>(</operator><name>total_ram_Kb</name> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name>log2page</name></expr></init></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HW_USERMEM</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HW_PHYSMEM64</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HW_MEMSIZE</name></expr></argument>)</argument_list></call> <operator>||</operator>   \
    <call><name>defined</name><argument_list>(<argument><expr><name>HW_PHYSMEM</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <decl_stmt><decl><type><name>size_t</name></type> <name>ram</name></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>ram</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>mib</name><index>[]</index></name> <init>= <expr><block>{
      <expr><name>CTL_HW</name></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HW_USERMEM</name></expr></argument>)</argument_list></call></expr></cpp:if>
      <expr><name>HW_USERMEM</name>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HW_PHYSMEM64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
      <name>HW_PHYSMEM64</name>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HW_MEMSIZE</name></expr></argument>)</argument_list></call></expr></cpp:elif>
      <name>HW_MEMSIZE</name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <name>HW_PHYSMEM</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    }</block></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>sysctl</name><argument_list>(
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SYSCTL_LEGACY_NONCONST_MIB</name></cpp:ifdef>
            <argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                <name>mib</name></expr></argument>,
            <argument><expr><call><name>ARRAY_LENGTH</name><argument_list>(<argument><expr><name>mib</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>ram</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>errno</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ram</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>MDBX_ENOSYS</name></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>intptr_t</name></type> <name>total_ram_pages</name> <init>= <expr><operator>(</operator><name>intptr_t</name><operator>)</operator><operator>(</operator><name>ram</name> <operator>&gt;&gt;</operator> <name>log2page</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"FIXME: Get User-accessible or physical RAM"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><operator>*</operator><name>total_pages</name> <operator>=</operator> <name>total_ram_pages</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>total_ram_pages</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>MDBX_ENOSYS</name></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>avail_pages</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><specifier>const</specifier> <name>intptr_t</name></type> <name>avail_ram_pages</name> <init>= <expr><operator>(</operator><name>intptr_t</name><operator>)</operator><operator>(</operator><name><name>info</name><operator>.</operator><name>ullAvailPhys</name></name> <operator>&gt;&gt;</operator> <name>log2page</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_SC_AVPHYS_PAGES</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <decl_stmt><decl><type><specifier>const</specifier> <name>intptr_t</name></type> <name>avail_ram_pages</name> <init>= <expr><call><name>sysconf</name><argument_list>(<argument><expr><name>_SC_AVPHYS_PAGES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>avail_ram_pages</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>errno</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MACH__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <decl_stmt><decl><type><name>mach_msg_type_number_t</name></type> <name>count</name> <init>= <expr><name>HOST_VM_INFO_COUNT</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>vm_statistics_data_t</name></type> <name>vmstat</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mach_port_t</name></type> <name>mport</name> <init>= <expr><call><name>mach_host_self</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>kern_return_t</name></type> <name>kerr</name> <init>= <expr><call><name>host_statistics</name><argument_list>(<argument><expr><call><name>mach_host_self</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>HOST_VM_INFO</name></expr></argument>,
                                         <argument><expr><operator>(</operator><name>host_info_t</name><operator>)</operator><operator>&amp;</operator><name>vmstat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>mach_port_deallocate</name><argument_list>(<argument><expr><call><name>mach_task_self</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>mport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>kerr</name> <operator>!=</operator> <name>KERN_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>MDBX_ENOSYS</name></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>intptr_t</name></type> <name>avail_ram_pages</name> <init>= <expr><name><name>vmstat</name><operator>.</operator><name>free_count</name></name></expr></init></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VM_TOTAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VM_METER</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <decl_stmt><decl><type><name><name>struct</name> <name>vmtotal</name></name></type> <name>info</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>mib</name><index>[]</index></name> <init>= <expr><block>{
      <expr><name>CTL_VM</name></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VM_TOTAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
      <expr><name>VM_TOTAL</name>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VM_METER</name></expr></argument>)</argument_list></call></expr></cpp:elif>
      <name>VM_METER</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    }</block></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>sysctl</name><argument_list>(
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SYSCTL_LEGACY_NONCONST_MIB</name></cpp:ifdef>
            <argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                <name>mib</name></expr></argument>,
            <argument><expr><call><name>ARRAY_LENGTH</name><argument_list>(<argument><expr><name>mib</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>errno</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>MDBX_ENOSYS</name></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>intptr_t</name></type> <name>avail_ram_pages</name> <init>= <expr><name><name>info</name><operator>.</operator><name>t_free</name></name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"FIXME: Get Available RAM"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><operator>*</operator><name>avail_pages</name> <operator>=</operator> <name>avail_ram_pages</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>avail_ram_pages</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>MDBX_ENOSYS</name></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>MDBX_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
</unit>
