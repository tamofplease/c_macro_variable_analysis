<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/libmdbx/src/mdbx_stat.c"><comment type="block">/* mdbx_stat.c - memory-mapped database status tool */</comment>

<comment type="block">/*
 * Copyright 2015-2022 Leonid Yuriev &lt;leo@yuriev.ru&gt;
 * and other libmdbx authors: please see AUTHORS file.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted only as authorized by the OpenLDAP
 * Public License.
 *
 * A copy of this license is available in the file LICENSE in the
 * top-level directory of the distribution or, alternatively, at
 * &lt;http://www.OpenLDAP.org/license.html&gt;. */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_MSC_VER</name></cpp:ifdef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_MSC_VER</name> <operator>&gt;</operator> <literal type="number">1800</literal></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name> <name>:</name> <name>4464</name><name>)</name></cpp:pragma> <comment type="block">/* relative include path contains '..' */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name> <name>:</name> <name>4996</name><name>)</name></cpp:pragma> <comment type="block">/* The POSIX name is deprecated... */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>                          <comment type="block">/* _MSC_VER (warnings) */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xMDBX_TOOLS</name></cpp:macro></cpp:define> <comment type="block">/* Avoid using internal mdbx_assert() */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internals.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wingetopt.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>BOOL</name></type> <name>user_break</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>BOOL</name> <name>WINAPI</name></type> <name>ConsoleBreakHandlerRoutine</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type> <name>dwCtrlType</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>dwCtrlType</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>user_break</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* WINDOWS */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>sig_atomic_t</name></type> <name>user_break</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>signal_handler</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>sig</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>user_break</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !WINDOWS */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_stat</name><parameter_list>(<parameter><decl><type><name>MDBX_stat</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  Pagesize: %u\n"</literal></expr></argument>, <argument><expr><name><name>ms</name><operator>-&gt;</operator><name>ms_psize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  Tree depth: %u\n"</literal></expr></argument>, <argument><expr><name><name>ms</name><operator>-&gt;</operator><name>ms_depth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  Branch pages: %"</literal> <name>PRIu64</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>ms</name><operator>-&gt;</operator><name>ms_branch_pages</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  Leaf pages: %"</literal> <name>PRIu64</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>ms</name><operator>-&gt;</operator><name>ms_leaf_pages</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  Overflow pages: %"</literal> <name>PRIu64</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>ms</name><operator>-&gt;</operator><name>ms_overflow_pages</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  Entries: %"</literal> <name>PRIu64</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>ms</name><operator>-&gt;</operator><name>ms_entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>usage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prog</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
          <argument><expr><literal type="string">"usage: %s [-V] [-q] [-e] [-f[f[f]]] [-r[r]] [-a|-s name] dbpath\n"</literal>
          <literal type="string">"  -V\t\tprint version and exit\n"</literal>
          <literal type="string">"  -q\t\tbe quiet\n"</literal>
          <literal type="string">"  -p\t\tshow statistics of page operations for current session\n"</literal>
          <literal type="string">"  -e\t\tshow whole DB info\n"</literal>
          <literal type="string">"  -f\t\tshow GC info\n"</literal>
          <literal type="string">"  -r\t\tshow readers\n"</literal>
          <literal type="string">"  -a\t\tprint stat of main DB and all subDBs\n"</literal>
          <literal type="string">"  -s name\tprint stat of only the specified named subDB\n"</literal>
          <literal type="string">"  \t\tby default print stat of only the main DB\n"</literal></expr></argument>,
          <argument><expr><name>prog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>reader_list_func</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slot</name></decl></parameter>, <parameter><decl><type><name>mdbx_pid_t</name></type> <name>pid</name></decl></parameter>,
                            <parameter><decl><type><name>mdbx_tid_t</name></type> <name>thread</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>txnid</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>lag</name></decl></parameter>,
                            <parameter><decl><type><name>size_t</name></type> <name>bytes_used</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytes_retained</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>ctx</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>num</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Reader Table\n"</literal>
           <literal type="string">"   #\tslot\t%6s %*s %20s %10s %13s %13s\n"</literal></expr></argument>,
           <argument><expr><literal type="string">"pid"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"thread"</literal></expr></argument>, <argument><expr><literal type="string">"txnid"</literal></expr></argument>, <argument><expr><literal type="string">"lag"</literal></expr></argument>, <argument><expr><literal type="string">"used"</literal></expr></argument>,
           <argument><expr><literal type="string">"retained"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %3d)\t[%d]\t%6"</literal> <name>PRIdSIZE</name> <literal type="string">" %*"</literal> <name>PRIxPTR</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>pid</name></expr></argument>,
         <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>txnid</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %20"</literal> <name>PRIu64</name> <literal type="string">" %10"</literal> <name>PRIu64</name> <literal type="string">" %12.1fM %12.1fM\n"</literal></expr></argument>, <argument><expr><name>txnid</name></expr></argument>, <argument><expr><name>lag</name></expr></argument>,
           <argument><expr><name>bytes_used</name> <operator>/</operator> <literal type="number">1048576.0</literal></expr></argument>, <argument><expr><name>bytes_retained</name> <operator>/</operator> <literal type="number">1048576.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %20s %10s %13s %13s\n"</literal></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

  <return>return <expr><ternary><condition><expr><name>user_break</name></expr> ?</condition><then> <expr><name>MDBX_RESULT_TRUE</name></expr> </then><else>: <expr><name>MDBX_RESULT_FALSE</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>quiet</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>error</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: %s() error %d %s\n"</literal></expr></argument>, <argument><expr><name>prog</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>,
            <argument><expr><call><name>mdbx_strerror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>opt</name></decl>, <decl><type ref="prev"/><name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MDBX_env</name> <modifier>*</modifier></type><name>env</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MDBX_txn</name> <modifier>*</modifier></type><name>txn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MDBX_dbi</name></type> <name>dbi</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MDBX_envinfo</name></type> <name>mei</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>prog</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>envname</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>subname</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>alldbs</name> <init>= <expr><name>false</name></expr></init></decl>, <decl><type ref="prev"/><name>envinfo</name> <init>= <expr><name>false</name></expr></init></decl>, <decl><type ref="prev"/><name>pgop</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>freinfo</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>rdrinfo</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name>prog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <while>while <condition>(<expr><operator>(</operator><name>opt</name> <operator>=</operator> <call><name>getopt</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>,
                       <argument><expr><literal type="string">"V"</literal>
                       <literal type="string">"q"</literal>
                       <literal type="string">"p"</literal>
                       <literal type="string">"a"</literal>
                       <literal type="string">"e"</literal>
                       <literal type="string">"f"</literal>
                       <literal type="string">"n"</literal>
                       <literal type="string">"r"</literal>
                       <literal type="string">"s:"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>
    <switch>switch <condition>(<expr><name>opt</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="char">'V'</literal></expr>:</case>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"mdbx_stat version %d.%d.%d.%d\n"</literal>
             <literal type="string">" - source: %s %s, commit %s, tree %s\n"</literal>
             <literal type="string">" - anchor: %s\n"</literal>
             <literal type="string">" - build: %s for %s by %s\n"</literal>
             <literal type="string">" - flags: %s\n"</literal>
             <literal type="string">" - options: %s\n"</literal></expr></argument>,
             <argument><expr><name><name>mdbx_version</name><operator>.</operator><name>major</name></name></expr></argument>, <argument><expr><name><name>mdbx_version</name><operator>.</operator><name>minor</name></name></expr></argument>, <argument><expr><name><name>mdbx_version</name><operator>.</operator><name>release</name></name></expr></argument>,
             <argument><expr><name><name>mdbx_version</name><operator>.</operator><name>revision</name></name></expr></argument>, <argument><expr><name><name>mdbx_version</name><operator>.</operator><name>git</name><operator>.</operator><name>describe</name></name></expr></argument>,
             <argument><expr><name><name>mdbx_version</name><operator>.</operator><name>git</name><operator>.</operator><name>datetime</name></name></expr></argument>, <argument><expr><name><name>mdbx_version</name><operator>.</operator><name>git</name><operator>.</operator><name>commit</name></name></expr></argument>,
             <argument><expr><name><name>mdbx_version</name><operator>.</operator><name>git</name><operator>.</operator><name>tree</name></name></expr></argument>, <argument><expr><name>mdbx_sourcery_anchor</name></expr></argument>, <argument><expr><name><name>mdbx_build</name><operator>.</operator><name>datetime</name></name></expr></argument>,
             <argument><expr><name><name>mdbx_build</name><operator>.</operator><name>target</name></name></expr></argument>, <argument><expr><name><name>mdbx_build</name><operator>.</operator><name>compiler</name></name></expr></argument>, <argument><expr><name><name>mdbx_build</name><operator>.</operator><name>flags</name></name></expr></argument>,
             <argument><expr><name><name>mdbx_build</name><operator>.</operator><name>options</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>EXIT_SUCCESS</name></expr>;</return>
    <case>case <expr><literal type="char">'q'</literal></expr>:</case>
      <expr_stmt><expr><name>quiet</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'p'</literal></expr>:</case>
      <expr_stmt><expr><name>pgop</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'a'</literal></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>subname</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name>prog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>alldbs</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'e'</literal></expr>:</case>
      <expr_stmt><expr><name>envinfo</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'f'</literal></expr>:</case>
      <expr_stmt><expr><name>freinfo</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'n'</literal></expr>:</case>
      <break>break;</break>
    <case>case <expr><literal type="char">'r'</literal></expr>:</case>
      <expr_stmt><expr><name>rdrinfo</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'s'</literal></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>alldbs</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name>prog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>subname</name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name>prog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><name>optind</name> <operator>!=</operator> <name>argc</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name>prog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name>SetConsoleCtrlHandler</name><argument_list>(<argument><expr><name>ConsoleBreakHandlerRoutine</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SIGPIPE</name></cpp:ifdef>
  <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>, <argument><expr><name>signal_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SIGHUP</name></cpp:ifdef>
  <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>, <argument><expr><name>signal_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>signal_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><name>signal_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !WINDOWS */</comment>

  <expr_stmt><expr><name>envname</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>optind</name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>envname</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>optind</name></expr>]</index></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"mdbx_stat %s (%s, T-%s)\nRunning for %s...\n"</literal></expr></argument>,
           <argument><expr><name><name>mdbx_version</name><operator>.</operator><name>git</name><operator>.</operator><name>describe</name></name></expr></argument>, <argument><expr><name><name>mdbx_version</name><operator>.</operator><name>git</name><operator>.</operator><name>datetime</name></name></expr></argument>,
           <argument><expr><name><name>mdbx_version</name><operator>.</operator><name>git</name><operator>.</operator><name>tree</name></name></expr></argument>, <argument><expr><name>envname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_env_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_env_create"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>alldbs</name> <operator>||</operator> <name>subname</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_env_set_maxdbs</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_env_set_maxdbs"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>env_close</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_env_open</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>envname</name></expr></argument>, <argument><expr><name>MDBX_RDONLY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_env_open"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>env_close</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_txn_begin</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>, <argument><expr><name>MDBX_TXN_RDONLY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_txn_begin"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>txn_abort</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>envinfo</name> <operator>||</operator> <name>freinfo</name> <operator>||</operator> <name>pgop</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_env_info_ex</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mei</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mei</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_env_info_ex"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>txn_abort</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="block">/* LY: zap warnings from gcc */</comment>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mei</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mei</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>pgop</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Page Operations (for current session):\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"      New: %8"</literal> <name>PRIu64</name> <literal type="string">"\t// quantity of a new pages added\n"</literal></expr></argument>,
           <argument><expr><name><name>mei</name><operator>.</operator><name>mi_pgop_stat</name><operator>.</operator><name>newly</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"      CoW: %8"</literal> <name>PRIu64</name>
           <literal type="string">"\t// quantity of pages copied for altering\n"</literal></expr></argument>,
           <argument><expr><name><name>mei</name><operator>.</operator><name>mi_pgop_stat</name><operator>.</operator><name>cow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"    Clone: %8"</literal> <name>PRIu64</name> <literal type="string">"\t// quantity of parent's dirty pages "</literal>
           <literal type="string">"clones for nested transactions\n"</literal></expr></argument>,
           <argument><expr><name><name>mei</name><operator>.</operator><name>mi_pgop_stat</name><operator>.</operator><name>clone</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"    Split: %8"</literal> <name>PRIu64</name>
           <literal type="string">"\t// page splits during insertions or updates\n"</literal></expr></argument>,
           <argument><expr><name><name>mei</name><operator>.</operator><name>mi_pgop_stat</name><operator>.</operator><name>split</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"    Merge: %8"</literal> <name>PRIu64</name>
           <literal type="string">"\t// page merges during deletions or updates\n"</literal></expr></argument>,
           <argument><expr><name><name>mei</name><operator>.</operator><name>mi_pgop_stat</name><operator>.</operator><name>merge</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"    Spill: %8"</literal> <name>PRIu64</name> <literal type="string">"\t// quantity of spilled/ousted `dirty` "</literal>
           <literal type="string">"pages during large transactions\n"</literal></expr></argument>,
           <argument><expr><name><name>mei</name><operator>.</operator><name>mi_pgop_stat</name><operator>.</operator><name>spill</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  Unspill: %8"</literal> <name>PRIu64</name> <literal type="string">"\t// quantity of unspilled/redone `dirty` "</literal>
           <literal type="string">"pages during large transactions\n"</literal></expr></argument>,
           <argument><expr><name><name>mei</name><operator>.</operator><name>mi_pgop_stat</name><operator>.</operator><name>unspill</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"      WOP: %8"</literal> <name>PRIu64</name>
           <literal type="string">"\t// number of explicit write operations (not a pages) to a disk\n"</literal></expr></argument>,
           <argument><expr><name><name>mei</name><operator>.</operator><name>mi_pgop_stat</name><operator>.</operator><name>wops</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>envinfo</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Environment Info\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  Pagesize: %u\n"</literal></expr></argument>, <argument><expr><name><name>mei</name><operator>.</operator><name>mi_dxb_pagesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>mei</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>lower</name></name> <operator>!=</operator> <name><name>mei</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>upper</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  Dynamic datafile: %"</literal> <name>PRIu64</name> <literal type="string">"..%"</literal> <name>PRIu64</name> <literal type="string">" bytes (+%"</literal> <name>PRIu64</name>
             <literal type="string">"/-%"</literal> <name>PRIu64</name> <literal type="string">"), %"</literal> <name>PRIu64</name> <literal type="string">"..%"</literal> <name>PRIu64</name> <literal type="string">" pages (+%"</literal> <name>PRIu64</name>
             <literal type="string">"/-%"</literal> <name>PRIu64</name> <literal type="string">")\n"</literal></expr></argument>,
             <argument><expr><name><name>mei</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>lower</name></name></expr></argument>, <argument><expr><name><name>mei</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>upper</name></name></expr></argument>, <argument><expr><name><name>mei</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>grow</name></name></expr></argument>,
             <argument><expr><name><name>mei</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>shrink</name></name></expr></argument>, <argument><expr><name><name>mei</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>lower</name></name> <operator>/</operator> <name><name>mei</name><operator>.</operator><name>mi_dxb_pagesize</name></name></expr></argument>,
             <argument><expr><name><name>mei</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>upper</name></name> <operator>/</operator> <name><name>mei</name><operator>.</operator><name>mi_dxb_pagesize</name></name></expr></argument>,
             <argument><expr><name><name>mei</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>grow</name></name> <operator>/</operator> <name><name>mei</name><operator>.</operator><name>mi_dxb_pagesize</name></name></expr></argument>,
             <argument><expr><name><name>mei</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>shrink</name></name> <operator>/</operator> <name><name>mei</name><operator>.</operator><name>mi_dxb_pagesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  Current mapsize: %"</literal> <name>PRIu64</name> <literal type="string">" bytes, %"</literal> <name>PRIu64</name> <literal type="string">" pages \n"</literal></expr></argument>,
             <argument><expr><name><name>mei</name><operator>.</operator><name>mi_mapsize</name></name></expr></argument>, <argument><expr><name><name>mei</name><operator>.</operator><name>mi_mapsize</name></name> <operator>/</operator> <name><name>mei</name><operator>.</operator><name>mi_dxb_pagesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  Current datafile: %"</literal> <name>PRIu64</name> <literal type="string">" bytes, %"</literal> <name>PRIu64</name> <literal type="string">" pages\n"</literal></expr></argument>,
             <argument><expr><name><name>mei</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>current</name></name></expr></argument>, <argument><expr><name><name>mei</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>current</name></name> <operator>/</operator> <name><name>mei</name><operator>.</operator><name>mi_dxb_pagesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
      <if_stmt><if>if <condition>(<expr><name><name>mei</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>shrink</name></name> <operator>&amp;&amp;</operator> <name><name>mei</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>current</name></name> <operator>!=</operator> <name><name>mei</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>upper</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"                    WARNING: Due Windows system limitations a "</literal>
               <literal type="string">"file couldn't\n                    be truncated while database "</literal>
               <literal type="string">"is opened. So, the size of\n                    database file "</literal>
               <literal type="string">"may by large than the database itself,\n                    "</literal>
               <literal type="string">"until it will be closed or reopened in read-write mode.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  Fixed datafile: %"</literal> <name>PRIu64</name> <literal type="string">" bytes, %"</literal> <name>PRIu64</name> <literal type="string">" pages\n"</literal></expr></argument>,
             <argument><expr><name><name>mei</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>current</name></name></expr></argument>, <argument><expr><name><name>mei</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>current</name></name> <operator>/</operator> <name><name>mei</name><operator>.</operator><name>mi_dxb_pagesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  Last transaction ID: %"</literal> <name>PRIu64</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>mei</name><operator>.</operator><name>mi_recent_txnid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  Latter reader transaction ID: %"</literal> <name>PRIu64</name> <literal type="string">" (%"</literal> <name>PRIi64</name> <literal type="string">")\n"</literal></expr></argument>,
           <argument><expr><name><name>mei</name><operator>.</operator><name>mi_latter_reader_txnid</name></name></expr></argument>,
           <argument><expr><name><name>mei</name><operator>.</operator><name>mi_latter_reader_txnid</name></name> <operator>-</operator> <name><name>mei</name><operator>.</operator><name>mi_recent_txnid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  Max readers: %u\n"</literal></expr></argument>, <argument><expr><name><name>mei</name><operator>.</operator><name>mi_maxreaders</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  Number of reader slots uses: %u\n"</literal></expr></argument>, <argument><expr><name><name>mei</name><operator>.</operator><name>mi_numreaders</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>rdrinfo</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_reader_list</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>reader_list_func</name></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>MDBX_IS_ERROR</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_reader_list"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>txn_abort</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>MDBX_RESULT_TRUE</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Reader Table is empty\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>rc</name> <operator>==</operator> <name>MDBX_SUCCESS</name> <operator>&amp;&amp;</operator> <name>rdrinfo</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>dead</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_reader_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>MDBX_IS_ERROR</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_reader_check"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>txn_abort</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>MDBX_RESULT_TRUE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  %d stale readers cleared.\n"</literal></expr></argument>, <argument><expr><name>dead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_reader_list</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>reader_list_func</name></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>MDBX_RESULT_TRUE</name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  Now Reader Table is empty\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></if> <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  No stale readers.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>subname</name> <operator>||</operator> <name>alldbs</name> <operator>||</operator> <name>freinfo</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
      <goto>goto <name>txn_abort</name>;</goto></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>freinfo</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Garbage Collection\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>dbi</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>MDBX_cursor</name> <modifier>*</modifier></type><name>cursor</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_cursor_open</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>dbi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_cursor_open"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>txn_abort</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>MDBX_stat</name></type> <name>mst</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_dbi_stat</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>dbi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mst</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mst</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_dbi_stat"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>txn_abort</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>print_stat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>pgno_t</name></type> <name>pages</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iptr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>pgno_t</name></type> <name>reclaimable</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MDBX_val</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>data</name></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>MDBX_SUCCESS</name> <operator>==</operator>
           <operator>(</operator><name>rc</name> <operator>=</operator> <call><name>mdbx_cursor_get</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>MDBX_NEXT</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>user_break</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>MDBX_EINTR</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>iptr</name> <operator>=</operator> <name><name>data</name><operator>.</operator><name>iov_base</name></name></expr>;</expr_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>pgno_t</name></type> <name>number</name> <init>= <expr><operator>*</operator><name>iptr</name><operator>++</operator></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name>pages</name> <operator>+=</operator> <name>number</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>envinfo</name> <operator>&amp;&amp;</operator> <name><name>mei</name><operator>.</operator><name>mi_latter_reader_txnid</name></name> <operator>&gt;</operator> <operator>*</operator><operator>(</operator><name>txnid_t</name> <operator>*</operator><operator>)</operator><name><name>key</name><operator>.</operator><name>iov_base</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>reclaimable</name> <operator>+=</operator> <name>number</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>freinfo</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bad</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>pgno_t</name></type> <name>prev</name> <init>=
            <expr><ternary><condition><expr><name>MDBX_PNL_ASCENDING</name></expr> ?</condition><then> <expr><name>NUM_METAS</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><name>pgno_t</name><operator>)</operator><name><name>mei</name><operator>.</operator><name>mi_last_pgno</name></name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>pgno_t</name></type> <name>span</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>number</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
          <decl_stmt><decl><type><name>pgno_t</name></type> <name>pg</name> <init>= <expr><name><name>iptr</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><call><name>MDBX_PNL_DISORDERED</name><argument_list>(<argument><expr><name>prev</name></expr></argument>, <argument><expr><name>pg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>bad</name> <operator>=</operator> <literal type="string">" [bad sequence]"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
          <expr_stmt><expr><name>prev</name> <operator>=</operator> <name>pg</name></expr>;</expr_stmt>
          <while>while <condition>(<expr><name>i</name> <operator>+</operator> <name>span</name> <operator>&lt;</operator> <name>number</name> <operator>&amp;&amp;</operator>
                 <name><name>iptr</name><index>[<expr><name>i</name> <operator>+</operator> <name>span</name></expr>]</index></name> <operator>==</operator> <operator>(</operator><ternary><condition><expr><name>MDBX_PNL_ASCENDING</name></expr> ?</condition><then> <expr><call><name>pgno_add</name><argument_list>(<argument><expr><name>pg</name></expr></argument>, <argument><expr><name>span</name></expr></argument>)</argument_list></call></expr>
                                                       </then><else>: <expr><call><name>pgno_sub</name><argument_list>(<argument><expr><name>pg</name></expr></argument>, <argument><expr><name>span</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><operator>++</operator><name>span</name></expr>;</expr_stmt></block_content></block></while>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"    Transaction %"</literal> <name>PRIaTXN</name> <literal type="string">", %"</literal> <name>PRIaPGNO</name>
               <literal type="string">" pages, maxspan %"</literal> <name>PRIaPGNO</name> <literal type="string">"%s\n"</literal></expr></argument>,
               <argument><expr><operator>*</operator><operator>(</operator><name>txnid_t</name> <operator>*</operator><operator>)</operator><name><name>key</name><operator>.</operator><name>iov_base</name></name></expr></argument>, <argument><expr><name>number</name></expr></argument>, <argument><expr><name>span</name></expr></argument>, <argument><expr><name>bad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>freinfo</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
          <for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>number</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>span</name></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><specifier>const</specifier> <name>pgno_t</name></type> <name>pg</name> <init>= <expr><name><name>iptr</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>span</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init>
                 <condition><expr><name>i</name> <operator>+</operator> <name>span</name> <operator>&lt;</operator> <name>number</name> <operator>&amp;&amp;</operator>
                 <name><name>iptr</name><index>[<expr><name>i</name> <operator>+</operator> <name>span</name></expr>]</index></name> <operator>==</operator> <operator>(</operator><ternary><condition><expr><name>MDBX_PNL_ASCENDING</name></expr> ?</condition><then> <expr><call><name>pgno_add</name><argument_list>(<argument><expr><name>pg</name></expr></argument>, <argument><expr><name>span</name></expr></argument>)</argument_list></call></expr>
                                                       </then><else>: <expr><call><name>pgno_sub</name><argument_list>(<argument><expr><name>pg</name></expr></argument>, <argument><expr><name>span</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</condition>
                 <incr><expr><operator>++</operator><name>span</name></expr></incr>)</control><block type="pseudo"><block_content>
              <empty_stmt>;</empty_stmt></block_content></block></for>
            <if_stmt><if>if <condition>(<expr><name>span</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
              <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"     %9"</literal> <name>PRIaPGNO</name> <literal type="string">"[%"</literal> <name>PRIaPGNO</name> <literal type="string">"]\n"</literal></expr></argument>, <argument><expr><name>pg</name></expr></argument>, <argument><expr><name>span</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
              <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"     %9"</literal> <name>PRIaPGNO</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>pg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
          </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>mdbx_cursor_close</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cursor</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>

    <switch>switch <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>MDBX_SUCCESS</name></expr>:</case>
    <case>case <expr><name>MDBX_NOTFOUND</name></expr>:</case>
      <break>break;</break>
    <case>case <expr><name>MDBX_EINTR</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Interrupted by signal/user\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <goto>goto <name>txn_abort</name>;</goto>
    <default>default:</default>
      <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_cursor_get"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>txn_abort</name>;</goto>
    </block_content>}</block></switch>

    <if_stmt><if>if <condition>(<expr><name>envinfo</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>uint64_t</name></type> <name>value</name> <init>= <expr><name><name>mei</name><operator>.</operator><name>mi_mapsize</name></name> <operator>/</operator> <name><name>mei</name><operator>.</operator><name>mi_dxb_pagesize</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>double</name></type> <name>percent</name> <init>= <expr><name>value</name> <operator>/</operator> <literal type="number">100.0</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Page Usage\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  Total: %"</literal> <name>PRIu64</name> <literal type="string">" 100%%\n"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>mei</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>current</name></name> <operator>/</operator> <name><name>mei</name><operator>.</operator><name>mi_dxb_pagesize</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  Backed: %"</literal> <name>PRIu64</name> <literal type="string">" %.1f%%\n"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>value</name> <operator>/</operator> <name>percent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>mei</name><operator>.</operator><name>mi_last_pgno</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  Allocated: %"</literal> <name>PRIu64</name> <literal type="string">" %.1f%%\n"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>value</name> <operator>/</operator> <name>percent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>mei</name><operator>.</operator><name>mi_mapsize</name></name> <operator>/</operator> <name><name>mei</name><operator>.</operator><name>mi_dxb_pagesize</name></name> <operator>-</operator> <operator>(</operator><name><name>mei</name><operator>.</operator><name>mi_last_pgno</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  Remained: %"</literal> <name>PRIu64</name> <literal type="string">" %.1f%%\n"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>value</name> <operator>/</operator> <name>percent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>mei</name><operator>.</operator><name>mi_last_pgno</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>pages</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  Used: %"</literal> <name>PRIu64</name> <literal type="string">" %.1f%%\n"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>value</name> <operator>/</operator> <name>percent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>value</name> <operator>=</operator> <name>pages</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  GC: %"</literal> <name>PRIu64</name> <literal type="string">" %.1f%%\n"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>value</name> <operator>/</operator> <name>percent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>value</name> <operator>=</operator> <name>pages</name> <operator>-</operator> <name>reclaimable</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  Retained: %"</literal> <name>PRIu64</name> <literal type="string">" %.1f%%\n"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>value</name> <operator>/</operator> <name>percent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>value</name> <operator>=</operator> <name>reclaimable</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  Reclaimable: %"</literal> <name>PRIu64</name> <literal type="string">" %.1f%%\n"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>value</name> <operator>/</operator> <name>percent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>mei</name><operator>.</operator><name>mi_mapsize</name></name> <operator>/</operator> <name><name>mei</name><operator>.</operator><name>mi_dxb_pagesize</name></name> <operator>-</operator> <operator>(</operator><name><name>mei</name><operator>.</operator><name>mi_last_pgno</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator>
              <name>reclaimable</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  Available: %"</literal> <name>PRIu64</name> <literal type="string">" %.1f%%\n"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>value</name> <operator>/</operator> <name>percent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  GC: %"</literal> <name>PRIaPGNO</name> <literal type="string">" pages\n"</literal></expr></argument>, <argument><expr><name>pages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_dbi_open</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subname</name></expr></argument>, <argument><expr><name>MDBX_DB_ACCEDE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_dbi_open"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>txn_abort</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>MDBX_stat</name></type> <name>mst</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_dbi_stat</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>dbi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mst</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mst</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_dbi_stat"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>txn_abort</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Status of %s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>subname</name></expr> ?</condition><then> <expr><name>subname</name></expr> </then><else>: <expr><literal type="string">"Main DB"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_stat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>alldbs</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>MDBX_cursor</name> <modifier>*</modifier></type><name>cursor</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_cursor_open</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>dbi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_cursor_open"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>txn_abort</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>MDBX_val</name></type> <name>key</name></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>MDBX_SUCCESS</name> <operator>==</operator>
           <operator>(</operator><name>rc</name> <operator>=</operator> <call><name>mdbx_cursor_get</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>, <argument><expr><name>MDBX_NEXT_NODUP</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>MDBX_dbi</name></type> <name>subdbi</name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>memchr</name><argument_list>(<argument><expr><name><name>key</name><operator>.</operator><name>iov_base</name></name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>iov_len</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <continue>continue;</continue></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>subname</name> <operator>=</operator> <call><name>mdbx_malloc</name><argument_list>(<argument><expr><name><name>key</name><operator>.</operator><name>iov_len</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>subname</name></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>iov_base</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>iov_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>subname</name><index>[<expr><name><name>key</name><operator>.</operator><name>iov_len</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_dbi_open</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subname</name></expr></argument>, <argument><expr><name>MDBX_DB_ACCEDE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>subdbi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>MDBX_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Status of %s\n"</literal></expr></argument>, <argument><expr><name>subname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>mdbx_free</name><argument_list>(<argument><expr><name>subname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>MDBX_INCOMPATIBLE</name></expr>)</condition><block type="pseudo"><block_content>
          <continue>continue;</continue></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_dbi_open"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>txn_abort</name>;</goto>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_dbi_stat</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subdbi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mst</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mst</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_dbi_stat"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>txn_abort</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>print_stat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_dbi_close</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>subdbi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_dbi_close"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>txn_abort</name>;</goto>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>mdbx_cursor_close</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cursor</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <switch>switch <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
  <case>case <expr><name>MDBX_SUCCESS</name></expr>:</case>
  <case>case <expr><name>MDBX_NOTFOUND</name></expr>:</case>
    <break>break;</break>
  <case>case <expr><name>MDBX_EINTR</name></expr>:</case>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Interrupted by signal/user\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <break>break;</break>
  <default>default:</default>
    <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_cursor_get"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></switch>

  <expr_stmt><expr><call><name>mdbx_dbi_close</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>dbi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>txn_abort</name>:</label>
  <expr_stmt><expr><call><name>mdbx_txn_abort</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>env_close</name>:</label>
  <expr_stmt><expr><call><name>mdbx_env_close</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><ternary><condition><expr><name>rc</name></expr> ?</condition><then> <expr><name>EXIT_FAILURE</name></expr> </then><else>: <expr><name>EXIT_SUCCESS</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
</unit>
