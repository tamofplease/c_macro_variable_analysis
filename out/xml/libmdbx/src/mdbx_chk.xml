<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/libmdbx/src/mdbx_chk.c"><comment type="block">/* mdbx_chk.c - memory-mapped database check tool */</comment>

<comment type="block">/*
 * Copyright 2015-2022 Leonid Yuriev &lt;leo@yuriev.ru&gt;
 * and other libmdbx authors: please see AUTHORS file.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted only as authorized by the OpenLDAP
 * Public License.
 *
 * A copy of this license is available in the file LICENSE in the
 * top-level directory of the distribution or, alternatively, at
 * &lt;http://www.OpenLDAP.org/license.html&gt;. */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_MSC_VER</name></cpp:ifdef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_MSC_VER</name> <operator>&gt;</operator> <literal type="number">1800</literal></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name> <name>:</name> <name>4464</name><name>)</name></cpp:pragma> <comment type="block">/* relative include path contains '..' */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name> <name>:</name> <name>4996</name><name>)</name></cpp:pragma> <comment type="block">/* The POSIX name is deprecated... */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>                          <comment type="block">/* _MSC_VER (warnings) */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xMDBX_TOOLS</name></cpp:macro></cpp:define> <comment type="block">/* Avoid using internal mdbx_assert() */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internals.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>flagbit</name> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>bit</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
}</block></struct></type> <name>flagbit</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>flagbit</name></type> <name><name>dbflags</name><index>[]</index></name> <init>= <expr><block>{<expr><block>{<expr><name>MDBX_DUPSORT</name></expr>, <expr><literal type="string">"dupsort"</literal></expr>}</block></expr>,
                           <expr><block>{<expr><name>MDBX_INTEGERKEY</name></expr>, <expr><literal type="string">"integerkey"</literal></expr>}</block></expr>,
                           <expr><block>{<expr><name>MDBX_REVERSEKEY</name></expr>, <expr><literal type="string">"reversekey"</literal></expr>}</block></expr>,
                           <expr><block>{<expr><name>MDBX_DUPFIXED</name></expr>, <expr><literal type="string">"dupfixed"</literal></expr>}</block></expr>,
                           <expr><block>{<expr><name>MDBX_REVERSEDUP</name></expr>, <expr><literal type="string">"reversedup"</literal></expr>}</block></expr>,
                           <expr><block>{<expr><name>MDBX_INTEGERDUP</name></expr>, <expr><literal type="string">"integerdup"</literal></expr>}</block></expr>,
                           <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>nullptr</name></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wingetopt.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>BOOL</name></type> <name>user_break</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>BOOL</name> <name>WINAPI</name></type> <name>ConsoleBreakHandlerRoutine</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type> <name>dwCtrlType</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>dwCtrlType</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>user_break</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>GetMilliseconds</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>LARGE_INTEGER</name></type> <name>Counter</name></decl>, <decl><type ref="prev"/><name>Frequency</name></decl>;</decl_stmt>
  <return>return <expr><ternary><condition><expr><operator>(</operator><call><name>QueryPerformanceFrequency</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Frequency</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
          <call><name>QueryPerformanceCounter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Counter</name></expr></argument>)</argument_list></call><operator>)</operator></expr>
             ?</condition><then> <expr><name><name>Counter</name><operator>.</operator><name>QuadPart</name></name> <operator>*</operator> <literal type="number">1000ul</literal> <operator>/</operator> <name><name>Frequency</name><operator>.</operator><name>QuadPart</name></name></expr>
             </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* WINDOWS */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>sig_atomic_t</name></type> <name>user_break</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>signal_handler</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>sig</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>user_break</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !WINDOWS */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXIT_INTERRUPTED</name></cpp:macro> <cpp:value>(EXIT_FAILURE + 4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXIT_FAILURE_SYS</name></cpp:macro> <cpp:value>(EXIT_FAILURE + 3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXIT_FAILURE_MDBX</name></cpp:macro> <cpp:value>(EXIT_FAILURE + 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXIT_FAILURE_CHECK_MAJOR</name></cpp:macro> <cpp:value>(EXIT_FAILURE + 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXIT_FAILURE_CHECK_MINOR</name></cpp:macro> <cpp:value>EXIT_FAILURE</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
  <struct>struct <block>{
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>branch</name></decl>, <name>large_count</name>, <name>large_volume</name>, <name>leaf</name>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>subleaf_dupsort</name></decl>, <name>leaf_dupfixed</name>, <name>subleaf_dupfixed</name>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>total</name></decl>, <name>empty</name>, <name>other</name>;</decl_stmt>
  }</block> <decl><name>pages</name></decl>;</struct>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>payload_bytes</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>lost_bytes</name></decl>;</decl_stmt>
}</block></struct></type> <name>walk_dbi_t</name>;</typedef>

<struct>struct <block>{
  <decl_stmt><decl><type><name>short</name> <modifier>*</modifier></type><name>pagemap</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>total_payload_bytes</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>pgcount</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>walk_dbi_t</name></type>
      <name><name>dbi</name><index>[<expr><name>MDBX_MAX_DBI</name> <operator>+</operator> <name>CORE_DBS</name> <operator>+</operator> <comment type="block">/* account pseudo-entry for meta */</comment> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>walk</name></decl>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dbi_free</name></cpp:macro> <cpp:value>walk.dbi[FREE_DBI]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dbi_main</name></cpp:macro> <cpp:value>walk.dbi[MAIN_DBI]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dbi_meta</name></cpp:macro> <cpp:value>walk.dbi[CORE_DBS]</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>envflags</name> <init>= <expr><name>MDBX_RDONLY</name> <operator>|</operator> <name>MDBX_EXCLUSIVE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MDBX_env</name> <modifier>*</modifier></type><name>env</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MDBX_txn</name> <modifier>*</modifier></type><name>txn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MDBX_envinfo</name></type> <name>envinfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>userdb_count</name></decl>, <decl><type ref="prev"/><name>skipped_subdb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>total_unused_bytes</name></decl>, <decl><type ref="prev"/><name>reclaimable_pages</name></decl>, <decl><type ref="prev"/><name>gc_pages</name></decl>, <decl><type ref="prev"/><name>alloc_pages</name></decl>,
    <decl><type ref="prev"/><name>unused_pages</name></decl>, <decl><type ref="prev"/><name>backed_pages</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>verbose</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ignore_wrong_order</name></decl>, <decl><type ref="prev"/><name>quiet</name></decl>, <decl><type ref="prev"/><name>dont_traversal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>only_subdb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stuck_meta</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<struct>struct <name>problem</name> <block>{
  <decl_stmt><decl><type><name><name>struct</name> <name>problem</name></name> <modifier>*</modifier></type><name>pr_next</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>caption</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name><name>struct</name> <name>problem</name></name> <modifier>*</modifier></type><name>problems_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>total_problems</name></decl>, <decl><type ref="prev"/><name>data_tree_problems</name></decl>, <decl><type ref="prev"/><name>gc_tree_problems</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>MDBX_PRINTF_ARGS</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list> <name>print</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>msg</name></expr></argument>, <argument><expr><operator>...</operator></expr></argument>)</argument_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>vfprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>va_log</name><parameter_list>(<parameter><decl><type><name>MDBX_log_level_t</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>prefixes</name><index>[]</index></name> <init>= <expr><block>{
      <expr><literal type="string">"!!!fatal: "</literal></expr>,       <expr><literal type="string">" ! "</literal></expr> <comment type="block">/* error */</comment>,      <expr><literal type="string">" ~ "</literal></expr> <comment type="block">/* warning */</comment>,
      <expr><literal type="string">"   "</literal></expr> <comment type="block">/* notice */</comment>, <expr><literal type="string">"   // "</literal></expr> <comment type="block">/* verbose */</comment>, <expr><literal type="string">"   //// "</literal></expr> <comment type="block">/* debug */</comment>,
      <expr><literal type="string">"   ////// "</literal></expr> <comment type="block">/* trace */</comment>
  }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>stdout</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>level</name> <operator>&lt;=</operator> <name>MDBX_LOG_ERROR</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>total_problems</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>out</name> <operator>=</operator> <name>stderr</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name> <operator>&amp;&amp;</operator> <name>verbose</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>level</name> <operator>&amp;&amp;</operator>
      <operator>(</operator><name>unsigned</name><operator>)</operator><name>level</name> <operator>&lt;</operator> <call><name>ARRAY_LENGTH</name><argument_list>(<argument><expr><name>prefixes</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name><name>prefixes</name><index>[<expr><name>level</name></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>vfprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>msg</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>level</name> <operator>==</operator> <name>MDBX_LOG_FATAL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE_MDBX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>MDBX_PRINTF_ARGS</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list> <name>error</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>msg</name></expr></argument>, <argument><expr><operator>...</operator></expr></argument>)</argument_list> <block>{<block_content>
  <decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_log</name><argument_list>(<argument><expr><name>MDBX_LOG_ERROR</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>logger</name><parameter_list>(<parameter><decl><type><name>MDBX_log_level_t</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>function</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,
                   <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>line</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>function</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>level</name> <operator>&lt;</operator> <name>MDBX_LOG_EXTRA</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>va_log</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_user_break</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>user_break</name></expr>)</condition> <block>{<block_content>
  <case>case <expr><literal type="number">0</literal></expr>:</case>
    <return>return <expr><name>MDBX_SUCCESS</name></expr>;</return>
  <case>case <expr><literal type="number">1</literal></expr>:</case>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">" - interrupted by signal\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>user_break</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  </block_content>}</block></switch>
  <return>return <expr><name>MDBX_EINTR</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pagemap_cleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name>CORE_DBS</name> <operator>+</operator> <comment type="block">/* account pseudo-entry for meta */</comment> <literal type="number">1</literal></expr></init></decl>;</init>
       <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_LENGTH</name><argument_list>(<argument><expr><name><name>walk</name><operator>.</operator><name>dbi</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>walk</name><operator>.</operator><name>dbi</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>mdbx_free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>walk</name><operator>.</operator><name>dbi</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>walk</name><operator>.</operator><name>dbi</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>mdbx_free</name><argument_list>(<argument><expr><name><name>walk</name><operator>.</operator><name>pagemap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>walk</name><operator>.</operator><name>pagemap</name></name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>walk_dbi_t</name> <modifier>*</modifier></type><name>pagemap_lookup_dbi</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dbi_name</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>silent</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <name>walk_dbi_t</name> <modifier>*</modifier></type><name>last</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>dbi_name</name> <operator>==</operator> <name>MDBX_PGWALK_MAIN</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><operator>&amp;</operator><name>dbi_main</name></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>dbi_name</name> <operator>==</operator> <name>MDBX_PGWALK_GC</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><operator>&amp;</operator><name>dbi_free</name></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>dbi_name</name> <operator>==</operator> <name>MDBX_PGWALK_META</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><operator>&amp;</operator><name>dbi_meta</name></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>last</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>last</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>dbi_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>last</name></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>walk_dbi_t</name> <modifier>*</modifier></type><name>dbi</name> <init>= <expr><name><name>walk</name><operator>.</operator><name>dbi</name></name> <operator>+</operator> <name>CORE_DBS</name> <operator>+</operator> <comment type="block">/* account pseudo-entry for meta */</comment> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init>;</init> <condition><expr><name>dbi</name> <operator>&lt;</operator> <call><name>ARRAY_END</name><argument_list>(<argument><expr><name><name>walk</name><operator>.</operator><name>dbi</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>dbi</name><operator>-&gt;</operator><name>name</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>dbi</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>dbi</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>dbi_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>last</name> <operator>=</operator> <name>dbi</name></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name>verbose</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>silent</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">" - found '%s' area\n"</literal></expr></argument>, <argument><expr><name>dbi_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>dbi</name> <operator>==</operator> <call><name>ARRAY_END</name><argument_list>(<argument><expr><name><name>walk</name><operator>.</operator><name>dbi</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>nullptr</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>dbi</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>mdbx_strdup</name><argument_list>(<argument><expr><name>dbi_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>last</name> <operator>=</operator> <name>dbi</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>MDBX_PRINTF_ARGS</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list>
    <name>problem_add</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>object</name></expr></argument>, <argument><expr><name>uint64_t</name> <name>entry_number</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>msg</name></expr></argument>,
                <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>extra</name></expr></argument>, <argument><expr><operator>...</operator></expr></argument>)</argument_list> <block>{<block_content>
  <expr_stmt><expr><name>total_problems</name><operator>++</operator></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>need_fflush</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>problem</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>problems_list</name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>pr_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
      <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>caption</name></name> <operator>==</operator> <name>msg</name></expr>)</condition><block type="pseudo"><block_content>
        <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mdbx_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>caption</name></name> <operator>=</operator> <name>msg</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pr_next</name></name> <operator>=</operator> <name>problems_list</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>problems_list</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>need_fflush</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>verbose</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"     %s #%"</literal> <name>PRIu64</name> <literal type="string">": %s"</literal></expr></argument>, <argument><expr><name>object</name></expr></argument>, <argument><expr><name>entry_number</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>extra</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" ("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>vfprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><name>extra</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>need_fflush</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>problem</name></name> <modifier>*</modifier></type><name>problems_push</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>problem</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>problems_list</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>problems_list</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
  <return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>problems_pop</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>problem</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>problems_list</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">" - problems: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>problems_list</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>problem</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>problems_list</name><operator>-&gt;</operator><name>pr_next</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>count</name> <operator>+=</operator> <name><name>problems_list</name><operator>-&gt;</operator><name>count</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"%s%s (%"</literal> <name>PRIuPTR</name> <literal type="string">")"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><literal type="string">", "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>problems_list</name><operator>-&gt;</operator><name>caption</name></name></expr></argument>,
            <argument><expr><name><name>problems_list</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>mdbx_free</name><argument_list>(<argument><expr><name>problems_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>problems_list</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>problems_list</name> <operator>=</operator> <name>list</name></expr>;</expr_stmt>
  <return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pgvisitor</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>pgno</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>pgnumber</name></decl></parameter>,
                     <parameter><decl><type><name>void</name> <modifier>*</modifier><specifier>const</specifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>deep</name></decl></parameter>,
                     <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>dbi_name_or_tag</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>page_size</name></decl></parameter>,
                     <parameter><decl><type><specifier>const</specifier> <name>MDBX_page_type_t</name></type> <name>pagetype</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>MDBX_error_t</name></type> <name>err</name></decl></parameter>,
                     <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>nentries</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>payload_bytes</name></decl></parameter>,
                     <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>header_bytes</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>unused_bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>ctx</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>is_gc_tree</name> <init>= <expr><name>dbi_name_or_tag</name> <operator>==</operator> <name>MDBX_PGWALK_GC</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>deep</name> <operator>&gt;</operator> <literal type="number">42</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>problem_add</name><argument_list>(<argument><expr><literal type="string">"deep"</literal></expr></argument>, <argument><expr><name>deep</name></expr></argument>, <argument><expr><literal type="string">"too large"</literal></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>data_tree_problems</name> <operator>+=</operator> <operator>!</operator><name>is_gc_tree</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>gc_tree_problems</name> <operator>+=</operator> <name>is_gc_tree</name></expr>;</expr_stmt>
    <return>return <expr><name>MDBX_CORRUPTED</name></expr> <comment type="block">/* avoid infinite loop/recursion */</comment>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>walk_dbi_t</name> <modifier>*</modifier></type><name>dbi</name> <init>= <expr><call><name>pagemap_lookup_dbi</name><argument_list>(<argument><expr><name>dbi_name_or_tag</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dbi</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>data_tree_problems</name> <operator>+=</operator> <operator>!</operator><name>is_gc_tree</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>gc_tree_problems</name> <operator>+=</operator> <name>is_gc_tree</name></expr>;</expr_stmt>
    <return>return <expr><name>MDBX_ENOMEM</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>page_bytes</name> <init>= <expr><name>payload_bytes</name> <operator>+</operator> <name>header_bytes</name> <operator>+</operator> <name>unused_bytes</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>walk</name><operator>.</operator><name>pgcount</name></name> <operator>+=</operator> <name>pgnumber</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pagetype_caption</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>branch</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name>pagetype</name></expr>)</condition> <block>{<block_content>
  <default>default:</default>
    <expr_stmt><expr><call><name>problem_add</name><argument_list>(<argument><expr><literal type="string">"page"</literal></expr></argument>, <argument><expr><name>pgno</name></expr></argument>, <argument><expr><literal type="string">"unknown page-type"</literal></expr></argument>, <argument><expr><literal type="string">"type %u, deep %i"</literal></expr></argument>,
                <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>pagetype</name></expr></argument>, <argument><expr><name>deep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pagetype_caption</name> <operator>=</operator> <literal type="string">"unknown"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dbi</name><operator>-&gt;</operator><name>pages</name><operator>.</operator><name>other</name></name> <operator>+=</operator> <name>pgnumber</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>data_tree_problems</name> <operator>+=</operator> <operator>!</operator><name>is_gc_tree</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>gc_tree_problems</name> <operator>+=</operator> <name>is_gc_tree</name></expr>;</expr_stmt>
    <break>break;</break>
  <case>case <expr><name>MDBX_page_broken</name></expr>:</case>
    <expr_stmt><expr><name>pagetype_caption</name> <operator>=</operator> <literal type="string">"broken"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dbi</name><operator>-&gt;</operator><name>pages</name><operator>.</operator><name>other</name></name> <operator>+=</operator> <name>pgnumber</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>data_tree_problems</name> <operator>+=</operator> <operator>!</operator><name>is_gc_tree</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>gc_tree_problems</name> <operator>+=</operator> <name>is_gc_tree</name></expr>;</expr_stmt>
    <break>break;</break>
  <case>case <expr><name>MDBX_subpage_broken</name></expr>:</case>
    <expr_stmt><expr><name>pagetype_caption</name> <operator>=</operator> <literal type="string">"broken-subpage"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>data_tree_problems</name> <operator>+=</operator> <operator>!</operator><name>is_gc_tree</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>gc_tree_problems</name> <operator>+=</operator> <name>is_gc_tree</name></expr>;</expr_stmt>
    <break>break;</break>
  <case>case <expr><name>MDBX_page_meta</name></expr>:</case>
    <expr_stmt><expr><name>pagetype_caption</name> <operator>=</operator> <literal type="string">"meta"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dbi</name><operator>-&gt;</operator><name>pages</name><operator>.</operator><name>other</name></name> <operator>+=</operator> <name>pgnumber</name></expr>;</expr_stmt>
    <break>break;</break>
  <case>case <expr><name>MDBX_page_large</name></expr>:</case>
    <expr_stmt><expr><name>pagetype_caption</name> <operator>=</operator> <literal type="string">"large"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dbi</name><operator>-&gt;</operator><name>pages</name><operator>.</operator><name>large_volume</name></name> <operator>+=</operator> <name>pgnumber</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dbi</name><operator>-&gt;</operator><name>pages</name><operator>.</operator><name>large_count</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <break>break;</break>
  <case>case <expr><name>MDBX_page_branch</name></expr>:</case>
    <expr_stmt><expr><name>pagetype_caption</name> <operator>=</operator> <literal type="string">"branch"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dbi</name><operator>-&gt;</operator><name>pages</name><operator>.</operator><name>branch</name></name> <operator>+=</operator> <name>pgnumber</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>branch</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <break>break;</break>
  <case>case <expr><name>MDBX_page_leaf</name></expr>:</case>
    <expr_stmt><expr><name>pagetype_caption</name> <operator>=</operator> <literal type="string">"leaf"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dbi</name><operator>-&gt;</operator><name>pages</name><operator>.</operator><name>leaf</name></name> <operator>+=</operator> <name>pgnumber</name></expr>;</expr_stmt>
    <break>break;</break>
  <case>case <expr><name>MDBX_page_dupfixed_leaf</name></expr>:</case>
    <expr_stmt><expr><name>pagetype_caption</name> <operator>=</operator> <literal type="string">"leaf-dupfixed"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dbi</name><operator>-&gt;</operator><name>pages</name><operator>.</operator><name>leaf_dupfixed</name></name> <operator>+=</operator> <name>pgnumber</name></expr>;</expr_stmt>
    <break>break;</break>
  <case>case <expr><name>MDBX_subpage_leaf</name></expr>:</case>
    <expr_stmt><expr><name>pagetype_caption</name> <operator>=</operator> <literal type="string">"subleaf-dupsort"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dbi</name><operator>-&gt;</operator><name>pages</name><operator>.</operator><name>subleaf_dupsort</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <break>break;</break>
  <case>case <expr><name>MDBX_subpage_dupfixed_leaf</name></expr>:</case>
    <expr_stmt><expr><name>pagetype_caption</name> <operator>=</operator> <literal type="string">"subleaf-dupfixed"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dbi</name><operator>-&gt;</operator><name>pages</name><operator>.</operator><name>subleaf_dupfixed</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <break>break;</break>
  </block_content>}</block></switch>

  <if_stmt><if>if <condition>(<expr><name>pgnumber</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>verbose</name> <operator>&gt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>only_subdb</name> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>only_subdb</name></expr></argument>, <argument><expr><name><name>dbi</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>pgnumber</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"     %s-page %"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><name>pagetype_caption</name></expr></argument>, <argument><expr><name>pgno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"     %s-span %"</literal> <name>PRIu64</name> <literal type="string">"[%u]"</literal></expr></argument>, <argument><expr><name>pagetype_caption</name></expr></argument>, <argument><expr><name>pgno</name></expr></argument>, <argument><expr><name>pgnumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
      <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">" of %s: header %"</literal> <name>PRIiPTR</name> <literal type="string">", %s %"</literal> <name>PRIiPTR</name> <literal type="string">", payload %"</literal> <name>PRIiPTR</name>
            <literal type="string">", unused %"</literal> <name>PRIiPTR</name> <literal type="string">", deep %i\n"</literal></expr></argument>,
            <argument><expr><name><name>dbi</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>header_bytes</name></expr></argument>,
            <argument><expr><ternary><condition><expr><operator>(</operator><name>pagetype</name> <operator>==</operator> <name>MDBX_page_branch</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"keys"</literal></expr> </then><else>: <expr><literal type="string">"entries"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>nentries</name></expr></argument>,
            <argument><expr><name>payload_bytes</name></expr></argument>, <argument><expr><name>unused_bytes</name></expr></argument>, <argument><expr><name>deep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>already_used</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>unsigned</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>pgnumber</name></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>uint64_t</name></type> <name>spanpgno</name> <init>= <expr><name>pgno</name> <operator>+</operator> <name>n</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>spanpgno</name> <operator>&gt;=</operator> <name>alloc_pages</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>problem_add</name><argument_list>(<argument><expr><literal type="string">"page"</literal></expr></argument>, <argument><expr><name>spanpgno</name></expr></argument>, <argument><expr><literal type="string">"wrong page-no"</literal></expr></argument>,
                    <argument><expr><literal type="string">"%s-page: %"</literal> <name>PRIu64</name> <literal type="string">" &gt; %"</literal> <name>PRIu64</name> <literal type="string">", deep %i"</literal></expr></argument>,
                    <argument><expr><name>pagetype_caption</name></expr></argument>, <argument><expr><name>spanpgno</name></expr></argument>, <argument><expr><name>alloc_pages</name></expr></argument>, <argument><expr><name>deep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>data_tree_problems</name> <operator>+=</operator> <operator>!</operator><name>is_gc_tree</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>gc_tree_problems</name> <operator>+=</operator> <name>is_gc_tree</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>walk</name><operator>.</operator><name>pagemap</name><index>[<expr><name>spanpgno</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>walk_dbi_t</name> <modifier>*</modifier></type><name>coll_dbi</name> <init>= <expr><operator>&amp;</operator><name><name>walk</name><operator>.</operator><name>dbi</name><index>[<expr><name><name>walk</name><operator>.</operator><name>pagemap</name><index>[<expr><name>spanpgno</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>problem_add</name><argument_list>(<argument><expr><literal type="string">"page"</literal></expr></argument>, <argument><expr><name>spanpgno</name></expr></argument>,
                    <argument><expr><ternary><condition><expr><operator>(</operator><name>branch</name> <operator>&amp;&amp;</operator> <name>coll_dbi</name> <operator>==</operator> <name>dbi</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"loop"</literal></expr> </then><else>: <expr><literal type="string">"already used"</literal></expr></else></ternary></expr></argument>,
                    <argument><expr><literal type="string">"%s-page: by %s, deep %i"</literal></expr></argument>, <argument><expr><name>pagetype_caption</name></expr></argument>, <argument><expr><name><name>coll_dbi</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
                    <argument><expr><name>deep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>already_used</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>data_tree_problems</name> <operator>+=</operator> <operator>!</operator><name>is_gc_tree</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>gc_tree_problems</name> <operator>+=</operator> <name>is_gc_tree</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>walk</name><operator>.</operator><name>pagemap</name><index>[<expr><name>spanpgno</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>short</name><operator>)</operator><operator>(</operator><name>dbi</name> <operator>-</operator> <name><name>walk</name><operator>.</operator><name>dbi</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dbi</name><operator>-&gt;</operator><name>pages</name><operator>.</operator><name>total</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>already_used</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><ternary><condition><expr><name>branch</name></expr> ?</condition><then> <expr><name>MDBX_RESULT_TRUE</name></expr> <comment type="block">/* avoid infinite loop/recursion */</comment>
                    </then><else>: <expr><name>MDBX_SUCCESS</name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>MDBX_IS_ERROR</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>problem_add</name><argument_list>(<argument><expr><literal type="string">"page"</literal></expr></argument>, <argument><expr><name>pgno</name></expr></argument>, <argument><expr><literal type="string">"invalid/corrupted"</literal></expr></argument>, <argument><expr><literal type="string">"%s-page"</literal></expr></argument>, <argument><expr><name>pagetype_caption</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>data_tree_problems</name> <operator>+=</operator> <operator>!</operator><name>is_gc_tree</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>gc_tree_problems</name> <operator>+=</operator> <name>is_gc_tree</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>unused_bytes</name> <operator>&gt;</operator> <name>page_size</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>problem_add</name><argument_list>(<argument><expr><literal type="string">"page"</literal></expr></argument>, <argument><expr><name>pgno</name></expr></argument>, <argument><expr><literal type="string">"illegal unused-bytes"</literal></expr></argument>,
                  <argument><expr><literal type="string">"%s-page: %u &lt; %"</literal> <name>PRIuPTR</name> <literal type="string">" &lt; %u"</literal></expr></argument>, <argument><expr><name>pagetype_caption</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                  <argument><expr><name>unused_bytes</name></expr></argument>, <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_dxb_pagesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>data_tree_problems</name> <operator>+=</operator> <operator>!</operator><name>is_gc_tree</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>gc_tree_problems</name> <operator>+=</operator> <name>is_gc_tree</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>header_bytes</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> <operator>||</operator>
        <operator>(</operator><name>size_t</name><operator>)</operator><name>header_bytes</name> <operator>&gt;=</operator> <name><name>envinfo</name><operator>.</operator><name>mi_dxb_pagesize</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>problem_add</name><argument_list>(<argument><expr><literal type="string">"page"</literal></expr></argument>, <argument><expr><name>pgno</name></expr></argument>, <argument><expr><literal type="string">"illegal header-length"</literal></expr></argument>,
                  <argument><expr><literal type="string">"%s-page: %"</literal> <name>PRIuPTR</name> <literal type="string">" &lt; %"</literal> <name>PRIuPTR</name> <literal type="string">" &lt; %"</literal> <name>PRIuPTR</name></expr></argument>,
                  <argument><expr><name>pagetype_caption</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>header_bytes</name></expr></argument>,
                  <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_dxb_pagesize</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>data_tree_problems</name> <operator>+=</operator> <operator>!</operator><name>is_gc_tree</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>gc_tree_problems</name> <operator>+=</operator> <name>is_gc_tree</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>payload_bytes</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>nentries</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>problem_add</name><argument_list>(<argument><expr><literal type="string">"page"</literal></expr></argument>, <argument><expr><name>pgno</name></expr></argument>, <argument><expr><literal type="string">"zero size-of-entry"</literal></expr></argument>,
                    <argument><expr><literal type="string">"%s-page: payload %"</literal> <name>PRIuPTR</name> <literal type="string">" bytes, %"</literal> <name>PRIuPTR</name> <literal type="string">" entries"</literal></expr></argument>,
                    <argument><expr><name>pagetype_caption</name></expr></argument>, <argument><expr><name>payload_bytes</name></expr></argument>, <argument><expr><name>nentries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* if ((size_t)header_bytes + unused_bytes &lt; page_size) {
          // LY: hush a misuse error
          page_bytes = page_size;
        } */</comment>
        <expr_stmt><expr><name>data_tree_problems</name> <operator>+=</operator> <operator>!</operator><name>is_gc_tree</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>gc_tree_problems</name> <operator>+=</operator> <name>is_gc_tree</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>problem_add</name><argument_list>(<argument><expr><literal type="string">"page"</literal></expr></argument>, <argument><expr><name>pgno</name></expr></argument>, <argument><expr><literal type="string">"empty"</literal></expr></argument>,
                    <argument><expr><literal type="string">"%s-page: payload %"</literal> <name>PRIuPTR</name> <literal type="string">" bytes, %"</literal> <name>PRIuPTR</name>
                    <literal type="string">" entries, deep %i"</literal></expr></argument>,
                    <argument><expr><name>pagetype_caption</name></expr></argument>, <argument><expr><name>payload_bytes</name></expr></argument>, <argument><expr><name>nentries</name></expr></argument>, <argument><expr><name>deep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dbi</name><operator>-&gt;</operator><name>pages</name><operator>.</operator><name>empty</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>data_tree_problems</name> <operator>+=</operator> <operator>!</operator><name>is_gc_tree</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>gc_tree_problems</name> <operator>+=</operator> <name>is_gc_tree</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>pgnumber</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>page_bytes</name> <operator>!=</operator> <name>page_size</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>problem_add</name><argument_list>(<argument><expr><literal type="string">"page"</literal></expr></argument>, <argument><expr><name>pgno</name></expr></argument>, <argument><expr><literal type="string">"misused"</literal></expr></argument>,
                    <argument><expr><literal type="string">"%s-page: %"</literal> <name>PRIuPTR</name> <literal type="string">" != %"</literal> <name>PRIuPTR</name> <literal type="string">" (%"</literal> <name>PRIuPTR</name>
                    <literal type="string">"h + %"</literal> <name>PRIuPTR</name> <literal type="string">"p + %"</literal> <name>PRIuPTR</name> <literal type="string">"u), deep %i"</literal></expr></argument>,
                    <argument><expr><name>pagetype_caption</name></expr></argument>, <argument><expr><name>page_size</name></expr></argument>, <argument><expr><name>page_bytes</name></expr></argument>, <argument><expr><name>header_bytes</name></expr></argument>,
                    <argument><expr><name>payload_bytes</name></expr></argument>, <argument><expr><name>unused_bytes</name></expr></argument>, <argument><expr><name>deep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>page_size</name> <operator>&gt;</operator> <name>page_bytes</name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><name><name>dbi</name><operator>-&gt;</operator><name>lost_bytes</name></name> <operator>+=</operator> <name>page_size</name> <operator>-</operator> <name>page_bytes</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>data_tree_problems</name> <operator>+=</operator> <operator>!</operator><name>is_gc_tree</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>gc_tree_problems</name> <operator>+=</operator> <name>is_gc_tree</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>dbi</name><operator>-&gt;</operator><name>payload_bytes</name></name> <operator>+=</operator> <name>payload_bytes</name> <operator>+</operator> <name>header_bytes</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>walk</name><operator>.</operator><name>total_payload_bytes</name></name> <operator>+=</operator> <name>payload_bytes</name> <operator>+</operator> <name>header_bytes</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><call><name>check_user_break</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <function_decl><type><name>int</name></type>(<name>visitor</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>record_number</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>MDBX_val</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
                     <parameter><decl><type><specifier>const</specifier> <name>MDBX_val</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>process_db</name><parameter_list>(<parameter><decl><type><name>MDBX_dbi</name></type> <name>dbi_handle</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dbi_name</name></decl></parameter>, <parameter><decl><type><name>visitor</name> <modifier>*</modifier></type><name>handler</name></decl></parameter>,
                      <parameter><decl><type><name>bool</name></type> <name>silent</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>handle_userdb</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>record_number</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>MDBX_val</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
                         <parameter><decl><type><specifier>const</specifier> <name>MDBX_val</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>record_number</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>key</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>
  <return>return <expr><call><name>check_user_break</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>handle_freedb</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>record_number</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>MDBX_val</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
                         <parameter><decl><type><specifier>const</specifier> <name>MDBX_val</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bad</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>pgno_t</name> <modifier>*</modifier></type><name>iptr</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>iov_base</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>iov_len</name></name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>txnid_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>problem_add</name><argument_list>(<argument><expr><literal type="string">"entry"</literal></expr></argument>, <argument><expr><name>record_number</name></expr></argument>, <argument><expr><literal type="string">"wrong txn-id size"</literal></expr></argument>,
                <argument><expr><literal type="string">"key-size %"</literal> <name>PRIiPTR</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>iov_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>txnid_t</name></type> <name>txnid</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>txnid</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>iov_base</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>txnid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>txnid</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>txnid</name></expr></argument> &gt;</argument_list></name> <name><name>envinfo</name><operator>.</operator><name>mi_recent_txnid</name></name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>problem_add</name><argument_list>(<argument><expr><literal type="string">"entry"</literal></expr></argument>, <argument><expr><name>record_number</name></expr></argument>, <argument><expr><literal type="string">"wrong txn-id"</literal></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRIaTXN</name></expr></argument>, <argument><expr><name>txnid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>iov_len</name></name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pgno_t</name></expr></argument>)</argument_list></sizeof> <operator>||</operator> <name><name>data</name><operator>-&gt;</operator><name>iov_len</name></name> <operator>%</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pgno_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>problem_add</name><argument_list>(<argument><expr><literal type="string">"entry"</literal></expr></argument>, <argument><expr><name>txnid</name></expr></argument>, <argument><expr><literal type="string">"wrong idl size"</literal></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRIuPTR</name></expr></argument>,
                    <argument><expr><name><name>data</name><operator>-&gt;</operator><name>iov_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <decl_stmt><decl><type><name>size_t</name></type> <name>number</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>iov_len</name></name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pgno_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr> ?</condition><then> <expr><operator>*</operator><name>iptr</name><operator>++</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>number</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>number</name></expr></argument> &gt;</argument_list></name> <name>MDBX_PGL_LIMIT</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>problem_add</name><argument_list>(<argument><expr><literal type="string">"entry"</literal></expr></argument>, <argument><expr><name>txnid</name></expr></argument>, <argument><expr><literal type="string">"wrong idl length"</literal></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRIuPTR</name></expr></argument>, <argument><expr><name>number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <if type="elseif">else if <condition>(<expr><operator>(</operator><name>number</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pgno_t</name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <name><name>data</name><operator>-&gt;</operator><name>iov_len</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>problem_add</name><argument_list>(<argument><expr><literal type="string">"entry"</literal></expr></argument>, <argument><expr><name>txnid</name></expr></argument>, <argument><expr><literal type="string">"trimmed idl"</literal></expr></argument>,
                    <argument><expr><literal type="string">"%"</literal> <name>PRIuSIZE</name> <literal type="string">" &gt; %"</literal> <name>PRIuSIZE</name> <literal type="string">" (corruption)"</literal></expr></argument>,
                    <argument><expr><operator>(</operator><name>number</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pgno_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>iov_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>number</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>iov_len</name></name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pgno_t</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>iov_len</name></name> <operator>-</operator> <operator>(</operator><name>number</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pgno_t</name></expr></argument>)</argument_list></sizeof> <operator>&gt;=</operator>
                 <comment type="block">/* LY: allow gap up to one page. it is ok
                  * and better than shink-and-retry inside mdbx_update_gc() */</comment>
                 <name><name>envinfo</name><operator>.</operator><name>mi_dxb_pagesize</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>problem_add</name><argument_list>(<argument><expr><literal type="string">"entry"</literal></expr></argument>, <argument><expr><name>txnid</name></expr></argument>, <argument><expr><literal type="string">"extra idl space"</literal></expr></argument>,
                    <argument><expr><literal type="string">"%"</literal> <name>PRIuSIZE</name> <literal type="string">" &lt; %"</literal> <name>PRIuSIZE</name> <literal type="string">" (minor, not a trouble)"</literal></expr></argument>,
                    <argument><expr><operator>(</operator><name>number</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pgno_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>iov_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

      <expr_stmt><expr><name>gc_pages</name> <operator>+=</operator> <name>number</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>envinfo</name><operator>.</operator><name>mi_latter_reader_txnid</name></name> <operator>&gt;</operator> <name>txnid</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>reclaimable_pages</name> <operator>+=</operator> <name>number</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

      <decl_stmt><decl><type><name>pgno_t</name></type> <name>prev</name> <init>= <expr><ternary><condition><expr><name>MDBX_PNL_ASCENDING</name></expr> ?</condition><then> <expr><name>NUM_METAS</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name><name>txn</name><operator>-&gt;</operator><name>mt_next_pgno</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>pgno_t</name></type> <name>span</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>number</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>check_user_break</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><name>MDBX_EINTR</name></expr>;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>pgno_t</name></type> <name>pgno</name> <init>= <expr><name><name>iptr</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>pgno</name> <operator>&lt;</operator> <name>NUM_METAS</name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><call><name>problem_add</name><argument_list>(<argument><expr><literal type="string">"entry"</literal></expr></argument>, <argument><expr><name>txnid</name></expr></argument>, <argument><expr><literal type="string">"wrong idl entry"</literal></expr></argument>,
                      <argument><expr><literal type="string">"pgno %"</literal> <name>PRIaPGNO</name> <literal type="string">" &lt; meta-pages %u"</literal></expr></argument>, <argument><expr><name>pgno</name></expr></argument>, <argument><expr><name>NUM_METAS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>pgno</name> <operator>&gt;=</operator> <name>backed_pages</name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><call><name>problem_add</name><argument_list>(<argument><expr><literal type="string">"entry"</literal></expr></argument>, <argument><expr><name>txnid</name></expr></argument>, <argument><expr><literal type="string">"wrong idl entry"</literal></expr></argument>,
                      <argument><expr><literal type="string">"pgno %"</literal> <name>PRIaPGNO</name> <literal type="string">" &gt; backed-pages %"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><name>pgno</name></expr></argument>,
                      <argument><expr><name>backed_pages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>pgno</name> <operator>&gt;=</operator> <name>alloc_pages</name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><call><name>problem_add</name><argument_list>(<argument><expr><literal type="string">"entry"</literal></expr></argument>, <argument><expr><name>txnid</name></expr></argument>, <argument><expr><literal type="string">"wrong idl entry"</literal></expr></argument>,
                      <argument><expr><literal type="string">"pgno %"</literal> <name>PRIaPGNO</name> <literal type="string">" &gt; alloc-pages %"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><name>pgno</name></expr></argument>,
                      <argument><expr><name>alloc_pages</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><call><name>MDBX_PNL_DISORDERED</name><argument_list>(<argument><expr><name>prev</name></expr></argument>, <argument><expr><name>pgno</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>bad</name> <operator>=</operator> <literal type="string">" [bad sequence]"</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>problem_add</name><argument_list>(<argument><expr><literal type="string">"entry"</literal></expr></argument>, <argument><expr><name>txnid</name></expr></argument>, <argument><expr><literal type="string">"bad sequence"</literal></expr></argument>,
                        <argument><expr><literal type="string">"%"</literal> <name>PRIaPGNO</name> <literal type="string">" %c [%u].%"</literal> <name>PRIaPGNO</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>,
                        <argument><expr><ternary><condition><expr><operator>(</operator><name>prev</name> <operator>==</operator> <name>pgno</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'='</literal></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name>MDBX_PNL_ASCENDING</name></expr> ?</condition><then> <expr><literal type="char">'&gt;'</literal></expr> </then><else>: <expr><literal type="char">'&lt;'</literal></expr></else></ternary><operator>)</operator></expr></else></ternary></expr></argument>,
                        <argument><expr><name>i</name></expr></argument>, <argument><expr><name>pgno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <if_stmt><if>if <condition>(<expr><name><name>walk</name><operator>.</operator><name>pagemap</name></name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><name><name>walk</name><operator>.</operator><name>pagemap</name><index>[<expr><name>pgno</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
              <expr_stmt><expr><name><name>walk</name><operator>.</operator><name>pagemap</name><index>[<expr><name>pgno</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><name>idx</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
              <expr_stmt><expr><call><name>problem_add</name><argument_list>(<argument><expr><literal type="string">"page"</literal></expr></argument>, <argument><expr><name>pgno</name></expr></argument>, <argument><expr><literal type="string">"already used"</literal></expr></argument>, <argument><expr><literal type="string">"by %s"</literal></expr></argument>,
                          <argument><expr><name><name>walk</name><operator>.</operator><name>dbi</name><index>[<expr><name>idx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
              <expr_stmt><expr><call><name>problem_add</name><argument_list>(<argument><expr><literal type="string">"page"</literal></expr></argument>, <argument><expr><name>pgno</name></expr></argument>, <argument><expr><literal type="string">"already listed in GC"</literal></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name>prev</name> <operator>=</operator> <name>pgno</name></expr>;</expr_stmt>
        <while>while <condition>(<expr><name>i</name> <operator>+</operator> <name>span</name> <operator>&lt;</operator> <name>number</name> <operator>&amp;&amp;</operator>
               <name><name>iptr</name><index>[<expr><name>i</name> <operator>+</operator> <name>span</name></expr>]</index></name> <operator>==</operator> <operator>(</operator><ternary><condition><expr><name>MDBX_PNL_ASCENDING</name></expr> ?</condition><then> <expr><call><name>pgno_add</name><argument_list>(<argument><expr><name>pgno</name></expr></argument>, <argument><expr><name>span</name></expr></argument>)</argument_list></call></expr>
                                                     </then><else>: <expr><call><name>pgno_sub</name><argument_list>(<argument><expr><name>pgno</name></expr></argument>, <argument><expr><name>span</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><operator>++</operator><name>span</name></expr>;</expr_stmt></block_content></block></while>
      </block_content>}</block></for>
      <if_stmt><if>if <condition>(<expr><name>verbose</name> <operator>&gt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>only_subdb</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"     transaction %"</literal> <name>PRIaTXN</name> <literal type="string">", %"</literal> <name>PRIuPTR</name>
              <literal type="string">" pages, maxspan %"</literal> <name>PRIaPGNO</name> <literal type="string">"%s\n"</literal></expr></argument>,
              <argument><expr><name>txnid</name></expr></argument>, <argument><expr><name>number</name></expr></argument>, <argument><expr><name>span</name></expr></argument>, <argument><expr><name>bad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>verbose</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
          <for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>number</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>span</name></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><specifier>const</specifier> <name>pgno_t</name></type> <name>pgno</name> <init>= <expr><name><name>iptr</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>span</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init>
                 <condition><expr><name>i</name> <operator>+</operator> <name>span</name> <operator>&lt;</operator> <name>number</name> <operator>&amp;&amp;</operator>
                 <name><name>iptr</name><index>[<expr><name>i</name> <operator>+</operator> <name>span</name></expr>]</index></name> <operator>==</operator> <operator>(</operator><ternary><condition><expr><name>MDBX_PNL_ASCENDING</name></expr> ?</condition><then> <expr><call><name>pgno_add</name><argument_list>(<argument><expr><name>pgno</name></expr></argument>, <argument><expr><name>span</name></expr></argument>)</argument_list></call></expr>
                                                       </then><else>: <expr><call><name>pgno_sub</name><argument_list>(<argument><expr><name>pgno</name></expr></argument>, <argument><expr><name>span</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</condition>
                 <incr><expr><operator>++</operator><name>span</name></expr></incr>)</control><block type="pseudo"><block_content>
              <empty_stmt>;</empty_stmt></block_content></block></for>
            <if_stmt><if>if <condition>(<expr><name>span</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"    %9"</literal> <name>PRIaPGNO</name> <literal type="string">"[%"</literal> <name>PRIaPGNO</name> <literal type="string">"]\n"</literal></expr></argument>, <argument><expr><name>pgno</name></expr></argument>, <argument><expr><name>span</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else<block type="pseudo"><block_content>
              <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"    %9"</literal> <name>PRIaPGNO</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>pgno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
          </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><call><name>check_user_break</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>equal_or_greater</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>MDBX_val</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>MDBX_val</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>iov_len</name></name> <operator>==</operator> <name><name>b</name><operator>-&gt;</operator><name>iov_len</name></name> <operator>&amp;&amp;</operator>
          <call><name>memcmp</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>iov_base</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>iov_base</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>iov_len</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>
             ?</condition><then> <expr><literal type="number">0</literal></expr>
             </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>handle_maindb</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>record_number</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>MDBX_val</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
                         <parameter><decl><type><specifier>const</specifier> <name>MDBX_val</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>iov_base</name></name></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>key</name><operator>-&gt;</operator><name>iov_len</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>name</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><call><name>handle_userdb</name><argument_list>(<argument><expr><name>record_number</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>mdbx_malloc</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>iov_len</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>MDBX_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>iov_base</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>iov_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>name</name><index>[<expr><name><name>key</name><operator>-&gt;</operator><name>iov_len</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>userdb_count</name><operator>++</operator></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>process_db</name><argument_list>(<argument><expr><operator>~</operator><literal type="number">0u</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>handle_userdb</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mdbx_free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>MDBX_INCOMPATIBLE</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><call><name>handle_userdb</name><argument_list>(<argument><expr><name>record_number</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>db_flags2keymode</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>(</operator><name>MDBX_REVERSEKEY</name> <operator>|</operator> <name>MDBX_INTEGERKEY</name><operator>)</operator></expr>;</expr_stmt>
  <switch>switch <condition>(<expr><name>flags</name></expr>)</condition> <block>{<block_content>
  <case>case <expr><literal type="number">0</literal></expr>:</case>
    <return>return <expr><literal type="string">"usual"</literal></expr>;</return>
  <case>case <expr><name>MDBX_REVERSEKEY</name></expr>:</case>
    <return>return <expr><literal type="string">"reserve"</literal></expr>;</return>
  <case>case <expr><name>MDBX_INTEGERKEY</name></expr>:</case>
    <return>return <expr><literal type="string">"ordinal"</literal></expr>;</return>
  <case>case <expr><name>MDBX_REVERSEKEY</name> <operator>|</operator> <name>MDBX_INTEGERKEY</name></expr>:</case>
    <return>return <expr><literal type="string">"msgpack"</literal></expr>;</return>
  <default>default:</default>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>__unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>db_flags2valuemode</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>(</operator><name>MDBX_DUPSORT</name> <operator>|</operator> <name>MDBX_REVERSEDUP</name> <operator>|</operator> <name>MDBX_DUPFIXED</name> <operator>|</operator> <name>MDBX_INTEGERDUP</name><operator>)</operator></expr>;</expr_stmt>
  <switch>switch <condition>(<expr><name>flags</name></expr>)</condition> <block>{<block_content>
  <case>case <expr><literal type="number">0</literal></expr>:</case>
    <return>return <expr><literal type="string">"single"</literal></expr>;</return>
  <case>case <expr><name>MDBX_DUPSORT</name></expr>:</case>
    <return>return <expr><literal type="string">"multi"</literal></expr>;</return>
  <case>case <expr><name>MDBX_REVERSEDUP</name></expr>:</case>
  <case>case <expr><name>MDBX_DUPSORT</name> <operator>|</operator> <name>MDBX_REVERSEDUP</name></expr>:</case>
    <return>return <expr><literal type="string">"multi-reverse"</literal></expr>;</return>
  <case>case <expr><name>MDBX_DUPFIXED</name></expr>:</case>
  <case>case <expr><name>MDBX_DUPSORT</name> <operator>|</operator> <name>MDBX_DUPFIXED</name></expr>:</case>
    <return>return <expr><literal type="string">"multi-samelength"</literal></expr>;</return>
  <case>case <expr><name>MDBX_DUPFIXED</name> <operator>|</operator> <name>MDBX_REVERSEDUP</name></expr>:</case>
  <case>case <expr><name>MDBX_DUPSORT</name> <operator>|</operator> <name>MDBX_DUPFIXED</name> <operator>|</operator> <name>MDBX_REVERSEDUP</name></expr>:</case>
    <return>return <expr><literal type="string">"multi-reverse-samelength"</literal></expr>;</return>
  <case>case <expr><name>MDBX_INTEGERDUP</name></expr>:</case>
  <case>case <expr><name>MDBX_DUPSORT</name> <operator>|</operator> <name>MDBX_INTEGERDUP</name></expr>:</case>
  <case>case <expr><name>MDBX_DUPSORT</name> <operator>|</operator> <name>MDBX_DUPFIXED</name> <operator>|</operator> <name>MDBX_INTEGERDUP</name></expr>:</case>
  <case>case <expr><name>MDBX_DUPFIXED</name> <operator>|</operator> <name>MDBX_INTEGERDUP</name></expr>:</case>
    <return>return <expr><literal type="string">"multi-ordinal"</literal></expr>;</return>
  <case>case <expr><name>MDBX_INTEGERDUP</name> <operator>|</operator> <name>MDBX_REVERSEDUP</name></expr>:</case>
  <case>case <expr><name>MDBX_DUPSORT</name> <operator>|</operator> <name>MDBX_INTEGERDUP</name> <operator>|</operator> <name>MDBX_REVERSEDUP</name></expr>:</case>
    <return>return <expr><literal type="string">"multi-msgpack"</literal></expr>;</return>
  <case>case <expr><name>MDBX_DUPFIXED</name> <operator>|</operator> <name>MDBX_INTEGERDUP</name> <operator>|</operator> <name>MDBX_REVERSEDUP</name></expr>:</case>
  <case>case <expr><name>MDBX_DUPSORT</name> <operator>|</operator> <name>MDBX_DUPFIXED</name> <operator>|</operator> <name>MDBX_INTEGERDUP</name> <operator>|</operator> <name>MDBX_REVERSEDUP</name></expr>:</case>
    <return>return <expr><literal type="string">"reserved"</literal></expr>;</return>
  <default>default:</default>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>__unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>process_db</name><parameter_list>(<parameter><decl><type><name>MDBX_dbi</name></type> <name>dbi_handle</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dbi_name</name></decl></parameter>, <parameter><decl><type><name>visitor</name> <modifier>*</modifier></type><name>handler</name></decl></parameter>,
                      <parameter><decl><type><name>bool</name></type> <name>silent</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>MDBX_cursor</name> <modifier>*</modifier></type><name>mc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MDBX_stat</name></type> <name>ms</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MDBX_val</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>data</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MDBX_val</name></type> <name>prev_key</name></decl>, <decl><type ref="prev"/><name>prev_data</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>flags</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>problem</name></name> <modifier>*</modifier></type><name>saved_list</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>problems_count</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>uint64_t</name></type> <name>record_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>dups</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>key_bytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>data_bytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>MDBX_TXN_FINISHED</name> <operator>|</operator> <name>MDBX_TXN_ERROR</name><operator>)</operator> <operator>&amp;</operator> <call><name>mdbx_txn_flags</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">" ! abort processing '%s' due to a previous error\n"</literal></expr></argument>,
          <argument><expr><ternary><condition><expr><name>dbi_name</name></expr> ?</condition><then> <expr><name>dbi_name</name></expr> </then><else>: <expr><literal type="string">"@MAIN"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>MDBX_BAD_TXN</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>dbi_handle</name> <operator>==</operator> <operator>~</operator><literal type="number">0u</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_dbi_open_ex</name><argument_list>(
        <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>dbi_name</name></expr></argument>, <argument><expr><name>MDBX_DB_ACCEDE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbi_handle</name></expr></argument>,
        <argument><expr><ternary><condition><expr><operator>(</operator><name>dbi_name</name> <operator>&amp;&amp;</operator> <name>ignore_wrong_order</name><operator>)</operator></expr> ?</condition><then> <expr><name>equal_or_greater</name></expr> </then><else>: <expr><name>nullptr</name></expr></else></ternary></expr></argument>,
        <argument><expr><ternary><condition><expr><operator>(</operator><name>dbi_name</name> <operator>&amp;&amp;</operator> <name>ignore_wrong_order</name><operator>)</operator></expr> ?</condition><then> <expr><name>equal_or_greater</name></expr> </then><else>: <expr><name>nullptr</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dbi_name</name> <operator>||</operator>
          <name>rc</name> <operator>!=</operator>
              <name>MDBX_INCOMPATIBLE</name></expr>)</condition> <comment type="block">/* LY: mainDB's record is not a user's DB. */</comment> <block>{<block_content>
        <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_dbi_open('%s') failed, error %d %s\n"</literal></expr></argument>,
              <argument><expr><ternary><condition><expr><name>dbi_name</name></expr> ?</condition><then> <expr><name>dbi_name</name></expr> </then><else>: <expr><literal type="string">"main"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>mdbx_strerror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><name>rc</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>dbi_handle</name> <operator>&gt;=</operator> <name>CORE_DBS</name> <operator>&amp;&amp;</operator> <name>dbi_name</name> <operator>&amp;&amp;</operator> <name>only_subdb</name> <operator>&amp;&amp;</operator>
      <call><name>strcmp</name><argument_list>(<argument><expr><name>only_subdb</name></expr></argument>, <argument><expr><name>dbi_name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Skip processing '%s'...\n"</literal></expr></argument>, <argument><expr><name>dbi_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>skipped_subdb</name><operator>++</operator></expr>;</expr_stmt>
    <return>return <expr><name>MDBX_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>silent</name> <operator>&amp;&amp;</operator> <name>verbose</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Processing '%s'...\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>dbi_name</name></expr> ?</condition><then> <expr><name>dbi_name</name></expr> </then><else>: <expr><literal type="string">"@MAIN"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_dbi_flags</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>dbi_handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_dbi_flags() failed, error %d %s\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>mdbx_strerror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_dbi_stat</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>dbi_handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ms</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_dbi_stat() failed, error %d %s\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>mdbx_strerror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>silent</name> <operator>&amp;&amp;</operator> <name>verbose</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">" - key-value kind: %s-key =&gt; %s-value"</literal></expr></argument>, <argument><expr><call><name>db_flags2keymode</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>,
          <argument><expr><call><name>db_flags2valuemode</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>verbose</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">", flags:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>flags</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">" none"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <else>else <block>{<block_content>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>dbflags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bit</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
          <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name><name>dbflags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bit</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><name><name>dbflags</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
      </block_content>}</block></else></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>verbose</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">" (0x%02X), dbi-id %d"</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>dbi_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ms</name><operator>.</operator><name>ms_mod_txnid</name></name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">" - last modification txn#%"</literal> <name>PRIu64</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>ms</name><operator>.</operator><name>ms_mod_txnid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>verbose</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">" - page size %u, entries %"</literal> <name>PRIu64</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>ms</name><operator>.</operator><name>ms_psize</name></name></expr></argument>,
            <argument><expr><name><name>ms</name><operator>.</operator><name>ms_entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">" - b-tree depth %u, pages: branch %"</literal> <name>PRIu64</name> <literal type="string">", leaf %"</literal> <name>PRIu64</name>
            <literal type="string">", overflow %"</literal> <name>PRIu64</name> <literal type="string">"\n"</literal></expr></argument>,
            <argument><expr><name><name>ms</name><operator>.</operator><name>ms_depth</name></name></expr></argument>, <argument><expr><name><name>ms</name><operator>.</operator><name>ms_branch_pages</name></name></expr></argument>, <argument><expr><name><name>ms</name><operator>.</operator><name>ms_leaf_pages</name></name></expr></argument>,
            <argument><expr><name><name>ms</name><operator>.</operator><name>ms_overflow_pages</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>walk_dbi_t</name> <modifier>*</modifier></type><name>dbi</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>dbi_handle</name> <operator>&lt;</operator> <name>CORE_DBS</name><operator>)</operator></expr>
                        ?</condition><then> <expr><operator>&amp;</operator><name><name>walk</name><operator>.</operator><name>dbi</name><index>[<expr><name>dbi_handle</name></expr>]</index></name></expr>
                        </then><else>: <expr><call><name>pagemap_lookup_dbi</name><argument_list>(<argument><expr><name>dbi_name</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dbi</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"too many DBIs or out of memory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>MDBX_ENOMEM</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dont_traversal</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>subtotal_pages</name> <init>=
        <expr><name><name>ms</name><operator>.</operator><name>ms_branch_pages</name></name> <operator>+</operator> <name><name>ms</name><operator>.</operator><name>ms_leaf_pages</name></name> <operator>+</operator> <name><name>ms</name><operator>.</operator><name>ms_overflow_pages</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>subtotal_pages</name> <operator>!=</operator> <name><name>dbi</name><operator>-&gt;</operator><name>pages</name><operator>.</operator><name>total</name></name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"%s pages mismatch (%"</literal> <name>PRIu64</name> <literal type="string">" != walked %"</literal> <name>PRIu64</name> <literal type="string">")\n"</literal></expr></argument>,
            <argument><expr><literal type="string">"subtotal"</literal></expr></argument>, <argument><expr><name>subtotal_pages</name></expr></argument>, <argument><expr><name><name>dbi</name><operator>-&gt;</operator><name>pages</name><operator>.</operator><name>total</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ms</name><operator>.</operator><name>ms_branch_pages</name></name> <operator>!=</operator> <name><name>dbi</name><operator>-&gt;</operator><name>pages</name><operator>.</operator><name>branch</name></name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"%s pages mismatch (%"</literal> <name>PRIu64</name> <literal type="string">" != walked %"</literal> <name>PRIu64</name> <literal type="string">")\n"</literal></expr></argument>, <argument><expr><literal type="string">"branch"</literal></expr></argument>,
            <argument><expr><name><name>ms</name><operator>.</operator><name>ms_branch_pages</name></name></expr></argument>, <argument><expr><name><name>dbi</name><operator>-&gt;</operator><name>pages</name><operator>.</operator><name>branch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>allleaf_pages</name> <init>= <expr><name><name>dbi</name><operator>-&gt;</operator><name>pages</name><operator>.</operator><name>leaf</name></name> <operator>+</operator> <name><name>dbi</name><operator>-&gt;</operator><name>pages</name><operator>.</operator><name>leaf_dupfixed</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ms</name><operator>.</operator><name>ms_leaf_pages</name></name> <operator>!=</operator> <name>allleaf_pages</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"%s pages mismatch (%"</literal> <name>PRIu64</name> <literal type="string">" != walked %"</literal> <name>PRIu64</name> <literal type="string">")\n"</literal></expr></argument>,
            <argument><expr><literal type="string">"all-leaf"</literal></expr></argument>, <argument><expr><name><name>ms</name><operator>.</operator><name>ms_leaf_pages</name></name></expr></argument>, <argument><expr><name>allleaf_pages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ms</name><operator>.</operator><name>ms_overflow_pages</name></name> <operator>!=</operator> <name><name>dbi</name><operator>-&gt;</operator><name>pages</name><operator>.</operator><name>large_volume</name></name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"%s pages mismatch (%"</literal> <name>PRIu64</name> <literal type="string">" != walked %"</literal> <name>PRIu64</name> <literal type="string">")\n"</literal></expr></argument>,
            <argument><expr><literal type="string">"large/overlow"</literal></expr></argument>, <argument><expr><name><name>ms</name><operator>.</operator><name>ms_overflow_pages</name></name></expr></argument>, <argument><expr><name><name>dbi</name><operator>-&gt;</operator><name>pages</name><operator>.</operator><name>large_volume</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_cursor_open</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>dbi_handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_cursor_open() failed, error %d %s\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>mdbx_strerror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>ignore_wrong_order</name></expr>)</condition> <block>{<block_content> <comment type="block">/* for debugging with enabled assertions */</comment>
    <expr_stmt><expr><name><name>mc</name><operator>-&gt;</operator><name>mc_flags</name></name> <operator>|=</operator> <name>C_SKIPORD</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>mc</name><operator>-&gt;</operator><name>mc_xcursor</name></name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name><name>mc</name><operator>-&gt;</operator><name>mc_xcursor</name><operator>-&gt;</operator><name>mx_cursor</name><operator>.</operator><name>mc_flags</name></name> <operator>|=</operator> <name>C_SKIPORD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>maxkeysize</name> <init>= <expr><call><name>mdbx_env_get_maxkeysize_ex</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>saved_list</name> <operator>=</operator> <call><name>problems_push</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>prev_key</name><operator>.</operator><name>iov_base</name></name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>prev_key</name><operator>.</operator><name>iov_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>prev_data</name><operator>.</operator><name>iov_base</name></name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>prev_data</name><operator>.</operator><name>iov_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_cursor_get</name><argument_list>(<argument><expr><name>mc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>MDBX_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>rc</name> <operator>==</operator> <name>MDBX_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>check_user_break</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition><block type="pseudo"><block_content>
      <goto>goto <name>bailout</name>;</goto></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>bad_key</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>key</name><operator>.</operator><name>iov_len</name></name> <operator>&gt;</operator> <name>maxkeysize</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>problem_add</name><argument_list>(<argument><expr><literal type="string">"entry"</literal></expr></argument>, <argument><expr><name>record_count</name></expr></argument>, <argument><expr><literal type="string">"key length exceeds max-key-size"</literal></expr></argument>,
                  <argument><expr><literal type="string">"%"</literal> <name>PRIuPTR</name> <literal type="string">" &gt; %"</literal> <name>PRIuPTR</name></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>iov_len</name></name></expr></argument>, <argument><expr><name>maxkeysize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>bad_key</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MDBX_INTEGERKEY</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>key</name><operator>.</operator><name>iov_len</name></name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof> <operator>&amp;&amp;</operator>
               <name><name>key</name><operator>.</operator><name>iov_len</name></name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>problem_add</name><argument_list>(<argument><expr><literal type="string">"entry"</literal></expr></argument>, <argument><expr><name>record_count</name></expr></argument>, <argument><expr><literal type="string">"wrong key length"</literal></expr></argument>,
                  <argument><expr><literal type="string">"%"</literal> <name>PRIuPTR</name> <literal type="string">" != 4or8"</literal></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>iov_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>bad_key</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>bad_data</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MDBX_INTEGERDUP</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>data</name><operator>.</operator><name>iov_len</name></name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof> <operator>&amp;&amp;</operator>
        <name><name>data</name><operator>.</operator><name>iov_len</name></name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>problem_add</name><argument_list>(<argument><expr><literal type="string">"entry"</literal></expr></argument>, <argument><expr><name>record_count</name></expr></argument>, <argument><expr><literal type="string">"wrong data length"</literal></expr></argument>,
                  <argument><expr><literal type="string">"%"</literal> <name>PRIuPTR</name> <literal type="string">" != 4or8"</literal></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>iov_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>bad_data</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>prev_key</name><operator>.</operator><name>iov_base</name></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>prev_data</name><operator>.</operator><name>iov_base</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>bad_data</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MDBX_DUPFIXED</name><operator>)</operator> <operator>&amp;&amp;</operator>
          <name><name>prev_data</name><operator>.</operator><name>iov_len</name></name> <operator>!=</operator> <name><name>data</name><operator>.</operator><name>iov_len</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>problem_add</name><argument_list>(<argument><expr><literal type="string">"entry"</literal></expr></argument>, <argument><expr><name>record_count</name></expr></argument>, <argument><expr><literal type="string">"different data length"</literal></expr></argument>,
                    <argument><expr><literal type="string">"%"</literal> <name>PRIuPTR</name> <literal type="string">" != %"</literal> <name>PRIuPTR</name></expr></argument>, <argument><expr><name><name>prev_data</name><operator>.</operator><name>iov_len</name></name></expr></argument>,
                    <argument><expr><name><name>data</name><operator>.</operator><name>iov_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>bad_data</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>bad_key</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>cmp</name> <init>= <expr><call><name>mdbx_cmp</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>dbi_handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prev_key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><operator>++</operator><name>dups</name></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MDBX_DUPSORT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>problem_add</name><argument_list>(<argument><expr><literal type="string">"entry"</literal></expr></argument>, <argument><expr><name>record_count</name></expr></argument>, <argument><expr><literal type="string">"duplicated entries"</literal></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>prev_data</name><operator>.</operator><name>iov_base</name></name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>.</operator><name>iov_len</name></name> <operator>==</operator> <name><name>prev_data</name><operator>.</operator><name>iov_len</name></name> <operator>&amp;&amp;</operator>
                <call><name>memcmp</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>iov_base</name></name></expr></argument>, <argument><expr><name><name>prev_data</name><operator>.</operator><name>iov_base</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>iov_len</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><call><name>problem_add</name><argument_list>(<argument><expr><literal type="string">"entry"</literal></expr></argument>, <argument><expr><name>record_count</name></expr></argument>, <argument><expr><literal type="string">"complete duplicate"</literal></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>bad_data</name> <operator>&amp;&amp;</operator> <name><name>prev_data</name><operator>.</operator><name>iov_base</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>cmp</name> <operator>=</operator> <call><name>mdbx_dcmp</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>dbi_handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prev_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><call><name>problem_add</name><argument_list>(<argument><expr><literal type="string">"entry"</literal></expr></argument>, <argument><expr><name>record_count</name></expr></argument>, <argument><expr><literal type="string">"complete duplicate"</literal></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cmp</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>ignore_wrong_order</name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><call><name>problem_add</name><argument_list>(<argument><expr><literal type="string">"entry"</literal></expr></argument>, <argument><expr><name>record_count</name></expr></argument>, <argument><expr><literal type="string">"wrong order of multi-values"</literal></expr></argument>,
                          <argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cmp</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>ignore_wrong_order</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>problem_add</name><argument_list>(<argument><expr><literal type="string">"entry"</literal></expr></argument>, <argument><expr><name>record_count</name></expr></argument>, <argument><expr><literal type="string">"wrong order of entries"</literal></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>handler</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>handler</name><argument_list>(<argument><expr><name>record_count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>MDBX_IS_ERROR</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>bailout</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>record_count</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>key_bytes</name> <operator>+=</operator> <name><name>key</name><operator>.</operator><name>iov_len</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>data_bytes</name> <operator>+=</operator> <name><name>data</name><operator>.</operator><name>iov_len</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>bad_key</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>verbose</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MDBX_INTEGERKEY</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>prev_key</name><operator>.</operator><name>iov_base</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">" - fixed key-size %"</literal> <name>PRIuPTR</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>iov_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>prev_key</name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>bad_data</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>verbose</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>MDBX_INTEGERDUP</name> <operator>|</operator> <name>MDBX_DUPFIXED</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
          <operator>!</operator><name><name>prev_data</name><operator>.</operator><name>iov_base</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">" - fixed data-size %"</literal> <name>PRIuPTR</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>iov_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>prev_data</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_cursor_get</name><argument_list>(<argument><expr><name>mc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>MDBX_NEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>MDBX_NOTFOUND</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_cursor_get() failed, error %d %s\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>mdbx_strerror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>record_count</name> <operator>!=</operator> <name><name>ms</name><operator>.</operator><name>ms_entries</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>problem_add</name><argument_list>(<argument><expr><literal type="string">"entry"</literal></expr></argument>, <argument><expr><name>record_count</name></expr></argument>, <argument><expr><literal type="string">"different number of entries"</literal></expr></argument>,
                <argument><expr><literal type="string">"%"</literal> <name>PRIu64</name> <literal type="string">" != %"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><name>record_count</name></expr></argument>, <argument><expr><name><name>ms</name><operator>.</operator><name>ms_entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<label><name>bailout</name>:</label>
  <expr_stmt><expr><name>problems_count</name> <operator>=</operator> <call><name>problems_pop</name><argument_list>(<argument><expr><name>saved_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>silent</name> <operator>&amp;&amp;</operator> <name>verbose</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">" - summary: %"</literal> <name>PRIu64</name> <literal type="string">" records, %"</literal> <name>PRIu64</name> <literal type="string">" dups, %"</literal> <name>PRIu64</name>
          <literal type="string">" key's bytes, %"</literal> <name>PRIu64</name> <literal type="string">" data's "</literal>
          <literal type="string">"bytes, %"</literal> <name>PRIu64</name> <literal type="string">" problems\n"</literal></expr></argument>,
          <argument><expr><name>record_count</name></expr></argument>, <argument><expr><name>dups</name></expr></argument>, <argument><expr><name>key_bytes</name></expr></argument>, <argument><expr><name>data_bytes</name></expr></argument>, <argument><expr><name>problems_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>mdbx_cursor_close</name><argument_list>(<argument><expr><name>mc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><ternary><condition><expr><operator>(</operator><name>rc</name> <operator>||</operator> <name>problems_count</name><operator>)</operator></expr> ?</condition><then> <expr><name>MDBX_RESULT_TRUE</name></expr> </then><else>: <expr><name>MDBX_SUCCESS</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>usage</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>prog</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
          <argument><expr><literal type="string">"usage: %s [-V] [-v] [-q] [-c] [-0|1|2] [-w] [-d] [-i] [-s subdb] "</literal>
          <literal type="string">"dbpath\n"</literal>
          <literal type="string">"  -V\t\tprint version and exit\n"</literal>
          <literal type="string">"  -v\t\tmore verbose, could be used multiple times\n"</literal>
          <literal type="string">"  -q\t\tbe quiet\n"</literal>
          <literal type="string">"  -c\t\tforce cooperative mode (don't try exclusive)\n"</literal>
          <literal type="string">"  -w\t\twrite-mode checking\n"</literal>
          <literal type="string">"  -d\t\tdisable page-by-page traversal of B-tree\n"</literal>
          <literal type="string">"  -i\t\tignore wrong order errors (for custom comparators case)\n"</literal>
          <literal type="string">"  -s subdb\tprocess a specific subdatabase only\n"</literal>
          <literal type="string">"  -0|1|2\tforce using specific meta-page 0, or 2 for checking\n"</literal>
          <literal type="string">"  -t\t\tturn to a specified meta-page on successful check\n"</literal>
          <literal type="string">"  -T\t\tturn to a specified meta-page EVEN ON UNSUCCESSFUL CHECK!\n"</literal></expr></argument>,
          <argument><expr><name>prog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_INTERRUPTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>meta_ot</name><parameter_list>(<parameter><decl><type><name>txnid_t</name></type> <name>txn_a</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>sign_a</name></decl></parameter>, <parameter><decl><type><name>txnid_t</name></type> <name>txn_b</name></decl></parameter>,
                    <parameter><decl><type><name>uint64_t</name></type> <name>sign_b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>wanna_steady</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>txn_a</name> <operator>==</operator> <name>txn_b</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>SIGN_IS_STEADY</name><argument_list>(<argument><expr><name>sign_b</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>wanna_steady</name> <operator>&amp;&amp;</operator> <call><name>SIGN_IS_STEADY</name><argument_list>(<argument><expr><name>sign_a</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>SIGN_IS_STEADY</name><argument_list>(<argument><expr><name>sign_b</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>SIGN_IS_STEADY</name><argument_list>(<argument><expr><name>sign_b</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><name>txn_a</name> <operator>&lt;</operator> <name>txn_b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>meta_eq</name><parameter_list>(<parameter><decl><type><name>txnid_t</name></type> <name>txn_a</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>sign_a</name></decl></parameter>, <parameter><decl><type><name>txnid_t</name></type> <name>txn_b</name></decl></parameter>,
                    <parameter><decl><type><name>uint64_t</name></type> <name>sign_b</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>txn_a</name> <operator>||</operator> <name>txn_a</name> <operator>!=</operator> <name>txn_b</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>SIGN_IS_STEADY</name><argument_list>(<argument><expr><name>sign_a</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>SIGN_IS_STEADY</name><argument_list>(<argument><expr><name>sign_b</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>meta_recent</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>wanna_steady</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>meta_ot</name><argument_list>(<argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_meta0_txnid</name></name></expr></argument>, <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_meta0_sign</name></name></expr></argument>,
              <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_meta1_txnid</name></name></expr></argument>, <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_meta1_sign</name></name></expr></argument>, <argument><expr><name>wanna_steady</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><ternary><condition><expr><call><name>meta_ot</name><argument_list>(<argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_meta2_txnid</name></name></expr></argument>, <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_meta2_sign</name></name></expr></argument>,
                   <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_meta1_txnid</name></name></expr></argument>, <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_meta1_sign</name></name></expr></argument>, <argument><expr><name>wanna_steady</name></expr></argument>)</argument_list></call></expr>
               ?</condition><then> <expr><literal type="number">1</literal></expr>
               </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</return></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <return>return <expr><ternary><condition><expr><call><name>meta_ot</name><argument_list>(<argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_meta0_txnid</name></name></expr></argument>, <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_meta0_sign</name></name></expr></argument>,
                   <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_meta2_txnid</name></name></expr></argument>, <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_meta2_sign</name></name></expr></argument>, <argument><expr><name>wanna_steady</name></expr></argument>)</argument_list></call></expr>
               ?</condition><then> <expr><literal type="number">2</literal></expr>
               </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>meta_tail</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>head</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>head</name></expr>)</condition> <block>{<block_content>
  <case>case <expr><literal type="number">0</literal></expr>:</case>
    <return>return <expr><ternary><condition><expr><call><name>meta_ot</name><argument_list>(<argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_meta1_txnid</name></name></expr></argument>, <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_meta1_sign</name></name></expr></argument>,
                   <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_meta2_txnid</name></name></expr></argument>, <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_meta2_sign</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>
               ?</condition><then> <expr><literal type="number">1</literal></expr>
               </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</return>
  <case>case <expr><literal type="number">1</literal></expr>:</case>
    <return>return <expr><ternary><condition><expr><call><name>meta_ot</name><argument_list>(<argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_meta0_txnid</name></name></expr></argument>, <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_meta0_sign</name></name></expr></argument>,
                   <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_meta2_txnid</name></name></expr></argument>, <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_meta2_sign</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>
               ?</condition><then> <expr><literal type="number">0</literal></expr>
               </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</return>
  <case>case <expr><literal type="number">2</literal></expr>:</case>
    <return>return <expr><ternary><condition><expr><call><name>meta_ot</name><argument_list>(<argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_meta0_txnid</name></name></expr></argument>, <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_meta0_sign</name></name></expr></argument>,
                   <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_meta1_txnid</name></name></expr></argument>, <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_meta1_sign</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>
               ?</condition><then> <expr><literal type="number">0</literal></expr>
               </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
  <default>default:</default>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>meta_head</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>meta_recent</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name></type> <name>verbose_meta</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>txnid_t</name></type> <name>txnid</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>bootid_x</name></decl></parameter>,
                  <parameter><decl><type><name>uint64_t</name></type> <name>bootid_y</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>have_bootid</name> <init>= <expr><operator>(</operator><name>bootid_x</name> <operator>|</operator> <name>bootid_y</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>bootid_match</name> <init>= <expr><name>bootid_x</name> <operator>==</operator> <name><name>envinfo</name><operator>.</operator><name>mi_bootid</name><operator>.</operator><name>current</name><operator>.</operator><name>x</name></name> <operator>&amp;&amp;</operator>
                            <name>bootid_y</name> <operator>==</operator> <name><name>envinfo</name><operator>.</operator><name>mi_bootid</name><operator>.</operator><name>current</name><operator>.</operator><name>y</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">" - meta-%d: "</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <switch>switch <condition>(<expr><name>sign</name></expr>)</condition> <block>{<block_content>
  <case>case <expr><name>MDBX_DATASIGN_NONE</name></expr>:</case>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"no-sync/legacy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  <case>case <expr><name>MDBX_DATASIGN_WEAK</name></expr>:</case>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"weak-%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>bootid_match</name></expr> ?</condition><then> <expr><operator>(</operator><ternary><condition><expr><name>have_bootid</name></expr> ?</condition><then> <expr><literal type="string">"intact (same boot-id)"</literal></expr>
                                                 </then><else>: <expr><literal type="string">"unknown (no boot-id"</literal></expr></else></ternary><operator>)</operator></expr>
                                  </then><else>: <expr><literal type="string">"dead"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  <default>default:</default>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"steady"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  </block_content>}</block></switch>
  <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">" txn#%"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><name>txnid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>head</name> <init>= <expr><call><name>meta_head</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>num</name> <operator>==</operator> <name>head</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">", head"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><name>num</name> <operator>==</operator> <call><name>meta_tail</name><argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">", tail"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">", stay"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>stuck_meta</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>num</name> <operator>==</operator> <name>stuck_meta</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">", forced for checking"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>txnid</name> <operator>&gt;</operator> <name><name>envinfo</name><operator>.</operator><name>mi_recent_txnid</name></name> <operator>&amp;&amp;</operator>
             <operator>(</operator><name>envflags</name> <operator>&amp;</operator> <operator>(</operator><name>MDBX_EXCLUSIVE</name> <operator>|</operator> <name>MDBX_RDONLY</name><operator>)</operator><operator>)</operator> <operator>==</operator> <name>MDBX_EXCLUSIVE</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">", rolled-back %"</literal> <name>PRIu64</name> <literal type="string">" (%"</literal> <name>PRIu64</name> <literal type="string">" &gt;&gt;&gt; %"</literal> <name>PRIu64</name> <literal type="string">")"</literal></expr></argument>,
          <argument><expr><name>txnid</name> <operator>-</operator> <name><name>envinfo</name><operator>.</operator><name>mi_recent_txnid</name></name></expr></argument>, <argument><expr><name>txnid</name></expr></argument>, <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_recent_txnid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>get_meta_txnid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>meta_id</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>meta_id</name></expr>)</condition> <block>{<block_content>
  <default>default:</default>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"unexpected meta_id %u\n"</literal></expr></argument>, <argument><expr><name>meta_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  <case>case <expr><literal type="number">0</literal></expr>:</case>
    <return>return <expr><name><name>envinfo</name><operator>.</operator><name>mi_meta0_txnid</name></name></expr>;</return>
  <case>case <expr><literal type="number">1</literal></expr>:</case>
    <return>return <expr><name><name>envinfo</name><operator>.</operator><name>mi_meta1_txnid</name></name></expr>;</return>
  <case>case <expr><literal type="number">2</literal></expr>:</case>
    <return>return <expr><name><name>envinfo</name><operator>.</operator><name>mi_meta2_txnid</name></name></expr>;</return>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>value</name></decl></parameter>,
                       <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>suffix</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>sf</name><index>[]</index></name> <init>=
      <expr><literal type="string">"KMGTPEZY"</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* LY: Kilo, Mega, Giga, Tera, Peta, Exa, Zetta, Yotta! */</comment>
  <decl_stmt><decl><type><name>double</name></type> <name>k</name> <init>= <expr><literal type="number">1024.0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>sf</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name>value</name> <operator>/</operator> <name>k</name> <operator>&gt;</operator> <literal type="number">1000.0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name>k</name> <operator>*=</operator> <literal type="number">1024</literal></expr>;</expr_stmt></block_content></block></for>
  <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"%s%"</literal> <name>PRIu64</name> <literal type="string">" (%.2f %cb)%s"</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>value</name> <operator>/</operator> <name>k</name></expr></argument>, <argument><expr><name><name>sf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>prog</name> <init>= <expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>envname</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>problems_maindb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>problems_freedb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>problems_meta</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>write_locked</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>turn_meta</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>force_turn_meta</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>double</name></type> <name>elapsed</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>timestamp_start</name></decl>, <decl><type ref="prev"/><name>timestamp_finish</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>timestamp_start</name> <operator>=</operator> <call><name>GetMilliseconds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>timestamp_start</name></decl>, <decl><type ref="prev"/><name>timestamp_finish</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>clock_gettime</name><argument_list>(<argument><expr><name>CLOCK_MONOTONIC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timestamp_start</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"clock_gettime() failed, error %d %s\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>mdbx_strerror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>EXIT_FAILURE_SYS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><name><name>dbi_meta</name><operator>.</operator><name>name</name></name> <operator>=</operator> <literal type="string">"@META"</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dbi_free</name><operator>.</operator><name>name</name></name> <operator>=</operator> <literal type="string">"@GC"</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dbi_main</name><operator>.</operator><name>name</name></name> <operator>=</operator> <literal type="string">"@MAIN"</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>atexit</name><argument_list>(<argument><expr><name>pagemap_cleanup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name>prog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name></decl>;</init> <condition><expr><operator>(</operator><name>i</name> <operator>=</operator> <call><name>getopt</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>,
                          <argument><expr><literal type="string">"0"</literal>
                          <literal type="string">"1"</literal>
                          <literal type="string">"2"</literal>
                          <literal type="string">"T"</literal>
                          <literal type="string">"V"</literal>
                          <literal type="string">"v"</literal>
                          <literal type="string">"q"</literal>
                          <literal type="string">"n"</literal>
                          <literal type="string">"w"</literal>
                          <literal type="string">"c"</literal>
                          <literal type="string">"t"</literal>
                          <literal type="string">"d"</literal>
                          <literal type="string">"i"</literal>
                          <literal type="string">"s:"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>EOF</name></expr>;</condition><incr/>)</control> <block>{<block_content>
    <switch>switch <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="char">'V'</literal></expr>:</case>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"mdbx_chk version %d.%d.%d.%d\n"</literal>
             <literal type="string">" - source: %s %s, commit %s, tree %s\n"</literal>
             <literal type="string">" - anchor: %s\n"</literal>
             <literal type="string">" - build: %s for %s by %s\n"</literal>
             <literal type="string">" - flags: %s\n"</literal>
             <literal type="string">" - options: %s\n"</literal></expr></argument>,
             <argument><expr><name><name>mdbx_version</name><operator>.</operator><name>major</name></name></expr></argument>, <argument><expr><name><name>mdbx_version</name><operator>.</operator><name>minor</name></name></expr></argument>, <argument><expr><name><name>mdbx_version</name><operator>.</operator><name>release</name></name></expr></argument>,
             <argument><expr><name><name>mdbx_version</name><operator>.</operator><name>revision</name></name></expr></argument>, <argument><expr><name><name>mdbx_version</name><operator>.</operator><name>git</name><operator>.</operator><name>describe</name></name></expr></argument>,
             <argument><expr><name><name>mdbx_version</name><operator>.</operator><name>git</name><operator>.</operator><name>datetime</name></name></expr></argument>, <argument><expr><name><name>mdbx_version</name><operator>.</operator><name>git</name><operator>.</operator><name>commit</name></name></expr></argument>,
             <argument><expr><name><name>mdbx_version</name><operator>.</operator><name>git</name><operator>.</operator><name>tree</name></name></expr></argument>, <argument><expr><name>mdbx_sourcery_anchor</name></expr></argument>, <argument><expr><name><name>mdbx_build</name><operator>.</operator><name>datetime</name></name></expr></argument>,
             <argument><expr><name><name>mdbx_build</name><operator>.</operator><name>target</name></name></expr></argument>, <argument><expr><name><name>mdbx_build</name><operator>.</operator><name>compiler</name></name></expr></argument>, <argument><expr><name><name>mdbx_build</name><operator>.</operator><name>flags</name></name></expr></argument>,
             <argument><expr><name><name>mdbx_build</name><operator>.</operator><name>options</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>EXIT_SUCCESS</name></expr>;</return>
    <case>case <expr><literal type="char">'v'</literal></expr>:</case>
      <expr_stmt><expr><name>verbose</name><operator>++</operator></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'0'</literal></expr>:</case>
      <expr_stmt><expr><name>stuck_meta</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'1'</literal></expr>:</case>
      <expr_stmt><expr><name>stuck_meta</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'2'</literal></expr>:</case>
      <expr_stmt><expr><name>stuck_meta</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'t'</literal></expr>:</case>
      <expr_stmt><expr><name>turn_meta</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'T'</literal></expr>:</case>
      <expr_stmt><expr><name>turn_meta</name> <operator>=</operator> <name>force_turn_meta</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>quiet</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>verbose</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>verbose</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'q'</literal></expr>:</case>
      <expr_stmt><expr><name>quiet</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'n'</literal></expr>:</case>
      <break>break;</break>
    <case>case <expr><literal type="char">'w'</literal></expr>:</case>
      <expr_stmt><expr><name>envflags</name> <operator>&amp;=</operator> <operator>~</operator><name>MDBX_RDONLY</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MDBX_MMAP_INCOHERENT_FILE_WRITE</name></expr></cpp:if>
      <comment type="block">/* Temporary `workaround` for OpenBSD kernel's flaw.
       * See https://github.com/erthink/libmdbx/issues/67 */</comment>
      <expr_stmt><expr><name>envflags</name> <operator>|=</operator> <name>MDBX_WRITEMAP</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MDBX_MMAP_INCOHERENT_FILE_WRITE */</comment>
      <break>break;</break>
    <case>case <expr><literal type="char">'c'</literal></expr>:</case>
      <expr_stmt><expr><name>envflags</name> <operator>=</operator> <operator>(</operator><name>envflags</name> <operator>&amp;</operator> <operator>~</operator><name>MDBX_EXCLUSIVE</name><operator>)</operator> <operator>|</operator> <name>MDBX_ACCEDE</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'d'</literal></expr>:</case>
      <expr_stmt><expr><name>dont_traversal</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'s'</literal></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>only_subdb</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>only_subdb</name></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name>prog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>only_subdb</name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'i'</literal></expr>:</case>
      <expr_stmt><expr><name>ignore_wrong_order</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name>prog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name>optind</name> <operator>!=</operator> <name>argc</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name>prog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>MDBX_SUCCESS</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>stuck_meta</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>envflags</name> <operator>&amp;</operator> <name>MDBX_EXCLUSIVE</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"exclusive mode is required to using specific meta-page(%d) for "</literal>
          <literal type="string">"checking.\n"</literal></expr></argument>,
          <argument><expr><name>stuck_meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>EXIT_INTERRUPTED</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>turn_meta</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>stuck_meta</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"meta-page must be specified (by -0, -1 or -2 options) to turn to "</literal>
            <literal type="string">"it.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>EXIT_INTERRUPTED</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>envflags</name> <operator>&amp;</operator> <name>MDBX_RDONLY</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"write-mode must be enabled to turn to the specified meta-page.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>EXIT_INTERRUPTED</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>only_subdb</name> <operator>||</operator> <name>dont_traversal</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"whole database checking with tree-traversal are required to turn "</literal>
            <literal type="string">"to the specified meta-page.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>EXIT_INTERRUPTED</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name>SetConsoleCtrlHandler</name><argument_list>(<argument><expr><name>ConsoleBreakHandlerRoutine</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SIGPIPE</name></cpp:ifdef>
  <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>, <argument><expr><name>signal_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SIGHUP</name></cpp:ifdef>
  <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>, <argument><expr><name>signal_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>signal_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><name>signal_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !WINDOWS */</comment>

  <expr_stmt><expr><name>envname</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>optind</name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"mdbx_chk %s (%s, T-%s)\nRunning for %s in 'read-%s' mode...\n"</literal></expr></argument>,
        <argument><expr><name><name>mdbx_version</name><operator>.</operator><name>git</name><operator>.</operator><name>describe</name></name></expr></argument>, <argument><expr><name><name>mdbx_version</name><operator>.</operator><name>git</name><operator>.</operator><name>datetime</name></name></expr></argument>,
        <argument><expr><name><name>mdbx_version</name><operator>.</operator><name>git</name><operator>.</operator><name>tree</name></name></expr></argument>, <argument><expr><name>envname</name></expr></argument>,
        <argument><expr><ternary><condition><expr><operator>(</operator><name>envflags</name> <operator>&amp;</operator> <name>MDBX_RDONLY</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"only"</literal></expr> </then><else>: <expr><literal type="string">"write"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mdbx_setup_debug</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>verbose</name> <operator>&lt;</operator> <name>MDBX_LOG_TRACE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>
                       ?</condition><then> <expr><operator>(</operator><name>MDBX_log_level_t</name><operator>)</operator><operator>(</operator><name>verbose</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>
                       </then><else>: <expr><name>MDBX_LOG_TRACE</name></expr></else></ternary></expr></argument>,
                   <argument><expr><name>MDBX_DBG_LEGACY_OVERLAP</name> <operator>|</operator> <name>MDBX_DBG_DONT_UPGRADE</name></expr></argument>, <argument><expr><name>logger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_env_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_env_create() failed, error %d %s\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>mdbx_strerror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><ternary><condition><expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>EXIT_FAILURE_MDBX</name></expr> </then><else>: <expr><name>EXIT_FAILURE_SYS</name></expr></else></ternary></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_env_set_maxdbs</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>MDBX_MAX_DBI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_env_set_maxdbs() failed, error %d %s\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>mdbx_strerror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>bailout</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>stuck_meta</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_env_open_for_recovery</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>envname</name></expr></argument>, <argument><expr><name>stuck_meta</name></expr></argument>,
                                    <argument><expr><ternary><condition><expr><operator>(</operator><name>envflags</name> <operator>&amp;</operator> <name>MDBX_RDONLY</name><operator>)</operator></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><name>true</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_env_open</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>envname</name></expr></argument>, <argument><expr><name>envflags</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>envflags</name> <operator>&amp;</operator> <name>MDBX_EXCLUSIVE</name><operator>)</operator> <operator>&amp;&amp;</operator>
        <operator>(</operator><name>rc</name> <operator>==</operator> <name>MDBX_BUSY</name> <operator>||</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
         <name>rc</name> <operator>==</operator> <name>ERROR_LOCK_VIOLATION</name> <operator>||</operator> <name>rc</name> <operator>==</operator> <name>ERROR_SHARING_VIOLATION</name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
         <name>rc</name> <operator>==</operator> <name>EBUSY</name> <operator>||</operator> <name>rc</name> <operator>==</operator> <name>EAGAIN</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
         <operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>envflags</name> <operator>&amp;=</operator> <operator>~</operator><name>MDBX_EXCLUSIVE</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_env_open</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>envname</name></expr></argument>, <argument><expr><name>envflags</name> <operator>|</operator> <name>MDBX_ACCEDE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_env_open() failed, error %d %s\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>mdbx_strerror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>MDBX_WANNA_RECOVERY</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>envflags</name> <operator>&amp;</operator> <name>MDBX_RDONLY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Please run %s in the read-write mode (with '-w' option).\n"</literal></expr></argument>, <argument><expr><name>prog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <goto>goto <name>bailout</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">" - %s mode\n"</literal></expr></argument>,
          <argument><expr><ternary><condition><expr><operator>(</operator><name>envflags</name> <operator>&amp;</operator> <name>MDBX_EXCLUSIVE</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"monopolistic"</literal></expr> </then><else>: <expr><literal type="string">"cooperative"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>envflags</name> <operator>&amp;</operator> <operator>(</operator><name>MDBX_RDONLY</name> <operator>|</operator> <name>MDBX_EXCLUSIVE</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_txn_lock</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_txn_lock() failed, error %d %s\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>mdbx_strerror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>bailout</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>write_locked</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_txn_begin</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>, <argument><expr><name>MDBX_TXN_RDONLY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_txn_begin() failed, error %d %s\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>mdbx_strerror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>bailout</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_env_info_ex</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>envinfo</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>envinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_env_info_ex() failed, error %d %s\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>mdbx_strerror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>bailout</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">" - current boot-id "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>envinfo</name><operator>.</operator><name>mi_bootid</name><operator>.</operator><name>current</name><operator>.</operator><name>x</name></name> <operator>|</operator> <name><name>envinfo</name><operator>.</operator><name>mi_bootid</name><operator>.</operator><name>current</name><operator>.</operator><name>y</name></name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"%016"</literal> <name>PRIx64</name> <literal type="string">"-%016"</literal> <name>PRIx64</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_bootid</name><operator>.</operator><name>current</name><operator>.</operator><name>x</name></name></expr></argument>,
            <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_bootid</name><operator>.</operator><name>current</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"unavailable\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>mdbx_filehandle_t</name></type> <name>dxb_fd</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_env_get_fd</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dxb_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_env_get_fd() failed, error %d %s\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>mdbx_strerror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>bailout</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint64_t</name></type> <name>dxb_filesize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <block>{<block_content>
    <decl_stmt><decl><type><name>BY_HANDLE_FILE_INFORMATION</name></type> <name>info</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetFileInformationByHandle</name><argument_list>(<argument><expr><name>dxb_fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>GetLastError</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><name>dxb_filesize</name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>nFileSizeLow</name></name> <operator>|</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>info</name><operator>.</operator><name>nFileSizeHigh</name></name> <operator>&lt;&lt;</operator> <literal type="number">32</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
  </block_content>}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>STATIC_ASSERT_MSG</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>off_t</name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                      <argument><expr><literal type="string">"libmdbx requires 64-bit file I/O on 64-bit systems"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>fstat</name><argument_list>(<argument><expr><name>dxb_fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><name>dxb_filesize</name> <operator>=</operator> <name><name>st</name><operator>.</operator><name>st_size</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
  </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_filesize() failed, error %d %s\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>mdbx_strerror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>bailout</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>dxbfile_pages</name> <init>= <expr><name>dxb_filesize</name> <operator>/</operator> <name><name>envinfo</name><operator>.</operator><name>mi_dxb_pagesize</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>alloc_pages</name> <operator>=</operator> <name><name>txn</name><operator>-&gt;</operator><name>mt_next_pgno</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>backed_pages</name> <operator>=</operator> <name><name>envinfo</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>current</name></name> <operator>/</operator> <name><name>envinfo</name><operator>.</operator><name>mi_dxb_pagesize</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>backed_pages</name> <operator>&gt;</operator> <name>dxbfile_pages</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">" ! backed-pages %"</literal> <name>PRIu64</name> <literal type="string">" &gt; file-pages %"</literal> <name>PRIu64</name> <literal type="string">"\n"</literal></expr></argument>,
          <argument><expr><name>backed_pages</name></expr></argument>, <argument><expr><name>dxbfile_pages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>++</operator><name>problems_meta</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>dxbfile_pages</name> <operator>&lt;</operator> <name>NUM_METAS</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">" ! file-pages %"</literal> <name>PRIu64</name> <literal type="string">" &lt; %u\n"</literal></expr></argument>, <argument><expr><name>dxbfile_pages</name></expr></argument>, <argument><expr><name>NUM_METAS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>backed_pages</name> <operator>&lt;</operator> <name>NUM_METAS</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">" ! backed-pages %"</literal> <name>PRIu64</name> <literal type="string">" &lt; %u\n"</literal></expr></argument>, <argument><expr><name>backed_pages</name></expr></argument>, <argument><expr><name>NUM_METAS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>backed_pages</name> <operator>&lt;</operator> <name>NUM_METAS</name> <operator>||</operator> <name>dxbfile_pages</name> <operator>&lt;</operator> <name>NUM_METAS</name></expr>)</condition><block type="pseudo"><block_content>
    <goto>goto <name>bailout</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>backed_pages</name> <operator>&gt;</operator> <name>MAX_PAGENO</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">" ! backed-pages %"</literal> <name>PRIu64</name> <literal type="string">" &gt; max-pages %"</literal> <name>PRIaPGNO</name> <literal type="string">"\n"</literal></expr></argument>,
          <argument><expr><name>backed_pages</name></expr></argument>, <argument><expr><name>MAX_PAGENO</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>++</operator><name>problems_meta</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>backed_pages</name> <operator>=</operator> <name>MAX_PAGENO</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>envflags</name> <operator>&amp;</operator> <operator>(</operator><name>MDBX_EXCLUSIVE</name> <operator>|</operator> <name>MDBX_RDONLY</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <name>MDBX_RDONLY</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>backed_pages</name> <operator>&gt;</operator> <name>dxbfile_pages</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">" ! backed-pages %"</literal> <name>PRIu64</name> <literal type="string">" &gt; file-pages %"</literal> <name>PRIu64</name> <literal type="string">"\n"</literal></expr></argument>,
            <argument><expr><name>backed_pages</name></expr></argument>, <argument><expr><name>dxbfile_pages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>++</operator><name>problems_meta</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>backed_pages</name> <operator>=</operator> <name>dxbfile_pages</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>alloc_pages</name> <operator>&gt;</operator> <name>backed_pages</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">" ! alloc-pages %"</literal> <name>PRIu64</name> <literal type="string">" &gt; backed-pages %"</literal> <name>PRIu64</name> <literal type="string">"\n"</literal></expr></argument>,
            <argument><expr><name>alloc_pages</name></expr></argument>, <argument><expr><name>backed_pages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>++</operator><name>problems_meta</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>alloc_pages</name> <operator>=</operator> <name>backed_pages</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="block">/* LY: DB may be shrinked by writer down to the allocated pages. */</comment>
    <if_stmt><if>if <condition>(<expr><name>alloc_pages</name> <operator>&gt;</operator> <name>backed_pages</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">" ! alloc-pages %"</literal> <name>PRIu64</name> <literal type="string">" &gt; backed-pages %"</literal> <name>PRIu64</name> <literal type="string">"\n"</literal></expr></argument>,
            <argument><expr><name>alloc_pages</name></expr></argument>, <argument><expr><name>backed_pages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>++</operator><name>problems_meta</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>alloc_pages</name> <operator>=</operator> <name>backed_pages</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>alloc_pages</name> <operator>&gt;</operator> <name>dxbfile_pages</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">" ! alloc-pages %"</literal> <name>PRIu64</name> <literal type="string">" &gt; file-pages %"</literal> <name>PRIu64</name> <literal type="string">"\n"</literal></expr></argument>,
            <argument><expr><name>alloc_pages</name></expr></argument>, <argument><expr><name>dxbfile_pages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>++</operator><name>problems_meta</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>alloc_pages</name> <operator>=</operator> <name>dxbfile_pages</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>backed_pages</name> <operator>&gt;</operator> <name>dxbfile_pages</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>backed_pages</name> <operator>=</operator> <name>dxbfile_pages</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">" - pagesize %u (%u system), max keysize %d..%d"</literal>
          <literal type="string">", max readers %u\n"</literal></expr></argument>,
          <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_dxb_pagesize</name></name></expr></argument>, <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_sys_pagesize</name></name></expr></argument>,
          <argument><expr><call><name>mdbx_env_get_maxkeysize_ex</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>MDBX_DUPSORT</name></expr></argument>)</argument_list></call></expr></argument>,
          <argument><expr><call><name>mdbx_env_get_maxkeysize_ex</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_maxreaders</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>print_size</name><argument_list>(<argument><expr><literal type="string">" - mapsize "</literal></expr></argument>, <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_mapsize</name></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>envinfo</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>lower</name></name> <operator>==</operator> <name><name>envinfo</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>upper</name></name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>print_size</name><argument_list>(<argument><expr><literal type="string">" - fixed datafile: "</literal></expr></argument>, <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>current</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>print_size</name><argument_list>(<argument><expr><literal type="string">" - dynamic datafile: "</literal></expr></argument>, <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>lower</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>print_size</name><argument_list>(<argument><expr><literal type="string">" .. "</literal></expr></argument>, <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>upper</name></name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>print_size</name><argument_list>(<argument><expr><literal type="string">"+"</literal></expr></argument>, <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>grow</name></name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>print_size</name><argument_list>(<argument><expr><literal type="string">"-"</literal></expr></argument>, <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>shrink</name></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>print_size</name><argument_list>(<argument><expr><literal type="string">" - current datafile: "</literal></expr></argument>, <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>current</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">", %"</literal> <name>PRIu64</name> <literal type="string">" pages\n"</literal></expr></argument>,
           <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>current</name></name> <operator>/</operator> <name><name>envinfo</name><operator>.</operator><name>mi_dxb_pagesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if <condition>(<expr><name><name>envinfo</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>shrink</name></name> <operator>&amp;&amp;</operator> <name><name>envinfo</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>current</name></name> <operator>!=</operator> <name><name>envinfo</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>upper</name></name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>print</name><argument_list>(
          <argument><expr><literal type="string">"                     WARNING: Due Windows system limitations a "</literal>
          <literal type="string">"file couldn't\n                     be truncated while the database "</literal>
          <literal type="string">"is opened. So, the size\n                     database file "</literal>
          <literal type="string">"of may by large than the database itself,\n                     "</literal>
          <literal type="string">"until it will be closed or reopened in read-write mode.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>verbose_meta</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_meta0_txnid</name></name></expr></argument>, <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_meta0_sign</name></name></expr></argument>,
                 <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_bootid</name><operator>.</operator><name>meta0</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_bootid</name><operator>.</operator><name>meta0</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>verbose_meta</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_meta1_txnid</name></name></expr></argument>, <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_meta1_sign</name></name></expr></argument>,
                 <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_bootid</name><operator>.</operator><name>meta1</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_bootid</name><operator>.</operator><name>meta1</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>verbose_meta</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_meta2_txnid</name></name></expr></argument>, <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_meta2_sign</name></name></expr></argument>,
                 <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_bootid</name><operator>.</operator><name>meta2</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_bootid</name><operator>.</operator><name>meta2</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>stuck_meta</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">" - skip checking meta-pages since the %u"</literal>
            <literal type="string">" is selected for verification\n"</literal></expr></argument>,
            <argument><expr><name>stuck_meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">" - transactions: recent %"</literal> <name>PRIu64</name>
            <literal type="string">", selected for verification %"</literal> <name>PRIu64</name> <literal type="string">", lag %"</literal> <name>PRIi64</name> <literal type="string">"\n"</literal></expr></argument>,
            <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_recent_txnid</name></name></expr></argument>, <argument><expr><call><name>get_meta_txnid</name><argument_list>(<argument><expr><name>stuck_meta</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_recent_txnid</name></name> <operator>-</operator> <call><name>get_meta_txnid</name><argument_list>(<argument><expr><name>stuck_meta</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>verbose</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">" - performs check for meta-pages clashes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>meta_eq</name><argument_list>(<argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_meta0_txnid</name></name></expr></argument>, <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_meta0_sign</name></name></expr></argument>,
                <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_meta1_txnid</name></name></expr></argument>, <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_meta1_sign</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">" ! meta-%d and meta-%d are clashed\n"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>++</operator><name>problems_meta</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>meta_eq</name><argument_list>(<argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_meta1_txnid</name></name></expr></argument>, <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_meta1_sign</name></name></expr></argument>,
                <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_meta2_txnid</name></name></expr></argument>, <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_meta2_sign</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">" ! meta-%d and meta-%d are clashed\n"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>++</operator><name>problems_meta</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>meta_eq</name><argument_list>(<argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_meta2_txnid</name></name></expr></argument>, <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_meta2_sign</name></name></expr></argument>,
                <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_meta0_txnid</name></name></expr></argument>, <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_meta0_sign</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">" ! meta-%d and meta-%d are clashed\n"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>++</operator><name>problems_meta</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>steady_meta_id</name> <init>= <expr><call><name>meta_recent</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>steady_meta_txnid</name> <init>= <expr><call><name>get_meta_txnid</name><argument_list>(<argument><expr><name>steady_meta_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>weak_meta_id</name> <init>= <expr><call><name>meta_recent</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>weak_meta_txnid</name> <init>= <expr><call><name>get_meta_txnid</name><argument_list>(<argument><expr><name>weak_meta_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>envflags</name> <operator>&amp;</operator> <name>MDBX_EXCLUSIVE</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>verbose</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">" - performs full check recent-txn-id with meta-pages\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>steady_meta_txnid</name> <operator>!=</operator> <name><name>envinfo</name><operator>.</operator><name>mi_recent_txnid</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">" ! steady meta-%d txn-id mismatch recent-txn-id (%"</literal> <name>PRIi64</name>
              <literal type="string">" != %"</literal> <name>PRIi64</name> <literal type="string">")\n"</literal></expr></argument>,
              <argument><expr><name>steady_meta_id</name></expr></argument>, <argument><expr><name>steady_meta_txnid</name></expr></argument>, <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_recent_txnid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>++</operator><name>problems_meta</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>write_locked</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>verbose</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">" - performs lite check recent-txn-id with meta-pages (not a "</literal>
              <literal type="string">"monopolistic mode)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>weak_meta_txnid</name> <operator>!=</operator> <name><name>envinfo</name><operator>.</operator><name>mi_recent_txnid</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">" ! weak meta-%d txn-id mismatch recent-txn-id (%"</literal> <name>PRIi64</name>
              <literal type="string">" != %"</literal> <name>PRIi64</name> <literal type="string">")\n"</literal></expr></argument>,
              <argument><expr><name>weak_meta_id</name></expr></argument>, <argument><expr><name>weak_meta_txnid</name></expr></argument>, <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_recent_txnid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>++</operator><name>problems_meta</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">" - skip check recent-txn-id with meta-pages (monopolistic or "</literal>
            <literal type="string">"read-write mode only)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>total_problems</name> <operator>+=</operator> <name>problems_meta</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">" - transactions: recent %"</literal> <name>PRIu64</name> <literal type="string">", latter reader %"</literal> <name>PRIu64</name>
            <literal type="string">", lag %"</literal> <name>PRIi64</name> <literal type="string">"\n"</literal></expr></argument>,
            <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_recent_txnid</name></name></expr></argument>, <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_latter_reader_txnid</name></name></expr></argument>,
            <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_recent_txnid</name></name> <operator>-</operator> <name><name>envinfo</name><operator>.</operator><name>mi_latter_reader_txnid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dont_traversal</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>problem</name></name> <modifier>*</modifier></type><name>saved_list</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>traversal_problems</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>empty_pages</name></decl>, <decl><type ref="prev"/><name>lost_bytes</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Traversal b-tree by txn#%"</literal> <name>PRIaTXN</name> <literal type="string">"...\n"</literal></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>mt_txnid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>walk</name><operator>.</operator><name>pagemap</name></name> <operator>=</operator> <call><name>mdbx_calloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>backed_pages</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>walk</name><operator>.</operator><name>pagemap</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>walk</name><operator>.</operator><name>pagemap</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <ternary><condition><expr><name>errno</name></expr> ?</condition><then> <expr><name>errno</name></expr> </then><else>: <expr><name>MDBX_ENOMEM</name></expr></else></ternary></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"calloc() failed, error %d %s\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>mdbx_strerror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>bailout</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>saved_list</name> <operator>=</operator> <call><name>problems_push</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_env_pgwalk</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pgvisitor</name></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>,
                         <argument><expr><name>true</name></expr></argument> <comment type="block">/* always skip key ordering checking to avoid
                               MDBX_CORRUPTED when using custom comparators */</comment>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>traversal_problems</name> <operator>=</operator> <call><name>problems_pop</name><argument_list>(<argument><expr><name>saved_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>MDBX_EINTR</name> <operator>||</operator> <operator>!</operator><call><name>check_user_break</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_env_pgwalk() failed, error %d %s\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>mdbx_strerror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <goto>goto <name>bailout</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <for>for <control>(<init><decl><type><name>uint64_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>alloc_pages</name></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control><block type="pseudo"><block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>walk</name><operator>.</operator><name>pagemap</name><index>[<expr><name>n</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>unused_pages</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

    <expr_stmt><expr><name>empty_pages</name> <operator>=</operator> <name>lost_bytes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>walk_dbi_t</name> <modifier>*</modifier></type><name>dbi</name> <init>= <expr><operator>&amp;</operator><name>dbi_main</name></expr></init></decl>;</init> <condition><expr><name>dbi</name> <operator>&lt;</operator> <call><name>ARRAY_END</name><argument_list>(<argument><expr><name><name>walk</name><operator>.</operator><name>dbi</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>dbi</name><operator>-&gt;</operator><name>name</name></name></expr>;</condition>
         <incr><expr><operator>++</operator><name>dbi</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>empty_pages</name> <operator>+=</operator> <name><name>dbi</name><operator>-&gt;</operator><name>pages</name><operator>.</operator><name>empty</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>lost_bytes</name> <operator>+=</operator> <name><name>dbi</name><operator>-&gt;</operator><name>lost_bytes</name></name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>uint64_t</name></type> <name>total_page_bytes</name> <init>= <expr><name><name>walk</name><operator>.</operator><name>pgcount</name></name> <operator>*</operator> <name><name>envinfo</name><operator>.</operator><name>mi_dxb_pagesize</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">" - pages: walked %"</literal> <name>PRIu64</name> <literal type="string">", left/unused %"</literal> <name>PRIu64</name> <literal type="string">"\n"</literal></expr></argument>,
            <argument><expr><name><name>walk</name><operator>.</operator><name>pgcount</name></name></expr></argument>, <argument><expr><name>unused_pages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>verbose</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>walk_dbi_t</name> <modifier>*</modifier></type><name>dbi</name> <init>= <expr><name><name>walk</name><operator>.</operator><name>dbi</name></name></expr></init></decl>;</init> <condition><expr><name>dbi</name> <operator>&lt;</operator> <call><name>ARRAY_END</name><argument_list>(<argument><expr><name><name>walk</name><operator>.</operator><name>dbi</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>dbi</name><operator>-&gt;</operator><name>name</name></name></expr>;</condition>
             <incr><expr><operator>++</operator><name>dbi</name></expr></incr>)</control> <block>{<block_content>
          <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"     %s: subtotal %"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><name><name>dbi</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>dbi</name><operator>-&gt;</operator><name>pages</name><operator>.</operator><name>total</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name><name>dbi</name><operator>-&gt;</operator><name>pages</name><operator>.</operator><name>other</name></name> <operator>&amp;&amp;</operator> <name><name>dbi</name><operator>-&gt;</operator><name>pages</name><operator>.</operator><name>other</name></name> <operator>!=</operator> <name><name>dbi</name><operator>-&gt;</operator><name>pages</name><operator>.</operator><name>total</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">", other %"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><name><name>dbi</name><operator>-&gt;</operator><name>pages</name><operator>.</operator><name>other</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
          <if_stmt><if>if <condition>(<expr><name><name>dbi</name><operator>-&gt;</operator><name>pages</name><operator>.</operator><name>branch</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">", branch %"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><name><name>dbi</name><operator>-&gt;</operator><name>pages</name><operator>.</operator><name>branch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
          <if_stmt><if>if <condition>(<expr><name><name>dbi</name><operator>-&gt;</operator><name>pages</name><operator>.</operator><name>large_count</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">", large %"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><name><name>dbi</name><operator>-&gt;</operator><name>pages</name><operator>.</operator><name>large_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
          <decl_stmt><decl><type><name>uint64_t</name></type> <name>all_leaf</name> <init>= <expr><name><name>dbi</name><operator>-&gt;</operator><name>pages</name><operator>.</operator><name>leaf</name></name> <operator>+</operator> <name><name>dbi</name><operator>-&gt;</operator><name>pages</name><operator>.</operator><name>leaf_dupfixed</name></name></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name>all_leaf</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">", leaf %"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><name>all_leaf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>verbose</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator>
                <operator>(</operator><name><name>dbi</name><operator>-&gt;</operator><name>pages</name><operator>.</operator><name>subleaf_dupsort</name></name> <operator>|</operator> <name><name>dbi</name><operator>-&gt;</operator><name>pages</name><operator>.</operator><name>leaf_dupfixed</name></name> <operator>|</operator>
                 <name><name>dbi</name><operator>-&gt;</operator><name>pages</name><operator>.</operator><name>subleaf_dupfixed</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
              <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">" (usual %"</literal> <name>PRIu64</name> <literal type="string">", sub-dupsort %"</literal> <name>PRIu64</name>
                    <literal type="string">", dupfixed %"</literal> <name>PRIu64</name> <literal type="string">", sub-dupfixed %"</literal> <name>PRIu64</name> <literal type="string">")"</literal></expr></argument>,
                    <argument><expr><name><name>dbi</name><operator>-&gt;</operator><name>pages</name><operator>.</operator><name>leaf</name></name></expr></argument>, <argument><expr><name><name>dbi</name><operator>-&gt;</operator><name>pages</name><operator>.</operator><name>subleaf_dupsort</name></name></expr></argument>,
                    <argument><expr><name><name>dbi</name><operator>-&gt;</operator><name>pages</name><operator>.</operator><name>leaf_dupfixed</name></name></expr></argument>, <argument><expr><name><name>dbi</name><operator>-&gt;</operator><name>pages</name><operator>.</operator><name>subleaf_dupfixed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>verbose</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">" - usage: total %"</literal> <name>PRIu64</name> <literal type="string">" bytes, payload %"</literal> <name>PRIu64</name>
              <literal type="string">" (%.1f%%), unused "</literal>
              <literal type="string">"%"</literal> <name>PRIu64</name> <literal type="string">" (%.1f%%)\n"</literal></expr></argument>,
              <argument><expr><name>total_page_bytes</name></expr></argument>, <argument><expr><name><name>walk</name><operator>.</operator><name>total_payload_bytes</name></name></expr></argument>,
              <argument><expr><name><name>walk</name><operator>.</operator><name>total_payload_bytes</name></name> <operator>*</operator> <literal type="number">100.0</literal> <operator>/</operator> <name>total_page_bytes</name></expr></argument>,
              <argument><expr><name>total_page_bytes</name> <operator>-</operator> <name><name>walk</name><operator>.</operator><name>total_payload_bytes</name></name></expr></argument>,
              <argument><expr><operator>(</operator><name>total_page_bytes</name> <operator>-</operator> <name><name>walk</name><operator>.</operator><name>total_payload_bytes</name></name><operator>)</operator> <operator>*</operator> <literal type="number">100.0</literal> <operator>/</operator>
                  <name>total_page_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>verbose</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>walk_dbi_t</name> <modifier>*</modifier></type><name>dbi</name> <init>= <expr><name><name>walk</name><operator>.</operator><name>dbi</name></name></expr></init></decl>;</init> <condition><expr><name>dbi</name> <operator>&lt;</operator> <call><name>ARRAY_END</name><argument_list>(<argument><expr><name><name>walk</name><operator>.</operator><name>dbi</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>dbi</name><operator>-&gt;</operator><name>name</name></name></expr>;</condition>
             <incr><expr><operator>++</operator><name>dbi</name></expr></incr>)</control><block type="pseudo"><block_content>
          <if_stmt><if>if <condition>(<expr><name><name>dbi</name><operator>-&gt;</operator><name>pages</name><operator>.</operator><name>total</name></name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>uint64_t</name></type> <name>dbi_bytes</name> <init>= <expr><name><name>dbi</name><operator>-&gt;</operator><name>pages</name><operator>.</operator><name>total</name></name> <operator>*</operator> <name><name>envinfo</name><operator>.</operator><name>mi_dxb_pagesize</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"     %s: subtotal %"</literal> <name>PRIu64</name> <literal type="string">" bytes (%.1f%%),"</literal>
                  <literal type="string">" payload %"</literal> <name>PRIu64</name> <literal type="string">" (%.1f%%), unused %"</literal> <name>PRIu64</name> <literal type="string">" (%.1f%%)"</literal></expr></argument>,
                  <argument><expr><name><name>dbi</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>dbi_bytes</name></expr></argument>, <argument><expr><name>dbi_bytes</name> <operator>*</operator> <literal type="number">100.0</literal> <operator>/</operator> <name>total_page_bytes</name></expr></argument>,
                  <argument><expr><name><name>dbi</name><operator>-&gt;</operator><name>payload_bytes</name></name></expr></argument>, <argument><expr><name><name>dbi</name><operator>-&gt;</operator><name>payload_bytes</name></name> <operator>*</operator> <literal type="number">100.0</literal> <operator>/</operator> <name>dbi_bytes</name></expr></argument>,
                  <argument><expr><name>dbi_bytes</name> <operator>-</operator> <name><name>dbi</name><operator>-&gt;</operator><name>payload_bytes</name></name></expr></argument>,
                  <argument><expr><operator>(</operator><name>dbi_bytes</name> <operator>-</operator> <name><name>dbi</name><operator>-&gt;</operator><name>payload_bytes</name></name><operator>)</operator> <operator>*</operator> <literal type="number">100.0</literal> <operator>/</operator> <name>dbi_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>dbi</name><operator>-&gt;</operator><name>pages</name><operator>.</operator><name>empty</name></name></expr>)</condition><block type="pseudo"><block_content>
              <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">", %"</literal> <name>PRIu64</name> <literal type="string">" empty pages"</literal></expr></argument>, <argument><expr><name><name>dbi</name><operator>-&gt;</operator><name>pages</name><operator>.</operator><name>empty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>dbi</name><operator>-&gt;</operator><name>lost_bytes</name></name></expr>)</condition><block type="pseudo"><block_content>
              <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">", %"</literal> <name>PRIu64</name> <literal type="string">" bytes lost"</literal></expr></argument>, <argument><expr><name><name>dbi</name><operator>-&gt;</operator><name>lost_bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"     %s: empty\n"</literal></expr></argument>, <argument><expr><name><name>dbi</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></for>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">" - summary: average fill %.1f%%"</literal></expr></argument>,
            <argument><expr><name><name>walk</name><operator>.</operator><name>total_payload_bytes</name></name> <operator>*</operator> <literal type="number">100.0</literal> <operator>/</operator> <name>total_page_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>empty_pages</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">", %"</literal> <name>PRIu64</name> <literal type="string">" empty pages"</literal></expr></argument>, <argument><expr><name>empty_pages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>lost_bytes</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">", %"</literal> <name>PRIu64</name> <literal type="string">" bytes lost"</literal></expr></argument>, <argument><expr><name>lost_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">", %"</literal> <name>PRIuPTR</name> <literal type="string">" problems\n"</literal></expr></argument>, <argument><expr><name>traversal_problems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Skipping b-tree walk...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>verbose</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Iterating DBIs...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>data_tree_problems</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Skip processing %s since tree is corrupted (%u problems)\n"</literal></expr></argument>, <argument><expr><literal type="string">"@MAIN"</literal></expr></argument>,
          <argument><expr><name>data_tree_problems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>problems_maindb</name> <operator>=</operator> <name>data_tree_problems</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name>problems_maindb</name> <operator>=</operator> <call><name>process_db</name><argument_list>(<argument><expr><operator>~</operator><literal type="number">0u</literal></expr></argument>, <comment type="block">/* MAIN_DBI */</comment> <argument><expr><name>nullptr</name></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>gc_tree_problems</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Skip processing %s since tree is corrupted (%u problems)\n"</literal></expr></argument>, <argument><expr><literal type="string">"@GC"</literal></expr></argument>,
          <argument><expr><name>gc_tree_problems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>problems_freedb</name> <operator>=</operator> <name>gc_tree_problems</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name>problems_freedb</name> <operator>=</operator> <call><name>process_db</name><argument_list>(<argument><expr><name>FREE_DBI</name></expr></argument>, <argument><expr><literal type="string">"@GC"</literal></expr></argument>, <argument><expr><name>handle_freedb</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>value</name> <init>= <expr><name><name>envinfo</name><operator>.</operator><name>mi_mapsize</name></name> <operator>/</operator> <name><name>envinfo</name><operator>.</operator><name>mi_dxb_pagesize</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>percent</name> <init>= <expr><name>value</name> <operator>/</operator> <literal type="number">100.0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">" - space: %"</literal> <name>PRIu64</name> <literal type="string">" total pages"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">", backed %"</literal> <name>PRIu64</name> <literal type="string">" (%.1f%%)"</literal></expr></argument>, <argument><expr><name>backed_pages</name></expr></argument>,
          <argument><expr><name>backed_pages</name> <operator>/</operator> <name>percent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">", allocated %"</literal> <name>PRIu64</name> <literal type="string">" (%.1f%%)"</literal></expr></argument>, <argument><expr><name>alloc_pages</name></expr></argument>,
          <argument><expr><name>alloc_pages</name> <operator>/</operator> <name>percent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>verbose</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>envinfo</name><operator>.</operator><name>mi_mapsize</name></name> <operator>/</operator> <name><name>envinfo</name><operator>.</operator><name>mi_dxb_pagesize</name></name> <operator>-</operator> <name>alloc_pages</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">", remained %"</literal> <name>PRIu64</name> <literal type="string">" (%.1f%%)"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>value</name> <operator>/</operator> <name>percent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>value</name> <operator>=</operator> <ternary><condition><expr><name>dont_traversal</name></expr> ?</condition><then> <expr><name>alloc_pages</name> <operator>-</operator> <name>gc_pages</name></expr> </then><else>: <expr><name><name>walk</name><operator>.</operator><name>pgcount</name></name></expr></else></ternary></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">", used %"</literal> <name>PRIu64</name> <literal type="string">" (%.1f%%)"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>value</name> <operator>/</operator> <name>percent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">", gc %"</literal> <name>PRIu64</name> <literal type="string">" (%.1f%%)"</literal></expr></argument>, <argument><expr><name>gc_pages</name></expr></argument>, <argument><expr><name>gc_pages</name> <operator>/</operator> <name>percent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>value</name> <operator>=</operator> <name>gc_pages</name> <operator>-</operator> <name>reclaimable_pages</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">", detained %"</literal> <name>PRIu64</name> <literal type="string">" (%.1f%%)"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>value</name> <operator>/</operator> <name>percent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">", reclaimable %"</literal> <name>PRIu64</name> <literal type="string">" (%.1f%%)"</literal></expr></argument>, <argument><expr><name>reclaimable_pages</name></expr></argument>,
            <argument><expr><name>reclaimable_pages</name> <operator>/</operator> <name>percent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>envinfo</name><operator>.</operator><name>mi_mapsize</name></name> <operator>/</operator> <name><name>envinfo</name><operator>.</operator><name>mi_dxb_pagesize</name></name> <operator>-</operator> <name>alloc_pages</name> <operator>+</operator>
            <name>reclaimable_pages</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">", available %"</literal> <name>PRIu64</name> <literal type="string">" (%.1f%%)\n"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>value</name> <operator>/</operator> <name>percent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>problems_maindb</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>problems_freedb</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dont_traversal</name> <operator>&amp;&amp;</operator>
        <operator>(</operator><name>envflags</name> <operator>&amp;</operator> <operator>(</operator><name>MDBX_EXCLUSIVE</name> <operator>|</operator> <name>MDBX_RDONLY</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <name>MDBX_RDONLY</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>walk</name><operator>.</operator><name>pgcount</name></name> <operator>!=</operator> <name>alloc_pages</name> <operator>-</operator> <name>gc_pages</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"used pages mismatch (%"</literal> <name>PRIu64</name> <literal type="string">"(walked) != %"</literal> <name>PRIu64</name>
              <literal type="string">"(allocated - GC))\n"</literal></expr></argument>,
              <argument><expr><name><name>walk</name><operator>.</operator><name>pgcount</name></name></expr></argument>, <argument><expr><name>alloc_pages</name> <operator>-</operator> <name>gc_pages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>unused_pages</name> <operator>!=</operator> <name>gc_pages</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"gc pages mismatch (%"</literal> <name>PRIu64</name> <literal type="string">"(expected) != %"</literal> <name>PRIu64</name> <literal type="string">"(GC))\n"</literal></expr></argument>,
              <argument><expr><name>unused_pages</name></expr></argument>, <argument><expr><name>gc_pages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">" - skip check used and gc pages (btree-traversal with "</literal>
            <literal type="string">"monopolistic or read-write mode only)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>process_db</name><argument_list>(<argument><expr><name>MAIN_DBI</name></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>, <argument><expr><name>handle_maindb</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>userdb_count</name> <operator>&amp;&amp;</operator> <name>verbose</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">" - does not contain multiple databases\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>total_problems</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>problems_meta</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>dont_traversal</name> <operator>&amp;&amp;</operator>
      <operator>(</operator><name>envflags</name> <operator>&amp;</operator> <name>MDBX_RDONLY</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>only_subdb</name> <operator>&amp;&amp;</operator> <name>stuck_meta</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
      <call><name>get_meta_txnid</name><argument_list>(<argument><expr><call><name>meta_recent</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>envinfo</name><operator>.</operator><name>mi_recent_txnid</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Perform sync-to-disk for make steady checkpoint at txn-id #%"</literal> <name>PRIi64</name>
          <literal type="string">"\n"</literal></expr></argument>,
          <argument><expr><name><name>envinfo</name><operator>.</operator><name>mi_recent_txnid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>write_locked</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>mdbx_txn_unlock</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>write_locked</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_env_sync_ex</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_env_pgwalk() failed, error %d %s\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>mdbx_strerror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else <block>{<block_content>
      <expr_stmt><expr><name>total_problems</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>problems_meta</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>turn_meta</name> <operator>&amp;&amp;</operator> <name>stuck_meta</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>dont_traversal</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>only_subdb</name> <operator>&amp;&amp;</operator>
      <operator>(</operator><name>envflags</name> <operator>&amp;</operator> <operator>(</operator><name>MDBX_RDONLY</name> <operator>|</operator> <name>MDBX_EXCLUSIVE</name><operator>)</operator><operator>)</operator> <operator>==</operator> <name>MDBX_EXCLUSIVE</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>successful_check</name> <init>= <expr><operator>(</operator><name>rc</name> <operator>|</operator> <name>total_problems</name> <operator>|</operator> <name>problems_meta</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>successful_check</name> <operator>||</operator> <name>force_turn_meta</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">" = Performing turn to the specified meta-page (%d) due to %s!\n"</literal></expr></argument>,
            <argument><expr><name>stuck_meta</name></expr></argument>,
            <argument><expr><ternary><condition><expr><name>successful_check</name></expr> ?</condition><then> <expr><literal type="string">"successful check"</literal></expr> </then><else>: <expr><literal type="string">"the -T option was given"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mdbx_env_turn_for_recovery</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>stuck_meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>MDBX_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"mdbx_env_turn_for_recovery() failed, error %d %s\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>,
              <argument><expr><call><name>mdbx_strerror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">" = Skipping turn to the specified meta-page (%d) due to "</literal>
            <literal type="string">"unsuccessful check!\n"</literal></expr></argument>,
            <argument><expr><name>stuck_meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>bailout</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>txn</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>mdbx_txn_abort</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>write_locked</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mdbx_txn_unlock</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>write_locked</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>env</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>dont_sync</name> <init>= <expr><name>rc</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>total_problems</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>mdbx_env_close_ex</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>dont_sync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><ternary><condition><expr><name>user_break</name></expr> ?</condition><then> <expr><name>EXIT_INTERRUPTED</name></expr> </then><else>: <expr><name>EXIT_FAILURE_SYS</name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><name>EXIT_FAILURE_MDBX</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><name>timestamp_finish</name> <operator>=</operator> <call><name>GetMilliseconds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>elapsed</name> <operator>=</operator> <operator>(</operator><name>timestamp_finish</name> <operator>-</operator> <name>timestamp_start</name><operator>)</operator> <operator>*</operator> <literal type="number">1e-3</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <if_stmt><if>if <condition>(<expr><call><name>clock_gettime</name><argument_list>(<argument><expr><name>CLOCK_MONOTONIC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timestamp_finish</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"clock_gettime() failed, error %d %s\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>mdbx_strerror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>EXIT_FAILURE_SYS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>elapsed</name> <operator>=</operator> <name><name>timestamp_finish</name><operator>.</operator><name>tv_sec</name></name> <operator>-</operator> <name><name>timestamp_start</name><operator>.</operator><name>tv_sec</name></name> <operator>+</operator>
            <operator>(</operator><name><name>timestamp_finish</name><operator>.</operator><name>tv_nsec</name></name> <operator>-</operator> <name><name>timestamp_start</name><operator>.</operator><name>tv_nsec</name></name><operator>)</operator> <operator>*</operator> <literal type="number">1e-9</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !WINDOWS */</comment>

  <if_stmt><if>if <condition>(<expr><name>total_problems</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Total %u error%s detected, elapsed %.3f seconds.\n"</literal></expr></argument>, <argument><expr><name>total_problems</name></expr></argument>,
          <argument><expr><ternary><condition><expr><operator>(</operator><name>total_problems</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"s are"</literal></expr> </then><else>: <expr><literal type="string">" is"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>elapsed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>problems_meta</name> <operator>||</operator> <name>problems_maindb</name> <operator>||</operator> <name>problems_freedb</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>EXIT_FAILURE_CHECK_MAJOR</name></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><name>EXIT_FAILURE_CHECK_MINOR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"No error is detected, elapsed %.3f seconds\n"</literal></expr></argument>, <argument><expr><name>elapsed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>EXIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
</unit>
