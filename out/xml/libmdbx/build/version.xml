<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/libmdbx/build/version.c"><comment type="block">/* This is CMake-template for libmdbx's version.c
 ******************************************************************************/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internals.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MDBX_VERSION_MAJOR</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>                             \
    <name>MDBX_VERSION_MINOR</name> <operator>!=</operator> <literal type="number">11</literal></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"API version mismatch! Had `git fetch --tags` done?"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>sourcery</name><index>[]</index></name> <init>= <expr><call><name>MDBX_STRINGIFY</name><argument_list>(<argument><expr><name>MDBX_BUILD_SOURCERY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__dll_export</name>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__attribute_used__</name></cpp:ifdef>
    <name>__attribute_used__</name></type>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>__has_attribute</name><argument_list>(<argument><expr><name>__used__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__used__</name><operator>)</operator></expr></argument>)</argument_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__attribute_externally_visible__</name></cpp:ifdef>
        <name>__attribute_externally_visible__</name>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>                            \
    <call><name>__has_attribute</name><argument_list>(<argument><expr><name>__externally_visible__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__externally_visible__</name><operator>)</operator></expr></argument>)</argument_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    const struct <name>MDBX_version_info</name> <name>mdbx_version</name> <init>= <expr><block>{
        <expr><literal type="number">0</literal></expr>,
        <expr><literal type="number">11</literal></expr>,
        <expr><literal type="number">6</literal></expr>,
        <expr><literal type="number">39</literal></expr>,
        <expr><block>{<expr><literal type="string">"2022-04-13T11:05:50+03:00"</literal></expr>, <expr><literal type="string">"04fd8130aaecb30dfcfba8e33352613eb38d9605"</literal></expr>, <expr><literal type="string">"bb8f43181783686879219846d64379a04c1430e3"</literal></expr>,
         <expr><literal type="string">"v0.11.6-39-gbb8f4318-dirty"</literal></expr>}</block></expr>,
        <expr><name>sourcery</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>__dll_export</name>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__attribute_used__</name></cpp:ifdef>
    <name>__attribute_used__</name></type>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>__has_attribute</name><argument_list>(<argument><expr><name>__used__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__used__</name><operator>)</operator></expr></argument>)</argument_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__attribute_externally_visible__</name></cpp:ifdef>
        <name>__attribute_externally_visible__</name>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>                            \
    <call><name>__has_attribute</name><argument_list>(<argument><expr><name>__externally_visible__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__externally_visible__</name><operator>)</operator></expr></argument>)</argument_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    const <name>char</name> <modifier>*</modifier>const <name>mdbx_sourcery_anchor</name> <init>= <expr><name>sourcery</name></expr></init></decl>;</decl_stmt>
</unit>
