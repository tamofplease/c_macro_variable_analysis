<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/libmdbx/test/pcrf/pcrf_test.c"><comment type="block">/*
 * Copyright 2016-2022 Leonid Yuriev &lt;leo@yuriev.ru&gt;.
 * Copyright 2015 Vladimir Romanov
 * &lt;https://www.linkedin.com/in/vladimirromanov&gt;, Yota Lab.
 *
 * This file is part of libmdbx.
 *
 * ReOpenMDBX is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * ReOpenMDBX is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mdbx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IP_PRINTF_ARG_HOST</name><parameter_list>(<parameter><type><name>addr</name></type></parameter>)</parameter_list></cpp:macro>                                               \
  <cpp:value>(int)((addr) &gt;&gt; 24), (int)((addr) &gt;&gt; 16 &amp; 0xff), (int)((addr) &gt;&gt; 8 &amp; 0xff),  \
      (int)((addr)&amp;0xff)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>char</name></type> <name><name>opt_db_path</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name> <init>= <expr><literal type="string">"./mdbx_bench2"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>MDBX_env</name> <modifier>*</modifier></type><name>env</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REC_COUNT</name></cpp:macro> <cpp:value>10240000</cpp:value></cpp:define>
<decl_stmt><decl><type><name>int64_t</name></type> <name><name>ids</name><index>[<expr><name>REC_COUNT</name> <operator>*</operator> <literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>ids_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>mdbx_add_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>mdbx_del_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>mdbx_add_time</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>mdbx_del_time</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>obj_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>mdbx_data_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>mdbx_key_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>char</name></type> <name><name>session_id1</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>session_id2</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>ip</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>fill</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>session_data_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>int64_t</name></type> <name>obj_id</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type> <name>event_type</name></decl>;</decl_stmt>
}</block></struct></type> <name>__attribute__</name>((<name>__packed__</name>)) <name>event_data_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_id_to_pool</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>ids</name><index>[<expr><name>ids_count</name></expr>]</index></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>ids_count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int64_t</name></type> <name>getClockUs</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>val</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CYGWIN</name></cpp:ifdef>
  <expr_stmt><expr><call><name>clock_gettime</name><argument_list>(<argument><expr><name>CLOCK_REALTIME</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>clock_gettime</name><argument_list>(<argument><expr><name>CLOCK_MONOTONIC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name><name>val</name><operator>.</operator><name>tv_sec</name></name> <operator>*</operator> <operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><literal type="number">1000000</literal><operator>)</operator> <operator>+</operator> <name><name>val</name><operator>.</operator><name>tv_nsec</name></name> <operator>/</operator> <literal type="number">1000</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>get_id_from_pool</name><parameter_list>()</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>ids_count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>index</name> <init>= <expr><call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <name>ids_count</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>id</name> <init>= <expr><name><name>ids</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ids</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <name><name>ids</name><index>[<expr><name>ids_count</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>ids_count</name><operator>--</operator></expr>;</expr_stmt>
  <return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MDBX_CHECK</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>                                                          \
  <cpp:value>do {                                                                         \
    const int rc = (x);                                                        \
    if (rc != MDBX_SUCCESS) {                                                  \
      printf("Error [%d] %s in %s at %s:%d\n", rc, mdbx_strerror(rc), #x,      \
             __FILE__, __LINE__);                                              \
      exit(EXIT_FAILURE);                                                      \
    }                                                                          \
  } while (0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>db_connect</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>MDBX_dbi</name></type> <name>dbi_session</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MDBX_dbi</name></type> <name>dbi_session_id</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MDBX_dbi</name></type> <name>dbi_event</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MDBX_dbi</name></type> <name>dbi_ip</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>MDBX_CHECK</name><argument_list>(<argument><expr><call><name>mdbx_env_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>env</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MDBX_CHECK</name><argument_list>(<argument><expr><call><name>mdbx_env_set_geometry</name><argument_list>(
      <argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>REC_COUNT</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>session_data_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MDBX_CHECK</name><argument_list>(<argument><expr><call><name>mdbx_env_set_maxdbs</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MDBX_CHECK</name><argument_list>(<argument><expr><call><name>mdbx_env_open</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>opt_db_path</name></expr></argument>,
                           <argument><expr><name>MDBX_CREATE</name> <operator>|</operator> <name>MDBX_WRITEMAP</name> <operator>|</operator> <name>MDBX_UTTERLY_NOSYNC</name> <operator>|</operator>
                               <name>MDBX_LIFORECLAIM</name></expr></argument>,
                           <argument><expr><literal type="number">0664</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>MDBX_txn</name> <modifier>*</modifier></type><name>txn</name></decl>;</decl_stmt>

  <comment type="line">// transaction init</comment>
  <expr_stmt><expr><call><name>MDBX_CHECK</name><argument_list>(<argument><expr><call><name>mdbx_txn_begin</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>txn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// open database in read-write mode</comment>
  <expr_stmt><expr><call><name>MDBX_CHECK</name><argument_list>(<argument><expr><call><name>mdbx_dbi_open</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><literal type="string">"session"</literal></expr></argument>, <argument><expr><name>MDBX_CREATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbi_session</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MDBX_CHECK</name><argument_list>(<argument><expr><call><name>mdbx_dbi_open</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><literal type="string">"session_id"</literal></expr></argument>, <argument><expr><name>MDBX_CREATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbi_session_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MDBX_CHECK</name><argument_list>(<argument><expr><call><name>mdbx_dbi_open</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><literal type="string">"event"</literal></expr></argument>, <argument><expr><name>MDBX_CREATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbi_event</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MDBX_CHECK</name><argument_list>(<argument><expr><call><name>mdbx_dbi_open</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><literal type="string">"ip"</literal></expr></argument>, <argument><expr><name>MDBX_CREATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbi_ip</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// transaction commit</comment>
  <expr_stmt><expr><call><name>MDBX_CHECK</name><argument_list>(<argument><expr><call><name>mdbx_txn_commit</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Connection open\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>create_record</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>record_id</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>MDBX_dbi</name></type> <name>dbi_session</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MDBX_dbi</name></type> <name>dbi_session_id</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MDBX_dbi</name></type> <name>dbi_event</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MDBX_dbi</name></type> <name>dbi_ip</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>event_data_t</name></type> <name>event</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MDBX_txn</name> <modifier>*</modifier></type><name>txn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>session_data_t</name></type> <name>data</name></decl>;</decl_stmt>
  <comment type="line">// transaction init</comment>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>session_id1</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>session_id1</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
           <argument><expr><literal type="string">"prefix%02u_%02u.fill.fill.fill.fill.fill.fill;%"</literal> <name>PRIu64</name></expr></argument>,
           <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>record_id</name> <operator>%</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>record_id</name> <operator>%</operator> <literal type="number">9</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
           <argument><expr><name>record_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>session_id2</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>session_id2</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
           <argument><expr><literal type="string">"dprefix%"</literal> <name>PRIu64</name> <literal type="string">";%"</literal> <name>PRIu64</name> <literal type="string">".fill.fill.;suffix"</literal></expr></argument>, <argument><expr><name>record_id</name></expr></argument>,
           <argument><expr><operator>(</operator><name>record_id</name> <operator>+</operator> <call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">1442695040888963407</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>%</operator>
               <call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">6364136223846793005</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>ip</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>ip</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d.%d.%d.%d"</literal></expr></argument>,
           <argument><expr><call><name>IP_PRINTF_ARG_HOST</name><argument_list>(<argument><expr><name>record_id</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFF</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>event</name><operator>.</operator><name>obj_id</name></name> <operator>=</operator> <name>record_id</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>event</name><operator>.</operator><name>event_type</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>MDBX_val</name></type> <name>_session_id1_rec</name> <init>= <expr><block>{<expr><name><name>data</name><operator>.</operator><name>session_id1</name></name></expr>, <macro><name>strlen</name><argument_list>(<argument>data.session_id1</argument>)</argument_list></macro>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MDBX_val</name></type> <name>_session_id2_rec</name> <init>= <expr><block>{<expr><name><name>data</name><operator>.</operator><name>session_id2</name></name></expr>, <macro><name>strlen</name><argument_list>(<argument>data.session_id2</argument>)</argument_list></macro>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MDBX_val</name></type> <name>_ip_rec</name> <init>= <expr><block>{<expr><name><name>data</name><operator>.</operator><name>ip</name></name></expr>, <macro><name>strlen</name><argument_list>(<argument>data.ip</argument>)</argument_list></macro>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MDBX_val</name></type> <name>_obj_id_rec</name> <init>= <expr><block>{<expr><operator>&amp;</operator><name>record_id</name></expr>, <expr>sizeof<operator>(</operator><name>record_id</name><operator>)</operator></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MDBX_val</name></type> <name>_data_rec</name> <init>= <expr><block>{<expr><operator>&amp;</operator><name>data</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>session_data_t</name></expr></argument>, <argument><expr><name>fill</name></expr></argument>)</argument_list></call> <operator>+</operator>
                                   <operator>(</operator><call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>fill</name></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MDBX_val</name></type> <name>_event_rec</name> <init>= <expr><block>{<expr><operator>&amp;</operator><name>event</name></expr>, <expr>sizeof<operator>(</operator><name>event</name><operator>)</operator></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>uint64_t</name></type> <name>start</name> <init>= <expr><call><name>getClockUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>MDBX_CHECK</name><argument_list>(<argument><expr><call><name>mdbx_txn_begin</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>txn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MDBX_CHECK</name><argument_list>(<argument><expr><call><name>mdbx_dbi_open</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><literal type="string">"session"</literal></expr></argument>, <argument><expr><name>MDBX_CREATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbi_session</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MDBX_CHECK</name><argument_list>(<argument><expr><call><name>mdbx_dbi_open</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><literal type="string">"session_id"</literal></expr></argument>, <argument><expr><name>MDBX_CREATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbi_session_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MDBX_CHECK</name><argument_list>(<argument><expr><call><name>mdbx_dbi_open</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><literal type="string">"event"</literal></expr></argument>, <argument><expr><name>MDBX_CREATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbi_event</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MDBX_CHECK</name><argument_list>(<argument><expr><call><name>mdbx_dbi_open</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><literal type="string">"ip"</literal></expr></argument>, <argument><expr><name>MDBX_CREATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbi_ip</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MDBX_CHECK</name><argument_list>(<argument><expr><call><name>mdbx_put</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>dbi_session</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_obj_id_rec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_data_rec</name></expr></argument>,
                      <argument><expr><name>MDBX_NOOVERWRITE</name> <operator>|</operator> <name>MDBX_NODUPDATA</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MDBX_CHECK</name><argument_list>(<argument><expr><call><name>mdbx_put</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>dbi_session_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_session_id1_rec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_obj_id_rec</name></expr></argument>,
                      <argument><expr><name>MDBX_NOOVERWRITE</name> <operator>|</operator> <name>MDBX_NODUPDATA</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MDBX_CHECK</name><argument_list>(<argument><expr><call><name>mdbx_put</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>dbi_session_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_session_id2_rec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_obj_id_rec</name></expr></argument>,
                      <argument><expr><name>MDBX_NOOVERWRITE</name> <operator>|</operator> <name>MDBX_NODUPDATA</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MDBX_CHECK</name><argument_list>(<argument><expr><call><name>mdbx_put</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>dbi_ip</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_ip_rec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_obj_id_rec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MDBX_CHECK</name><argument_list>(<argument><expr><call><name>mdbx_put</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>dbi_event</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_event_rec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_obj_id_rec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MDBX_CHECK</name><argument_list>(<argument><expr><call><name>mdbx_txn_commit</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>mdbx_data_size</name> <operator>+=</operator> <operator>(</operator><name><name>_data_rec</name><operator>.</operator><name>iov_len</name></name> <operator>+</operator> <name><name>_obj_id_rec</name><operator>.</operator><name>iov_len</name></name> <operator>*</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>mdbx_key_size</name> <operator>+=</operator>
      <operator>(</operator><name><name>_obj_id_rec</name><operator>.</operator><name>iov_len</name></name> <operator>+</operator> <name><name>_session_id1_rec</name><operator>.</operator><name>iov_len</name></name> <operator>+</operator>
       <name><name>_session_id2_rec</name><operator>.</operator><name>iov_len</name></name> <operator>+</operator> <name><name>_ip_rec</name><operator>.</operator><name>iov_len</name></name> <operator>+</operator> <name><name>_event_rec</name><operator>.</operator><name>iov_len</name></name><operator>)</operator></expr>;</expr_stmt>

  <comment type="line">// transaction commit</comment>
  <expr_stmt><expr><name>mdbx_add_count</name><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>mdbx_add_time</name> <operator>+=</operator> <operator>(</operator><call><name>getClockUs</name><argument_list>()</argument_list></call> <operator>-</operator> <name>start</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>delete_record</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>record_id</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>MDBX_dbi</name></type> <name>dbi_session</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MDBX_dbi</name></type> <name>dbi_session_id</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MDBX_dbi</name></type> <name>dbi_event</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MDBX_dbi</name></type> <name>dbi_ip</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>event_data_t</name></type> <name>event</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MDBX_txn</name> <modifier>*</modifier></type><name>txn</name></decl>;</decl_stmt>

  <comment type="line">// transaction init</comment>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>start</name> <init>= <expr><call><name>getClockUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>MDBX_CHECK</name><argument_list>(<argument><expr><call><name>mdbx_txn_begin</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>txn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// open database in read-write mode</comment>
  <expr_stmt><expr><call><name>MDBX_CHECK</name><argument_list>(<argument><expr><call><name>mdbx_dbi_open</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><literal type="string">"session"</literal></expr></argument>, <argument><expr><name>MDBX_CREATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbi_session</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MDBX_CHECK</name><argument_list>(<argument><expr><call><name>mdbx_dbi_open</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><literal type="string">"session_id"</literal></expr></argument>, <argument><expr><name>MDBX_CREATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbi_session_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MDBX_CHECK</name><argument_list>(<argument><expr><call><name>mdbx_dbi_open</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><literal type="string">"event"</literal></expr></argument>, <argument><expr><name>MDBX_CREATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbi_event</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MDBX_CHECK</name><argument_list>(<argument><expr><call><name>mdbx_dbi_open</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><literal type="string">"ip"</literal></expr></argument>, <argument><expr><name>MDBX_CREATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbi_ip</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// put data</comment>
  <decl_stmt><decl><type><name>MDBX_val</name></type> <name>_obj_id_rec</name> <init>= <expr><block>{<expr><operator>&amp;</operator><name>record_id</name></expr>, <expr>sizeof<operator>(</operator><name>record_id</name><operator>)</operator></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MDBX_val</name></type> <name>_data_rec</name></decl>;</decl_stmt>
  <comment type="line">// get data</comment>
  <expr_stmt><expr><call><name>MDBX_CHECK</name><argument_list>(<argument><expr><call><name>mdbx_get</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>dbi_session</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_obj_id_rec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_data_rec</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>session_data_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator><name>session_data_t</name> <operator>*</operator><operator>)</operator><name><name>_data_rec</name><operator>.</operator><name>iov_base</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>MDBX_val</name></type> <name>_session_id1_rec</name> <init>= <expr><block>{<expr><name><name>data</name><operator>-&gt;</operator><name>session_id1</name></name></expr>, <macro><name>strlen</name><argument_list>(<argument>data-&gt;session_id1</argument>)</argument_list></macro>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MDBX_val</name></type> <name>_session_id2_rec</name> <init>= <expr><block>{<expr><name><name>data</name><operator>-&gt;</operator><name>session_id2</name></name></expr>, <macro><name>strlen</name><argument_list>(<argument>data-&gt;session_id2</argument>)</argument_list></macro>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MDBX_val</name></type> <name>_ip_rec</name> <init>= <expr><block>{<expr><name><name>data</name><operator>-&gt;</operator><name>ip</name></name></expr>, <macro><name>strlen</name><argument_list>(<argument>data-&gt;ip</argument>)</argument_list></macro>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>MDBX_CHECK</name><argument_list>(<argument><expr><call><name>mdbx_del</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>dbi_session_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_session_id1_rec</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MDBX_CHECK</name><argument_list>(<argument><expr><call><name>mdbx_del</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>dbi_session_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_session_id2_rec</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MDBX_CHECK</name><argument_list>(<argument><expr><call><name>mdbx_del</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>dbi_ip</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_ip_rec</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>event</name><operator>.</operator><name>obj_id</name></name> <operator>=</operator> <name>record_id</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>event</name><operator>.</operator><name>event_type</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>MDBX_val</name></type> <name>_event_rec</name> <init>= <expr><block>{<expr><operator>&amp;</operator><name>event</name></expr>, <expr>sizeof<operator>(</operator><name>event</name><operator>)</operator></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>MDBX_CHECK</name><argument_list>(<argument><expr><call><name>mdbx_del</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>dbi_event</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_event_rec</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MDBX_CHECK</name><argument_list>(<argument><expr><call><name>mdbx_del</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>dbi_session</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_obj_id_rec</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>mdbx_data_size</name> <operator>-=</operator> <operator>(</operator><name><name>_data_rec</name><operator>.</operator><name>iov_len</name></name> <operator>+</operator> <name><name>_obj_id_rec</name><operator>.</operator><name>iov_len</name></name> <operator>*</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>mdbx_key_size</name> <operator>-=</operator>
      <operator>(</operator><name><name>_obj_id_rec</name><operator>.</operator><name>iov_len</name></name> <operator>+</operator> <name><name>_session_id1_rec</name><operator>.</operator><name>iov_len</name></name> <operator>+</operator>
       <name><name>_session_id2_rec</name><operator>.</operator><name>iov_len</name></name> <operator>+</operator> <name><name>_ip_rec</name><operator>.</operator><name>iov_len</name></name> <operator>+</operator> <name><name>_event_rec</name><operator>.</operator><name>iov_len</name></name><operator>)</operator></expr>;</expr_stmt>

  <comment type="line">// transaction commit</comment>
  <expr_stmt><expr><call><name>MDBX_CHECK</name><argument_list>(<argument><expr><call><name>mdbx_txn_commit</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>mdbx_del_count</name><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>mdbx_del_time</name> <operator>+=</operator> <operator>(</operator><call><name>getClockUs</name><argument_list>()</argument_list></call> <operator>-</operator> <name>start</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>db_disconnect</name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>mdbx_env_close</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Connection closed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_db_stat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>ms_branch_pages</name></decl></parameter>,
                        <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>ms_leaf_pages</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>MDBX_txn</name> <modifier>*</modifier></type><name>txn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MDBX_stat</name></type> <name>stat</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MDBX_dbi</name></type> <name>dbi</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>MDBX_CHECK</name><argument_list>(<argument><expr><call><name>mdbx_txn_begin</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MDBX_TXN_RDONLY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>txn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MDBX_CHECK</name><argument_list>(<argument><expr><call><name>mdbx_dbi_open</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>MDBX_CREATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbi</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MDBX_CHECK</name><argument_list>(<argument><expr><call><name>mdbx_dbi_stat</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>dbi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>stat</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mdbx_txn_abort</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%15s | %15"</literal> <name>PRIu64</name> <literal type="string">" | %5u | %10"</literal> <name>PRIu64</name> <literal type="string">" | %10"</literal> <name>PRIu64</name>
         <literal type="string">" | %11"</literal> <name>PRIu64</name> <literal type="string">" |\n"</literal></expr></argument>,
         <argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>stat</name><operator>.</operator><name>ms_branch_pages</name></name></expr></argument>, <argument><expr><name><name>stat</name><operator>.</operator><name>ms_depth</name></name></expr></argument>, <argument><expr><name><name>stat</name><operator>.</operator><name>ms_entries</name></name></expr></argument>,
         <argument><expr><name><name>stat</name><operator>.</operator><name>ms_leaf_pages</name></name></expr></argument>, <argument><expr><name><name>stat</name><operator>.</operator><name>ms_overflow_pages</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ms_branch_pages</name><operator>)</operator> <operator>+=</operator> <name><name>stat</name><operator>.</operator><name>ms_branch_pages</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ms_leaf_pages</name><operator>)</operator> <operator>+=</operator> <name><name>stat</name><operator>.</operator><name>ms_leaf_pages</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>periodic_stat</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>ms_branch_pages</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>ms_leaf_pages</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MDBX_stat</name></type> <name>mst</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MDBX_envinfo</name></type> <name>mei</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>MDBX_CHECK</name><argument_list>(<argument><expr><call><name>mdbx_env_stat_ex</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mst</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mst</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MDBX_CHECK</name><argument_list>(<argument><expr><call><name>mdbx_env_info_ex</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mei</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mei</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Environment Info\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  Pagesize: %u\n"</literal></expr></argument>, <argument><expr><name><name>mst</name><operator>.</operator><name>ms_psize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>mei</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>lower</name></name> <operator>!=</operator> <name><name>mei</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>upper</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  Dynamic datafile: %"</literal> <name>PRIu64</name> <literal type="string">"..%"</literal> <name>PRIu64</name> <literal type="string">" bytes (+%"</literal> <name>PRIu64</name>
           <literal type="string">"/-%"</literal> <name>PRIu64</name> <literal type="string">"), %"</literal> <name>PRIu64</name> <literal type="string">"..%"</literal> <name>PRIu64</name> <literal type="string">" pages (+%"</literal> <name>PRIu64</name>
           <literal type="string">"/-%"</literal> <name>PRIu64</name> <literal type="string">")\n"</literal></expr></argument>,
           <argument><expr><name><name>mei</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>lower</name></name></expr></argument>, <argument><expr><name><name>mei</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>upper</name></name></expr></argument>, <argument><expr><name><name>mei</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>grow</name></name></expr></argument>,
           <argument><expr><name><name>mei</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>shrink</name></name></expr></argument>, <argument><expr><name><name>mei</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>lower</name></name> <operator>/</operator> <name><name>mst</name><operator>.</operator><name>ms_psize</name></name></expr></argument>,
           <argument><expr><name><name>mei</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>upper</name></name> <operator>/</operator> <name><name>mst</name><operator>.</operator><name>ms_psize</name></name></expr></argument>, <argument><expr><name><name>mei</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>grow</name></name> <operator>/</operator> <name><name>mst</name><operator>.</operator><name>ms_psize</name></name></expr></argument>,
           <argument><expr><name><name>mei</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>shrink</name></name> <operator>/</operator> <name><name>mst</name><operator>.</operator><name>ms_psize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  Current datafile: %"</literal> <name>PRIu64</name> <literal type="string">" bytes, %"</literal> <name>PRIu64</name> <literal type="string">" pages\n"</literal></expr></argument>,
           <argument><expr><name><name>mei</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>current</name></name></expr></argument>, <argument><expr><name><name>mei</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>current</name></name> <operator>/</operator> <name><name>mst</name><operator>.</operator><name>ms_psize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  Fixed datafile: %"</literal> <name>PRIu64</name> <literal type="string">" bytes, %"</literal> <name>PRIu64</name> <literal type="string">" pages\n"</literal></expr></argument>,
           <argument><expr><name><name>mei</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>current</name></name></expr></argument>, <argument><expr><name><name>mei</name><operator>.</operator><name>mi_geo</name><operator>.</operator><name>current</name></name> <operator>/</operator> <name><name>mst</name><operator>.</operator><name>ms_psize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  Current mapsize: %"</literal> <name>PRIu64</name> <literal type="string">" bytes, %"</literal> <name>PRIu64</name> <literal type="string">" pages \n"</literal></expr></argument>,
         <argument><expr><name><name>mei</name><operator>.</operator><name>mi_mapsize</name></name></expr></argument>, <argument><expr><name><name>mei</name><operator>.</operator><name>mi_mapsize</name></name> <operator>/</operator> <name><name>mst</name><operator>.</operator><name>ms_psize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  Number of pages used: %"</literal> <name>PRIu64</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>mei</name><operator>.</operator><name>mi_last_pgno</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  Last transaction ID: %"</literal> <name>PRIu64</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>mei</name><operator>.</operator><name>mi_recent_txnid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  Tail transaction ID: %"</literal> <name>PRIu64</name> <literal type="string">" (%"</literal> <name>PRIi64</name> <literal type="string">")\n"</literal></expr></argument>,
         <argument><expr><name><name>mei</name><operator>.</operator><name>mi_latter_reader_txnid</name></name></expr></argument>,
         <argument><expr><name><name>mei</name><operator>.</operator><name>mi_latter_reader_txnid</name></name> <operator>-</operator> <name><name>mei</name><operator>.</operator><name>mi_recent_txnid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  Max readers: %u\n"</literal></expr></argument>, <argument><expr><name><name>mei</name><operator>.</operator><name>mi_maxreaders</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  Number of readers used: %u\n"</literal></expr></argument>, <argument><expr><name><name>mei</name><operator>.</operator><name>mi_numreaders</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"           Name | ms_branch_pages | depth |    entries | leaf_pages "</literal>
         <literal type="string">"| overf_pages |\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>get_db_stat</name><argument_list>(<argument><expr><literal type="string">"session"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ms_branch_pages</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ms_leaf_pages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>get_db_stat</name><argument_list>(<argument><expr><literal type="string">"session_id"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ms_branch_pages</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ms_leaf_pages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>get_db_stat</name><argument_list>(<argument><expr><literal type="string">"event"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ms_branch_pages</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ms_leaf_pages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>get_db_stat</name><argument_list>(<argument><expr><literal type="string">"ip"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ms_branch_pages</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ms_leaf_pages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%15s | %15"</literal> <name>PRIu64</name> <literal type="string">" | %5s | %10s | %10"</literal> <name>PRIu64</name> <literal type="string">" | %11s |\n"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>,
         <argument><expr><name>ms_branch_pages</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>ms_leaf_pages</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><specifier>static</specifier> <name>int64_t</name></type> <name>prev_add_count</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>int64_t</name></type> <name>prev_del_count</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>uint64_t</name></type> <name>prev_add_time</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>uint64_t</name></type> <name>prev_del_time</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>int64_t</name></type> <name>t</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>t</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>delta</name> <init>= <expr><operator>(</operator><call><name>getClockUs</name><argument_list>()</argument_list></call> <operator>-</operator> <name>t</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"CPS: add %"</literal> <name>PRIu64</name> <literal type="string">", delete %"</literal> <name>PRIu64</name>
           <literal type="string">", items processed - %"</literal> <name>PRIu64</name> <literal type="string">"K data=%"</literal> <name>PRIu64</name> <literal type="string">"K key=%"</literal> <name>PRIu64</name>
           <literal type="string">"K\n"</literal></expr></argument>,
           <argument><expr><operator>(</operator><name>mdbx_add_count</name> <operator>-</operator> <name>prev_add_count</name><operator>)</operator> <operator>*</operator> <literal type="number">1000000</literal> <operator>/</operator> <name>delta</name></expr></argument>,
           <argument><expr><operator>(</operator><name>mdbx_del_count</name> <operator>-</operator> <name>prev_del_count</name><operator>)</operator> <operator>*</operator> <literal type="number">1000000</literal> <operator>/</operator> <name>delta</name></expr></argument>, <argument><expr><name>obj_id</name> <operator>/</operator> <literal type="number">1024</literal></expr></argument>,
           <argument><expr><name>mdbx_data_size</name> <operator>/</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><name>mdbx_key_size</name> <operator>/</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"usage data=%"</literal> <name>PRIu64</name> <literal type="string">"%%"</literal></expr></argument>,
           <argument><expr><operator>(</operator><operator>(</operator><name>mdbx_data_size</name> <operator>+</operator> <name>mdbx_key_size</name><operator>)</operator> <operator>*</operator> <literal type="number">100</literal><operator>)</operator> <operator>/</operator>
               <operator>(</operator><operator>(</operator><name>ms_leaf_pages</name> <operator>+</operator> <name>ms_branch_pages</name><operator>)</operator> <operator>*</operator> <literal type="number">4096</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>prev_add_time</name> <operator>!=</operator> <name>mdbx_add_time</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" Add : %"</literal> <name>PRIu64</name> <literal type="string">" c/s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>mdbx_add_count</name> <operator>-</operator> <name>prev_add_count</name><operator>)</operator> <operator>*</operator>
                                           <literal type="number">1000000</literal> <operator>/</operator>
                                           <operator>(</operator><name>mdbx_add_time</name> <operator>-</operator> <name>prev_add_time</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>prev_del_time</name> <operator>!=</operator> <name>mdbx_del_time</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" Del : %"</literal> <name>PRIu64</name> <literal type="string">" c/s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>mdbx_del_count</name> <operator>-</operator> <name>prev_del_count</name><operator>)</operator> <operator>*</operator>
                                           <literal type="number">1000000</literal> <operator>/</operator>
                                           <operator>(</operator><name>mdbx_del_time</name> <operator>-</operator> <name>prev_del_time</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>mdbx_add_time</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" tAdd : %"</literal> <name>PRIu64</name> <literal type="string">" c/s"</literal></expr></argument>,
             <argument><expr><name>mdbx_add_count</name> <operator>*</operator> <literal type="number">1000000</literal> <operator>/</operator> <name>mdbx_add_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>mdbx_del_time</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" tDel : %"</literal> <name>PRIu64</name> <literal type="string">" c/s"</literal></expr></argument>,
             <argument><expr><name>mdbx_del_count</name> <operator>*</operator> <literal type="number">1000000</literal> <operator>/</operator> <name>mdbx_del_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>getClockUs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>prev_add_count</name> <operator>=</operator> <name>mdbx_add_count</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>prev_del_count</name> <operator>=</operator> <name>mdbx_del_count</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>prev_add_time</name> <operator>=</operator> <name>mdbx_add_time</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>prev_del_time</name> <operator>=</operator> <name>mdbx_del_time</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> <comment type="block">/* unused */</comment>
static void periodic_add_rec() {
  for (int i = 0; i &lt; 10240; i++) {
    if (ids_count &lt;= REC_COUNT) {
      int64_t id = obj_id++;
      create_record(id);
      add_id_to_pool(id);
    }
    if (ids_count &gt; REC_COUNT) {
      int64_t id = get_id_from_pool();
      delete_record(id);
    }
  }
  periodic_stat();
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>argc</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>argv</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>filename</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>opt_db_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>MDBX_DATANAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>remove</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>opt_db_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>MDBX_LOCKNAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>remove</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"Open DB..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>db_connect</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"Create data..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>t</name> <init>= <expr><call><name>getClockUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>REC_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>id</name> <init>= <expr><name>obj_id</name><operator>++</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>create_record</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>add_id_to_pool</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">1000</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>now</name> <init>= <expr><call><name>getClockUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>now</name> <operator>-</operator> <name>t</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">1000000L</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>periodic_stat</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>periodic_stat</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1000</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>id</name> <init>= <expr><name>obj_id</name><operator>++</operator></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>create_record</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>add_id_to_pool</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>get_id_from_pool</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>delete_record</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">50</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>id</name> <init>= <expr><name>obj_id</name><operator>++</operator></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>create_record</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>add_id_to_pool</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>id</name> <init>= <expr><name>obj_id</name><operator>++</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>create_record</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>add_id_to_pool</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>now</name> <init>= <expr><call><name>getClockUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>now</name> <operator>-</operator> <name>t</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">10000000L</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>periodic_stat</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>t</name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>db_disconnect</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
