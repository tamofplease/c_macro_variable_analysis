<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/orioledb/src/btree/build.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * build.c
 *		Routines for sort-based B-tree index building.
 *
 * Copyright (c) 2021-2022, Oriole DB Inc.
 *
 * IDENTIFICATION
 *	  contrib/orioledb/src/btree/build.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"orioledb.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"btree/build.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"btree/insert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"btree/io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"btree/page_chunks.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"btree/split.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"checkpoint/checkpoint.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"recovery/recovery.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tableam/descr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tuple/toast.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tuple/sort.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transam/oxid.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/seq_buf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/genam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/relation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/index.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/namespace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/defrem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgstat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memdebug.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>OIndexBuildStackItem</name>
<block>{
	<decl_stmt><decl><type><name>char</name></type>		<name><name>img</name><index>[<expr><name>ORIOLEDB_BLCKSZ</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BTreePageItemLocator</name></type> <name>loc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OFixedKey</name></type>	<name>key</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>keysize</name></decl>;</decl_stmt>
}</block></struct></type> <name>OIndexBuildStackItem</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>put_item_to_stack</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>OIndexBuildStackItem</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>,
							  <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>OTuple</name></type> <name>tuple</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tuplesize</name></decl></parameter>,
							  <parameter><decl><type><name>Pointer</name></type> <name>tupleheader</name></decl></parameter>, <parameter><decl><type><name>LocationIndex</name></type> <name>header_size</name></decl></parameter>,
							  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>root_level</name></decl></parameter>, <parameter><decl><type><name>BTreeMetaPage</name> <modifier>*</modifier></type><name>metaPageBlkno</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>put_tuple_to_stack</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>OIndexBuildStackItem</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>,
							   <parameter><decl><type><name>OTuple</name></type> <name>tuple</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>root_level</name></decl></parameter>,
							   <parameter><decl><type><name>BTreeMetaPage</name> <modifier>*</modifier></type><name>metaPageBlkno</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>put_downlink_to_stack</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>OIndexBuildStackItem</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>,
								  <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>downlink</name></decl></parameter>, <parameter><decl><type><name>OTuple</name></type> <name>key</name></decl></parameter>,
								  <parameter><decl><type><name>int</name></type> <name>keysize</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>root_level</name></decl></parameter>,
								  <parameter><decl><type><name>BTreeMetaPage</name> <modifier>*</modifier></type><name>metaPageBlkno</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>stack_page_split</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>OIndexBuildStackItem</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>,
				 <parameter><decl><type><name>OTuple</name></type> <name>tuple</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tuplesize</name></decl></parameter>, <parameter><decl><type><name>Pointer</name></type> <name>tupleheader</name></decl></parameter>,
				 <parameter><decl><type><name>LocationIndex</name></type> <name>header_size</name></decl></parameter>, <parameter><decl><type><name>Page</name></type> <name>new_page</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Page</name></type>		<name>img</name> <init>= <expr><name><name>stack</name><index>[<expr><name>level</name></expr>]</index></name><operator>.</operator><name>img</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OffsetNumber</name></type> <name>left_count</name></decl>,
				<decl><type ref="prev"/><name>rightbound_key_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>key_palloc</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Pointer</name></type>		<name>tuple_ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTuple</name></type>		<name>rightbound_key</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>leaf</name> <init>= <expr><call><name>O_PAGE_IS</name><argument_list>(<argument><expr><name>img</name></expr></argument>, <argument><expr><name>LEAF</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BTreePageItemLocator</name></type> <name>loc</name></decl>,
				<decl><type ref="prev"/><name>newLoc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BTreePageItem</name></type> <name><name>items</name><index>[<expr><name>BTREE_PAGE_MAX_CHUNK_ITEMS</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OffsetNumber</name></type> <name>offset</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>btree_page_update_max_key_len</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>img</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>BTREE_PAGE_LOCATOR_GET_OFFSET</name><argument_list>(<argument><expr><name>img</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stack</name><index>[<expr><name>level</name></expr>]</index></name><operator>.</operator><name>loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>left_count</name> <operator>=</operator> <call><name>btree_page_split_location</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>img</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,
										   <argument><expr><name>tuplesize</name></expr></argument>, <argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,
										   <argument><expr><literal type="number">0.9</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>COMMITSEQNO_INPROGRESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


	<comment type="block">/* Distribute the tuples according the the split location */</comment>
	<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>BTREE_PAGE_LOCATOR_FIRST</name><argument_list>(<argument><expr><name>img</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>left_count</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>BTREE_PAGE_LOCATOR_IS_VALID</name><argument_list>(<argument><expr><name>img</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>loc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * In leaf pages, get rid of tuples deleted by finished transactions.
		 * Also, resize tuples to minimal size.  In non-leaf pages, copy
		 * tuples as-is.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>leaf</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>BTreeLeafTuphdr</name> <modifier>*</modifier></type><name>tupHdr</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>OTuple</name></type>		<name>tup</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>bool</name></type>		<name>finished</name></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>BTREE_PAGE_READ_LEAF_ITEM</name><argument_list>(<argument><expr><name>tupHdr</name></expr></argument>, <argument><expr><name>tup</name></expr></argument>, <argument><expr><name>img</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>finished</name> <operator>=</operator> <call><name>XACT_INFO_FINISHED_FOR_EVERYBODY</name><argument_list>(<argument><expr><name><name>tupHdr</name><operator>-&gt;</operator><name>xactInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>finished</name> <operator>&amp;&amp;</operator> <name><name>tupHdr</name><operator>-&gt;</operator><name>deleted</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>left_count</name><operator>--</operator></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <operator>(</operator><name>Pointer</name><operator>)</operator> <name>tupHdr</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <name><name>tup</name><operator>.</operator><name>formatFlags</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <ternary><condition><expr><name>finished</name></expr> ?</condition><then>
				<expr><operator>(</operator><name>BTreeLeafTuphdrSize</name> <operator>+</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><call><name>o_btree_len</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>tup</name></expr></argument>, <argument><expr><name>OTupleLength</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr> </then><else>:
				<expr><call><name>BTREE_PAGE_GET_ITEM_SIZE</name><argument_list>(<argument><expr><name>img</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>loc</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>newItem</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <call><name>BTREE_PAGE_LOCATOR_GET_ITEM</name><argument_list>(<argument><expr><name>img</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <call><name>BTREE_PAGE_GET_ITEM_FLAGS</name><argument_list>(<argument><expr><name>img</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <call><name>BTREE_PAGE_GET_ITEM_SIZE</name><argument_list>(<argument><expr><name>img</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>newItem</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>BTREE_PAGE_LOCATOR_NEXT</name><argument_list>(<argument><expr><name>img</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>BTREE_PAGE_LOCATOR_FIRST</name><argument_list>(<argument><expr><name>new_page</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newLoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><call><name>BTREE_PAGE_LOCATOR_IS_VALID</name><argument_list>(<argument><expr><name>img</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>loc</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>LocationIndex</name></type> <name>itemsize</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>itemsize</name> <operator>=</operator> <call><name>BTREE_PAGE_GET_ITEM_SIZE</name><argument_list>(<argument><expr><name>img</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>page_locator_insert_item</name><argument_list>(<argument><expr><name>new_page</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newLoc</name></expr></argument>, <argument><expr><name>itemsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>BTREE_PAGE_LOCATOR_GET_ITEM</name><argument_list>(<argument><expr><name>new_page</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newLoc</name></expr></argument>)</argument_list></call></expr></argument>,
			   <argument><expr><call><name>BTREE_PAGE_LOCATOR_GET_ITEM</name><argument_list>(<argument><expr><name>img</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>loc</name></expr></argument>)</argument_list></call></expr></argument>,
			   <argument><expr><name>itemsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>BTREE_PAGE_SET_ITEM_FLAGS</name><argument_list>(<argument><expr><name>new_page</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newLoc</name></expr></argument>, <argument><expr><call><name>BTREE_PAGE_GET_ITEM_FLAGS</name><argument_list>(<argument><expr><name><name>stack</name><index>[<expr><name>level</name></expr>]</index></name><operator>.</operator><name>img</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>loc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>BTREE_PAGE_LOCATOR_NEXT</name><argument_list>(<argument><expr><name>img</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>BTREE_PAGE_LOCATOR_NEXT</name><argument_list>(<argument><expr><name>new_page</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newLoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>BTREE_PAGE_LOCATOR_TAIL</name><argument_list>(<argument><expr><name>new_page</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newLoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>page_locator_insert_item</name><argument_list>(<argument><expr><name>new_page</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newLoc</name></expr></argument>,
							 <argument><expr><call><name>MAXALIGN</name><argument_list>(<argument><expr><name>tuplesize</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>header_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tuple_ptr</name> <operator>=</operator> <call><name>BTREE_PAGE_LOCATOR_GET_ITEM</name><argument_list>(<argument><expr><name>new_page</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newLoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tuple_ptr</name></expr></argument>, <argument><expr><name>tupleheader</name></expr></argument>, <argument><expr><name>header_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tuple_ptr</name> <operator>+=</operator> <name>header_size</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tuple_ptr</name></expr></argument>, <argument><expr><name><name>tuple</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>tuplesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>BTREE_PAGE_SET_ITEM_FLAGS</name><argument_list>(<argument><expr><name>new_page</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newLoc</name></expr></argument>, <argument><expr><name><name>tuple</name><operator>.</operator><name>formatFlags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Setup the new high key on the left page */</comment>
	<expr_stmt><expr><call><name>BTREE_PAGE_LOCATOR_FIRST</name><argument_list>(<argument><expr><name>new_page</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newLoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>BTREE_PAGE_READ_TUPLE</name><argument_list>(<argument><expr><name>rightbound_key</name></expr></argument>, <argument><expr><name>new_page</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newLoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>leaf</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>rightbound_key</name> <operator>=</operator> <call><name>o_btree_tuple_make_key</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>rightbound_key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key_palloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>rightbound_key_size</name> <operator>=</operator> <call><name>o_btree_len</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>rightbound_key</name></expr></argument>, <argument><expr><name>OKeyLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>rightbound_key_size</name> <operator>=</operator> <call><name>BTREE_PAGE_GET_ITEM_SIZE</name><argument_list>(<argument><expr><name>new_page</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newLoc</name></expr></argument>)</argument_list></call> <operator>-</operator>
			<name>header_size</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>btree_page_reorg</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>img</name></expr></argument>, <argument><expr><name>items</name></expr></argument>, <argument><expr><name>left_count</name></expr></argument>,
					 <argument><expr><name>rightbound_key_size</name></expr></argument>, <argument><expr><name>rightbound_key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>key_palloc</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>rightbound_key</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>put_item_to_stack</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>OIndexBuildStackItem</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>,
				  <parameter><decl><type><name>OTuple</name></type> <name>tuple</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tuplesize</name></decl></parameter>, <parameter><decl><type><name>Pointer</name></type> <name>tupleheader</name></decl></parameter>,
				  <parameter><decl><type><name>LocationIndex</name></type> <name>header_size</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>root_level</name></decl></parameter>,
				  <parameter><decl><type><name>BTreeMetaPage</name> <modifier>*</modifier></type><name>metaPageBlkno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BTreeItemPageFitType</name></type> <name>fit</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Pointer</name></type>		<name>tuple_ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type>		<name>downlink</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>level</name> <operator>&lt;</operator> <name>ORIOLEDB_MAX_DEPTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>fit</name> <operator>=</operator> <call><name>page_locator_fits_item</name><argument_list>(<argument><expr><name>desc</name></expr></argument>,
								 <argument><expr><name><name>stack</name><index>[<expr><name>level</name></expr>]</index></name><operator>.</operator><name>img</name></expr></argument>,
								 <argument><expr><operator>&amp;</operator><name><name>stack</name><index>[<expr><name>level</name></expr>]</index></name><operator>.</operator><name>loc</name></expr></argument>,
								 <argument><expr><call><name>MAXALIGN</name><argument_list>(<argument><expr><name>tuplesize</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>header_size</name></expr></argument>,
								 <argument><expr><name>false</name></expr></argument>,
								 <argument><expr><name>COMMITSEQNO_INPROGRESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>fit</name> <operator>==</operator> <name>BTreeItemPageFitAsIs</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>page_locator_insert_item</name><argument_list>(<argument><expr><name><name>stack</name><index>[<expr><name>level</name></expr>]</index></name><operator>.</operator><name>img</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stack</name><index>[<expr><name>level</name></expr>]</index></name><operator>.</operator><name>loc</name></expr></argument>,
								 <argument><expr><call><name>MAXALIGN</name><argument_list>(<argument><expr><name>tuplesize</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>header_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>tuple_ptr</name> <operator>=</operator> <call><name>BTREE_PAGE_LOCATOR_GET_ITEM</name><argument_list>(<argument><expr><name><name>stack</name><index>[<expr><name>level</name></expr>]</index></name><operator>.</operator><name>img</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stack</name><index>[<expr><name>level</name></expr>]</index></name><operator>.</operator><name>loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tuple_ptr</name></expr></argument>, <argument><expr><name>tupleheader</name></expr></argument>, <argument><expr><name>header_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>tuple_ptr</name> <operator>+=</operator> <name>header_size</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tuple_ptr</name></expr></argument>, <argument><expr><name><name>tuple</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>tuplesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>BTREE_PAGE_SET_ITEM_FLAGS</name><argument_list>(<argument><expr><name><name>stack</name><index>[<expr><name>level</name></expr>]</index></name><operator>.</operator><name>img</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stack</name><index>[<expr><name>level</name></expr>]</index></name><operator>.</operator><name>loc</name></expr></argument>, <argument><expr><name><name>tuple</name><operator>.</operator><name>formatFlags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>BTREE_PAGE_LOCATOR_NEXT</name><argument_list>(<argument><expr><name><name>stack</name><index>[<expr><name>level</name></expr>]</index></name><operator>.</operator><name>img</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stack</name><index>[<expr><name>level</name></expr>]</index></name><operator>.</operator><name>loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>FileExtent</name></type>	<name>extent</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name></type>		<name><name>new_page</name><index>[<expr><name>ORIOLEDB_BLCKSZ</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>OFixedKey</name></type>	<name>key</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>keysize</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>BTreePageHeader</name> <modifier>*</modifier></type><name>new_page_header</name> <init>= <expr><operator>(</operator><name>BTreePageHeader</name> <operator>*</operator><operator>)</operator> <name>new_page</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>BTreePageHeader</name> <modifier>*</modifier></type><name>header</name> <init>= <expr><operator>(</operator><name>BTreePageHeader</name> <operator>*</operator><operator>)</operator> <name><name>stack</name><index>[<expr><name>level</name></expr>]</index></name><operator>.</operator><name>img</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>BTreePageHeader</name> <modifier>*</modifier></type><name>parent_header</name> <init>= <expr><operator>(</operator><name>BTreePageHeader</name> <operator>*</operator><operator>)</operator> <name><name>stack</name><index>[<expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>img</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>new_page_header</name><operator>-&gt;</operator><name>rightLink</name></name> <operator>=</operator> <name>InvalidRightLink</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>new_page_header</name><operator>-&gt;</operator><name>csn</name></name> <operator>=</operator> <name>COMMITSEQNO_FROZEN</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>new_page_header</name><operator>-&gt;</operator><name>undoLocation</name></name> <operator>=</operator> <name>InvalidUndoLocation</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>new_page_header</name><operator>-&gt;</operator><name>checkpointNum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>new_page_header</name><operator>-&gt;</operator><name>prevInsertOffset</name></name> <operator>=</operator> <name>MaxOffsetNumber</name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>new_page_header</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>O_BTREE_FLAG_RIGHTMOST</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>level</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>new_page_header</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>O_BTREE_FLAG_LEAF</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PAGE_SET_LEVEL</name><argument_list>(<argument><expr><name>new_page</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><call><name>init_page_first_chunk</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>new_page</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>rightLink</name></name> <operator>=</operator> <name>InvalidRightLink</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>csn</name></name> <operator>=</operator> <name>COMMITSEQNO_FROZEN</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>undoLocation</name></name> <operator>=</operator> <name>InvalidUndoLocation</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>checkpointNum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>prevInsertOffset</name></name> <operator>=</operator> <name>MaxOffsetNumber</name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>O_BTREE_FLAG_RIGHTMOST</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>level</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>O_BTREE_FLAG_LEAF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>stack_page_split</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>stack</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>tuplesize</name></expr></argument>, <argument><expr><name>tupleheader</name></expr></argument>,
						 <argument><expr><name>header_size</name></expr></argument>, <argument><expr><name>new_page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>level</name> <operator>==</operator> <operator>*</operator><name>root_level</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>parent_header</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>O_BTREE_FLAG_RIGHTMOST</name> <operator>|</operator> <name>O_BTREE_FLAG_LEFTMOST</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>O_BTREE_FLAG_LEFTMOST</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>level</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>PAGE_SET_LEVEL</name><argument_list>(<argument><expr><name><name>stack</name><index>[<expr><name>level</name></expr>]</index></name><operator>.</operator><name>img</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><operator>*</operator><name>root_level</name> <operator>=</operator> <name>level</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>level</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PAGE_SET_N_ONDISK</name><argument_list>(<argument><expr><name><name>stack</name><index>[<expr><name>level</name></expr>]</index></name><operator>.</operator><name>img</name></expr></argument>,
							  <argument><expr><call><name>BTREE_PAGE_ITEMS_COUNT</name><argument_list>(<argument><expr><name><name>stack</name><index>[<expr><name>level</name></expr>]</index></name><operator>.</operator><name>img</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* write old page to disk */</comment>

		<expr_stmt><expr><name><name>extent</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>InvalidFileExtentLen</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>extent</name><operator>.</operator><name>off</name></name> <operator>=</operator> <name>InvalidFileExtentOff</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>VALGRIND_CHECK_MEM_IS_DEFINED</name><argument_list>(<argument><expr><name><name>stack</name><index>[<expr><name>level</name></expr>]</index></name><operator>.</operator><name>img</name></expr></argument>, <argument><expr><name>ORIOLEDB_BLCKSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>downlink</name> <operator>=</operator> <call><name>perform_page_io_build</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name><name>stack</name><index>[<expr><name>level</name></expr>]</index></name><operator>.</operator><name>img</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>extent</name></expr></argument>, <argument><expr><name>metaPageBlkno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>level</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pg_atomic_add_fetch_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>metaPageBlkno</name><operator>-&gt;</operator><name>leafPagesNum</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>copy_fixed_key</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name><name>stack</name><index>[<expr><name>level</name></expr>]</index></name><operator>.</operator><name><name>key</name><operator>.</operator><name>tuple</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>keysize</name> <operator>=</operator> <name><name>stack</name><index>[<expr><name>level</name></expr>]</index></name><operator>.</operator><name>keysize</name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>stack</name><index>[<expr><name>level</name></expr>]</index></name><operator>.</operator><name>keysize</name> <operator>=</operator> <call><name>BTREE_PAGE_GET_HIKEY_SIZE</name><argument_list>(<argument><expr><name><name>stack</name><index>[<expr><name>level</name></expr>]</index></name><operator>.</operator><name>img</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>copy_fixed_hikey</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stack</name><index>[<expr><name>level</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>, <argument><expr><name><name>stack</name><index>[<expr><name>level</name></expr>]</index></name><operator>.</operator><name>img</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ORIOLEDB_CUT_FIRST_KEY</name></cpp:ifdef>
			<expr_stmt><expr><call><name>page_cut_first_key</name><argument_list>(<argument><expr><name>new_page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* copy new page to stack */</comment>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>stack</name><index>[<expr><name>level</name></expr>]</index></name><operator>.</operator><name>img</name></expr></argument>, <argument><expr><name>new_page</name></expr></argument>, <argument><expr><name>ORIOLEDB_BLCKSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>BTREE_PAGE_LOCATOR_TAIL</name><argument_list>(<argument><expr><name><name>stack</name><index>[<expr><name>level</name></expr>]</index></name><operator>.</operator><name>img</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stack</name><index>[<expr><name>level</name></expr>]</index></name><operator>.</operator><name>loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>put_downlink_to_stack</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>stack</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>downlink</name></expr></argument>,
							  <argument><expr><name><name>key</name><operator>.</operator><name>tuple</name></name></expr></argument>, <argument><expr><name>keysize</name></expr></argument>,
							  <argument><expr><name>root_level</name></expr></argument>, <argument><expr><name>metaPageBlkno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>put_downlink_to_stack</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>OIndexBuildStackItem</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>,
					  <parameter><decl><type><name>uint64</name></type> <name>downlink</name></decl></parameter>, <parameter><decl><type><name>OTuple</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keysize</name></decl></parameter>,
					  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>root_level</name></decl></parameter>, <parameter><decl><type><name>BTreeMetaPage</name> <modifier>*</modifier></type><name>metaPageBlkno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BTreeNonLeafTuphdr</name></type> <name>internal_header</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>internal_header</name><operator>.</operator><name>downlink</name></name> <operator>=</operator> <name>downlink</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>put_item_to_stack</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>stack</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keysize</name></expr></argument>,
							   <argument><expr><operator>(</operator><name>Pointer</name><operator>)</operator> <operator>&amp;</operator><name>internal_header</name></expr></argument>,
							   <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>internal_header</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>root_level</name></expr></argument>,
							   <argument><expr><name>metaPageBlkno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>put_tuple_to_stack</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>OIndexBuildStackItem</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>,
				   <parameter><decl><type><name>OTuple</name></type> <name>tuple</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>root_level</name></decl></parameter>, <parameter><decl><type><name>BTreeMetaPage</name> <modifier>*</modifier></type><name>metaPageBlkno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BTreeLeafTuphdr</name></type> <name>leaf_header</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>tuplesize</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>leaf_header</name><operator>.</operator><name>deleted</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>leaf_header</name><operator>.</operator><name>undoLocation</name></name> <operator>=</operator> <name>InvalidUndoLocation</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>leaf_header</name><operator>.</operator><name>xactInfo</name></name> <operator>=</operator> <call><name>OXID_GET_XACT_INFO</name><argument_list>(<argument><expr><name>BootstrapTransactionId</name></expr></argument>, <argument><expr><name>RowLockUpdate</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><empty_stmt>;</empty_stmt>
	<expr_stmt><expr><name>tuplesize</name> <operator>=</operator> <call><name>o_btree_len</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>OTupleLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>put_item_to_stack</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>stack</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
							 <argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>tuplesize</name></expr></argument>, <argument><expr><operator>(</operator><name>Pointer</name><operator>)</operator> <operator>&amp;</operator><name>leaf_header</name></expr></argument>,
							 <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>leaf_header</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>root_level</name></expr></argument>, <argument><expr><name>metaPageBlkno</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>btree_write_index_data</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>TupleDesc</name></type> <name>tupdesc</name></decl></parameter>,
					   <parameter><decl><type><name>Tuplesortstate</name> <modifier>*</modifier></type><name>sortstate</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>ctid</name></decl></parameter>,
					   <parameter><decl><type><name>CheckpointFileHeader</name> <modifier>*</modifier></type><name>file_header</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTuple</name></type>		<name>idx_tup</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OIndexBuildStackItem</name> <modifier>*</modifier></type><name>stack</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>root_level</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
				<decl><type ref="prev"/><name>saved_root_level</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Page</name></type>		<name>root_page</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type>		<name>downlink</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BTreePageHeader</name> <modifier>*</modifier></type><name>root_page_header</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FileExtent</name></type>	<name>extent</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BTreeMetaPage</name></type> <name>metaPageBlkno</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name>	   <modifier>*</modifier></type><name>values</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name>	   <modifier>*</modifier></type><name>isnull</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>btree_open_smgr</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>stack</name> <operator>=</operator> <operator>(</operator><name>OIndexBuildStackItem</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OIndexBuildStackItem</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>ORIOLEDB_MAX_DEPTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>values</name> <operator>=</operator> <operator>(</operator><name>Datum</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>tupdesc</name><operator>-&gt;</operator><name>natts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>isnull</name> <operator>=</operator> <operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>tupdesc</name><operator>-&gt;</operator><name>natts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pg_atomic_init_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>metaPageBlkno</name><operator>.</operator><name>datafileLength</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_atomic_init_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>metaPageBlkno</name><operator>.</operator><name>numFreeBlocks</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_atomic_init_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>metaPageBlkno</name><operator>.</operator><name>leafPagesNum</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_atomic_init_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>metaPageBlkno</name><operator>.</operator><name>ctid</name></name></expr></argument>, <argument><expr><name>ctid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ORIOLEDB_MAX_DEPTH</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<comment type="block">/* init_page_first_chunk() needs leaf flag to be set */</comment>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>(</operator><operator>(</operator><name>BTreePageHeader</name> <operator>*</operator><operator>)</operator> <name><name>stack</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>img</name><operator>)</operator><operator>-&gt;</operator><name>flags</name> <operator>=</operator> <name>O_BTREE_FLAG_LEAF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>init_page_first_chunk</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name><name>stack</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>img</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>BTREE_PAGE_LOCATOR_FIRST</name><argument_list>(<argument><expr><name><name>stack</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>img</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stack</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>idx_tup</name> <operator>=</operator> <call><name>tuplesort_getotuple</name><argument_list>(<argument><expr><name>sortstate</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>!</operator><call><name>O_TUPLE_IS_NULL</name><argument_list>(<argument><expr><name>idx_tup</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>o_tuple_size</name><argument_list>(<argument><expr><name>idx_tup</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>OIndexDescr</name> <operator>*</operator><operator>)</operator> <name><name>desc</name><operator>-&gt;</operator><name>arg</name></name><operator>)</operator><operator>-&gt;</operator><name>leafSpec</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>O_BTREE_MAX_TUPLE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>put_tuple_to_stack</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>stack</name></expr></argument>, <argument><expr><name>idx_tup</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>root_level</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>metaPageBlkno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>idx_tup</name> <operator>=</operator> <call><name>tuplesort_getotuple</name><argument_list>(<argument><expr><name>sortstate</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>saved_root_level</name> <operator>=</operator> <name>root_level</name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>saved_root_level</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>FileExtent</name></type>	<name>extent</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PAGE_SET_N_ONDISK</name><argument_list>(<argument><expr><name><name>stack</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>img</name></expr></argument>, <argument><expr><call><name>BTREE_PAGE_ITEMS_COUNT</name><argument_list>(<argument><expr><name><name>stack</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>img</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>extent</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>InvalidFileExtentLen</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>extent</name><operator>.</operator><name>off</name></name> <operator>=</operator> <name>InvalidFileExtentOff</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>VALGRIND_CHECK_MEM_IS_DEFINED</name><argument_list>(<argument><expr><name><name>stack</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>img</name></expr></argument>, <argument><expr><name>ORIOLEDB_BLCKSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>split_page_by_chunks</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name><name>stack</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>img</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>downlink</name> <operator>=</operator> <call><name>perform_page_io_build</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name><name>stack</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>img</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>extent</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>metaPageBlkno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pg_atomic_add_fetch_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>metaPageBlkno</name><operator>.</operator><name>leafPagesNum</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>put_downlink_to_stack</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>stack</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>downlink</name></expr></argument>,
							  <argument><expr><name><name>stack</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>key</name><operator>.</operator><name>tuple</name></name></expr></argument>, <argument><expr><name><name>stack</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>keysize</name></expr></argument>,
							  <argument><expr><operator>&amp;</operator><name>root_level</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>metaPageBlkno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>root_page</name> <operator>=</operator> <name><name>stack</name><index>[<expr><name>root_level</name></expr>]</index></name><operator>.</operator><name>img</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>root_page_header</name> <operator>=</operator> <operator>(</operator><name>BTreePageHeader</name> <operator>*</operator><operator>)</operator> <name>root_page</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>root_level</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>root_page_header</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>O_BTREE_FLAGS_ROOT_INIT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>root_page_header</name><operator>-&gt;</operator><name>rightLink</name></name> <operator>=</operator> <name>InvalidRightLink</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>root_page_header</name><operator>-&gt;</operator><name>csn</name></name> <operator>=</operator> <name>COMMITSEQNO_FROZEN</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>root_page_header</name><operator>-&gt;</operator><name>undoLocation</name></name> <operator>=</operator> <name>InvalidUndoLocation</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>root_page_header</name><operator>-&gt;</operator><name>checkpointNum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>root_page_header</name><operator>-&gt;</operator><name>prevInsertOffset</name></name> <operator>=</operator> <name>MaxOffsetNumber</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>O_PAGE_IS</name><argument_list>(<argument><expr><name>root_page</name></expr></argument>, <argument><expr><name>LEAF</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>PAGE_SET_N_ONDISK</name><argument_list>(<argument><expr><name>root_page</name></expr></argument>, <argument><expr><call><name>BTREE_PAGE_ITEMS_COUNT</name><argument_list>(<argument><expr><name>root_page</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PAGE_SET_LEVEL</name><argument_list>(<argument><expr><name>root_page</name></expr></argument>, <argument><expr><name>root_level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>extent</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>InvalidFileExtentLen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>extent</name><operator>.</operator><name>off</name></name> <operator>=</operator> <name>InvalidFileExtentOff</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>VALGRIND_CHECK_MEM_IS_DEFINED</name><argument_list>(<argument><expr><name>root_page</name></expr></argument>, <argument><expr><name>ORIOLEDB_BLCKSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>split_page_by_chunks</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>root_page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>downlink</name> <operator>=</operator> <call><name>perform_page_io_build</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>root_page</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>extent</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>metaPageBlkno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>root_level</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_atomic_add_fetch_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>metaPageBlkno</name><operator>.</operator><name>leafPagesNum</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>btree_close_smgr</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>file_header</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>file_header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>file_header</name><operator>-&gt;</operator><name>rootDownlink</name></name> <operator>=</operator> <name>downlink</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>file_header</name><operator>-&gt;</operator><name>datafileLength</name></name> <operator>=</operator> <call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>metaPageBlkno</name><operator>.</operator><name>datafileLength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>file_header</name><operator>-&gt;</operator><name>numFreeBlocks</name></name> <operator>=</operator> <call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>metaPageBlkno</name><operator>.</operator><name>numFreeBlocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>file_header</name><operator>-&gt;</operator><name>leafPagesNum</name></name> <operator>=</operator> <call><name>pg_atomic_read_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>metaPageBlkno</name><operator>.</operator><name>leafPagesNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>file_header</name><operator>-&gt;</operator><name>ctid</name></name> <operator>=</operator> <call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>metaPageBlkno</name><operator>.</operator><name>ctid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>btree_write_file_header</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>,
						<parameter><decl><type><name>CheckpointFileHeader</name> <modifier>*</modifier></type><name>file_header</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SeqBufTag</name></type>	<name>prev_chkp_tag</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>checkpoint_concurrent</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>map_filename</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>File</name></type>		<name>file</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prev_chkp_tag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>prev_chkp_tag</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>prev_chkp_tag</name><operator>.</operator><name>datoid</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>datoid</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>prev_chkp_tag</name><operator>.</operator><name>relnode</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>relnode</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>prev_chkp_tag</name><operator>.</operator><name>num</name></name> <operator>=</operator> <call><name>get_cur_checkpoint_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>desc</name><operator>-&gt;</operator><name>oids</name></name></expr></argument>,
												  <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>type</name></name></expr></argument>,
												  <argument><expr><operator>&amp;</operator><name>checkpoint_concurrent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>prev_chkp_tag</name><operator>.</operator><name>type</name></name> <operator>=</operator> <literal type="char">'m'</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>map_filename</name> <operator>=</operator> <call><name>get_seq_buf_filename</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prev_chkp_tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>PathNameOpenFile</name><argument_list>(<argument><expr><name>map_filename</name></expr></argument>, <argument><expr><name>O_WRONLY</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>PG_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>OFileWrite</name><argument_list>(<argument><expr><name>file</name></expr></argument>,
				   <argument><expr><operator>(</operator><name>Pointer</name><operator>)</operator> <name>file_header</name></expr></argument>,
				   <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CheckpointFileHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>,
				   <argument><expr><literal type="number">0</literal></expr></argument>,
				   <argument><expr><name>WAIT_EVENT_DATA_FILE_WRITE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CheckpointFileHeader</name></expr></argument>)</argument_list></sizeof></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
						<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Could not write checkpoint header to file: %s"</literal></expr></argument>, <argument><expr><name>map_filename</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>FileClose</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>map_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
