<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/orioledb/src/btree/page_state.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * page_state.c
 *		OrioleDB B-tree page locking, waiting, reading etc.
 *
 * Copyright (c) 2021-2022, Oriole DB Inc.
 *
 * IDENTIFICATION
 *	  contrib/orioledb/src/btree/page_state.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"orioledb.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"btree/find.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"btree/io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"btree/page_chunks.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"btree/undo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"recovery/recovery.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tableam/descr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transam/oxid.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transam/undo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/page_pool.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/stopevent.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/ucm.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/transam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgstat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/proc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/proclist.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/s_lock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memdebug.h"</cpp:file></cpp:include>

<comment type="block">/* Maximum simultaneously locked pages per process */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_PAGES_PER_PROCESS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<comment type="block">/*
 * Enable this to recheck page starts and struct on every unlock.
 */</comment>
<comment type="block">/* #define CHECK_PAGE_STATS */</comment>
<comment type="block">/* #define CHECK_PAGE_STRUCT */</comment>

<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>OInMemoryBlkno</name></type> <name>blkno</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>state</name></decl>;</decl_stmt>
}</block></struct></type> <name>MyLockedPage</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>MyLockedPage</name></type> <name><name>myLockedPages</name><index>[<expr><name>MAX_PAGES_PER_PROCESS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>OInMemoryBlkno</name></type> <name><name>myInProgressSplitPages</name><index>[<expr><name>ORIOLEDB_MAX_DEPTH</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>	<name>numberOfMyLockedPages</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>	<name>numberOfMyInProgressSplitPages</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CHECK_PAGE_STRUCT</name></cpp:ifdef>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>o_check_page_struct</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>Page</name></type> <name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CHECK_PAGE_STATS</name></cpp:ifdef>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>o_check_btree_page_statistics</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>Pointer</name></type> <name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>get_my_locked_page_index</name><parameter_list>(<parameter><decl><type><name>OInMemoryBlkno</name></type> <name>blkno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numberOfMyLockedPages</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><name><name>myLockedPages</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>blkno</name> <operator>==</operator> <name>blkno</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>my_locked_page_add</name><parameter_list>(<parameter><decl><type><name>OInMemoryBlkno</name></type> <name>blkno</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>get_my_locked_page_index</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>numberOfMyLockedPages</name> <operator>&lt;</operator> <name>MAX_PAGES_PER_PROCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>myLockedPages</name><index>[<expr><name>numberOfMyLockedPages</name></expr>]</index></name><operator>.</operator><name>blkno</name> <operator>=</operator> <name>blkno</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>myLockedPages</name><index>[<expr><name>numberOfMyLockedPages</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>state</name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32</name></type>
<name>my_locked_page_del</name><parameter_list>(<parameter><decl><type><name>OInMemoryBlkno</name></type> <name>blkno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name> <init>= <expr><call><name>get_my_locked_page_index</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>state</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>state</name> <operator>=</operator> <name><name>myLockedPages</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>state</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>myLockedPages</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>myLockedPages</name><index>[<expr><operator>--</operator><name>numberOfMyLockedPages</name></expr>]</index></name></expr>;</expr_stmt>

	<return>return <expr><name>state</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32</name></type>
<name>my_locked_page_get_state</name><parameter_list>(<parameter><decl><type><name>OInMemoryBlkno</name></type> <name>blkno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name> <init>= <expr><call><name>get_my_locked_page_index</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>myLockedPages</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>state</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32</name></type>
<name>lock_page_or_list</name><parameter_list>(<parameter><decl><type><name>OInMemoryBlkno</name></type> <name>blkno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Page</name></type>		<name>p</name> <init>= <expr><call><name>O_GET_IN_MEMORY_PAGE</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OrioleDBPageHeader</name> <modifier>*</modifier></type><name>header</name> <init>= <expr><operator>(</operator><name>OrioleDBPageHeader</name> <operator>*</operator><operator>)</operator> <name>p</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>state</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SpinDelayStatus</name></type> <name>status</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>init_local_spin_delay</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>pg_atomic_read_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>header</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>true</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>uint32</name></type>		<name>newState</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>O_PAGE_STATE_IS_LOCKED</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>newState</name> <operator>=</operator> <call><name>O_PAGE_STATE_LOCK</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>state</name> <operator>&amp;</operator> <name>PAGE_STATE_LIST_LOCKED_FLAG</name><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>newState</name> <operator>=</operator> <name>state</name> <operator>|</operator> <operator>(</operator><name>PAGE_STATE_LIST_LOCKED_FLAG</name> <operator>|</operator> <name>PAGE_STATE_HAS_WAITERS_FLAG</name><operator>)</operator></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>perform_spin_delay</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>pg_atomic_read_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>header</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>pg_atomic_compare_exchange_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>header</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><name>newState</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>finish_spin_delay</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>state</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * This function finishes when page is enable to read or we managed to lock
 * the page list.
 */</comment>
<function><type><specifier>static</specifier> <name>uint32</name></type>
<name>read_enabled_or_lock_page_list</name><parameter_list>(<parameter><decl><type><name>OInMemoryBlkno</name></type> <name>blkno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Page</name></type>		<name>p</name> <init>= <expr><call><name>O_GET_IN_MEMORY_PAGE</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OrioleDBPageHeader</name> <modifier>*</modifier></type><name>header</name> <init>= <expr><operator>(</operator><name>OrioleDBPageHeader</name> <operator>*</operator><operator>)</operator> <name>p</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>state</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SpinDelayStatus</name></type> <name>status</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>init_local_spin_delay</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>pg_atomic_read_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>header</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>true</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>uint32</name></type>		<name>newState</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>O_PAGE_STATE_READ_IS_BLOCKED</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>state</name> <operator>&amp;</operator> <name>PAGE_STATE_LIST_LOCKED_FLAG</name><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>newState</name> <operator>=</operator> <name>state</name> <operator>|</operator> <operator>(</operator><name>PAGE_STATE_LIST_LOCKED_FLAG</name> <operator>|</operator> <name>PAGE_STATE_HAS_WAITERS_FLAG</name><operator>)</operator></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>perform_spin_delay</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>pg_atomic_read_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>header</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>pg_atomic_compare_exchange_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>header</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><name>newState</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>finish_spin_delay</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>state</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32</name></type>
<name>lock_page_list</name><parameter_list>(<parameter><decl><type><name>OInMemoryBlkno</name></type> <name>blkno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Page</name></type>		<name>p</name> <init>= <expr><call><name>O_GET_IN_MEMORY_PAGE</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OrioleDBPageHeader</name> <modifier>*</modifier></type><name>header</name> <init>= <expr><operator>(</operator><name>OrioleDBPageHeader</name> <operator>*</operator><operator>)</operator> <name>p</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>oldState</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SpinDelayStatus</name></type> <name>status</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>init_local_spin_delay</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>true</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>oldState</name> <operator>=</operator> <call><name>pg_atomic_fetch_or_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>header</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>PAGE_STATE_LIST_LOCKED_FLAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>oldState</name> <operator>&amp;</operator> <name>PAGE_STATE_LIST_LOCKED_FLAG</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>perform_spin_delay</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>finish_spin_delay</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>oldState</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32</name></type>
<name>dequeue_self</name><parameter_list>(<parameter><decl><type><name>OInMemoryBlkno</name></type> <name>blkno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Page</name></type>		<name>p</name> <init>= <expr><call><name>O_GET_IN_MEMORY_PAGE</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OrioleDBPageHeader</name> <modifier>*</modifier></type><name>header</name> <init>= <expr><operator>(</operator><name>OrioleDBPageHeader</name> <operator>*</operator><operator>)</operator> <name>p</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>proclist_mutable_iter</name></type> <name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>mask</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>state</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>lock_page_list</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<macro><name>proclist_foreach_modify</name><argument_list>(<argument>iter</argument>, <argument>&amp;O_GET_IN_MEMORY_PAGEDESC(blkno)-&gt;waitersList</argument>, <argument>lwWaitLink</argument>)</argument_list></macro>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>.</operator><name>cur</name></name> <operator>==</operator> <name><name>MyProc</name><operator>-&gt;</operator><name>pgprocno</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>proclist_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>O_GET_IN_MEMORY_PAGEDESC</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>waitersList</name></expr></argument>, <argument><expr><name><name>iter</name><operator>.</operator><name>cur</name></name></expr></argument>, <argument><expr><name>lwWaitLink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<expr_stmt><expr><name>mask</name> <operator>=</operator> <operator>~</operator><name>PAGE_STATE_LIST_LOCKED_FLAG</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>proclist_is_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>O_GET_IN_MEMORY_PAGEDESC</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>waitersList</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>mask</name> <operator>&amp;=</operator> <operator>~</operator><name>PAGE_STATE_HAS_WAITERS_FLAG</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>pg_atomic_fetch_and_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>header</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>state</name> <operator>&amp;=</operator> <name>mask</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>MyProc</name><operator>-&gt;</operator><name>lwWaiting</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>extraWaits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

		<comment type="block">/*
		 * Now wait for the scheduled wakeup, otherwise our -&gt;lwWaiting would
		 * get reset at some inconvenient point later. Most of the time this
		 * will immediately return.
		 */</comment>
		<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
		<block>{<block_content>
			<expr_stmt><expr><call><name>PGSemaphoreLock</name><argument_list>(<argument><expr><name><name>MyProc</name><operator>-&gt;</operator><name>sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>MyProc</name><operator>-&gt;</operator><name>lwWaiting</name></name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>extraWaits</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></for>

		<comment type="block">/*
		 * Fix the process wait semaphore's count for any absorbed wakeups.
		 */</comment>
		<while>while <condition>(<expr><name>extraWaits</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PGSemaphoreUnlock</name><argument_list>(<argument><expr><name><name>MyProc</name><operator>-&gt;</operator><name>sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>state</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Place exclusive lock on the page.  Doesn't block readers before
 * page_block_reads() is called.
 */</comment>
<function><type><name>void</name></type>
<name>lock_page</name><parameter_list>(<parameter><decl><type><name>OInMemoryBlkno</name></type> <name>blkno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>UsageCountMap</name> <modifier>*</modifier></type><name>ucm</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><call><name>get_ppool_by_blkno</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>ucm</name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Page</name></type>		<name>p</name> <init>= <expr><call><name>O_GET_IN_MEMORY_PAGE</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OrioleDBPageHeader</name> <modifier>*</modifier></type><name>header</name> <init>= <expr><operator>(</operator><name>OrioleDBPageHeader</name> <operator>*</operator><operator>)</operator> <name>p</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>prevState</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>extraWaits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>get_my_locked_page_index</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>EA_LOCK_INC</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>page_inc_usage_count</name><argument_list>(<argument><expr><name>ucm</name></expr></argument>, <argument><expr><name>blkno</name></expr></argument>,
						 <argument><expr><call><name>pg_atomic_read_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>header</name><operator>-&gt;</operator><name>usageCount</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>true</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>prevState</name> <operator>=</operator> <call><name>lock_page_or_list</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>O_PAGE_STATE_IS_LOCKED</name><argument_list>(<argument><expr><name>prevState</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>proclist_push_tail</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>O_GET_IN_MEMORY_PAGEDESC</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>waitersList</name></expr></argument>,
						   <argument><expr><name><name>MyProc</name><operator>-&gt;</operator><name>pgprocno</name></name></expr></argument>,
						   <argument><expr><name>lwWaitLink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>MyProc</name><operator>-&gt;</operator><name>lwWaiting</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>MyProc</name><operator>-&gt;</operator><name>lwWaitMode</name></name> <operator>=</operator> <name>LW_EXCLUSIVE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>prevState</name> <operator>=</operator> <call><name>pg_atomic_fetch_and_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>header</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><operator>~</operator><name>PAGE_STATE_LIST_LOCKED_FLAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>O_PAGE_STATE_IS_LOCKED</name><argument_list>(<argument><expr><name>prevState</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>prevState</name> <operator>=</operator> <call><name>pg_atomic_fetch_or_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>header</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>PAGE_STATE_LOCKED_FLAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>O_PAGE_STATE_IS_LOCKED</name><argument_list>(<argument><expr><name>prevState</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>prevState</name> <operator>=</operator> <call><name>dequeue_self</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>pgstat_report_wait_start</name><argument_list>(<argument><expr><name>PG_WAIT_LWLOCK</name> <operator>|</operator> <name>LWTRANCHE_BUFFER_CONTENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
		<block>{<block_content>
			<expr_stmt><expr><call><name>PGSemaphoreLock</name><argument_list>(<argument><expr><name><name>MyProc</name><operator>-&gt;</operator><name>sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>MyProc</name><operator>-&gt;</operator><name>lwWaiting</name></name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>extraWaits</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></for>

		<expr_stmt><expr><call><name>pgstat_report_wait_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>my_locked_page_add</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>, <argument><expr><name>prevState</name> <operator>|</operator> <name>PAGE_STATE_LOCKED_FLAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Fix the process wait semaphore's count for any absorbed wakeups.
	 */</comment>
	<while>while <condition>(<expr><name>extraWaits</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PGSemaphoreUnlock</name><argument_list>(<argument><expr><name><name>MyProc</name><operator>-&gt;</operator><name>sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>page_wait_for_read_enable</name><parameter_list>(<parameter><decl><type><name>OInMemoryBlkno</name></type> <name>blkno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Page</name></type>		<name>p</name> <init>= <expr><call><name>O_GET_IN_MEMORY_PAGE</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OrioleDBPageHeader</name> <modifier>*</modifier></type><name>header</name> <init>= <expr><operator>(</operator><name>OrioleDBPageHeader</name> <operator>*</operator><operator>)</operator> <name>p</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>prevState</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>extraWaits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>true</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>prevState</name> <operator>=</operator> <call><name>read_enabled_or_lock_page_list</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>prevState</name> <operator>&amp;</operator> <name>PAGE_STATE_NO_READ_FLAG</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>proclist_push_tail</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>O_GET_IN_MEMORY_PAGEDESC</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>waitersList</name></expr></argument>,
						   <argument><expr><name><name>MyProc</name><operator>-&gt;</operator><name>pgprocno</name></name></expr></argument>,
						   <argument><expr><name>lwWaitLink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>MyProc</name><operator>-&gt;</operator><name>lwWaiting</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>MyProc</name><operator>-&gt;</operator><name>lwWaitMode</name></name> <operator>=</operator> <name>LW_SHARED</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>prevState</name> <operator>=</operator> <call><name>pg_atomic_fetch_and_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>header</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><operator>~</operator><name>PAGE_STATE_LIST_LOCKED_FLAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>prevState</name> <operator>&amp;</operator> <name>PAGE_STATE_NO_READ_FLAG</name><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>dequeue_self</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>pgstat_report_wait_start</name><argument_list>(<argument><expr><name>PG_WAIT_LWLOCK</name> <operator>|</operator> <name>LWTRANCHE_BUFFER_CONTENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
		<block>{<block_content>
			<expr_stmt><expr><call><name>PGSemaphoreLock</name><argument_list>(<argument><expr><name><name>MyProc</name><operator>-&gt;</operator><name>sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>MyProc</name><operator>-&gt;</operator><name>lwWaiting</name></name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>extraWaits</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></for>

		<expr_stmt><expr><call><name>pgstat_report_wait_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="block">/*
	 * Fix the process wait semaphore's count for any absorbed wakeups.
	 */</comment>
	<while>while <condition>(<expr><name>extraWaits</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PGSemaphoreUnlock</name><argument_list>(<argument><expr><name><name>MyProc</name><operator>-&gt;</operator><name>sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

	<return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32</name></type>
<name>page_wait_for_changecount</name><parameter_list>(<parameter><decl><type><name>OInMemoryBlkno</name></type> <name>blkno</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Page</name></type>		<name>p</name> <init>= <expr><call><name>O_GET_IN_MEMORY_PAGE</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OrioleDBPageHeader</name> <modifier>*</modifier></type><name>header</name> <init>= <expr><operator>(</operator><name>OrioleDBPageHeader</name> <operator>*</operator><operator>)</operator> <name>p</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>curState</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>extraWaits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>true</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>bool</name></type>		<name>exit_loop</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>curState</name> <operator>=</operator> <call><name>lock_page_list</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>curState</name> <operator>&amp;</operator> <name>PAGE_STATE_CHANGE_COUNT_MASK</name><operator>)</operator> <operator>!=</operator>
			<operator>(</operator><name>state</name> <operator>&amp;</operator> <name>PAGE_STATE_CHANGE_COUNT_MASK</name><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>curState</name> <operator>=</operator> <call><name>pg_atomic_fetch_and_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>header</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><operator>~</operator><name>PAGE_STATE_LIST_LOCKED_FLAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>curState</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pg_atomic_fetch_or_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>header</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>PAGE_STATE_HAS_WAITERS_FLAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>proclist_push_tail</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>O_GET_IN_MEMORY_PAGEDESC</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>waitersList</name></expr></argument>,
						   <argument><expr><name><name>MyProc</name><operator>-&gt;</operator><name>pgprocno</name></name></expr></argument>,
						   <argument><expr><name>lwWaitLink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>MyProc</name><operator>-&gt;</operator><name>lwWaiting</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>MyProc</name><operator>-&gt;</operator><name>lwWaitMode</name></name> <operator>=</operator> <name>LW_SHARED</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>curState</name> <operator>=</operator> <call><name>pg_atomic_fetch_and_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>header</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><operator>~</operator><name>PAGE_STATE_LIST_LOCKED_FLAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>curState</name> <operator>&amp;</operator> <name>PAGE_STATE_CHANGE_COUNT_MASK</name><operator>)</operator> <operator>!=</operator>
			<operator>(</operator><name>state</name> <operator>&amp;</operator> <name>PAGE_STATE_CHANGE_COUNT_MASK</name><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<return>return <expr><call><name>dequeue_self</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>pgstat_report_wait_start</name><argument_list>(<argument><expr><name>PG_WAIT_LWLOCK</name> <operator>|</operator> <name>LWTRANCHE_BUFFER_CONTENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
		<block>{<block_content>
			<expr_stmt><expr><call><name>PGSemaphoreLock</name><argument_list>(<argument><expr><name><name>MyProc</name><operator>-&gt;</operator><name>sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>MyProc</name><operator>-&gt;</operator><name>lwWaiting</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>curState</name> <operator>=</operator> <call><name>pg_atomic_read_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>header</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>(</operator><name>curState</name> <operator>&amp;</operator> <name>PAGE_STATE_CHANGE_COUNT_MASK</name><operator>)</operator> <operator>!=</operator>
					<operator>(</operator><name>state</name> <operator>&amp;</operator> <name>PAGE_STATE_CHANGE_COUNT_MASK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>exit_loop</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>extraWaits</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></for>
		<if_stmt><if>if <condition>(<expr><name>exit_loop</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>pgstat_report_wait_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="block">/*
	 * Fix the process wait semaphore's count for any absorbed wakeups.
	 */</comment>
	<while>while <condition>(<expr><name>extraWaits</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PGSemaphoreUnlock</name><argument_list>(<argument><expr><name><name>MyProc</name><operator>-&gt;</operator><name>sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

	<return>return <expr><name>curState</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>have_locked_pages</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>numberOfMyLockedPages</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Wait for a change of the page and lock it. */</comment>
<function><type><name>void</name></type>
<name>relock_page</name><parameter_list>(<parameter><decl><type><name>OInMemoryBlkno</name></type> <name>blkno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>UsageCountMap</name> <modifier>*</modifier></type><name>ucm</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><call><name>get_ppool_by_blkno</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>ucm</name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OrioleDBPageHeader</name> <modifier>*</modifier></type><name>header</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Page</name></type>		<name>p</name> <init>= <expr><call><name>O_GET_IN_MEMORY_PAGE</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>state</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>my_locked_page_get_state</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>unlock_page</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>STOPEVENT</name><argument_list>(<argument><expr><name>STOPEVENT_RELOCK_PAGE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>header</name> <operator>=</operator> <operator>(</operator><name>OrioleDBPageHeader</name> <operator>*</operator><operator>)</operator> <name>p</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>page_inc_usage_count</name><argument_list>(<argument><expr><name>ucm</name></expr></argument>, <argument><expr><name>blkno</name></expr></argument>,
						 <argument><expr><call><name>pg_atomic_read_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>header</name><operator>-&gt;</operator><name>usageCount</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>page_wait_for_changecount</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>lock_page</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Try to lock the given page from concurrent changes.  Returns true on success.
 */</comment>
<function><type><name>bool</name></type>
<name>try_lock_page</name><parameter_list>(<parameter><decl><type><name>OInMemoryBlkno</name></type> <name>blkno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Page</name></type>		<name>p</name> <init>= <expr><call><name>O_GET_IN_MEMORY_PAGE</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>state</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>pg_atomic_fetch_or_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><call><name>O_PAGE_HEADER</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>state</name><operator>)</operator></expr></argument>,
								   <argument><expr><name>PAGE_STATE_LOCKED_FLAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>O_PAGE_STATE_IS_LOCKED</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>EA_LOCK_INC</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>my_locked_page_add</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>, <argument><expr><name>state</name> <operator>|</operator> <name>PAGE_STATE_LOCKED_FLAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Declare newly created page as already locked by our process.
 */</comment>
<function><type><name>void</name></type>
<name>delare_page_as_locked</name><parameter_list>(<parameter><decl><type><name>OInMemoryBlkno</name></type> <name>blkno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Page</name></type>		<name>p</name> <init>= <expr><call><name>O_GET_IN_MEMORY_PAGE</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>my_locked_page_add</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>, <argument><expr><call><name>pg_atomic_read_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><call><name>O_PAGE_HEADER</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>state</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Check if page is locked.
 */</comment>
<function><type><name>bool</name></type>
<name>page_is_locked</name><parameter_list>(<parameter><decl><type><name>OInMemoryBlkno</name></type> <name>blkno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><call><name>get_my_locked_page_index</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Block reads on locked page to prepare it for the modification.
 */</comment>
<function><type><name>void</name></type>
<name>page_block_reads</name><parameter_list>(<parameter><decl><type><name>OInMemoryBlkno</name></type> <name>blkno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Page</name></type>		<name>p</name> <init>= <expr><call><name>O_GET_IN_MEMORY_PAGE</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>state</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name> <init>= <expr><call><name>get_my_locked_page_index</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>(</operator><name><name>myLockedPages</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>&amp;</operator> <name>PAGE_STATE_CHANGE_NON_WAITERS_MASK</name><operator>)</operator> <operator>==</operator>
		   <operator>(</operator><call><name>pg_atomic_read_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><call><name>O_PAGE_HEADER</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>state</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>PAGE_STATE_CHANGE_NON_WAITERS_MASK</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>pg_atomic_fetch_or_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><call><name>O_PAGE_HEADER</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>state</name><operator>)</operator></expr></argument>, <argument><expr><name>PAGE_STATE_NO_READ_FLAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>(</operator><name>state</name> <operator>&amp;</operator> <name>PAGE_STATE_LOCKED_FLAG</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>myLockedPages</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>=</operator> <name>state</name> <operator>|</operator> <name>PAGE_STATE_NO_READ_FLAG</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>wakeup_waiters</name><parameter_list>(<parameter><decl><type><name>OInMemoryBlkno</name></type> <name>blkno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Page</name></type>		<name>p</name> <init>= <expr><call><name>O_GET_IN_MEMORY_PAGE</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>proclist_head</name></type> <name>wakeup</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>proclist_mutable_iter</name></type> <name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>wokeup_exclusive</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>mask</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>proclist_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wakeup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>lock_page_list</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<macro><name>proclist_foreach_modify</name><argument_list>(<argument>iter</argument>, <argument>&amp;O_GET_IN_MEMORY_PAGEDESC(blkno)-&gt;waitersList</argument>, <argument>lwWaitLink</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>PGPROC</name>	   <modifier>*</modifier></type><name>waiter</name> <init>= <expr><call><name>GetPGProcByNumber</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>cur</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>wokeup_exclusive</name> <operator>&amp;&amp;</operator> <name><name>waiter</name><operator>-&gt;</operator><name>lwWaitMode</name></name> <operator>==</operator> <name>LW_EXCLUSIVE</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>proclist_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>O_GET_IN_MEMORY_PAGEDESC</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>waitersList</name></expr></argument>, <argument><expr><name><name>iter</name><operator>.</operator><name>cur</name></name></expr></argument>, <argument><expr><name>lwWaitLink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>proclist_push_tail</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wakeup</name></expr></argument>, <argument><expr><name><name>iter</name><operator>.</operator><name>cur</name></name></expr></argument>, <argument><expr><name>lwWaitLink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>waiter</name><operator>-&gt;</operator><name>lwWaitMode</name></name> <operator>==</operator> <name>LW_EXCLUSIVE</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>wokeup_exclusive</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block>

	<expr_stmt><expr><name>mask</name> <operator>=</operator> <operator>~</operator><name>PAGE_STATE_LIST_LOCKED_FLAG</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>proclist_is_empty</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>O_GET_IN_MEMORY_PAGEDESC</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>waitersList</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>mask</name> <operator>&amp;=</operator> <operator>~</operator><name>PAGE_STATE_HAS_WAITERS_FLAG</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>pg_atomic_fetch_and_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><call><name>O_PAGE_HEADER</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>state</name><operator>)</operator></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Awaken any waiters I removed from the queue. */</comment>
	<macro><name>proclist_foreach_modify</name><argument_list>(<argument>iter</argument>, <argument>&amp;wakeup</argument>, <argument>lwWaitLink</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>PGPROC</name>	   <modifier>*</modifier></type><name>waiter</name> <init>= <expr><call><name>GetPGProcByNumber</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>cur</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>proclist_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wakeup</name></expr></argument>, <argument><expr><name><name>iter</name><operator>.</operator><name>cur</name></name></expr></argument>, <argument><expr><name>lwWaitLink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Guarantee that lwWaiting being unset only becomes visible once the
		 * unlink from the link has completed. Otherwise the target backend
		 * could be woken up for other reason and enqueue for a new lock - if
		 * that happens before the list unlink happens, the list would end up
		 * being corrupted.
		 *
		 * The barrier pairs with the LWLockWaitListLock() when enqueuing for
		 * another lock.
		 */</comment>
		<expr_stmt><expr><call><name>pg_write_barrier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>waiter</name><operator>-&gt;</operator><name>lwWaiting</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PGSemaphoreUnlock</name><argument_list>(<argument><expr><name><name>waiter</name><operator>-&gt;</operator><name>sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
</block_content>}</block></function>

<comment type="block">/*
 * Unlock the page.  Page should be already locked.
 */</comment>
<function><type><name>void</name></type>
<name>unlock_page</name><parameter_list>(<parameter><decl><type><name>OInMemoryBlkno</name></type> <name>blkno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Page</name></type>		<name>p</name> <init>= <expr><call><name>O_GET_IN_MEMORY_PAGE</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>state</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CHECK_PAGE_STRUCT</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><call><name>O_GET_IN_MEMORY_PAGEDESC</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>type</name> <operator>!=</operator> <name>oIndexInvalid</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>o_check_page_struct</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CHECK_PAGE_STATS</name></cpp:ifdef>

	<comment type="block">/*
	 * XXX: index_oids_get_btree_descr() might expand a hash table under
	 * critical section.
	 */</comment>
	<decl_stmt><decl><type><name>OrioleDBPageDesc</name> <modifier>*</modifier></type><name>page_desc</name> <init>= <expr><call><name>O_GET_IN_MEMORY_PAGEDESC</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>O_PAGE_IS</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>LEAF</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>page_desc</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>oIndexInvalid</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ORelOids</name></type>	<name>oids</name> <init>= <expr><name><name>page_desc</name><operator>-&gt;</operator><name>oids</name></name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_SYS_TREE_OIDS</name><argument_list>(<argument><expr><name>oids</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>index_oids_get_btree_descr</name><argument_list>(<argument><expr><name>oids</name></expr></argument>, <argument><expr><name><name>page_desc</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>desc</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>o_check_btree_page_statistics</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>my_locked_page_del</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>O_PAGE_IS</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>LEAF</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>OidIsValid</name><argument_list>(<argument><expr><call><name>O_GET_IN_MEMORY_PAGEDESC</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>oids</name><operator>.</operator><name>reloid</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>on_disk</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>BTreePageItemLocator</name></type> <name>loc</name></decl>;</decl_stmt>

		<macro><name>BTREE_PAGE_FOREACH_ITEMS</name><argument_list>(<argument>p</argument>, <argument>&amp;loc</argument>)</argument_list></macro>
		<block>{<block_content>
			<decl_stmt><decl><type><name>BTreeNonLeafTuphdr</name> <modifier>*</modifier></type><name>tuphdr</name> <init>= <expr><operator>(</operator><name>BTreeNonLeafTuphdr</name> <operator>*</operator><operator>)</operator> <call><name>BTREE_PAGE_LOCATOR_GET_ITEM</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>loc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>DOWNLINK_IS_ON_DISK</name><argument_list>(<argument><expr><name><name>tuphdr</name><operator>-&gt;</operator><name>downlink</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>on_disk</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>on_disk</name> <operator>==</operator> <call><name>PAGE_GET_N_ONDISK</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>VALGRIND_CHECK_MEM_IS_DEFINED</name><argument_list>(<argument><expr><call><name>O_GET_IN_MEMORY_PAGE</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ORIOLEDB_BLCKSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>(</operator><name>state</name> <operator>&amp;</operator> <name>PAGE_STATE_CHANGE_NON_WAITERS_MASK</name><operator>)</operator> <operator>==</operator> <operator>(</operator><call><name>pg_atomic_read_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><call><name>O_PAGE_HEADER</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>state</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>PAGE_STATE_CHANGE_NON_WAITERS_MASK</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>state</name> <operator>&amp;</operator> <name>PAGE_STATE_NO_READ_FLAG</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>pg_atomic_add_fetch_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><call><name>O_PAGE_HEADER</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>state</name><operator>)</operator></expr></argument>,
										<argument><expr><name>PAGE_STATE_CHANGE_COUNT_ONE</name> <operator>-</operator> <operator>(</operator><name>state</name> <operator>&amp;</operator> <operator>(</operator><name>PAGE_STATE_LOCKED_FLAG</name> <operator>|</operator> <name>PAGE_STATE_NO_READ_FLAG</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>pg_atomic_fetch_and_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><call><name>O_PAGE_HEADER</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>state</name><operator>)</operator></expr></argument>, <argument><expr><operator>~</operator><name>PAGE_STATE_LOCKED_FLAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>state</name> <operator>&amp;=</operator> <operator>~</operator><name>PAGE_STATE_LOCKED_FLAG</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>state</name> <operator>&amp;</operator> <name>PAGE_STATE_HAS_WAITERS_FLAG</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>wakeup_waiters</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Release all previously acquired page locks one-by-one.
 */</comment>
<function><type><name>void</name></type>
<name>release_all_page_locks</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>pg_write_barrier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>numberOfMyLockedPages</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>unlock_page</name><argument_list>(<argument><expr><name><name>myLockedPages</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>blkno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<comment type="block">/*
 * Register in-progress split.  This split will be marked as incomplete on
 * errer cleanup unless it's unregistered before.
 *
 * Must be called within critical section.
 */</comment>
<function><type><name>void</name></type>
<name>btree_register_inprogress_split</name><parameter_list>(<parameter><decl><type><name>OInMemoryBlkno</name></type> <name>left_blkno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numberOfMyInProgressSplitPages</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>myInProgressSplitPages</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>left_blkno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>CritSectionCount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>(</operator><name>numberOfMyInProgressSplitPages</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>myInProgressSplitPages</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>myInProgressSplitPages</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>myInProgressSplitPages</name><index>[<expr><name>numberOfMyInProgressSplitPages</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>left_blkno</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Unregister in-progress split.
 *
 * Must be calles within critical section.
 */</comment>
<function><type><name>void</name></type>
<name>btree_unregister_inprogress_split</name><parameter_list>(<parameter><decl><type><name>OInMemoryBlkno</name></type> <name>left_blkno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>CritSectionCount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>numberOfMyInProgressSplitPages</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numberOfMyInProgressSplitPages</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>myInProgressSplitPages</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>left_blkno</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>numberOfMyInProgressSplitPages</name><operator>--</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>myInProgressSplitPages</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>myInProgressSplitPages</name><index>[<expr><name>numberOfMyInProgressSplitPages</name></expr>]</index></name></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Marks all in-progress splits as incomplete.
 */</comment>
<function><type><name>void</name></type>
<name>btree_mark_incomplete_splits</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numberOfMyInProgressSplitPages</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>btree_split_mark_finished</name><argument_list>(<argument><expr><name><name>myInProgressSplitPages</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	<expr_stmt><expr><name>numberOfMyInProgressSplitPages</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Marks the split as finished.
 *
 * It sets O_BTREE_FLAG_BROKEN_SPLIT if success = false or removes rightlink
 * on the left page.
 *
 * It does not call modify_page if use_lock = false.
 */</comment>
<function><type><name>void</name></type>
<name>btree_split_mark_finished</name><parameter_list>(<parameter><decl><type><name>OInMemoryBlkno</name></type> <name>left_blkno</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>use_lock</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>success</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BTreePageHeader</name> <modifier>*</modifier></type><name>header</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>use_lock</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>lock_page</name><argument_list>(<argument><expr><name>left_blkno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>page_block_reads</name><argument_list>(<argument><expr><name>left_blkno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>header</name> <operator>=</operator> <operator>(</operator><name>BTreePageHeader</name> <operator>*</operator><operator>)</operator> <call><name>O_GET_IN_MEMORY_PAGE</name><argument_list>(<argument><expr><name>left_blkno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>RightLinkIsValid</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>rightLink</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>use_lock</name> <operator>||</operator> <operator>!</operator><call><name>O_PAGE_IS</name><argument_list>(<argument><expr><call><name>O_GET_IN_MEMORY_PAGE</name><argument_list>(<argument><expr><name>left_blkno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>BROKEN_SPLIT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>O_BTREE_FLAG_BROKEN_SPLIT</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>rightLink</name></name> <operator>=</operator> <name>InvalidRightLink</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>O_BTREE_FLAG_BROKEN_SPLIT</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>use_lock</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>unlock_page</name><argument_list>(<argument><expr><name>left_blkno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CHECK_PAGE_STRUCT</name></cpp:ifdef>
<comment type="block">/*
 * Check if page has a consistent structure.
 */</comment>
<function><type><name>void</name></type>
<name>o_check_page_struct</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>Page</name></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BTreePageHeader</name> <modifier>*</modifier></type><name>header</name> <init>= <expr><operator>(</operator><name>BTreePageHeader</name> <operator>*</operator><operator>)</operator> <name>p</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>,
				<decl><type ref="prev"/><name>j</name></decl>,
				<decl><type ref="prev"/><name>itemsCount</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LocationIndex</name></type> <name>endLocation</name></decl>,
				<decl><type ref="prev"/><name>chunkSize</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>dataSize</name></name> <operator>&lt;=</operator> <name>ORIOLEDB_BLCKSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>hikeysEnd</name></name> <operator>&lt;=</operator> <name><name>header</name><operator>-&gt;</operator><name>dataSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>header</name><operator>-&gt;</operator><name>chunksCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>BTreePageChunkDesc</name> <modifier>*</modifier></type><name>chunk</name> <init>= <expr><operator>&amp;</operator><name><name>header</name><operator>-&gt;</operator><name>chunkDesc</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>BTreePageChunk</name> <modifier>*</modifier></type><name>chunkData</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>BTreePageChunkDesc</name> <modifier>*</modifier></type><name>prevChunk</name> <init>= <expr><operator>&amp;</operator><name><name>header</name><operator>-&gt;</operator><name>chunkDesc</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <name>PG_USED_FOR_ASSERTS_ONLY</name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>shortLocation</name></name> <operator>&gt;=</operator> <name><name>prevChunk</name><operator>-&gt;</operator><name>shortLocation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>offset</name></name> <operator>&gt;=</operator> <name><name>prevChunk</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>hikeyShortLocation</name></name> <operator>&gt;</operator> <name><name>prevChunk</name><operator>-&gt;</operator><name>hikeyShortLocation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>SHORT_GET_LOCATION</name><argument_list>(<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>hikeyShortLocation</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name><name>header</name><operator>-&gt;</operator><name>hikeysEnd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>SHORT_GET_LOCATION</name><argument_list>(<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>shortLocation</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name><name>header</name><operator>-&gt;</operator><name>dataSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>offset</name></name> <operator>&lt;=</operator> <name><name>header</name><operator>-&gt;</operator><name>itemsCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>SHORT_GET_LOCATION</name><argument_list>(<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>shortLocation</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>header</name><operator>-&gt;</operator><name>hikeysEnd</name></name> <operator>||</operator> <call><name>SHORT_GET_LOCATION</name><argument_list>(<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>shortLocation</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>BTREE_PAGE_HIKEYS_END</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>offset</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>SHORT_GET_LOCATION</name><argument_list>(<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>hikeyShortLocation</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>BTreePageHeader</name></expr></argument>, <argument><expr><name>chunkDesc</name></expr></argument>)</argument_list></call> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>BTreePageChunkDesc</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>header</name><operator>-&gt;</operator><name>chunksCount</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>header</name><operator>-&gt;</operator><name>chunksCount</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>O_PAGE_IS</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>RIGHTMOST</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>SHORT_GET_LOCATION</name><argument_list>(<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>hikeyShortLocation</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>header</name><operator>-&gt;</operator><name>hikeysEnd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>itemsCount</name> <operator>=</operator> <name><name>header</name><operator>-&gt;</operator><name>itemsCount</name></name> <operator>-</operator> <name><name>chunk</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>endLocation</name> <operator>=</operator> <name><name>header</name><operator>-&gt;</operator><name>dataSize</name></name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>chunkDesc</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>offset</name> <operator>&lt;=</operator> <name><name>header</name><operator>-&gt;</operator><name>itemsCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>chunkDesc</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>offset</name> <operator>&gt;=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>itemsCount</name> <operator>=</operator> <name><name>header</name><operator>-&gt;</operator><name>chunkDesc</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>offset</name> <operator>-</operator> <name><name>chunk</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>endLocation</name> <operator>=</operator> <call><name>SHORT_GET_LOCATION</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>chunkDesc</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>shortLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>endLocation</name> <operator>&lt;=</operator> <name><name>header</name><operator>-&gt;</operator><name>dataSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><name>chunkData</name> <operator>=</operator> <operator>(</operator><name>BTreePageChunk</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><name>Pointer</name><operator>)</operator> <name>p</name> <operator>+</operator> <call><name>SHORT_GET_LOCATION</name><argument_list>(<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>shortLocation</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>chunkSize</name> <operator>=</operator> <name>endLocation</name> <operator>-</operator> <call><name>SHORT_GET_LOCATION</name><argument_list>(<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>shortLocation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>MAXALIGN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>LocationIndex</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>itemsCount</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>chunkSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>itemsCount</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>ITEM_GET_OFFSET</name><argument_list>(<argument><expr><name><name>chunkData</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>LocationIndex</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>itemsCount</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>ITEM_GET_OFFSET</name><argument_list>(<argument><expr><name><name>chunkData</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>chunkSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>ITEM_GET_OFFSET</name><argument_list>(<argument><expr><name><name>chunkData</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <call><name>ITEM_GET_OFFSET</name><argument_list>(<argument><expr><name><name>chunkData</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <name>itemsCount</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>O_PAGE_IS</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>LEAF</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>ITEM_GET_FLAGS</name><argument_list>(<argument><expr><name><name>chunkData</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>ITEM_GET_OFFSET</name><argument_list>(<argument><expr><name><name>chunkData</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>ITEM_GET_OFFSET</name><argument_list>(<argument><expr><name><name>chunkData</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>desc</name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>OTuple</name></type>		<name>tuple</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type>			<name>len</name></decl>;</decl_stmt>

				<expr_stmt><expr><name><name>tuple</name><operator>.</operator><name>formatFlags</name></name> <operator>=</operator> <call><name>ITEM_GET_FLAGS</name><argument_list>(<argument><expr><name><name>chunkData</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><call><name>O_PAGE_IS</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>LEAF</name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name><name>tuple</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>Pointer</name><operator>)</operator> <name>chunkData</name> <operator>+</operator> <call><name>ITEM_GET_OFFSET</name><argument_list>(<argument><expr><name><name>chunkData</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>BTreeLeafTuphdrSize</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>len</name> <operator>=</operator> <name>BTreeLeafTuphdrSize</name> <operator>+</operator> <call><name>o_btree_len</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>OTupleLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>j</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><name>len</name> <operator>=</operator> <name>BTreeNonLeafTuphdrSize</name></expr>;</expr_stmt>
					</block_content>}</block></if>
					<else>else
					<block>{<block_content>
						<expr_stmt><expr><name><name>tuple</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>Pointer</name><operator>)</operator> <name>chunkData</name> <operator>+</operator> <call><name>ITEM_GET_OFFSET</name><argument_list>(<argument><expr><name><name>chunkData</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>BTreeNonLeafTuphdrSize</name></expr>;</expr_stmt>
						<expr_stmt><expr><name>len</name> <operator>=</operator> <name>BTreeNonLeafTuphdrSize</name> <operator>+</operator> <call><name>o_btree_len</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>OKeyLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></else></if_stmt>
				</block_content>}</block></else></if_stmt>

				<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <name>itemsCount</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>ITEM_GET_OFFSET</name><argument_list>(<argument><expr><name><name>chunkData</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>len</name> <operator>&lt;=</operator> <call><name>ITEM_GET_OFFSET</name><argument_list>(<argument><expr><name><name>chunkData</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>ITEM_GET_OFFSET</name><argument_list>(<argument><expr><name><name>chunkData</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>len</name> <operator>&lt;=</operator> <name>chunkSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></for>

</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CHECK_PAGE_STATS</name></cpp:ifdef>

<comment type="block">/*
 * Check if precalculated number of vacated bytes for leaf pages and number
 * of disk downlinks for non-leaf pages is correct.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>o_check_btree_page_statistics</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>Pointer</name></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>O_PAGE_IS</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>LEAF</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>nVacatedBytes</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>nVacatedBytes</name> <operator>=</operator> <call><name>PAGE_GET_N_VACATED</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>o_btree_page_calculate_statistics</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>nVacatedBytes</name> <operator>==</operator> <call><name>PAGE_GET_N_VACATED</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>nDiskDownlinks</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>nDiskDownlinks</name> <operator>=</operator> <call><name>PAGE_GET_N_ONDISK</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>o_btree_page_calculate_statistics</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>nDiskDownlinks</name> <operator>==</operator> <call><name>PAGE_GET_N_ONDISK</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
