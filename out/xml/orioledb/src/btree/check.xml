<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/orioledb/src/btree/check.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * check.c
 *		Routines for checking OrioleDB B-tree.
 *
 * Copyright (c) 2021-2022 Oriole DB Inc.
 *
 * IDENTIFICATION
 *	  contrib/orioledb/src/btree/check.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"orioledb.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"btree/check.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"btree/io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"btree/page_chunks.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/free_extents.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"checkpoint/checkpoint.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"recovery/recovery.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tableam/descr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/compress.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/page_pool.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/seq_buf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/ucm.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgstat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/transam.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Dynamic array of file extents.
 */</comment>
<typedef>typedef <type><struct>struct
<block>{
	<comment type="block">/* array of extents */</comment>
	<decl_stmt><decl><type><name>FileExtent</name> <modifier>*</modifier></type><name>extents</name></decl>;</decl_stmt>
	<comment type="block">/* number of allocated extents */</comment>
	<decl_stmt><decl><type><name>uint64</name></type>		<name>allocated</name></decl>;</decl_stmt>
	<comment type="block">/* number of valid extents in the array */</comment>
	<decl_stmt><decl><type><name>uint64</name></type>		<name>size</name></decl>;</decl_stmt>
	<comment type="block">/* number of blocks in file containing by extents in the array */</comment>
	<decl_stmt><decl><type><name>uint64</name></type>		<name>blocksCount</name></decl>;</decl_stmt>
}</block></struct></type> <name>ExtentsArray</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>ExtentsArray</name></type> <name>busy</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>hasError</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OBTreeFindPageContext</name></type> <name>context</name></decl>;</decl_stmt>
}</block></struct></type> <name>BTreeCheckStatus</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>file_extent_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>check_walk_btree</name><parameter_list>(<parameter><decl><type><name>BTreeCheckStatus</name> <modifier>*</modifier></type><name>status</name></decl></parameter>, <parameter><decl><type><name>OInMemoryBlkno</name></type> <name>blkno</name></decl></parameter>,
							 <parameter><decl><type><name>OInMemoryBlkno</name></type> <name>parentPagenum</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>add_extent</name><parameter_list>(<parameter><decl><type><name>ExtentsArray</name> <modifier>*</modifier></type><name>arr</name></decl></parameter>, <parameter><decl><type><name>FileExtent</name></type> <name>extent</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>check_extents</name><parameter_list>(<parameter><decl><type><name>ExtentsArray</name> <modifier>*</modifier></type><name>busy</name></decl></parameter>, <parameter><decl><type><name>ExtentsArray</name> <modifier>*</modifier></type><name>free</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>get_free_extents</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>ExtentsArray</name> <modifier>*</modifier></type><name>free_extents</name></decl></parameter>,
							 <parameter><decl><type><name>bool</name></type> <name>force_file_check</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>chkp_num</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>get_free_extents_from_file</name><parameter_list>(<parameter><decl><type><name>SeqBufTag</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>offset</name></decl></parameter>,
									   <parameter><decl><type><name>ExtentsArray</name> <modifier>*</modifier></type><name>free_extents</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>compressed</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>is_sorted_by_off</name><parameter_list>(<parameter><decl><type><name>ExtentsArray</name> <modifier>*</modifier></type><name>array</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>is_sorted_by_len_off</name><parameter_list>(<parameter><decl><type><name>ExtentsArray</name> <modifier>*</modifier></type><name>array</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>bool</name></type>
<name>check_btree</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>force_file_check</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BTreeMetaPage</name> <modifier>*</modifier></type><name>metaPageBlkno</name> <init>= <expr><call><name>BTREE_GET_META</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BTreeCheckStatus</name></type> <name>status</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ExtentsArray</name></type> <name>free_extents</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type>		<name>data_file_len</name> <init>= <expr><call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>metaPageBlkno</name><operator>-&gt;</operator><name>datafileLength</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>is_compressed</name> <init>= <expr><call><name>OCompressIsValid</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>compress</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>checkpoint_number</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>result</name></decl>,
				<decl><type ref="prev"/><name>copy_blkno</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BTreeCheckStatus</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>free_extents</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ExtentsArray</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* get busy file extents */</comment>
	<expr_stmt><expr><name><name>status</name><operator>.</operator><name>desc</name></name> <operator>=</operator> <name>desc</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>status</name><operator>.</operator><name>hasError</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>init_page_find_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>status</name><operator>.</operator><name>context</name></name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>COMMITSEQNO_INPROGRESS</name></expr></argument>, <argument><expr><name>BTREE_PAGE_FIND_MODIFY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>get_checkpoint_number</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>rootInfo</name><operator>.</operator><name>rootPageBlkno</name></name></expr></argument>,
								   <argument><expr><operator>&amp;</operator><name>checkpoint_number</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>copy_blkno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Tree is under checkpoint now"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>checkpoint_number</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>check_walk_btree</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>rootInfo</name><operator>.</operator><name>rootPageBlkno</name></name></expr></argument>, <argument><expr><name>OInvalidInMemoryBlkno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>status</name><operator>.</operator><name>hasError</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>storageType</name></name> <operator>!=</operator> <name>BTreeStoragePersistence</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* get free file extents */</comment>
	<expr_stmt><expr><call><name>get_free_extents</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>free_extents</name></expr></argument>, <argument><expr><name>force_file_check</name></expr></argument>,
					 <argument><expr><name>checkpoint_number</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>status</name><operator>.</operator><name>hasError</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* check extents */</comment>
	<expr_stmt><expr><name><name>status</name><operator>.</operator><name>hasError</name></name> <operator>=</operator> <operator>!</operator><call><name>check_extents</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>status</name><operator>.</operator><name>busy</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>free_extents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>status</name><operator>.</operator><name>hasError</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>data_file_len</name> <operator>&gt;</operator> <name><name>status</name><operator>.</operator><name>busy</name><operator>.</operator><name>blocksCount</name></name> <operator>+</operator> <name><name>free_extents</name><operator>.</operator><name>blocksCount</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Not used file blocks from %lu to %lu"</literal></expr></argument>,
			 <argument><expr><name><name>status</name><operator>.</operator><name>busy</name><operator>.</operator><name>blocksCount</name></name> <operator>+</operator> <name><name>free_extents</name><operator>.</operator><name>blocksCount</name></name></expr></argument>,
			 <argument><expr><name>data_file_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>status</name><operator>.</operator><name>hasError</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>data_file_len</name> <operator>&lt;</operator> <name><name>status</name><operator>.</operator><name>busy</name><operator>.</operator><name>blocksCount</name></name> <operator>+</operator> <name><name>free_extents</name><operator>.</operator><name>blocksCount</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Excess file blocks from %lu to %lu"</literal></expr></argument>,
			 <argument><expr><name>data_file_len</name></expr></argument>,
			 <argument><expr><name><name>status</name><operator>.</operator><name>busy</name><operator>.</operator><name>blocksCount</name></name> <operator>+</operator> <name><name>free_extents</name><operator>.</operator><name>blocksCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>status</name><operator>.</operator><name>hasError</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* frees allocated bytes */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>status</name><operator>.</operator><name>busy</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>status</name><operator>.</operator><name>busy</name><operator>.</operator><name>extents</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>status</name><operator>.</operator><name>busy</name><operator>.</operator><name>extents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>free_extents</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>free_extents</name><operator>.</operator><name>extents</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>free_extents</name><operator>.</operator><name>extents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>checkpoint_number</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* file extents sort check */</comment>
		<decl_stmt><decl><type><name>SeqBufTag</name></type>	<name>tag</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ExtentsArray</name></type> <name>map_extents</name></decl>,
					<decl><type ref="prev"/><name>tmp_extents</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map_extents</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ExtentsArray</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp_extents</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ExtentsArray</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>datoid</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>datoid</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>relnode</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>relnode</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>num</name></name> <operator>=</operator> <name>checkpoint_number</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>type</name></name> <operator>=</operator> <literal type="char">'m'</literal></expr>;</expr_stmt>


		<if_stmt><if>if <condition>(<expr><call><name>seq_buf_file_exist</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>get_free_extents_from_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CheckpointFileHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>,
									   <argument><expr><operator>&amp;</operator><name>map_extents</name></expr></argument>, <argument><expr><name>is_compressed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"%s not exist"</literal></expr></argument>, <argument><expr><call><name>get_seq_buf_filename</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>status</name><operator>.</operator><name>hasError</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>type</name></name> <operator>=</operator> <literal type="char">'t'</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_compressed</name> <operator>&amp;&amp;</operator> <call><name>seq_buf_file_exist</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>get_free_extents_from_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_extents</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>map_extents</name><operator>.</operator><name>size</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>bool</name></type>		<name>sorted</name> <init>= <expr><ternary><condition><expr><name>is_compressed</name></expr> ?</condition><then> <expr><call><name>is_sorted_by_len_off</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map_extents</name></expr></argument>)</argument_list></call></expr>
			</then><else>: <expr><call><name>is_sorted_by_off</name><argument_list>(<argument><expr><operator>&amp;</operator><name>map_extents</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sorted</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>type</name></name> <operator>=</operator> <literal type="char">'m'</literal></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"%s file is not sorted"</literal></expr></argument>, <argument><expr><call><name>get_seq_buf_filename</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>status</name><operator>.</operator><name>hasError</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>map_extents</name><operator>.</operator><name>extents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>tmp_extents</name><operator>.</operator><name>size</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>bool</name></type>		<name>sorted</name> <init>= <expr><ternary><condition><expr><name>is_compressed</name></expr> ?</condition><then> <expr><call><name>is_sorted_by_len_off</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp_extents</name></expr></argument>)</argument_list></call></expr>
			</then><else>: <expr><call><name>is_sorted_by_off</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp_extents</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sorted</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>tag</name><operator>.</operator><name>type</name></name> <operator>=</operator> <literal type="char">'t'</literal></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"%s file is not sorted"</literal></expr></argument>, <argument><expr><call><name>get_seq_buf_filename</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>status</name><operator>.</operator><name>hasError</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>tmp_extents</name><operator>.</operator><name>extents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>!</operator><name><name>status</name><operator>.</operator><name>hasError</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Appends extent into the extents array.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>foreach_extent_append</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>FileExtent</name></type> <name>extent</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ExtentsArray</name> <modifier>*</modifier></type><name>arr</name> <init>= <expr><operator>(</operator><name>ExtentsArray</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>add_extent</name><argument_list>(<argument><expr><name>arr</name></expr></argument>, <argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Gets free file extents for an index.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>get_free_extents</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>ExtentsArray</name> <modifier>*</modifier></type><name>free_extents</name></decl></parameter>,
				 <parameter><decl><type><name>bool</name></type> <name>force_file_check</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>chkp_num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SeqBufTag</name></type>	<name>chkp_tag</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>is_compressed</name> <init>= <expr><call><name>OCompressIsValid</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>compress</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>chkp_tag</name><operator>.</operator><name>datoid</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>datoid</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>chkp_tag</name><operator>.</operator><name>relnode</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>relnode</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>force_file_check</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Reads free blocks from map file.
		 */</comment>
		<expr_stmt><expr><name><name>chkp_tag</name><operator>.</operator><name>type</name></name> <operator>=</operator> <literal type="char">'m'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>chkp_tag</name><operator>.</operator><name>num</name></name> <operator>=</operator> <name>chkp_num</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>get_free_extents_from_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>chkp_tag</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CheckpointFileHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>,
								   <argument><expr><name>free_extents</name></expr></argument>, <argument><expr><name>is_compressed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><operator>!</operator><name>is_compressed</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Reads free blocks as normal process for uncompressed index.
		 */</comment>
		<decl_stmt><decl><type><name>off_t</name></type>		<name>freebuf_offset</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint32</name></type>		<name>num</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>chkp_tag</name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>freeBuf</name><operator>.</operator><name>shared</name><operator>-&gt;</operator><name>tag</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>freebuf_offset</name> <operator>=</operator> <call><name>seq_buf_get_offset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>desc</name><operator>-&gt;</operator><name>freeBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>get_free_extents_from_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>chkp_tag</name></expr></argument>, <argument><expr><name>freebuf_offset</name></expr></argument>, <argument><expr><name>free_extents</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>num</name> <operator>=</operator> <name><name>chkp_tag</name><operator>.</operator><name>num</name></name></expr>;</init> <condition><expr><name>num</name> <operator>&lt;</operator> <name>chkp_num</name></expr>;</condition> <incr><expr><name>num</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><name><name>chkp_tag</name><operator>.</operator><name>num</name></name> <operator>=</operator> <name>num</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>chkp_tag</name><operator>.</operator><name>type</name></name> <operator>=</operator> <literal type="char">'t'</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>get_free_extents_from_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>chkp_tag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>free_extents</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/*
		 * Reads free blocks as normal process for compressed index.
		 */</comment>
		<expr_stmt><expr><call><name>foreach_free_extent</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>foreach_extent_append</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>free_extents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>chkp_tag</name><operator>.</operator><name>num</name></name> <operator>=</operator> <name>chkp_num</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>chkp_tag</name><operator>.</operator><name>type</name></name> <operator>=</operator> <literal type="char">'t'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>get_free_extents_from_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>chkp_tag</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CheckpointFileHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>,
								   <argument><expr><name>free_extents</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Appends file extents from file to the free extents array.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>get_free_extents_from_file</name><parameter_list>(<parameter><decl><type><name>SeqBufTag</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>offset</name></decl></parameter>,
						   <parameter><decl><type><name>ExtentsArray</name> <modifier>*</modifier></type><name>free_extents</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>compressed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>buf</name><index>[<expr><name>ORIOLEDB_BLCKSZ</name></expr>]</index></name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>filename</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>File</name></type>		<name>file</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FileExtent</name></type>	<name>extent</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>off_t</name></type>		<name>bytes_read</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>off</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>filename</name> <operator>=</operator> <call><name>get_seq_buf_filename</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>PathNameOpenFile</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>O_RDONLY</name> <operator>|</operator> <name>PG_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>file</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not open map file %s."</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<do>do
	<block>{<block_content>
		<expr_stmt><expr><name>bytes_read</name> <operator>=</operator> <call><name>OFileRead</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ORIOLEDB_BLCKSZ</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,
							   <argument><expr><name>WAIT_EVENT_DATA_FILE_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>bytes_read</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>bytes_read</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>compressed</name> <operator>||</operator> <name>use_device</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>extent</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FileExtent</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>i</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FileExtent</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>off</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>i</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>extent</name><operator>.</operator><name>off</name></name> <operator>=</operator> <name>off</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>extent</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<expr_stmt><expr><call><name>add_extent</name><argument_list>(<argument><expr><name>free_extents</name></expr></argument>, <argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block> while <condition>(<expr><name>bytes_read</name> <operator>==</operator> <name>ORIOLEDB_BLCKSZ</name></expr>)</condition>;</do>

	<expr_stmt><expr><call><name>FileClose</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Returns true if the busy and free extents array do not intersect and have no
 * holes.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>check_extents</name><parameter_list>(<parameter><decl><type><name>ExtentsArray</name> <modifier>*</modifier></type><name>busy</name></decl></parameter>, <parameter><decl><type><name>ExtentsArray</name> <modifier>*</modifier></type><name>free</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FileExtent</name></type>	<name>cur</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type>		<name>b</name></decl>,
				<decl><type ref="prev"/><name>f</name></decl>,
				<decl><type ref="prev"/><name>next_off</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>result</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name><name>busy</name><operator>-&gt;</operator><name>extents</name></name></expr></argument>, <argument><expr><name><name>busy</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FileExtent</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>file_extent_cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name><name>free</name><operator>-&gt;</operator><name>extents</name></name></expr></argument>, <argument><expr><name><name>free</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FileExtent</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>file_extent_cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>off</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cur</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>true</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>next_off</name> <operator>=</operator> <name><name>cur</name><operator>.</operator><name>off</name></name> <operator>+</operator> <name><name>cur</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>

		<while>while <condition>(<expr><name><name>b</name> <argument_list type="generic">&lt; <argument><expr><name><name>busy</name><operator>-&gt;</operator><name>size</name></name> <operator>&amp;&amp;</operator> <name>next_off</name></expr></argument> &gt;</argument_list></name> <name><name>busy</name><operator>-&gt;</operator><name>extents</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><name>off</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Excess busy extent %lu %u"</literal></expr></argument>,
				 <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>busy</name><operator>-&gt;</operator><name>extents</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><name>off</name></expr></argument>,
				 <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <name><name>busy</name><operator>-&gt;</operator><name>extents</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>b</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></while>

		<while>while <condition>(<expr><name><name>f</name> <argument_list type="generic">&lt; <argument><expr><name><name>free</name><operator>-&gt;</operator><name>size</name></name> <operator>&amp;&amp;</operator> <name>next_off</name></expr></argument> &gt;</argument_list></name> <name><name>free</name><operator>-&gt;</operator><name>extents</name><index>[<expr><name>f</name></expr>]</index></name><operator>.</operator><name>off</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Excess free extent %lu %u"</literal></expr></argument>,
				 <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>free</name><operator>-&gt;</operator><name>extents</name><index>[<expr><name>f</name></expr>]</index></name><operator>.</operator><name>off</name></expr></argument>,
				 <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <name><name>free</name><operator>-&gt;</operator><name>extents</name><index>[<expr><name>f</name></expr>]</index></name><operator>.</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>f</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></while>

		<if_stmt><if>if <condition>(<expr><name>f</name> <operator>&gt;=</operator> <name><name>free</name><operator>-&gt;</operator><name>size</name></name> <operator>&amp;&amp;</operator> <name>b</name> <operator>&gt;=</operator> <name><name>busy</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>f</name> <operator>&gt;=</operator> <name><name>free</name><operator>-&gt;</operator><name>size</name></name> <operator>||</operator> <operator>(</operator><name><name>b</name> <argument_list type="generic">&lt; <argument><expr><name><name>busy</name><operator>-&gt;</operator><name>size</name></name> <operator>&amp;&amp;</operator> <name>file_extent_cmp</name><operator>(</operator><operator>&amp;</operator><name><name>free</name><operator>-&gt;</operator><name>extents</name><index>[<expr><name>f</name></expr>]</index></name>, <operator>&amp;</operator><name><name>busy</name><operator>-&gt;</operator><name>extents</name><index>[<expr><name>b</name></expr>]</index></name><operator>)</operator></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>next_off</name> <operator>!=</operator> <name><name>busy</name><operator>-&gt;</operator><name>extents</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><name>off</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Extent %lu %u is neither free or busy"</literal></expr></argument>,
					 <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <operator>(</operator><name>next_off</name><operator>)</operator></expr></argument>,
					 <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <operator>(</operator><name><name>busy</name><operator>-&gt;</operator><name>extents</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><name>off</name> <operator>-</operator> <name>next_off</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>busy</name><operator>-&gt;</operator><name>extents</name><index>[<expr><name>b</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>next_off</name> <operator>!=</operator> <name><name>free</name><operator>-&gt;</operator><name>extents</name><index>[<expr><name>f</name></expr>]</index></name><operator>.</operator><name>off</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Extent %lu %u is neither free or busy"</literal></expr></argument>,
					 <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <operator>(</operator><name>next_off</name><operator>)</operator></expr></argument>,
					 <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <operator>(</operator><name><name>free</name><operator>-&gt;</operator><name>extents</name><index>[<expr><name>f</name></expr>]</index></name><operator>.</operator><name>off</name> <operator>-</operator> <name>next_off</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>free</name><operator>-&gt;</operator><name>extents</name><index>[<expr><name>f</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * (off, len) sort comparator
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>file_extent_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FileExtent</name></type>	<name>v1</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>FileExtent</name> <operator>*</operator><operator>)</operator> <name>p1</name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FileExtent</name></type>	<name>v2</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>FileExtent</name> <operator>*</operator><operator>)</operator> <name>p2</name><operator>)</operator></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>v1</name><operator>.</operator><name>off</name></name> <operator>!=</operator> <name><name>v2</name><operator>.</operator><name>off</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><ternary><condition><expr><name><name>v1</name><operator>.</operator><name>off</name></name> <operator>&gt;</operator> <name><name>v2</name><operator>.</operator><name>off</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>v1</name><operator>.</operator><name>len</name></name> <operator>!=</operator> <name><name>v2</name><operator>.</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><ternary><condition><expr><name><name>v1</name><operator>.</operator><name>len</name></name> <operator>&gt;</operator> <name><name>v2</name><operator>.</operator><name>len</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Returns false if the array is sorted by off order.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>is_sorted_by_off</name><parameter_list>(<parameter><decl><type><name>ExtentsArray</name> <modifier>*</modifier></type><name>array</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint64</name></type>		<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>sorted</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>array</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>array</name><operator>-&gt;</operator><name>size</name></name> <operator>&amp;&amp;</operator> <name>sorted</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><name>sorted</name> <operator>=</operator> <name><name>array</name><operator>-&gt;</operator><name>extents</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>off</name> <operator>&lt;=</operator> <name><name>array</name><operator>-&gt;</operator><name>extents</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>off</name></expr>;</expr_stmt>
		</block_content>}</block></for>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sorted</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Extents (%lu, %u), (%lu, %u) have wrong sort order"</literal></expr></argument>,
				 <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>array</name><operator>-&gt;</operator><name>extents</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>off</name></expr></argument>,
				 <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <name><name>array</name><operator>-&gt;</operator><name>extents</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>len</name></expr></argument>,
				 <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>array</name><operator>-&gt;</operator><name>extents</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>off</name></expr></argument>,
				 <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <name><name>array</name><operator>-&gt;</operator><name>extents</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>sorted</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Returns true if the array is sorted by (reverse len, off) order.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>is_sorted_by_len_off</name><parameter_list>(<parameter><decl><type><name>ExtentsArray</name> <modifier>*</modifier></type><name>array</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint64</name></type>		<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>cmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>sorted</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>array</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>array</name><operator>-&gt;</operator><name>size</name></name> <operator>&amp;&amp;</operator> <name>sorted</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><name>cmp</name> <operator>=</operator> <name><name>array</name><operator>-&gt;</operator><name>extents</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>len</name> <operator>-</operator> <name><name>array</name><operator>-&gt;</operator><name>extents</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>sorted</name> <operator>=</operator> <name>cmp</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>cmp</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>array</name><operator>-&gt;</operator><name>extents</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>off</name> <operator>&lt;=</operator> <name><name>array</name><operator>-&gt;</operator><name>extents</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>off</name><operator>)</operator></expr>;</expr_stmt>
		</block_content>}</block></for>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sorted</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Extents (%lu, %u), (%lu, %u) have wrong sort order"</literal></expr></argument>,
				 <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>array</name><operator>-&gt;</operator><name>extents</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>off</name></expr></argument>,
				 <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <name><name>array</name><operator>-&gt;</operator><name>extents</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>len</name></expr></argument>,
				 <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>array</name><operator>-&gt;</operator><name>extents</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>off</name></expr></argument>,
				 <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <name><name>array</name><operator>-&gt;</operator><name>extents</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>sorted</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Appends the extent to the array.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>add_extent</name><parameter_list>(<parameter><decl><type><name>ExtentsArray</name> <modifier>*</modifier></type><name>arr</name></decl></parameter>, <parameter><decl><type><name>FileExtent</name></type> <name>extent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>arr</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <name><name>arr</name><operator>-&gt;</operator><name>allocated</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>arr</name><operator>-&gt;</operator><name>allocated</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>arr</name><operator>-&gt;</operator><name>allocated</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>arr</name><operator>-&gt;</operator><name>extents</name></name> <operator>=</operator> <operator>(</operator><name>FileExtent</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FileExtent</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>arr</name><operator>-&gt;</operator><name>allocated</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name><name>arr</name><operator>-&gt;</operator><name>allocated</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>arr</name><operator>-&gt;</operator><name>extents</name></name> <operator>=</operator> <operator>(</operator><name>FileExtent</name> <operator>*</operator><operator>)</operator> <call><name>repalloc</name><argument_list>(<argument><expr><name><name>arr</name><operator>-&gt;</operator><name>extents</name></name></expr></argument>,
												   <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FileExtent</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>arr</name><operator>-&gt;</operator><name>allocated</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>arr</name><operator>-&gt;</operator><name>extents</name><index>[<expr><name><name>arr</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>extent</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>arr</name><operator>-&gt;</operator><name>blocksCount</name></name> <operator>+=</operator> <name><name>extent</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>check_walk_btree</name><parameter_list>(<parameter><decl><type><name>BTreeCheckStatus</name> <modifier>*</modifier></type><name>status</name></decl></parameter>, <parameter><decl><type><name>OInMemoryBlkno</name></type> <name>blkno</name></decl></parameter>,
				 <parameter><decl><type><name>OInMemoryBlkno</name></type> <name>parentPagenum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Page</name></type>		<name>p</name> <init>= <expr><call><name>O_GET_IN_MEMORY_PAGE</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OrioleDBPageDesc</name> <modifier>*</modifier></type><name>page_desc</name> <init>= <expr><call><name>O_GET_IN_MEMORY_PAGEDESC</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OBTreeFindPageContext</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><operator>&amp;</operator><name><name>status</name><operator>-&gt;</operator><name>context</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FileExtent</name></type>	<name>extent</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>OInMemoryBlknoIsValid</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>lock_page</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>OInMemoryBlknoIsValid</name><argument_list>(<argument><expr><name>parentPagenum</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>unlock_page</name><argument_list>(<argument><expr><name>parentPagenum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>index</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>context</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name><operator>.</operator><name>blkno</name> <operator>=</operator> <name>blkno</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>context</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name><operator>.</operator><name>pageChangeCount</name> <operator>=</operator> <call><name>O_PAGE_GET_CHANGE_COUNT</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>O_PAGE_IS</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>BROKEN_SPLIT</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"BTree has a broken split."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>status</name><operator>-&gt;</operator><name>hasError</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>O_PAGE_IS</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>LEAF</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>BTreePageItemLocator</name></type> <name>loc</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>BTREE_PAGE_LOCATOR_FIRST</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<while>while <condition>(<expr><call><name>BTREE_PAGE_LOCATOR_IS_VALID</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>loc</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Pointer</name></type>		<name>ptr</name> <init>= <expr><call><name>BTREE_PAGE_LOCATOR_GET_ITEM</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>loc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>BTreeNonLeafTuphdr</name> <modifier>*</modifier></type><name>tuphdr</name> <init>= <expr><operator>(</operator><name>BTreeNonLeafTuphdr</name> <operator>*</operator><operator>)</operator> <name>ptr</name></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>DOWNLINK_IS_IN_MEMORY</name><argument_list>(<argument><expr><name><name>tuphdr</name><operator>-&gt;</operator><name>downlink</name></name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>check_walk_btree</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><call><name>DOWNLINK_GET_IN_MEMORY_BLKNO</name><argument_list>(<argument><expr><name><name>tuphdr</name><operator>-&gt;</operator><name>downlink</name></name></expr></argument>)</argument_list></call></expr></argument>,
								 <argument><expr><name>blkno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><call><name>DOWNLINK_IS_IN_IO</name><argument_list>(<argument><expr><name><name>tuphdr</name><operator>-&gt;</operator><name>downlink</name></name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>wait_for_io_completion</name><argument_list>(<argument><expr><call><name>DOWNLINK_GET_IO_LOCKNUM</name><argument_list>(<argument><expr><name><name>tuphdr</name><operator>-&gt;</operator><name>downlink</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><call><name>DOWNLINK_IS_ON_DISK</name><argument_list>(<argument><expr><name><name>tuphdr</name><operator>-&gt;</operator><name>downlink</name></name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>context</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name><operator>.</operator><name>locator</name> <operator>=</operator> <name>loc</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>load_page</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>BTREE_PAGE_LOCATOR_NEXT</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>FileExtentIsValid</name><argument_list>(<argument><expr><name><name>page_desc</name><operator>-&gt;</operator><name>fileExtent</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>extent</name> <operator>=</operator> <name><name>page_desc</name><operator>-&gt;</operator><name>fileExtent</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>add_extent</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>status</name><operator>-&gt;</operator><name>busy</name></name></expr></argument>, <argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>OInMemoryBlknoIsValid</name><argument_list>(<argument><expr><name>parentPagenum</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>lock_page</name><argument_list>(<argument><expr><name>parentPagenum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>unlock_page</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>index</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>btree_check_compression_recursive</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>BTreeCompressStats</name> <modifier>*</modifier></type><name>stats</name></decl></parameter>, <parameter><decl><type><name>OCompress</name></type> <name>lvl</name></decl></parameter>,
								  <parameter><decl><type><name>OBTreeFindPageContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>OInMemoryBlkno</name></type> <name>blkno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>buf</name><index>[<expr><name>ORIOLEDB_BLCKSZ</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Page</name></type>		<name>p</name> <init>= <expr><call><name>O_GET_IN_MEMORY_PAGE</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OrioleDBPageHeader</name> <modifier>*</modifier></type><name>header</name> <init>= <expr><operator>(</operator><name>OrioleDBPageHeader</name> <operator>*</operator><operator>)</operator> <name>p</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>compressed_size</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>page_inc_usage_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>desc</name><operator>-&gt;</operator><name>ppool</name><operator>-&gt;</operator><name>ucm</name></name></expr></argument>, <argument><expr><name>blkno</name></expr></argument>,
						 <argument><expr><call><name>pg_atomic_read_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>header</name><operator>-&gt;</operator><name>usageCount</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>index</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>context</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name><operator>.</operator><name>blkno</name> <operator>=</operator> <name>blkno</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>context</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name><operator>.</operator><name>pageChangeCount</name> <operator>=</operator> <call><name>O_PAGE_GET_CHANGE_COUNT</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>O_PAGE_IS</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>LEAF</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>BTreePageItemLocator</name></type> <name>loc</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>BTREE_PAGE_LOCATOR_FIRST</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<while>while <condition>(<expr><call><name>BTREE_PAGE_LOCATOR_IS_VALID</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>loc</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Pointer</name></type>		<name>ptr</name> <init>= <expr><call><name>BTREE_PAGE_LOCATOR_GET_ITEM</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>loc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>BTreeNonLeafTuphdr</name> <modifier>*</modifier></type><name>tuphdr</name> <init>= <expr><operator>(</operator><name>BTreeNonLeafTuphdr</name> <operator>*</operator><operator>)</operator> <name>ptr</name></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>DOWNLINK_IS_IN_MEMORY</name><argument_list>(<argument><expr><name><name>tuphdr</name><operator>-&gt;</operator><name>downlink</name></name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>btree_check_compression_recursive</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>stats</name></expr></argument>, <argument><expr><name>lvl</name></expr></argument>, <argument><expr><name>context</name></expr></argument>,
												  <argument><expr><call><name>DOWNLINK_GET_IN_MEMORY_BLKNO</name><argument_list>(<argument><expr><name><name>tuphdr</name><operator>-&gt;</operator><name>downlink</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><call><name>DOWNLINK_IS_IN_IO</name><argument_list>(<argument><expr><name><name>tuphdr</name><operator>-&gt;</operator><name>downlink</name></name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>wait_for_io_completion</name><argument_list>(<argument><expr><call><name>DOWNLINK_GET_IO_LOCKNUM</name><argument_list>(<argument><expr><name><name>tuphdr</name><operator>-&gt;</operator><name>downlink</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><call><name>DOWNLINK_IS_ON_DISK</name><argument_list>(<argument><expr><name><name>tuphdr</name><operator>-&gt;</operator><name>downlink</name></name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>context</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name><operator>.</operator><name>locator</name> <operator>=</operator> <name>loc</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>lock_page</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>load_page</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>unlock_page</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>BTREE_PAGE_LOCATOR_NEXT</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ORIOLEDB_BLCKSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>null_unused_bytes</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<expr_stmt><expr><call><name>o_compress_page</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>compressed_size</name></expr></argument>, <argument><expr><name>lvl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>totalSize</name></name> <operator>+=</operator> <name>ORIOLEDB_BLCKSZ</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>totalCompressedSize</name></name> <operator>+=</operator> <name>compressed_size</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>compressed_size</name> <operator>&gt;</operator> <name>ORIOLEDB_BLCKSZ</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>oversize</name></name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>stats</name><operator>-&gt;</operator><name>nranges</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>stats</name><operator>-&gt;</operator><name>ranges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>from</name> <operator>&lt;=</operator> <name>compressed_size</name>
					<operator>&amp;&amp;</operator> <name>compressed_size</name> <operator>&lt;=</operator> <name><name>stats</name><operator>-&gt;</operator><name>ranges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><call><name>O_PAGE_IS</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>LEAF</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>ranges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>leaf_count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
					<else>else<block type="pseudo"><block_content>
						<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>ranges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>node_count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>errors</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>index</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>check_btree_compression</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>BTreeCompressStats</name> <modifier>*</modifier></type><name>stats</name></decl></parameter>, <parameter><decl><type><name>OCompress</name></type> <name>lvl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OBTreeFindPageContext</name></type> <name>context</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>recovery</name> <init>= <expr><call><name>is_recovery_in_progress</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>o_tables_rel_lock_extended</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>desc</name><operator>-&gt;</operator><name>oids</name></name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>, <argument><expr><name>recovery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>o_btree_load_shmem</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>init_page_find_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>COMMITSEQNO_INPROGRESS</name></expr></argument>, <argument><expr><name>BTREE_PAGE_FIND_MODIFY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>btree_check_compression_recursive</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>stats</name></expr></argument>, <argument><expr><name>lvl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>rootInfo</name><operator>.</operator><name>rootPageBlkno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>o_tables_rel_unlock_extended</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>desc</name><operator>-&gt;</operator><name>oids</name></name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>, <argument><expr><name>recovery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
