<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/orioledb/src/btree/find.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * find.c
 *		Routines for finding appropriate page in B-tree.
 *
 * Copyright (c) 2021-2022, Oriole DB Inc.
 *
 * IDENTIFICATION
 *	  contrib/orioledb/src/btree/find.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"orioledb.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"btree/find.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"btree/insert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"btree/io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"btree/page_chunks.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tableam/descr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/stopevent.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/transam.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>OBTreeFindPageContext</name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name>	   <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BTreeKeyType</name></type> <name>keyType</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Page</name></type>		<name>pagePtr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>targetLevel</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OInMemoryBlkno</name></type> <name>blkno</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>pageChangeCount</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PartialPageState</name> <modifier>*</modifier></type><name>partial</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>haveLock</name></decl>;</decl_stmt>
}</block></struct></type> <name>OBTreeFindPageInternalContext</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>follow_rightlink</name><parameter_list>(<parameter><decl><type><name>OBTreeFindPageInternalContext</name> <modifier>*</modifier></type><name>intCxt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>step_upward_level</name><parameter_list>(<parameter><decl><type><name>OBTreeFindPageInternalContext</name> <modifier>*</modifier></type><name>intCxt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>btree_find_read_page</name><parameter_list>(<parameter><decl><type><name>OBTreeFindPageContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
								 <parameter><decl><type><name>OInMemoryBlkno</name></type> <name>blkno</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>pageChangeCount</name></decl></parameter>,
								 <parameter><decl><type><name>Page</name></type> <name>img</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>BTreeKeyType</name></type> <name>keyType</name></decl></parameter>,
								 <parameter><decl><type><name>PartialPageState</name> <modifier>*</modifier></type><name>partial</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>OffsetNumber</name></type> <name>btree_page_binary_search_chunks</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>Page</name></type> <name>p</name></decl></parameter>,
													<parameter><decl><type><name>Pointer</name></type> <name>key</name></decl></parameter>,
													<parameter><decl><type><name>BTreeKeyType</name></type> <name>keyType</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * Initialize B-tree page find context.
 */</comment>
<function><type><name>void</name></type>
<name>init_page_find_context</name><parameter_list>(<parameter><decl><type><name>OBTreeFindPageContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>,
					   <parameter><decl><type><name>CommitSeqNo</name></type> <name>csn</name></decl></parameter>, <parameter><decl><type><name>uint16</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>partial</name><operator>.</operator><name>isPartial</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>desc</name></name> <operator>=</operator> <name>desc</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>csn</name></name> <operator>=</operator> <name>csn</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>imgUndoLoc</name></name> <operator>=</operator> <name>InvalidUndoLocation</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>O_TUPLE_SET_NULL</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>lokey</name><operator>.</operator><name>tuple</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*--
 * Locate page and location within it for given key
 *
 * - context - context of parent pages
 * - key - key/tuple for search (NULL for the leftmost page)
 * - keyType - type of the key
 * - targetLevel - target page targetLevel to find
 *
 * For better efficiency on large pages we use partial approach for page read
 * from the shared memory. We have 3 alternative types of the call
 * depending on context-&gt;flags:
 *
 * 1. BTREE_PAGE_FIND_FETCH - fetches a single tuple. It uses partial read for
 * all pages.
 *
 * 2. BTREE_PAGE_FIND_MODIFY - find the page for modification. It uses partial read
 * for all parent pages, call lock_page() on a target page and search a tuple
 * on the target page in the shared memory.
 *
 * 3. BTREE_PAGE_FIND_IMAGE - copy a target leaf(!) to context-&gt;img. It useful
 * for iteration through the page. Reads parent pages partial and then
 * memcpy() a leaf page to the context.image. It holds lokey
 * if BTREE_PAGE_FIND_KEEP_LOKEY is set.
 */</comment>
<function><type><name>bool</name></type>
<name>find_page</name><parameter_list>(<parameter><decl><type><name>OBTreeFindPageContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>BTreeKeyType</name></type> <name>keyType</name></decl></parameter>,
		  <parameter><decl><type><name>uint16</name></type> <name>targetLevel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><name><name>context</name><operator>-&gt;</operator><name>desc</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OBTreeFindPageInternalContext</name></type> <name>intCxt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BTreePageItemLocator</name></type> <name>loc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>needLock</name> <init>= <expr><name>false</name></expr></init></decl>,
				<decl><type ref="prev"/><name>fetchFlag</name> <name>PG_USED_FOR_ASSERTS_ONLY</name> <init>= <expr><call><name>BTREE_PAGE_FIND_IS</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>FETCH</name></expr></argument>)</argument_list></call></expr></init></decl>,
				<decl><type ref="prev"/><name>modifyFlag</name> <init>= <expr><call><name>BTREE_PAGE_FIND_IS</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>MODIFY</name></expr></argument>)</argument_list></call></expr></init></decl>,
				<decl><type ref="prev"/><name>imageFlag</name> <init>= <expr><call><name>BTREE_PAGE_FIND_IS</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>IMAGE</name></expr></argument>)</argument_list></call></expr></init></decl>,
				<decl><type ref="prev"/><name>tryFlag</name> <init>= <expr><call><name>BTREE_PAGE_FIND_IS</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>TRY_LOCK</name></expr></argument>)</argument_list></call></expr></init></decl>,
				<decl><type ref="prev"/><name>fixLeafFlag</name> <init>= <expr><call><name>BTREE_PAGE_FIND_IS</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>FIX_LEAF_SPLIT</name></expr></argument>)</argument_list></call></expr></init></decl>,
				<decl><type ref="prev"/><name>noFixFlag</name> <init>= <expr><call><name>BTREE_PAGE_FIND_IS</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>NO_FIX_SPLIT</name></expr></argument>)</argument_list></call></expr></init></decl>,
				<decl><type ref="prev"/><name>keepLokeyFlag</name> <init>= <expr><call><name>BTREE_PAGE_FIND_IS</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>KEEP_LOKEY</name></expr></argument>)</argument_list></call></expr></init></decl>,
				<decl><type ref="prev"/><name>downlinkLocationFlag</name> <init>= <expr><call><name>BTREE_PAGE_FIND_IS</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>DOWNLINK_LOCATION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>shmemIsReloaded</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Jsonb</name>	   <modifier>*</modifier></type><name>params</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CommitSeqNo</name> <modifier>*</modifier></type><name>readCsn</name> <init>= <expr><ternary><condition><expr><call><name>BTREE_PAGE_FIND_IS</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>READ_CSN</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>imgReadCsn</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>intCxt</name><operator>.</operator><name>context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>intCxt</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>intCxt</name><operator>.</operator><name>keyType</name></name> <operator>=</operator> <name>keyType</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>intCxt</name><operator>.</operator><name>targetLevel</name></name> <operator>=</operator> <name>targetLevel</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * See description of the function.
	 */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>(</operator><name>imageFlag</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>targetLevel</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>targetLevel</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>fetchFlag</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>modifyFlag</name><operator>)</operator>
		   <operator>||</operator> <operator>(</operator><name>imageFlag</name> <operator>&amp;&amp;</operator> <name>targetLevel</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>fetchFlag</name> <operator>&amp;&amp;</operator> <name>modifyFlag</name><operator>)</operator>
		   <operator>||</operator> <operator>(</operator><operator>!</operator><name>imageFlag</name> <operator>&amp;&amp;</operator> <name>fetchFlag</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>modifyFlag</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>keepLokeyFlag</name><operator>)</operator>
		   <operator>||</operator> <operator>(</operator><operator>!</operator><name>imageFlag</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>fetchFlag</name> <operator>&amp;&amp;</operator> <name>modifyFlag</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>keepLokeyFlag</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><call><name>COMMITSEQNO_IS_NORMAL</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>csn</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>modifyFlag</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* resets the context before start */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>BTREE_PAGE_FIND_IS</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>KEEP_LOKEY</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>BTREE_PAGE_FIND_UNSET</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>LOKEY_EXISTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>BTREE_PAGE_FIND_UNSET</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>LOKEY_SIBLING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>BTREE_PAGE_FIND_UNSET</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>LOKEY_UNDO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>imgUndoLoc</name></name> <operator>=</operator> <name>InvalidUndoLocation</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>partial</name><operator>.</operator><name>isPartial</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="block">/* starts from the rootPageBlkno */</comment>
	<expr_stmt><expr><name><name>intCxt</name><operator>.</operator><name>blkno</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>rootInfo</name><operator>.</operator><name>rootPageBlkno</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>intCxt</name><operator>.</operator><name>pageChangeCount</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>rootInfo</name><operator>.</operator><name>rootPageChangeCount</name></name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>true</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>BTreeNonLeafTuphdr</name> <modifier>*</modifier></type><name>noneLeafHdr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>level</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>OInMemoryBlkno</name></type> <name>parentBlkno</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>itemFound</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>wrongChangeCount</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Pointer</name></type>		<name>p</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>O_GET_IN_MEMORY_PAGE</name><argument_list>(<argument><expr><name><name>intCxt</name><operator>.</operator><name>blkno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>level</name> <operator>=</operator> <call><name>PAGE_GET_LEVEL</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>intCxt</name><operator>.</operator><name>partial</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>imageFlag</name> <operator>||</operator> <name>level</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>partial</name><operator>.</operator><name>isPartial</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/*
		 * else saves isPartial flag for the parent of the leaf in imageFlag
		 * case
		 */</comment>

		<if_stmt><if>if <condition>(<expr><name>needLock</name> <operator>||</operator> <operator>(</operator><name>modifyFlag</name> <operator>&amp;&amp;</operator> <name>level</name> <operator>==</operator> <name>targetLevel</name><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>tryFlag</name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>try_lock_page</name><argument_list>(<argument><expr><name><name>intCxt</name><operator>.</operator><name>blkno</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
				<expr_stmt><expr><name><name>intCxt</name><operator>.</operator><name>pagePtr</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>intCxt</name><operator>.</operator><name>haveLock</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>needLock</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><call><name>lock_page</name><argument_list>(<argument><expr><name><name>intCxt</name><operator>.</operator><name>blkno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<expr_stmt><expr><name><name>intCxt</name><operator>.</operator><name>pagePtr</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>intCxt</name><operator>.</operator><name>haveLock</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>needLock</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>imageFlag</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*
				 * In BTREE_PAGE_FIND_IMAGE case we read a target targetLevel
				 * to the context.img without partial and read upper non-leaf
				 * pages to the context.parentImg partially.
				 *
				 * We consider it's OK to return page of lower targetLevel
				 * than required, if tree doesn't have enough height.  That's
				 * suitable for sequential scan (see btree_scan.c).
				 */</comment>
				<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&lt;=</operator> <name>targetLevel</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name><name>intCxt</name><operator>.</operator><name>pagePtr</name></name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>img</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>intCxt</name><operator>.</operator><name>partial</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<expr_stmt><expr><name><name>intCxt</name><operator>.</operator><name>pagePtr</name></name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>parentImg</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>intCxt</name><operator>.</operator><name>partial</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>partial</name></name></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<comment type="block">/*
				 * In other cases we can use the img to hold a partial data.
				 */</comment>
				<expr_stmt><expr><name><name>intCxt</name><operator>.</operator><name>pagePtr</name></name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>img</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>intCxt</name><operator>.</operator><name>partial</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>partial</name></name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>

			<expr_stmt><expr><name><name>intCxt</name><operator>.</operator><name>haveLock</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>tryFlag</name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>ReadPageResult</name></type> <name>result</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>o_btree_try_read_page</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name><name>intCxt</name><operator>.</operator><name>blkno</name></name></expr></argument>,
											   <argument><expr><name><name>intCxt</name><operator>.</operator><name>pageChangeCount</name></name></expr></argument>, <argument><expr><name><name>intCxt</name><operator>.</operator><name>pagePtr</name></name></expr></argument>,
											   <argument><expr><name><name>context</name><operator>-&gt;</operator><name>csn</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyType</name></expr></argument>, <argument><expr><name><name>intCxt</name><operator>.</operator><name>partial</name></name></expr></argument>,
											   <argument><expr><name>readCsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>ReadPageResultWrongPageChangeCount</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>wrongChangeCount</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				</block_content>}</block></if>
				<if type="elseif">else if <condition>(<expr><name>result</name> <operator>==</operator> <name>ReadPageResultFailed</name></expr>)</condition>
				<block>{<block_content>
					<return>return <expr><name>false</name></expr>;</return>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>btree_find_read_page</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>intCxt</name><operator>.</operator><name>blkno</name></name></expr></argument>,
										  <argument><expr><name><name>intCxt</name><operator>.</operator><name>pageChangeCount</name></name></expr></argument>,
										  <argument><expr><name><name>intCxt</name><operator>.</operator><name>pagePtr</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyType</name></expr></argument>,
										  <argument><expr><name><name>intCxt</name><operator>.</operator><name>partial</name></name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>index</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><name>wrongChangeCount</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
					</block_content>}</block></if>
					<else>else
					<block>{<block_content>
						<expr_stmt><expr><call><name>step_upward_level</name><argument_list>(<argument><expr><operator>&amp;</operator><name>intCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<continue>continue;</continue>
					</block_content>}</block></else></if_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>STOPEVENTS_ENABLED</name><argument_list>()</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>params</name> <operator>=</operator> <call><name>btree_page_stopevent_params</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name><name>intCxt</name><operator>.</operator><name>pagePtr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>STOPEVENT</name><argument_list>(<argument><expr><name>STOPEVENT_PAGE_READ</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>index</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>wrongChangeCount</name> <operator>||</operator>
									<name><name>intCxt</name><operator>.</operator><name>pageChangeCount</name></name> <operator>!=</operator> <call><name>O_PAGE_GET_CHANGE_COUNT</name><argument_list>(<argument><expr><name><name>intCxt</name><operator>.</operator><name>pagePtr</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>intCxt</name><operator>.</operator><name>haveLock</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>unlock_page</name><argument_list>(<argument><expr><name><name>intCxt</name><operator>.</operator><name>blkno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>intCxt</name><operator>.</operator><name>haveLock</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>tryFlag</name> <operator>&amp;&amp;</operator> <name>shmemIsReloaded</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>rootInfo</name><operator>.</operator><name>rootPageBlkno</name></name> <operator>=</operator> <name>OInvalidInMemoryBlkno</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>rootInfo</name><operator>.</operator><name>metaPageBlkno</name></name> <operator>=</operator> <name>OInvalidInMemoryBlkno</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>rootInfo</name><operator>.</operator><name>rootPageChangeCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>tryFlag</name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>o_btree_try_use_shmem</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><call><name>o_btree_load_shmem</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<expr_stmt><expr><name>shmemIsReloaded</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

			<expr_stmt><expr><name><name>intCxt</name><operator>.</operator><name>blkno</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>rootInfo</name><operator>.</operator><name>rootPageBlkno</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>intCxt</name><operator>.</operator><name>pageChangeCount</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>rootInfo</name><operator>.</operator><name>rootPageChangeCount</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>O_GET_IN_MEMORY_PAGE</name><argument_list>(<argument><expr><name><name>intCxt</name><operator>.</operator><name>blkno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>


		<if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>index</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>wrongChangeCount</name> <operator>||</operator>
								   <name><name>intCxt</name><operator>.</operator><name>pageChangeCount</name></name> <operator>!=</operator> <call><name>O_PAGE_GET_CHANGE_COUNT</name><argument_list>(<argument><expr><name><name>intCxt</name><operator>.</operator><name>pagePtr</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * It's not the expected page, try to refind it.
			 */</comment>
			<expr_stmt><expr><call><name>step_upward_level</name><argument_list>(<argument><expr><operator>&amp;</operator><name>intCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * Fix broken rootPageBlkno split if needed.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>index</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
			<call><name>O_PAGE_IS</name><argument_list>(<argument><expr><name><name>intCxt</name><operator>.</operator><name>pagePtr</name></name></expr></argument>, <argument><expr><name>BROKEN_SPLIT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
			<operator>!</operator><name>noFixFlag</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Page</name></type>		<name>rootPageBlkno</name></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>intCxt</name><operator>.</operator><name>blkno</name></name> <operator>==</operator> <name><name>desc</name><operator>-&gt;</operator><name>rootInfo</name><operator>.</operator><name>rootPageBlkno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>intCxt</name><operator>.</operator><name>haveLock</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>lock_page</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>rootInfo</name><operator>.</operator><name>rootPageBlkno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>intCxt</name><operator>.</operator><name>haveLock</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name>rootPageBlkno</name> <operator>=</operator> <call><name>O_GET_IN_MEMORY_PAGE</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>rootInfo</name><operator>.</operator><name>rootPageBlkno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>O_PAGE_IS</name><argument_list>(<argument><expr><name>rootPageBlkno</name></expr></argument>, <argument><expr><name>BROKEN_SPLIT</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>o_btree_split_fix_and_unlock</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>rootInfo</name><operator>.</operator><name>rootPageBlkno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>intCxt</name><operator>.</operator><name>haveLock</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>level</name> <operator>=</operator> <call><name>PAGE_GET_LEVEL</name><argument_list>(<argument><expr><name><name>intCxt</name><operator>.</operator><name>pagePtr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * BTreeKeyNone requests leftmost page.  Otherwise, consider following
		 * the rightlink.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>keyType</name> <operator>!=</operator> <name>BTreeKeyNone</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>follow_rightlink</name><argument_list>(<argument><expr><operator>&amp;</operator><name>intCxt</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>index</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>intCxt</name><operator>.</operator><name>haveLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>step_upward_level</name><argument_list>(<argument><expr><operator>&amp;</operator><name>intCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>O_GET_IN_MEMORY_PAGE</name><argument_list>(<argument><expr><name><name>intCxt</name><operator>.</operator><name>blkno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * Choose the appropriate downlink for further search.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>keyType</name> <operator>==</operator> <name>BTreeKeyRightmost</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>BTREE_PAGE_LOCATOR_LAST</name><argument_list>(<argument><expr><name><name>intCxt</name><operator>.</operator><name>pagePtr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>keyType</name> <operator>==</operator> <name>BTreeKeyNone</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>BTREE_PAGE_LOCATOR_FIRST</name><argument_list>(<argument><expr><name><name>intCxt</name><operator>.</operator><name>pagePtr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* Have to do the binary search otherwise */</comment>
			<expr_stmt><expr><name>itemFound</name> <operator>=</operator> <call><name>btree_page_search</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name><name>intCxt</name><operator>.</operator><name>pagePtr</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyType</name></expr></argument>,
										  <argument><expr><name><name>intCxt</name><operator>.</operator><name>partial</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>itemFound</name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&gt;</operator> <name>targetLevel</name> <operator>||</operator> <name>downlinkLocationFlag</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>level</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>BTREE_PAGE_LOCATOR_PREV</name><argument_list>(<argument><expr><name><name>intCxt</name><operator>.</operator><name>pagePtr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name><name>intCxt</name><operator>.</operator><name>partial</name></name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>itemFound</name> <operator>=</operator> <call><name>partial_load_chunk</name><argument_list>(<argument><expr><name><name>intCxt</name><operator>.</operator><name>partial</name></name></expr></argument>, <argument><expr><name><name>intCxt</name><operator>.</operator><name>pagePtr</name></name></expr></argument>, <argument><expr><name><name>loc</name><operator>.</operator><name>chunkOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				</block_content>}</block></if>
				<if type="elseif">else if <condition>(<expr><operator>!</operator><name>modifyFlag</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>itemFound</name> <operator>=</operator> <call><name>page_locator_find_real_item</name><argument_list>(<argument><expr><name><name>intCxt</name><operator>.</operator><name>pagePtr</name></name></expr></argument>, <argument><expr><name><name>intCxt</name><operator>.</operator><name>partial</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>intCxt</name><operator>.</operator><name>partial</name></name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>itemFound</name> <operator>||</operator> <operator>!</operator><call><name>partial_load_chunk</name><argument_list>(<argument><expr><name><name>intCxt</name><operator>.</operator><name>partial</name></name></expr></argument>, <argument><expr><name><name>intCxt</name><operator>.</operator><name>pagePtr</name></name></expr></argument>, <argument><expr><name><name>loc</name><operator>.</operator><name>chunkOffset</name></name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*
				 * Can not read partial page, it happens if the pages was
				 * concurrently changed. But it should not happen under the
				 * lock_page().
				 */</comment>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>intCxt</name><operator>.</operator><name>haveLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>tryFlag</name></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>imageFlag</name> <operator>&amp;&amp;</operator> <name>level</name> <operator>==</operator> <name>targetLevel</name> <operator>+</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>keepLokeyFlag</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*
				 * We may need to load another one tuple for a backward
				 * iteration.
				 */</comment>
				<if_stmt><if>if <condition>(<expr><name><name>loc</name><operator>.</operator><name>itemOffset</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>loc</name><operator>.</operator><name>chunkOffset</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
					<operator>!</operator><call><name>partial_load_chunk</name><argument_list>(<argument><expr><name><name>intCxt</name><operator>.</operator><name>partial</name></name></expr></argument>, <argument><expr><name><name>intCxt</name><operator>.</operator><name>pagePtr</name></name></expr></argument>, <argument><expr><name><name>loc</name><operator>.</operator><name>chunkOffset</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>intCxt</name><operator>.</operator><name>haveLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<continue>continue;</continue>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>noneLeafHdr</name> <operator>=</operator> <operator>(</operator><name>BTreeNonLeafTuphdr</name> <operator>*</operator><operator>)</operator> <call><name>BTREE_PAGE_LOCATOR_GET_ITEM</name><argument_list>(<argument><expr><name><name>intCxt</name><operator>.</operator><name>pagePtr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* Place new item to the context */</comment>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>index</name></name> <operator>&lt;</operator> <name>ORIOLEDB_MAX_DEPTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>context</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name><operator>.</operator><name>locator</name> <operator>=</operator> <name>loc</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>context</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name><operator>.</operator><name>blkno</name> <operator>=</operator> <name><name>intCxt</name><operator>.</operator><name>blkno</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>context</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name><operator>.</operator><name>pageChangeCount</name> <operator>=</operator> <call><name>O_PAGE_GET_CHANGE_COUNT</name><argument_list>(<argument><expr><name><name>intCxt</name><operator>.</operator><name>pagePtr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Save the lokey if needed */</comment>
		<if_stmt><if>if <condition>(<expr><name>keepLokeyFlag</name> <operator>&amp;&amp;</operator> <name>level</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
			<call><name>BTREE_PAGE_LOCATOR_GET_OFFSET</name><argument_list>(<argument><expr><name><name>intCxt</name><operator>.</operator><name>pagePtr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>loc</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>OTuple</name></type>		<name>lokey</name></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>noneLeafHdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>BTREE_PAGE_READ_INTERNAL_TUPLE</name><argument_list>(<argument><expr><name>lokey</name></expr></argument>, <argument><expr><name><name>intCxt</name><operator>.</operator><name>pagePtr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>copy_fixed_key</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>lokey</name></name></expr></argument>, <argument><expr><name>lokey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>BTREE_PAGE_FIND_SET</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>LOKEY_EXISTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>BTREE_PAGE_FIND_UNSET</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>LOKEY_SIBLING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>BTREE_PAGE_FIND_UNSET</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>LOKEY_UNDO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>level</name> <operator>!=</operator> <name>targetLevel</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>imageFlag</name> <operator>||</operator> <name>level</name> <operator>&gt;</operator> <name>targetLevel</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>noneLeafHdr</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>tryFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>intCxt</name><operator>.</operator><name>haveLock</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>unlock_page</name><argument_list>(<argument><expr><name><name>intCxt</name><operator>.</operator><name>blkno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>intCxt</name><operator>.</operator><name>haveLock</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>level</name> <operator>==</operator> <name>targetLevel</name> <operator>||</operator> <operator>(</operator><name>imageFlag</name> <operator>&amp;&amp;</operator> <name>level</name> <operator>&lt;=</operator> <name>targetLevel</name><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>intCxt</name><operator>.</operator><name>haveLock</name></name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><name>modifyFlag</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>unlock_page</name><argument_list>(<argument><expr><name><name>intCxt</name><operator>.</operator><name>blkno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if>
				<if type="elseif">else if <condition>(<expr><name>level</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>fixLeafFlag</name></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/* called from o_btree_normal_modify() */</comment>
					<comment type="block">/* try to fix incomplete split for leafs here */</comment>
					<decl_stmt><decl><type><name>bool</name></type>		<name>relocked</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

					<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>noFixFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>modifyFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<if_stmt><if>if <condition>(<expr><call><name>o_btree_split_is_incomplete</name><argument_list>(<argument><expr><name><name>intCxt</name><operator>.</operator><name>blkno</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>relocked</name></expr></argument>)</argument_list></call></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><call><name>o_btree_split_fix_and_unlock</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name><name>intCxt</name><operator>.</operator><name>blkno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>intCxt</name><operator>.</operator><name>haveLock</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>step_upward_level</name><argument_list>(<argument><expr><operator>&amp;</operator><name>intCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<continue>continue;</continue>
					</block_content>}</block></if>
					<if type="elseif">else if <condition>(<expr><name>relocked</name></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><call><name>step_upward_level</name><argument_list>(<argument><expr><operator>&amp;</operator><name>intCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<continue>continue;</continue>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>

			<return>return <expr><name>true</name></expr>;</return>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><operator>!</operator><name>noneLeafHdr</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block">/* make clang static analyzer happy */</comment>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><call><name>DOWNLINK_IS_ON_DISK</name><argument_list>(<argument><expr><name><name>noneLeafHdr</name><operator>-&gt;</operator><name>downlink</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>tryFlag</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*
				 * Don't try to load page from write_page()
				 */</comment>
				<if_stmt><if>if <condition>(<expr><name><name>intCxt</name><operator>.</operator><name>haveLock</name></name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>unlock_page</name><argument_list>(<argument><expr><name><name>intCxt</name><operator>.</operator><name>blkno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<return>return <expr><name>false</name></expr>;</return>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>intCxt</name><operator>.</operator><name>haveLock</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>load_page</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>intCxt</name><operator>.</operator><name>blkno</name></name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>context</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name><operator>.</operator><name>blkno</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>loc</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>context</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name><operator>.</operator><name>locator</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>intCxt</name><operator>.</operator><name>pagePtr</name></name> <operator>=</operator> <name>p</name> <operator>=</operator> <call><name>O_GET_IN_MEMORY_PAGE</name><argument_list>(<argument><expr><name><name>intCxt</name><operator>.</operator><name>blkno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>noneLeafHdr</name> <operator>=</operator> <operator>(</operator><name>BTreeNonLeafTuphdr</name> <operator>*</operator><operator>)</operator> <call><name>BTREE_PAGE_LOCATOR_GET_ITEM</name><argument_list>(<argument><expr><name><name>intCxt</name><operator>.</operator><name>pagePtr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><name>imageFlag</name> <operator>&amp;&amp;</operator> <name>level</name> <operator>==</operator> <name>targetLevel</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/*
					 * Especial case, we load a leaf for image search. Now we
					 * need to save tuples for the iterators code from the
					 * parent.
					 */</comment>
					<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>parentImg</name></name></expr></argument>, <argument><expr><name><name>intCxt</name><operator>.</operator><name>pagePtr</name></name></expr></argument>, <argument><expr><name>ORIOLEDB_BLCKSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>partial</name><operator>.</operator><name>isPartial</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><name>needLock</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><call><name>DOWNLINK_IS_IN_IO</name><argument_list>(<argument><expr><name><name>noneLeafHdr</name><operator>-&gt;</operator><name>downlink</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type>			<name>ionum</name> <init>= <expr><call><name>DOWNLINK_GET_IO_LOCKNUM</name><argument_list>(<argument><expr><name><name>noneLeafHdr</name><operator>-&gt;</operator><name>downlink</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>intCxt</name><operator>.</operator><name>haveLock</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>unlock_page</name><argument_list>(<argument><expr><name><name>intCxt</name><operator>.</operator><name>blkno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>intCxt</name><operator>.</operator><name>haveLock</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>wait_for_io_completion</name><argument_list>(<argument><expr><name>ionum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>parentBlkno</name> <operator>=</operator> <name><name>intCxt</name><operator>.</operator><name>blkno</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>index</name></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>intCxt</name><operator>.</operator><name>blkno</name></name> <operator>=</operator> <call><name>DOWNLINK_GET_IN_MEMORY_BLKNO</name><argument_list>(<argument><expr><name><name>noneLeafHdr</name><operator>-&gt;</operator><name>downlink</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>intCxt</name><operator>.</operator><name>pageChangeCount</name></name> <operator>=</operator> <call><name>DOWNLINK_GET_IN_MEMORY_CHANGECOUNT</name><argument_list>(<argument><expr><name><name>noneLeafHdr</name><operator>-&gt;</operator><name>downlink</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>STOPEVENTS_ENABLED</name><argument_list>()</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>params</name> <operator>=</operator> <call><name>btree_downlink_stopevent_params</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name><name>intCxt</name><operator>.</operator><name>pagePtr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>intCxt</name><operator>.</operator><name>haveLock</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>unlock_page</name><argument_list>(<argument><expr><name>parentBlkno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>intCxt</name><operator>.</operator><name>haveLock</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>O_GET_IN_MEMORY_PAGE</name><argument_list>(<argument><expr><name><name>intCxt</name><operator>.</operator><name>blkno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>STOPEVENT</name><argument_list>(<argument><expr><name>STOPEVENT_STEP_DOWN</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>follow_rightlink</name><parameter_list>(<parameter><decl><type><name>OBTreeFindPageInternalContext</name> <modifier>*</modifier></type><name>intCxt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OBTreeFindPageContext</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><name><name>intCxt</name><operator>-&gt;</operator><name>context</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><name><name>context</name><operator>-&gt;</operator><name>desc</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BTreeKeyType</name></type> <name>keykind</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name><name>intCxt</name><operator>-&gt;</operator><name>keyType</name></name> <operator>==</operator> <name>BTreeKeyPageHiKey</name></expr> ?</condition><then>
							<expr><name>BTreeKeyNonLeafKey</name></expr> </then><else>:
							<expr><name><name>intCxt</name><operator>-&gt;</operator><name>keyType</name></name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>followVal</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name><name>intCxt</name><operator>-&gt;</operator><name>keyType</name></name> <operator>==</operator> <name>BTreeKeyPageHiKey</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTuple</name></type>		<name>pageHiKey</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>O_PAGE_IS</name><argument_list>(<argument><expr><name><name>intCxt</name><operator>-&gt;</operator><name>pagePtr</name></name></expr></argument>, <argument><expr><name>RIGHTMOST</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>BTREE_PAGE_GET_HIKEY</name><argument_list>(<argument><expr><name>pageHiKey</name></expr></argument>, <argument><expr><name><name>intCxt</name><operator>-&gt;</operator><name>pagePtr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<while>while <condition>(<expr><operator>!</operator><call><name>O_PAGE_IS</name><argument_list>(<argument><expr><name><name>intCxt</name><operator>-&gt;</operator><name>pagePtr</name></name></expr></argument>, <argument><expr><name>RIGHTMOST</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
		   <operator>(</operator><name><name>intCxt</name><operator>-&gt;</operator><name>keyType</name></name> <operator>==</operator> <name>BTreeKeyRightmost</name> <operator>||</operator>
			<call><name>o_btree_cmp</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name><name>intCxt</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>keykind</name></expr></argument>,
						<argument><expr><operator>&amp;</operator><name>pageHiKey</name></expr></argument>, <argument><expr><name>BTreeKeyNonLeafKey</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>followVal</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>uint64</name></type>		<name>rightlink</name> <init>= <expr><call><name>BTREE_PAGE_GET_RIGHTLINK</name><argument_list>(<argument><expr><name><name>intCxt</name><operator>-&gt;</operator><name>pagePtr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OInMemoryBlknoIsValid</name><argument_list>(<argument><expr><call><name>RIGHTLINK_GET_BLKNO</name><argument_list>(<argument><expr><name>rightlink</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>intCxt</name><operator>-&gt;</operator><name>haveLock</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>unlock_page</name><argument_list>(<argument><expr><name><name>intCxt</name><operator>-&gt;</operator><name>blkno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>intCxt</name><operator>-&gt;</operator><name>haveLock</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<return>return <expr><name>true</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>BTREE_PAGE_FIND_IS</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>KEEP_LOKEY</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>copy_fixed_hikey</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>lokey</name></name></expr></argument>, <argument><expr><name><name>intCxt</name><operator>-&gt;</operator><name>pagePtr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			\
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>O_TUPLE_IS_NULL</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>lokey</name><operator>.</operator><name>tuple</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>BTREE_PAGE_FIND_SET</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>LOKEY_EXISTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>PAGE_GET_LEVEL</name><argument_list>(<argument><expr><name><name>intCxt</name><operator>-&gt;</operator><name>pagePtr</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>intCxt</name><operator>-&gt;</operator><name>targetLevel</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>BTREE_PAGE_FIND_SET</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>LOKEY_SIBLING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>BTREE_PAGE_FIND_UNSET</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>LOKEY_UNDO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><call><name>BTREE_PAGE_FIND_UNSET</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>LOKEY_SIBLING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>BTREE_PAGE_FIND_UNSET</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>LOKEY_UNDO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>intCxt</name><operator>-&gt;</operator><name>haveLock</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>unlock_page</name><argument_list>(<argument><expr><name><name>intCxt</name><operator>-&gt;</operator><name>blkno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>intCxt</name><operator>-&gt;</operator><name>blkno</name></name> <operator>=</operator> <call><name>RIGHTLINK_GET_BLKNO</name><argument_list>(<argument><expr><name>rightlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>intCxt</name><operator>-&gt;</operator><name>haveLock</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>lock_page</name><argument_list>(<argument><expr><name><name>intCxt</name><operator>-&gt;</operator><name>blkno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>intCxt</name><operator>-&gt;</operator><name>pagePtr</name></name> <operator>=</operator> <call><name>O_GET_IN_MEMORY_PAGE</name><argument_list>(<argument><expr><name><name>intCxt</name><operator>-&gt;</operator><name>blkno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>intCxt</name><operator>-&gt;</operator><name>pageChangeCount</name></name> <operator>=</operator> <call><name>O_PAGE_GET_CHANGE_COUNT</name><argument_list>(<argument><expr><name><name>intCxt</name><operator>-&gt;</operator><name>pagePtr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>intCxt</name><operator>-&gt;</operator><name>pageChangeCount</name></name> <operator>!=</operator>
				<call><name>RIGHTLINK_GET_CHANGECOUNT</name><argument_list>(<argument><expr><name>rightlink</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*
				 * Split was finished and right page is already
				 * merged/evicted. Have to retry.
				 */</comment>
				<expr_stmt><expr><call><name>unlock_page</name><argument_list>(<argument><expr><name><name>intCxt</name><operator>-&gt;</operator><name>blkno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>intCxt</name><operator>-&gt;</operator><name>haveLock</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
				<return>return <expr><name>true</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>btree_find_read_page</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>intCxt</name><operator>-&gt;</operator><name>blkno</name></name></expr></argument>,
									  <argument><expr><call><name>RIGHTLINK_GET_CHANGECOUNT</name><argument_list>(<argument><expr><name>rightlink</name></expr></argument>)</argument_list></call></expr></argument>,
									  <argument><expr><name><name>intCxt</name><operator>-&gt;</operator><name>pagePtr</name></name></expr></argument>,
									  <argument><expr><name><name>intCxt</name><operator>-&gt;</operator><name>key</name></name></expr></argument>,
									  <argument><expr><name><name>intCxt</name><operator>-&gt;</operator><name>keyType</name></name></expr></argument>,
									  <argument><expr><name><name>intCxt</name><operator>-&gt;</operator><name>partial</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>RIGHTLINK_GET_CHANGECOUNT</name><argument_list>(<argument><expr><name>rightlink</name></expr></argument>)</argument_list></call> <operator>==</operator>
				   <call><name>O_PAGE_GET_CHANGE_COUNT</name><argument_list>(<argument><expr><name><name>intCxt</name><operator>-&gt;</operator><name>pagePtr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>intCxt</name><operator>-&gt;</operator><name>pageChangeCount</name></name> <operator>=</operator> <call><name>O_PAGE_GET_CHANGE_COUNT</name><argument_list>(<argument><expr><name><name>intCxt</name><operator>-&gt;</operator><name>pagePtr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>O_PAGE_IS</name><argument_list>(<argument><expr><name><name>intCxt</name><operator>-&gt;</operator><name>pagePtr</name></name></expr></argument>, <argument><expr><name>RIGHTMOST</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>BTREE_PAGE_GET_HIKEY</name><argument_list>(<argument><expr><name>pageHiKey</name></expr></argument>, <argument><expr><name><name>intCxt</name><operator>-&gt;</operator><name>pagePtr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></while>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Step to the upward level of the tree and retry the search.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>step_upward_level</name><parameter_list>(<parameter><decl><type><name>OBTreeFindPageInternalContext</name> <modifier>*</modifier></type><name>intCxt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OBTreeFindPageContext</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><name><name>intCxt</name><operator>-&gt;</operator><name>context</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>intCxt</name><operator>-&gt;</operator><name>haveLock</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>unlock_page</name><argument_list>(<argument><expr><name><name>intCxt</name><operator>-&gt;</operator><name>blkno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>index</name></name><operator>--</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>intCxt</name><operator>-&gt;</operator><name>blkno</name></name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>context</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name><operator>.</operator><name>blkno</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>intCxt</name><operator>-&gt;</operator><name>pageChangeCount</name></name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>context</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name><operator>.</operator><name>pageChangeCount</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Re-find the location of previously found key.  If search for modification,
 * assume lock was relesed (otherwise, no point to refind).
 */</comment>
<function><type><name>bool</name></type>
<name>refind_page</name><parameter_list>(<parameter><decl><type><name>OBTreeFindPageContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>BTreeKeyType</name></type> <name>keyType</name></decl></parameter>,
			<parameter><decl><type><name>uint16</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>OInMemoryBlkno</name></type> <name>_blkno</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>_pageChangeCount</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><name><name>context</name><operator>-&gt;</operator><name>desc</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OBTreeFindPageInternalContext</name></type> <name>intCxt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BTreePageItemLocator</name></type> <name>loc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>img</name> <init>= <expr><name><name>context</name><operator>-&gt;</operator><name>img</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>item_found</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Pointer</name></type>		<name>p</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>intCxt</name><operator>.</operator><name>context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>intCxt</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>intCxt</name><operator>.</operator><name>keyType</name></name> <operator>=</operator> <name>keyType</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>intCxt</name><operator>.</operator><name>blkno</name></name> <operator>=</operator> <name>_blkno</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>intCxt</name><operator>.</operator><name>targetLevel</name></name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>intCxt</name><operator>.</operator><name>pageChangeCount</name></name> <operator>=</operator> <name>_pageChangeCount</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>intCxt</name><operator>.</operator><name>partial</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<label><name>retry</name>:</label>

	<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>O_GET_IN_MEMORY_PAGE</name><argument_list>(<argument><expr><name><name>intCxt</name><operator>.</operator><name>blkno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>BTREE_PAGE_FIND_IS</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>MODIFY</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>intCxt</name><operator>.</operator><name>pageChangeCount</name></name> <operator>==</operator> <name>InvalidOPageChangeCount</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>find_page</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyType</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>lock_page</name><argument_list>(<argument><expr><name><name>intCxt</name><operator>.</operator><name>blkno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>intCxt</name><operator>.</operator><name>haveLock</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>intCxt</name><operator>.</operator><name>pagePtr</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>PAGE_GET_LEVEL</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>level</name> <operator>||</operator>
			<call><name>O_PAGE_GET_CHANGE_COUNT</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>intCxt</name><operator>.</operator><name>pageChangeCount</name></name> <operator>||</operator>
			<operator>(</operator><call><name>O_PAGE_IS</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>BROKEN_SPLIT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>intCxt</name><operator>.</operator><name>blkno</name></name> <operator>==</operator> <name><name>desc</name><operator>-&gt;</operator><name>rootInfo</name><operator>.</operator><name>rootPageBlkno</name></name><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>unlock_page</name><argument_list>(<argument><expr><name><name>intCxt</name><operator>.</operator><name>blkno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><call><name>find_page</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyType</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>level</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>BTREE_PAGE_FIND_IS</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>FIX_LEAF_SPLIT</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* called from o_btree_normal_modify() */</comment>
			<comment type="block">/* try to fix incomplete split for leafs here */</comment>
			<decl_stmt><decl><type><name>bool</name></type>		<name>relocked</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>BTREE_PAGE_FIND_IS</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>NO_FIX_SPLIT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>o_btree_split_is_incomplete</name><argument_list>(<argument><expr><name><name>intCxt</name><operator>.</operator><name>blkno</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>relocked</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>intCxt</name><operator>.</operator><name>haveLock</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>o_btree_split_fix_and_unlock</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name><name>intCxt</name><operator>.</operator><name>blkno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<goto>goto <name>retry</name>;</goto>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>relocked</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>intCxt</name><operator>.</operator><name>haveLock</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>unlock_page</name><argument_list>(<argument><expr><name><name>intCxt</name><operator>.</operator><name>blkno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<goto>goto <name>retry</name>;</goto>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>BTREE_PAGE_FIND_IS</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>FETCH</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>bool</name></type>		<name>success</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>intCxt</name><operator>.</operator><name>pageChangeCount</name></name> <operator>==</operator> <name>InvalidOPageChangeCount</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>find_page</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyType</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>partial</name><operator>.</operator><name>isPartial</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>intCxt</name><operator>.</operator><name>partial</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>partial</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>btree_find_read_page</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>intCxt</name><operator>.</operator><name>blkno</name></name></expr></argument>, <argument><expr><name><name>intCxt</name><operator>.</operator><name>pageChangeCount</name></name></expr></argument>, <argument><expr><name>img</name></expr></argument>, <argument><expr><name>key</name></expr></argument>,
									   <argument><expr><name>keyType</name></expr></argument>, <argument><expr><name><name>intCxt</name><operator>.</operator><name>partial</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>intCxt</name><operator>.</operator><name>haveLock</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>intCxt</name><operator>.</operator><name>pagePtr</name></name> <operator>=</operator> <name>img</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name> <operator>||</operator>
			<call><name>PAGE_GET_LEVEL</name><argument_list>(<argument><expr><name>img</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>level</name> <operator>||</operator>
			<operator>(</operator><call><name>O_PAGE_IS</name><argument_list>(<argument><expr><name>img</name></expr></argument>, <argument><expr><name>BROKEN_SPLIT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>intCxt</name><operator>.</operator><name>blkno</name></name> <operator>==</operator> <name><name>desc</name><operator>-&gt;</operator><name>rootInfo</name><operator>.</operator><name>rootPageBlkno</name></name><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<return>return <expr><call><name>find_page</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyType</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>O_PAGE_GET_CHANGE_COUNT</name><argument_list>(<argument><expr><name>img</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>intCxt</name><operator>.</operator><name>pageChangeCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* quiet compiler warnings */</comment>
		<expr_stmt><expr><name><name>intCxt</name><operator>.</operator><name>haveLock</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>intCxt</name><operator>.</operator><name>pagePtr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* Follow the page rightlink if needed */</comment>
	<if_stmt><if>if <condition>(<expr><name>keyType</name> <operator>!=</operator> <name>BTreeKeyNone</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>follow_rightlink</name><argument_list>(<argument><expr><operator>&amp;</operator><name>intCxt</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>intCxt</name><operator>.</operator><name>haveLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><call><name>find_page</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyType</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>keyType</name> <operator>==</operator> <name>BTreeKeyRightmost</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* We're looking for the rightmost page, so go the rightmost downlink */</comment>
		<expr_stmt><expr><call><name>BTREE_PAGE_LOCATOR_LAST</name><argument_list>(<argument><expr><name><name>intCxt</name><operator>.</operator><name>pagePtr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>keyType</name> <operator>==</operator> <name>BTreeKeyNone</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* We're looking for the leftmost page, so go the leftmost downlink */</comment>
		<expr_stmt><expr><call><name>BTREE_PAGE_LOCATOR_FIRST</name><argument_list>(<argument><expr><name><name>intCxt</name><operator>.</operator><name>pagePtr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* Locate the correct downlink within the non-leaf page */</comment>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>item_found</name> <operator>=</operator> <call><name>btree_page_search</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name><name>intCxt</name><operator>.</operator><name>pagePtr</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyType</name></expr></argument>,
									   <argument><expr><name><name>intCxt</name><operator>.</operator><name>partial</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>item_found</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>BTREE_PAGE_FIND_IS</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>DOWNLINK_LOCATION</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>O_PAGE_IS</name><argument_list>(<argument><expr><name><name>intCxt</name><operator>.</operator><name>pagePtr</name></name></expr></argument>, <argument><expr><name>LEAF</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>BTREE_PAGE_LOCATOR_PREV</name><argument_list>(<argument><expr><name><name>intCxt</name><operator>.</operator><name>pagePtr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>intCxt</name><operator>.</operator><name>partial</name></name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>item_found</name> <operator>=</operator> <call><name>partial_load_chunk</name><argument_list>(<argument><expr><name><name>intCxt</name><operator>.</operator><name>partial</name></name></expr></argument>,
													<argument><expr><name><name>intCxt</name><operator>.</operator><name>pagePtr</name></name></expr></argument>,
													<argument><expr><name><name>loc</name><operator>.</operator><name>chunkOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>BTREE_PAGE_FIND_IS</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>MODIFY</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>item_found</name> <operator>=</operator> <call><name>page_locator_find_real_item</name><argument_list>(<argument><expr><name><name>intCxt</name><operator>.</operator><name>pagePtr</name></name></expr></argument>,
														 <argument><expr><name><name>intCxt</name><operator>.</operator><name>partial</name></name></expr></argument>,
														 <argument><expr><operator>&amp;</operator><name>loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>intCxt</name><operator>.</operator><name>partial</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>item_found</name></expr>)</condition><block type="pseudo"><block_content>
			<goto>goto <name>retry</name>;</goto></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>partial_load_chunk</name><argument_list>(<argument><expr><name><name>intCxt</name><operator>.</operator><name>partial</name></name></expr></argument>, <argument><expr><name><name>intCxt</name><operator>.</operator><name>pagePtr</name></name></expr></argument>, <argument><expr><name><name>loc</name><operator>.</operator><name>chunkOffset</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<goto>goto <name>retry</name>;</goto></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>context</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name><operator>.</operator><name>locator</name> <operator>=</operator> <name>loc</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>context</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name><operator>.</operator><name>blkno</name> <operator>=</operator> <name><name>intCxt</name><operator>.</operator><name>blkno</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>context</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name><operator>.</operator><name>pageChangeCount</name> <operator>=</operator> <name><name>intCxt</name><operator>.</operator><name>pageChangeCount</name></name></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Find the right sibling of the current page.
 *
 * Old page hikey will be saved to hikey_buf.  It helps to avoid redundant
 * buffering at BTree iterators code.
 *
 * Returns true on success, false for rightmost page.
 */</comment>
<function><type><name>bool</name></type>
<name>find_right_page</name><parameter_list>(<parameter><decl><type><name>OBTreeFindPageContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>OFixedKey</name> <modifier>*</modifier></type><name>hikey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><name><name>context</name><operator>-&gt;</operator><name>desc</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BTreePageItemLocator</name></type> <name>loc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OBtreePageFindItem</name> <modifier>*</modifier></type><name>parentItem</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>level</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Jsonb</name>	   <modifier>*</modifier></type><name>params</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CommitSeqNo</name> <modifier>*</modifier></type><name>readCsn</name> <init>= <expr><ternary><condition><expr><call><name>BTREE_PAGE_FIND_IS</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>READ_CSN</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>imgReadCsn</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Nothing to do with rightmost page */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>O_PAGE_IS</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>img</name></name></expr></argument>, <argument><expr><name>RIGHTMOST</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Currenlty, the only user of this function is iterator, which is
	 * read-only.  So, no support for modification, but could we added later.
	 */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>BTREE_PAGE_FIND_IS</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>MODIFY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>STOPEVENTS_ENABLED</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>params</name> <operator>=</operator> <call><name>btree_page_stopevent_params</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>img</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>STOPEVENT</name><argument_list>(<argument><expr><name>STOPEVENT_STEP_RIGHT</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>level</name> <operator>=</operator> <call><name>PAGE_GET_LEVEL</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>img</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* In this case, we shoudn't be in the rootPageBlkno... */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>index</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>parentItem</name> <operator>=</operator> <operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>context</name><operator>-&gt;</operator><name>index</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>item</name> <operator>=</operator> <operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>context</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name></expr>;</expr_stmt>

	<comment type="block">/* Try to get next item from the parent page */</comment>
	<expr_stmt><expr><name>loc</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>context</name><operator>-&gt;</operator><name>index</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>locator</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>BTREE_PAGE_LOCATOR_IS_VALID</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>parentImg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>loc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>BTREE_PAGE_LOCATOR_NEXT</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>parentImg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* copy hikey */</comment>
	<expr_stmt><expr><call><name>copy_fixed_hikey</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>hikey</name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>img</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Try to load next page using next parent downlink */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>BTREE_PAGE_LOCATOR_IS_VALID</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>parentImg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>loc</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OTuple</name></type>		<name>internalTuple</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>BTreeNonLeafTuphdr</name> <modifier>*</modifier></type><name>tuphdr</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>tup_loaded</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>tup_loaded</name> <operator>=</operator> <call><name>partial_load_chunk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>partial</name></name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>parentImg</name></name></expr></argument>, <argument><expr><name><name>loc</name><operator>.</operator><name>chunkOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>BTREE_PAGE_READ_INTERNAL_ITEM</name><argument_list>(<argument><expr><name>tuphdr</name></expr></argument>, <argument><expr><name>internalTuple</name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>parentImg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>tuphdr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Check it's consistent with our hikey */</comment>
		<if_stmt><if>if <condition>(<expr><name>tup_loaded</name> <operator>&amp;&amp;</operator> <call><name>DOWNLINK_IS_IN_MEMORY</name><argument_list>(<argument><expr><name><name>tuphdr</name><operator>-&gt;</operator><name>downlink</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
			<call><name>o_btree_cmp</name><argument_list>(<argument><expr><name>desc</name></expr></argument>,
						<argument><expr><name>hikey</name></expr></argument>, <argument><expr><name>BTreeKeyNonLeafKey</name></expr></argument>,
						<argument><expr><operator>&amp;</operator><name>internalTuple</name></expr></argument>, <argument><expr><name>BTreeKeyNonLeafKey</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Try to traverse downlink */</comment>
			<decl_stmt><decl><type><name>bool</name></type>		<name>success</name></decl>;</decl_stmt>

			<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>blkno</name></name> <operator>=</operator> <call><name>DOWNLINK_GET_IN_MEMORY_BLKNO</name><argument_list>(<argument><expr><name><name>tuphdr</name><operator>-&gt;</operator><name>downlink</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>pageChangeCount</name></name> <operator>=</operator> <call><name>DOWNLINK_GET_IN_MEMORY_CHANGECOUNT</name><argument_list>(<argument><expr><name><name>tuphdr</name><operator>-&gt;</operator><name>downlink</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>o_btree_read_page</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>blkno</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>pageChangeCount</name></name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>img</name></name></expr></argument>,
										<argument><expr><name><name>context</name><operator>-&gt;</operator><name>csn</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>hikey</name><operator>-&gt;</operator><name>tuple</name></name></expr></argument>, <argument><expr><name>BTreeKeyNonLeafKey</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
										<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>readCsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>success</name> <operator>&amp;&amp;</operator>
				<call><name>PAGE_GET_LEVEL</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>img</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>level</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>O_PAGE_GET_CHANGE_COUNT</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>img</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>item</name><operator>-&gt;</operator><name>pageChangeCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>BTREE_PAGE_LOCATOR_FIRST</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>img</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>locator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>parentItem</name><operator>-&gt;</operator><name>locator</name></name> <operator>=</operator> <name>loc</name></expr>;</expr_stmt>
				<return>return <expr><name>true</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Give up with parent downlink.  Find the page from the root in a usual
	 * way.  Should happend rarely.
	 */</comment>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>find_page</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>hikey</name></expr></argument>, <argument><expr><name>BTreeKeyNonLeafKey</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Find the left sibling of the current page.
 *
 * Expected new page hikey (lokey for old page) will be saved to hikey_buf.
 * It helps to avoid redundant buffer at BTree iterators code.
 *
 * Returns true on success, false for leftmost page.
 */</comment>
<function><type><name>bool</name></type>
<name>find_left_page</name><parameter_list>(<parameter><decl><type><name>OBTreeFindPageContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>OFixedKey</name> <modifier>*</modifier></type><name>hikey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BTreeNonLeafTuphdr</name> <modifier>*</modifier></type><name>tuphdr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><name><name>context</name><operator>-&gt;</operator><name>desc</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OBtreePageFindItem</name> <modifier>*</modifier></type><name>parentItem</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>level</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UndoLocation</name></type> <name>prevLoc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Jsonb</name>	   <modifier>*</modifier></type><name>params</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTuple</name></type>		<name>imgHikey</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>BTREE_PAGE_FIND_IS</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>KEEP_LOKEY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Currenlty, the only user of this function is iterator, which is
	 * read-only.  So, no support for modification, but could we added later.
	 */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>BTREE_PAGE_FIND_IS</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>MODIFY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>STOPEVENTS_ENABLED</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>params</name> <operator>=</operator> <call><name>btree_page_stopevent_params</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>img</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>STOPEVENT</name><argument_list>(<argument><expr><name>STOPEVENT_STEP_LEFT</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>level</name> <operator>=</operator> <call><name>PAGE_GET_LEVEL</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>img</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* In this case, we shoudn't be in the rootPageBlkno... */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>level</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>index</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>parentItem</name> <operator>=</operator> <operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>context</name><operator>-&gt;</operator><name>index</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>item</name> <operator>=</operator> <operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>context</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>prevLoc</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>imgUndoLoc</name></name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>true</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Nothing to do with leftmost page */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>O_PAGE_IS</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>img</name></name></expr></argument>, <argument><expr><name>LEFTMOST</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>O_TUPLE_IS_NULL</name><argument_list>(<argument><expr><call><name>btree_find_context_lokey</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>copy_fixed_key</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>hikey</name></expr></argument>, <argument><expr><call><name>btree_find_context_lokey</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * if we have rightlink hikey on the same level (leaf in this case)
		 * just follow it.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>BTREE_PAGE_FIND_IS</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>LOKEY_SIBLING</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
			<operator>!</operator><call><name>BTREE_PAGE_FIND_IS</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>LOKEY_UNDO</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>BTreePageItemLocator</name></type> <name>loc</name> <init>= <expr><name><name>parentItem</name><operator>-&gt;</operator><name>locator</name></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>bool</name></type>		<name>next_lokey_loaded</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

			<comment type="block">/*
			 * Tries to read image from parent downlink without find_page().
			 */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>BTREE_PAGE_LOCATOR_IS_VALID</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>parentImg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>loc</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>BTREE_PAGE_LOCATOR_PREV</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>parentImg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>next_lokey_loaded</name> <operator>=</operator> <call><name>partial_load_chunk</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>partial</name></name></expr></argument>,
													   <argument><expr><name><name>context</name><operator>-&gt;</operator><name>parentImg</name></name></expr></argument>,
													   <argument><expr><name><name>loc</name><operator>.</operator><name>chunkOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>next_lokey_loaded</name> <operator>&amp;&amp;</operator> <call><name>BTREE_PAGE_LOCATOR_IS_VALID</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>parentImg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>loc</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>tuphdr</name> <operator>=</operator> <operator>(</operator><name>BTreeNonLeafTuphdr</name> <operator>*</operator><operator>)</operator> <call><name>BTREE_PAGE_LOCATOR_GET_ITEM</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>parentImg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/*
				 * else next lokey saved in context.lokey
				 */</comment>
				<if_stmt><if>if <condition>(<expr><call><name>DOWNLINK_IS_IN_MEMORY</name><argument_list>(<argument><expr><name><name>tuphdr</name><operator>-&gt;</operator><name>downlink</name></name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<decl_stmt><decl><type><name>bool</name></type>		<name>success</name></decl>;</decl_stmt>

					<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>blkno</name></name> <operator>=</operator> <call><name>DOWNLINK_GET_IN_MEMORY_BLKNO</name><argument_list>(<argument><expr><name><name>tuphdr</name><operator>-&gt;</operator><name>downlink</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>pageChangeCount</name></name> <operator>=</operator> <call><name>DOWNLINK_GET_IN_MEMORY_CHANGECOUNT</name><argument_list>(<argument><expr><name><name>tuphdr</name><operator>-&gt;</operator><name>downlink</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>btree_find_read_page</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>blkno</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>pageChangeCount</name></name></expr></argument>,
												   <argument><expr><name><name>context</name><operator>-&gt;</operator><name>img</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
												   <argument><expr><name>BTreeKeyRightmost</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<if_stmt><if>if <condition>(<expr><name>success</name> <operator>&amp;&amp;</operator>
						<name><name>context</name><operator>-&gt;</operator><name>imgUndoLoc</name></name> <operator>!=</operator> <name>InvalidUndoLocation</name> <operator>&amp;&amp;</operator>
						<name>prevLoc</name> <operator>==</operator> <name><name>context</name><operator>-&gt;</operator><name>imgUndoLoc</name></name></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><name><name>parentItem</name><operator>-&gt;</operator><name>locator</name></name> <operator>=</operator> <name>loc</name></expr>;</expr_stmt>
						<continue>continue;</continue>
					</block_content>}</block></if></if_stmt>


					<if_stmt><if>if <condition>(<expr><name>success</name> <operator>&amp;&amp;</operator>
						<call><name>PAGE_GET_LEVEL</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>img</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>level</name> <operator>&amp;&amp;</operator>
						<operator>!</operator><call><name>O_PAGE_IS</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>img</name></name></expr></argument>, <argument><expr><name>RIGHTMOST</name></expr></argument>)</argument_list></call></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><call><name>BTREE_PAGE_GET_HIKEY</name><argument_list>(<argument><expr><name>imgHikey</name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>img</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<if_stmt><if>if <condition>(<expr><call><name>o_btree_cmp</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>hikey</name><operator>-&gt;</operator><name>tuple</name></name></expr></argument>, <argument><expr><name>BTreeKeyNonLeafKey</name></expr></argument>,
										<argument><expr><operator>&amp;</operator><name>imgHikey</name></expr></argument>, <argument><expr><name>BTreeKeyNonLeafKey</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
						<block>{<block_content>
							<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>O_PAGE_GET_CHANGE_COUNT</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>img</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>item</name><operator>-&gt;</operator><name>pageChangeCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name><name>parentItem</name><operator>-&gt;</operator><name>locator</name></name> <operator>=</operator> <name>loc</name></expr>;</expr_stmt>
							<expr_stmt><expr><call><name>BTREE_PAGE_LOCATOR_LAST</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>img</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>locator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<return>return <expr><name>true</name></expr>;</return>
						</block_content>}</block></if></if_stmt>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>find_page</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>hikey</name><operator>-&gt;</operator><name>tuple</name></name></expr></argument>, <argument><expr><name>BTreeKeyPageHiKey</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* context levels may be changed */</comment>
		<expr_stmt><expr><name>parentItem</name> <operator>=</operator> <operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>context</name><operator>-&gt;</operator><name>index</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>item</name> <operator>=</operator> <operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>context</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>prevLoc</name> <operator>!=</operator> <name>InvalidUndoLocation</name> <operator>&amp;&amp;</operator> <name>prevLoc</name> <operator>==</operator> <name><name>context</name><operator>-&gt;</operator><name>imgUndoLoc</name></name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>COMMITSEQNO_IS_INPROGRESS</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>csn</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
			<operator>!</operator><call><name>O_PAGE_IS</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>img</name></name></expr></argument>, <argument><expr><name>RIGHTMOST</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>BTREE_PAGE_GET_HIKEY</name><argument_list>(<argument><expr><name>imgHikey</name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>img</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>COMMITSEQNO_IS_INPROGRESS</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>csn</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
			<operator>(</operator><call><name>O_PAGE_IS</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>img</name></name></expr></argument>, <argument><expr><name>RIGHTMOST</name></expr></argument>)</argument_list></call>
			 <operator>||</operator> <call><name>o_btree_cmp</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>imgHikey</name></expr></argument>, <argument><expr><name>BTreeKeyNonLeafKey</name></expr></argument>, <argument><expr><name>hikey</name></expr></argument>, <argument><expr><name>BTreeKeyNonLeafKey</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * The BTree may be changed in progress, but find_page() function
			 * setup leaf offset always as BTREE_PAGE_ITEMS_COUNT(page) - 1
			 * for the BTreeHiKey search case.
			 *
			 * We must refind the leaf offset in this case.
			 */</comment>
			<expr_stmt><expr><call><name>btree_page_search</name><argument_list>(<argument><expr><name>desc</name></expr></argument>,
							  <argument><expr><name><name>context</name><operator>-&gt;</operator><name>img</name></name></expr></argument>,
							  <argument><expr><operator>(</operator><name>Pointer</name><operator>)</operator> <operator>&amp;</operator><name><name>hikey</name><operator>-&gt;</operator><name>tuple</name></name></expr></argument>, <argument><expr><name>BTreeKeyNonLeafKey</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
							  <argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>locator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>BTREE_PAGE_LOCATOR_PREV</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>img</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>locator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></while>

	<comment type="block">/* unreachable */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Return lokey of the context-&gt;img.
 *
 * It assumes that context-&gt;img have a lokey. All checks must be done by a caller code
 * (BTREE_PAGE_FIND_KEEP_LOKEY flag exist, !PAGE_IS_LEFTMOST(context-&gt;img)).
 */</comment>
<function><type><name>OTuple</name></type>
<name>btree_find_context_lokey</name><parameter_list>(<parameter><decl><type><name>OBTreeFindPageContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BTreePageItemLocator</name></type> <name>ploc</name> <init>= <expr><name><name>context</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>context</name><operator>-&gt;</operator><name>index</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>locator</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>BTREE_PAGE_FIND_IS</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>KEEP_LOKEY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>BTREE_PAGE_FIND_IS</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>LOKEY_UNDO</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Hikey of a left sibling from undo log.
		 */</comment>
		<return>return <expr><name><name>context</name><operator>-&gt;</operator><name>undoLokey</name><operator>.</operator><name>tuple</name></name></expr>;</return>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>BTREE_PAGE_FIND_IS</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>LOKEY_SIBLING</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Hikey of the left sibling (had a rightlink to the current page).
		 */</comment>
		<return>return <expr><name><name>context</name><operator>-&gt;</operator><name>lokey</name><operator>.</operator><name>tuple</name></name></expr>;</return>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>BTREE_PAGE_LOCATOR_GET_OFFSET</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>parentImg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ploc</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Fetches lokey for the left sibling from the parent image.
		 */</comment>
		<decl_stmt><decl><type><name>OTuple</name></type>		<name>result</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>BTREE_PAGE_READ_INTERNAL_TUPLE</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>parentImg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ploc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>result</name></expr>;</return>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/*
		 * Hikey of the left sibling of the parent.
		 */</comment>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>BTREE_PAGE_FIND_LOKEY_EXISTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name><name>context</name><operator>-&gt;</operator><name>lokey</name><operator>.</operator><name>tuple</name></name></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Navigates and reads page image from undo log according to find context.
 * Saves lokey of the founded page to context-&gt;lokey if needed.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>btree_find_read_page</name><parameter_list>(<parameter><decl><type><name>OBTreeFindPageContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>OInMemoryBlkno</name></type> <name>blkno</name></decl></parameter>,
					 <parameter><decl><type><name>uint32</name></type> <name>pageChangeCount</name></decl></parameter>, <parameter><decl><type><name>Page</name></type> <name>img</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
					 <parameter><decl><type><name>BTreeKeyType</name></type> <name>keyType</name></decl></parameter>, <parameter><decl><type><name>PartialPageState</name> <modifier>*</modifier></type><name>partial</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>keep_lokey</name> <init>= <expr><call><name>BTREE_PAGE_FIND_IS</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>KEEP_LOKEY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OFixedKey</name>  <modifier>*</modifier></type><name>lokey</name> <init>= <expr><ternary><condition><expr><name>keep_lokey</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>undoLokey</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CommitSeqNo</name> <modifier>*</modifier></type><name>readCsn</name> <init>= <expr><ternary><condition><expr><call><name>BTREE_PAGE_FIND_IS</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>READ_CSN</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>imgReadCsn</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>success</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>BTREE_PAGE_FIND_UNSET</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>LOKEY_UNDO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>lokey</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>clear_fixed_key</name><argument_list>(<argument><expr><name>lokey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>o_btree_read_page</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>, <argument><expr><name>blkno</name></expr></argument>, <argument><expr><name>pageChangeCount</name></expr></argument>, <argument><expr><name>img</name></expr></argument>,
								<argument><expr><name><name>context</name><operator>-&gt;</operator><name>csn</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyType</name></expr></argument>, <argument><expr><name>lokey</name></expr></argument>,
								<argument><expr><name>partial</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>imgUndoLoc</name></name></expr></argument>, <argument><expr><name>readCsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>lokey</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>O_TUPLE_IS_NULL</name><argument_list>(<argument><expr><name><name>lokey</name><operator>-&gt;</operator><name>tuple</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>BTREE_PAGE_FIND_SET</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>LOKEY_UNDO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>btree_find_context_from_modify_to_read</name><parameter_list>(<parameter><decl><type><name>OBTreeFindPageContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
									   <parameter><decl><type><name>Pointer</name></type> <name>key</name></decl></parameter>,
									   <parameter><decl><type><name>BTreeKeyType</name></type> <name>keyType</name></decl></parameter>,
									   <parameter><decl><type><name>uint16</name></type> <name>level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BTreePageItemLocator</name></type> <name>loc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>success</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>BTREE_PAGE_FIND_IS</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>DOWNLINK_LOCATION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>BTREE_PAGE_FIND_IS</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>MODIFY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>BTREE_PAGE_FIND_IS</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>IMAGE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>BTREE_PAGE_FIND_UNSET</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>MODIFY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>btree_find_read_page</name><argument_list>(<argument><expr><name>context</name></expr></argument>,
								   <argument><expr><name><name>context</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>context</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name><operator>.</operator><name>blkno</name></expr></argument>,
								   <argument><expr><name><name>context</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>context</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name><operator>.</operator><name>pageChangeCount</name></expr></argument>,
								   <argument><expr><name><name>context</name><operator>-&gt;</operator><name>img</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>,
								   <argument><expr><name>keyType</name></expr></argument>,
								   <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>find_page</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyType</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>keyType</name> <operator>==</operator> <name>BTreeKeyRightmost</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* We're looking for the rightmost page, so go the rightmost downlink */</comment>
		<expr_stmt><expr><call><name>BTREE_PAGE_LOCATOR_LAST</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>img</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>keyType</name> <operator>==</operator> <name>BTreeKeyNone</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* We're looking for the leftmost page, so go the leftmost downlink */</comment>
		<expr_stmt><expr><call><name>BTREE_PAGE_LOCATOR_FIRST</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>img</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* Locate the correct downlink within the non-leaf page */</comment>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>btree_page_search</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>img</name></name></expr></argument>,
								 <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyType</name></expr></argument>,
								 <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>page_locator_find_real_item</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>img</name></name></expr></argument>,
										   <argument><expr><name>NULL</name></expr></argument>,
										   <argument><expr><operator>&amp;</operator><name>loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>context</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name><operator>.</operator><name>locator</name> <operator>=</operator> <name>loc</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Search for a key within the page.  First, it does binary search of
 * appropriate chunk, then binary search within the chunk.
 *
 * This function is aware of partial page read.  Returns true if it managed
 * to read the required chunk and false otherwise.  When no partial page
 * state is give, always returns true.
 */</comment>
<function><type><name>bool</name></type>
<name>btree_page_search</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>Page</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>Pointer</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>BTreeKeyType</name></type> <name>keyType</name></decl></parameter>,
				  <parameter><decl><type><name>PartialPageState</name> <modifier>*</modifier></type><name>partial</name></decl></parameter>, <parameter><decl><type><name>BTreePageItemLocator</name> <modifier>*</modifier></type><name>locator</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OffsetNumber</name></type> <name>mid</name></decl>,
				<decl><type ref="prev"/><name>low</name></decl>,
				<decl><type ref="prev"/><name>high</name></decl>,
				<decl><type ref="prev"/><name>chunkOffset</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>isLeaf</name> <init>= <expr><call><name>O_PAGE_IS</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>LEAF</name></expr></argument>)</argument_list></call></expr></init></decl>,
				<decl><type ref="prev"/><name>nextkey</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OBTreeKeyCmp</name></type> <name>cmpFunc</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>cmp</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BTreeKeyType</name></type> <name>midkind</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>targetCmpVal</name></decl>,
				<decl><type ref="prev"/><name>result</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>keyType</name> <operator>==</operator> <name>BTreeKeyPageHiKey</name> <operator>&amp;&amp;</operator> <name>isLeaf</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>BTREE_PAGE_LOCATOR_LAST</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>locator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>partial</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>partial_load_chunk</name><argument_list>(<argument><expr><name>partial</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>locator</name><operator>-&gt;</operator><name>chunkOffset</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>chunkOffset</name> <operator>=</operator> <call><name>btree_page_binary_search_chunks</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>partial</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>partial_load_chunk</name><argument_list>(<argument><expr><name>partial</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>chunkOffset</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>page_chunk_fill_locator</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>chunkOffset</name></expr></argument>, <argument><expr><name>locator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>midkind</name> <operator>=</operator> <ternary><condition><expr><name>isLeaf</name></expr> ?</condition><then> <expr><name>BTreeKeyLeafTuple</name></expr> </then><else>: <expr><name>BTreeKeyNonLeafKey</name></expr></else></ternary></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>locator</name><operator>-&gt;</operator><name>chunkItemsCount</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>locator</name><operator>-&gt;</operator><name>itemOffset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>low</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>high</name> <operator>=</operator> <name><name>locator</name><operator>-&gt;</operator><name>chunkItemsCount</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>nextkey</name> <operator>=</operator> <operator>(</operator><operator>!</operator><name>isLeaf</name> <operator>&amp;&amp;</operator> <name>keyType</name> <operator>!=</operator> <name>BTreeKeyPageHiKey</name><operator>)</operator></expr>;</expr_stmt>

	<comment type="block">/* Shouldn't look for hikey on leafs, because we're already here */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>isLeaf</name> <operator>&amp;&amp;</operator> <name>keyType</name> <operator>==</operator> <name>BTreeKeyPageHiKey</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Binary search to find the first key on the page &gt;= `key`, or first page
	 * key &gt; `key` when nextkey is true.
	 *
	 * For nextkey=false (cmp=1), the loop invariant is: all slots before
	 * `low` are &lt; `key`, all slots at or after `high` are &gt;= `key`.
	 *
	 * For nextkey=true (cmp=0), the loop invariant is: all slots before `low`
	 * are &lt;= `key`, all slots at or after `high` are &gt; `key`.
	 *
	 * We can fall out when `high` == `low`.
	 */</comment>
	<expr_stmt><expr><name>high</name><operator>++</operator></expr>;</expr_stmt>						<comment type="block">/* establish the loop invariant for high */</comment>

	<expr_stmt><expr><name>targetCmpVal</name> <operator>=</operator> <ternary><condition><expr><name>nextkey</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt> <comment type="block">/* a target value of cmpFunc() */</comment>

	<comment type="block">/*
	 * Don't pass BTreeHiKey to comparison function, we've set nextkey flag
	 * instead.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>keyType</name> <operator>==</operator> <name>BTreeKeyPageHiKey</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>keyType</name> <operator>=</operator> <name>BTreeKeyNonLeafKey</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><name>high</name> <operator>&gt;</operator> <name>low</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>mid</name> <operator>=</operator> <name>low</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>high</name> <operator>-</operator> <name>low</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isLeaf</name> <operator>&amp;&amp;</operator> <name>mid</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>locator</name><operator>-&gt;</operator><name>chunkOffset</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>OTuple</name></type>		<name>midTup</name></decl>;</decl_stmt>

			<expr_stmt><expr><name><name>locator</name><operator>-&gt;</operator><name>itemOffset</name></name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>BTREE_PAGE_READ_TUPLE</name><argument_list>(<argument><expr><name>midTup</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>locator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>cmpFunc</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>midTup</name></expr></argument>, <argument><expr><name>midkind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&gt;=</operator> <name>targetCmpVal</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>low</name> <operator>=</operator> <name>mid</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>high</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><name><name>locator</name><operator>-&gt;</operator><name>itemOffset</name></name> <operator>=</operator> <name>low</name></expr>;</expr_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Search for the chunk containing key.
 */</comment>
<function><type><specifier>static</specifier> <name>OffsetNumber</name></type>
<name>btree_page_binary_search_chunks</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>Page</name></type> <name>p</name></decl></parameter>,
								<parameter><decl><type><name>Pointer</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>BTreeKeyType</name></type> <name>keyType</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OffsetNumber</name></type> <name>mid</name></decl>,
				<decl><type ref="prev"/><name>low</name></decl>,
				<decl><type ref="prev"/><name>high</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>targetCmpVal</name></decl>,
				<decl><type ref="prev"/><name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>nextkey</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BTreePageHeader</name> <modifier>*</modifier></type><name>header</name> <init>= <expr><operator>(</operator><name>BTreePageHeader</name> <operator>*</operator><operator>)</operator> <name>p</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OBTreeKeyCmp</name></type> <name>cmpFunc</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>cmp</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>chunksCount</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>low</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>high</name> <operator>=</operator> <name><name>header</name><operator>-&gt;</operator><name>chunksCount</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>nextkey</name> <operator>=</operator> <operator>(</operator><name>keyType</name> <operator>!=</operator> <name>BTreeKeyPageHiKey</name><operator>)</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>high</name> <operator>&lt;</operator> <name>low</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>low</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>targetCmpVal</name> <operator>=</operator> <ternary><condition><expr><name>nextkey</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt> <comment type="block">/* a target value of cmpFunc() */</comment>

	<comment type="block">/*
	 * Don't pass BTreeHiKey to comparison function, we've set nextkey flag
	 * instead.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>keyType</name> <operator>==</operator> <name>BTreeKeyPageHiKey</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>keyType</name> <operator>=</operator> <name>BTreeKeyNonLeafKey</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><name>high</name> <operator>&gt;</operator> <name>low</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OTuple</name></type>		<name>midTup</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>mid</name> <operator>=</operator> <name>low</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>high</name> <operator>-</operator> <name>low</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>mid</name> <operator>&lt;</operator> <name><name>header</name><operator>-&gt;</operator><name>chunksCount</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* We have low &lt;= mid &lt; high, so mid points at a real slot */</comment>

		<expr_stmt><expr><name><name>midTup</name><operator>.</operator><name>formatFlags</name></name> <operator>=</operator> <name><name>header</name><operator>-&gt;</operator><name>chunkDesc</name><index>[<expr><name>mid</name></expr>]</index></name><operator>.</operator><name>hikeyFlags</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>midTup</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>p</name> <operator>+</operator> <call><name>SHORT_GET_LOCATION</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>chunkDesc</name><index>[<expr><name>mid</name></expr>]</index></name><operator>.</operator><name>hikeyShortLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>cmpFunc</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>midTup</name></expr></argument>, <argument><expr><name>BTreeKeyNonLeafKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&gt;=</operator> <name>targetCmpVal</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>low</name> <operator>=</operator> <name>mid</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>high</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>low</name></expr>;</return>
</block_content>}</block></function>
</unit>
