<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/orioledb/src/tableam/key_range.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * key_range.c
 *		Function dealing with key ranges for planning and execution stage
 *		in OrioleDB.
 *
 * Copyright (c) 2021-2022, Oriole DB Inc.
 *
 * IDENTIFICATION
 *	  contrib/orioledb/src/tableam/key_range.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"orioledb.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"btree/btree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tableam/key_range.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tableam/tree.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/stratnum.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_proc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/optimizer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/parse_coerce.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/array.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/arrayaccess.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>o_key_range_is_unbounded</name><parameter_list>(<parameter><decl><type><name>OBTreeKeyRange</name> <modifier>*</modifier></type><name>range</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attnum</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>o_fill_key_bounds</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>type</name></decl></parameter>,
							  <parameter><decl><type><name>OBTreeValueBound</name> <modifier>*</modifier></type><name>low</name></decl></parameter>, <parameter><decl><type><name>OBTreeValueBound</name> <modifier>*</modifier></type><name>high</name></decl></parameter>,
							  <parameter><decl><type><name>OIndexField</name> <modifier>*</modifier></type><name>field</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>bool</name></type>
<name>o_key_data_to_key_range</name><parameter_list>(<parameter><decl><type><name>OBTreeKeyRange</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>ScanKeyData</name> <modifier>*</modifier></type><name>keyData</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numberOfKeys</name></decl></parameter>,
						<parameter><decl><type><name>BTArrayKeyInfo</name> <modifier>*</modifier></type><name>arrayKeys</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>resultNKeys</name></decl></parameter>,
						<parameter><decl><type><name>OIndexField</name> <modifier>*</modifier></type><name>fields</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>exact</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>empty</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>low</name><operator>.</operator><name>nkeys</name></name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>high</name><operator>.</operator><name>nkeys</name></name> <operator>=</operator> <name>resultNKeys</name></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>resultNKeys</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>low</name><operator>.</operator><name>keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <name>O_VALUE_BOUND_MINUS_INFINITY</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>high</name><operator>.</operator><name>keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <name>O_VALUE_BOUND_PLUS_INFINITY</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numberOfKeys</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>bool</name></type>		<name>setLow</name> <init>= <expr><name>false</name></expr></init></decl>,
					<decl><type ref="prev"/><name>setHigh</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ScanKeyData</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><operator>&amp;</operator><name><name>keyData</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>AttrNumber</name></type>	<name>attnum</name> <init>= <expr><name><name>key</name><operator>-&gt;</operator><name>sk_attno</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>OBTreeValueBound</name></type> <name>low</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>O_VALUE_BOUND_MINUS_INFINITY</name></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>OBTreeValueBound</name></type> <name>high</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>O_VALUE_BOUND_PLUS_INFINITY</name></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>OIndexField</name> <modifier>*</modifier></type><name>field</name> <init>= <expr><operator>&amp;</operator><name><name>fields</name><index>[<expr><name>attnum</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<switch>switch <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>sk_strategy</name></name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>BTLessStrategyNumber</name></expr>:</case>
			<case>case <expr><name>BTLessEqualStrategyNumber</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>sk_flags</name></name> <operator>&amp;</operator> <name>SK_SEARCHNOTNULL</name></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>field</name><operator>-&gt;</operator><name>nullfirst</name></name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name><name>high</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>O_VALUE_BOUND_UPPER</name> <operator>|</operator> <name>O_VALUE_BOUND_NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<expr_stmt><expr><name>setHigh</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>high</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>O_VALUE_BOUND_UPPER</name></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>sk_strategy</name></name> <operator>==</operator> <name>BTLessEqualStrategyNumber</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name><name>high</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>O_VALUE_BOUND_INCLUSIVE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
				</block_content>}</block></else></if_stmt>
				<break>break;</break>
			<case>case <expr><name>BTEqualStrategyNumber</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>sk_flags</name></name> <operator>&amp;</operator> <name>SK_SEARCHNULL</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name><name>low</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>O_VALUE_BOUND_LOWER</name> <operator>|</operator> <name>O_VALUE_BOUND_INCLUSIVE</name> <operator>|</operator> <name>O_VALUE_BOUND_NULL</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>high</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>O_VALUE_BOUND_UPPER</name> <operator>|</operator> <name>O_VALUE_BOUND_INCLUSIVE</name> <operator>|</operator> <name>O_VALUE_BOUND_NULL</name></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<expr_stmt><expr><name><name>low</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>O_VALUE_BOUND_LOWER</name> <operator>|</operator> <name>O_VALUE_BOUND_INCLUSIVE</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>high</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>O_VALUE_BOUND_UPPER</name> <operator>|</operator> <name>O_VALUE_BOUND_INCLUSIVE</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>setLow</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>setHigh</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
				<break>break;</break>
			<case>case <expr><name>BTGreaterStrategyNumber</name></expr>:</case>
			<case>case <expr><name>BTGreaterEqualStrategyNumber</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>sk_flags</name></name> <operator>&amp;</operator> <name>SK_SEARCHNOTNULL</name></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name><name>field</name><operator>-&gt;</operator><name>nullfirst</name></name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name><name>low</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>O_VALUE_BOUND_LOWER</name> <operator>|</operator> <name>O_VALUE_BOUND_NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<expr_stmt><expr><name>setLow</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>low</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>O_VALUE_BOUND_LOWER</name></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>sk_strategy</name></name> <operator>==</operator> <name>BTGreaterEqualStrategyNumber</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name><name>low</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>O_VALUE_BOUND_INCLUSIVE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
				</block_content>}</block></else></if_stmt>
				<break>break;</break>

			<default>default:</default>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
		</block_content>}</block></switch>

		<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>key</name><operator>-&gt;</operator><name>sk_flags</name></name> <operator>&amp;</operator> <name>SK_SEARCHARRAY</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>arrayKeys</name> <operator>&amp;&amp;</operator>
			<name><name>arrayKeys</name><operator>-&gt;</operator><name>num_elems</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>o_key_range_is_unbounded</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>attnum</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>o_fill_key_bounds</name><argument_list>(<argument><expr><name><name>arrayKeys</name><operator>-&gt;</operator><name>elem_values</name><index>[<expr><name><name>arrayKeys</name><operator>-&gt;</operator><name>cur_elem</name></name></expr>]</index></name></expr></argument>,
								  <argument><expr><name><name>key</name><operator>-&gt;</operator><name>sk_subtype</name></name></expr></argument>,
								  <argument><expr><ternary><condition><expr><name>setLow</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>low</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>,
								  <argument><expr><ternary><condition><expr><name>setHigh</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>high</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>,
								  <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>setLow</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>low</name><operator>.</operator><name>keys</name><index>[<expr><name>attnum</name></expr>]</index></name> <operator>=</operator> <name>low</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><name>setHigh</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>high</name><operator>.</operator><name>keys</name><index>[<expr><name>attnum</name></expr>]</index></name> <operator>=</operator> <name>high</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>arrayKeys</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>o_fill_key_bounds</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>sk_argument</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>sk_subtype</name></name></expr></argument>,
							  <argument><expr><ternary><condition><expr><name>setLow</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>low</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>,
							  <argument><expr><ternary><condition><expr><name>setHigh</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>high</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>,
							  <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>o_idx_cmp_value_bounds</name><argument_list>(<argument><expr><operator>&amp;</operator><name>low</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>res</name><operator>-&gt;</operator><name>low</name><operator>.</operator><name>keys</name><index>[<expr><name>attnum</name></expr>]</index></name></expr></argument>,
									   <argument><expr><name>field</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>low</name><operator>.</operator><name>keys</name><index>[<expr><name>attnum</name></expr>]</index></name> <operator>=</operator> <name>low</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>o_idx_cmp_value_bounds</name><argument_list>(<argument><expr><operator>&amp;</operator><name>high</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>res</name><operator>-&gt;</operator><name>high</name><operator>.</operator><name>keys</name><index>[<expr><name>attnum</name></expr>]</index></name></expr></argument>,
									   <argument><expr><name>field</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>high</name><operator>.</operator><name>keys</name><index>[<expr><name>attnum</name></expr>]</index></name> <operator>=</operator> <name>high</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>resultNKeys</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>bool</name></type>		<name>equals</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>o_idx_cmp_value_bounds</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>res</name><operator>-&gt;</operator><name>low</name><operator>.</operator><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
								   <argument><expr><operator>&amp;</operator><name><name>res</name><operator>-&gt;</operator><name>high</name><operator>.</operator><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
								   <argument><expr><operator>&amp;</operator><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
								   <argument><expr><operator>&amp;</operator><name>equals</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>empty</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>equals</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>exact</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>exact</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>o_fill_key_bounds</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>type</name></decl></parameter>,
				  <parameter><decl><type><name>OBTreeValueBound</name> <modifier>*</modifier></type><name>low</name></decl></parameter>, <parameter><decl><type><name>OBTreeValueBound</name> <modifier>*</modifier></type><name>high</name></decl></parameter>,
				  <parameter><decl><type><name>OIndexField</name> <modifier>*</modifier></type><name>field</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>coercible</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OComparator</name> <modifier>*</modifier></type><name>comparator</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>low</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>high</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name><name>field</name><operator>-&gt;</operator><name>opclass</name></name> <operator>||</operator> <name>type</name> <operator>==</operator> <name><name>field</name><operator>-&gt;</operator><name>inputtype</name></name> <operator>||</operator>
		<call><name>IsBinaryCoercible</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>field</name><operator>-&gt;</operator><name>inputtype</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>coercible</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>comparator</name> <operator>=</operator> <call><name>o_find_comparator</name><argument_list>(<argument><expr><name><name>field</name><operator>-&gt;</operator><name>opfamily</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>,
									   <argument><expr><name><name>field</name><operator>-&gt;</operator><name>inputtype</name></name></expr></argument>,
									   <argument><expr><name><name>field</name><operator>-&gt;</operator><name>collation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>low</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>low</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>low</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>low</name><operator>-&gt;</operator><name>comparator</name></name> <operator>=</operator> <name>comparator</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>coercible</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>low</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>O_VALUE_BOUND_COERCIBLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>high</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>high</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>high</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>high</name><operator>-&gt;</operator><name>comparator</name></name> <operator>=</operator> <name>comparator</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>coercible</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>high</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>O_VALUE_BOUND_COERCIBLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>o_key_range_is_unbounded</name><parameter_list>(<parameter><decl><type><name>OBTreeKeyRange</name> <modifier>*</modifier></type><name>range</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>range</name><operator>-&gt;</operator><name>low</name><operator>.</operator><name>keys</name><index>[<expr><name>attnum</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>==</operator> <name>O_VALUE_BOUND_MINUS_INFINITY</name> <operator>&amp;&amp;</operator>
		<name><name>range</name><operator>-&gt;</operator><name>high</name><operator>.</operator><name>keys</name><index>[<expr><name>attnum</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>==</operator> <name>O_VALUE_BOUND_PLUS_INFINITY</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>
</unit>
