<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/orioledb/src/tableam/descr.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * descr.c
 *		Routines for handling descriptors of orioledb trees.
 *
 * Copyright (c) 2021-2022, Oriole DB Inc.
 *
 * IDENTIFICATION
 *	  contrib/orioledb/src/tableam/descr.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"orioledb.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"btree/io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"btree/iterator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"btree/modify.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"checkpoint/checkpoint.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/free_extents.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/o_indices.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/o_sys_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/o_tables.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/sys_trees.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"recovery/recovery.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tableam/toast.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tableam/tree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tuple/slot.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transam/undo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/page_pool.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/stopevent.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/nbtree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_opfamily.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/hashfn.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"funcapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/parse_coerce.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/fmgrtab.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/syscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgstat.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>OIndexDescr</name> <modifier>*</modifier></type><name>get_index_descr</name><parameter_list>(<parameter><decl><type><name>ORelOids</name></type> <name>ixOids</name></decl></parameter>, <parameter><decl><type><name>OIndexType</name></type> <name>ixType</name></decl></parameter>,
									<parameter><decl><type><name>bool</name></type> <name>miss_ok</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>o_table_descr_fill_indices</name><parameter_list>(<parameter><decl><type><name>OTableDescr</name> <modifier>*</modifier></type><name>descr</name></decl></parameter>, <parameter><decl><type><name>OTable</name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>init_shared_root_info</name><parameter_list>(<parameter><decl><type><name>OPagePool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>,
								  <parameter><decl><type><name>SharedRootInfo</name> <modifier>*</modifier></type><name>sharedRootInfo</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cleanup_shared_root_info_pages</name><parameter_list>(<parameter><decl><type><name>OPagePool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>,
										   <parameter><decl><type><name>SharedRootInfo</name> <modifier>*</modifier></type><name>sharedRootInfo</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>o_tree_init_free_extents</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>OComparator</name> <modifier>*</modifier></type><name>o_find_opclass_comparator</name><parameter_list>(<parameter><decl><type><name>OOpclass</name> <modifier>*</modifier></type><name>opclass</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>collation</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>OComparator</name> <modifier>*</modifier></type><name>o_find_cached_comparator</name><parameter_list>(<parameter><decl><type><name>OComparatorKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>OComparator</name> <modifier>*</modifier></type><name>o_add_comparator_to_cache</name><parameter_list>(<parameter><decl><type><name>OComparator</name> <modifier>*</modifier></type><name>comparator</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>recreate_table_descr</name><parameter_list>(<parameter><decl><type><name>OTableDescr</name> <modifier>*</modifier></type><name>descr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>recreate_index_descr</name><parameter_list>(<parameter><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>descr</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>orioledb_get_table_descrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>orioledb_get_index_descrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<struct>struct <name>OComparatorKey</name>
<block>{
	<decl_stmt><decl><type><name>Oid</name></type>			<name>opfamily</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>lefttype</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>righttype</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>collation</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>OComparator</name>
<block>{
	<decl_stmt><decl><type><name>OComparatorKey</name></type> <name>key</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>haveSortSupport</name></decl>;</decl_stmt>

	<comment type="block">/* Filled when haveSortSupport == false */</comment>
	<decl_stmt><decl><type><name>FmgrInfo</name></type>	<name>finfo</name></decl>;</decl_stmt>

	<comment type="block">/* Filled when haveSortSupport == true */</comment>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>ssup_cxt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name>	   <modifier>*</modifier></type><name>ssup_extra</name></decl>;</decl_stmt>
	<function_decl><type><name>int</name></type>			(<modifier>*</modifier><name>ssup_comparator</name>) <parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>SortSupport</name></type> <name>ssup</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>HTAB</name> <modifier>*</modifier></type><name>oTableDescrHash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>HTAB</name> <modifier>*</modifier></type><name>oIndexDescrHash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>HTAB</name> <modifier>*</modifier></type><name>comparatorCache</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>OComparatorKey</name></type> <name>lastkey</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>OComparator</name> <modifier>*</modifier></type><name>lastcmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>MemoryContext</name></type> <name>descrCxt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>o_find_toastable_attrs</name><parameter_list>(<parameter><decl><type><name>OTableDescr</name> <modifier>*</modifier></type><name>tableDescr</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/*
 * Creates shared root info.  But insertion into shared cache is performed by
 * table_descr_init_tree function.
 */</comment>
<function><type><specifier>static</specifier> <name>SharedRootInfo</name> <modifier>*</modifier></type>
<name>create_shared_root_info</name><parameter_list>(<parameter><decl><type><name>OPagePool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>SharedRootInfoKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SharedRootInfo</name> <modifier>*</modifier></type><name>sharedRootInfo</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>sharedRootInfo</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SharedRootInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sharedRootInfo</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <operator>*</operator><name>key</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>init_shared_root_info</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>sharedRootInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>sharedRootInfo</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>EvictedTreeData</name> <modifier>*</modifier></type>
<name>read_evicted_data</name><parameter_list>(<parameter><decl><type><name>ORelOids</name></type> <name>oids</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>chkp_num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>filename</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>File</name></type>		<name>eviction_file</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EvictedTreeData</name> <modifier>*</modifier></type><name>evicted_tree_data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>filename</name> <operator>=</operator> <call><name>get_eviction_filename</name><argument_list>(<argument><expr><name>oids</name></expr></argument>, <argument><expr><name>chkp_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>eviction_file</name> <operator>=</operator> <call><name>PathNameOpenFile</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>O_RDONLY</name> <operator>|</operator> <name>PG_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>eviction_file</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>evicted_tree_data</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>EvictedTreeData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>OFileRead</name><argument_list>(<argument><expr><name>eviction_file</name></expr></argument>, <argument><expr><operator>(</operator><name>Pointer</name><operator>)</operator> <name>evicted_tree_data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>EvictedTreeData</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>WAIT_EVENT_DATA_FILE_READ</name></expr></argument>)</argument_list></call> <operator>!=</operator>
			<sizeof>sizeof<argument_list>(<argument><expr><name>EvictedTreeData</name></expr></argument>)</argument_list></sizeof></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>evicted_tree_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
							<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not read evicted tree data from file %s"</literal></expr></argument>,
								   <argument><expr><name>filename</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>FileClose</name><argument_list>(<argument><expr><name>eviction_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>evicted_tree_data</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * OTableDescr* BTrees are created without shared memory initialization.
 * Sequence buffers files, data rootInfo file are not initialized too. There are
 * reasons for it:
 *
 * 1. Long queries may do not use all indices.
 * 2. In some cases no sense to initialize BTree memory if it not exists.
 *
 * We can load shared memory in-place, in low-level BTree code
 * but it more complicated approach. It will be harder to understand and debug.
 *
 * To avoid concurrency problems with eviction/cleanup table this call must be
 * under AccessShareLock (See o_tables.h/o_tables_rel_lock()).
 */</comment>
<function><type><name>void</name></type>
<name>o_btree_load_shmem</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SharedRootInfoKey</name></type> <name>key</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SharedRootInfo</name> <modifier>*</modifier></type><name>sharedRootInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>was_evicted</name></decl>,
				<decl><type ref="prev"/><name>is_compressed</name></decl>,
				<decl><type ref="prev"/><name>init_extents</name></decl>,
				<decl><type ref="prev"/><name>inserted</name> <name>PG_USED_FOR_ASSERTS_ONLY</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>lockNo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>hasLock</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>desc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ORelOidsIsValid</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>oids</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>IS_SYS_TREE_OIDS</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>oids</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block">/* easy case: shared memory is initialized */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>ORootPageIsValid</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>OMetaPageIsValid</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SharedRootInfoKey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>datoid</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>datoid</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>relnode</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>relnode</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>sharedRootInfo</name> <operator>=</operator> <call><name>o_find_shared_root_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>sharedRootInfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>lockNo</name> <operator>=</operator> <call><name>tag_hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>%</operator> <name>SHARED_ROOT_INFO_INSERT_NUM_LOCKS</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>checkpoint_state</name><operator>-&gt;</operator><name>oSharedRootInfoInsertLocks</name><index>[<expr><name>lockNo</name></expr>]</index></name></expr></argument>,
					  <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>hasLock</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>sharedRootInfo</name> <operator>=</operator> <call><name>o_find_shared_root_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>sharedRootInfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OTuple</name></type>		<name>sharedRootInfoTuple</name></decl>;</decl_stmt>

		<comment type="block">/* tries to create SharedRootInfo */</comment>
		<expr_stmt><expr><name>sharedRootInfo</name> <operator>=</operator> <call><name>create_shared_root_info</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>ppool</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>rootInfo</name></name> <operator>=</operator> <name><name>sharedRootInfo</name><operator>-&gt;</operator><name>rootInfo</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>checkpointable_tree_init</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>was_evicted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>is_compressed</name> <operator>=</operator> <call><name>OCompressIsValid</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>compress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>rootInfo</name></name> <operator>=</operator> <name><name>sharedRootInfo</name><operator>-&gt;</operator><name>rootInfo</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><name>init_extents</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>is_compressed</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>was_evicted</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>init_extents</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

			<comment type="block">/*
			 * We should prevent iteration through free extentents list by the
			 * checkpointer until free extents is not completely initialized
			 * yet.
			 */</comment>
			<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>BTREE_GET_META</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>copyBlknoLock</name></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>sharedRootInfoTuple</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>Pointer</name><operator>)</operator> <name>sharedRootInfo</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sharedRootInfoTuple</name><operator>.</operator><name>formatFlags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>inserted</name> <operator>=</operator> <call><name>o_btree_autonomous_insert</name><argument_list>(<argument><expr><call><name>get_sys_tree</name><argument_list>(<argument><expr><name>SYS_TREES_SHARED_ROOT_INFO</name></expr></argument>)</argument_list></call></expr></argument>,
											 <argument><expr><name>sharedRootInfoTuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>inserted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>init_extents</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * The loader of an index fills the free extents list.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>o_tree_init_free_extents</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>BTREE_GET_META</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>copyBlknoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>,
					 <argument><expr><literal type="string">"unable to read free extents file %s"</literal></expr></argument>,
					 <argument><expr><call><name>get_seq_buf_filename</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>desc</name><operator>-&gt;</operator><name>freeBuf</name><operator>.</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>BTREE_GET_META</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>copyBlknoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/*
		 * o_btree_load_shmem() must be called only under relation locks, in
		 * this state BTree can not be evicted and removed from ShareDescr
		 * cache because AccessExclusiveLock needed for this actions.
		 */</comment>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>OInMemoryBlknoIsValid</name><argument_list>(<argument><expr><name><name>sharedRootInfo</name><operator>-&gt;</operator><name>rootInfo</name><operator>.</operator><name>rootPageBlkno</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>OInMemoryBlknoIsValid</name><argument_list>(<argument><expr><name><name>sharedRootInfo</name><operator>-&gt;</operator><name>rootInfo</name><operator>.</operator><name>metaPageBlkno</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>rootInfo</name></name> <operator>=</operator> <name><name>sharedRootInfo</name><operator>-&gt;</operator><name>rootInfo</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>checkpointable_tree_init</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>hasLock</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>checkpoint_state</name><operator>-&gt;</operator><name>oSharedRootInfoInsertLocks</name><index>[<expr><name>lockNo</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>sharedRootInfo</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>sharedRootInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Returns false if BTree does not exist in shared memory.
 *
 * Same to o_btree_load_shmem() but it does not create a BTree in shared
 * memory. Must be called under relation locks too.
 */</comment>
<function><type><name>bool</name></type>
<name>o_btree_try_use_shmem</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>ORelOidsIsValid</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>oids</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ORootPageIsValid</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>OMetaPageIsValid</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>SharedRootInfoKey</name></type> <name>key</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>SharedRootInfo</name> <modifier>*</modifier></type><name>shared</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>key</name><operator>.</operator><name>datoid</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>datoid</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>key</name><operator>.</operator><name>relnode</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>relnode</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><name>shared</name> <operator>=</operator> <call><name>o_find_shared_root_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>shared</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>OInMemoryBlknoIsValid</name><argument_list>(<argument><expr><name><name>shared</name><operator>-&gt;</operator><name>rootInfo</name><operator>.</operator><name>rootPageBlkno</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>OInMemoryBlknoIsValid</name><argument_list>(<argument><expr><name><name>shared</name><operator>-&gt;</operator><name>rootInfo</name><operator>.</operator><name>metaPageBlkno</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>rootInfo</name></name> <operator>=</operator> <name><name>shared</name><operator>-&gt;</operator><name>rootInfo</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>checkpointable_tree_init</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>shared</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Appends extents from free blocks file to the free extents list.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>o_tree_init_free_extents</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BTreeMetaPage</name> <modifier>*</modifier></type><name>metaPageBlkno</name> <init>= <expr><call><name>BTREE_GET_META</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type>		<name>num_free_blocks</name> <init>= <expr><call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>metaPageBlkno</name><operator>-&gt;</operator><name>numFreeBlocks</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>File</name></type>		<name>file</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>filename</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>OCompressIsValid</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>compress</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>num_free_blocks</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>filename</name> <operator>=</operator> <call><name>get_seq_buf_filename</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>desc</name><operator>-&gt;</operator><name>freeBuf</name><operator>.</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>PathNameOpenFile</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>O_RDONLY</name> <operator>|</operator> <name>PG_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>file</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>FileExtent</name> <modifier>*</modifier></type><name>extent</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>off_t</name></type>		<name>offset</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>CheckpointFileHeader</name></expr></argument>)</argument_list></sizeof></expr></init></decl>,
					<decl><type ref="prev"/><name>bytes_read</name></decl>,
					<decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name></type>		<name><name>buf</name><index>[<expr><name>ORIOLEDB_BLCKSZ</name></expr>]</index></name></decl>;</decl_stmt>

		<do>do
		<block>{<block_content>
			<expr_stmt><expr><name>bytes_read</name> <operator>=</operator> <call><name>OFileRead</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ORIOLEDB_BLCKSZ</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,
								   <argument><expr><name>WAIT_EVENT_DATA_FILE_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>bytes_read</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>bytes_read</name> <operator>%</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FileExtent</name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>

			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>bytes_read</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FileExtent</name></expr></argument>)</argument_list></sizeof></expr></incr>)</control>
			<block>{<block_content>
				<expr_stmt><expr><name>extent</name> <operator>=</operator> <operator>(</operator><name>FileExtent</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>buf</name> <operator>+</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>extent</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>pg_atomic_fetch_add_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>metaPageBlkno</name><operator>-&gt;</operator><name>numFreeBlocks</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint64</name><operator>)</operator> <name><name>extent</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<expr_stmt><expr><call><name>free_extent</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><operator>*</operator><name>extent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>num_free_blocks</name><operator>--</operator></expr>;</expr_stmt>
			</block_content>}</block></for>
		</block_content>}</block> while <condition>(<expr><name>num_free_blocks</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>bytes_read</name> <operator>==</operator> <name>ORIOLEDB_BLCKSZ</name></expr>)</condition>;</do>
		<expr_stmt><expr><call><name>FileClose</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return>return <expr><name>num_free_blocks</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>index_descr_free</name><parameter_list>(<parameter><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>tree</name><operator>-&gt;</operator><name>leafTupdesc</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FreeTupleDesc</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>leafTupdesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>tree</name><operator>-&gt;</operator><name>nonLeafTupdesc</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FreeTupleDesc</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>nonLeafTupdesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>tree</name><operator>-&gt;</operator><name>econtext</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FreeExprContext</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>econtext</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>tree</name><operator>-&gt;</operator><name>index_mctx</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>MemoryContextDelete</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>index_mctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>checkpointable_tree_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tree</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>index_descr_delete_from_hash</name><parameter_list>(<parameter><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>found</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>index_descr_free</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG3</name></expr></argument>, <argument><expr><literal type="string">"index descr hash delete index (%u, %u, %u)"</literal></expr></argument>,
		 <argument><expr><name><name>tree</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>datoid</name></name></expr></argument>,
		 <argument><expr><name><name>tree</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>reloid</name></name></expr></argument>,
		 <argument><expr><name><name>tree</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>relnode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name>oIndexDescrHash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tree</name><operator>-&gt;</operator><name>oids</name></name></expr></argument>,
					   <argument><expr><name>HASH_REMOVE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>table_descr_free</name><parameter_list>(<parameter><decl><type><name>OTableDescr</name> <modifier>*</modifier></type><name>descr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG3</name></expr></argument>, <argument><expr><literal type="string">"index descr hash delete for (%u, %u, %u)"</literal></expr></argument>,
		 <argument><expr><name><name>descr</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>datoid</name></name></expr></argument>,
		 <argument><expr><name><name>descr</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>reloid</name></name></expr></argument>,
		 <argument><expr><name><name>descr</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>relnode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>descr</name><operator>-&gt;</operator><name>toast</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>descr</name><operator>-&gt;</operator><name>toast</name><operator>-&gt;</operator><name>refcnt</name></name><operator>--</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>descr</name><operator>-&gt;</operator><name>toast</name><operator>-&gt;</operator><name>valid</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>index_descr_delete_from_hash</name><argument_list>(<argument><expr><name><name>descr</name><operator>-&gt;</operator><name>toast</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>descr</name><operator>-&gt;</operator><name>indices</name></name></expr>)</condition>
	<block>{<block_content>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>descr</name><operator>-&gt;</operator><name>nIndices</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<if_stmt><if>if <condition>(<expr><name><name>descr</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>descr</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>refcnt</name><operator>--</operator></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>descr</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>valid</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>index_descr_delete_from_hash</name><argument_list>(<argument><expr><name><name>descr</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if></if_stmt></block_content></block></for>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>descr</name><operator>-&gt;</operator><name>indices</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>descr</name><operator>-&gt;</operator><name>oldTuple</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ExecDropSingleTupleTableSlot</name><argument_list>(<argument><expr><name><name>descr</name><operator>-&gt;</operator><name>oldTuple</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>descr</name><operator>-&gt;</operator><name>newTuple</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ExecDropSingleTupleTableSlot</name><argument_list>(<argument><expr><name><name>descr</name><operator>-&gt;</operator><name>newTuple</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>descr</name><operator>-&gt;</operator><name>tupdesc</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FreeTupleDesc</name><argument_list>(<argument><expr><name><name>descr</name><operator>-&gt;</operator><name>tupdesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>FreeExecutorState</name><argument_list>(<argument><expr><name><name>descr</name><operator>-&gt;</operator><name>estate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>o_free_tmp_table_descr</name><parameter_list>(<parameter><decl><type><name>OTableDescr</name> <modifier>*</modifier></type><name>descr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>descr</name><operator>-&gt;</operator><name>toast</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>index_descr_free</name><argument_list>(<argument><expr><name><name>descr</name><operator>-&gt;</operator><name>toast</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>descr</name><operator>-&gt;</operator><name>toast</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>descr</name><operator>-&gt;</operator><name>indices</name></name></expr>)</condition>
	<block>{<block_content>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>descr</name><operator>-&gt;</operator><name>nIndices</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><call><name>index_descr_free</name><argument_list>(<argument><expr><name><name>descr</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>descr</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>descr</name><operator>-&gt;</operator><name>indices</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>descr</name><operator>-&gt;</operator><name>oldTuple</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ExecDropSingleTupleTableSlot</name><argument_list>(<argument><expr><name><name>descr</name><operator>-&gt;</operator><name>oldTuple</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>descr</name><operator>-&gt;</operator><name>newTuple</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ExecDropSingleTupleTableSlot</name><argument_list>(<argument><expr><name><name>descr</name><operator>-&gt;</operator><name>newTuple</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>descr</name><operator>-&gt;</operator><name>tupdesc</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FreeTupleDesc</name><argument_list>(<argument><expr><name><name>descr</name><operator>-&gt;</operator><name>tupdesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>FreeExecutorState</name><argument_list>(<argument><expr><name><name>descr</name><operator>-&gt;</operator><name>estate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>table_descr_delete_from_hash</name><parameter_list>(<parameter><decl><type><name>OTableDescr</name> <modifier>*</modifier></type><name>descr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>found</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>table_descr_free</name><argument_list>(<argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name>oTableDescrHash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>descr</name><operator>-&gt;</operator><name>oids</name></name></expr></argument>,
					   <argument><expr><name>HASH_REMOVE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>fill_table_descr_common_fields</name><parameter_list>(<parameter><decl><type><name>OTableDescr</name> <modifier>*</modifier></type><name>descr</name></decl></parameter>, <parameter><decl><type><name>OTable</name> <modifier>*</modifier></type><name>o_table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>old_context</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>descr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OTableDescr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>old_context</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>descrCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>descr</name><operator>-&gt;</operator><name>refcnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>descr</name><operator>-&gt;</operator><name>oids</name></name> <operator>=</operator> <name><name>o_table</name><operator>-&gt;</operator><name>oids</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>descr</name><operator>-&gt;</operator><name>tupdesc</name></name> <operator>=</operator> <call><name>o_table_tupdesc</name><argument_list>(<argument><expr><name>o_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>descr</name><operator>-&gt;</operator><name>oldTuple</name></name> <operator>=</operator> <call><name>MakeSingleTupleTableSlot</name><argument_list>(<argument><expr><name><name>descr</name><operator>-&gt;</operator><name>tupdesc</name></name></expr></argument>,
											   <argument><expr><operator>&amp;</operator><name>TTSOpsOrioleDB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>descr</name><operator>-&gt;</operator><name>newTuple</name></name> <operator>=</operator> <call><name>MakeSingleTupleTableSlot</name><argument_list>(<argument><expr><name><name>descr</name><operator>-&gt;</operator><name>tupdesc</name></name></expr></argument>,
											   <argument><expr><operator>&amp;</operator><name>TTSOpsOrioleDB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>descr</name><operator>-&gt;</operator><name>defvals_exprstate</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>o_sys_cache_search_datoid</name> <operator>=</operator> <name><name>o_table</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>datoid</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>o_table</name><operator>-&gt;</operator><name>defvals</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>		<name>i</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>		<name>ctid_off</name> <init>= <expr><ternary><condition><expr><name><name>o_table</name><operator>-&gt;</operator><name>has_primary</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>descr</name><operator>-&gt;</operator><name>defvals_exprstate</name></name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ExprState</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator>
										   <operator>(</operator><name><name>o_table</name><operator>-&gt;</operator><name>nfields</name></name> <operator>+</operator> <name>ctid_off</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>o_table</name><operator>-&gt;</operator><name>nfields</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>o_table</name><operator>-&gt;</operator><name>defvals</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>descr</name><operator>-&gt;</operator><name>defvals_exprstate</name><index>[<expr><name>i</name> <operator>+</operator> <name>ctid_off</name></expr>]</index></name> <operator>=</operator>
					<call><name>ExecInitExpr</name><argument_list>(<argument><expr><name><name>o_table</name><operator>-&gt;</operator><name>defvals</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>descr</name><operator>-&gt;</operator><name>estate</name></name> <operator>=</operator> <call><name>CreateExecutorState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>old_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>fill_table_descr</name><parameter_list>(<parameter><decl><type><name>OTableDescr</name> <modifier>*</modifier></type><name>descr</name></decl></parameter>, <parameter><decl><type><name>OTable</name> <modifier>*</modifier></type><name>o_table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>old_context</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>fill_table_descr_common_fields</name><argument_list>(<argument><expr><name>descr</name></expr></argument>, <argument><expr><name>o_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>old_context</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>descrCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>o_table_descr_fill_indices</name><argument_list>(<argument><expr><name>descr</name></expr></argument>, <argument><expr><name>o_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>old_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>o_table_free</name><argument_list>(<argument><expr><name>o_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>o_fill_tmp_table_descr</name><parameter_list>(<parameter><decl><type><name>OTableDescr</name> <modifier>*</modifier></type><name>descr</name></decl></parameter>, <parameter><decl><type><name>OTable</name> <modifier>*</modifier></type><name>o_table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>old_context</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OIndexNumber</name></type> <name>cur_ix</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OIndex</name>	   <modifier>*</modifier></type><name>index</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>indexDescr</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>fill_table_descr_common_fields</name><argument_list>(<argument><expr><name>descr</name></expr></argument>, <argument><expr><name>o_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>old_context</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>descrCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>descr</name><operator>-&gt;</operator><name>nIndices</name></name> <operator>=</operator> <name><name>o_table</name><operator>-&gt;</operator><name>nindices</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>o_table</name><operator>-&gt;</operator><name>has_primary</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>descr</name><operator>-&gt;</operator><name>nIndices</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>descr</name><operator>-&gt;</operator><name>indices</name></name> <operator>=</operator> <operator>(</operator><name>OIndexDescr</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OIndexDescr</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>descr</name><operator>-&gt;</operator><name>nIndices</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>cur_ix</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cur_ix</name> <operator>&lt;</operator> <name><name>descr</name><operator>-&gt;</operator><name>nIndices</name></name></expr>;</condition> <incr><expr><name>cur_ix</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>make_o_index</name><argument_list>(<argument><expr><name>o_table</name></expr></argument>, <argument><expr><name>cur_ix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>indexDescr</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OIndexDescr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>o_index_fill_descr</name><argument_list>(<argument><expr><name>indexDescr</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>index_btree_desc_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>indexDescr</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>, <argument><expr><name><name>indexDescr</name><operator>-&gt;</operator><name>compress</name></name></expr></argument>,
							  <argument><expr><name><name>indexDescr</name><operator>-&gt;</operator><name>oids</name></name></expr></argument>, <argument><expr><name><name>index</name><operator>-&gt;</operator><name>indexType</name></name></expr></argument>,
							  <argument><expr><name><name>index</name><operator>-&gt;</operator><name>createOxid</name></name></expr></argument>, <argument><expr><name>indexDescr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free_o_index</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>descr</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>cur_ix</name></expr>]</index></name> <operator>=</operator> <name>indexDescr</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>make_o_index</name><argument_list>(<argument><expr><name>o_table</name></expr></argument>, <argument><expr><name>TOASTIndexNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>indexDescr</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OIndexDescr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>o_index_fill_descr</name><argument_list>(<argument><expr><name>indexDescr</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>index_btree_desc_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>indexDescr</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>, <argument><expr><name><name>indexDescr</name><operator>-&gt;</operator><name>compress</name></name></expr></argument>,
						  <argument><expr><name><name>indexDescr</name><operator>-&gt;</operator><name>oids</name></name></expr></argument>, <argument><expr><name><name>index</name><operator>-&gt;</operator><name>indexType</name></name></expr></argument>,
						  <argument><expr><name><name>index</name><operator>-&gt;</operator><name>createOxid</name></name></expr></argument>, <argument><expr><name>indexDescr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free_o_index</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>descr</name><operator>-&gt;</operator><name>toast</name></name> <operator>=</operator> <name>indexDescr</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>o_find_toastable_attrs</name><argument_list>(<argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>old_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OTableDescr</name> <modifier>*</modifier></type>
<name>create_table_descr</name><parameter_list>(<parameter><decl><type><name>ORelOids</name></type> <name>oids</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTableDescr</name> <modifier>*</modifier></type><name>descr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>found</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTable</name>	   <modifier>*</modifier></type><name>o_table</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>old_enable_stopevents</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>old_enable_stopevents</name> <operator>=</operator> <name>enable_stopevents</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>enable_stopevents</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>o_table</name> <operator>=</operator> <call><name>o_tables_get</name><argument_list>(<argument><expr><name>oids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>o_table</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>enable_stopevents</name> <operator>=</operator> <name>old_enable_stopevents</name></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>descr</name> <operator>=</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name>oTableDescrHash</name></expr></argument>,
						<argument><expr><operator>&amp;</operator><name><name>o_table</name><operator>-&gt;</operator><name>oids</name></name></expr></argument>,
						<argument><expr><name>HASH_ENTER</name></expr></argument>,
						<argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>fill_table_descr</name><argument_list>(<argument><expr><name>descr</name></expr></argument>, <argument><expr><name>o_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>enable_stopevents</name> <operator>=</operator> <name>old_enable_stopevents</name></expr>;</expr_stmt>
	<return>return <expr><name>descr</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Finds tree with given oids in private table descriptor.
 */</comment>
<function><type><name>OIndexNumber</name></type>
<name>find_tree_in_descr</name><parameter_list>(<parameter><decl><type><name>OTableDescr</name> <modifier>*</modifier></type><name>descr</name></decl></parameter>, <parameter><decl><type><name>ORelOids</name></type> <name>oids</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>descr</name><operator>-&gt;</operator><name>nIndices</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>descr</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>oids</name><operator>.</operator><name>datoid</name></name> <operator>==</operator> <name><name>oids</name><operator>.</operator><name>datoid</name></name> <operator>&amp;&amp;</operator>
			<name><name>descr</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>oids</name><operator>.</operator><name>reloid</name></name> <operator>==</operator> <name><name>oids</name><operator>.</operator><name>reloid</name></name> <operator>&amp;&amp;</operator>
			<name><name>descr</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>oids</name><operator>.</operator><name>relnode</name></name> <operator>==</operator> <name><name>oids</name><operator>.</operator><name>relnode</name></name></expr>)</condition>
		<block>{<block_content>
			<return>return <expr><name>i</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name><name>descr</name><operator>-&gt;</operator><name>toast</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>datoid</name></name> <operator>==</operator> <name><name>oids</name><operator>.</operator><name>datoid</name></name> <operator>&amp;&amp;</operator>
		<name><name>descr</name><operator>-&gt;</operator><name>toast</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>reloid</name></name> <operator>==</operator> <name><name>oids</name><operator>.</operator><name>reloid</name></name> <operator>&amp;&amp;</operator>
		<name><name>descr</name><operator>-&gt;</operator><name>toast</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>relnode</name></name> <operator>==</operator> <name><name>oids</name><operator>.</operator><name>relnode</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>TOASTIndexNumber</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>InvalidIndexNumber</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * o_fetch_descr_extended fetches OTableDescr from cache, or creates a new one.
 */</comment>
<function><type><name>OTableDescr</name> <modifier>*</modifier></type>
<name>o_fetch_table_descr</name><parameter_list>(<parameter><decl><type><name>ORelOids</name></type> <name>oids</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTableDescr</name> <modifier>*</modifier></type><name>table_descr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>found</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>table_descr</name> <operator>=</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name>oTableDescrHash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oids</name></expr></argument>, <argument><expr><name>HASH_FIND</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>table_descr</name> <operator>=</operator> <call><name>create_table_descr</name><argument_list>(<argument><expr><name>oids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>table_descr</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * o_fetch_index_descr fetches OIndexDescr for particular tree from cache, or
 * creates a new one.
 */</comment>
<function><type><name>OIndexDescr</name> <modifier>*</modifier></type>
<name>o_fetch_index_descr</name><parameter_list>(<parameter><decl><type><name>ORelOids</name></type> <name>oids</name></decl></parameter>, <parameter><decl><type><name>OIndexType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>lock</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>nested</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>index_descr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>lock</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>o_tables_rel_lock_extended</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oids</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>index_descr</name> <operator>=</operator> <call><name>get_index_descr</name><argument_list>(<argument><expr><name>oids</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>index_descr</name> <operator>&amp;&amp;</operator> <name>lock</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>o_tables_rel_unlock_extended</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oids</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>index_descr</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>cleanup_shared_root_info_pages</name><parameter_list>(<parameter><decl><type><name>OPagePool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>SharedRootInfo</name> <modifier>*</modifier></type><name>sharedRootInfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BTreeRootInfo</name> <modifier>*</modifier></type><name>rootInfo</name> <init>= <expr><operator>&amp;</operator><name><name>sharedRootInfo</name><operator>-&gt;</operator><name>rootInfo</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>FREE_PAGE_IF_VALID</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>rootInfo</name><operator>-&gt;</operator><name>rootPageBlkno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>OInMemoryBlknoIsValid</name><argument_list>(<argument><expr><name><name>rootInfo</name><operator>-&gt;</operator><name>metaPageBlkno</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>blkno</name></decl>,
					<decl><type ref="prev"/><name>bufnum</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>BTreeMetaPage</name> <modifier>*</modifier></type><name>meta_page</name> <init>= <expr><operator>(</operator><name>BTreeMetaPage</name> <operator>*</operator><operator>)</operator> <call><name>O_GET_IN_MEMORY_PAGE</name><argument_list>(<argument><expr><name><name>rootInfo</name><operator>-&gt;</operator><name>metaPageBlkno</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>blkno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>blkno</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>blkno</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><call><name>FREE_PAGE_IF_VALID</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>meta_page</name><operator>-&gt;</operator><name>freeBuf</name><operator>.</operator><name>pages</name><index>[<expr><name>blkno</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>bufnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>bufnum</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>bufnum</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<expr_stmt><expr><call><name>FREE_PAGE_IF_VALID</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>meta_page</name><operator>-&gt;</operator><name>nextChkp</name><index>[<expr><name>bufnum</name></expr>]</index></name><operator>.</operator><name><name>pages</name><index>[<expr><name>blkno</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>FREE_PAGE_IF_VALID</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>meta_page</name><operator>-&gt;</operator><name>tmpBuf</name><index>[<expr><name>bufnum</name></expr>]</index></name><operator>.</operator><name><name>pages</name><index>[<expr><name>blkno</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>FREE_PAGE_IF_VALID</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>rootInfo</name><operator>-&gt;</operator><name>metaPageBlkno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>init_shared_root_info</name><parameter_list>(<parameter><decl><type><name>OPagePool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>SharedRootInfo</name> <modifier>*</modifier></type><name>sharedRootInfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BTreeMetaPage</name> <modifier>*</modifier></type><name>meta_page</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BTreeRootInfo</name> <modifier>*</modifier></type><name>rootInfo</name> <init>= <expr><operator>&amp;</operator><name><name>sharedRootInfo</name><operator>-&gt;</operator><name>rootInfo</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>blkno</name></decl>,
				<decl><type ref="prev"/><name>bufnum</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>rootInfo</name><operator>-&gt;</operator><name>rootPageBlkno</name></name> <operator>=</operator> <call><name>ppool_get_metapage</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rootInfo</name><operator>-&gt;</operator><name>metaPageBlkno</name></name> <operator>=</operator> <call><name>ppool_get_metapage</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rootInfo</name><operator>-&gt;</operator><name>rootPageChangeCount</name></name> <operator>=</operator> <call><name>O_PAGE_GET_CHANGE_COUNT</name><argument_list>(<argument><expr><call><name>O_GET_IN_MEMORY_PAGE</name><argument_list>(<argument><expr><name><name>rootInfo</name><operator>-&gt;</operator><name>rootPageBlkno</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OInMemoryBlknoIsValid</name><argument_list>(<argument><expr><name><name>rootInfo</name><operator>-&gt;</operator><name>rootPageBlkno</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
		<operator>!</operator><call><name>OInMemoryBlknoIsValid</name><argument_list>(<argument><expr><name><name>rootInfo</name><operator>-&gt;</operator><name>metaPageBlkno</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>rootInfo</name><operator>-&gt;</operator><name>metaPageBlkno</name></name> <operator>!=</operator> <name>OInvalidInMemoryBlkno</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ppool_free_page</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>rootInfo</name><operator>-&gt;</operator><name>metaPageBlkno</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>rootInfo</name><operator>-&gt;</operator><name>metaPageBlkno</name></name> <operator>=</operator> <name>OInvalidInMemoryBlkno</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>cleanup_shared_root_info_pages</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>sharedRootInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"out of space for shared cache"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>meta_page</name> <operator>=</operator> <operator>(</operator><name>BTreeMetaPage</name> <operator>*</operator><operator>)</operator> <call><name>O_GET_IN_MEMORY_PAGE</name><argument_list>(<argument><expr><name><name>rootInfo</name><operator>-&gt;</operator><name>metaPageBlkno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>blkno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>blkno</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>blkno</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name><name>meta_page</name><operator>-&gt;</operator><name>freeBuf</name><operator>.</operator><name>pages</name><index>[<expr><name>blkno</name></expr>]</index></name> <operator>=</operator> <name>OInvalidInMemoryBlkno</name></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>bufnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>bufnum</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>bufnum</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><name><name>meta_page</name><operator>-&gt;</operator><name>nextChkp</name><index>[<expr><name>bufnum</name></expr>]</index></name><operator>.</operator><name><name>pages</name><index>[<expr><name>blkno</name></expr>]</index></name> <operator>=</operator> <name>OInvalidInMemoryBlkno</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>meta_page</name><operator>-&gt;</operator><name>tmpBuf</name><index>[<expr><name>bufnum</name></expr>]</index></name><operator>.</operator><name><name>pages</name><index>[<expr><name>blkno</name></expr>]</index></name> <operator>=</operator> <name>OInvalidInMemoryBlkno</name></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>o_invalidate_descrs</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>datoid</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>reloid</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>relfilenode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HASH_SEQ_STATUS</name></type> <name>scan_status</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTableDescr</name> <modifier>*</modifier></type><name>tableDescr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>indexDescr</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>datoid</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>reloid</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>relfilenode</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>datoid</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>reloid</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>relfilenode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>hash_seq_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scan_status</name></expr></argument>, <argument><expr><name>oTableDescrHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<while>while <condition>(<expr><operator>(</operator><name>tableDescr</name> <operator>=</operator> <operator>(</operator><name>OTableDescr</name> <operator>*</operator><operator>)</operator> <call><name>hash_seq_search</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scan_status</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>bool</name></type>		<name>delete</name> <init>= <expr><name><name>tableDescr</name><operator>-&gt;</operator><name>refcnt</name></name> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>delete</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>delete</name> <operator>=</operator> <operator>!</operator><call><name>recreate_table_descr</name><argument_list>(<argument><expr><name>tableDescr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>delete</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>table_descr_delete_from_hash</name><argument_list>(<argument><expr><name>tableDescr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></while>

		<expr_stmt><expr><call><name>hash_seq_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scan_status</name></expr></argument>, <argument><expr><name>oIndexDescrHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<while>while <condition>(<expr><operator>(</operator><name>indexDescr</name> <operator>=</operator> <operator>(</operator><name>OIndexDescr</name> <operator>*</operator><operator>)</operator> <call><name>hash_seq_search</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scan_status</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>indexDescr</name><operator>-&gt;</operator><name>refcnt</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>index_descr_delete_from_hash</name><argument_list>(<argument><expr><name>indexDescr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>recreate_index_descr</name><argument_list>(<argument><expr><name>indexDescr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></while>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>ORelOids</name></type>	<name>oids</name> <init>= <expr><block>{<expr><name>datoid</name></expr>, <expr><name>reloid</name></expr>, <expr><name>relfilenode</name></expr>}</block></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>found</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>tableDescr</name> <operator>=</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name>oTableDescrHash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oids</name></expr></argument>, <argument><expr><name>HASH_FIND</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>bool</name></type>		<name>delete</name> <init>= <expr><name><name>tableDescr</name><operator>-&gt;</operator><name>refcnt</name></name> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>delete</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>delete</name> <operator>=</operator> <operator>!</operator><call><name>recreate_table_descr</name><argument_list>(<argument><expr><name>tableDescr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>delete</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>table_descr_delete_from_hash</name><argument_list>(<argument><expr><name>tableDescr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>indexDescr</name> <operator>=</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name>oIndexDescrHash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oids</name></expr></argument>, <argument><expr><name>HASH_FIND</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>indexDescr</name><operator>-&gt;</operator><name>refcnt</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>index_descr_delete_from_hash</name><argument_list>(<argument><expr><name>indexDescr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>recreate_index_descr</name><argument_list>(<argument><expr><name>indexDescr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>SharedRootInfo</name> <modifier>*</modifier></type>
<name>o_find_shared_root_info</name><parameter_list>(<parameter><decl><type><name>SharedRootInfoKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTuple</name></type>		<name>key_tuple</name></decl>,
				<decl><type ref="prev"/><name>result_tuple</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>key_tuple</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>Pointer</name><operator>)</operator> <name>key</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key_tuple</name><operator>.</operator><name>formatFlags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>result_tuple</name> <operator>=</operator> <call><name>o_btree_find_tuple_by_key</name><argument_list>(<argument><expr><call><name>get_sys_tree</name><argument_list>(<argument><expr><name>SYS_TREES_SHARED_ROOT_INFO</name></expr></argument>)</argument_list></call></expr></argument>,
											 <argument><expr><operator>&amp;</operator><name>key_tuple</name></expr></argument>, <argument><expr><name>BTreeKeyNonLeafKey</name></expr></argument>,
											 <argument><expr><name>COMMITSEQNO_INPROGRESS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
											 <argument><expr><name>CurrentMemoryContext</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>SharedRootInfo</name> <operator>*</operator><operator>)</operator> <name><name>result_tuple</name><operator>.</operator><name>data</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>cleanup_btree</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>datoid</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>relnode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SharedRootInfoKey</name></type> <name>key</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SharedRootInfo</name> <modifier>*</modifier></type><name>shared</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>datoid</name></name> <operator>=</operator> <name>datoid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>relnode</name></name> <operator>=</operator> <name>relnode</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>shared</name> <operator>=</operator> <call><name>o_find_shared_root_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>shared</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>bool</name>		<name>drop_result</name></type> <name>PG_USED_FOR_ASSERTS_ONLY</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>drop_result</name> <operator>=</operator> <call><name>o_drop_shared_root_info</name><argument_list>(<argument><expr><name>datoid</name></expr></argument>, <argument><expr><name>relnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>drop_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>o_btree_cleanup_pages</name><argument_list>(<argument><expr><name><name>shared</name><operator>-&gt;</operator><name>rootInfo</name><operator>.</operator><name>rootPageBlkno</name></name></expr></argument>,
							  <argument><expr><name><name>shared</name><operator>-&gt;</operator><name>rootInfo</name><operator>.</operator><name>metaPageBlkno</name></name></expr></argument>,
							  <argument><expr><name><name>shared</name><operator>-&gt;</operator><name>rootInfo</name><operator>.</operator><name>rootPageChangeCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>shared</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>cleanup_btree_files</name><argument_list>(<argument><expr><name><name>key</name><operator>.</operator><name>datoid</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>relnode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>o_drop_shared_root_info</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>datoid</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>relnode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SharedRootInfoKey</name></type> <name>key</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTuple</name></type>		<name>key_tuple</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>datoid</name></name> <operator>=</operator> <name>datoid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>relnode</name></name> <operator>=</operator> <name>relnode</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key_tuple</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>Pointer</name><operator>)</operator> <operator>&amp;</operator><name>key</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key_tuple</name><operator>.</operator><name>formatFlags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<return>return <expr><call><name>o_btree_autonomous_delete</name><argument_list>(<argument><expr><call><name>get_sys_tree</name><argument_list>(<argument><expr><name>SYS_TREES_SHARED_ROOT_INFO</name></expr></argument>)</argument_list></call></expr></argument>,
									 <argument><expr><name>key_tuple</name></expr></argument>, <argument><expr><name>BTreeKeyNonLeafKey</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OIndexDescr</name> <modifier>*</modifier></type>
<name>get_index_descr</name><parameter_list>(<parameter><decl><type><name>ORelOids</name></type> <name>ixOids</name></decl></parameter>, <parameter><decl><type><name>OIndexType</name></type> <name>ixType</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>miss_ok</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>found</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OIndex</name>	   <modifier>*</modifier></type><name>oIndex</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>mcxt</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name>oIndexDescrHash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ixOids</name></expr></argument>, <argument><expr><name>HASH_ENTER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>oIndex</name> <operator>=</operator> <call><name>o_indices_get</name><argument_list>(<argument><expr><name>ixOids</name></expr></argument>, <argument><expr><name>ixType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>oIndex</name> <operator>||</operator> <name>miss_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>oIndex</name> <operator>&amp;&amp;</operator> <name>miss_ok</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name>oIndexDescrHash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ixOids</name></expr></argument>, <argument><expr><name>HASH_REMOVE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>mcxt</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>descrCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>o_index_fill_descr</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>oIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>mcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>index_btree_desc_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>, <argument><expr><name><name>result</name><operator>-&gt;</operator><name>compress</name></name></expr></argument>, <argument><expr><name><name>result</name><operator>-&gt;</operator><name>oids</name></name></expr></argument>,
						  <argument><expr><name><name>oIndex</name><operator>-&gt;</operator><name>indexType</name></name></expr></argument>, <argument><expr><name><name>oIndex</name><operator>-&gt;</operator><name>createOxid</name></name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free_o_index</name><argument_list>(<argument><expr><name>oIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>recreate_index_descr</name><parameter_list>(<parameter><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>descr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OIndex</name>	   <modifier>*</modifier></type><name>oIndex</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>refcnt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>mcxt</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>oIndex</name> <operator>=</operator> <call><name>o_indices_get</name><argument_list>(<argument><expr><name><name>descr</name><operator>-&gt;</operator><name>oids</name></name></expr></argument>, <argument><expr><name><name>descr</name><operator>-&gt;</operator><name>desc</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>oIndex</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>descr</name><operator>-&gt;</operator><name>valid</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>refcnt</name> <operator>=</operator> <name><name>descr</name><operator>-&gt;</operator><name>refcnt</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>index_descr_free</name><argument_list>(<argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>mcxt</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>descrCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>o_index_fill_descr</name><argument_list>(<argument><expr><name>descr</name></expr></argument>, <argument><expr><name>oIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>mcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>index_btree_desc_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>descr</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>, <argument><expr><name><name>descr</name><operator>-&gt;</operator><name>compress</name></name></expr></argument>, <argument><expr><name><name>descr</name><operator>-&gt;</operator><name>oids</name></name></expr></argument>,
						  <argument><expr><name><name>oIndex</name><operator>-&gt;</operator><name>indexType</name></name></expr></argument>, <argument><expr><name><name>oIndex</name><operator>-&gt;</operator><name>createOxid</name></name></expr></argument>, <argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>descr</name><operator>-&gt;</operator><name>refcnt</name></name> <operator>=</operator> <name>refcnt</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free_o_index</name><argument_list>(<argument><expr><name>oIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>o_table_descr_fill_indices</name><parameter_list>(<parameter><decl><type><name>OTableDescr</name> <modifier>*</modifier></type><name>descr</name></decl></parameter>, <parameter><decl><type><name>OTable</name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OIndexNumber</name></type> <name>cur_ix</name></decl>,
				<decl><type ref="prev"/><name>ix_off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>descr</name><operator>-&gt;</operator><name>nIndices</name></name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>nindices</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>table</name><operator>-&gt;</operator><name>has_primary</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>descr</name><operator>-&gt;</operator><name>nIndices</name></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>ix_off</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>descr</name><operator>-&gt;</operator><name>indices</name></name> <operator>=</operator> <operator>(</operator><name>OIndexDescr</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OIndexDescr</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>descr</name><operator>-&gt;</operator><name>nIndices</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>cur_ix</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cur_ix</name> <operator>&lt;</operator> <name><name>descr</name><operator>-&gt;</operator><name>nIndices</name></name></expr>;</condition> <incr><expr><name>cur_ix</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ORelOids</name></type>	<name>ixOids</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>OIndexType</name></type>	<name>ixType</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>table</name><operator>-&gt;</operator><name>has_primary</name></name> <operator>&amp;&amp;</operator> <name>cur_ix</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>ixOids</name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>oids</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>ixType</name> <operator>=</operator> <name>oIndexPrimary</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>ixOids</name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>cur_ix</name> <operator>-</operator> <name>ix_off</name></expr>]</index></name><operator>.</operator><name>oids</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>ixType</name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>cur_ix</name> <operator>-</operator> <name>ix_off</name></expr>]</index></name><operator>.</operator><name>type</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><name><name>descr</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>cur_ix</name></expr>]</index></name> <operator>=</operator> <call><name>get_index_descr</name><argument_list>(<argument><expr><name>ixOids</name></expr></argument>, <argument><expr><name>ixType</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>descr</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>cur_ix</name></expr>]</index></name><operator>-&gt;</operator><name>refcnt</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><call><name>ORelOidsIsValid</name><argument_list>(<argument><expr><name><name>table</name><operator>-&gt;</operator><name>toast_oids</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>descr</name><operator>-&gt;</operator><name>toast</name></name> <operator>=</operator> <call><name>get_index_descr</name><argument_list>(<argument><expr><name><name>table</name><operator>-&gt;</operator><name>toast_oids</name></name></expr></argument>, <argument><expr><name>oIndexToast</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>descr</name><operator>-&gt;</operator><name>toast</name><operator>-&gt;</operator><name>refcnt</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>descr</name><operator>-&gt;</operator><name>toast</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>o_find_toastable_attrs</name><argument_list>(<argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>is_pk_attnum</name><parameter_list>(<parameter><decl><type><name>OTableDescr</name> <modifier>*</modifier></type><name>tableDescr</name></decl></parameter>, <parameter><decl><type><name>AttrNumber</name></type> <name>attnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>pk</name> <init>= <expr><call><name>GET_PRIMARY</name><argument_list>(<argument><expr><name>tableDescr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pk</name><operator>-&gt;</operator><name>nFields</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>attnum</name> <operator>==</operator> <name><name>pk</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tableAttnum</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>o_find_toastable_attrs</name><parameter_list>(<parameter><decl><type><name>OTableDescr</name> <modifier>*</modifier></type><name>tableDescr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>pk</name> <init>= <expr><call><name>GET_PRIMARY</name><argument_list>(<argument><expr><name>tableDescr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>tupdesc</name> <init>= <expr><name><name>pk</name><operator>-&gt;</operator><name>leafTupdesc</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>toastable</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>,
				<decl><type ref="prev"/><name>ctid_off</name> <init>= <expr><ternary><condition><expr><name><name>pk</name><operator>-&gt;</operator><name>primaryIsCtid</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>toastable</name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>ctid_off</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>tupdesc</name><operator>-&gt;</operator><name>natts</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>att</name> <init>= <expr><call><name>TupleDescAttr</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>att</name><operator>-&gt;</operator><name>attisdropped</name></name> <operator>&amp;&amp;</operator> <name><name>att</name><operator>-&gt;</operator><name>attlen</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>att</name><operator>-&gt;</operator><name>attstorage</name></name> <operator>!=</operator> <literal type="char">'p'</literal> <operator>&amp;&amp;</operator>
			<operator>!</operator><call><name>is_pk_attnum</name><argument_list>(<argument><expr><name>tableDescr</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>toastable</name> <operator>=</operator> <call><name>lappend_int</name><argument_list>(<argument><expr><name>toastable</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>toastable</name> <operator>!=</operator> <name>NIL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>tableDescr</name><operator>-&gt;</operator><name>ntoastable</name></name> <operator>=</operator> <call><name>list_length</name><argument_list>(<argument><expr><name>toastable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tableDescr</name><operator>-&gt;</operator><name>toastable</name></name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AttrNumber</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>tableDescr</name><operator>-&gt;</operator><name>ntoastable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>toastable</argument>)</argument_list></macro>
		<block>{<block_content>
			<expr_stmt><expr><name><name>tableDescr</name><operator>-&gt;</operator><name>toastable</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>lfirst_int</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block>
		<expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name>toastable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name><name>tableDescr</name><operator>-&gt;</operator><name>toastable</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tableDescr</name><operator>-&gt;</operator><name>ntoastable</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* fills field opclass fields and finds comparator for it */</comment>
<function><type><name>void</name></type>
<name>oFillFieldOpClassAndComparator</name><parameter_list>(<parameter><decl><type><name>OIndexField</name> <modifier>*</modifier></type><name>field</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>datoid</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>opclassoid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OOpclass</name>   <modifier>*</modifier></type><name>opclass</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>o_sys_cache_search_datoid</name> <operator>=</operator> <name>datoid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>opclass</name> <operator>=</operator> <call><name>o_opclass_get</name><argument_list>(<argument><expr><name>opclassoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>opclass</name></name> <operator>=</operator> <name>opclassoid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>inputtype</name></name> <operator>=</operator> <name><name>opclass</name><operator>-&gt;</operator><name>inputtype</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>opfamily</name></name> <operator>=</operator> <name><name>opclass</name><operator>-&gt;</operator><name>opfamily</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>comparator</name></name> <operator>=</operator> <call><name>o_find_opclass_comparator</name><argument_list>(<argument><expr><name>opclass</name></expr></argument>, <argument><expr><name><name>field</name><operator>-&gt;</operator><name>collation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>field</name><operator>-&gt;</operator><name>comparator</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Find opfamily omparator for given datatypes and collation.  Throws error
 * if not found.
 */</comment>
<function><type><name>OComparator</name> <modifier>*</modifier></type>
<name>o_find_comparator</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>opfamily</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>lefttype</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>righttype</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>collation</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OComparatorKey</name></type> <name>key</name> <init>= <expr><block>{
		<expr><operator>.</operator><name>opfamily</name> <operator>=</operator> <name>opfamily</name></expr>,
		<expr><operator>.</operator><name>lefttype</name> <operator>=</operator> <name>lefttype</name></expr>,
		<expr><operator>.</operator><name>righttype</name> <operator>=</operator> <name>righttype</name></expr>,
		<expr><operator>.</operator><name>collation</name> <operator>=</operator> <name>collation</name></expr>
	}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OComparator</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OComparator</name></type> <name>comparator</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>procOid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>leftBaseTypeOid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>rightBaseTypeOid</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * At first, try to find existing comparator in cache.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>result</name> <operator>=</operator> <call><name>o_find_cached_comparator</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * If comparator isn't cached, then look for comparator with sort support
	 * function.
	 */</comment>
	<expr_stmt><expr><name>leftBaseTypeOid</name> <operator>=</operator> <call><name>getBaseType</name><argument_list>(<argument><expr><name>lefttype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rightBaseTypeOid</name> <operator>=</operator> <call><name>getBaseType</name><argument_list>(<argument><expr><name>righttype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>procOid</name> <operator>=</operator> <call><name>get_opfamily_proc</name><argument_list>(<argument><expr><name>opfamily</name></expr></argument>, <argument><expr><name>leftBaseTypeOid</name></expr></argument>, <argument><expr><name>rightBaseTypeOid</name></expr></argument>, <argument><expr><name>BTSORTSUPPORT_PROC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>comparator</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>comparator</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>comparator</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name>procOid</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>SortSupportData</name></type> <name>ssup</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ssup</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ssup</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ssup</name><operator>.</operator><name>ssup_cxt</name></name> <operator>=</operator> <name>descrCxt</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ssup</name><operator>.</operator><name>ssup_collation</name></name> <operator>=</operator> <name>collation</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ssup</name><operator>.</operator><name>abbreviate</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>OidFunctionCall1</name><argument_list>(<argument><expr><name>procOid</name></expr></argument>, <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ssup</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>ssup</name><operator>.</operator><name>comparator</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>comparator</name><operator>.</operator><name>haveSortSupport</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>comparator</name><operator>.</operator><name>ssup_cxt</name></name> <operator>=</operator> <name><name>ssup</name><operator>.</operator><name>ssup_cxt</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>comparator</name><operator>.</operator><name>ssup_extra</name></name> <operator>=</operator> <name><name>ssup</name><operator>.</operator><name>ssup_extra</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>comparator</name><operator>.</operator><name>ssup_comparator</name></name> <operator>=</operator> <name><name>ssup</name><operator>.</operator><name>comparator</name></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Finally, look for plain comparison function.  Throw erro if not found.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>comparator</name><operator>.</operator><name>haveSortSupport</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>procOid</name> <operator>=</operator> <call><name>get_opfamily_proc</name><argument_list>(<argument><expr><name>opfamily</name></expr></argument>, <argument><expr><name>leftBaseTypeOid</name></expr></argument>, <argument><expr><name>rightBaseTypeOid</name></expr></argument>, <argument><expr><name>BTORDER_PROC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>procOid</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tup</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Form_pg_opfamily</name></type> <name>opfamilyForm</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>OPFAMILYOID</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>opfamily</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>opfamilyForm</name> <operator>=</operator> <operator>(</operator><name>Form_pg_opfamily</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DATATYPE_MISMATCH</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"opfamily %s doesn't contain comparison function for types %s and %s"</literal></expr></argument>,
							<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>opfamilyForm</name><operator>-&gt;</operator><name>opfname</name></name></expr></argument>)</argument_list></call></expr></argument>,
							<argument><expr><call><name>format_type_be</name><argument_list>(<argument><expr><name>lefttype</name></expr></argument>)</argument_list></call></expr></argument>,
							<argument><expr><call><name>format_type_be</name><argument_list>(<argument><expr><name>righttype</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>fmgr_info</name><argument_list>(<argument><expr><name>procOid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>comparator</name><operator>.</operator><name>finfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><call><name>o_add_comparator_to_cache</name><argument_list>(<argument><expr><operator>&amp;</operator><name>comparator</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Find opclass comparator in cache or create new one.
 */</comment>
<function><type><specifier>static</specifier> <name>OComparator</name> <modifier>*</modifier></type>
<name>o_find_opclass_comparator</name><parameter_list>(<parameter><decl><type><name>OOpclass</name> <modifier>*</modifier></type><name>opclass</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>collation</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OComparatorKey</name></type> <name>key</name> <init>= <expr><block>{
		<expr><operator>.</operator><name>opfamily</name> <operator>=</operator> <name><name>opclass</name><operator>-&gt;</operator><name>opfamily</name></name></expr>,
		<expr><operator>.</operator><name>lefttype</name> <operator>=</operator> <name><name>opclass</name><operator>-&gt;</operator><name>inputtype</name></name></expr>,
		<expr><operator>.</operator><name>righttype</name> <operator>=</operator> <name><name>opclass</name><operator>-&gt;</operator><name>inputtype</name></name></expr>,
		<expr><operator>.</operator><name>collation</name> <operator>=</operator> <name>collation</name></expr>
	}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OComparator</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OComparator</name></type> <name>comparator</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * At first, try to find existing comparator in cache.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>result</name> <operator>=</operator> <call><name>o_find_cached_comparator</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>comparator</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>comparator</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>comparator</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * If comparator isn't cached, then look for comparator with sort support
	 * function.
	 */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>opclass</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>common</name><operator>.</operator><name>datoid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* ssup may use SysCache */</comment>
	<if_stmt><if>if <condition>(<expr><name>MyDatabaseId</name> <operator>==</operator> <name><name>opclass</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>common</name><operator>.</operator><name>datoid</name></name> <operator>&amp;&amp;</operator>
		<call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>opclass</name><operator>-&gt;</operator><name>ssupOid</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>SortSupportData</name></type> <name>ssup</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>FmgrInfo</name></type>	<name>finfo</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>finfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FmgrInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ssup</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ssup</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ssup</name><operator>.</operator><name>ssup_cxt</name></name> <operator>=</operator> <name>descrCxt</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ssup</name><operator>.</operator><name>ssup_collation</name></name> <operator>=</operator> <name>collation</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ssup</name><operator>.</operator><name>abbreviate</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>o_proc_cache_fill_finfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>finfo</name></expr></argument>, <argument><expr><name><name>opclass</name><operator>-&gt;</operator><name>ssupOid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>FunctionCall1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>finfo</name></expr></argument>, <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ssup</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>ssup</name><operator>.</operator><name>comparator</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>comparator</name><operator>.</operator><name>haveSortSupport</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>comparator</name><operator>.</operator><name>ssup_cxt</name></name> <operator>=</operator> <name><name>ssup</name><operator>.</operator><name>ssup_cxt</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>comparator</name><operator>.</operator><name>ssup_extra</name></name> <operator>=</operator> <name><name>ssup</name><operator>.</operator><name>ssup_extra</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>comparator</name><operator>.</operator><name>ssup_comparator</name></name> <operator>=</operator> <name><name>ssup</name><operator>.</operator><name>comparator</name></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Finally, look for plain comparison function.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>comparator</name><operator>.</operator><name>haveSortSupport</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>o_proc_cache_fill_finfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>comparator</name><operator>.</operator><name>finfo</name></name></expr></argument>, <argument><expr><name><name>opclass</name><operator>-&gt;</operator><name>cmpOid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><call><name>o_add_comparator_to_cache</name><argument_list>(<argument><expr><operator>&amp;</operator><name>comparator</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Tries to find a comparator in the cache.
 */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>OComparator</name> <modifier>*</modifier></type>
<name>o_find_cached_comparator</name><parameter_list>(<parameter><decl><type><name>OComparatorKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OComparator</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>found</name></decl>;</decl_stmt>

	<comment type="block">/* compares with previous search */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lastkey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OComparatorKey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>lastcmp</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* try to find in the cache */</comment>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name>comparatorCache</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>HASH_FIND</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lastkey</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OComparatorKey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>lastcmp</name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
		<return>return <expr><name>result</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Adds the comparator to the cache.
 */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>OComparator</name> <modifier>*</modifier></type>
<name>o_add_comparator_to_cache</name><parameter_list>(<parameter><decl><type><name>OComparator</name> <modifier>*</modifier></type><name>comparator</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OComparator</name> <modifier>*</modifier></type><name>cached</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>cached</name> <operator>=</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name>comparatorCache</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>comparator</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>HASH_ENTER</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cached</name></expr></argument>, <argument><expr><name>comparator</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OComparator</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lastkey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>comparator</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OComparatorKey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>lastcmp</name> <operator>=</operator> <name>cached</name></expr>;</expr_stmt>

	<return>return <expr><name>cached</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>o_invalidate_comparator_cache</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>opfamily</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>lefttype</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>righttype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OComparator</name> <modifier>*</modifier></type><name>comparator</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HASH_SEQ_STATUS</name></type> <name>scan_status</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OComparatorKey</name></type> <name>key</name> <init>= <expr><block>{
		<expr><operator>.</operator><name>opfamily</name> <operator>=</operator> <name>opfamily</name></expr>,
		<expr><operator>.</operator><name>lefttype</name> <operator>=</operator> <name>lefttype</name></expr>,
		<expr><operator>.</operator><name>righttype</name> <operator>=</operator> <name>righttype</name></expr>
	}</block></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>.</operator><name>opfamily</name></name> <operator>==</operator> <name><name>lastkey</name><operator>.</operator><name>opfamily</name></name> <operator>&amp;&amp;</operator>
		<name><name>key</name><operator>.</operator><name>lefttype</name></name> <operator>==</operator> <name><name>lastkey</name><operator>.</operator><name>lefttype</name></name> <operator>&amp;&amp;</operator>
		<name><name>key</name><operator>.</operator><name>righttype</name></name> <operator>==</operator> <name><name>lastkey</name><operator>.</operator><name>righttype</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>lastcmp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>hash_seq_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scan_status</name></expr></argument>, <argument><expr><name>comparatorCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>comparator</name> <operator>=</operator> <operator>(</operator><name>OComparator</name> <operator>*</operator><operator>)</operator> <call><name>hash_seq_search</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scan_status</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>.</operator><name>opfamily</name></name> <operator>==</operator> <name><name>comparator</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>opfamily</name></name> <operator>&amp;&amp;</operator>
			<name><name>key</name><operator>.</operator><name>lefttype</name></name> <operator>==</operator> <name><name>comparator</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>lefttype</name></name> <operator>&amp;&amp;</operator>
			<name><name>key</name><operator>.</operator><name>righttype</name></name> <operator>==</operator> <name><name>comparator</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>righttype</name></name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Oid</name></type>			<name>collation</name> <init>= <expr><name><name>comparator</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>collation</name></name></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>comparator</name><operator>-&gt;</operator><name>ssup_extra</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>comparator</name><operator>-&gt;</operator><name>ssup_extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name><name>key</name><operator>.</operator><name>collation</name></name> <operator>=</operator> <name>collation</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name>comparatorCache</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>HASH_REMOVE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>o_call_comparator</name><parameter_list>(<parameter><decl><type><name>OComparator</name> <modifier>*</modifier></type><name>comparator</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>right</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>comparator</name><operator>-&gt;</operator><name>haveSortSupport</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>SortSupportData</name></type> <name>ssup</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ssup</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ssup</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ssup</name><operator>.</operator><name>ssup_cxt</name></name> <operator>=</operator> <name><name>comparator</name><operator>-&gt;</operator><name>ssup_cxt</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ssup</name><operator>.</operator><name>ssup_collation</name></name> <operator>=</operator> <name><name>comparator</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>collation</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ssup</name><operator>.</operator><name>ssup_extra</name></name> <operator>=</operator> <name><name>comparator</name><operator>-&gt;</operator><name>ssup_extra</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ssup</name><operator>.</operator><name>abbreviate</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>comparator</name><operator>-&gt;</operator><name>ssup_comparator</name></name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ssup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>comparator</name><operator>-&gt;</operator><name>ssup_extra</name></name> <operator>=</operator> <name><name>ssup</name><operator>.</operator><name>ssup_extra</name></name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>Datum</name></type>		<name>cmp</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>cmp</name> <operator>=</operator> <call><name>FunctionCall2Coll</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>comparator</name><operator>-&gt;</operator><name>finfo</name></name></expr></argument>, <argument><expr><name><name>comparator</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>collation</name></name></expr></argument>,
								<argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>DatumGetInt32</name><argument_list>(<argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>o_finish_sort_support_function</name><parameter_list>(<parameter><decl><type><name>OComparator</name> <modifier>*</modifier></type><name>comparator</name></decl></parameter>, <parameter><decl><type><name>SortSupport</name></type> <name>ssup</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>comparator</name><operator>-&gt;</operator><name>haveSortSupport</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>ssup</name><operator>-&gt;</operator><name>comparator</name></name> <operator>=</operator> <name><name>comparator</name><operator>-&gt;</operator><name>ssup_comparator</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ssup</name><operator>-&gt;</operator><name>ssup_extra</name></name> <operator>=</operator> <name><name>comparator</name><operator>-&gt;</operator><name>ssup_extra</name></name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>SortShimExtra</name> <modifier>*</modifier></type><name>extra</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>extra</name> <operator>=</operator> <operator>(</operator><name>SortShimExtra</name> <operator>*</operator><operator>)</operator> <call><name>MemoryContextAlloc</name><argument_list>(<argument><expr><name><name>ssup</name><operator>-&gt;</operator><name>ssup_cxt</name></name></expr></argument>,
													 <argument><expr><call><name>SizeForSortShimExtra</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>extra</name><operator>-&gt;</operator><name>flinfo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>comparator</name><operator>-&gt;</operator><name>finfo</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FmgrInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* We can initialize the callinfo just once and re-use it */</comment>
		<expr_stmt><expr><call><name>InitFunctionCallInfoData</name><argument_list>(<argument><expr><name><name>extra</name><operator>-&gt;</operator><name>fcinfo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>extra</name><operator>-&gt;</operator><name>flinfo</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,
								 <argument><expr><name><name>ssup</name><operator>-&gt;</operator><name>ssup_collation</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>extra</name><operator>-&gt;</operator><name>fcinfo</name><operator>.</operator><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>isnull</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>extra</name><operator>-&gt;</operator><name>fcinfo</name><operator>.</operator><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>isnull</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>ssup</name><operator>-&gt;</operator><name>ssup_extra</name></name> <operator>=</operator> <name>extra</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ssup</name><operator>-&gt;</operator><name>comparator</name></name> <operator>=</operator> <name>comparison_shim</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>o_tableam_descr_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HASHCTL</name></type>		<name>ctl</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>descrCxt</name> <operator>=</operator> <call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>,
									 <argument><expr><literal type="string">"OrioleDB descriptors"</literal></expr></argument>,
									 <argument><expr><name>ALLOCSET_DEFAULT_SIZES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ctl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctl</name><operator>.</operator><name>keysize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ORelOids</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctl</name><operator>.</operator><name>entrysize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OTableDescr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctl</name><operator>.</operator><name>hcxt</name></name> <operator>=</operator> <name>descrCxt</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>oTableDescrHash</name> <operator>=</operator> <call><name>hash_create</name><argument_list>(<argument><expr><literal type="string">"OrioleDB table descriptors"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>,
								  <argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>,
								  <argument><expr><name>HASH_ELEM</name> <operator>|</operator> <name>HASH_BLOBS</name> <operator>|</operator> <name>HASH_CONTEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ctl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctl</name><operator>.</operator><name>keysize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ORelOids</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctl</name><operator>.</operator><name>entrysize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OIndexDescr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctl</name><operator>.</operator><name>hcxt</name></name> <operator>=</operator> <name>descrCxt</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>oIndexDescrHash</name> <operator>=</operator> <call><name>hash_create</name><argument_list>(<argument><expr><literal type="string">"OrioleDB index descriptors"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>,
								  <argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>,
								  <argument><expr><name>HASH_ELEM</name> <operator>|</operator> <name>HASH_BLOBS</name> <operator>|</operator> <name>HASH_CONTEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ctl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctl</name><operator>.</operator><name>keysize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OComparatorKey</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctl</name><operator>.</operator><name>entrysize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OComparator</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctl</name><operator>.</operator><name>hcxt</name></name> <operator>=</operator> <name>descrCxt</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>comparatorCache</name> <operator>=</operator> <call><name>hash_create</name><argument_list>(<argument><expr><literal type="string">"OrioleDB comparators"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>,
								  <argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>,
								  <argument><expr><name>HASH_ELEM</name> <operator>|</operator> <name>HASH_BLOBS</name> <operator>|</operator> <name>HASH_CONTEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>recreate_table_descr</name><parameter_list>(<parameter><decl><type><name>OTableDescr</name> <modifier>*</modifier></type><name>descr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTable</name>	   <modifier>*</modifier></type><name>o_table</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>old_enable_stopevents</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>refcnt</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>old_enable_stopevents</name> <operator>=</operator> <name>enable_stopevents</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>enable_stopevents</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>o_table</name> <operator>=</operator> <call><name>o_tables_get</name><argument_list>(<argument><expr><name><name>descr</name><operator>-&gt;</operator><name>oids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>o_table</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>refcnt</name> <operator>=</operator> <name><name>descr</name><operator>-&gt;</operator><name>refcnt</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>table_descr_free</name><argument_list>(<argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fill_table_descr</name><argument_list>(<argument><expr><name>descr</name></expr></argument>, <argument><expr><name>o_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>descr</name><operator>-&gt;</operator><name>refcnt</name></name> <operator>=</operator> <name>refcnt</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>enable_stopevents</name> <operator>=</operator> <name>old_enable_stopevents</name></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>recreate_table_descr_by_oids</name><parameter_list>(<parameter><decl><type><name>ORelOids</name></type> <name>oids</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTableDescr</name> <modifier>*</modifier></type><name>descr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>found</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>descr</name> <operator>=</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name>oTableDescrHash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oids</name></expr></argument>, <argument><expr><name>HASH_FIND</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>indexDescr</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>indexDescr</name> <operator>=</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name>oIndexDescrHash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oids</name></expr></argument>, <argument><expr><name>HASH_FIND</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>index_descr_delete_from_hash</name><argument_list>(<argument><expr><name>indexDescr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>recreate_table_descr</name><argument_list>(<argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>create_table_descr</name><argument_list>(<argument><expr><name>oids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>table_descr_inc_refcnt</name><parameter_list>(<parameter><decl><type><name>OTableDescr</name> <modifier>*</modifier></type><name>descr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>descr</name><operator>-&gt;</operator><name>refcnt</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>table_descr_dec_refcnt</name><parameter_list>(<parameter><decl><type><name>OTableDescr</name> <modifier>*</modifier></type><name>descr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>descr</name><operator>-&gt;</operator><name>refcnt</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>descr</name><operator>-&gt;</operator><name>refcnt</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>orioledb_get_table_descrs</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ReturnSetInfo</name> <modifier>*</modifier></type><name>rsinfo</name> <init>= <expr><operator>(</operator><name>ReturnSetInfo</name> <operator>*</operator><operator>)</operator> <name><name>fcinfo</name><operator>-&gt;</operator><name>resultinfo</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>tupdesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Tuplestorestate</name> <modifier>*</modifier></type><name>tupstore</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>per_query_ctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HASH_SEQ_STATUS</name></type> <name>scan_status</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTableDescr</name> <modifier>*</modifier></type><name>tableDescr</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>per_query_ctx</name> <operator>=</operator> <name><name>rsinfo</name><operator>-&gt;</operator><name>econtext</name><operator>-&gt;</operator><name>ecxt_per_query_memory</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>per_query_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Build a tuple descriptor for our result type */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>get_call_result_type</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tupdesc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TYPEFUNC_COMPOSITE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"return type must be a row type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>tupstore</name> <operator>=</operator> <call><name>tuplestore_begin_heap</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>work_mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rsinfo</name><operator>-&gt;</operator><name>returnMode</name></name> <operator>=</operator> <name>SFRM_Materialize</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rsinfo</name><operator>-&gt;</operator><name>setResult</name></name> <operator>=</operator> <name>tupstore</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rsinfo</name><operator>-&gt;</operator><name>setDesc</name></name> <operator>=</operator> <name>tupdesc</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>hash_seq_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scan_status</name></expr></argument>, <argument><expr><name>oTableDescrHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>tableDescr</name> <operator>=</operator> <operator>(</operator><name>OTableDescr</name> <operator>*</operator><operator>)</operator> <call><name>hash_seq_search</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scan_status</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Datum</name></type>		<name><name>values</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name><name>nulls</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><name>false</name></expr>}</block></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>tableDescr</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>datoid</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>tableDescr</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>reloid</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>tableDescr</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>relnode</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>tableDescr</name><operator>-&gt;</operator><name>refcnt</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>tuplestore_putvalues</name><argument_list>(<argument><expr><name>tupstore</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>tuplestore_donestoring</name><argument_list>(<argument><expr><name>tupstore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>orioledb_get_index_descrs</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ReturnSetInfo</name> <modifier>*</modifier></type><name>rsinfo</name> <init>= <expr><operator>(</operator><name>ReturnSetInfo</name> <operator>*</operator><operator>)</operator> <name><name>fcinfo</name><operator>-&gt;</operator><name>resultinfo</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>tupdesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Tuplestorestate</name> <modifier>*</modifier></type><name>tupstore</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>per_query_ctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HASH_SEQ_STATUS</name></type> <name>scan_status</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>indexDescr</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>per_query_ctx</name> <operator>=</operator> <name><name>rsinfo</name><operator>-&gt;</operator><name>econtext</name><operator>-&gt;</operator><name>ecxt_per_query_memory</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>per_query_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Build a tuple descriptor for our result type */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>get_call_result_type</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tupdesc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TYPEFUNC_COMPOSITE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"return type must be a row type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>tupstore</name> <operator>=</operator> <call><name>tuplestore_begin_heap</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>work_mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rsinfo</name><operator>-&gt;</operator><name>returnMode</name></name> <operator>=</operator> <name>SFRM_Materialize</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rsinfo</name><operator>-&gt;</operator><name>setResult</name></name> <operator>=</operator> <name>tupstore</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rsinfo</name><operator>-&gt;</operator><name>setDesc</name></name> <operator>=</operator> <name>tupdesc</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>hash_seq_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scan_status</name></expr></argument>, <argument><expr><name>oIndexDescrHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>indexDescr</name> <operator>=</operator> <operator>(</operator><name>OIndexDescr</name> <operator>*</operator><operator>)</operator> <call><name>hash_seq_search</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scan_status</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Datum</name></type>		<name><name>values</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name><name>nulls</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><name>false</name></expr>}</block></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>indexDescr</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>datoid</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>indexDescr</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>reloid</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>indexDescr</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>relnode</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>indexDescr</name><operator>-&gt;</operator><name>refcnt</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>tuplestore_putvalues</name><argument_list>(<argument><expr><name>tupstore</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>tuplestore_donestoring</name><argument_list>(<argument><expr><name>tupstore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>o_invalidate_undo_item_callback</name><parameter_list>(<parameter><decl><type><name>UndoLocation</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>UndoStackItem</name> <modifier>*</modifier></type><name>baseItem</name></decl></parameter>,
								<parameter><decl><type><name>OXid</name></type> <name>oxid</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>abort</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>changeCountsValid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>InvalidateUndoStackItem</name> <modifier>*</modifier></type><name>invalidateItem</name> <init>= <expr><operator>(</operator><name>InvalidateUndoStackItem</name> <operator>*</operator><operator>)</operator> <name>baseItem</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>abort</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>invalidateItem</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>O_INVALIDATE_OIDS_ON_ABORT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>abort</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>invalidateItem</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>O_INVALIDATE_OIDS_ON_COMMIT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>o_invalidate_oids</name><argument_list>(<argument><expr><name><name>invalidateItem</name><operator>-&gt;</operator><name>oids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>o_add_invalidate_undo_item</name><parameter_list>(<parameter><decl><type><name>ORelOids</name></type> <name>oids</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>UndoLocation</name></type> <name>location</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>InvalidateUndoStackItem</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LocationIndex</name></type> <name>size</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>InvalidateUndoStackItem</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name>item</name> <operator>=</operator> <operator>(</operator><name>InvalidateUndoStackItem</name> <operator>*</operator><operator>)</operator> <call><name>get_undo_record_unreserved</name><argument_list>(<argument><expr><name>UndoReserveTxn</name></expr></argument>,
																  <argument><expr><operator>&amp;</operator><name>location</name></expr></argument>,
																  <argument><expr><call><name>MAXALIGN</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>oids</name></name> <operator>=</operator> <name>oids</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>base</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>InvalidateUndoItemType</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>base</name><operator>.</operator><name>indexType</name></name> <operator>=</operator> <name>oIndexPrimary</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>base</name><operator>.</operator><name>itemSize</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>add_new_undo_stack_item</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>release_undo_size</name><argument_list>(<argument><expr><name>UndoReserveTxn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
