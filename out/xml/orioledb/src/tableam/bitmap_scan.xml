<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/orioledb/src/tableam/bitmap_scan.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * bitmap_scan.c
 *		Routines for bitmap scan of orioledb table
 *
 * Copyright (c) 2021-2022, Oriole DB Inc.
 *
 * IDENTIFICATION
 *	  contrib/orioledb/src/tableam/bitmap_scan.c
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"orioledb.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"btree/io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"btree/iterator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"btree/page_chunks.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tableam/bitmap_scan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tableam/index_scan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tuple/slot.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/relation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/table.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib/rbtree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/execnodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>OBitmapScan</name>
<block>{
	<decl_stmt><decl><type><name>OTableDescr</name> <modifier>*</modifier></type><name>tbl_desc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ScanState</name>  <modifier>*</modifier></type><name>ss</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CommitSeqNo</name></type> <name>csn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>cxt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RBTree</name>	   <modifier>*</modifier></type><name>saved_bitmap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>typeoid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BTreeSeqScan</name> <modifier>*</modifier></type><name>seq_scan</name></decl>;</decl_stmt>
}</block></struct></type> <name>OBitmapScan</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>o_bitmap_is_range_valid</name><parameter_list>(<parameter><decl><type><name>OTuple</name></type> <name>low</name></decl></parameter>, <parameter><decl><type><name>OTuple</name></type> <name>high</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>o_bitmap_get_next_key</name><parameter_list>(<parameter><decl><type><name>OFixedKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>inclusive</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>BTreeSeqScanCallbacks</name></type> <name>bitmap_seq_scan_callbacks</name> <init>= <expr><block>{
	<expr><operator>.</operator><name>isRangeValid</name> <operator>=</operator> <name>o_bitmap_is_range_valid</name></expr>,
	<expr><operator>.</operator><name>getNextKey</name> <operator>=</operator> <name>o_bitmap_get_next_key</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT64_HIGH_BIT</name></cpp:macro> <cpp:value>(UINT64CONST(1) &lt;&lt; 63)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>uint64</name></type>
<name>int64_to_uint64</name><parameter_list>(<parameter><decl><type><name>int64</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>uint64</name><operator>)</operator> <name>val</name> <operator>|</operator> <name>UINT64_HIGH_BIT</name></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><name>UINT64_HIGH_BIT</name> <operator>-</operator> <operator>(</operator><name>uint64</name><operator>)</operator> <operator>(</operator><operator>-</operator><name>val</name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64</name></type>
<name>uint64_to_int64</name><parameter_list>(<parameter><decl><type><name>uint64</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&amp;</operator> <name>UINT64_HIGH_BIT</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>val</name> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><name>UINT64_HIGH_BIT</name><operator>)</operator></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><operator>(</operator><name>int64</name><operator>)</operator> <operator>(</operator><name>UINT64_HIGH_BIT</name> <operator>-</operator> <name>val</name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64</name></type>
<name>val_get_uint64</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>typeoid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ItemPointer</name></type> <name>iptr</name></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name>typeoid</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>INT4OID</name></expr>:</case>
			<return>return <expr><call><name>int64_to_uint64</name><argument_list>(<argument><expr><call><name>DatumGetInt32</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		<case>case <expr><name>INT8OID</name></expr>:</case>
			<return>return <expr><call><name>int64_to_uint64</name><argument_list>(<argument><expr><call><name>DatumGetInt64</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		<case>case <expr><name>TIDOID</name></expr>:</case>
			<expr_stmt><expr><name>iptr</name> <operator>=</operator> <call><name>DatumGetItemPointer</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><call><name>ItemPointerGetBlockNumberNoCheck</name><argument_list>(<argument><expr><name>iptr</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator>
				<call><name>ItemPointerGetOffsetNumberNoCheck</name><argument_list>(<argument><expr><name>iptr</name></expr></argument>)</argument_list></call></expr>;</return>
		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported keybitmap type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>uint64_get_val</name><parameter_list>(<parameter><decl><type><name>uint64</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>typeoid</name></decl></parameter>, <parameter><decl><type><name>Pointer</name></type> <name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ItemPointer</name></type> <name>iptr</name></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name>typeoid</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>INT4OID</name></expr>:</case>
			<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int32</name> <operator>*</operator><operator>)</operator> <name>ptr</name><operator>)</operator> <operator>=</operator> <call><name>uint64_to_int64</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>INT8OID</name></expr>:</case>
			<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int64</name> <operator>*</operator><operator>)</operator> <name>ptr</name><operator>)</operator> <operator>=</operator> <call><name>uint64_to_int64</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>TIDOID</name></expr>:</case>
			<expr_stmt><expr><name>iptr</name> <operator>=</operator> <operator>(</operator><name>ItemPointer</name><operator>)</operator> <name>ptr</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ItemPointerSetBlockNumber</name><argument_list>(<argument><expr><name>iptr</name></expr></argument>, <argument><expr><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ItemPointerSetOffsetNumber</name><argument_list>(<argument><expr><name>iptr</name></expr></argument>, <argument><expr><name>val</name> <operator>&amp;</operator> <literal type="number">0xFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported keybitmap type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64</name></type>
<name>seconary_tuple_get_pk_data</name><parameter_list>(<parameter><decl><type><name>OTuple</name></type> <name>tuple</name></decl></parameter>, <parameter><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>ix_descr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AttrNumber</name></type>	<name>attnum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FormData_pg_attribute</name> <modifier>*</modifier></type><name>attr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>val</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>ix_descr</name><operator>-&gt;</operator><name>nPrimaryFields</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>O_TUPLE_IS_NULL</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>attnum</name> <operator>=</operator> <name><name>ix_descr</name><operator>-&gt;</operator><name>primaryFieldsAttnums</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>attr</name> <operator>=</operator> <operator>&amp;</operator><name><name>ix_descr</name><operator>-&gt;</operator><name>leafTupdesc</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name>attnum</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>o_toast_nocachegetattr</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>attnum</name></expr></argument>, <argument><expr><name><name>ix_descr</name><operator>-&gt;</operator><name>leafTupdesc</name></name></expr></argument>,
								 <argument><expr><operator>&amp;</operator><name><name>ix_descr</name><operator>-&gt;</operator><name>leafSpec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>val_get_uint64</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>atttypid</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64</name></type>
<name>primary_tuple_get_data</name><parameter_list>(<parameter><decl><type><name>OTuple</name></type> <name>tuple</name></decl></parameter>, <parameter><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>primary</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>onlyPkey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AttrNumber</name></type>	<name>attnum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FormData_pg_attribute</name> <modifier>*</modifier></type><name>attr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>val</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>primary</name><operator>-&gt;</operator><name>nFields</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>O_TUPLE_IS_NULL</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>attnum</name> <operator>=</operator> <name><name>primary</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>tableAttnum</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>attr</name> <operator>=</operator> <operator>&amp;</operator><name><name>primary</name><operator>-&gt;</operator><name>leafTupdesc</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name>attnum</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>onlyPkey</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>attnum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>o_toast_nocachegetattr</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>attnum</name></expr></argument>, <argument><expr><name><name>primary</name><operator>-&gt;</operator><name>leafTupdesc</name></name></expr></argument>,
								 <argument><expr><operator>&amp;</operator><name><name>primary</name><operator>-&gt;</operator><name>leafSpec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>val_get_uint64</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>atttypid</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type>
<name>o_index_getbitmap</name><parameter_list>(<parameter><decl><type><name>OBitmapHeapPlanState</name> <modifier>*</modifier></type><name>bitmap_state</name></decl></parameter>,
				  <parameter><decl><type><name>BitmapIndexScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>RBTree</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OScanState</name></type>	<name>ostate</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTableDescr</name> <modifier>*</modifier></type><name>descr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>indexDescr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OIndexNumber</name></type> <name>ix_num</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Relation</name></type>	<name>index</name></decl>,
				<decl><type ref="prev"/><name>table</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BitmapIndexScan</name> <modifier>*</modifier></type><name>bitmap_ix_scan</name> <init>= <expr><operator>(</operator><operator>(</operator><name>BitmapIndexScan</name> <operator>*</operator><operator>)</operator> <name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>plan</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTuple</name></type>		<name>tuple</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ExprContext</name> <modifier>*</modifier></type><name>econtext</name> <init>= <expr><name><name>bitmap_state</name><operator>-&gt;</operator><name>scan</name><operator>-&gt;</operator><name>ss</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>ps_ExprContext</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>mcxt</name> <init>= <expr><name><name>bitmap_state</name><operator>-&gt;</operator><name>scan</name><operator>-&gt;</operator><name>ss</name><operator>-&gt;</operator><name>ss_ScanTupleSlot</name><operator>-&gt;</operator><name>tts_mcxt</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type>		<name>nTuples</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OEACallsCounters</name> <modifier>*</modifier></type><name>prev_ea_counters</name> <init>= <expr><name>ea_counters</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>index_open</name><argument_list>(<argument><expr><name><name>bitmap_ix_scan</name><operator>-&gt;</operator><name>indexid</name></name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>table</name> <operator>=</operator> <call><name>table_open</name><argument_list>(<argument><expr><name><name>index</name><operator>-&gt;</operator><name>rd_index</name><operator>-&gt;</operator><name>indrelid</name></name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>descr</name> <operator>=</operator> <call><name>relation_get_descr</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>relation_close</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>ix_num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ix_num</name> <operator>&lt;</operator> <name><name>descr</name><operator>-&gt;</operator><name>nIndices</name></name></expr>;</condition> <incr><expr><name>ix_num</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>indexDescr</name> <operator>=</operator> <name><name>descr</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>ix_num</name></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>indexDescr</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>reloid</name></name> <operator>==</operator> <name><name>bitmap_ix_scan</name><operator>-&gt;</operator><name>indexid</name></name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>ix_num</name> <operator>&lt;</operator> <name><name>descr</name><operator>-&gt;</operator><name>nIndices</name></name> <operator>&amp;&amp;</operator> <name>indexDescr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ostate</name><operator>.</operator><name>ixNum</name></name> <operator>=</operator> <name>ix_num</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ostate</name><operator>.</operator><name>scanDir</name></name> <operator>=</operator> <name>ForwardScanDirection</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ostate</name><operator>.</operator><name>indexQuals</name></name> <operator>=</operator> <name><name>bitmap_ix_scan</name><operator>-&gt;</operator><name>indexqual</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ResetExprContext</name><argument_list>(<argument><expr><name>econtext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>init_index_scan_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ostate</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>econtext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>relation_close</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>is_explain_analyze</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>ea_counters</name> <operator>=</operator> <operator>&amp;</operator><name><name>bitmap_state</name><operator>-&gt;</operator><name>eaCounters</name><index>[<expr><name>ix_num</name></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>ea_counters</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name><name>ostate</name><operator>.</operator><name>csn</name></name> <operator>=</operator> <name><name>bitmap_state</name><operator>-&gt;</operator><name>csn</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ostate</name><operator>.</operator><name>onlyCurIx</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ostate</name><operator>.</operator><name>cxt</name></name> <operator>=</operator> <name><name>bitmap_state</name><operator>-&gt;</operator><name>cxt</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ostate</name><operator>.</operator><name>curKeyRangeIsLoaded</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ostate</name><operator>.</operator><name>curKeyRange</name><operator>.</operator><name>empty</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>o_btree_load_shmem</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>indexDescr</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<do>do
	<block>{<block_content>
		<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>o_iterate_index</name><argument_list>(<argument><expr><name>indexDescr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ostate</name></expr></argument>, <argument><expr><name><name>bitmap_state</name><operator>-&gt;</operator><name>csn</name></name></expr></argument>,
								<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>mcxt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>O_TUPLE_IS_NULL</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>uint64</name></type>		<name>data</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>seconary_tuple_get_pk_data</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>indexDescr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>o_keybitmap_insert</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>nTuples</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block> while <condition>(<expr><operator>!</operator><call><name>O_TUPLE_IS_NULL</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

	<if_stmt><if>if <condition>(<expr><name><name>ostate</name><operator>.</operator><name>iterator</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>btree_iterator_free</name><argument_list>(<argument><expr><name><name>ostate</name><operator>.</operator><name>iterator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>MemoryContextReset</name><argument_list>(<argument><expr><name><name>ostate</name><operator>.</operator><name>cxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ea_counters</name> <operator>=</operator> <name>prev_ea_counters</name></expr>;</expr_stmt>
	<return>return <expr><name>nTuples</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RBTree</name> <modifier>*</modifier></type>
<name>o_exec_bitmapqual</name><parameter_list>(<parameter><decl><type><name>OBitmapHeapPlanState</name> <modifier>*</modifier></type><name>bitmap_state</name></decl></parameter>, <parameter><decl><type><name>PlanState</name> <modifier>*</modifier></type><name>planstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RBTree</name>	   <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><call><name>nodeTag</name><argument_list>(<argument><expr><name>planstate</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>T_BitmapAndState</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>BitmapAndState</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>BitmapAndState</name> <operator>*</operator><operator>)</operator> <name>planstate</name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Instrumentation</name> <modifier>*</modifier></type><name>instrument</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>instrument</name></name></expr></init></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><name>instrument</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>InstrStartNode</name><argument_list>(<argument><expr><name>instrument</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>nplans</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
				<block>{<block_content>
					<decl_stmt><decl><type><name>PlanState</name>  <modifier>*</modifier></type><name>subnode</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>bitmapplans</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>RBTree</name>	   <modifier>*</modifier></type><name>subresult</name> <init>= <expr><call><name>o_exec_bitmapqual</name><argument_list>(<argument><expr><name>bitmap_state</name></expr></argument>,
															  <argument><expr><name>subnode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

					<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>result</name> <operator>=</operator> <name>subresult</name></expr>;</expr_stmt></block_content></block></if> <comment type="block">/* first subplan */</comment>
					<else>else
					<block>{<block_content>
						<expr_stmt><expr><call><name>o_keybitmap_intersect</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>subresult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>o_keybitmap_free</name><argument_list>(<argument><expr><name>subresult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></else></if_stmt>

					<comment type="block">/*
					 * If at any stage we have a completely empty bitmap, we
					 * can fall out without evaluating the remaining subplans,
					 * since ANDing them can no longer change the result.
					 * (Note: the fact that indxpath.c orders the subplans by
					 * selectivity should make this case more likely to
					 * occur.)
					 */</comment>
					<if_stmt><if>if <condition>(<expr><call><name>o_keybitmap_is_empty</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
						<break>break;</break></block_content></block></if></if_stmt>
				</block_content>}</block></for>
				<if_stmt><if>if <condition>(<expr><name>instrument</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>InstrStopNode</name><argument_list>(<argument><expr><name>instrument</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<break>break;</break>
			</block_content>}</block>
		<case>case <expr><name>T_BitmapOrState</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>BitmapOrState</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>BitmapOrState</name> <operator>*</operator><operator>)</operator> <name>planstate</name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Instrumentation</name> <modifier>*</modifier></type><name>instrument</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>instrument</name></name></expr></init></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><name>instrument</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>InstrStartNode</name><argument_list>(<argument><expr><name>instrument</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>nplans</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
				<block>{<block_content>
					<decl_stmt><decl><type><name>PlanState</name>  <modifier>*</modifier></type><name>subnode</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>bitmapplans</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>RBTree</name>	   <modifier>*</modifier></type><name>subresult</name></decl>;</decl_stmt>

					<if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>subnode</name></expr></argument>, <argument><expr><name>BitmapIndexScanState</name></expr></argument>)</argument_list></call></expr>)</condition>
					<block>{<block_content>
						<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <comment type="block">/* first subplan */</comment>
						<block>{<block_content>
							<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>o_keybitmap_create</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
						</block_content>}</block></if></if_stmt>

						<expr_stmt><expr><name><name>bitmap_state</name><operator>-&gt;</operator><name>scan</name><operator>-&gt;</operator><name>saved_bitmap</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
						<expr_stmt><expr><name>subresult</name> <operator>=</operator> <call><name>o_exec_bitmapqual</name><argument_list>(<argument><expr><name>bitmap_state</name></expr></argument>, <argument><expr><name>subnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>result</name> <operator>==</operator> <name>subresult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if>
					<else>else
					<block>{<block_content>
						<comment type="block">/* standard implementation */</comment>
						<expr_stmt><expr><name>subresult</name> <operator>=</operator> <call><name>o_exec_bitmapqual</name><argument_list>(<argument><expr><name>bitmap_state</name></expr></argument>, <argument><expr><name>subnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><name>result</name> <operator>=</operator> <name>subresult</name></expr>;</expr_stmt></block_content></block></if> <comment type="block">/* first subplan */</comment>
						<else>else
						<block>{<block_content>
							<expr_stmt><expr><call><name>o_keybitmap_union</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>subresult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name>o_keybitmap_free</name><argument_list>(<argument><expr><name>subresult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						</block_content>}</block></else></if_stmt>
					</block_content>}</block></else></if_stmt>
				</block_content>}</block></for>
				<if_stmt><if>if <condition>(<expr><name>instrument</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>InstrStopNode</name><argument_list>(<argument><expr><name>instrument</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<break>break;</break>
			</block_content>}</block>
		<case>case <expr><name>T_BitmapIndexScanState</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>double</name></type>		<name>nTuples</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>BitmapIndexScanState</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Instrumentation</name> <modifier>*</modifier></type><name>instrument</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>node</name> <operator>=</operator> <operator>(</operator><name>BitmapIndexScanState</name> <operator>*</operator><operator>)</operator> <name>planstate</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>instrument</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>instrument</name></name></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><name>instrument</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>InstrStartNode</name><argument_list>(<argument><expr><name>instrument</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><name><name>bitmap_state</name><operator>-&gt;</operator><name>scan</name><operator>-&gt;</operator><name>saved_bitmap</name></name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>bitmap_state</name><operator>-&gt;</operator><name>scan</name><operator>-&gt;</operator><name>saved_bitmap</name></name></expr>;</expr_stmt>
					<comment type="block">/* reset for next time */</comment>
					<expr_stmt><expr><name><name>bitmap_state</name><operator>-&gt;</operator><name>scan</name><operator>-&gt;</operator><name>saved_bitmap</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>o_keybitmap_create</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>

				<expr_stmt><expr><name>nTuples</name> <operator>=</operator> <call><name>o_index_getbitmap</name><argument_list>(<argument><expr><name>bitmap_state</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>instrument</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>InstrStopNode</name><argument_list>(<argument><expr><name>instrument</name></expr></argument>, <argument><expr><name>nTuples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<break>break;</break>
			</block_content>}</block>
		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s: unrecognized node type: %d"</literal></expr></argument>,
				 <argument><expr><name>PG_FUNCNAME_MACRO</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>nodeTag</name><argument_list>(<argument><expr><name>planstate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>OBitmapScan</name> <modifier>*</modifier></type>
<name>o_make_bitmap_scan</name><parameter_list>(<parameter><decl><type><name>OBitmapHeapPlanState</name> <modifier>*</modifier></type><name>bitmap_state</name></decl></parameter>, <parameter><decl><type><name>ScanState</name> <modifier>*</modifier></type><name>ss</name></decl></parameter>,
				   <parameter><decl><type><name>PlanState</name> <modifier>*</modifier></type><name>bitmapqualplanstate</name></decl></parameter>, <parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>,
				   <parameter><decl><type><name>Oid</name></type> <name>typeoid</name></decl></parameter>, <parameter><decl><type><name>CommitSeqNo</name></type> <name>csn</name></decl></parameter>,
				   <parameter><decl><type><name>MemoryContext</name></type> <name>cxt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OBitmapScan</name> <modifier>*</modifier></type><name>scan</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OBitmapScan</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>primary</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>scan</name><operator>-&gt;</operator><name>typeoid</name></name> <operator>=</operator> <name>typeoid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>scan</name><operator>-&gt;</operator><name>csn</name></name> <operator>=</operator> <name>csn</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>scan</name><operator>-&gt;</operator><name>cxt</name></name> <operator>=</operator> <name>cxt</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>scan</name><operator>-&gt;</operator><name>ss</name></name> <operator>=</operator> <name>ss</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>scan</name><operator>-&gt;</operator><name>tbl_desc</name></name> <operator>=</operator> <call><name>relation_get_descr</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bitmap_state</name><operator>-&gt;</operator><name>scan</name></name> <operator>=</operator> <name>scan</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>scan</name><operator>-&gt;</operator><name>saved_bitmap</name></name> <operator>=</operator> <call><name>o_exec_bitmapqual</name><argument_list>(<argument><expr><name>bitmap_state</name></expr></argument>, <argument><expr><name>bitmapqualplanstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>primary</name> <operator>=</operator> <operator>&amp;</operator><call><name>GET_PRIMARY</name><argument_list>(<argument><expr><name><name>scan</name><operator>-&gt;</operator><name>tbl_desc</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>desc</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>o_btree_load_shmem</name><argument_list>(<argument><expr><name>primary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>scan</name><operator>-&gt;</operator><name>seq_scan</name></name> <operator>=</operator> <call><name>make_btree_seq_scan_cb</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><name><name>scan</name><operator>-&gt;</operator><name>csn</name></name></expr></argument>,
											<argument><expr><operator>&amp;</operator><name>bitmap_seq_scan_callbacks</name></expr></argument>, <argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>scan</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>TupleTableSlot</name> <modifier>*</modifier></type>
<name>o_exec_bitmap_fetch</name><parameter_list>(<parameter><decl><type><name>OBitmapScan</name> <modifier>*</modifier></type><name>scan</name></decl></parameter>, <parameter><decl><type><name>CustomScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>valid</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<do>do
	<block>{<block_content>
		<decl_stmt><decl><type><name>OTuple</name></type>		<name>tuple</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>BTreeLocationHint</name></type> <name>hint</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>MemoryContext</name></type> <name>tupleCxt</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ss_ScanTupleSlot</name><operator>-&gt;</operator><name>tts_mcxt</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>CommitSeqNo</name></type> <name>tupleCsn</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>btree_seq_scan_getnext</name><argument_list>(<argument><expr><name><name>scan</name><operator>-&gt;</operator><name>seq_scan</name></name></expr></argument>, <argument><expr><name>tupleCxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tupleCsn</name></expr></argument>,
									   <argument><expr><operator>&amp;</operator><name>hint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>O_TUPLE_IS_NULL</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>slot</name> <operator>=</operator> <call><name>ExecClearTuple</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ss_ScanTupleSlot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>valid</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>OTableDescr</name> <modifier>*</modifier></type><name>descr</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>uint64</name></type>		<name>value</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>descr</name> <operator>=</operator> <call><name>relation_get_descr</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ss_currentRelation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>primary_tuple_get_data</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><call><name>GET_PRIMARY</name><argument_list>(<argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>o_keybitmap_test</name><argument_list>(<argument><expr><name><name>scan</name><operator>-&gt;</operator><name>saved_bitmap</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>scan_slot</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcxt</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>slot</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ss_ScanTupleSlot</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>oldcxt</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_mcxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>scan_slot</name> <operator>=</operator> <call><name>MakeSingleTupleTableSlot</name><argument_list>(<argument><expr><name><name>descr</name><operator>-&gt;</operator><name>tupdesc</name></name></expr></argument>,
													 <argument><expr><operator>&amp;</operator><name>TTSOpsOrioleDB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>tts_orioledb_store_tuple</name><argument_list>(<argument><expr><name>scan_slot</name></expr></argument>, <argument><expr><name>tuple</name></expr></argument>,
										 <argument><expr><name>descr</name></expr></argument>, <argument><expr><name>tupleCsn</name></expr></argument>,
										 <argument><expr><name>PrimaryIndexNumber</name></expr></argument>,
										 <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>slot</name> <operator>=</operator> <name>scan_slot</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>valid</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>valid</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>InstrCountFiltered2</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>TupIsNull</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>o_exec_qual</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>ps_ExprContext</name></name></expr></argument>,
												  <argument><expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>qual</name></name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>InstrCountFiltered1</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	</block_content>}</block> while <condition>(<expr><operator>!</operator><name>valid</name> <operator>||</operator> <operator>(</operator><operator>!</operator><call><name>TupIsNull</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
						<operator>!</operator><call><name>o_exec_qual</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>ps_ExprContext</name></name></expr></argument>,
									 <argument><expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>qual</name></name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>;</do>
	<return>return <expr><name>slot</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>o_free_bitmap_scan</name><parameter_list>(<parameter><decl><type><name>OBitmapScan</name> <modifier>*</modifier></type><name>scan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>free_btree_seq_scan</name><argument_list>(<argument><expr><name><name>scan</name><operator>-&gt;</operator><name>seq_scan</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>o_keybitmap_free</name><argument_list>(<argument><expr><name><name>scan</name><operator>-&gt;</operator><name>saved_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>o_bitmap_is_range_valid</name><parameter_list>(<parameter><decl><type><name>OTuple</name></type> <name>low</name></decl></parameter>, <parameter><decl><type><name>OTuple</name></type> <name>high</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OBitmapScan</name> <modifier>*</modifier></type><name>bitmap_scan</name> <init>= <expr><operator>(</operator><name>OBitmapScan</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>primary</name> <init>= <expr><call><name>GET_PRIMARY</name><argument_list>(<argument><expr><name><name>bitmap_scan</name><operator>-&gt;</operator><name>tbl_desc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type>		<name>lowValue</name></decl>,
				<decl><type ref="prev"/><name>highValue</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>O_TUPLE_IS_NULL</name><argument_list>(<argument><expr><name>low</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>lowValue</name> <operator>=</operator> <call><name>primary_tuple_get_data</name><argument_list>(<argument><expr><name>low</name></expr></argument>, <argument><expr><name>primary</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>lowValue</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>O_TUPLE_IS_NULL</name><argument_list>(<argument><expr><name>high</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>highValue</name> <operator>=</operator> <call><name>primary_tuple_get_data</name><argument_list>(<argument><expr><name>high</name></expr></argument>, <argument><expr><name>primary</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>highValue</name> <operator>=</operator> <name>UINT64_MAX</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><call><name>o_keybitmap_range_is_valid</name><argument_list>(<argument><expr><name><name>bitmap_scan</name><operator>-&gt;</operator><name>saved_bitmap</name></name></expr></argument>,
									  <argument><expr><name>lowValue</name></expr></argument>, <argument><expr><name>highValue</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>o_bitmap_get_next_key</name><parameter_list>(<parameter><decl><type><name>OFixedKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>inclusive</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OBitmapScan</name> <modifier>*</modifier></type><name>bitmap_scan</name> <init>= <expr><operator>(</operator><name>OBitmapScan</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>found</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type>		<name>prev_value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type>		<name>res_value</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTupleHeader</name></type> <name>tuphdr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>primary</name> <init>= <expr><call><name>GET_PRIMARY</name><argument_list>(<argument><expr><name><name>bitmap_scan</name><operator>-&gt;</operator><name>tbl_desc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>O_TUPLE_IS_NULL</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>tuple</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>prev_value</name> <operator>=</operator> <call><name>primary_tuple_get_data</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>tuple</name></name></expr></argument>, <argument><expr><name>primary</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>inclusive</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>prev_value</name> <operator>==</operator> <name>UINT64_MAX</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>prev_value</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>res_value</name> <operator>=</operator> <call><name>o_keybitmap_get_next</name><argument_list>(<argument><expr><name><name>bitmap_scan</name><operator>-&gt;</operator><name>saved_bitmap</name></name></expr></argument>, <argument><expr><name>prev_value</name></expr></argument>,
									 <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>FormData_pg_attribute</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><call><name>TupleDescAttr</name><argument_list>(<argument><expr><name><name>primary</name><operator>-&gt;</operator><name>nonLeafTupdesc</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>primary</name><operator>-&gt;</operator><name>nFields</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>tuphdr</name> <operator>=</operator> <operator>(</operator><name>OTupleHeader</name><operator>)</operator> <name><name>key</name><operator>-&gt;</operator><name>fixedData</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tuphdr</name><operator>-&gt;</operator><name>hasnulls</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tuphdr</name><operator>-&gt;</operator><name>natts</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tuphdr</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>SizeOfOTupleHeader</name> <operator>+</operator> <name><name>attr</name><operator>-&gt;</operator><name>attlen</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>uint64_get_val</name><argument_list>(<argument><expr><name>res_value</name></expr></argument>,
					   <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>atttypid</name></name></expr></argument>,
					   <argument><expr><operator>&amp;</operator><name><name>key</name><operator>-&gt;</operator><name>fixedData</name><index>[<expr><name>SizeOfOTupleHeader</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>tuple</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>fixedData</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>tuple</name><operator>.</operator><name>formatFlags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>O_TUPLE_SET_NULL</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>tuple</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>found</name></expr>;</return>
</block_content>}</block></function>
</unit>
