<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/orioledb/src/tableam/scan.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * scan.c
 *		Scan Provider for orioledb tables.
 *
 * Copyright (c) 2021-2022, Oriole DB Inc.
 *
 * IDENTIFICATION
 *	  contrib/orioledb/src/tableam/scan.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"orioledb.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"btree/iterator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"btree/scan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"recovery/recovery.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tableam/bitmap_scan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tableam/descr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tableam/handler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tableam/index_scan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tableam/scan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tuple/slot.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/stopevent.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/relation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/table.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/hashfn.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/nodeModifyTable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/nodeFuncs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/cost.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/optimizer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/restrictinfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/plancat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/planmain.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/parsetree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/json.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/rel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/snapmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/spccache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><enum>enum <name>OPathTag</name>
<block>{
	<decl><name>O_IndexPath</name></decl>,
	<decl><name>O_BitmapHeapPath</name></decl>,
}</block></enum></type> <name>OPathTag</name>;</typedef>

<typedef>typedef <type><struct>struct <name>OPath</name>
<block>{
	<decl_stmt><decl><type><name>OPathTag</name></type>	<name>type</name></decl>;</decl_stmt>
}</block></struct></type> <name>OPath</name>;</typedef>

<typedef>typedef <type><struct>struct <name>OIndexPath</name>
<block>{
	<decl_stmt><decl><type><name>OPath</name></type>		<name>o_path</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ScanDirection</name></type> <name>scandir</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OIndexNumber</name></type> <name>ix_num</name></decl>;</decl_stmt>
}</block></struct></type> <name>OIndexPath</name>;</typedef>

<typedef>typedef <type><struct>struct <name>OBitmapHeapPath</name>
<block>{
	<decl_stmt><decl><type><name>OPath</name></type>		<name>o_path</name></decl>;</decl_stmt>
}</block></struct></type> <name>OBitmapHeapPath</name>;</typedef>

<typedef>typedef <type><struct>struct <name>OIndexPlanState</name>
<block>{
	<decl_stmt><decl><type><name>OPlanState</name></type>	<name>o_plan_state</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OScanState</name></type>	<name>ostate</name></decl>;</decl_stmt>
	<comment type="block">/* Used only in o_explain_custom_scan */</comment>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>stripped_indexquals</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>onlyCurIx</name></decl>;</decl_stmt>
}</block></struct></type> <name>OIndexPlanState</name>;</typedef>

<typedef>typedef <type><struct>struct <name>OCustomScanState</name>
<block>{
	<decl_stmt><decl><type><name>CustomScanState</name></type> <name>css</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>useEaCounters</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OEACallsCounters</name></type> <name>eaCounters</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OPlanState</name> <modifier>*</modifier></type><name>o_plan_state</name></decl>;</decl_stmt>
}</block></struct></type> <name>OCustomScanState</name>;</typedef>

<decl_stmt><decl><type><name>set_rel_pathlist_hook_type</name></type> <name>old_set_rel_pathlist_hook</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OEACallsCounters</name> <modifier>*</modifier></type><name>ea_counters</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* custom scan */</comment>
<function_decl><type><specifier>static</specifier> <name>Plan</name> <modifier>*</modifier></type><name>o_plan_custom_path</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>rootPageBlkno</name></decl></parameter>, <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>,
								<parameter><decl><type><name>CustomPath</name> <modifier>*</modifier></type><name>best_path</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>tlist</name></decl></parameter>,
								<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>clauses</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>custom_plans</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>o_begin_custom_scan</name><parameter_list>(<parameter><decl><type><name>CustomScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>EState</name> <modifier>*</modifier></type><name>estate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eflags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>TupleTableSlot</name> <modifier>*</modifier></type><name>o_exec_custom_scan</name><parameter_list>(<parameter><decl><type><name>CustomScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>o_end_custom_scan</name><parameter_list>(<parameter><decl><type><name>CustomScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>o_rescan_custom_scan</name><parameter_list>(<parameter><decl><type><name>CustomScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>o_explain_custom_scan</name><parameter_list>(<parameter><decl><type><name>CustomScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>ancestors</name></decl></parameter>,
								  <parameter><decl><type><name>ExplainState</name> <modifier>*</modifier></type><name>es</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Node</name> <modifier>*</modifier></type><name>o_create_custom_scan_state</name><parameter_list>(<parameter><decl><type><name>CustomScan</name> <modifier>*</modifier></type><name>cscan</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>CustomPathMethods</name></type> <name>o_path_methods</name> <init>=
<expr><block>{
	<expr><operator>.</operator><name>CustomName</name> <operator>=</operator> <literal type="string">"o_path"</literal></expr>,
	<expr><operator>.</operator><name>PlanCustomPath</name> <operator>=</operator> <name>o_plan_custom_path</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>CustomScanMethods</name></type> <name>o_scan_methods</name> <init>=
<expr><block>{
	<expr><literal type="string">"o_scan"</literal></expr>,
	<expr><name>o_create_custom_scan_state</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>CustomExecMethods</name></type> <name>o_scan_exec_methods</name> <init>=
<expr><block>{
	<expr><literal type="string">"o_exec_scan"</literal></expr>,
	<expr><name>o_begin_custom_scan</name></expr>,
	<expr><name>o_exec_custom_scan</name></expr>,
	<expr><name>o_end_custom_scan</name></expr>,
	<expr><name>o_rescan_custom_scan</name></expr>,
	<expr><name>NULL</name></expr>,
	<expr><name>NULL</name></expr>,
	<expr><name>NULL</name></expr>,
	<expr><name>NULL</name></expr>,
	<expr><name>NULL</name></expr>,
	<expr><name>NULL</name></expr>,
	<expr><name>NULL</name></expr>,
	<expr><name>o_explain_custom_scan</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>bool</name></type>
<name>is_o_custom_scan</name><parameter_list>(<parameter><decl><type><name>CustomScan</name> <modifier>*</modifier></type><name>scan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>scan</name><operator>-&gt;</operator><name>methods</name></name> <operator>==</operator> <operator>&amp;</operator><name>o_scan_methods</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>is_o_custom_scan_state</name><parameter_list>(<parameter><decl><type><name>CustomScanState</name> <modifier>*</modifier></type><name>scan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>scan</name><operator>-&gt;</operator><name>methods</name></name> <operator>==</operator> <operator>&amp;</operator><name>o_scan_exec_methods</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Path</name> <modifier>*</modifier></type>
<name>transform_path</name><parameter_list>(<parameter><decl><type><name>Path</name> <modifier>*</modifier></type><name>src_path</name></decl></parameter>, <parameter><decl><type><name>OTableDescr</name> <modifier>*</modifier></type><name>descr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CustomPath</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>IsA</name><argument_list>(<argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>IndexPath</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>IsA</name><argument_list>(<argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>Path</name></expr></argument>)</argument_list></call> <operator>||</operator>
		   <call><name>IsA</name><argument_list>(<argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>BitmapHeapPath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>CustomPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>path</name><operator>.</operator><name>pathtype</name></name> <operator>=</operator> <name>T_CustomScan</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>path</name><operator>.</operator><name>parent</name></name> <operator>=</operator> <name><name>src_path</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>path</name><operator>.</operator><name>pathtarget</name></name> <operator>=</operator> <name><name>src_path</name><operator>-&gt;</operator><name>pathtarget</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>path</name><operator>.</operator><name>param_info</name></name> <operator>=</operator> <name><name>src_path</name><operator>-&gt;</operator><name>param_info</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>path</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <name><name>src_path</name><operator>-&gt;</operator><name>rows</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>path</name><operator>.</operator><name>startup_cost</name></name> <operator>=</operator> <name><name>src_path</name><operator>-&gt;</operator><name>startup_cost</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>path</name><operator>.</operator><name>total_cost</name></name> <operator>=</operator> <name><name>src_path</name><operator>-&gt;</operator><name>total_cost</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>path</name><operator>.</operator><name>pathkeys</name></name> <operator>=</operator> <name><name>src_path</name><operator>-&gt;</operator><name>pathkeys</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>path</name><operator>.</operator><name>parallel_aware</name></name> <operator>=</operator> <name><name>src_path</name><operator>-&gt;</operator><name>parallel_aware</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>path</name><operator>.</operator><name>parallel_safe</name></name> <operator>=</operator> <name><name>src_path</name><operator>-&gt;</operator><name>parallel_safe</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>path</name><operator>.</operator><name>parallel_workers</name></name> <operator>=</operator> <name><name>src_path</name><operator>-&gt;</operator><name>parallel_workers</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>methods</name></name> <operator>=</operator> <operator>&amp;</operator><name>o_path_methods</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>custom_paths</name></name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><name>src_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>Path</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OIndexPath</name> <modifier>*</modifier></type><name>new_path</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OIndexPath</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>new_path</name><operator>-&gt;</operator><name>o_path</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>O_IndexPath</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>new_path</name><operator>-&gt;</operator><name>ix_num</name></name> <operator>=</operator> <name>PrimaryIndexNumber</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>new_path</name><operator>-&gt;</operator><name>scandir</name></name> <operator>=</operator> <name>ForwardScanDirection</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>custom_private</name></name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><name>new_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>IndexPath</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>IndexPath</name>  <modifier>*</modifier></type><name>ix_path</name> <init>= <expr><operator>(</operator><name>IndexPath</name> <operator>*</operator><operator>)</operator> <name>src_path</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>OIndexNumber</name></type> <name>ix_num</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>index_descr</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>OIndexPath</name> <modifier>*</modifier></type><name>new_path</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OIndexPath</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="block">/* Find ix_num */</comment>
		<for>for <control>(<init><expr><name>ix_num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ix_num</name> <operator>&lt;</operator> <name><name>descr</name><operator>-&gt;</operator><name>nIndices</name></name></expr>;</condition> <incr><expr><name>ix_num</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><name>index_descr</name> <operator>=</operator> <name><name>descr</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>ix_num</name></expr>]</index></name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>index_descr</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>reloid</name></name> <operator>==</operator> <name><name>ix_path</name><operator>-&gt;</operator><name>indexinfo</name><operator>-&gt;</operator><name>indexoid</name></name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><name><name>new_path</name><operator>-&gt;</operator><name>o_path</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>O_IndexPath</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>new_path</name><operator>-&gt;</operator><name>ix_num</name></name> <operator>=</operator> <name>ix_num</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>new_path</name><operator>-&gt;</operator><name>scandir</name></name> <operator>=</operator> <name><name>ix_path</name><operator>-&gt;</operator><name>indexscandir</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>custom_private</name></name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><name>new_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>BitmapHeapPath</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OBitmapHeapPath</name> <modifier>*</modifier></type><name>new_path</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OBitmapHeapPath</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>new_path</name><operator>-&gt;</operator><name>o_path</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>O_BitmapHeapPath</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>custom_private</name></name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><name>new_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>path</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>orioledb_set_plain_rel_pathlist_hook</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>rootPageBlkno</name></decl></parameter>, <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>,
									 <parameter><decl><type><name>RangeTblEntry</name> <modifier>*</modifier></type><name>rte</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>result</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>rte</name><operator>-&gt;</operator><name>rtekind</name></name> <operator>==</operator> <name>RTE_RELATION</name> <operator>&amp;&amp;</operator> <name><name>rte</name><operator>-&gt;</operator><name>relkind</name></name> <operator>==</operator> <name>RELKIND_RELATION</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Relation</name></type>	<name>relation</name> <init>= <expr><call><name>relation_open</name><argument_list>(<argument><expr><name><name>rte</name><operator>-&gt;</operator><name>relid</name></name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>is_orioledb_rel</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>IndexClauseSet</name></type> <name>rclauseset</name></decl>;</decl_stmt>

			<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>rel-&gt;indexlist</argument>)</argument_list></macro>
			<block>{<block_content>
				<decl_stmt><decl><type><name>IndexOptInfo</name> <modifier>*</modifier></type><name>index</name> <init>= <expr><operator>(</operator><name>IndexOptInfo</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><name><name>index</name><operator>-&gt;</operator><name>indpred</name></name> <operator>!=</operator> <name>NIL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>index</name><operator>-&gt;</operator><name>predOK</name></name></expr>)</condition><block type="pseudo"><block_content>
					<continue>continue;</continue></block_content></block></if></if_stmt>

				<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rclauseset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rclauseset</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>match_restriction_clauses_to_index</name><argument_list>(<argument><expr><name>rootPageBlkno</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rclauseset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>!</operator><name><name>rclauseset</name><operator>.</operator><name>nonempty</name></name></expr>;</expr_stmt>
			</block_content>}</block>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>relation_close</name><argument_list>(<argument><expr><name>relation</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Removes all index and base relation scan paths for a orioledb TableAm table.
 */</comment>
<function><type><name>void</name></type>
<name>orioledb_set_rel_pathlist_hook</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>rootPageBlkno</name></decl></parameter>, <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>,
							   <parameter><decl><type><name>Index</name></type> <name>rti</name></decl></parameter>, <parameter><decl><type><name>RangeTblEntry</name> <modifier>*</modifier></type><name>rte</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>rte</name><operator>-&gt;</operator><name>rtekind</name></name> <operator>==</operator> <name>RTE_RELATION</name> <operator>&amp;&amp;</operator> <name><name>rte</name><operator>-&gt;</operator><name>relkind</name></name> <operator>==</operator> <name>RELKIND_RELATION</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Relation</name></type>	<name>relation</name> <init>= <expr><call><name>table_open</name><argument_list>(<argument><expr><name><name>rte</name><operator>-&gt;</operator><name>relid</name></name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="block">/* orioledb relation */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>is_orioledb_rel</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>OTableDescr</name> <modifier>*</modifier></type><name>descr</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>bool</name></type>		<name>seq_path_needed</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>descr</name> <operator>=</operator> <call><name>relation_get_descr</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>descr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/*
			 * transform all postgres scans to custom scans
			 */</comment>
			<expr_stmt><expr><name>seq_path_needed</name> <operator>=</operator> <call><name>list_length</name><argument_list>(<argument><expr><name><name>rel</name><operator>-&gt;</operator><name>pathlist</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator>
				<name><name>descr</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>PrimaryIndexNumber</name></expr>]</index></name><operator>-&gt;</operator><name>primaryIsCtid</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <call><name>list_length</name><argument_list>(<argument><expr><name><name>rel</name><operator>-&gt;</operator><name>pathlist</name></name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>Path</name>	   <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>list_nth</name><argument_list>(<argument><expr><name><name>rel</name><operator>-&gt;</operator><name>pathlist</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>IndexPath</name></expr></argument>)</argument_list></call> <operator>||</operator>
					<call><name>IsA</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>Path</name></expr></argument>)</argument_list></call> <operator>||</operator>
					<call><name>IsA</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>BitmapHeapPath</name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsA</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>Path</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name><name>rel</name><operator>-&gt;</operator><name>pathlist</name></name> <operator>=</operator> <call><name>list_delete_nth_cell</name><argument_list>(<argument><expr><name><name>rel</name><operator>-&gt;</operator><name>pathlist</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
					<else>else<block type="pseudo"><block_content>
						<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
					<if_stmt><if>if <condition>(<expr><name>seq_path_needed</name> <operator>||</operator> <operator>!</operator><call><name>IsA</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>Path</name></expr></argument>)</argument_list></call></expr>)</condition>
					<block>{<block_content>
						<decl_stmt><decl><type><name>Path</name>	   <modifier>*</modifier></type><name>custom_path</name> <init>= <expr><call><name>transform_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

						<expr_stmt><expr><name><name>rel</name><operator>-&gt;</operator><name>pathlist</name></name> <operator>=</operator> <call><name>list_insert_nth</name><argument_list>(<argument><expr><name><name>rel</name><operator>-&gt;</operator><name>pathlist</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
														<argument><expr><name>custom_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></while>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>relation</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>relation</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * else it is not relation: nothing to do
	 */</comment>

	<if_stmt><if>if <condition>(<expr><name>old_set_rel_pathlist_hook</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>old_set_rel_pathlist_hook</name><argument_list>(<argument><expr><name>rootPageBlkno</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>, <argument><expr><name>rti</name></expr></argument>, <argument><expr><name>rte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Creates orioledb CustomScan plan from orioledb CustomPath.
 */</comment>
<function><type><specifier>static</specifier> <name>Plan</name> <modifier>*</modifier></type>
<name>o_plan_custom_path</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>rootPageBlkno</name></decl></parameter>, <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>,
				   <parameter><decl><type><name>CustomPath</name> <modifier>*</modifier></type><name>best_path</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>tlist</name></decl></parameter>,
				   <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>clauses</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>custom_plans</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OPath</name>	   <modifier>*</modifier></type><name>o_path</name> <init>= <expr><call><name>linitial</name><argument_list>(<argument><expr><name><name>best_path</name><operator>-&gt;</operator><name>custom_private</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CustomScan</name> <modifier>*</modifier></type><name>custom_scan</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CustomScan</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Plan</name>	   <modifier>*</modifier></type><name>plan</name> <init>= <expr><operator>&amp;</operator><name><name>custom_scan</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>plan</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>qpqual</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RangeTblEntry</name> <modifier>*</modifier></type><name>rte</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>reloid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Relation</name></type>	<name>relation</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTableDescr</name> <modifier>*</modifier></type><name>descr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Plan</name>	   <modifier>*</modifier></type><name>custom_plan</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>rte</name> <operator>=</operator> <call><name>planner_rt_fetch</name><argument_list>(<argument><expr><name><name>rel</name><operator>-&gt;</operator><name>relid</name></name></expr></argument>, <argument><expr><name>rootPageBlkno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>rte</name><operator>-&gt;</operator><name>rtekind</name></name> <operator>==</operator> <name>RTE_RELATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>reloid</name> <operator>=</operator> <name><name>rte</name><operator>-&gt;</operator><name>relid</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>relation</name> <operator>=</operator> <call><name>table_open</name><argument_list>(<argument><expr><name>reloid</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>relation</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>descr</name> <operator>=</operator> <call><name>relation_get_descr</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>descr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>plan</name><operator>-&gt;</operator><name>lefttree</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>plan</name><operator>-&gt;</operator><name>righttree</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>plan</name><operator>-&gt;</operator><name>initPlan</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<comment type="block">/* plan costs will be filled by create_customscan_plan */</comment>

	<expr_stmt><expr><name><name>custom_scan</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>scanrelid</name></name> <operator>=</operator> <name><name>rel</name><operator>-&gt;</operator><name>relid</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>custom_scan</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name><name>best_path</name><operator>-&gt;</operator><name>flags</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>custom_scan</name><operator>-&gt;</operator><name>methods</name></name> <operator>=</operator> <operator>&amp;</operator><name>o_scan_methods</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>custom_scan</name><operator>-&gt;</operator><name>custom_plans</name></name> <operator>=</operator> <name>custom_plans</name></expr>;</expr_stmt>
	<comment type="block">/* custom_scan-&gt;custom_relids will be filled by create_customscan_plan */</comment>
	<expr_stmt><expr><name><name>custom_scan</name><operator>-&gt;</operator><name>custom_relids</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>custom_plans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>custom_plan</name> <operator>=</operator> <operator>(</operator><name>Plan</name> <operator>*</operator><operator>)</operator> <call><name>linitial</name><argument_list>(<argument><expr><name>custom_plans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>custom_plan</name></expr></argument>, <argument><expr><name>Result</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>custom_plan</name> <operator>=</operator> <call><name>outerPlan</name><argument_list>(<argument><expr><name>custom_plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>o_path</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>O_IndexPath</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OIndexPath</name> <modifier>*</modifier></type><name>ix_path</name> <init>= <expr><operator>(</operator><name>OIndexPath</name> <operator>*</operator><operator>)</operator> <name>o_path</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>onlyCurIx</name> <init>= <expr><call><name>IsA</name><argument_list>(<argument><expr><name>custom_plan</name></expr></argument>, <argument><expr><name>IndexOnlyScan</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>custom_plans</name> <operator>&amp;&amp;</operator> <call><name>IsA</name><argument_list>(<argument><expr><name>custom_plan</name></expr></argument>, <argument><expr><name>IndexScan</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>IndexScan</name>  <modifier>*</modifier></type><name>ix_scan</name> <init>= <expr><operator>(</operator><name>IndexScan</name> <operator>*</operator><operator>)</operator> <name>custom_plan</name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name><name>plan</name><operator>-&gt;</operator><name>targetlist</name></name> <operator>=</operator> <name><name>ix_scan</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>plan</name><operator>.</operator><name>targetlist</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>custom_scan</name><operator>-&gt;</operator><name>custom_scan_tlist</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>qpqual</name> <operator>=</operator> <name><name>ix_scan</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>plan</name><operator>.</operator><name>qual</name></name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>custom_plans</name> <operator>&amp;&amp;</operator> <call><name>IsA</name><argument_list>(<argument><expr><name>custom_plan</name></expr></argument>, <argument><expr><name>IndexOnlyScan</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>IndexOnlyScan</name> <modifier>*</modifier></type><name>ixo_scan</name> <init>= <expr><operator>(</operator><name>IndexOnlyScan</name> <operator>*</operator><operator>)</operator> <name>custom_plan</name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name><name>plan</name><operator>-&gt;</operator><name>targetlist</name></name> <operator>=</operator> <name><name>ixo_scan</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>plan</name><operator>.</operator><name>targetlist</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>custom_scan</name><operator>-&gt;</operator><name>custom_scan_tlist</name></name> <operator>=</operator> <name><name>ixo_scan</name><operator>-&gt;</operator><name>indextlist</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>qpqual</name> <operator>=</operator> <name><name>ixo_scan</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>plan</name><operator>.</operator><name>qual</name></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>custom_scan</name><operator>-&gt;</operator><name>custom_exprs</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>custom_scan</name><operator>-&gt;</operator><name>custom_private</name></name> <operator>=</operator>
			<call><name>list_make4</name><argument_list>(<argument><expr><call><name>makeInteger</name><argument_list>(<argument><expr><name>O_IndexPlan</name></expr></argument>)</argument_list></call></expr></argument>,
					   <argument><expr><call><name>makeInteger</name><argument_list>(<argument><expr><name><name>ix_path</name><operator>-&gt;</operator><name>ix_num</name></name></expr></argument>)</argument_list></call></expr></argument>,
					   <argument><expr><call><name>makeInteger</name><argument_list>(<argument><expr><name><name>ix_path</name><operator>-&gt;</operator><name>scandir</name></name></expr></argument>)</argument_list></call></expr></argument>,
					   <argument><expr><call><name>makeInteger</name><argument_list>(<argument><expr><name>onlyCurIx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>BitmapHeapScan</name> <modifier>*</modifier></type><name>bh_scan</name> <init>= <expr><operator>(</operator><name>BitmapHeapScan</name> <operator>*</operator><operator>)</operator> <name>custom_plan</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>primary</name> <init>= <expr><call><name>GET_PRIMARY</name><argument_list>(<argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>custom_scan</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>plan</name><operator>.</operator><name>targetlist</name></name> <operator>=</operator>
			<call><name>copyObject</name><argument_list>(<argument><expr><name><name>bh_scan</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>plan</name><operator>.</operator><name>targetlist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>qpqual</name> <operator>=</operator> <name><name>bh_scan</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>plan</name><operator>.</operator><name>qual</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>primary</name><operator>-&gt;</operator><name>nFields</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>custom_scan</name><operator>-&gt;</operator><name>custom_private</name></name> <operator>=</operator>
			<call><name>list_make2</name><argument_list>(<argument><expr><call><name>makeInteger</name><argument_list>(<argument><expr><name>O_BitmapHeapPlan</name></expr></argument>)</argument_list></call></expr></argument>,
					   <argument><expr><call><name>makeInteger</name><argument_list>(<argument><expr><name><name>primary</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>inputtype</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>relation</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>plan</name><operator>-&gt;</operator><name>qual</name></name> <operator>=</operator> <name>qpqual</name></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>Plan</name> <operator>*</operator><operator>)</operator> <name>custom_scan</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Custom scan.
 */</comment>

<comment type="block">/*
 * Creates OCustomScanState.
 */</comment>
<function><type><name>Node</name> <modifier>*</modifier></type>
<name>o_create_custom_scan_state</name><parameter_list>(<parameter><decl><type><name>CustomScan</name> <modifier>*</modifier></type><name>cscan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Node</name>	   <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>palloc0fast</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OCustomScanState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OCustomScanState</name> <modifier>*</modifier></type><name>ocstate</name> <init>= <expr><operator>(</operator><name>OCustomScanState</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OPlanTag</name></type>	<name>plan_tag</name> <init>= <expr><call><name>intVal</name><argument_list>(<argument><expr><call><name>linitial</name><argument_list>(<argument><expr><name><name>cscan</name><operator>-&gt;</operator><name>custom_private</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Plan</name>	   <modifier>*</modifier></type><name>custom_plan</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>T_CustomScanState</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ocstate</name><operator>-&gt;</operator><name>css</name><operator>.</operator><name>methods</name></name> <operator>=</operator> <operator>&amp;</operator><name>o_scan_exec_methods</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ocstate</name><operator>-&gt;</operator><name>css</name><operator>.</operator><name>slotOps</name></name> <operator>=</operator> <operator>&amp;</operator><name>TTSOpsOrioleDB</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>cscan</name><operator>-&gt;</operator><name>custom_plans</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>custom_plan</name> <operator>=</operator> <operator>(</operator><name>Plan</name> <operator>*</operator><operator>)</operator> <call><name>linitial</name><argument_list>(<argument><expr><name><name>cscan</name><operator>-&gt;</operator><name>custom_plans</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>custom_plan</name></expr></argument>, <argument><expr><name>Result</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>custom_plan</name> <operator>=</operator> <call><name>outerPlan</name><argument_list>(<argument><expr><name>custom_plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>plan_tag</name> <operator>==</operator> <name>O_IndexPlan</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OIndexPlanState</name> <modifier>*</modifier></type><name>ix_plan_state</name> <init>=
		<expr><operator>(</operator><name>OIndexPlanState</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OIndexPlanState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>ix_plan_state</name><operator>-&gt;</operator><name>ostate</name><operator>.</operator><name>ixNum</name></name> <operator>=</operator> <call><name>intVal</name><argument_list>(<argument><expr><call><name>lsecond</name><argument_list>(<argument><expr><name><name>cscan</name><operator>-&gt;</operator><name>custom_private</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ix_plan_state</name><operator>-&gt;</operator><name>ostate</name><operator>.</operator><name>scanDir</name></name> <operator>=</operator> <call><name>intVal</name><argument_list>(<argument><expr><call><name>lthird</name><argument_list>(<argument><expr><name><name>cscan</name><operator>-&gt;</operator><name>custom_private</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ix_plan_state</name><operator>-&gt;</operator><name>ostate</name><operator>.</operator><name>iterator</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ix_plan_state</name><operator>-&gt;</operator><name>ostate</name><operator>.</operator><name>curKeyRangeIsLoaded</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ix_plan_state</name><operator>-&gt;</operator><name>ostate</name><operator>.</operator><name>curKeyRange</name><operator>.</operator><name>empty</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>custom_plan</name></expr></argument>, <argument><expr><name>IndexScan</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>IndexScan</name>  <modifier>*</modifier></type><name>ix_scan</name> <init>= <expr><operator>(</operator><name>IndexScan</name> <operator>*</operator><operator>)</operator> <name>custom_plan</name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name><name>ix_plan_state</name><operator>-&gt;</operator><name>stripped_indexquals</name></name> <operator>=</operator>
				<call><name>copyObject</name><argument_list>(<argument><expr><name><name>ix_scan</name><operator>-&gt;</operator><name>indexqualorig</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ix_plan_state</name><operator>-&gt;</operator><name>ostate</name><operator>.</operator><name>indexQuals</name></name> <operator>=</operator> <call><name>copyObject</name><argument_list>(<argument><expr><name><name>ix_scan</name><operator>-&gt;</operator><name>indexqual</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>custom_plan</name></expr></argument>, <argument><expr><name>IndexOnlyScan</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>IndexOnlyScan</name> <modifier>*</modifier></type><name>ixo_scan</name> <init>= <expr><operator>(</operator><name>IndexOnlyScan</name> <operator>*</operator><operator>)</operator> <name>custom_plan</name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name><name>ix_plan_state</name><operator>-&gt;</operator><name>stripped_indexquals</name></name> <operator>=</operator>
				<call><name>copyObject</name><argument_list>(<argument><expr><name><name>ixo_scan</name><operator>-&gt;</operator><name>indexqual</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ix_plan_state</name><operator>-&gt;</operator><name>ostate</name><operator>.</operator><name>indexQuals</name></name> <operator>=</operator> <call><name>copyObject</name><argument_list>(<argument><expr><name><name>ixo_scan</name><operator>-&gt;</operator><name>indexqual</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name><name>ix_plan_state</name><operator>-&gt;</operator><name>ostate</name><operator>.</operator><name>onlyCurIx</name></name> <operator>=</operator>
			<call><name>intVal</name><argument_list>(<argument><expr><call><name>lfourth</name><argument_list>(<argument><expr><name><name>cscan</name><operator>-&gt;</operator><name>custom_private</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>ocstate</name><operator>-&gt;</operator><name>o_plan_state</name></name> <operator>=</operator> <operator>(</operator><name>OPlanState</name> <operator>*</operator><operator>)</operator> <name>ix_plan_state</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>plan_tag</name> <operator>==</operator> <name>O_BitmapHeapPlan</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OBitmapHeapPlanState</name> <modifier>*</modifier></type><name>bitmap_state</name> <init>=
		<expr><operator>(</operator><name>OBitmapHeapPlanState</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OBitmapHeapPlanState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>BitmapHeapScan</name> <modifier>*</modifier></type><name>bh_scan</name> <init>= <expr><operator>(</operator><name>BitmapHeapScan</name> <operator>*</operator><operator>)</operator> <name>custom_plan</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>bitmap_state</name><operator>-&gt;</operator><name>typeoid</name></name> <operator>=</operator> <call><name>intVal</name><argument_list>(<argument><expr><call><name>lsecond</name><argument_list>(<argument><expr><name><name>cscan</name><operator>-&gt;</operator><name>custom_private</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>bitmap_state</name><operator>-&gt;</operator><name>bitmapqualplan</name></name> <operator>=</operator> <call><name>copyObject</name><argument_list>(<argument><expr><name><name>bh_scan</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>plan</name><operator>.</operator><name>lefttree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>bitmap_state</name><operator>-&gt;</operator><name>bitmapqualorig</name></name> <operator>=</operator> <call><name>copyObject</name><argument_list>(<argument><expr><name><name>bh_scan</name><operator>-&gt;</operator><name>bitmapqualorig</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ocstate</name><operator>-&gt;</operator><name>o_plan_state</name></name> <operator>=</operator> <operator>(</operator><name>OPlanState</name> <operator>*</operator><operator>)</operator> <name>bitmap_state</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name><name>ocstate</name><operator>-&gt;</operator><name>o_plan_state</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>plan_tag</name></expr>;</expr_stmt>

	<return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Initializes OCustomScanState and prepares for scan.
 */</comment>
<function><type><name>void</name></type>
<name>o_begin_custom_scan</name><parameter_list>(<parameter><decl><type><name>CustomScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>EState</name> <modifier>*</modifier></type><name>estate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OCustomScanState</name> <modifier>*</modifier></type><name>ocstate</name> <init>= <expr><operator>(</operator><name>OCustomScanState</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>ocstate</name><operator>-&gt;</operator><name>useEaCounters</name></name> <operator>=</operator> <call><name>is_explain_analyze</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ocstate</name><operator>-&gt;</operator><name>useEaCounters</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OTableDescr</name> <modifier>*</modifier></type><name>descr</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>descr</name> <operator>=</operator> <call><name>relation_get_descr</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ss_currentRelation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>eanalyze_counters_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ocstate</name><operator>-&gt;</operator><name>eaCounters</name></name></expr></argument>, <argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ocstate</name><operator>-&gt;</operator><name>o_plan_state</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>O_IndexPlan</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OIndexPlanState</name> <modifier>*</modifier></type><name>ix_plan_state</name> <init>=
		<expr><operator>(</operator><name>OIndexPlanState</name> <operator>*</operator><operator>)</operator> <name><name>ocstate</name><operator>-&gt;</operator><name>o_plan_state</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>OScanState</name> <modifier>*</modifier></type><name>scan_state</name> <init>= <expr><operator>&amp;</operator><name><name>ix_plan_state</name><operator>-&gt;</operator><name>ostate</name></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>scan_state</name><operator>-&gt;</operator><name>csn</name></name> <operator>=</operator> <name><name>estate</name><operator>-&gt;</operator><name>es_snapshot</name><operator>-&gt;</operator><name>snapshotcsn</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>ix_plan_state</name><operator>-&gt;</operator><name>ostate</name><operator>.</operator><name>cxt</name></name> <operator>=</operator> <call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name><name>estate</name><operator>-&gt;</operator><name>es_query_cxt</name></name></expr></argument>,
														  <argument><expr><literal type="string">"orioledb_cs plan data"</literal></expr></argument>,
														  <argument><expr><name>ALLOCSET_DEFAULT_SIZES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>ocstate</name><operator>-&gt;</operator><name>o_plan_state</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>O_BitmapHeapPlan</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OBitmapHeapPlanState</name> <modifier>*</modifier></type><name>bitmap_state</name> <init>=
		<expr><operator>(</operator><name>OBitmapHeapPlanState</name> <operator>*</operator><operator>)</operator> <name><name>ocstate</name><operator>-&gt;</operator><name>o_plan_state</name></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>bitmap_state</name><operator>-&gt;</operator><name>bitmapqualplanstate</name></name> <operator>=</operator>
			<call><name>ExecInitNode</name><argument_list>(<argument><expr><name><name>bitmap_state</name><operator>-&gt;</operator><name>bitmapqualplan</name></name></expr></argument>, <argument><expr><name>estate</name></expr></argument>, <argument><expr><name>eflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>ocstate</name><operator>-&gt;</operator><name>useEaCounters</name></name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>OTableDescr</name> <modifier>*</modifier></type><name>descr</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>descr</name> <operator>=</operator> <call><name>relation_get_descr</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ss_currentRelation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>bitmap_state</name><operator>-&gt;</operator><name>eaCounters</name></name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OEACallsCounters</name></expr></argument>)</argument_list></sizeof> <operator>*</operator>
											   <name><name>descr</name><operator>-&gt;</operator><name>nIndices</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>descr</name><operator>-&gt;</operator><name>nIndices</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<expr_stmt><expr><call><name>eanalyze_counters_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bitmap_state</name><operator>-&gt;</operator><name>eaCounters</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>bitmap_state</name><operator>-&gt;</operator><name>csn</name></name> <operator>=</operator> <name><name>estate</name><operator>-&gt;</operator><name>es_snapshot</name><operator>-&gt;</operator><name>snapshotcsn</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>bitmap_state</name><operator>-&gt;</operator><name>cxt</name></name> <operator>=</operator> <call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name><name>estate</name><operator>-&gt;</operator><name>es_query_cxt</name></name></expr></argument>,
												  <argument><expr><literal type="string">"orioledb_cs plan data"</literal></expr></argument>,
												  <argument><expr><name>ALLOCSET_DEFAULT_SIZES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Iterates custom scan.
 */</comment>
<function><type><name>TupleTableSlot</name> <modifier>*</modifier></type>
<name>o_exec_custom_scan</name><parameter_list>(<parameter><decl><type><name>CustomScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OCustomScanState</name> <modifier>*</modifier></type><name>ocstate</name> <init>= <expr><operator>(</operator><name>OCustomScanState</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EPQState</name>   <modifier>*</modifier></type><name>epqstate</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CommitSeqNo</name></type> <name>csn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ocstate</name><operator>-&gt;</operator><name>useEaCounters</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>ea_counters</name> <operator>=</operator> <operator>&amp;</operator><name><name>ocstate</name><operator>-&gt;</operator><name>eaCounters</name></name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>ea_counters</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ocstate</name><operator>-&gt;</operator><name>o_plan_state</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>O_IndexPlan</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OIndexPlanState</name> <modifier>*</modifier></type><name>ix_plan_state</name> <init>=
		<expr><operator>(</operator><name>OIndexPlanState</name> <operator>*</operator><operator>)</operator> <name><name>ocstate</name><operator>-&gt;</operator><name>o_plan_state</name></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>csn</name> <operator>=</operator> <name><name>ix_plan_state</name><operator>-&gt;</operator><name>ostate</name><operator>.</operator><name>csn</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><name>epqstate</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>state</name><operator>-&gt;</operator><name>es_epq_active</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>epqstate</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Index</name></type>		<name>scanrelid</name> <init>= <expr><operator>(</operator><operator>(</operator><name>Scan</name> <operator>*</operator><operator>)</operator> <name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>plan</name></name><operator>)</operator><operator>-&gt;</operator><name>scanrelid</name></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>epqstate</name><operator>-&gt;</operator><name>relsubs_done</name><index>[<expr><name>scanrelid</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*
				 * Return empty slot, as we already performed an EPQ
				 * substitution for this relation.
				 */</comment>

				<expr_stmt><expr><name>slot</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ss_ScanTupleSlot</name></name></expr>;</expr_stmt>

				<comment type="block">/* Return empty slot, as we already returned a tuple */</comment>
				<return>return <expr><call><name>ExecClearTuple</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name><name>epqstate</name><operator>-&gt;</operator><name>relsubs_slot</name><index>[<expr><name>scanrelid</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*
				 * Return replacement tuple provided by the EPQ caller.
				 */</comment>

				<expr_stmt><expr><name>slot</name> <operator>=</operator> <name><name>epqstate</name><operator>-&gt;</operator><name>relsubs_slot</name><index>[<expr><name>scanrelid</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>epqstate</name><operator>-&gt;</operator><name>relsubs_rowmark</name><index>[<expr><name>scanrelid</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/* Mark to remember that we shouldn't return more */</comment>
				<expr_stmt><expr><name><name>epqstate</name><operator>-&gt;</operator><name>relsubs_done</name><index>[<expr><name>scanrelid</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

				<comment type="block">/* Return empty slot if we haven't got a test tuple */</comment>
				<if_stmt><if>if <condition>(<expr><call><name>TupIsNull</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>o_exec_qual</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>ps_ExprContext</name></name></expr></argument>,
								 <argument><expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>qual</name></name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

				<expr_stmt><expr><name>slot</name> <operator>=</operator> <call><name>o_exec_project</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>ps_ProjInfo</name></name></expr></argument>,
									  <argument><expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>ps_ExprContext</name></name></expr></argument>, <argument><expr><name>slot</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<return>return <expr><name>slot</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>ix_plan_state</name><operator>-&gt;</operator><name>ostate</name><operator>.</operator><name>scandesc</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Relation</name></type>	<name>rel</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ss_currentRelation</name></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>OTableDescr</name> <modifier>*</modifier></type><name>descr</name> <init>= <expr><call><name>relation_get_descr</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>OIndexNumber</name></type> <name>ix_num</name> <init>= <expr><name><name>ix_plan_state</name><operator>-&gt;</operator><name>ostate</name><operator>.</operator><name>ixNum</name></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>ix_descr</name> <init>= <expr><name><name>descr</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>ix_num</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Relation</name></type>	<name>index</name> <init>= <expr><call><name>index_open</name><argument_list>(<argument><expr><name><name>ix_descr</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>reloid</name></name></expr></argument>,
										   <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>init_index_scan_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ix_plan_state</name><operator>-&gt;</operator><name>ostate</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>,
								  <argument><expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>ps_ExprContext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>index_close</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>slot</name> <operator>=</operator> <call><name>o_exec_fetch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ix_plan_state</name><operator>-&gt;</operator><name>ostate</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>ss</name></name></expr></argument>, <argument><expr><name>csn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>ocstate</name><operator>-&gt;</operator><name>o_plan_state</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>O_BitmapHeapPlan</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OBitmapHeapPlanState</name> <modifier>*</modifier></type><name>bitmap_state</name> <init>=
		<expr><operator>(</operator><name>OBitmapHeapPlanState</name> <operator>*</operator><operator>)</operator> <name><name>ocstate</name><operator>-&gt;</operator><name>o_plan_state</name></name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>bitmap_state</name><operator>-&gt;</operator><name>scan</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>PlanState</name>  <modifier>*</modifier></type><name>bitmapqualplanstate</name> <init>= <expr><name><name>bitmap_state</name><operator>-&gt;</operator><name>bitmapqualplanstate</name></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Relation</name></type>	<name>rel</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ss_currentRelation</name></name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name><name>bitmap_state</name><operator>-&gt;</operator><name>scan</name></name> <operator>=</operator> <call><name>o_make_bitmap_scan</name><argument_list>(<argument><expr><name>bitmap_state</name></expr></argument>,
													<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>ss</name></name></expr></argument>,
													<argument><expr><name>bitmapqualplanstate</name></expr></argument>,
													<argument><expr><name>rel</name></expr></argument>,
													<argument><expr><name><name>bitmap_state</name><operator>-&gt;</operator><name>typeoid</name></name></expr></argument>,
													<argument><expr><name><name>bitmap_state</name><operator>-&gt;</operator><name>csn</name></name></expr></argument>,
													<argument><expr><name><name>bitmap_state</name><operator>-&gt;</operator><name>cxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>slot</name> <operator>=</operator> <call><name>o_exec_bitmap_fetch</name><argument_list>(<argument><expr><name><name>bitmap_state</name><operator>-&gt;</operator><name>scan</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>slot</name> <operator>=</operator> <call><name>o_exec_project</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>ps_ProjInfo</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>ps_ExprContext</name></name></expr></argument>,
						  <argument><expr><name>slot</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>slot</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Restarts the scan.
 */</comment>
<function><type><name>void</name></type>
<name>o_rescan_custom_scan</name><parameter_list>(<parameter><decl><type><name>CustomScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OCustomScanState</name> <modifier>*</modifier></type><name>ocstate</name> <init>= <expr><operator>(</operator><name>OCustomScanState</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ocstate</name><operator>-&gt;</operator><name>o_plan_state</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>O_IndexPlan</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OIndexPlanState</name> <modifier>*</modifier></type><name>ix_plan_state</name> <init>=
		<expr><operator>(</operator><name>OIndexPlanState</name> <operator>*</operator><operator>)</operator> <name><name>ocstate</name><operator>-&gt;</operator><name>o_plan_state</name></name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>chgParam</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>MemoryContextReset</name><argument_list>(<argument><expr><name><name>ix_plan_state</name><operator>-&gt;</operator><name>ostate</name><operator>.</operator><name>cxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name><name>ix_plan_state</name><operator>-&gt;</operator><name>ostate</name><operator>.</operator><name>iterator</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>btendscan</name><argument_list>(<argument><expr><name><name>ix_plan_state</name><operator>-&gt;</operator><name>ostate</name><operator>.</operator><name>scandesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>btree_iterator_free</name><argument_list>(<argument><expr><name><name>ix_plan_state</name><operator>-&gt;</operator><name>ostate</name><operator>.</operator><name>iterator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>ix_plan_state</name><operator>-&gt;</operator><name>ostate</name><operator>.</operator><name>curKeyRangeIsLoaded</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ix_plan_state</name><operator>-&gt;</operator><name>ostate</name><operator>.</operator><name>curKeyRange</name><operator>.</operator><name>empty</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ix_plan_state</name><operator>-&gt;</operator><name>ostate</name><operator>.</operator><name>iterator</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ix_plan_state</name><operator>-&gt;</operator><name>ostate</name><operator>.</operator><name>scandesc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>ocstate</name><operator>-&gt;</operator><name>o_plan_state</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>O_BitmapHeapPlan</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OBitmapHeapPlanState</name> <modifier>*</modifier></type><name>bitmap_state</name> <init>=
		<expr><operator>(</operator><name>OBitmapHeapPlanState</name> <operator>*</operator><operator>)</operator> <name><name>ocstate</name><operator>-&gt;</operator><name>o_plan_state</name></name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>bitmap_state</name><operator>-&gt;</operator><name>scan</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>o_free_bitmap_scan</name><argument_list>(<argument><expr><name><name>bitmap_state</name><operator>-&gt;</operator><name>scan</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>ocstate</name><operator>-&gt;</operator><name>useEaCounters</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>bitmap_state</name><operator>-&gt;</operator><name>eaCounters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>bitmap_state</name><operator>-&gt;</operator><name>scan</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Ends custom scan.
 */</comment>
<function><type><name>void</name></type>
<name>o_end_custom_scan</name><parameter_list>(<parameter><decl><type><name>CustomScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OCustomScanState</name> <modifier>*</modifier></type><name>ocstate</name> <init>= <expr><operator>(</operator><name>OCustomScanState</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>STOPEVENT</name><argument_list>(<argument><expr><name>STOPEVENT_SCAN_END</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ocstate</name><operator>-&gt;</operator><name>o_plan_state</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>O_IndexPlan</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OIndexPlanState</name> <modifier>*</modifier></type><name>ix_plan_state</name> <init>=
		<expr><operator>(</operator><name>OIndexPlanState</name> <operator>*</operator><operator>)</operator> <name><name>ocstate</name><operator>-&gt;</operator><name>o_plan_state</name></name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>ix_plan_state</name><operator>-&gt;</operator><name>ostate</name><operator>.</operator><name>iterator</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>btree_iterator_free</name><argument_list>(<argument><expr><name><name>ix_plan_state</name><operator>-&gt;</operator><name>ostate</name><operator>.</operator><name>iterator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>MemoryContextDelete</name><argument_list>(<argument><expr><name><name>ix_plan_state</name><operator>-&gt;</operator><name>ostate</name><operator>.</operator><name>cxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ix_plan_state</name><operator>-&gt;</operator><name>ostate</name><operator>.</operator><name>cxt</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>ocstate</name><operator>-&gt;</operator><name>o_plan_state</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>O_BitmapHeapPlan</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OBitmapHeapPlanState</name> <modifier>*</modifier></type><name>bitmap_state</name> <init>=
		<expr><operator>(</operator><name>OBitmapHeapPlanState</name> <operator>*</operator><operator>)</operator> <name><name>ocstate</name><operator>-&gt;</operator><name>o_plan_state</name></name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>bitmap_state</name><operator>-&gt;</operator><name>bitmapqualplanstate</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ExecEndNode</name><argument_list>(<argument><expr><name><name>bitmap_state</name><operator>-&gt;</operator><name>bitmapqualplanstate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>MemoryContextReset</name><argument_list>(<argument><expr><name><name>bitmap_state</name><operator>-&gt;</operator><name>cxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>bitmap_state</name><operator>-&gt;</operator><name>scan</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>o_free_bitmap_scan</name><argument_list>(<argument><expr><name><name>bitmap_state</name><operator>-&gt;</operator><name>scan</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>ocstate</name><operator>-&gt;</operator><name>useEaCounters</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>bitmap_state</name><operator>-&gt;</operator><name>eaCounters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>ea_counters</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>OExplainContext</name>
<block>{
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>ancestors</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ExplainState</name> <modifier>*</modifier></type><name>es</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OCustomScanState</name> <modifier>*</modifier></type><name>ocstate</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTableDescr</name> <modifier>*</modifier></type><name>descr</name></decl>;</decl_stmt>
}</block></struct></type> <name>OExplainContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>o_explain_node</name><parameter_list>(<parameter><decl><type><name>PlanState</name> <modifier>*</modifier></type><name>planstate</name></decl></parameter>, <parameter><decl><type><name>OExplainContext</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>result</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>planstate</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<switch>switch <condition>(<expr><name><name>planstate</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>T_BitmapOrState</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>BitmapOrState</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>BitmapOrState</name> <operator>*</operator><operator>)</operator> <name>planstate</name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type>			<name>saved_nplans</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>nplans</name></name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>nplans</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>ExplainNode</name><argument_list>(<argument><expr><name>planstate</name></expr></argument>, <argument><expr><name><name>ec</name><operator>-&gt;</operator><name>ancestors</name></name></expr></argument>, <argument><expr><literal type="string">"Outer"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>ec</name><operator>-&gt;</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>ec</name><operator>-&gt;</operator><name>es</name><operator>-&gt;</operator><name>indent</name></name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>nplans</name></name> <operator>=</operator> <name>saved_nplans</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>
		<case>case <expr><name>T_BitmapAndState</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>BitmapAndState</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>BitmapAndState</name> <operator>*</operator><operator>)</operator> <name>planstate</name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type>			<name>saved_nplans</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>nplans</name></name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>nplans</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>ExplainNode</name><argument_list>(<argument><expr><name>planstate</name></expr></argument>, <argument><expr><name><name>ec</name><operator>-&gt;</operator><name>ancestors</name></name></expr></argument>, <argument><expr><literal type="string">"Outer"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>ec</name><operator>-&gt;</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>ec</name><operator>-&gt;</operator><name>es</name><operator>-&gt;</operator><name>indent</name></name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>nplans</name></name> <operator>=</operator> <name>saved_nplans</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>
		<case>case <expr><name>T_BitmapIndexScanState</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>OCustomScanState</name> <modifier>*</modifier></type><name>ocstate</name> <init>= <expr><name><name>ec</name><operator>-&gt;</operator><name>ocstate</name></name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>ExplainNode</name><argument_list>(<argument><expr><name>planstate</name></expr></argument>, <argument><expr><name><name>ec</name><operator>-&gt;</operator><name>ancestors</name></name></expr></argument>, <argument><expr><literal type="string">"Outer"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>ec</name><operator>-&gt;</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<switch>switch <condition>(<expr><name><name>ec</name><operator>-&gt;</operator><name>es</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition>
				<block>{<block_content>
					<case>case <expr><name>EXPLAIN_FORMAT_TEXT</name></expr>:</case>
						<expr_stmt><expr><name><name>ec</name><operator>-&gt;</operator><name>es</name><operator>-&gt;</operator><name>indent</name></name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
						<break>break;</break>
					<case>case <expr><name>EXPLAIN_FORMAT_JSON</name></expr>:</case>
						<block>{<block_content>
							<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

							<expr_stmt><expr><name><name>ec</name><operator>-&gt;</operator><name>es</name><operator>-&gt;</operator><name>str</name><operator>-&gt;</operator><name>len</name></name><operator>--</operator></expr>;</expr_stmt>
							<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>ec</name><operator>-&gt;</operator><name>es</name><operator>-&gt;</operator><name>str</name><operator>-&gt;</operator><name>len</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
							<block>{<block_content>
								<if_stmt><if>if <condition>(<expr><name><name>ec</name><operator>-&gt;</operator><name>es</name><operator>-&gt;</operator><name>str</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
									<break>break;</break></block_content></block></if></if_stmt>
							</block_content>}</block></for>
							<expr_stmt><expr><name><name>ec</name><operator>-&gt;</operator><name>es</name><operator>-&gt;</operator><name>str</name><operator>-&gt;</operator><name>len</name></name> <operator>-=</operator> <operator>(</operator><name><name>ec</name><operator>-&gt;</operator><name>es</name><operator>-&gt;</operator><name>str</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name>i</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
							<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>ec</name><operator>-&gt;</operator><name>es</name><operator>-&gt;</operator><name>str</name><operator>-&gt;</operator><name>len</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
							<block>{<block_content>
								<if_stmt><if>if <condition>(<expr><name><name>ec</name><operator>-&gt;</operator><name>es</name><operator>-&gt;</operator><name>str</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
									<break>break;</break></block_content></block></if></if_stmt>
							</block_content>}</block></for>
							<expr_stmt><expr><name><name>ec</name><operator>-&gt;</operator><name>es</name><operator>-&gt;</operator><name>indent</name></name><operator>++</operator></expr>;</expr_stmt>
						</block_content>}</block>
						<break>break;</break>
					<case>case <expr><name>EXPLAIN_FORMAT_XML</name></expr>:</case>
						<block>{<block_content>
							<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

							<expr_stmt><expr><name><name>ec</name><operator>-&gt;</operator><name>es</name><operator>-&gt;</operator><name>str</name><operator>-&gt;</operator><name>len</name></name><operator>--</operator></expr>;</expr_stmt>
							<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>ec</name><operator>-&gt;</operator><name>es</name><operator>-&gt;</operator><name>str</name><operator>-&gt;</operator><name>len</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
							<block>{<block_content>
								<if_stmt><if>if <condition>(<expr><name><name>ec</name><operator>-&gt;</operator><name>es</name><operator>-&gt;</operator><name>str</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
									<break>break;</break></block_content></block></if></if_stmt>
							</block_content>}</block></for>
							<expr_stmt><expr><name><name>ec</name><operator>-&gt;</operator><name>es</name><operator>-&gt;</operator><name>str</name><operator>-&gt;</operator><name>len</name></name> <operator>-=</operator> <operator>(</operator><name><name>ec</name><operator>-&gt;</operator><name>es</name><operator>-&gt;</operator><name>str</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt>
							<expr_stmt><expr><name><name>ec</name><operator>-&gt;</operator><name>es</name><operator>-&gt;</operator><name>indent</name></name><operator>++</operator></expr>;</expr_stmt>
						</block_content>}</block>
						<break>break;</break>
					<case>case <expr><name>EXPLAIN_FORMAT_YAML</name></expr>:</case>
						<expr_stmt><expr><name><name>ec</name><operator>-&gt;</operator><name>es</name><operator>-&gt;</operator><name>indent</name></name><operator>++</operator></expr>;</expr_stmt>
						<break>break;</break>
				</block_content>}</block></switch>
				<if_stmt><if>if <condition>(<expr><name><name>ocstate</name><operator>-&gt;</operator><name>useEaCounters</name></name></expr>)</condition>
				<block>{<block_content>
					<decl_stmt><decl><type><name>OIndexNumber</name></type> <name>ix_num</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>BitmapIndexScan</name> <modifier>*</modifier></type><name>bm_scan</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>OBitmapHeapPlanState</name> <modifier>*</modifier></type><name>o_bm_state</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>OTableDescr</name> <modifier>*</modifier></type><name>descr</name> <init>= <expr><name><name>ec</name><operator>-&gt;</operator><name>descr</name></name></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>OEACallsCounters</name> <modifier>*</modifier></type><name>eaCounters</name></decl>;</decl_stmt>

					<expr_stmt><expr><name>bm_scan</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>BitmapIndexScan</name> <operator>*</operator><operator>)</operator> <name><name>planstate</name><operator>-&gt;</operator><name>plan</name></name><operator>)</operator></expr>;</expr_stmt>
					<expr_stmt><expr><name>o_bm_state</name> <operator>=</operator> <operator>(</operator><name>OBitmapHeapPlanState</name> <operator>*</operator><operator>)</operator> <name><name>ocstate</name><operator>-&gt;</operator><name>o_plan_state</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>eaCounters</name> <operator>=</operator> <name><name>o_bm_state</name><operator>-&gt;</operator><name>eaCounters</name></name></expr>;</expr_stmt>
					<for>for <control>(<init><expr><name>ix_num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ix_num</name> <operator>&lt;</operator> <name><name>descr</name><operator>-&gt;</operator><name>nIndices</name></name></expr>;</condition> <incr><expr><name>ix_num</name><operator>++</operator></expr></incr>)</control>
					<block>{<block_content>
						<decl_stmt><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>indexDescr</name> <init>= <expr><name><name>descr</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>ix_num</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

						<if_stmt><if>if <condition>(<expr><name><name>indexDescr</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>reloid</name></name> <operator>==</operator> <name><name>bm_scan</name><operator>-&gt;</operator><name>indexid</name></name></expr>)</condition><block type="pseudo"><block_content>
							<break>break;</break></block_content></block></if></if_stmt>
					</block_content>}</block></for>
					<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>ix_num</name> <operator>&lt;</operator> <name><name>descr</name><operator>-&gt;</operator><name>nIndices</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>eanalyze_counters_explain</name><argument_list>(<argument><expr><name>descr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>eaCounters</name><index>[<expr><name>ix_num</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ec</name><operator>-&gt;</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<switch>switch <condition>(<expr><name><name>ec</name><operator>-&gt;</operator><name>es</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition>
				<block>{<block_content>
					<case>case <expr><name>EXPLAIN_FORMAT_TEXT</name></expr>:</case>
						<expr_stmt><expr><name><name>ec</name><operator>-&gt;</operator><name>es</name><operator>-&gt;</operator><name>indent</name></name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
						<break>break;</break>
					<case>case <expr><name>EXPLAIN_FORMAT_JSON</name></expr>:</case>
					<case>case <expr><name>EXPLAIN_FORMAT_XML</name></expr>:</case>
					<case>case <expr><name>EXPLAIN_FORMAT_YAML</name></expr>:</case>
						<expr_stmt><expr><call><name>ExplainCloseGroup</name><argument_list>(<argument><expr><literal type="string">"Plan"</literal></expr></argument>, <argument><expr><literal type="string">"Plan"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name><name>ec</name><operator>-&gt;</operator><name>es</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
				</block_content>}</block></switch>
				<break>break;</break>
			</block_content>}</block>
		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"can't explain node: %d"</literal></expr></argument>, <argument><expr><name><name>planstate</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>planstate_tree_walker</name><argument_list>(<argument><expr><name>planstate</name></expr></argument>, <argument><expr><name>o_explain_node</name></expr></argument>, <argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<switch>switch <condition>(<expr><name><name>planstate</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>T_BitmapOrState</name></expr>:</case>
			<block>{<block_content>
				<expr_stmt><expr><name><name>ec</name><operator>-&gt;</operator><name>es</name><operator>-&gt;</operator><name>indent</name></name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>
		<case>case <expr><name>T_BitmapAndState</name></expr>:</case>
			<expr_stmt><expr><name><name>ec</name><operator>-&gt;</operator><name>es</name><operator>-&gt;</operator><name>indent</name></name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<break>break;</break>
	</block_content>}</block></switch>
	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Explains custom scan.
 */</comment>
<function><type><name>void</name></type>
<name>o_explain_custom_scan</name><parameter_list>(<parameter><decl><type><name>CustomScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>ancestors</name></decl></parameter>, <parameter><decl><type><name>ExplainState</name> <modifier>*</modifier></type><name>es</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OCustomScanState</name> <modifier>*</modifier></type><name>ocstate</name> <init>= <expr><operator>(</operator><name>OCustomScanState</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTableDescr</name> <modifier>*</modifier></type><name>descr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>indexName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>StringInfoData</name></type> <name>title</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>descr</name> <operator>=</operator> <call><name>relation_get_descr</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ss_currentRelation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ocstate</name><operator>-&gt;</operator><name>o_plan_state</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>O_IndexPlan</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OIndexPlanState</name> <modifier>*</modifier></type><name>ix_plan_state</name> <init>=
		<expr><operator>(</operator><name>OIndexPlanState</name> <operator>*</operator><operator>)</operator> <name><name>ocstate</name><operator>-&gt;</operator><name>o_plan_state</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>backward</name> <init>= <expr><operator>(</operator><name><name>ix_plan_state</name><operator>-&gt;</operator><name>ostate</name><operator>.</operator><name>scanDir</name></name> <operator>==</operator>
								<name>BackwardScanDirection</name><operator>)</operator></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>direction</name> <init>= <expr><ternary><condition><expr><operator>!</operator><name>backward</name></expr> ?</condition><then> <expr><literal type="string">"Forward"</literal></expr> </then><else>: <expr><literal type="string">"Backward"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>indexName</name> <operator>=</operator> <name><name>descr</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name><name>ix_plan_state</name><operator>-&gt;</operator><name>ostate</name><operator>.</operator><name>ixNum</name></name></expr>]</index></name><operator>-&gt;</operator><name><name>name</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>

		<switch>switch <condition>(<expr><name><name>es</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>EXPLAIN_FORMAT_TEXT</name></expr>:</case>
				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>title</name></expr></argument>, <argument><expr><literal type="string">"%s index %sscan of"</literal></expr></argument>, <argument><expr><name>direction</name></expr></argument>,
								 <argument><expr><ternary><condition><expr><name><name>ix_plan_state</name><operator>-&gt;</operator><name>ostate</name><operator>.</operator><name>onlyCurIx</name></name></expr> ?</condition><then> <expr><literal type="string">"only "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>ExplainPropertyText</name><argument_list>(<argument><expr><name><name>title</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>indexName</name></expr></argument>, <argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>show_scan_qual</name><argument_list>(<argument><expr><name><name>ix_plan_state</name><operator>-&gt;</operator><name>stripped_indexquals</name></name></expr></argument>, <argument><expr><literal type="string">"Conds"</literal></expr></argument>,
							   <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name></name></expr></argument>, <argument><expr><name>ancestors</name></expr></argument>, <argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>EXPLAIN_FORMAT_XML</name></expr>:</case>
			<case>case <expr><name>EXPLAIN_FORMAT_YAML</name></expr>:</case>
			<case>case <expr><name>EXPLAIN_FORMAT_JSON</name></expr>:</case>
				<expr_stmt><expr><call><name>ExplainPropertyText</name><argument_list>(<argument><expr><literal type="string">"Scan Direction"</literal></expr></argument>, <argument><expr><name>direction</name></expr></argument>, <argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>ExplainPropertyText</name><argument_list>(<argument><expr><literal type="string">"Index Name"</literal></expr></argument>, <argument><expr><name>indexName</name></expr></argument>, <argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>ix_plan_state</name><operator>-&gt;</operator><name>ostate</name><operator>.</operator><name>onlyCurIx</name></name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ExplainPropertyText</name><argument_list>(<argument><expr><literal type="string">"Custom Scan Subtype"</literal></expr></argument>, <argument><expr><literal type="string">"Index Only Scan"</literal></expr></argument>,
										<argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ExplainPropertyText</name><argument_list>(<argument><expr><literal type="string">"Custom Scan Subtype"</literal></expr></argument>, <argument><expr><literal type="string">"Index Scan"</literal></expr></argument>, <argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
				<expr_stmt><expr><call><name>show_scan_qual</name><argument_list>(<argument><expr><name><name>ix_plan_state</name><operator>-&gt;</operator><name>stripped_indexquals</name></name></expr></argument>, <argument><expr><literal type="string">"Index Cond"</literal></expr></argument>,
							   <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name></name></expr></argument>, <argument><expr><name>ancestors</name></expr></argument>, <argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
		</block_content>}</block></switch>

		<if_stmt><if>if <condition>(<expr><name><name>ix_plan_state</name><operator>-&gt;</operator><name>stripped_indexquals</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>show_instrumentation_count</name><argument_list>(<argument><expr><literal type="string">"Rows Removed by Index Recheck"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,
									   <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name></name></expr></argument>, <argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>qual</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>show_instrumentation_count</name><argument_list>(<argument><expr><literal type="string">"Rows Removed by Filter"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
									   <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name></name></expr></argument>, <argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>ocstate</name><operator>-&gt;</operator><name>o_plan_state</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>O_BitmapHeapPlan</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OBitmapHeapPlanState</name> <modifier>*</modifier></type><name>bitmap_state</name> <init>=
		<expr><operator>(</operator><name>OBitmapHeapPlanState</name> <operator>*</operator><operator>)</operator> <name><name>ocstate</name><operator>-&gt;</operator><name>o_plan_state</name></name></expr></init></decl>;</decl_stmt>

		<switch>switch <condition>(<expr><name><name>es</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>EXPLAIN_FORMAT_TEXT</name></expr>:</case>
				<expr_stmt><expr><call><name>appendStringInfoSpaces</name><argument_list>(<argument><expr><name><name>es</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>es</name><operator>-&gt;</operator><name>indent</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name><name>es</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"Bitmap heap scan\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>EXPLAIN_FORMAT_XML</name></expr>:</case>
			<case>case <expr><name>EXPLAIN_FORMAT_YAML</name></expr>:</case>
			<case>case <expr><name>EXPLAIN_FORMAT_JSON</name></expr>:</case>
				<expr_stmt><expr><call><name>ExplainPropertyText</name><argument_list>(<argument><expr><literal type="string">"Custom Scan Subtype"</literal></expr></argument>, <argument><expr><literal type="string">"Bitmap Heap Scan"</literal></expr></argument>, <argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
		</block_content>}</block></switch>

		<expr_stmt><expr><call><name>show_scan_qual</name><argument_list>(<argument><expr><name><name>bitmap_state</name><operator>-&gt;</operator><name>bitmapqualorig</name></name></expr></argument>, <argument><expr><literal type="string">"Recheck Cond"</literal></expr></argument>,
					   <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name></name></expr></argument>, <argument><expr><name>ancestors</name></expr></argument>, <argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>bitmap_state</name><operator>-&gt;</operator><name>bitmapqualorig</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>show_instrumentation_count</name><argument_list>(<argument><expr><literal type="string">"Rows Removed by Index Recheck"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,
									   <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name></name></expr></argument>, <argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>qual</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>show_instrumentation_count</name><argument_list>(<argument><expr><literal type="string">"Rows Removed by Filter"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
									   <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name></name></expr></argument>, <argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>bitmap_state</name><operator>-&gt;</operator><name>bitmapqualplanstate</name></name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>OExplainContext</name></type> <name>ec</name></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>ExplainOpenGroup</name><argument_list>(<argument><expr><literal type="string">"Plans"</literal></expr></argument>, <argument><expr><literal type="string">"Plans"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ec</name><operator>.</operator><name>ancestors</name></name> <operator>=</operator> <call><name>list_copy</name><argument_list>(<argument><expr><name>ancestors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ec</name><operator>.</operator><name>es</name></name> <operator>=</operator> <name>es</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ec</name><operator>.</operator><name>ocstate</name></name> <operator>=</operator> <name>ocstate</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ec</name><operator>.</operator><name>descr</name></name> <operator>=</operator> <name>descr</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>o_explain_node</name><argument_list>(<argument><expr><name><name>bitmap_state</name><operator>-&gt;</operator><name>bitmapqualplanstate</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ExplainCloseGroup</name><argument_list>(<argument><expr><literal type="string">"Plans"</literal></expr></argument>, <argument><expr><literal type="string">"Plans"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>ocstate</name><operator>-&gt;</operator><name>useEaCounters</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>eanalyze_counters_explain</name><argument_list>(<argument><expr><name>descr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ocstate</name><operator>-&gt;</operator><name>eaCounters</name></name></expr></argument>, <argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
</unit>
