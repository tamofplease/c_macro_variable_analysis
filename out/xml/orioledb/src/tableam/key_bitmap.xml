<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/orioledb/src/tableam/key_bitmap.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * key_bitmap.c
 *		Routines for bitmap scan of orioledb table
 *
 * Copyright (c) 2021-2022, Oriole DB Inc.
 *
 * IDENTIFICATION
 *	  contrib/orioledb/src/tableam/key_bitmap.c
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"orioledb.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"btree/io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"btree/iterator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"btree/page_chunks.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tableam/bitmap_scan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tableam/index_scan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tuple/slot.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib/rbtree.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>bm_rbt_comparator</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RBTNode</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RBTNode</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>bm_rbt_combiner</name><parameter_list>(<parameter><decl><type><name>RBTNode</name> <modifier>*</modifier></type><name>existing</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RBTNode</name> <modifier>*</modifier></type><name>newdata</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>RBTNode</name> <modifier>*</modifier></type><name>bm_rbt_allocfunc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>bm_rbt_freefunc</name><parameter_list>(<parameter><decl><type><name>RBTNode</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HIGH_PART_MASK</name></cpp:macro>	<cpp:value>(0xFFFFFFFFFFFFFC00)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOW_PART_MASK</name></cpp:macro>	<cpp:value>(0x00000000000003FF)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITMAP_SIZE</name></cpp:macro>		<cpp:value>0x80</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>RBTNode</name></type>		<name>rbtnode</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type>		<name>key</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>bitmap</name></decl>;</decl_stmt>
}</block></struct></type> <name>OKeyBitmapRBTNode</name>;</typedef>

<function><type><name>RBTree</name> <modifier>*</modifier></type>
<name>o_keybitmap_create</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>rbt_create</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OKeyBitmapRBTNode</name></expr></argument>)</argument_list></sizeof></expr></argument>,
					  <argument><expr><name>bm_rbt_comparator</name></expr></argument>,
					  <argument><expr><name>bm_rbt_combiner</name></expr></argument>,
					  <argument><expr><name>bm_rbt_allocfunc</name></expr></argument>,
					  <argument><expr><name>bm_rbt_freefunc</name></expr></argument>,
					  <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>o_keybitmap_insert</name><parameter_list>(<parameter><decl><type><name>RBTree</name> <modifier>*</modifier></type><name>rbtree</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OKeyBitmapRBTNode</name></type> <name>node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>is_new</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>node</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>.</operator><name>bitmap</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>rbt_insert</name><argument_list>(<argument><expr><name>rbtree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>node</name><operator>.</operator><name>rbtnode</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>o_keybitmap_test</name><parameter_list>(<parameter><decl><type><name>RBTree</name> <modifier>*</modifier></type><name>rbtree</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OKeyBitmapRBTNode</name></type> <name>node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OKeyBitmapRBTNode</name> <modifier>*</modifier></type><name>found</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>node</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>.</operator><name>bitmap</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>found</name> <operator>=</operator> <operator>(</operator><name>OKeyBitmapRBTNode</name> <operator>*</operator><operator>)</operator> <call><name>rbt_find</name><argument_list>(<argument><expr><name>rbtree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>node</name><operator>.</operator><name>rbtnode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>found</name><operator>-&gt;</operator><name>bitmap</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>offset</name> <init>= <expr><operator>(</operator><name>value</name> <operator>&amp;</operator> <name>LOW_PART_MASK</name><operator>)</operator></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>found</name><operator>-&gt;</operator><name>bitmap</name><index>[<expr><name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>offset</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>true</name></expr>;</return></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<return>return <expr><operator>(</operator><name><name>found</name><operator>-&gt;</operator><name>key</name></name> <operator>==</operator> <name>value</name><operator>)</operator></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>o_keybitmap_range_is_valid</name><parameter_list>(<parameter><decl><type><name>RBTree</name> <modifier>*</modifier></type><name>rbtree</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>low</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>high</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OKeyBitmapRBTNode</name></type> <name>lowNode</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OKeyBitmapRBTNode</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>,
				<decl><type ref="prev"/><name>iStart</name></decl>,
				<decl><type ref="prev"/><name>iEnd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name>startMask</name></decl>,
				<decl><type ref="prev"/><name>endMask</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>valid</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>first</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><operator>!</operator><name>valid</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>low</name> <operator>&amp;</operator> <name>HIGH_PART_MASK</name><operator>)</operator> <operator>&lt;=</operator> <operator>(</operator><name>high</name> <operator>&amp;</operator> <name>HIGH_PART_MASK</name><operator>)</operator><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>bool</name></type>		<name>skip_step</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>lowNode</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name>low</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>lowNode</name><operator>.</operator><name>bitmap</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>node</name> <operator>=</operator> <operator>(</operator><name>OKeyBitmapRBTNode</name> <operator>*</operator><operator>)</operator> <call><name>rbt_find_great_equal</name><argument_list>(<argument><expr><name>rbtree</name></expr></argument>,
														  <argument><expr><operator>&amp;</operator><name><name>lowNode</name><operator>.</operator><name>rbtnode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>node</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>node</name><operator>-&gt;</operator><name>bitmap</name></name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>key</name></name> <operator>&gt;=</operator> <name>low</name> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>key</name></name> <operator>&lt;</operator> <name>high</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>valid</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>skip_step</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>skip_step</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>low</name> <operator>&amp;</operator> <name>HIGH_PART_MASK</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>key</name></name> <operator>&amp;</operator> <name>HIGH_PART_MASK</name><operator>)</operator></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>iStart</name> <operator>=</operator> <operator>(</operator><name>low</name> <operator>&amp;</operator> <name>LOW_PART_MASK</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>startMask</name> <operator>=</operator> <literal type="number">0xFF</literal> <operator>&lt;&lt;</operator> <operator>(</operator><operator>(</operator><name>low</name> <operator>&amp;</operator> <name>LOW_PART_MASK</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><name>iStart</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>startMask</name> <operator>=</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>

			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>high</name> <operator>&amp;</operator> <name>HIGH_PART_MASK</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>key</name></name> <operator>&amp;</operator> <name>HIGH_PART_MASK</name><operator>)</operator></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>iEnd</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>high</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <name>LOW_PART_MASK</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>endMask</name> <operator>=</operator> <literal type="number">0xFF</literal> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">7</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>high</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <name>LOW_PART_MASK</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><name>iEnd</name> <operator>=</operator> <name>BITMAP_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>endMask</name> <operator>=</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>iStart</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>iEnd</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<decl_stmt><decl><type><name>uint8</name></type>		<name>mask</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>mask</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>==</operator> <name>iStart</name><operator>)</operator></expr> ?</condition><then> <expr><name>startMask</name></expr> </then><else>: <expr><literal type="number">0xFF</literal></expr></else></ternary></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>iEnd</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>mask</name> <operator>&amp;=</operator> <name>endMask</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>bitmap</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <name>mask</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>valid</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></for>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>valid</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>low</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>key</name></name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>low</name> <operator>+=</operator> <operator>(</operator><literal type="number">1L</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>first</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>valid</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>find_next_offset</name><parameter_list>(<parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minOffset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name>mask</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>i</name> <operator>=</operator> <name>minOffset</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>mask</name> <operator>=</operator> <literal type="number">0xFF</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>minOffset</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>BITMAP_SIZE</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>mask</name> <operator>&amp;=</operator> <name><name>bitmap</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>mask</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type>			<name>result</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>result</name> <operator>=</operator> <name>i</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
			<while>while <condition>(<expr><operator>!</operator><operator>(</operator><name>mask</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>result</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>mask</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			</block_content>}</block></while>
			<return>return <expr><name>result</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>mask</name> <operator>=</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>uint64</name></type>
<name>o_keybitmap_get_next</name><parameter_list>(<parameter><decl><type><name>RBTree</name> <modifier>*</modifier></type><name>rbtree</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>prev</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>found</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OKeyBitmapRBTNode</name></type> <name>lowNode</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OKeyBitmapRBTNode</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RBTreeIterator</name></type> <name>iter</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>lowNode</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>lowNode</name><operator>.</operator><name>bitmap</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>node</name> <operator>=</operator> <operator>(</operator><name>OKeyBitmapRBTNode</name> <operator>*</operator><operator>)</operator> <call><name>rbt_find_great_equal</name><argument_list>(<argument><expr><name>rbtree</name></expr></argument>,
													  <argument><expr><operator>&amp;</operator><name><name>lowNode</name><operator>.</operator><name>rbtnode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>node</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>found</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>node</name><operator>-&gt;</operator><name>bitmap</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>key</name></name> <operator>&gt;=</operator> <name>prev</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<return>return <expr><name><name>node</name><operator>-&gt;</operator><name>key</name></name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><operator>(</operator><name>prev</name> <operator>&amp;</operator> <name>HIGH_PART_MASK</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>key</name></name> <operator>&amp;</operator> <name>HIGH_PART_MASK</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>nextOffset</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>nextOffset</name> <operator>=</operator> <call><name>find_next_offset</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>bitmap</name></name></expr></argument>, <argument><expr><name>prev</name> <operator>&amp;</operator> <name>LOW_PART_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>nextOffset</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<return>return <expr><name><name>node</name><operator>-&gt;</operator><name>key</name></name> <operator>+</operator> <name>nextOffset</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>prev</name> <operator>&amp;</operator> <name>HIGH_PART_MASK</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>key</name></name> <operator>&amp;</operator> <name>HIGH_PART_MASK</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>rbt_begin_iterate</name><argument_list>(<argument><expr><name>rbtree</name></expr></argument>, <argument><expr><name>LeftRightWalk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>.</operator><name>last_visited</name></name> <operator>=</operator> <operator>(</operator><name>RBTNode</name> <operator>*</operator><operator>)</operator> <name>node</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>node</name> <operator>=</operator> <operator>(</operator><name>OKeyBitmapRBTNode</name> <operator>*</operator><operator>)</operator> <call><name>rbt_iterate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>node</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>found</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>node</name><operator>-&gt;</operator><name>bitmap</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<return>return <expr><name><name>node</name><operator>-&gt;</operator><name>key</name></name></expr>;</return>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>nextOffset</name> <init>= <expr><call><name>find_next_offset</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>bitmap</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>nextOffset</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<return>return <expr><name><name>node</name><operator>-&gt;</operator><name>key</name></name> <operator>+</operator> <name>nextOffset</name></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_tree_node</name><parameter_list>(<parameter><decl><type><name>RBTNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OKeyBitmapRBTNode</name> <modifier>*</modifier></type><name>keyNode</name> <init>= <expr><operator>(</operator><name>OKeyBitmapRBTNode</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>left</name></name> <operator>==</operator> <name>node</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>right</name></name> <operator>==</operator> <name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>keyNode</name><operator>-&gt;</operator><name>bitmap</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>keyNode</name><operator>-&gt;</operator><name>bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>free_tree_node</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free_tree_node</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>o_keybitmap_free</name><parameter_list>(<parameter><decl><type><name>RBTree</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>free_tree_node</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>RBTNode</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>tree</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>o_keybitmap_is_empty</name><parameter_list>(<parameter><decl><type><name>RBTree</name> <modifier>*</modifier></type><name>rbtree</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>rbt_leftmost</name><argument_list>(<argument><expr><name>rbtree</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>o_keybitmap_intersect</name><parameter_list>(<parameter><decl><type><name>RBTree</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RBTree</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RBTreeIterator</name></type> <name>iterA</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RBTreeIterator</name></type> <name>iterB</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OKeyBitmapRBTNode</name> <modifier>*</modifier></type><name>nodeA</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OKeyBitmapRBTNode</name> <modifier>*</modifier></type><name>nodeB</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>removing</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>rbt_begin_iterate</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>LeftRightWalk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iterA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rbt_begin_iterate</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>LeftRightWalk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iterB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>nodeB</name> <operator>=</operator> <operator>(</operator><name>OKeyBitmapRBTNode</name> <operator>*</operator><operator>)</operator> <call><name>rbt_iterate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iterB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>nodeA</name> <operator>=</operator> <operator>(</operator><name>OKeyBitmapRBTNode</name> <operator>*</operator><operator>)</operator> <call><name>rbt_iterate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iterA</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<while>while <condition>(<expr><name>nodeB</name> <operator>&amp;&amp;</operator>
			   <operator>(</operator><name><name>nodeB</name><operator>-&gt;</operator><name>key</name></name> <operator>&amp;</operator> <name>HIGH_PART_MASK</name><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><name><name>nodeA</name><operator>-&gt;</operator><name>key</name></name> <operator>&amp;</operator> <name>HIGH_PART_MASK</name><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>nodeB</name> <operator>=</operator> <operator>(</operator><name>OKeyBitmapRBTNode</name> <operator>*</operator><operator>)</operator> <call><name>rbt_iterate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iterB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nodeB</name> <operator>||</operator>
			<operator>(</operator><name><name>nodeB</name><operator>-&gt;</operator><name>key</name></name> <operator>&amp;</operator> <name>HIGH_PART_MASK</name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name><name>nodeA</name><operator>-&gt;</operator><name>key</name></name> <operator>&amp;</operator> <name>HIGH_PART_MASK</name><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>OKeyBitmapRBTNode</name> <modifier>*</modifier></type><name>removed_node</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>removed_node</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OKeyBitmapRBTNode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>removed_node</name></expr></argument>, <argument><expr><name>nodeA</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OKeyBitmapRBTNode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>removing</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>removing</name></expr></argument>, <argument><expr><name>removed_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>(</operator><name><name>nodeA</name><operator>-&gt;</operator><name>key</name></name> <operator>&amp;</operator> <name>HIGH_PART_MASK</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name><name>nodeB</name><operator>-&gt;</operator><name>key</name></name> <operator>&amp;</operator> <name>HIGH_PART_MASK</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>nodeA</name><operator>-&gt;</operator><name>bitmap</name></name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>nodeB</name><operator>-&gt;</operator><name>bitmap</name></name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>nodeA</name><operator>-&gt;</operator><name>key</name></name> <operator>!=</operator> <name><name>nodeB</name><operator>-&gt;</operator><name>key</name></name></expr>)</condition>
				<block>{<block_content>
					<decl_stmt><decl><type><name>OKeyBitmapRBTNode</name> <modifier>*</modifier></type><name>removed_node</name></decl>;</decl_stmt>

					<expr_stmt><expr><name>removed_node</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OKeyBitmapRBTNode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>removed_node</name></expr></argument>, <argument><expr><name>nodeA</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OKeyBitmapRBTNode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>removing</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>removing</name></expr></argument>, <argument><expr><name>removed_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<continue>continue;</continue>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<decl_stmt><decl><type><name>int</name></type>			<name>offset</name> <init>= <expr><operator>(</operator><name><name>nodeA</name><operator>-&gt;</operator><name>key</name></name> <operator>&amp;</operator> <name>LOW_PART_MASK</name><operator>)</operator></expr></init></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>nodeB</name><operator>-&gt;</operator><name>bitmap</name><index>[<expr><name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>offset</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition>
				<block>{<block_content>
					<decl_stmt><decl><type><name>OKeyBitmapRBTNode</name> <modifier>*</modifier></type><name>removed_node</name></decl>;</decl_stmt>

					<expr_stmt><expr><name>removed_node</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OKeyBitmapRBTNode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>removed_node</name></expr></argument>, <argument><expr><name>nodeA</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OKeyBitmapRBTNode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>removing</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>removing</name></expr></argument>, <argument><expr><name>removed_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<continue>continue;</continue>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>nodeB</name><operator>-&gt;</operator><name>bitmap</name></name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>int</name></type>			<name>offset</name> <init>= <expr><operator>(</operator><name><name>nodeB</name><operator>-&gt;</operator><name>key</name></name> <operator>&amp;</operator> <name>LOW_PART_MASK</name><operator>)</operator></expr></init></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>nodeA</name><operator>-&gt;</operator><name>bitmap</name><index>[<expr><name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>offset</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition>
				<block>{<block_content>
					<decl_stmt><decl><type><name>OKeyBitmapRBTNode</name> <modifier>*</modifier></type><name>removed_node</name></decl>;</decl_stmt>

					<expr_stmt><expr><name>removed_node</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OKeyBitmapRBTNode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>removed_node</name></expr></argument>, <argument><expr><name>nodeA</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OKeyBitmapRBTNode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>removing</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>removing</name></expr></argument>, <argument><expr><name>removed_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<continue>continue;</continue>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>nodeA</name><operator>-&gt;</operator><name>bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>nodeA</name><operator>-&gt;</operator><name>bitmap</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>nodeA</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name><name>nodeB</name><operator>-&gt;</operator><name>key</name></name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>bool</name></type>		<name>empty</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

				<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BITMAP_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
				<block>{<block_content>
					<expr_stmt><expr><name><name>nodeA</name><operator>-&gt;</operator><name>bitmap</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;=</operator> <name><name>nodeB</name><operator>-&gt;</operator><name>bitmap</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name><name>nodeA</name><operator>-&gt;</operator><name>bitmap</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>empty</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
				</block_content>}</block></for>

				<if_stmt><if>if <condition>(<expr><name>empty</name></expr>)</condition>
				<block>{<block_content>
					<decl_stmt><decl><type><name>OKeyBitmapRBTNode</name> <modifier>*</modifier></type><name>removed_node</name></decl>;</decl_stmt>

					<expr_stmt><expr><name>removed_node</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OKeyBitmapRBTNode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>removed_node</name></expr></argument>, <argument><expr><name>nodeA</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OKeyBitmapRBTNode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>removing</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>removing</name></expr></argument>, <argument><expr><name>removed_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<continue>continue;</continue>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></while>

	<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>removing</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OKeyBitmapRBTNode</name> <modifier>*</modifier></type><name>search_node</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>OKeyBitmapRBTNode</name> <modifier>*</modifier></type><name>removing_node</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>search_node</name> <operator>=</operator> <operator>(</operator><name>OKeyBitmapRBTNode</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>search_node</name><operator>-&gt;</operator><name>bitmap</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>search_node</name><operator>-&gt;</operator><name>bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>removing_node</name> <operator>=</operator> <operator>(</operator><name>OKeyBitmapRBTNode</name> <operator>*</operator><operator>)</operator> <call><name>rbt_find</name><argument_list>(<argument><expr><name>a</name></expr></argument>,
													   <argument><expr><operator>(</operator><name>RBTNode</name> <operator>*</operator><operator>)</operator> <name>search_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rbt_delete</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>(</operator><name>RBTNode</name> <operator>*</operator><operator>)</operator> <name>removing_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>search_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name>removing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>o_keybitmap_union</name><parameter_list>(<parameter><decl><type><name>RBTree</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>RBTree</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RBTreeIterator</name></type> <name>iterB</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OKeyBitmapRBTNode</name> <modifier>*</modifier></type><name>nodeB</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>rbt_begin_iterate</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>LeftRightWalk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iterB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>nodeB</name> <operator>=</operator> <operator>(</operator><name>OKeyBitmapRBTNode</name> <operator>*</operator><operator>)</operator> <call><name>rbt_iterate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iterB</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>bool</name></type>		<name>is_new</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>rbt_insert</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>nodeB</name><operator>-&gt;</operator><name>rbtnode</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>bm_rbt_comparator</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RBTNode</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RBTNode</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>OKeyBitmapRBTNode</name> <modifier>*</modifier></type><name>keyA</name> <init>= <expr><operator>(</operator><name>OKeyBitmapRBTNode</name> <operator>*</operator><operator>)</operator> <name>a</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>OKeyBitmapRBTNode</name> <modifier>*</modifier></type><name>keyB</name> <init>= <expr><operator>(</operator><name>OKeyBitmapRBTNode</name> <operator>*</operator><operator>)</operator> <name>b</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type>		<name>va</name> <init>= <expr><name><name>keyA</name><operator>-&gt;</operator><name>key</name></name> <operator>&amp;</operator> <name>HIGH_PART_MASK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type>		<name>vb</name> <init>= <expr><name><name>keyB</name><operator>-&gt;</operator><name>key</name></name> <operator>&amp;</operator> <name>HIGH_PART_MASK</name></expr></init></decl>;</decl_stmt>

	<return>return <expr><ternary><condition><expr><name>va</name> <operator>&gt;</operator> <name>vb</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><ternary><condition><expr><name>va</name> <operator>&lt;</operator> <name>vb</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>node_make_bitmap</name><parameter_list>(<parameter><decl><type><name>OKeyBitmapRBTNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>offset</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>bitmap</name></name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name>BITMAP_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>key</name></name> <operator>&amp;</operator> <name>LOW_PART_MASK</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>bitmap</name><index>[<expr><name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>]</index></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>offset</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>key</name></name> <operator>&amp;=</operator> <name>HIGH_PART_MASK</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>bm_rbt_combiner</name><parameter_list>(<parameter><decl><type><name>RBTNode</name> <modifier>*</modifier></type><name>existing</name></decl></parameter>,
				<parameter><decl><type><specifier>const</specifier> <name>RBTNode</name> <modifier>*</modifier></type><name>newdata</name></decl></parameter>,
				<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OKeyBitmapRBTNode</name> <modifier>*</modifier></type><name>old</name> <init>= <expr><operator>(</operator><name>OKeyBitmapRBTNode</name> <operator>*</operator><operator>)</operator> <name>existing</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OKeyBitmapRBTNode</name> <modifier>*</modifier></type><name>new</name> <init>= <expr><operator>(</operator><name>OKeyBitmapRBTNode</name> <operator>*</operator><operator>)</operator> <name>newdata</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>old</name><operator>-&gt;</operator><name>bitmap</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>new</name><operator>-&gt;</operator><name>bitmap</name></name> <operator>&amp;&amp;</operator> <name><name>new</name><operator>-&gt;</operator><name>key</name></name> <operator>==</operator> <name><name>old</name><operator>-&gt;</operator><name>key</name></name></expr>)</condition><block type="pseudo"><block_content>
			<return>return;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>node_make_bitmap</name><argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>new</name><operator>-&gt;</operator><name>bitmap</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>offset</name> <init>= <expr><name><name>new</name><operator>-&gt;</operator><name>key</name></name> <operator>&amp;</operator> <name>LOW_PART_MASK</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>old</name><operator>-&gt;</operator><name>bitmap</name><index>[<expr><name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>]</index></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>offset</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BITMAP_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>old</name><operator>-&gt;</operator><name>bitmap</name><index>[<expr><name>i</name></expr>]</index></name> <operator>|=</operator> <name><name>new</name><operator>-&gt;</operator><name>bitmap</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RBTNode</name> <modifier>*</modifier></type>
<name>bm_rbt_allocfunc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RBTNode</name>    <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OKeyBitmapRBTNode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>bm_rbt_freefunc</name><parameter_list>(<parameter><decl><type><name>RBTNode</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
